@&#MAIN-TITLE@&#Q-aware: Quality of service based cloud resource provisioning

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Cloud workloads have been analyzed and clustered through workload patterns.


                        
                        
                           
                           QoS metrics of each workload have been identified.


                        
                        
                           
                           We have analyzed the effect of number of workloads and resources on execution time and cost.


                        
                        
                           
                           Proposed technique demonstrates the minimization of cost and time simultaneously while adhering to workload deadline.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Cloud metrics

Workload patterns

Resource provisioning

Cloud computing

Cloud workloads

Quality of service

@&#ABSTRACT@&#


               
               
                  Provisioning of appropriate resources to cloud workloads depends on the Quality of Service (QoS) requirements of cloud workloads. Based on application requirements of cloud users, discovery and allocation of best workload – resource pair is an optimization problem. Acceptable QoS cannot be provided to the cloud users until provisioning of resources is offered as a crucial ability. QoS parameters based resource provisioning technique is therefore required for efficient provisioning of resources. In this paper, QoS metric based resource provisioning technique has been proposed. The proposed technique caters to provisioned resource distribution and scheduling of resources. The main aim of this research work is to analyze the workloads, categorize them on the basis of common patterns and then provision the cloud workloads before actual scheduling. The experimental results demonstrate that QoS metric based resource provisioning technique is efficient in reducing execution time and execution cost of cloud workloads along with other QoS parameters.
               
            

@&#INTRODUCTION@&#

Cloud Computing offers pay per use based services such as Infrastructure as a Service, Platform as a Service and Software as a Service through different Cloud providers [1]. Cloud provider provides the data and computing resources dynamically to the Cloud users based on their requirements over the internet. This is a challenging task to maintain the required Quality of Service (QoS) level of service to fulfill the expectations of Cloud consumers [2]. The complexity of management of resources in Clouds is increasing day by day, so an efficient technique is required for management of resources. To solve this problem, there should be a focus on provisioning before actual scheduling of resources. Resource provisioning is the practice of implementing policies and procedures that improve the efficiency of computing resources in such a way so as to reduce the execution time and cost while considering other QoS parameters like availability, network bandwidth, serviceability and customer confidence level. Further resource scheduling executes workloads to the provisioned heterogeneous resources based on scheduling decisions [3].

Presently, provisioning of resources can be done in two ways: On-demand (providing resources quickly to urgent workloads) and long term reservation (reserving resources for later usage). In on-demand criteria, executing too many workloads on a single resource will cause problem of interference which leads to performance degradation and over provisioning. In long term reservation, many resources are in idle state which leads to under provisioning. Under provisioning and over provisioning of resources leads to wastage of time and resources that increases cost [4]. To handle this problem, there is a need of resource provisioning techniques for better management of resources to: (i) identify the Cloud workloads, (ii) analyze the Cloud workloads to find their QoS requirements, (iii) classification of Cloud workloads and (iv) provisioning of resources to the workloads without violation of Service Level Agreement (SLA). The scheduling of resources is generally done on best effort approach, which is not efficient in terms of cost and execution time [5]. For example: we cannot execute the second workload until the first workload completes which leads to the problem of starvation. To solve this problem, we need provisioning of resources before actual resource scheduling, in which second workload will be executed immediately after the completion of first workload. Thus, the waiting time of workload can be reduced to a large extent.

The motivation of this research work stems from the challenges in managing and an efficient utilization of the resources. In real life situations, there are many constraints including (i) satisfying the QoS (ii) reducing the resource’s cost, (iii) minimizing the workload’s execution time by meeting the desired deadline described by cloud consumer and (iv) improves customer satisfaction. To provision the resources along with the QoS constraints is the main objective of this research work. This research paper proposes QoS metric based resource provisioning technique in which resources are provisioned by clustering of workloads after assigning weights to quality attributes of each workload. By using the proposed technique, real resource provisioning and resource scheduling can be predicted. Thus the queuing time, over and under-utilization of resource can be avoided or be assuaged.

The paper is structured as follows: In Section 2, related work of cloud workloads and resource provisioning has been presented. Workload identification and analysis has been presented in Section 3. In Section 4, Resource provisioning technique has been proposed. Experimental setup and results has been presented in Section 5. In Section 6, conclusions and the future scope have been presented.

@&#RELATED WORK@&#

Provisioning of resources for Cloud workloads is an important part of resource management in cloud. The research work done in the area of cloud workloads and resource provisioning is described in this section.

Cloud workload is an abstraction of work of that instance or set of instances that are going to be executed. For example: Running a web service is a valid workload [4]. Mian et al. [6] proposed cost based framework to find the execution cost of workload executing on different computing resources which considers and balances Service Level Agreement (SLA) penalties and cost of resource to predict the performance of framework without considering execution time. Smith et al. [7] described impact of various Cloud workloads on energy consumption of resources to predict and monitor the energy consumption of different resources accurately but not considered execution time and cost. Ciciani et al. [8] proposed an autonomic resource provisioning technique to predict the forecasting resource requirement and chances of SLA violations but not considering QoS requirements like execution time, cost etc.

Breternitz et al. [9] presented Synthetic Workload Application Toolkit which creates, deploys, provisions and executes the Cloud workloads automatically without considering SLA. Delimitrou et al. [10] proposed a workload based approach iBench to find the impact of resource scheduling and resource provisioning to efficiently design an application with maximum resource utilization but not considered execution time and cost. Zhang et al. [11] found various research issues of dynamic management of Cloud workload in heterogeneous environments of Cloud to fulfill demand of cloud user and reduce resource consumption and response time. Son et al. [12] proposed SLA based resource allocation framework to balance the load on available resources without violation of SLA but not considered execution time and cost. LaCurts [13] proposed an approach “Cicada” used to predict the Cloud workload to reduce the execution time and SLA violations only for homogeneous workloads. Chang et al. [14] proposed neural network model based resource allocation mechanism to predict the Cloud workload for efficient resource provisioning without considering heterogeneous workloads.

Here existing work of workloads in the context of Cloud has been presented. They have not considered heterogeneous cloud workloads and QoS requirements like cost, execution time simultaneously [3,4]. To develop an efficient resource provisioning technique, there is need to identify the heterogeneous Cloud workloads and their QoS requirements.

The resource provisioning techniques in distributed systems frequently have the objectives of distributing the workload on resources and increasing their resource consumption but reducing the time of workload execution. Existing resource provisioning techniques have been presented in this section.

Quiroz et al. [15] proposed a distributed approach to determine resource scheduling of workload on innovativeness clouds. To handle with erroneous request for resource that causes to over utilization of resources delivered by cloud workload request, their approach has revealed a design-based technique for approximating the workload execution time specified it is scheduling but the behavior of a particular workload was not identified. Nguyen Van et al. [16] addresses the issue of autonomic VM administration for presenting cloud services although improving an overall effectiveness function that adds the functional charge of the cloud provider and the workload level SLAs. This approach tries to improve the efficiency of the running workloads with an optimum functional charge for the cloud provider and controls the scaling of workloads executing automatically and effectively. Silva et al. [17] offered a heuristic based mechanism for consuming lesser amount of resources for execution of cloud workload with fixed amount of applications so that better utilization and performance can be attained within a predefined budget. Though, nature of workloads coming is random and dynamic; therefore prediction of optimal number of resources required is difficult to estimate along with the fulfillment of SLAs in desired deadline. Caron et al. [18] presented workload pattern based prediction technique for cloud workload. Subsequently there are some hindrances such as, cloud setup duration, throughput enhancement and receptiveness could be attained during allocation and de-allocation of resources if the framework can forecast and measure in early to adjust with the fluctuating workload. In this pattern matching technique is proposed to find out the similar patterns of last usage but it is unable to estimate the coming values for future based on current pattern for taking scaling decisions dynamically.

Chaisiri et al. [19] proposed stochastic programming model based optimal cloud resource provisioning approach and considering demand and price uncertainty. This approach reduces the execution cost of resources only without considering execution time. Vecchiola et al. [20] described deadline based resource provisioning technique for execution of scientific workloads through Aneka in hybrid Cloud environment. This technique decreases the makspan of workloads only without considering execution cost of resources. Feng et al. [21] proposed Queuing Theory based resource provisioning mechanism by considering SLA based dynamic allocation of resources and arrival rates of applications. This technique maximizes revenue without taking care of execution time.

Lua et al. [22] proposed QoS based autonomous SLA model of violation-filtering for IaaS and PaaS applying a SLA appraising many ways & penalty architecture and presenting a resource provisioning mechanism to manage resource efficiently without specifying the QoS parameters. Wu et al. [23] proposed SLA based provisioning technique to reduce resource price and SLA deviations. The management of customer requests, mapping them with resources is defined along with the supervision of different types of workloads by considering QoS such as execution time. Li et al. [24] presented a virtual environment based framework for better supervision of infrastructure which offers separation among workloads running concurrently with similar resources and sanctions dynamic horizontal and vertical scalability to realize Service Level Objectives. But it is difficult to allocate resource efficiently due to variation of execution time of different workloads. Chieu et al. [25] proposed a framework for dynamic workloads based on threshold number of dynamic periods for dynamically assigning and quickly provisioning of virtual resources to users based on their QoS requirements. Herbst et al. [26] described self-adaptive resource provisioning approach to find the appropriate predicting ways for a given perspective though the use of decision tree. This approach considers QoS parameters like relative error and SLA violation and minimizes both the parameters but does not consider execution time and execution cost. Qavami et al. [27] proposed a dynamic behavior based resource provisioning technique to assign adequate number of resources to workloads. This approach reduces the execution cost of resources only without considering execution time. Grewal et al. [28] proposed rule based provisioning mechanism to improve the dynamic scalability and minimize the execution cost for the hybrid Cloud environment. It provides better resource utilization under different requirements of priority and avoids over-provisioning but there is a problem of under-provisioning of resources [33]. Zhang et al. [29] studied resource allocation in a Cloud market through the auction of Virtual Machine (VM) instances by introducing combinatorial auctions of heterogeneous VMs, and models dynamic VM provisioning. Auction based dynamic resource provisioning is effective in CPU utilization but lack of SLA [34]. García et al. [30] proposed SLA based resource provisioning technique for dynamic resources which reduces execution cost without considering execution time. Horri et al. [31] presented energy based resource allocation mechanism to reduce power consumption only but not consider execution time and cost. Serrano et al. [32] proposed SLA aware QoS based resource provisioning technique to minimize the cost of execution of workloads without considering execution time. Our proposed QoS metric based resource provisioning technique (QoS Metric) has been compared with existing resource provisioning techniques as described in Table 1
                           .

None of the existing resource provisioning techniques considers heterogeneous Cloud workloads, and cost and time of workload execution simultaneously along with other above mentioned QoS parameters. Here various resource provisioning mechanisms are presented and these mechanisms are using parameters such as energy, CPU utilization, and relative error but do not considered QoS metrics to measure QoS parameters of every workload for resource provisioning. Due to this the current resource management services are become complex. Consequently, when workloads are struggling for resources, the number of conflicts can increase which leads to complexity. Our proposed QoS metric based resource provisioning technique provisions resources for both homogenous and heterogeneous Cloud workloads after their proper classification.

Approaches used in the past cloud resource provisioning techniques have not been very effective in delivering resourceful and actual outcomes to handle the heterogeneous resources. Therefore in this work, the heterogeneous cloud workloads based on different QoS requirements have been identified and analyzed. Further various workload patterns have been identified and then clustering of workloads has been done based on these workload patterns. After that, re-clustering of clustered workloads has been done through K-Means based clustering algorithm by assigning weights to every quality attribute in each workload through QoS metrics. This research work is an extension of our previous research work [5]. We have extended our metric based workload analysis technique by proposing a QoS metric based resource provisioning technique. Weights have been assigned through metrics that have ensured that the execution of workloads is more effective. The QoS metric based resource provisioning technique reduces the execution cost and time instantaneously. The proposed technique has been verified with the help of a case study in a Cloud simulation environment that demonstrates the reduced execution time and cost.

The aim of workload analysis is to look at different QoS requirements of workloads to determine the feasibility of executing the applications in the Cloud [35]. To successfully provision and schedule workloads, initially we need to identify the Cloud workloads (web server, transactional database, application server, file server etc.) before workload analysis [37]. Based on this, user can design applications which can lead to maximization of the scaling. With the help of this, not only dynamic infrastructure scaling can be achieved but it will reduce the execution time of elastic demand and also throughput of requests is improved. Workloads need to be identified for efficient analysis and classification [5].

The following Cloud workloads have been identified from literature along with their quality attributes [3–14,36]:
                           
                              a.
                              Websites: Freely available information oriented websites for number of cloud consumers and websites for social networking. The Quality Attributes (QAs) for this workload are large amounts of reliable storage, high network bandwidth, performance and high availability.

Technological Computing: It includes bioinformatics, atmospheric modeling, and other numerical computation. The QAs for this workload is computing capacity.

Endeavour Software: It includes email servers, SAP (System Application and Product), enterprise content management. The QAs for this workload are security, high availability, customer confidence level and correctness.

Performance Testing: It includes simulation based testing of performance features of cloud workloads of software which is under development. The QAs for this workload is computing capacity and performance.

Online Transaction Processing: It includes online insurance policies and online banking. The QAs for this workload are security, high availability, internet accessibility and usability.

E-Commerce (E-Com): It includes super marketing. The QAs for this workload are variable computing load and customizability.

Central Financial Services: It includes banking and insurance systems. The QAs for this workload are security, high availability, changeability and Integrity.

Storage and Backup Services: It includes storage of data and backup. The QAs for this workload are reliability and persistence.

Productivity Applications: It includes users signing up for mails, word editors. The QAs for this workload are security, latency, network bandwidth and backup of data.

Software/Project Development and Testing: It includes development of web based applications with RSA (Rational Software Architect), MS Visual Studio etc. The QAs for this workload are user self-service rate, flexibility and testing time.

Graphics Oriented Applications: It includes animation and visualization software applications. The QAs for this workload are network bandwidth and latency, data backup and visibility.

Critical Internet Applications: It includes web applications including huge amount of scripting languages. The QAs for this workload are high availability, serviceability and usability.

Mobile Computing Services: It includes Servers to support rich mobile applications. The QAs are portability, high availability and reliability.

The identified workloads have been analyzed through workload patterns. Cloud based workload patterns are used to specify the type of applications that user want to execute. Based on the QoS and other requirements of workloads, pattern with common format will be grouped to reduce the complexity in cloud. The existing workload patterns are required to detect the behavior of various architecture styles but there is need of some standard architectural pattern which is used to find the impact of architectural decisions on non-functional and functional requirements of workloads. The relation between cloud workload patterns and cloud workloads will designate important aspects and store their abstracted information. For successfully designing the cloud application, there is need of elastic and short workload patterns corresponding to each workload. To analyse Cloud workload patterns, existing pattern based approaches have been studied. Workload patterns are patterns rotated around the design of automatic systems in the IT (Information Technology) world. The workload patterns identified from the literature [38–46] are given below:
                           
                              (a)
                              On-demand Application Instance – It contains the workloads which require the ability of scale up and scale down. For example: During special occasions, wholesale marketing store sites should be available.

Operative – It includes executing parallel batch jobs or background applications. For example: For analytics processing, background jobs should be running concurrently through schedulers.

Simple Storage – It deals with storage of unstructured data of large quantity. For example: Corporation keeping reports of authorized obedience in backup store.

Structured Storage – It deals with keeping data in structured form generally in tables but not requiring complete relational semantics. For example: To retain a state of web based application, structured storage is required (shopping basket information).

Service Interface (Web service Application Program Interface) – It contains uncovering abilities of workload through user interface and web services. For example: Corporation constructing digital strength administration resolution showing Application Program Interfaces to other web services.

Service-Oriented Integration – It deals with Invocation of an external Web services using Web-standard protocols. For example: Web based applications holding web-hosted to provide services for cooperation quickly.

Messaging – It contains common communications among cloud applications in a consistent, asynchronous and accessible manner. For example: Web based application is used to convey a message to scheduler for execution of a particular job.

Cloud Deployment – Applications are deploying with QoS requirements like high availability and dynamic scalability. For example: Wholesaler store using web portal to scale down automatically when usage go beyond threshold and scale down as required.

Design for Operations – How to develop a cloud based application which provides the function of logging and health status. For example: Design cloud based application which is user friendly through efficient Graphical User Interface (GUI).

Service Instance Management – It includes the functions to start, suspend and stop cloud based applications and management of configuration of service. For example: An administrator of web application managing state of a Cloud based application through service portal.

Management Alerts – Forwarding instant texts, emails, or warnings signals about billing details and resource details to allow cloud based applications to forward emails. For example: Auto generated warning on usage of resources.

Service Level Management – Acquire details of consumption of resources of cloud based application like bandwidth, processor time. For example: Observing information of billing and usage of resources of application deployed with billing transparency.

We present a QoS metric based resource provisioning technique based on the QoS requirements of cloud workloads to find the best resource and workload match with reliable cloud services without violation of SLA. QoS metric based proposed resource provisioning technique is shown in Fig. 1
                     . The implementation of the proposed resource provisioning technique provides the way to analyze the QoS requirements and improving user satisfaction by fulfilling their expectations. For resource provisioning, QoS parameters must be described in the form of SLA. The resource provisioning technique comprises of following units:
                        
                           i.
                           Bulk of Workloads: Bulk of Workloads (BoW) are coming for execution and are processed and stored in workload queue.

Workload Resource Manager: Workload Resource Manager (WRM) contains the information about resources, QoS metrics and SLA to provision the resources for execution of workloads based on QoS requirements described by cloud consumer.

SLA Measure: WRM receipts the information from the suitable Service Level Agreement (SLA). After studying and confirming the various QoS constraints which the workload has required, WRM checking the availability of resources.

QoS Metric Data: It contains the information regarding QoS metrics used to calculate weight for clustering of workloads.

Workload Analyzer: The aim of Workload Analyzer is to look at different characteristics of a Cloud workload to determine the feasibility of porting the application in the Cloud. The different Cloud workloads have different set of QoS requirements and characteristics. This analysis also provides input to execution method, Cloud service choice and a preliminary business worth valuation (Cost benefit analysis). All the workloads are submitted to WRM are analyzed based on their QoS requirements. For QoS, the required workload patterns are identified for clustering of workloads then identifies the metrics required to assign the weights based on level of measurement (see Table 7
                              
                              
                              
                              
                              
                              ) described in QoS requirements specified in SLA. K-Means based clustering algorithm is used to re-clustering the workloads for execution on different set of resources.

Resource Information: The resource details include the number of CPU using, size of memory, cost of resources, type of resources and number of resources. All the common resources are stored in resource pool.

Resource Provisionor: It provides the demanded resources to the workload for their execution in Cloud environment only if required resources are available in resource pool. If the required resources are not available according to QoS requirement then the WRM asks to resubmit the workload with QoS requirement in the form of SLA. After the provisioning of resources, workloads are submitted to resource scheduler. Then the resource scheduler will ask to submit the workload for resources provisioned. After this resource scheduler will sent back the results to WRM, Cloud workload contains the resource information.

Resource Scheduler: It will execute all the workloads on provisioned resources efficiently.

Workload Resource Manager (WRM) accomplishes the responsibilities in QoS Metric based Resource Provisioning (RP): Management of Service Level Agreement, Resource Information and Workload Information. WRM continually checks the status of resources provisioned, workloads queued and SLA deviation. The objective of our novel technique is to provision the resources to Cloud consumer without violation of SLA. The workloads submitted should be executed within their budget and deadline along with other QoS parameters as described by Cloud consumer. The QoS metric based resource provisioning technique executes the workloads is shown in Fig. 2
                        . Workload submitted by user to resource provisioning technique is stored into bulk of workloads for their execution. All the submitted workloads are analyzed based on their QoS requirements described in terms of SLA. Workload patterns are identified for better classification of workloads then pattern based clustering of workloads is done. QoS metrics for every QoS requirement of each workload are identified. QoS metrics are used to calculate the level of measurement (q-value) for each quality attribute of every workload. Based on level of measurement (q-value) and other importance of the attribute, weights for every cloud workload are calculated. After that, workloads are re-clustered based on K-Means based clustering algorithm for better execution. Calculate the value of fitness function (MQos
                        ) for every workload then compare it with value calculated (MNon-Qos
                        ) by non-QoS based RP (without considering QoS requirements). If the value of MQos
                         (QoS based RP) is lesser than MNon-Qos
                         (non-QoS based RP) then it will provision otherwise analyses the workload again after resubmission of SLA by Cloud consumer. Our proposed approach provides benefits like: (1) Avoid under provisioning and over provisioning of resources through clustering of workloads. Thus the clustering of workloads enables better resource utilization and scheduling as compared to the scheduling of single queued workload.

A Cloud provider needs integrated intelligent strategies for provisioning of resources to offer services that are available, reliable and cost-efficient and thus achieve maximum resource utilization. Resource provisioning in Cloud is a complex task that is often compromised due to non-availability of the desired resources. The Cloud services delivered by heterogeneous and dynamic nature of the Cloud resources depend on the Quality of Service (QoS). Provisioning helps in identifying the kind and exact amount of resources. Once resources are provisioned, then scheduling can be done with the help of resource scheduling techniques. Resource provisioning technique can provide one of the solutions for optimal resource allocation by maximizing provider’s revenues while satisfying customers QoS constraints, handle unexpected runtime situations (e.g., unexpected delays in scheduling queues or unexpected failures) and thus minimizing resource usage cost and execution time. Maximizing the efficiency, dispersion, heterogeneity and uncertainty of resources brings challenges to resource allocation, which cannot be satisfied with traditional resource allocation policies in Cloud circumstances. The problem has been derived to acquire an optimal solution. The problem can be expressed as: To consider this problem, a collection of individualistic cloud workloads {w
                        1,
                        
                        w
                        2,
                        
                        w
                        3,
                        …,
                        wm
                        } to map on a collection of dynamic and heterogeneous resources {r
                        1
                        
                        r
                        2,
                        
                        r
                        3,
                        …,
                        rn
                        } has been taken. R
                        ={rk
                         1⩽
                        k
                        ⩽n} is the collection of resources and n is the total number of resources. W
                        ={wi
                        |1⩽
                        i
                        ⩽
                        m} is the collection of cloud workloads and m is the total number of cloud workloads. For simultaneously optimizing execution cost and execution time are expressed in Eq. (1) and can be generally formulated as follows:
                           
                              (1)
                              
                                 
                                    
                                       M
                                    
                                    
                                       Qos
                                    
                                 
                                 =
                                 
                                    min
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          m
                                       
                                    
                                 
                                 
                                    
                                       (
                                       execution cost
                                       )
                                    
                                    
                                       i
                                    
                                 
                                 ×
                                 
                                    
                                       (
                                       execution time
                                       )
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        where i is a current workload that is being executed, execution time is calculated as the overall time taken from the start of workload’s (Cloudlet’s) waiting in the workload queue to the resources are provided while the execution cost specifies, the cost per resources that are required for an execution of cloud workload. 
                           
                              
                                 
                                    M
                                 
                                 
                                    Qos
                                 
                              
                           
                         is value of fitness function calculated based on our proposed QoS metric based resource provisioning technique. The complexity (Eq. (2)) of QoS metric based resource provisioning technique is affected by number of Change Points (CPRP) in terms of time i.e. provisioning of resources to bulk of workloads.
                           
                              (2)
                              
                                 CPRP
                                 =
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       start
                                    
                                 
                                 +
                                 
                                    
                                       t
                                    
                                    
                                       end
                                    
                                 
                                 +
                                 
                                    
                                       t
                                    
                                    
                                       suspend
                                    
                                 
                                 +
                                 
                                    
                                       t
                                    
                                    
                                       resume
                                    
                                 
                                 )
                              
                           
                        where tstart
                        
                        =start time of all workloads, tend
                        
                        =finish time of all workloads, tsuspend
                        
                        =suspend time of all workloads and tresume
                        
                        =resume times of all workloads. The aim of this technique is minimum preemption. We have considered following two factors for complexity:


                        
                           
                              •
                              Reduce the rate of rejection of the incoming workloads.

Reduce the reshuffle cost (avoid reallocation of already provisioned resources).

The main objective of this research work is to analyze the Cloud workloads, cluster them on the basis of common workload patterns and then provision the Cloud workloads before actual scheduling. This helps in better matchmaking and efficient resource provisioning. Further provisioning has been done based on weights assigned by QoS based metrics. The following are the main objectives of this research:
                           
                              (a)
                              To clearly identify the recent and prospective desires and potentials of the cloud user.

To develop QoS metric based resource provisioning technique that aims at minimizing the cost and at the same time meet the Cloud workload deadline.

To identify workload patterns based on workload details and clustered based on workload patterns.

To identify QoS metrics and weights to quality attributes are assigned through these metrics.

Further workloads are re-clustered by using machine learning algorithm i.e. K-Means based Clustering algorithm.

To calculate submission burst and cost for resource provisioning and resources are provisioned for actual scheduling.

Based on the important features of Cloud workloads and workload patterns the clustering of Cloud workloads has been done. Table 2 shows clustering of Cloud workloads through workload patterns along with QoS requirements that has been shown in detail in our previous work [3–5].

As workload demands vary widely and are quite fluctuating simple static resource provisioning results in over and under provisioning. We have used K-Means based clustering algorithm for clustering of Cloud workloads in this research work [4,47]. The following steps used for clustering of Cloud workloads:
                           
                              •
                              K-Means based clustering algorithm is a non-hierarchical technique it firstly takes the number of workloads equal to the absolute required number of clusters.

The actual essential number of clusters is selected such that the workloads are mutually farthest apart based on key QoS requirements in this step.

Next, it examines each workload and allocates it to one of the clusters depending on the smallest distance.

The cluster centroid’s position is recalculated every time a workload is added to the cluster and this endures until all the workloads are clustered into the absolute required number of clusters.

Calculates the distance between each workload and select that pair which show the smallest distance and eliminate it from actual Workload Set (W).

At that moment, acquired one workload from Workload Set (W
                                 ={W
                                 1
                                 W
                                 2⋯Wt
                                 }) and calculate the distance between particular workload and standard workload from Workload Set (W) and add with that cluster which show the minimum distance.

Repeat this process till threshold value is attained.

If value is less than k then again calculate the distance between each workload from the rest Workload Set (W) and repeat that process till k cluster is made.

Cloud workloads can be managed and executed efficiently with the help of QoS metrics to measure the quality attributes for each workload. From the literature following QoS metrics have been identified that can be applied to Cloud workloads [3–14,36]. The abbreviations used in these metrics are: MTBF is Mean Time between Failures, MTTF is Mean Time to Failure, MTTR is Mean Time to Repair and MTTC is Mean Time to Change with respect to particular Cloud Service.
                           
                              i.
                              
                                 Network Bandwidth: The network bandwidth can be calculated as number of bits transferred/received in a particular workload in one second. It can be formulated as follows:
                                    
                                       
                                          Network Bandwidth
                                          =
                                          Bits
                                          /
                                          second
                                          (
                                          B/S
                                          )
                                       
                                    
                                 
                              


                                 Integrity: It can be formulated as follows:
                                    
                                       
                                          Integrity
                                          =
                                          
                                             ∑
                                          
                                          
                                             
                                                
                                                   (
                                                   1
                                                   -
                                                   Threat
                                                   )
                                                   ×
                                                   (
                                                   1
                                                   -
                                                   Security
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 where the Threat is the probability of occurrence of an attack (of specific type) in given time and Security is the probability of repelling the specific attack in Cloud service.


                                 Usability: It is defined as work required knowledge, handling, preparing input, and interpreting output of a Cloud Service. It also includes on-line feedback and Service understand ability, Interface and aesthetic features of Service, Learnability and Success ratio. It can be formulated as follows:
                                    
                                       
                                          Learnability
                                          :
                                          1
                                          /
                                          (
                                          Time taken to learn the service
                                          )
                                       
                                    
                                 
                                 
                                    
                                       
                                          Success ratio
                                          :
                                          (
                                          no of successful operations in a workload
                                          )
                                          /
                                          (
                                          total operations available in the workload
                                          )
                                       
                                    
                                 
                              


                                 Reliability: It can be formulated as follows:
                                    
                                       
                                          Reliability
                                          =
                                          MTBF
                                          =
                                          MTTF
                                          +
                                          MTTR
                                       
                                    
                                 
                              


                                 Availability: It can be formulated as follows:
                                    
                                       
                                          Availability
                                          =
                                          MTTF
                                          /
                                          MTBF
                                       
                                    
                                 
                              


                                 Changeability: It can be formulated as follows:
                                    
                                       
                                          Changeability
                                          (
                                          MTTC
                                          )
                                          =
                                          
                                             ∑
                                          
                                          (
                                          Time to analyze the change in workload
                                          +
                                          Time to modify the change in workload
                                          +
                                          Time to test the change in workload
                                          +
                                          time to distribute the change in workload
                                          )
                                          /
                                          (
                                          No
                                          .
                                          
                                          of change requests in workload
                                          )
                                          .
                                       
                                    
                                 
                              


                                 Cloud Customer Confidence Level: The Confidence and Fulfillment Matrix based on satisfaction level of Cloud Service as shown in Table 3 and calculated as follows:
                                    
                                       
                                          Cloud Customer Confidence Level
                                          =
                                          
                                             
                                                Number of workloads completed successfully within their budget and deadline
                                             
                                             
                                                Total number of workloads submitted
                                             
                                          
                                       
                                    
                                 
                              


                                 Latency: It can be formulated as follows:
                                    
                                       
                                          Latency
                                          =
                                          Time of input a Cloud workload
                                          -
                                          Time of output produced with respect to that Cloud workload
                                       
                                    
                                 
                              


                                 Customizability: It can be formulated as follows:
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      d
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      d
                                                   
                                                
                                                +
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      s
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 Nd
                                 : Number of dynamic changes in a Cloud service with respect to a workload. Ns
                                 : Number of static changes in a Cloud service with respect to a workload.


                                 Testing time: It can be formulated as follows:
                                    
                                       
                                          Testing Time
                                          =
                                          Time to prepare test environment
                                          +
                                          Time to execute Test Suite for a Cloud workload
                                          .
                                          (
                                          Test Suite is collection of test cases
                                          )
                                          .
                                       
                                    
                                 
                              


                                 Variable Computing Load: It can be formulated as follows:
                                    
                                       
                                          Variable Computing Load
                                          =
                                          Change in Load Balancing
                                          (
                                          Δ
                                          LB
                                          )
                                       
                                    
                                 
                                 
                                    
                                       
                                          Δ
                                          LB
                                          =
                                          Actual load at time
                                          
                                          t
                                          /
                                          Expected load at time
                                          
                                          t
                                       
                                    
                                 
                                 
                                    
                                       
                                          Δ
                                          LB
                                          ⩽
                                          1
                                          for efficient Cloud service
                                       
                                    
                                 
                              


                                 User Self Service Rate: It is defined as the ratio of the number of online inquiries regarding workload/resource into support by the total amount of unique visitors to web self-service site or Cloud service (CS) to make a request regarding different or same workload. It can be formulated as follows:
                                    
                                       
                                          Self Service Rate
                                          =
                                          (
                                          100
                                          %
                                          -
                                          (
                                          #
                                          of Inquiries regarding workloads
                                          /
                                          #
                                          of Support Resource Visits
                                          )
                                          )
                                          .
                                       
                                    
                                 
                              


                                 Reliable Storage: It comprises of following queries:
                                    
                                       •
                                       How and where do you store service data?

For how long do you store and how much data do you store?

Data mining: It should not be promising to make interpretations based on accessible design of CS.


                                 Database Backup: It can be formulated as follows:
                                    
                                       
                                          Database Backup for every CS
                                          =
                                          Giga Bytes
                                          (
                                          GBs
                                          )
                                       
                                    
                                 
                              


                                 Correctness: It is defined as the degree to which the Cloud Service (CS) will be provided accurately to the Cloud customers. It can be formulated as follows:
                                    
                                       
                                          Accuracy
                                          :
                                          (
                                          expected CS
                                          -
                                          |
                                          expected CS
                                          -
                                          observed CS
                                          |
                                          )
                                          /
                                          expected CS
                                       
                                    
                                 
                                 
                                    
                                       
                                          Completeness
                                          :
                                          total existing CSs
                                          /
                                          total requested CSs
                                       
                                    
                                 
                                 
                                    
                                       
                                          Defects
                                          /
                                          CS
                                          :
                                          Number of Defects reported
                                          /
                                          CS
                                       
                                    
                                 
                              


                                 Service Visibility: It can be formulated in terms of service visibility as follows:
                                    
                                       
                                          Service Visibility
                                          :
                                          Degree of transparency for billing.
                                       
                                    
                                 
                              


                                 Serviceability: It can be formulated as follows:
                                    
                                       
                                          Serviceability
                                          =
                                          Service Uptime
                                          /
                                          (
                                          Service Uptime
                                          +
                                          Service Downtime
                                          )
                                          .
                                       
                                    
                                 
                              


                                 Computing Capacity: It can be formulated as follows:
                                    
                                       
                                          Computing Capacity
                                          =
                                          Actual Usage time of the Resource/Expected Usage time of the Resource.
                                       
                                    
                                 
                              


                                 Internet Accessibility (IA): It is defined as the ratio of the number of request time out to the total number of requests for a particular resource or service in the response of particular workload. It can be formulated as follows:
                                    
                                       
                                          IA
                                          =
                                          Number of request time out
                                          /
                                          Total number of requests or Percentage of Time Out Request
                                       
                                    
                                 
                              


                                 Portability: It can be formulated as follows:
                                    
                                       
                                          Portability of service
                                          =
                                          Degree to which the service or CS is portable to other platforms.
                                       
                                    
                                 
                                 
                                    
                                       
                                          Portability
                                          =
                                          (
                                          No
                                          .
                                          
                                          of compatible platforms
                                          )
                                          /
                                          (
                                          total no
                                          .
                                          
                                          of platforms
                                          )
                                       
                                    
                                 
                              


                                 Persistence: It is defined as the number of time periods required for a given proportion of the total uncertainties in a given service to collect.


                                 Flexibility: Service flexibility evaluation as follows:
                                    
                                       
                                          Flexible Point 
                                          FXPi
                                          : A point or a location in service which can cause flexible changes to occur, upon which the external force Fe
                                           may apply. Fe
                                           causes software to change through the flexible point. Small external force Fe
                                           at a FXP may cause a large scale of changes in service. When Fe
                                             
                                          =
                                          0, it indicates that the service changes are completely driven by internal force Fi.
                                       


                                          Flexible Force 
                                          Fi
                                          : Minimum external force Fe
                                           applied to FXPi
                                           that may cause service to change. Fi
                                           indicates the easiness or difficulty to make service change. The larger fi
                                           is, the harder the service makes changes through FXPi
                                          .


                                          Flexible Distance 
                                          Si
                                          : Maximum range or size of the service change caused by fi
                                           through flexible point i.
                                             
                                                
                                                   
                                                      
                                                         K
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   :
                                                   
                                                      
                                                         K
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   =
                                                   
                                                      
                                                         
                                                            
                                                               S
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                      
                                                      
                                                         1
                                                         +
                                                         
                                                            
                                                               f
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       


                                          Flexible Degree, a measure for service flexibility at FXPi.


                                          Flexible Capacity C:
                                             
                                                
                                                   C
                                                   =
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            i
                                                            =
                                                            1
                                                         
                                                         
                                                            N
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         K
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                
                                             
                                          A measure of entire service flexibility, based on definitions above, a provider can utilize the flexibility at i only if 
                                             
                                                
                                                   
                                                      F
                                                   
                                                   
                                                      e
                                                   
                                                
                                                ⩾
                                                
                                                   
                                                      F
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                          
                                          .
                                       


                                 Security: Security of CS can be measured by Security Metric Matrix as shown in Table 4.


                                 Performance: The workloads include for benchmark should be based upon a collection of the relevant datacentre workloads, and the performance metrics has been summarized in Table 5.

The average of weights collected from existing research papers taken from reputed journals are used because the researchers assign weights to quality attributes with respect to context in which that quality attribute is used. The range of weight scale has been assumed from 1 (Minimum) to 5 (Maximum). The weights are assigned according to the significance of a requirement for a particular Cloud workload. If any quality attribute is not important for a particular Cloud workload then zero or NA (Not Available) is assigned. Later receiving the mandatory information the average of every quality attribute has been taken and that average is the estimated weight (percentage) of that quality attributes. The consequence of collected data is used by the following formula to calculate quality attributes weight (Eq. (3)):
                           
                              (3)
                              
                                 W
                                 (
                                 i
                                 ,
                                 j
                                 ,
                                 q
                                 )
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       
                                          
                                             N
                                          
                                          
                                             f
                                          
                                       
                                       ×
                                       (
                                       
                                          
                                             M
                                          
                                          
                                             v
                                          
                                       
                                       +
                                       q
                                       )
                                    
                                 
                                 ×
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                N
                                             
                                             
                                                f
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       R
                                    
                                    
                                       a
                                    
                                 
                                 ×
                                 100
                              
                           
                        where in 
                           
                              W
                              (
                              i
                              ,
                              j
                              ,
                              q
                              )
                           
                        , i is cloud workload, j is quality attribute of that workload, q is level of measurement of quality attribute (q-value), Nf
                         is number of research papers used to collect data, 
                           
                              
                                 
                                    M
                                 
                                 
                                    v
                                 
                              
                           
                         is maximum value for a quality attribute and 
                           
                              
                                 
                                    R
                                 
                                 
                                    a
                                 
                              
                           
                         is sum of responses for an attribute; the value of W(i,
                        j,
                        q) will be in the range 0–100%. An analysis has been conducted to acquire the data from 15 research papers of Cloud Computing from reputed journals about Cloud workloads with the objective to know that how to assign the weights to the quality attributes according to significance [4,5]. Subsequently receiving the responses, an industry standard baseline and adequate weights to the quality attributes has been defined. The conversion metric is used to assign the values (minimum=1 and maximum=5) corresponding to the percentage as shown in Table 6.

The level of measurement of quality attribute will be of three types: High, Medium and Low as described in Table 7.

The result of the data analysis is as follows; total 15 research papers of different contexts have been studied and maximum probable value for a quality attribute is 5. For example computing the average of “Availability” quality attribute under workload “Website” is as following:


                        
                           
                              
                                 
                                    N
                                 
                                 
                                    f
                                 
                              
                              =
                              11
                           
                        , i
                        =Website and j
                        =Availability, Mv
                        
                        =5, q
                        =3 (because availability should be high described in QoS requirements of SLA and q-value has been calculated with the help of QoS metrics) and sum of the responses 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    k
                                    =
                                    1
                                 
                                 
                                    11
                                 
                              
                              
                                 
                                    R
                                 
                                 
                                    a
                                 
                              
                              =
                              29
                           
                        
                        
                           
                              
                                 W
                                 (
                                 i
                                 ,
                                 j
                                 ,
                                 q
                                 )
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       11
                                       ×
                                       (
                                       5
                                       +
                                       3
                                       )
                                    
                                 
                                 ×
                                 29
                                 ×
                                 100
                                 =
                                 32.95
                              
                           
                        
                     

For W(i,
                        j,
                        q)=32.95, the average weight is assigned for availability is 2 by using Table 6. Through this technique the average weights for every quality attribute has been calculated.

The range of weight scale has been assumed from 1 (Minimum) to 5 (Maximum). The weights are allotted according to the significance of a requirement for a particular Cloud workload as shown in Table 8
                        .

Based on the importance of a QoS requirement for a particular Cloud workload the different data values (v1, v2, v3, v4) have been assigned from Table 8. Four seeds (s1, s2, s3, s4) corresponding to the data values have been identified for workloads as done in our previous work [4]. Now the distance using the four values (Weights Assigned) and using the sum of differences for simplicity (i.e. using the K-median method) is computed. The distance values for all the Cloud workloads are measured from four seeds respectively. Based on these distances workload is allocated to the nearest cluster by finding minimum distance. First iteration leads to two each workload in first and second cluster, three in third cluster and six in fourth cluster then compares the new centroids (cluster means of cluster found in first iteration) with the original seeds (s1, s2, s3, s4). Use the new cluster means to recomputed the distance of each object to each of the means, again allocating each workload to the adjacent cluster. The number of workloads in all the four clusters is again same in second iteration. A more careful look shows that the clusters have not changed at all. The cluster membership of various workloads among four clusters named QM-Compute, QM-Storage, QM-Communication and QM-Administration after the re-clustering by K-Means based clustering algorithm is shown in Table 9
                        .

Thus the clustering of workloads enables better resource utilization and scheduling as compared to the scheduling of single queued workload.

It is hard to measure the performance of QoS Metric based Resource Provisioning (RP) technique in exact way due to the heterogeneous nature of cloud workloads. For performance evaluation CloudSim toolkit is used [48]. Both the behavior and system modeling of Cloud system components (VMs, datacenters and RP policies) is supported by this toolkit. It is used to implement the common RP techniques through little effort and can be extended. Presently, toolkit is used for simulation of Cloud environment containing distinct and inter-networked Clouds. Furthermore, it provides custom interfaces to implement RP techniques for VM allocation under inter-networked circumstances in Cloud Computing. The core benefits of this toolkit are used to test the performance along with time effectiveness (it needs very small time and effort to implement RP test environment for Cloud based application) and applicability and flexibility (with little development and programming effort, developer can test the performance of Cloud-based application in heterogeneous Cloud environments (Microsoft Azure, Amazon EC2)). For experimental results heterogeneous cloud workloads are considered. Table 10
                      shows the features of Cloudlets and resources (provisioning parameters) which have been used for every experiment. Each resource comprise different kind of machines, machine might have one or more than one PE (Processing Element) with different Million Instructions Per Second (MIPS). In this outcome, we suppose that each cloud workload which is admitted to the QoS metric based resource provisioning technique may need fluctuating input size and execution time of workload and such type of cloud workloads in the form of Cloudlets are described.

A Cloudlet is a file that comprises all information associated to cloud workload and its processing supervision details such as size of workload, cost per workload, memory size, file size, and output size. Multiple Instructions (MI) are used to measure the processing requirement of Cloudlet.

To estimate the performance of a QoS metric based RP technique, the performance evaluation benchmarks have been defined. Submission burst (execution time) and execution cost for assessing the performance of proposed RP technique has been used. The submission burst time is calculated as the overall time taken from the start of workload’s (Cloudlet’s) waiting in the workload queue to the resources are provided while the execution cost specifies, the cost per resources that are required for execution of cloud workload. The submission burst (execution time) is measured in seconds and cost is measured in Grid dollar (G$). Performance has been evaluated through experimental results and case study.

@&#EXPERIMENTAL RESULTS@&#

700 cloud workloads and 250 resources have been considered to validate QoS metric based RP technique. To ensure statistical accuracy, we used forty to sixty runs. Further, submission burst without QoS and with QoS resource provisioning is compared. The impacts of various values for the factors of QoS metric based RP and non-QoS based RP is investigated and compared to analyses the performance of proposed technique. QoS based and non-QoS based RP is compared in all the test cases.

The cost and submission burst time of Cloud workloads is evaluated in two circumstances: (i) the equal number of workloads is submitted and (ii) the unequal number of workloads is submitted. The valuing of resources could be associated to processor speed. Therefore, reduction of both execution cost and execution time of a cloud workload can clash with each other depending on the resource’s cost. The average submission burst and cost without QoS and with QoS resource provisioning is described in Figs. 3 and 4
                           
                            respectively. This is anticipated as the QoS metric based RP technique traces the state of all resources at every time which helps to take a better decision as compared non-QoS based resource provisioning technique. To measure the effect of growing the number of cloud workloads on the cost and submission burst time, the experiment has been performed. An experimental result shows that the QoS metric based resource provisioning technique is taking lesser time to admit a cloud workload as shown in Fig. 5
                           .

Cost per workload rises as the submission number of workloads is increasing as shown in Fig. 6
                           . As the number of workloads increases, the QoS metric based resource provisioning technique is cheaper as compared to non-QoS based resource provisioning technique.

The cause is that in QoS metric based RP technique; WRM deliberates the impact of cloud workload in resource scheduler before execution of workload according to QoS requirements while non-QoS RP technique does not consider the impact of workloads in the resource scheduler at the time of workload submission. WRM considers the submission burst time, cost and other QoS constraints of other workloads before submission to resource scheduler in QoS metric based RP technique.

This test case estimates the execution time and execution cost for workload admitted in QoS metric based resource provisioned technique and best-effort technique. QoS parameters are not considered in best effort technique and similar importance for all workloads without assurance of resource provisioning. Different resource utilization levels with cost and submission burst time of the workload’s execution with QoS metric based RP technique and best-effort technique (non QoS based RP) as shown in Figs. 7 and 8
                           
                           . The submission burst time in QoS metric based resource provisioned approach is 15–20% lesser than non-QoS based provisioned approach at 57% resource utilization level as shown in Fig. 7. This submission burst time deviation with resource utilization is relatively substantial.

The submission burst time of non QoS based resource provisioning technique suddenly raises at the 81% resource utilization level but the submission burst time of QoS metric based provisioned technique is lesser. As compared to submission burst time, the execution cost of QoS metric based RP approach changes less significantly at different levels of resource utilization. Resource configuration may or may not affect the execution cost. The following benefits have been observed from the experimental results that execution of workload using the QoS metric based RP technique: The submission burst time of QoS metric based RP technique is 50% lesser than the non QoS based RP technique. Time deviation in workload’s execution is around 8–14% in QoS metric based RP approach, as compared to non QoS based RP of 55–65% with similar number of workloads. This time deviation is relatively substantial. It correspondingly retains the utilization of resources and execution cost for workload execution.


                           Fig. 9
                            shows the influence of increasing the number of resources, whereas executing the number of Cloud workloads being submitted constant. In this experiment, 700 Cloud workloads were executed with changing numbers of resources. The outcomes describe that by increasing the number of resources, the execution time decreases. QoS metric based RP technique performs better than non-QoS based RP. Fig. 9 shows the execution time decreases for both type of RP as we increase the number of resources.

This consequence specifies that QoS metric based resource provisioning technique given a correspondingly worthy performance in comparison that given by non-QoS based resource provisioning.

The cost of execution of different Cloud workloads for both type of resource provisioning varies. The costs of resources are decreasing with increasing the number of resources. Fig. 10
                            shows the QoS metric based RP technique executes the same number of Cloud workloads at a minimum cost. The cost of workload execution is less using QoS metric based RP technique in comparison to the execution cost using non-QoS based RP. As the cost with Cloud resource is significant so the cost benefit (7–11.7%) were notified with different number of resources. However more benefit will be anticipated if the variations are higher.

There are different numbers of deadlines missed in both the resource provisioning techniques. With increasing the number of Cloud workloads, the number of deadlines missed is also increasing. The number of deadlines missed in QoS metric based RP technique is lesser as compared to non-QoS based RP as shown in Fig. 11
                           . The variation in number of deadlines missed at 300 workloads is lesser as compared to the 700 workloads.

To validate our novel QoS metric based resource provisioning technique, we have presented performance evaluation by considering other QoS parameters in the form of case study of Airline Reservation System (ARS). We have studied case study of International Airport “Indira Gandhi International Airport (IGIA), New Delhi, India” to analyze the working of their reservation system [49]. The airline reservation system of IGIA airport is very complex because there more than 800 flights are landing and taking off per day. The working of this airline reservation system is studied from centralized website of ARS “ibibo”, which comprises following sequence of steps:
                           
                              •
                              Fetching information from all the other websites of ARS and storing into knowledge pool.

Sorting is performed on collected information for classification of services used by passengers like type of flight (with or without stay), type of class (economy class, business class, executive class etc.), route etc.

Classified information is stored in database for future use as a historical data.

Data mining is performed on historical data to calculate the trust value of users.

Test the efficiency of ARS system.

In the existing ARS system, provisioning of resources is done without considering QoS parameters, so which leads to customer dissatisfaction. To solve this problem, we have considered four QoS parameters (customer confidence level and serviceability are used to calculate the trust value of users, and network bandwidth and availability are used to test the efficiency of ARS system) in this case study to validate our resource provisioning technique. Performance of all the four QoS parameters has been evaluated and compared with non-QoS based RP. This case study reflects the provisioning of resources similar to Cloud environment.

We have calculated percentage of availability for both QoS metric based RP and non-QoS based RP with different number of Cloud workloads. With increasing the number of Cloud workloads, the percentage of availability is decreasing. The percentage of availability in QoS metric based RP technique is more as compared to non-QoS based resource provisioning at different number of Cloud workloads as shown in Fig. 12
                           . The maximum percentage of availability is 94.5% at minimum number of cloud workloads.

The value of serviceability is varied between 0 and 1. We have calculated the value of serviceability for both QoS metric based RP and non-QoS based RP with different number of Cloud workloads. The value of serviceability is reducing with increasing the number of Cloud workloads. The value of serviceability is 1 when there is no downtime, but it is not possible in real situations. QoS metric based resource provisioning technique performs better than non-QoS based resource provisioning in terms of serviceability at different number of Cloud workloads as shown in Fig. 13
                           .

We have calculated percentage of Customer Confidence Level for both QoS metric based RP and non-QoS based RP with different number of Cloud workloads. With increasing the number of Cloud workloads, the percentage of Customer Confidence Level is also decreasing. The percentage of Customer Confidence Level in QoS metric based RP technique is more as compared to non-QoS based RP at different number of Cloud workloads as shown in Fig. 14
                           . The value of Customer Confidence Level is larger at minimum number of cloud workloads.

The value of network bandwidth is varied between 1000 and 3000B/S as specified in Table 10. We have analyzed the network bandwidth consumed for both QoS metric based RP and non-QoS based RP with different number of Cloud workloads. With increasing the number of Cloud workloads, the value of network bandwidth is increasing. The value of network bandwidth in QoS metric based RP technique is lesser as compared to non-QoS based RP at different number of Cloud workloads as shown in Fig. 15
                           .

Statistical significance of the results has been analyzed by Coefficient of Variation (Coff. of Var.), a statistical method. Coff. of Var. is statistical measure of the distribution of data about the mean value. Coff. of Var. is used to compare to different means and furthermore offer an overall analysis of performance of the technique used for creating the statistics. It states the deviation of the data as a proportion of its average value, and is calculated as follows (Eq. (4)):
                           
                              (4)
                              
                                 Coff
                                 .
                                 
                                 of Var
                                 .
                                 =
                                 
                                    
                                       SD
                                    
                                    
                                       M
                                    
                                 
                                 ×
                                 100
                              
                           
                        where 
                           
                              SD
                           
                         is a standard deviation and M is mean. Coff. of Var. of execution time and cost has been studied of Cloud workload of both QoS metric based RP and non-QoS based RP as shown in Figs. 16 and 17
                        
                        .

Coff. of Var. calculated for execution time and cost results attained by QoS metric based RP and non-QoS based RP. Range of Coff. of Var. (0.98–2.1%) for execution time and (0.61–1.88%) for cost approves the stability of QoS metric based resource provisioning as shown in Figs. 16 and 17.

Small value of Coff. of Var. signifies QoS metric based technique is more efficient in resource provisioning in the situations where the number of Cloud workloads has changed. Value of Coff. of Var. decreases as the number of workloads is increasing. Statistical analysis demonstrates the QoS metric based RP technique outperforms non-QoS based RP for large numbers of Cloud workloads. With small value of Coff. of Var. system is more stable and QoS metric based resource provisioning attained the best results in the Cloud for cost and execution time as QoS parameters.

@&#DISCUSSIONS@&#

The performance of QoS metric based RP (Resource Provisioning) technique has been compared with existing non-QoS based RP. The performance of QoS metric based RP technique has been analyzed with different number of cloud workloads and resources. The performance of QoS metric based RP technique has been evaluated with respect to execution time, cost and other QoS parameters like availability, serviceability, customer confidence level and network bandwidth through case study. Execution cost permits the evaluation for selection of resources whereas duration of workload execution evaluates by execution time.

The technique in which Cloud provider minimizes the cost as well as execution time along with other QoS parameters is called QoS metric based RP technique. QoS metric based RP technique reduces the execution time by up to 16.67% compared to non-QoS based RP. QoS metric based RP technique reduces the execution cost by up to 28.99% compared to non-QoS based RP. The consequences describe that the execution time decreases by increasing the number of resources. With increasing the number of resources, the execution cost of resources is decreasing. The QoS metric based resource provisioning technique executes the same number of Cloud workloads at a minimum cost. The execution time is increasing with the increase in number of Cloud workloads and the execution time of QoS metric based resource provisioning technique for same number of Cloud workloads is lesser than non-QoS based RP. The non-QoS based RP based workload’s execution caused in a schedule which is costly in comparison to the QoS metric based resource provisioning technique.

The workload execution using the QoS metric based RP technique performs better as shown by all the experimental results. The overall cost for Cloud consumer’s workload execution is less. The number of deadlines missed in QoS metric based resource provisioning technique is lesser. With the increase in budget, the more number of resources provided to reduce the execution time and number of deadlines missed are also decreasing. The QoS metric based resource provisioning technique executes the same number of Cloud workloads at a minimum network bandwidth, maximum serviceability, availability and customer confidence level. Considering all these QoS parameters (execution time, cost, resource utilization, network bandwidth, serviceability, availability and customer confidence level) and simulation outcomes, it is shown that the QoS metric based resource provisioning technique delivers a superior solution for heterogeneous Cloud workloads and approximate optimum solution for challenges of resource scheduling.

A QoS metric based resource provisioning technique for the Cloud Computing environment has been proposed in this paper. The main goal of this resource provisioning technique is to reduce the complexity of provisioning for workload execution in Cloud. Various Cloud workloads have been identified, analyzed and classified along with their characteristics and QoS requirements. Different workload patterns have been identified and mapped with cloud workloads. QoS metrics have been identified for every quality attribute of each Cloud workload that is used to assign weights to all the quality attributes. Further the clustering of workloads has been done through K-Means based clustering algorithm. We determine the effectiveness and usefulness of metrics to develop resource provisioning of workloads. CloudSim has been used for simulations and the result of simulation demonstrate that QoS metric based RP technique is effective in decreasing of the submission burst time and total execution cost of cloud workloads along with other QoS parameters. Our proposed technique provides effective outcomes as compared to non QoS based RP techniques at different levels of resource utilization as shown in test cases. Thus resources can be managed easily and workloads can be executed effectively through metric based resource provisioning technique and this will further reduce queuing time which leads to effective resource scheduling.

In future, this QoS metric based resource provisioning technique can be extended by identifying relationship between workload (patterns) and the resource demands (demands for compute, storage, and network resources) in the cloud. Based on this QoS based RP technique resource scheduling would be developed to improve the resource utilization in future. Present results have been collected through simulation on CloudSim toolkit but in future the same results would be confirmed on actual cloud resources present at High Performance Computing Lab (HPCL) at Thapar University, Patiala.

@&#ACKNOWLEDGEMENTS@&#

One of the authors, Sukhpal Singh, gratefully acknowledges the Department of Science and Technology (DST), Government of India, for awarding him the INSPIRE (Innovation in Science Pursuit for Inspired Research) Fellowship (Registration/IVR Number: 201400000761 [DST/INSPIRE/03/2014/000359]) to carry out this research work. We would like to thank all the anonymous reviewers for their valuable comments and suggestions for improving the paper. We would like to thank Dr. Maninder Singh for helping in improving the language and expression of preliminary version of paper.

@&#REFERENCES@&#

