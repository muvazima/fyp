@&#MAIN-TITLE@&#Software process improvement in a financial organization: An action research approach

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The project of a major financial company process evolution is presented.


                        
                        
                           
                           A research methodology is presented and used during the software process improvement (SPI).


                        
                        
                           
                           All phases, processes and addressed issues are illustrated.


                        
                        
                           
                           A survey method is conceived and applied to the members of the SPI project.


                        
                        
                           
                           All aspects of the success factors of the implementation are presented and analyzed.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Software process improvement

Systems development

Software engineering

Software process evaluation

Software quality improvement

@&#ABSTRACT@&#


               
               
                  In order to increase the quality of systems of a financial company, the process of a software development team has changed some times to get stabilized. This paper presents the action research steps that were conducted, the perceptions of the team about the process evolution and the solved problems. Also, a software process improvement assessment has been conducted in order to identify the success factors on this implementation and the result is analyzed and discussed through the Servqual method. Among other conclusions, the involvement of the team during the improvement process and future perspectives are crucial to achieve success.
               
            

@&#INTRODUCTION@&#

The software industry is relatively new if compared to other industries, but it is continuously evolving. The quality of software development and maintenance processes is increasingly gaining attention of research and practitioners' communities, as well as the concern with team's management. For some approaches, the quality of a software product is mainly related to the process used to build it [1]. A software development process defines who is doing what, when and how, in order to achieve an established goal [2].

Kruchten, in [3], states that building and maintaining software is difficult and building quality software in a repeatable and predictable way is even more difficult. An effective process provides guidance to develop software with consistent quality [2]. Li and Lin, in [4], state that the information quality contributes positively to customers' satisfaction and also to the quality of business partnerships. The consequence of having information with quality has a direct impact on the decision making process of a variety of business reflecting all levels of the organizational management [5]. Watts Humphrey, in [6], justifies the need to strongly consider the human aspects because the most important asset of an organization that produces software is talented people.

A software process is considered here as a necessary element for developing quality software [1] and is used as basis for implementing and evolving the way team works and conceives software products.

It is important to define a robust software process that produces quality software. Furthermore, it is important to deal with human interaction to ensure software quality too [7]. More than two decades ago, Schlesinger and Heskett [8] have stated that managers are “often resigned to the possibility that the cycle of failure is inevitable and well beyond their control”, presenting the following characteristics:
                        
                           •
                           You can't find good (or any) people today.

People just do not want to work today.

To get good people would cost too much and you cannot pass on these cost increases to customers.

It is not worth training our frontline people when they leave you so quickly.

High turnover is simply an inevitable part of our business. You have got to learn to live with it.

So, it is possible to observe that these issues are not recent. It is also possible to notice how important is to software development organizations having policies focused on employee issues, especially for such kind of organizations that mainly relies on human resources, as are the information technology companies.

When considering some studies of organizations' programs, in [8], it was possible to observe that some elements are found in information technology organizations and also in other organizations, such as: Careful Selection; Realistic Previews of the Job and Organization; Focus on Early Job Experiences; Employee Empowerment and Latitude; Employees' Awareness of Their Role in Customer Satisfaction and Economic Success; Scorekeeping and Feedback; and Integration of Employees into a Winning Team.

People from different organizational units can work together to engineer and manage software products. These efforts require a great deal of cooperation and, therefore, the development processes should be designed to be cross-functional and inter-organizational [9].

As stated by France and Rump, in [10], the growing complexity that is imposed to software products is the main factor that motivates the efforts for industrializing the software development. This complexity produces a conceptual gap between the problem domain and the implementation domain and the adoption of processes is a way to tackle this problem and bridging the gap. Processes, this way, can leverage the communication within the project and lead to better results.

The software development scenario is gradually showing better results if considering the data presented by the Standish Group [11–13], mainly when analyzing the projects that have succeeded, which are growing systematically. Table 1
                      presents the evolution of projects that are finished with success, fail or are challenged when analyzing factors as projects delivered on time, on budget and with required features and functions. Although the numbers seem to get better, the success rate is still poor, once less than 40% of the projects were finished on time, budget and quality.

One of the major reasons causing projects to fail has been identified as problems concerning requirements engineering [12] and the adjacent activities aiming at identifying goals, scope and requirements of systems. Software processes, addressing all phases of the life cycle, provide better organization of activities, roles and artifacts and could provide better organization of the early phases of business modeling and requirements engineering, leveraging the success of projects.

So, one way to contribute to the success of projects is to define and implement development processes. Pohl et al., in [14], state that it is very important for any organization to have processes, and mainly to have mature processes. During much time software development processes have being unstructured, rarely well defined and not understood by the stakeholders. Software process improvement models, as CMMI [15] leverage the processes and help in identifying the weaknesses and stabilizing the processes to be as much adherent to software engineering practices as possible.

The Software Engineering Institute (SEI) adopts a process management premise in their models that takes into account “the quality of a system or product is highly influenced by the quality of the process used to develop and maintain it” [15].

Using a similar approach, the software product quality model, proposed by the ISO/IEC 25.000 series of standards, extends this concept, as presented in Fig. 1
                     , where the process quality influences the internal quality attributes of the product, which influences the external quality of the product, and lastly, in turn influences the quality in use characteristics that represent the final product executing within a specific context of use [16]. So, it is possible to infer that the final product quality depends on the process quality, as previously stated by Paulk et al., in [1].

As software product size and complexity tend to grow, so does the need for effective mechanisms of modularization, abstractions and composition in order to leverage reuse on the development process. Time-to-market and budget reductions are the major reasons to invest on software process improvements, with emphasis on reusable assets [17].

Edward Bersoff, in [18], when discussing some characteristics of System Engineering, stated that “no matter where you are in the system life cycle, the system will change, and the desire to change it will persist throughout the life cycle.” So, it is important to have a process capable of incorporating new demands, addressing all the development life cycle.

Other fundamental characteristics necessary to have an effective software development process are proposed by [2]:
                        
                           •
                           Technologies: the process should be conceived considering the available technologies, for example programming languages, operating systems, development environment etc. Architectural issues could also be addressed and proposed by the process and instantiated by projects.

Tools: the tools that support the process must be integrated to all phases of the development process and are essential to the implementation and evolution of the processes.

People: the implementation process team must limit the skill set needed to use the process to the skills actually available or easily obtained with training initiatives. The organization should not rely on a process demanding developers that are not available. As much as possible, the process should transfer skills from people to computer-based tools, whenever is feasible.

Organizational patterns: software developers play a significant role in the process and the organization has to consider some particular factors considering the employees like working at a distance, contract working, and partial owners, among others. The process should also consider external factors, as shortage of software developers and outsourcing approaches.

The process team needs to balance these four previous factors whenever implementing software development processes, and they have to fulfill the present needs and try to accomplish the future needs of the organization and developers. Software processes are intended to evolve, and these characteristics could make it easier. Jacobson et al. state that “A process needs to mature for several years before it achieves the level of stability and maturity that will enable it to stand up to the rigors of commercial product development…” [2].

Therefore this work describes incremental changes implemented in the process of an Information Technology (IT) team of a major financial company, aiming at improving the quality of software systems developed, and also aiming at increasing the satisfaction and motivation of the teams. This paper is organized as follows. Section 3 presents the research methodology approach used during the implementation and evaluation of the processes. Section 4 presents the context and purpose of the software process improvement. Section 5 presents the initial processes with corresponding cells, as well as the evolutions made to solve some issues identified during the pilot project execution. Section 6 presents the second and final version of the processes, considering the merge of production cells and their related activities. Section 7 presents the detailed evaluation result discussion of all processes and relates all cells and stakeholders with factors, which are analyzed and discussed. The last section presents the final discussion and conclusions.

The goal of this research project was to define a new process that was able to increase software quality and the motivation of the technical people of a global financial institution.

Taking into account the characteristics of the research, the selected method was the Action-Research method, as described in [19]. This choice was made once the research has:
                        
                           •
                           Focus on research in action, rather than research about action: researchers work to solve organizational problems along with those who experience the problem directly;

Participative research: researchers are facilitators of the discussion process and reflections about the results; internal members acts directly in the discussion of the results.

Research concurrent with action: actions become more effective as new knowledge is being built, analyzed and incorporated;

Sequence of events and an approach to problem solving: sequence of events (iterative cycles of data gathering) and a problem solving approach (uses the scientific view to fact finding and experimentation).

According to the authors [19]: “An Action-Research project is emergent, that is it emerges through the unfolding of a series of events as the designated issue is confronted, and attempts at resolution by the members of the organization with the help of the action researcher.” The authors suggest a generic abstraction of this process, using an iterative and incremental approach, as depicted in Fig. 2
                     .

The Context and Purpose phase can be seen as a preliminary phase, in which the comprehension of the context is made and in which the domain of the problem to be solved is mapped. The other phases of the method can be performed in a cyclic and iterative approach, until the obtained results can be considered suitable to the problem. These phases are combined in a way driven by the action enactment. In the center of the process is the Monitoring activity, crucial to the reflection process needed to tailor the action to the research goals and for rebuilding the research process itself.

This preliminary phase aimed at identifying the research context and purpose. This work took place within one of the teams of a financial company, which has more than ten thousand employees working directly with IT, placed in several centers around the world. The addressed team, like all others, follows the development method defined by the company worldwide, but the way each team works with the method, as a workflow, can be tailored to address their characteristics.

Up to the year 2010 every software project had one responsible person, called “project focal”, for monitoring the whole project, from the beginning up to the end, imposing a major responsibility to this member of the team. The term “project focal” is widely used throughout the whole organization, not just in this unit and by this team, and is a mix of some traditional roles in the software industry. Each software development project has a project focal assigned among the team members. This person has project manager and team leader activities, but he/she also performs some technical activities. That was one of the critical aspects of that process.

The projects use the object-oriented paradigm and consist of the following phases: requirements elicitation and definition, analysis, design, construction, unit test, system test, user acceptance test and deployment:
                        
                           •
                           The requirements elicitation and definition phase is not performed by the IT team, which receives the system requirements as use case specifications and has the responsibility to review and suggest the necessary adjustments. Requirements phase in this context is more related to verification activities.

The analysis phase encompasses the creation of use case diagrams, class diagram and one text document that specifies the context of the project and relates the diagrams with the use cases that belong to the scope of the project.

The design phase builds sequence diagrams, as detailed as possible, trying to accurately provide necessary information for creating the source code.

The construction phase builds the software products and integrates the components to get an operative version of the software.

The unit test phase consists of the set of tests done by each developer when coding the use case, executed in the local development environment. All the test cases of this phase are conceived by the developers themselves.

The system test phase consists of all tests executed by the IT team in an environment called Development Environment. All the test cases of this phase are conceived by the IT team.

The user acceptance test phase consists of a set of tests performed by another team of the company, representing the user point of view, with trained personal for this purpose, being executed in an environment called User Acceptance Environment. In this particular phase, the test cases are designed by the team that has created the use cases.

The last phase, deployment, is performed by the IT team and certified by the same team that has specified the use cases. This last phase, along with the installation of the system in productive environments, depends on many configurations, often done by other teams of the company.

Some activities like analysis, design, construction and tests (unit and system) were executed by temporary employees for specific projects and had to be properly treated by the process, once they can be executed by third parties (outsourcing). In these cases, the project focal should orient the execution of each phase following the organizational standards and, mainly, should evaluate the product quality at the end of each phase.

Another activity of the project focal was documenting all the necessary configurations (hardware and software) of the project in order to be installed in test and production environments. During the installation, the project focal depends on the support of many other teams, such as software support, server support and database support teams.

The activity of monitoring the user acceptance test was also done by the project focal. This was a critical phase of the project because it was the phase just before the system deployment in production environment, and it is where is possible to identify bugs in source code, scope definition issues, and errors in documentation of the use cases. It is important to mention that besides the previous activities, the project focal was also responsible for managing project schedule, budget, available resources, and effort among other duties related to project management.

Among all activities of the project, there are two that are considered the most critical and important, due to the final product quality: requirements review and system technical solution (architecture) definition.

The requirements of a new system are not elicited by the development team because there is another team responsible to contact the customers and elicit the requirements, as well as business needs, in order to conceive the use cases. One characteristic of the process is that the elaboration of the use cases can be outsourced, so another company can be responsible for transforming the elicited requirements into use case specifications. In many situations, the use cases have poor quality, with few business rule descriptions, and with ambiguous and confusing definitions.

The use cases received by the development team are validated by the project focal, who is the person responsible for analyzing each document to verify if the scope is correct. The organizational process has a verification checklist that has to be applied to the use cases, however, it does not fully ensure the quality of the document, but helps the project focal during the review process. As the checklist does not assure the quality of the artifact, the project focal has to have previous knowledge about the existing systems, mainly from the business point of view, in order to identify failures not only related to the structure, but also failures concerning use case integration and flow sequencing.

These validations should happen because the use case is considered as the base of a business contract with the other companies that develop systems, as outsourced resources. These companies will only deliver exactly what is stated in the use case specifications, as defined at the time of the contract. For this reason, if the use cases are poorly specified, a lot of re-work could occur and maintenance efforts could also happen due to the necessary adjustments to the contract. This could increase the cost and delay the schedule of the project.

This activity defines the required technical solution of a new project and may begin just after the use case approval. In many situations this task can also be performed along with the verification of the use cases, at the time the project scope and involved teams have been defined.

There are some activities that the project focal has to perform in this phase. One of them is to define the architecture to be used in the project, according to the involved teams, defining software components that can be used, following the organizational guidelines of acceptance and security. Another activity is the analysis of the existing hardware structure, verifying if it will be able to handle the access demands of the new system, and also verifying the security standards that have to be followed to avoid architectural failures. There are two other teams that validate this activity: capacity and security teams.

Considering all these activities, the project focal must have good technical experience with the systems and with the standard architectures in order to execute this phase with quality. It is also required that the project focal has to be always updated, considering the processes, architectures and business rules, in order to get a project with the best solution, compliant to the requirements and with precise budget and schedule.

The first improvement cycle used the phases proposed by the Action-Research method: data gathering, data feedback, data analysis, action planning, implementation and evaluation.

This phase begun in 2010. At that time, the team was composed of ten members with the following responsibilities:
                           
                              •
                              Five of them were system analysts with the role of project focal, working in all activities previously described;

Two of them were responsible for activities in the production environment, as correcting errors found by users, promoting visual changes in the projects and other activities to improve the systems;

Three of them were responsible for migrating outdated technology or those that would lose the support contracts soon. They would also act with other projects where the team's participation was marginal and ad-hoc and represented little effort.

Considering this scenario, the team has identified some problems that were frequently occurring:
                           
                              •
                              One project focal had more experience to ensure that the use cases of projects were defined with proper quality (professional skill more related to the requirements phase);

Two project focals had more experience defining technical solutions for each project (professional skills more related to the design phase);

Two project focals had better experience in project management (professional skills more related to management activities);

The artifacts developed by the outsourcing companies were not fully reviewed due to lack of available time for this activity. So, it was not possible to ensure the quality of these artifacts;

The defect rate found in the user acceptance test was very high, well above the desirable limit set by the company. These defects should have been found when performing integration test. To be considered as a normal rate, the number of defects found in the user acceptance test must be equal to or less than half the number of defects found in integration test.

The defect rate found after the deployment of projects in production environment was also very high. There was an indicator that measured the effectiveness of the tests. This indicator is the result of the division between the sum of the total number of defects found before deployment and the same sum plus the number of defects found until 30days after deployment. The result should be equal to or less than 0.5 to be acceptable, but the results were always above this value, sometimes reaching 2.5.

A project was considered stable just after a period of 30days with no errors when executing in the production environment. If an error occurs before the system is considered stable (30days), it was assigned to the project focal responsibility. After this period, the errors found were sent to the two persons responsible for the production environment, overloading their activities.

Considering the issues identified, it was decided to split the members into “cells”. The composition and the activities of each cell were discussed with all team members. The first version of the new process was conceived late April 2010. In this first version, the team was divided into four cells:
                           
                              ▪
                              Project Cell (2 participants);

Analysis Cell (1 participant);

Design/Test Cell (2 participants); and,

Build/Production Cell (5 participants).

In each of these cells there should be a project focal for each project, responsible for the activities of the cell, as presented in Section 5.3. Besides the team division in cells, it was agreed that if any error found in the Build/Production cell needed an update of any document, this error should be sent to a cell focal in order to plan the correction in a way similar to a new project.

The development team addressed by this work is considered to be small; however the culture of the organization as a whole is based on processes and follows the patterns of large enterprises. Schoeffel and Benitti, in [20], state that micro and small enterprises cannot improve their software processes applying established models like CMMI or ISO/IEC 12207 directly and have to tailor them to their needs. So, the culture of the teams and the way the cells were arranged were mostly considered as a starting point to analyze and propose the improvements. There was no need to follow any established model or standard.

The definition of who would be assigned to which cell was done taking into account the skills and qualities most perceived by the teammates. These definitions intended to improve the process and to increase the chance of succeeding. Not all members of the team were satisfied with this division. Some considered that their skills would not be well used and others would like to do different activities, looking for new knowledge and opportunities to grow in their careers. The artifacts that should be conceived and approved in each cell are presented in Table 2
                        .

The artifacts generated by each cell are used as input to the next one, which is responsible for verifying and complementing it if necessary. From the artifacts generated in each phase, the activities were described for each cell. These descriptions, along with the process are presented in the following. Some activities are not defined in a sequential flow and are not connected to the others. These activities should happen sometime during the execution of the process, triggered by a specific point in the project or by a certain period of time.

The process presented in Fig. 3
                         shows the activities of the Project Cell. Activities numbers 1 through 9 are performed in sequence, and the activity number 9 should generate the test plan to guide the elaboration and execution of all test activities. Activities numbers 10, 11, 12 and 13 are not in sequence, but should be executed throughout the project development. Besides the process, some actions were proposed for all cells in order to standardize and make their jobs easier. The Project Cell had to create the documentation standard that would provide visibility of allocation and availability of each cell, to be completed by the team members.

The process presented in Fig. 4
                         shows the activities of the Analysis Cell, which mainly consist of requirements and analysis documentation activities. Unlike the Project Cell, all activities of the Analysis Cell follow a defined sequence. The main objective of the Analysis Cell was to ensure that use case documents were validated in order to have the highest possible quality.

Activities numbers 14, 15 and 16 were inserted to support the elaboration and execution of tests, even considering that the activity number 16 — “Complement test strategy” also exists in Design/Test Cell, trying to reduce the number of defects found during the user test phase. Activities numbers 14, 15 and 16 were inserted in the Analysis Cell because this cell should be the one with the greatest knowledge from the business perspective.

Besides the activities stated in Fig. 4, the Analysis Cell had the following actions to be done:
                           
                              •
                              Create standard scenarios based on the ones that occur in all projects in the context of use case documents, in order to guide the elaboration of test specifications.

Change the checklist of the existing use cases including items that have to be verified in all projects and are not yet part of the document structure validation.

Evaluate existing standard used in analysis diagrams and verify the need to include more items in the diagrams and even in the checklist.

Create a single use case repository to provide access to IT staff and to the team that is responsible for its construction.

Create standards for the certification plan and test case documents.

The process presented in Fig. 5
                         shows the activities of the Design/Test Cell. One of the main activities of this cell was to provide technical support for Analysis Cell during the use case specification, clearing up doubts and solving issues related to specification items that could not be built or would require major adjustments in the specifications. This cell also had the following actions to perform:
                           
                              •
                              Evaluate existing standards of design diagrams and verify the need to include more items in the diagrams or even in the checklist.

Create a standard for technical documentation that should describe all configuration items required for installing the system in the environments, as well as information concerning the project, involved teams and project focal.

Create a unique repository for the test case data.

The process presented in Fig. 6
                         shows the activities of the Build/Production Cell. The main responsibility of this cell was to ensure the quality of the source code produced, verifying its effectiveness and if it conforms to standards. This cell, due to the knowledge of the production environment, should also standardize all configurations in the environments, minimizing potential problems caused by wrong or undefined configurations, maintaining direct contact with the Support and Security teams.

This cell had a particular characteristic, as it was divided into two parts. The first part focused on the Build, which addresses new projects. The second part deals with projects that are already deployed in production environment and are already stable. The concept of a stable project is still the one that had no errors after a period of 30days when executing in the production environment.

The actions that this cell should do, besides the stated activities in the process, are:
                           
                              •
                              Create a standard for the requests made from the Design Cell;

Create a standard for generating logs into the source code;

Institutionalize the adoption of the JUnit tool to be used with unit test;

Create checklist or other way of validation to JUnit tests.

The cells and their activities were defined in order to create specialized teams to act in each phase of the project lifecycle. Another important issue was the validation of artifacts made by team members from two different cells. For example, the project focal assigned in the analysis phase validated the use cases. On the other hand, the project focal assigned on the design phase performed another validation before accepting these artifacts as input to the cell. The same validation should occur in all cells.

When defining the new process, it was necessary to adapt the projects that were being developed. The projects that were in build phase or previous phases would be adapted to the new process. The projects that were in the test phase would remain with the current project focal until the deployment to production environment. Besides these projects, all the new ones would be developed using the new process.

After about two months, all projects were already being developed following this new process. However, after a few months using the new process, some problems started to appear in the activity execution of each cell, as follows:
                           
                              •
                              Project Cell: problems of lack of communication of this cell with the other cells such as changing schedule and scope without proper communication. Some members of the cell have faced problems finding an appropriate rhythm of work, causing some members to perform activities from another cell, generating overload to them and dissatisfaction to the other members affected. Also, another issue was that schedules were defined without taking into account the actual availability of each cell.

Analysis Cell: the members of this cell got all their time reviewing the use case documents. Only in the first projects the other activities were performed. After that, the schedule often imposed by the project cell did not allow the execution of all other activities.

Design/Test Cell: this cell has also failed to perform the complete set of activities initially planned. The set-up activities that were required for installing the system in the test environments should be requested by this cell and performed by the Build Cell, which frequently could not execute all the required activities.

Build/Production Cell: the members of this cell had failed to share their time between project demands and production environment demands. Moreover, when they were working on projects, they were involved only when their activities were necessary, so that they did not felt as taking part of the project.

The result was that no cell could perform all activities and actions planned. The Analysis Cell, for instance, was able to perform the activities “14. Create certification plan” and “15. Elaborate test data” only in the first projects. Even when exchanging members between the cells, the problems were not solved.

In September of 2010, the activities were reviewed and the Build/Production Cell was divided. The Build part was integrated with the Design/Test Cell, creating two new cells, the Design/Test/Build Cell and the Production Cell. This was considered a minor review cycle inside the main first cycle.

At the end of December 2010, the entire team discussed the issues of the new process, as presented in the following:
                           
                              •
                              The Project Cell could not get a clear view of the cell allocation to define the schedule of projects correctly.

The members of the Analysis Cell were tired of the repetitive tasks and also for not being involved with the business decisions made by the Project Cell.

The new Design/Test/Build Cell had many activities and its members were overloaded.

The cell members did not feel part of the project. The perception of everyone was that all projects belonged to the Project Cell and the other cells worked for them.

Practically no standardization of artifacts was created to increase the quality of systems.

The planned schedule of each cell did not allow the validation of artifacts, which should be performed by project focals from two different cells. Without the validation of the use case documents by the cell that would guide its construction, some decisions could not be implemented, creating rework.

The effort evaluation to execute the projects was still done as in the old process, but it was found that in this way, the cost and time required for the projects had increased to get the specified quality.

Analyzing these problems, it became clear that most of them were related to lack of communication due to the number of people involved in the project. Thus, the process was changed again, creating a new cell by merging the Project and Analysis Cells, in a way that each project would have only two project focals. One responsible for the project managing and analyzing the business point of view (Project/Analysis Cell), and the other responsible for technical activities and system's production deployment (former Design/Test/Build Cell).

Besides communication, there were also problems concerning project schedules due to the lack of visibility of team availability. To solve this problem, it was conceived a spreadsheet to monitor and control projects, allowing this visualization and turning the activity of determining the team member's allocation easier. From that point on, the effort in hours was distributed between only two resources.

As stated by O'Connor and Basri, in [21], software development is more than effective programming and tools, and the success relies on people, organization and procedure, and “people involvement in improvement activities is important because employees must adopt process innovation in their day-to-day activities”. This factor was extensively considered when analyzing the first cycle and conceiving the second one.

As can be seen in this section, the Action-Research iterative nature was suitable to the problem being treated. Small review cycles lead to minor changes to adapt the process. A major change had to be performed, as can be seen in the next section.

The second improvement cycle had also followed the phases proposed by the Action-Research method, but had less emphasis on the data gathering, data feedback, and data analysis phases because the main focus was on the action planning, implementation and evaluation. In this last phase of the second cycle, when the second evaluation was performed, an extensive survey was conducted with the greater majority of the team members, from where it was possible to depict many characteristics of both improvement cycles.

The union of the cells had generated the need to review the proposed activities. This revision removed the activities and actions that were not performed due to lack of time. They had been included in the process in order to ensure the best quality of the systems developed, but had created frustration by not being executed, rather than satisfaction and motivation. Other unspecified activities were being performed but were not listed in the previous process, and were included in this new revised version.

In the first version of the process, there were 64 activities spread into 4 cells. After the redesign, the new cell created by the merging of Project and Analysis Cells resulted in 24 activities. The other new cell, responsible for the technical activities, created 25 activities. So, in total, this new revised process had 49 activities and started to be executed on March 2011.

The new process had these premises: existent cells for projects should address business and technical issues; project team composition should determine the participants according to availability, and if possible needed expertise; any progress achieved in the activities already performed should be maintained and continued; the two cells should ensure that their processes would be standardized for all projects to be developed.

The new cell activities are presented in Figs. 7 and 8
                        
                        . The production activities remain the same as presented in Fig. 6.

As a result of this new process, the resource allocation management became easier to be executed due to the spreadsheet that was updated more often. Thus, both for the team coordinator and for the team members, the percentage of allocation for each project was available and visible. Also, the members could have access to which projects they would work in the future.

The participation of both members of the team in the projects, with this new process, could occur at the same time and during all the project life cycle. The previous process did not allow this to happen, causing dissatisfaction for some members of the team because it seemed that they were not part of the project. Besides, the responsibility division during the project progress also has become clearer for everyone involved.

In order to identify the factors that had a direct influence on the implementation of the new process, a survey was conducted within the project team. A questionnaire was conceived aiming at addressing many factors that were noticeably treated during the implementation of each process phase. The great majority of the team, nine participants, had answered the questions and contributed with this closing activity.

These factors should be used to establish and improve the process controls, having as the main goal of informing the development team and motivating them to improve their performance. The questionnaire created has considered some ideas from a quality evaluation method SERVQUAL [22,23], which can be applied in situations where service processes are involved. One version of the SERVQUAL method has four distinct gaps that can be measured in organization processes, as presented by [22]:
                           
                              •
                              Gap 1: difference between consumer expectations and management perceptions of consumer expectations;

Gap 2: difference between management perceptions of consumer expectations and service quality specifications;

Gap 3: difference between service quality specifications and the service actually delivered;

Gap 4: difference between service delivery and what is communicated about the service to consumers.

These gaps can lead to a variable called perceived service quality, which is the distance between the client expectation and the client perception for the service. The variable value will be defined on the combination between four gap values. For each gap, the method defines relationships with some organization constructs. These constructs are quality fields to improve the service process.

Considering SERVQUAL as a base method, a subset of its characteristics was used to conceive the questionnaire structure. Each question aims at identifying, for each success factor, the extent to which the participant agrees, from 1 (low) to 9 (high), to the perceived level of the factor during the implementation process of the new process. This evaluation represented the perceived level.

The second aspect consisted in the participant indicating the minimum acceptable level for each factor. This illustrated what the participant considered to be the lowest level that could make the implementation feasible. So, below this specific level, the deployment process would be unsuccessful, or the level would be unacceptable.

The third and last aspect was the maximum desirable level, also considered as ideal. Here the participant pointed out the individual opinion, not necessarily 9 (highest) for all issues, considering the point of view and priorities assigning higher levels for the issues that would have a greater impact on the success of the project.

The resulting questionnaire composition is presented and is divided into thirteen factors as follows:
                           
                              •
                              F1 — with regard to the degree of acceptance and predisposition to change of the team who participated in the project.

F2 — about the motivation of the people who participated in the project.

F3 — with respect to conciliation of interests of the members who participated in the project, mainly considering that they could be allocated to cells that were not necessarily the originally desired.

F4 — regarding the commitment to project success by the participants of the project.

F5 — with respect to engagement in the process due to real consciousness of the future benefits of the new process (and not only by managerial imposition).

F6 — with regard to project management, considering the project plan, the monitoring and control, and the effective conduction of the project.

F7 — about the effectiveness of communication during the new process implementation, considering everyone involved: team members, members who have defined the processes and project managers.

F8 — with respect to how the people who participated in the process were involved from the very beginning of the project, knowing and having the opportunity of collaborating with the planning, content and evolution of the project.

F9 — about the trainings and courses, even informal ones, if they were adequate to support the teams when deploying the new process.

F10 — about the adequate allocation of resources for analyzing the current processes and defining the new ones, as well as to support teams during the new process implementation.

F11 — regarding the implementation strategy of the new process implementation.

F12 — with respect to satisfaction with the final result of the new process, especially addressing the organization and the collectivity.

F13 — with respect to your satisfaction (individual) after the implementation of the new process.

Some previous works addressing software process improvement evaluation were used as basis when conceiving the questionnaire applied in this work. The concepts presented by [24], aiming at identifying critical success factors, have grouped twenty-five questions considering twelve different success factors, like F1—Politics, F2—Acceptance to change, F3—Conciliation of interests etc., and have inspired, in part, all factors of the current work. One example of a property proposed by the original work [24] is “P1—Existence of acknowledgement politics to SPI (software process improvement) collaboration”.

A framework for success evaluation of software process improvement, presented in [25], was also used to verify the completeness of the factors addressed by this work. The proposed framework complements a previous work and considers four perspectives, as follows: a) context of the environment where the new process is developed and operated; b) inputs, as factors and resources applied in the improvement project; c) process, addressing the motivations and objectives, the responsibility of the implementation team, the process improvement itself, and process training and awareness; and lastly, d) products, as outputs, like the new processes, reports etc.

One example of a question proposed for the Context perspective, identified as Context C1, Question 2.6, is: “Do you think it is important that the goals of the process improvement program are congruent with the goals of the company?” [25]. The framework uses twenty-nine questions grouped into four perspectives, as previously presented.

The work of [25] has considered responses rated from one to five, on a Likert scale. As the evolution of the SERVQUAL method, starting with five options and ending up with nine options of answer, this work has used as basis the factors, questions and perspectives of software process improvement of other works, but not their scale of evaluation, here considered from one to nine.

The evaluation will be fully described in the next section.

As previously presented, each factor of the software process improvement was addressed by a question, from F1 to F13, and the analysis considering the results individually and grouped is discussed below. The three aspects for each factor were considered (minimum acceptable level, maximum desirable level and perceived level), providing more information to help the authors and one member of the team to demonstrate the grades, whenever possible, and to map the results with the issues found during the process improvement implementation project.
                        
                           F1 — acceptance to change: this factor presented the second lowest grade for the minimum acceptable levels, but average grades for the maximum desirable level and perceived level. One reason for this result was that part of the team did not expressed their opinions during the implementation process (or even before the project starts), so they have participated because of the others, and mainly the coordinators, have decided to work with new processes. So, considering that they were satisfied with their present positions and activities, they did not express a great need, and consequently acceptance, to change the process.

F2 — motivation: this factor is strongly connected with F1 factor, and presented very similar results for the three aspects of the survey, but with little higher grades for minimum acceptable and perceived levels. Here, also, those who were satisfied with the original situation have assigned an average level of motivation to change. So the result of the perceived level was 6.33, very close to the 6.26 average grade of all factors.

F3 — conciliation of interests: this factor had the lowest minimum acceptable and lowest maximum desirable levels, and the second lowest perceived level (just higher than F9 — Training). It clearly illustrates a very sensible point that interferes directly with the daily activities of the members of the team, which is the definition of the roles of each one. In the first process, with four different cells, this factor was an obstacle because the team had just a few members, that had to be allocated where they could be more helpful in this first stage, so many of them were in a position that they did not like. When the final version of the process was implemented, considering the number of members and activities to be done, most of the allocation problems were solved. Nevertheless, still a few members responsible for business processes were not fully satisfied and would like to discuss technical matters, as they had technical background, and did not like to depend on other members to get the work done. The drawback when this situation happened, besides the conceptual non-compliance, was the overload of activities for the business cell.

F4 — commitment to success and F5 — unforced process engagement: these two factors are related and the result of the evaluation was similar, with a little lower perceived level for F5 factor. During the process implementation, the members that were more involved with the process definition were more committed and did not need coordinators and managers persuasion. The majority of the team collaborated a lot and those who did not wanted many changes expressed their opinions and worked with the project just when asked to.

F6 — project management: the evaluation, considering the three aspects of the survey, was above the average of the factors, but the maximum desirable level was together with F7 — communication effectiveness factor, the highest of them all. This shows that the whole team relied much on the way the project had to be conducted and the performance of the project managers.

Considering the lack of formal mechanisms for controlling the project, problems started to arise because the members started to complain about the process issues, rather than due to a formal evaluation when implementing the new process. This was not the ideal situation but worked to change and improve the process.

F7— communication effectiveness: this factor is a subset of F6 — Project Management factor, but has the specific focus on the communication. The perceived level of this issue was lower than the minimum acceptable level assigned by the participants, so it was considered a critical factor. Six out of nine participants have assigned perceived grades lower than the minimum. Altogether with F6, the desirable levels of these factors were the greatest of all, what demonstrates that the team relied on communication and project management as the most important factor of success.

One explanation for this result is that after the initial process (with four cells) has demonstrated not to be working properly, not all team members were selected to redesign the process. To conceive the first version of the new process, all members have participated and the meetings and discussions were long and, sometimes, not productive due to the amount of people. From the second round of discussions on, just four members have played a decisive role defining the processes, so the rest of the team felt a little because they were used to participate in all meetings and have all information concerning the project all the time.

F8 — early involvement: this factor had the highest grades for minimum acceptable and perceived levels, and the second highest grade for maximum desirable level, showing that the involvement of all team members had really occurred from the very beginning of the project, the opportunity to collaborate (as stated in the original question) was given and the result was satisfactory.

The approach of concentrating the discussion of the second re-design in a smaller group did not impact much on the opportunity of all members to collaborate. Also, the impact of the process change in this second phase was far lower when compared to the first process, which promoted a radical change.

Finally, all members have always received the complete set of process documentations, and have also conducted an individual transition plan for all on-going projects, in order to be adherent to each new process. O'Connor and Basri, in [21], state that the “lack of involvement will disturb the improvement process because if employee did not commit themselves to all the propose change activities, the aim of process improvement will fail”. So the early involvement factor had major attention within the improvement cycles.

F9 — training for process implementation: this factor is one of the three factors that had the perceived level lower than the minimum acceptable level. On the other hand, the maximum desirable level assigned for this factor was the second lowest of all. So, even considering that the factor was not so important, with low expectations, seven out of nine participants assigned low evaluations to the perceived level (worst case of all factors). One respondent had even assigned the grade 1 to the perceived level.

Initially the members of the team were assigned to work with the processes that they had more experience with, so no or little training was necessary and the team performance was considered acceptable. After the first iterations of the process, even when the processes definition continued to evolve, some members were changed to other positions where they did not had the necessary expertise to play their new role, and there was no training planned for that situation. This result, so, was clearly depicted in this factor evaluation.

F10 — resources for defining processes and supporting the teams: the evaluation of this factor had a perceived level lower than the minimum acceptable for four out of nine participants. That was an expected result considering that there were no specific members of the team assigned to define processes or support other members. All activities occurred by the effort of the team as a whole, but the survey showed that, in general, they expected more support to implement the process.

F11 — implementation strategy: the minimum acceptable level for this factor was one of the lowest and the perceived level was slightly higher than the average, showing that the implementation strategy had occurred, but was not considered very important.

As the process was conceived inside the team and had a good acceptance, as the project advanced, the most important thing was to try to evolve as fast as possible, in order verify if the performance of the team had really increased, rather than planning in detail the implementation strategy. The strategy was done, but was not considered one of the most important matters.

F12 — satisfaction with the results for the organization and F13 — individual satisfaction with the new process: these two factors, even considering that they were supposed to have different evaluations, are here discussed together due to the analysis of the resulting data considering the individual evaluation of each factor by each member, as well as the consolidated results. With exception of one grade varying from 7 (F12) to 1 (F13) in the perceived level of just one member, all the other aspects of all members presented almost identical levels for F12 and F13.

It was expected to have more dissatisfaction with the F13 factor, for the individual aspect of dealing with the position that every member was assigned, but both factors have presented higher perceived levels than the average of all factors. This was a positive point, even considering that when defining the last versions of the process, not every member of the team has participated fulltime with the improvement initiatives.

As an overall analysis of this factor, F13 perceived level had the second highest level of all and the F12 perceived level was just a few points lower, but still very positive.

For each factor, all the answers of each member (unidentified) were considered, taking into account the three aspects (minimum, maximum and perceived levels). Also, a Marked Radar Graphic of all factors was done and used, altogether with the average chart, presented in Table 3
                     .

The overall analysis considering the data provided by the Marked Radar Graphic presented in Fig. 9
                     , besides all the individualized and factor-by-factor considerations previously presented in this section, shows that the expectations of the team with almost all factors were near level 9, the highest possible available by the method.

In general, it is possible to observe that the majority of the factors are placed between the minimum acceptable and the maximum desirable levels, although they are located very close to the minimum line. Factors F7 — communication effectiveness, F9 — training for process implementation and F10 — resources for defining processes and supporting the teams were the ones that had perceived levels lower than the minimum acceptable levels. The corresponding explanations for these events were previously discussed.

F8 — early involvement factor is the only one located closer from the maximum level than from the minimum level, due to the approach used by the project manager and also by the team members since the very beginning of the project.

Finally, F3 — conciliation of interests' factor resulted in an overall low evaluation, presenting all three aspects of this factor below the average of all factors. The reasons are explained when this factor, individually, is previously analyzed, but it is possible to summarize as the concern and impact in everyone's activities and position inside the cells that the new process could change.

The first attempt to change the process incorrectly meant that each cell was responsible only by their own activities. Once the activities assigned to the cell were finished, the level of commitment decreased and they felt they were no longer responsible for the overall success of the project. This was not the original intention, and it has changed on the second process. Several meetings were conducted to change this vision and to make clear that every member is responsible for the project development, each with their role, but always together and working to reach a common goal.

Schoeffel and Benitti, in [20], state that factors concerning the organization, teams and processes influence the success or failure when adopting a software process improvement model for small enterprises or small teams. The results of the survey concerning the improvement process showed that the factor concerning the people involved, grouped in teams, was very important and had fundamental impact on the success of the project.

The last process started to be executed on March 2011 and has been extensively used. The members were satisfied with their responsibilities and opportunities to grow with each new project. The main considerations that can be evidenced are listed below:
                        
                           •
                           The systems are being deployed in production environment with superior quality if compared to those deployed using the previous process, considering the results of the indicator that measures the effectiveness of the tests and the lower number of new production defects.

The cell members are allocated to projects according to their expertise, but always with growth opportunities, considering that the teams are not always the same and the challenges to be faced during the execution of the projects are different each time.

All cells feel being part of the project, each with their responsibilities, but always considering the project as a whole.

The quality improvement in the use case documents remained, because the previous Analysis Cell worked with the team responsible for the construction of these documents, and showed the common problems, guiding them on how to build better use cases.

The integration tests are more complete leading to less defects found in the acceptance user tests.

The communication problems no longer exist, because the technical project focal is involved from the very beginning of the project, even before the effective participation is needed.

The schedules are defined based on the actual resource availability.

There are team members exclusively focused on the production environment.

The first attempt to change the process was too radical. The activities were defined taking into consideration an “ideal world”, but this was not possible to get at that time. In addition, schedules and costs have not changed, because they were also validated and often imposed by other teams of the company. The extra effort necessary for these activities could not be considered.

The only difficulty faced with the last version of the process was the adaptation period for new members to get integrated to the actual teams, considering that this process is not known by the other teams of the company. The new process has achieved the initial objective of promoting satisfaction and motivation in employees, as well as has increased the quality of systems developed. More and more, new standardizations are being created, reducing the time to perform current activities and freeing up time to perform validations that will increase the quality of systems.

This work has demonstrated that, in order to propose changes in processes, it is necessary to consider that the real objective will only be achieved if the involved people are comfortable with the changes and they can realize that they will always have opportunities for growing in their careers. Otherwise, the change will not bring positive results and may even frustrate the professionals and decrease productivity.

A future improvement cycle could address more deeply the team competences and conceive a formal mapping of each team member with his or her competences, considering the lack of roles available and also some activities as those played by the project focal, who acts sometimes like a project manager and sometimes like a technician. The work of Colomo-Palacios et al. [26] could help in identifying and evaluating the competences and in showing the gaps within the context of this project team.

@&#REFERENCES@&#

