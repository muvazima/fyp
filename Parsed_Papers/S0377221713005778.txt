@&#MAIN-TITLE@&#A mathematical model of inter-terminal transportation

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Novel integer programming model for analyzing inter-terminal transportation (ITT).


                        
                        
                           
                           Minimizing container delivery delay taking into account key components of ITT.


                        
                        
                           
                           First ITT model incorporating optimization of vehicles and cargo flows.


                        
                        
                           
                           Vehicle and multi-commodity container flow on a time–space graph.


                        
                        
                           
                           Real-world aspects: vehicle congestion, penalized lateness, multiple transport modes.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Logistics

Transportation

Networks

Strategic planning

Container terminal

Inter-terminal transportation

@&#ABSTRACT@&#


               
               
                  We present a novel integer programming model for analyzing inter-terminal transportation (ITT) in new and expanding sea ports. ITT is the movement of containers between terminals (sea, rail or otherwise) within a port. ITT represents a significant source of delay for containers being transshipped, which costs ports money and affects a port’s reputation. Our model assists ports in analyzing the impact of new infrastructure, the placement of terminals, and ITT vehicle investments. We provide analysis of ITT at two ports, the port of Hamburg, Germany and the Maasvlakte 1 & 2 area of the port of Rotterdam, The Netherlands, in which we solve a vehicle flow combined with a multi-commodity container flow on a congestion based time–space graph to optimality. We introduce a two-step solution procedure that computes a relaxation of the overall ITT problem in order to find solutions faster. Our graph contains special structures to model the long term loading and unloading of vehicles, and our model is general enough to model a number of important real-world aspects of ITT, such as traffic congestion, penalized late container delivery, multiple ITT transportation modes, and port infrastructure modifications. We show that our model can scale to real-world sizes and provide ports with important information for their long term decision making.
               
            

@&#INTRODUCTION@&#

Around the world, ever larger ports are being constructed to keep up with the growth of containerized shipping. Ports routinely contain multiple terminals serving container ships, railways, barges and other forms of hinterland transportation. Containers are often transferred between terminals when they are transshipped between different modes of transportation. The movement of containers between terminals, which is called inter-terminal transportation (ITT), represents not only an operational problem for port authorities and terminal operators to deal with, but also a strategic one to be considered during the planning of new terminals and container ports.

The correct choice of the layout of terminals and the transportation connections between them, as well as vehicle type and the number of vehicles, represent expensive and critical decisions that ports must make. The goal of an efficient ITT system is to minimize the delay of containers moving between terminals, so as to reduce and, ideally, eliminate the delayed departure of containers. To this end, we introduce an optimization model based on a time–space graph to determine optimal flows of vehicles and containers in ITT scenarios in order to assist port authorities in their decision making process.

We use an abstract view of ITT operations using a time–space graph with maximum arc capacities and node throughput to model vehicles as flows through the network with transportation demands given as a multi-commodity flow. We focus on minimizing the overall delay experienced by containers, an important consideration for port planners, as the costs of delaying outgoing shipments are usually very high.

Previous work in the area of strategic analysis of ITT primarily deals with simulating inter-terminal operations at the Maasvlakte area of the port of Rotterdam and analyzing the resulting delay of the pickup and delivery of containers (Ottjes, Duinkerken, Evers, & Dekker, 1996, 2006, Duinkerken et al., 2006). In contrast to this work, we optimize the flows of containers through the network in order to provide port planners with a better estimation of the cost of using particular vehicles, roadway designs, new infrastructure or traffic planning. Thus, this paper provides the following novel contributions:
                        
                           1.
                           the first fully defined mathematical model of ITT,

two exact approaches for minimizing ITT delivery delay,

congestion modeling in the setting of vehicles servicing a multi-commodity flow.

This paper is organized as follows. We first provide an overview of ITT in Section 2, followed by a brief literature review in Section 3. We then present our mathematical model in Section 4, as well as our method for constructing the time–space graph and a two-step solution approach for solving our integer programming (IP) model. We provide computational results in Section 5, showing that our model not only provides useful information about ITT, but also that it can be computed by CPLEX in a reasonable amount of time. Finally, we conclude in Section 6 and discuss directions for future work.

ITT involves the movement of containers between terminals in a port. There are several types of terminals, including waterside terminals that have a quay where container ships and barges can dock and transfer containers, rail terminals where containers can be loaded onto rail cars, as well as hinterland terminals which can be set far inland and deal with barge, rail or truck transportation. ITT traffic generally consists of either sea-to-sea transportation, i.e., containers being transshipped between vessels, or land-to-sea/sea-to-land transportation, in which containers originating from overseas (the hinterland) are carried to (from) the hinterland by another mode of transportation such as a barge or train.

At first glance, ITT might seem avoidable, either through scheduling container vessels that will transship containers to arrive at the same terminal, or by placing key logistics components of a port all in the same location. However, in nearly every mid to large sized port some amount of ITT is required, due to the fact that avoiding ITT would involve building rail, barge, and container ship connections all in one place, and there simply is not enough space.

There are, therefore, two important problems within the topic of ITT. The first is the purely operational problem of dispatching and routing vehicles to move containers between terminals on a day to day basis in an already constructed port. The second problem is a strategic planning problem for new ports and the expansion of existing ports, which involves several key questions:
                        
                           1.
                           Is the planned infrastructure sufficient to handle ITT forecasts?

What types of vehicles and how many of them are necessary to handle ITT containers?

What kind of delays will be experienced, on average, given a particular infrastructure and vehicle configuration?

In this paper, we provide an optimization model that assists in answering these questions, as well as supports port and terminal authorities in examining the impact of new infrastructure, such as tunnels or bridges, on the overall delay experienced by ITT containers. Thus, while we primarily address the strategic planning issues, our model is also capable of dispatching and routing vehicles in the operational problem at a high level.

We consider a range of types of vehicles for ITT that each comes with pros and cons that must be evaluated by decision makers.

AGVs are driverless vehicles that can carry up to one forty-foot container or two twenty-foot containers, and have no lifting capabilities of their own. This means that AGVs require cranes for (un) loading operations. Current AGV systems are only allowed in areas where there are no humans in order to prevent accidents. However, this is likely to change as safer AGVs are developed.

ALVs, like AGVs, are also driverless vehicles that can carry two twenty-foot containers or one forty-foot container. As their name implies, ALVs have lifting capabilities and do not require external assistance to transport containers. This makes ALVs significantly more versatile than AGVs. However, they generally travel slower.

MTSs consist of several container carrying trailers, that can generally transport up to five 40-foot containers. MTSs require cranes to load them as in the case of AGVs. MTSs are not automated and require a human to drive a tractor unit that pulls the trailer. While this allows more flexibility in the places an MTS can travel, the coupling time of the tractor unit to the trailer can result in a slower turn-around time for the vehicles than AGVs or ALVs. This process is described in detail in Duinkerken, Dekker, Kurstjens, Ottjes, and Dellaert (2006).

Barges can be used to transport large quantities of containers between terminals all at once and are driven by humans. Barges are loaded slowly and travel slowly, but have an advantage over road vehicles in that waterways tend to offer shorter connecting distances between terminals than roads, as well as being less congested. Additionally, barges have high capacities in comparison to land based vehicles, and are generally able to carry 40–50 containers.

In order to solve the steep logistical challenges of ITT as container volumes around the world substantially increase, new infrastructure ideas must be considered. The construction of ropeways, monorails, dedicated lanes, tunnels and bridges to connect ports to shunting yards/hinterland logistics centers or to avoid bottlenecks could provide answers for effective ITT. For example, the cost of tunnels and ropeways were considered for connecting the port of Hamburg to hinterland transportation depots in Daduna, Stahlbock, and Voß (2012). Although ropeways using current engineering technology were found to be infeasible to carry the weight of fully loaded containers, it shows that with new ideas come new challenges for evaluating their effectiveness. Our goal is to be able to take any potential infrastructure change into account in a general model.

@&#LITERATURE REVIEW@&#

Copious studies simulate and optimize container movements within container ports and terminals; see (Steenken, Voß, & Stahlbock, 2004; Stahlbock & Voß, 2008a). A particular focus has been placed on intra-terminal simulation and optimization (see Angeloudis & Bell (2011) for an overview), considering primarily AGV and ALV dispatching and routing (e.g. Briskorn & Hartmann, 2006; Grunow, Günther, & Lehmann, 2007; Nguyen & Kim, 2009; Jeon, Kim, & Kopfer, 2010). AGVs and ALVs were compared in Vis and Harika (2005) to determine which could be used to unload ships fastest, with ALVs being shown to require less overall vehicles and cost. Vehicle dispatching within a container terminal has been considered in, e.g., Bish et al. (2005), Lee, Chew, Tan, and Wang (2010), and as an integrated component of unloading vessels in Chen, Langevin, and Lu (2013). A comprehensive review on vehicle routing applications on container terminals can be found in Stahlbock and Voß (2008b). A handbook on terminal planning is Böse (2011).

Intra-terminal transportation is characterized by its short distances and lack of external traffic interaction. This stands in sharp contrast to ITT, in which vehicles may travel several kilometers to deliver containers over publicly accessible roads. Intra-terminal transportation models and simulations are, therefore, usually not applicable to ITT. Transshipment has been considered in an intra-terminal context in Kozan (2000). However, the network based model presented does not take a flow based view of vehicles, meaning modeling congestion is not possible in this framework.

The general processes of transshipment, including ITT, are described in Vis and De Koster (2003). The most relevant works to ITT are Ottjes et al. (1996, 2006) and Duinkerken et al. (2006), which all describe simulation approaches to ITT at the port of Rotterdam. The goal of these studies is to measure the amount of non-performance, i.e., the number of containers arriving at their destination terminal after the due time. While a simulation approach is able to model many details of ITT operations, such as loading and unloading procedures and the usage of manned traction units in multi-trailer systems, the approach does not perform optimization other than to tune the parameters by which the optimization is run to try to reduce non-performance. In particular, Ottjes et al. (2006) consider more than just ITT in the simulation approach, including also quay-side movement of containers from ships into stacks. Our model stands in contrast to these approaches in that we optimize ITT using network flows, providing ports with a different view of non-performance.

We model ITT on a time–space graph which has several specially designed structures in order to model traffic congestion as well as the loading and unloading of vehicles. We have created a general model that can incorporate essentially any type of vehicle used for ITT, as well as different types of infrastructure. Our graph uses a carefully designed structure in order to model the handling of slow loading vehicles like barges, and includes components capable of modeling traffic congestion.

We base our model on several key assumptions. The first assumption is that different types of vehicles do not interact with each other except through the loading and unloading of containers at terminals. This means that graph arcs do not have multiple vehicle types traveling on them. This assumption greatly reduces the size of the model, reducing both the number of nodes and arcs considerably. This is due to the varying speeds, load times, and congestion properties of vehicles. Second, we assume that ITT containers should be penalized for late arrival, but being early is allowed. This stands in contrast to Duinkerken et al. (2006), but we consider containers that are delivered early to be the responsibility of intra-terminal operations. Such containers can be stored either in a stack in the yard or in a rolling buffer. Third, we consider all types of containers as requiring a single unit of capacity on vehicles. In practice this is not true since there are 20 and 40 foot containers, as well as out-of-gauge containers that must be transported between terminals. Our model is capable of handling such containers with minor changes, but we save these for future work. Finally, we abstract away short vehicle activities, such as connecting a tractor to a trailer loaded with containers in an MTS. While many short activities add up over time, modeling them in a network flow requires too fine a discretization. However, due to the short length of such activities, excluding them from the model does not represent a major source of error.

We first consider a base graph which is a non-temporal graph that describes the basic connections between terminals. Let n be the number of terminal nodes and m be the number of intersection nodes. Thus, the base graph G
                        =(V,
                        A) where V
                        ={1,…,
                        n
                        +
                        m} is the set of all nodes and A is the set of arcs (i,
                        j) where i, j
                        ∈
                        V.

Using the base graph, we can now construct a time–space graph containing the special structures that are necessary to model ITT. Let τ be the number of time periods. Let G
                        
                           T
                        
                        =(V
                        
                           T
                        ,
                        A
                        
                           T
                        ) be the time–space graph where V
                        
                           T
                         is the set of nodes and A
                        
                           T
                         the set of arcs. The time–space graph consists of three types of nodes: terminal nodes, intersection nodes, and long-term nodes, or LT nodes. LT nodes are copies of the terminal nodes, and model the long term loading/unloading of containers. We require LT nodes because some vehicles, such as trains and barges, take more than a single time discretization to fully (un)load. Without these extra nodes, these vehicles would be able to load and unload at an unrealistic rate unless the model kept track of the remaining capacity of each vehicle at each time step. LT nodes prevent the problem size from being dependent on the number of vehicles in the problem. Let V
                        
                           T
                        
                        ={1,…,
                        τ(βn
                        +
                        m)}, where β is a parameter that equals 2 if there are long-term vehicles, such as barges, present in the model, and 1 otherwise. In other words, when LT nodes are needed we create a time–space graph with two nodes in each time period for all terminals with a single node in each period for intersections, and when LT nodes are not needed we create a single node in each time period for both terminals and intersection nodes.

We first show how stationary arcs connect time–space nodes at the same terminal from different periods, then describe LT nodes and their connection to other nodes in the graph, portray how congestion is handled in our graph, discuss the properties of arcs and nodes in the graph, and finally explain the graph’s demand structure.

In order to allow vehicles and containers to remain in the same place across time periods, we introduce stationary arcs that connect each terminal, intersection and LT node in subsequent periods. Let A
                           
                              S
                            be the set of stationary arcs defined as
                              
                                 
                                    
                                       
                                          A
                                       
                                       
                                          S
                                       
                                    
                                    =
                                    
                                       
                                          
                                             ⋃
                                          
                                          
                                             0
                                             ⩽
                                             t
                                             <
                                             τ
                                          
                                       
                                    
                                    
                                       
                                          
                                             ⋃
                                          
                                          
                                             1
                                             ⩽
                                             i
                                             ⩽
                                             β
                                             n
                                             +
                                             m
                                          
                                       
                                    
                                    {
                                    (
                                    τ
                                    i
                                    +
                                    t
                                    ,
                                    τ
                                    i
                                    +
                                    t
                                    +
                                    1
                                    )
                                    }
                                    .
                                 
                              
                           Thus, each node at each time step (τi
                           +
                           t) is connected to itself at the next time step (τi
                           +
                           t
                           +1).

We introduce an LT node for each time–space terminal node in the graph when there are long-term vehicles, such as barges, present and connect these nodes to each other with an arc in each direction. Let
                              
                                 
                                    
                                       
                                          A
                                       
                                       
                                          LT
                                       
                                    
                                    =
                                    
                                       
                                          
                                             ⋃
                                          
                                          
                                             0
                                             ⩽
                                             t
                                             <
                                             τ
                                          
                                       
                                    
                                    
                                       
                                          
                                             ⋃
                                          
                                          
                                             1
                                             ⩽
                                             i
                                             ⩽
                                             n
                                          
                                       
                                    
                                    {
                                    (
                                    τ
                                    i
                                    +
                                    t
                                    ,
                                    τ
                                    n
                                    +
                                    τ
                                    i
                                    +
                                    t
                                    )
                                    ,
                                    (
                                    τ
                                    n
                                    +
                                    τ
                                    i
                                    +
                                    t
                                    ,
                                    τ
                                    i
                                    +
                                    t
                                    )
                                    }
                                    ,
                                 
                              
                           where τ is the number of time periods and n is the number of terminals. Thus, each time–space terminal node has both an incoming and outgoing arc to its associated LT node. Fig. 1
                            shows the relationship between time–space terminal nodes and LT nodes, along with a depiction of the flow of a demand over the LT arcs. The solid lines are stationary arcs (a subset of A
                           
                              S
                           ) for node i
                           ∈
                           V, the dashed lines represent LT arcs that connect node i to its LT counterpart (a subset of A
                           
                              LT
                           ), and the dotted lines are arcs associated with the LT vehicle, either waterways or rail tracks. Solid gray lines show arcs that only road vehicles (such as AGVs, ALVs, and MTSs) may traverse. The figure shows a demand with 12 containers that is being loaded onto an LT vehicle from time period 0 to period 2. Arcs are labeled with the amount of containers being carried on them. The blue arcs show the path of an LT vehicle as it loads the 12 container demand. In each time period, 4 containers are transferred from the terminal node to the LT node until the entire demand is loaded, at which point the LT vehicle can travel to the destination of the demand, or load containers from another demand at some other terminal.

Traffic congestion is a key issue facing many ITT systems, as they often utilize roadways open to general traffic. Modeling the basic effects of congestion is an important component of our model. For example, these allow us to assess the effects of rush hours on ITT, the impact of high-occupancy/priority lanes for ITT vehicles in a port area, the effect of tunnels for avoiding traffic, or how an intra-port road network could increase on-time ITT delivery. We therefore impose a capacity on the number of vehicles that can travel on certain arcs. This capacity corresponds to the maximal number of vehicles that could be simultaneously using the roadway (or waterway) at a particular time, as well as limits the total throughput of intersections in each time period. Congestion is thus modeled as spillover from one time period to another, as stationary arcs have no capacity restrictions. That is, when an arc or intersection is full, vehicles must wait until the next time period to use it. In this way, delay is achieved for overutilized roadways and intersections. We save more detailed congestion models for future work, such as those in Kaufman, Nonis, and Smith (1998) or Köhler, Langkau, and Skutella (2002), as the details that they model are too fine for the time discretization currently necessary to solve ITT problems. Additionally, neither congestion model is able to take into account our multi-commodity flow or LT nodes, meaning the integration of such techniques into an ITT model is non-trivial.

Each arc in the time–space graph has a maximum number of vehicles that can travel on it in a single time period, c
                           
                              ij
                           . Let H be the set of all vehicle types, each of which is associated with a maximum container carrying capacity, μ
                           
                              h
                           . We associate each arc with a specific vehicle type that may travel on the arc, η
                           
                              ij
                           
                           ∈
                           H
                           ∪{⊥}, with (i,
                           j)∈
                           A
                           
                              T
                            and ⊥ indicates that an arc connects a node to an LT node, as no vehicles utilize such arcs. That is, η
                           
                              ij
                           
                           =⊥ for all (i,
                           j)∈
                           A
                           
                              LT
                           .

We define several functions to assist in accessing the arcs in the model. Let In(i)={j∣(j,
                           i)∈
                           A
                           
                              T
                           } (Out(i)={j∣ (i,
                           j)∈
                           A
                           
                              T
                           }) be the set of nodes with arcs to (from) node i
                           ∈
                           V
                           
                              T
                           .

Each time–space node is associated with a number of vehicles present at its location at the start of the model, s
                           
                              i
                           , with i
                           ∈
                           V
                           
                              T
                           . In other words, s
                           
                              i
                            defines the origins of the vehicle flow. In general, the only nodes with any vehicles before the optimization begins are the terminal nodes at time zero. From a modeling perspective, when the vehicles are made available is irrelevant so we leave this possibility open, even though we do not foresee a scenario in which it would occur.

Each node is capable of performing m
                           
                              i
                            load or unload moves per time period for road vehicles, and 
                              
                                 
                                    
                                       m
                                    
                                    
                                       i
                                    
                                    
                                       LT
                                    
                                 
                              
                            moves for barges. Note that although there are multiple types of vehicles in the model, they do not interact at the same nodes, since only a single type of road or water vehicle is allowed in a particular instance. Thus, each node is able to have a single value for the number of loads/unloads that can be performed, rather than an amount for each vehicle type. Since the maximum number of loads/unloads at a terminal node only pertain to particular arcs, we define the set
                              
                                 
                                    
                                       
                                          V
                                       
                                       
                                          i
                                       
                                       
                                          
                                             
                                                T
                                             
                                             
                                                →
                                             
                                          
                                       
                                    
                                    =
                                    {
                                    j
                                    |
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    
                                       
                                          A
                                       
                                       
                                          T
                                       
                                    
                                    ⧹
                                    
                                       
                                          A
                                       
                                       
                                          S
                                       
                                    
                                    ∧
                                    
                                       
                                          η
                                       
                                       
                                          ij
                                       
                                    
                                    
                                    ≠
                                    
                                    ⊥
                                    }
                                 
                              
                           to be the set of nodes connected by outgoing, non-stationary, non-LT arcs from the time–space terminal node i, and
                              
                                 
                                    
                                       
                                          V
                                       
                                       
                                          i
                                       
                                       
                                          
                                             
                                                T
                                             
                                             
                                                ←
                                             
                                          
                                       
                                    
                                    =
                                    {
                                    j
                                    |
                                    (
                                    j
                                    ,
                                    i
                                    )
                                    ∈
                                    
                                       
                                          A
                                       
                                       
                                          T
                                       
                                    
                                    ⧹
                                    
                                       
                                          A
                                       
                                       
                                          S
                                       
                                    
                                    ∧
                                    
                                       
                                          η
                                       
                                       
                                          ji
                                       
                                    
                                    
                                    ≠
                                    
                                    ⊥
                                    }
                                 
                              
                           to be the set of nodes from incoming, non-stationary, non-LT arcs from the time–space terminal node i.

We consider ITT demands using a multi-commodity flow. ITT requires a multi-commodity flow in order to adequately model the flow of containers between terminals at various times. Let Θ be the number of demands, and 
                           
                              
                                 
                                    o
                                 
                                 
                                    θ
                                 
                              
                              ∈
                              V
                           
                        , 
                           
                              
                                 
                                    d
                                 
                                 
                                    θ
                                 
                              
                              ∈
                              V
                           
                        , 
                           
                              
                                 
                                    a
                                 
                                 
                                    θ
                                 
                              
                              ∈
                              
                                 
                                    Z
                                 
                                 
                                    +
                                 
                              
                           
                        , 
                           
                              
                                 
                                    r
                                 
                                 
                                    θ
                                 
                              
                              ∈
                              {
                              0
                              ,
                              …
                              ,
                              τ
                              -
                              1
                              }
                           
                        , and u
                        
                           θ
                        
                        ∈{0,…,
                        τ
                        −1} be the origin node, destination node, amount of containers, release period and due period of demand 1⩽
                        θ
                        ⩽
                        Θ. Each demand is also associated with a penalty function 
                           
                              
                                 
                                    p
                                 
                                 
                                    θ
                                 
                              
                              :
                              {
                              0
                              ,
                              …
                              ,
                              τ
                              -
                              1
                              }
                              
                              →
                              
                              R
                           
                         that describes the penalty to be assessed based on the delivery time of each container, where p
                        
                           θ
                         is 0 if the container is delivered early or on time. That is, p
                        
                           θ
                        (t)=0 for all t
                        ⩽
                        u
                        
                           θ
                        . We use a piecewise linear function to model the lateness, but any function can be used, even in the IP, because of the discretization of time in the model.

Our demand structure does not differentiate between different types of containers, such as refrigerated, out-of-gauge or dangerous goods. While some types of containers may require special handling procedures for ITT, the vast majority of containers do not, and we therefore treat all containers equally for the purposes of this model. For modeling purposes, let
                           
                              
                                 
                                    
                                       V
                                    
                                    
                                       θ
                                    
                                    
                                       D
                                    
                                 
                                 =
                                 {
                                 i
                                 ∈
                                 
                                    
                                       V
                                    
                                    
                                       T
                                    
                                 
                                 |
                                 ⌊
                                 i
                                 /
                                 τ
                                 ⌋
                                 
                                 ≠
                                 
                                 
                                    
                                       o
                                    
                                    
                                       θ
                                    
                                 
                                 ∧
                                 ⌊
                                 i
                                 /
                                 τ
                                 ⌋
                                 
                                 ≠
                                 
                                 
                                    
                                       d
                                    
                                    
                                       θ
                                    
                                 
                                 }
                              
                           
                        be the set of time–space nodes that do not match either the origin or destination of θ in the base graph.


                        Fig. 2
                         shows the time–space graph for our model of the port of Hamburg over a 25minute period with a 5minute discretization. The majority of the connections are on public roadways, especially between B, E, I
                        1 and I
                        2. Each arc defines the travel time required for a vehicle based on its connections, and the travel time required can be varied at different times in the model in order to represent rush hour or significant traffic disruptions. Note that we do not show arcs destined for nodes later than time 25, for reasons of clarity. In the graph, there is a single vehicle located at node E at t
                        =0. A demand originates at B at t
                        =0 and must be brought to E before time 15 to avoid a penalty of 5 units per discretized period. The red line shows the path of the ALV as it drives with no containers from E to B. The ALV loads the container at t
                        =10 when it arrives at B and leaves in the same time period, as ALVs load containers quickly, and returns to E. The blue line shows the location of the demand from the time it is released until it is delivered. First, the demand stays at B on stationary arcs for two time periods before it is picked up by the ALV and transported to E through I
                        2. Since the container is delivered one time period late, a penalty of 5 units is incurred. Note that this is the optimal penalty for this instance, as delivering the container earlier is not possible due to the location of the ALV at time 0.

Using our time–space graph, we now present an IP model to solve ITT problems that minimizes the late delivery of containers. Our IP model differentiates itself from other time–space models in the way it handles LT arcs and nodes, as well as the parallel flows of vehicles and containers. The goal of the model is to minimize the penalty incurred from delivering containers past their due date.

The following parameters are used in our IP model.
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             n
                                          
                                          Number of nodes in the base graph
                                       
                                       
                                          
                                             τ
                                          
                                          Number of time periods
                                       
                                       
                                          
                                             V
                                          
                                          Set of nodes in the base graph
                                       
                                       
                                          
                                             V
                                             
                                                T
                                             
                                          
                                          Set of nodes in the time–space graph
                                       
                                       
                                          
                                             A
                                             
                                                T
                                             
                                          
                                          Set of arcs in the time–space graph
                                       
                                       
                                          
                                             Θ
                                          
                                          Number of demands
                                       
                                       
                                          
                                             In(i)
                                          Set of nodes with an arc to node i
                                             ∈
                                             V
                                             
                                                T
                                             
                                          
                                       
                                       
                                          
                                             Out(i)
                                          Set of nodes with an arc from node i
                                             ∈
                                             V
                                             
                                                T
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         V
                                                      
                                                      
                                                         θ
                                                      
                                                      
                                                         D
                                                      
                                                   
                                                
                                             
                                          
                                          Set of nodes excluding any time–space node that matches the origin or destination of θ
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         V
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         
                                                            
                                                               T
                                                            
                                                            
                                                               →
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          Outgoing, non-stationary, non-LT arcs from node i
                                             ∈
                                             V
                                             
                                                T
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         V
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         
                                                            
                                                               T
                                                            
                                                            
                                                               ←
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          Incoming, non-stationary, non-LT arcs from node i
                                             ∈
                                             V
                                             
                                                T
                                             
                                          
                                       
                                       
                                          
                                             o
                                             
                                                θ
                                             
                                          
                                          Origin node in V of demand θ
                                          
                                       
                                       
                                          
                                             d
                                             
                                                θ
                                             
                                          
                                          Destination node in V of demand θ
                                          
                                       
                                       
                                          
                                             a
                                             
                                                θ
                                             
                                          
                                          Amount of containers in demand θ
                                          
                                       
                                       
                                          
                                             r
                                             
                                                θ
                                             
                                          
                                          Release time step of demand θ
                                          
                                       
                                       
                                          
                                             u
                                             
                                                θ
                                             
                                          
                                          Due time step of demand θ
                                          
                                       
                                       
                                          
                                             p
                                             
                                                θ
                                             
                                          
                                          Late delivery penalty function
                                       
                                       
                                          
                                             δ
                                             
                                                ijθ
                                             
                                          
                                          Equal to 0 iff arc (i,
                                             j)∈
                                             A
                                             
                                                T
                                              is a stationary arc from the demand origin of θ or is an LT arc
                                       
                                       
                                          
                                             c
                                             
                                                ij
                                             
                                          
                                          Maximum number of vehicles on arc (i,
                                             j)∈
                                             A
                                             
                                                T
                                             
                                          
                                       
                                       
                                          
                                             m
                                             
                                                i
                                             
                                          
                                          Maximum number of container load/unload moves during a time period at node i
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         LT
                                                      
                                                   
                                                
                                             
                                          
                                          Maximum number of LT vehicle load/unload moves during a time period at node i
                                          
                                       
                                       
                                          
                                             s
                                             
                                                i
                                             
                                          
                                          Amount of vehicles present at node i
                                             ∈
                                             V
                                             
                                                T
                                              at the start of optimization
                                       
                                       
                                          
                                             γ
                                             
                                                i
                                             
                                          
                                          Maximum vehicle throughput of node i
                                             ∈
                                             V
                                             
                                                T
                                             
                                          
                                       
                                       
                                          
                                             μ
                                             
                                                ij
                                             
                                          
                                          Maximum container capacity of a vehicle on arc (i,
                                             j)∈
                                             A
                                             
                                                T
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

We introduce two sets of decision variables to control the flow of containers through the model. Let x
                           
                              ij
                           
                           ∈{0,…,
                           c
                           
                              ij
                           } be the amount of vehicles on arc (i,
                           j)∈
                           A
                           
                              T
                           ⧹A
                           
                              LT
                           . We restrict x
                           
                              ij
                            to not include LT arcs, since LT nodes are only a modeling artifact, and therefore require no vehicles to function. Let y
                           
                              ijθ
                           
                           ∈{0,…,
                           a
                           
                              θ
                           } be the amount of containers flowing on arc (i,
                           j)∈
                           A
                           
                              T
                            for demand θ.


                           
                              
                                 (1)
                                 
                                    
                                       min
                                    
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             1
                                             ⩽
                                             θ
                                             ⩽
                                             Θ
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             
                                                
                                                   u
                                                
                                                
                                                   θ
                                                
                                             
                                             <
                                             t
                                             <
                                             τ
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             In
                                             (
                                             
                                                
                                                   d
                                                
                                                
                                                   θ
                                                
                                             
                                             )
                                          
                                       
                                    
                                    
                                       
                                          p
                                       
                                       
                                          θ
                                       
                                    
                                    (
                                    t
                                    -
                                    
                                       
                                          u
                                       
                                       
                                          θ
                                       
                                    
                                    )
                                    
                                       
                                          y
                                       
                                       
                                          
                                             
                                                id
                                             
                                             
                                                θ
                                             
                                          
                                          θ
                                       
                                    
                                 
                              
                           
                           
                              
                                 (2)
                                 
                                    s
                                    .
                                    t
                                    .
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             1
                                             ⩽
                                             θ
                                             ⩽
                                             Θ
                                          
                                       
                                    
                                    
                                       
                                          δ
                                       
                                       
                                          ij
                                          θ
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          ij
                                          θ
                                       
                                    
                                    ⩽
                                    
                                       
                                          μ
                                       
                                       
                                          ij
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                       
                                    
                                    
                                    ∀
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    
                                       
                                          A
                                       
                                       
                                          T
                                       
                                    
                                 
                              
                           
                           
                              
                                 (3)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             Out
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             ∈
                                             In
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          ki
                                       
                                    
                                    ⩽
                                    
                                       
                                          s
                                       
                                       
                                          i
                                       
                                    
                                    
                                    ∀
                                    i
                                    ∈
                                    
                                       
                                          V
                                       
                                       
                                          T
                                       
                                    
                                 
                              
                           
                           
                              
                                 (4)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             Out
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                       
                                    
                                    +
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             In
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          ji
                                       
                                    
                                    ⩽
                                    
                                       
                                          γ
                                       
                                       
                                          i
                                       
                                    
                                    
                                    ∀
                                    i
                                    ∈
                                    
                                       
                                          V
                                       
                                       
                                          T
                                       
                                    
                                 
                              
                           
                           
                              
                                 (5)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             Out
                                             (
                                             
                                                
                                                   o
                                                
                                                
                                                   ′
                                                
                                             
                                             )
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          
                                             
                                                o
                                             
                                             
                                                ′
                                             
                                          
                                          j
                                          θ
                                       
                                    
                                    =
                                    
                                       
                                          a
                                       
                                       
                                          θ
                                       
                                    
                                    
                                    ∀
                                    1
                                    ⩽
                                    θ
                                    ⩽
                                    Θ
                                    ,
                                    
                                    
                                       
                                          o
                                       
                                       
                                          ′
                                       
                                    
                                    =
                                    τ
                                    
                                       
                                          o
                                       
                                       
                                          θ
                                       
                                    
                                    +
                                    
                                       
                                          r
                                       
                                       
                                          θ
                                       
                                    
                                 
                              
                           
                           
                              
                                 (6)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             Out
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          ij
                                          θ
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             ∈
                                             In
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          ki
                                          θ
                                       
                                    
                                    =
                                    0
                                    
                                    ∀
                                    1
                                    ⩽
                                    θ
                                    ⩽
                                    Θ
                                    ,
                                    
                                    i
                                    ∈
                                    
                                       
                                          V
                                       
                                       
                                          θ
                                       
                                       
                                          D
                                       
                                    
                                 
                              
                           
                           
                              
                                 (7)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             τ
                                             
                                                
                                                   d
                                                
                                                
                                                   θ
                                                
                                             
                                             ⩽
                                             j
                                             <
                                             τ
                                             (
                                             
                                                
                                                   d
                                                
                                                
                                                   θ
                                                
                                             
                                             +
                                             1
                                             )
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             In
                                             (
                                             j
                                             )
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          ij
                                          θ
                                       
                                    
                                    =
                                    
                                       
                                          a
                                       
                                       
                                          θ
                                       
                                    
                                    
                                    ∀
                                    1
                                    ⩽
                                    θ
                                    ⩽
                                    Θ
                                 
                              
                           
                           
                              
                                 (8)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             1
                                             ⩽
                                             θ
                                             ⩽
                                             Θ
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      j
                                                      ∈
                                                      
                                                         
                                                            V
                                                         
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               
                                                                  T
                                                               
                                                               
                                                                  →
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   y
                                                
                                                
                                                   ij
                                                   θ
                                                
                                             
                                             +
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      j
                                                      ∈
                                                      
                                                         
                                                            V
                                                         
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               
                                                                  T
                                                               
                                                               
                                                                  ←
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   y
                                                
                                                
                                                   ji
                                                   θ
                                                
                                             
                                          
                                       
                                    
                                    ⩽
                                    
                                       
                                          m
                                       
                                       
                                          i
                                       
                                    
                                    
                                    ∀
                                    0
                                    ⩽
                                    i
                                    ⩽
                                    n
                                    τ
                                 
                              
                           
                           
                              
                                 (9)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             1
                                             ⩽
                                             θ
                                             ⩽
                                             Θ
                                          
                                       
                                    
                                    (
                                    
                                       
                                          y
                                       
                                       
                                          ij
                                          θ
                                       
                                    
                                    +
                                    
                                       
                                          y
                                       
                                       
                                          ji
                                          θ
                                       
                                    
                                    )
                                    ⩽
                                    
                                       
                                          m
                                       
                                       
                                          i
                                       
                                       
                                          LT
                                       
                                    
                                    
                                    ∀
                                    1
                                    ⩽
                                    i
                                    ⩽
                                    n
                                    τ
                                    ,
                                    
                                    j
                                    =
                                    n
                                    τ
                                    +
                                    i
                                 
                              
                           
                        

The objective (1) is to minimize the lateness of container delivery, in which each container delivered late is penalized as a function of the lateness. That is, each arc entering a time–space node of a demand destination is assigned a cost computed from the penalty function p
                           
                              θ
                           (t
                           −
                           u
                           
                              θ
                           ), where θ is the demand, t is the time step, and u
                           
                              θ
                            is the due time of the demand.

The amount of containers flowing on an arc is constrained in (2) to be no more than the total capacity of all the vehicles traveling on an arc, where δ
                           
                              ijθ
                           
                           ∈{0,1} is set to 0 iff ⌊i/τ⌋=
                           o
                           
                              θ
                            and (i,
                           j)∈
                           A
                           
                              S
                           , or (i,
                           j)∈
                           A
                           
                              LT
                           . Therefore, δ
                           
                              ijθ
                            takes the value 0 only when (i,
                           j) is a stationary arc from the origin of demand θ or (i,
                           j) is an LT arc. When a container is present on a stationary or LT arc, it corresponds to the container not physically moving anywhere. Thus, no vehicle is required to carry the container.

Constraints (3) are vehicle flow balance constraints that allow vehicles to flow within the time–space graph. The constraints enforce that there are never more vehicles leaving a node than the number of vehicles entering a node added to the number of vehicles that start at the node. Note that this constraint allowed vehicles to travel empty anywhere in the graph. Constraints (4) cap the number of vehicles entering and leaving a node in a particular time step. This cap on vehicle throughput is primarily used on intersections. However, it can also be used on nodes to model a gate entry/departure queue.

Constraints (5)–(7) flow the containers through the network. Constraints (5) bind the origin of a demand to have an outflow of the amount of containers in the demand, (6) ensures an exact container flow balance through the graph, and (7) requires that all of the containers of a demand arrive at the destination node, respectively. Note that containers are allowed to arrive early at their destination node, and may then flow on the stationary arcs until their due time is reached.

The time it takes to load and unload containers is taken into account in constraints (8), which bound the maximum number of load/unload moves that can be made at a node in a single time step for each vehicle type. Note that this constraint does not control the flow of containers over stationary arcs or LT arcs, in order to allow containers to remain at their origin or to be loaded onto LT vehicles. The containers flowing between LT nodes and the terminals they represent are handled in constraints (9). By allowing only 
                              
                                 
                                    
                                       m
                                    
                                    
                                       i
                                    
                                    
                                       LT
                                    
                                 
                              
                            containers between time–space node i and its LT node, barges must be (un) loaded at the rate the quay cranes can handle.

There are several small improvements we can make to the model to help the presolver reduce the problem size. First, we set all y
                           
                              ijθ
                            variables to 0 if r
                           
                              θ
                           
                           >
                           i mod τ, i.e. the release time of θ is greater than the starting time of node i. Second, we set all y
                           
                              ijθ
                            variables to 0 if j
                           =
                           o
                           
                              θ
                           , meaning demands are not allowed to re-enter their origin node. While this seems like an obvious observation, this prevents the IP from searching through many solutions in which the paths of demands travel in loops.

In addition to simply solving our IP model from the previous subsection in an IP solver in one go, we propose a two-step solution method called the flow-first approach. First, we post constraints (5)–(9), which correspond to the container multi-commodity flow, and solve the corresponding IP. This IP generally takes little time to solve, as solvers like CPLEX have strong cuts for multi-commodity flow structures. We then post constraints (2)–(4), which control the flow of vehicles and ensure that containers are carried by vehicles. Finally, we re-solve the IP using the solution to the pure multi-commodity flow problem as a starting solution (albeit infeasible).

Although the multi-commodity flow solution is essentially always infeasible due to the routing of vehicles, CPLEX is able to use the solution as an internal guide for tackling the larger problem. The idea behind this is that many of the paths of the containers in the multi-commodity flow will still be valid once vehicles are brought into the problem, and by computing these paths without the complication of vehicles, CPLEX can focus on completing the transportation of more difficult containers when solving the full problem. Alternatively, CPLEX can use a repair mechanism to try to fix the solution. We determine the effectiveness of this approach in the following computational evaluation.

This section describes the evaluation of our IP model on generated datasets based on the port of Hamburg and the Maasvlakte 1 & 2 area of the port of Rotterdam. We show that our model gives valuable and actionable information for the planning of ITT systems.

We generated an artificial dataset based on communications from the port of Rotterdam regarding the Maasvlakte 2 expansion and data gathered on the internet for the port of Hamburg. We use the same vehicle properties as in Duinkerken et al. (2006) for AGVs, ALVs and MTSs in terms of load/unload times, vehicle velocity and capacity, giving AGVs, ALVs and MTSs velocities of 5.0meter/seconds, 4.0meter/seconds, 6.6meter/seconds, respectively. AGVs and ALVs may carry a single container each, and an MTS can carry up to 5 containers. We allow AGVs to load and unload containers at a rate of 30 moves per hour per crane available. We allow MTSs a move rate of 35 moves per hour, corresponding to the efficiency gained by quickly loading multiple containers in a set of trailers. Note that we do not take a detailed view of MTSs involving the coupling and decoupling of tractor units. We allow ALVs an essentially infinite load and unload rate. ALVs are reported in Duinkerken et al. (2006) to require about a minute to load or unload a container, but unlike AGVs and MTSs, they do not have to form a queue and wait for a crane. Since our model is unable to take into account such fine grained interactions between ALVs, we allow them a fast load/unload time at ports. We distribute vehicles amongst terminals uniformly at time zero, and randomly distribute remaining vehicles if the number of vehicles is not divisible by the number of terminals.

We assume barges in the model have a capacity of 50 containers and travel at a rate of 2.2meter/seconds (slightly under 5 knots), as this is a common maximum speed in harbors. Barges can load and unload containers at a rate of 30 moves per hour, and we assume two cranes are used to load/unload barges, giving 60 moves per hour.

We take a view of congestion in which roadways (arcs) and intersections (nodes) have a maximum throughput per time period. While such a model lacks the detail of the directions vehicles turn and does not handle specific vehicle to vehicle interactions, it is able to provide a reasonably good restriction on port throughput, which is what is most important for our model. Furthermore, a detailed view of congestion in which vehicle movements are precisely modeled would require significantly more variables, likely too many to find a solution when several hundred vehicles are present.

Each demand is generated by choosing two different terminals within a port uniformly at random, then choosing an amount of containers less than 50 containers that must be transferred between the two terminals, and finally setting a release time and due time. In order to prevent obviously infeasible instances, we choose the release time uniformly at random in the range [0,
                           t
                           
                              max
                           
                           −2time(a,
                           b)], where t
                           
                              max
                            is the maximum time of the model minus a constant t
                           
                              c
                           , which we set to 1hour for Hamburg instances and 2hours for Maasvlakte instances, a and b are the two terminals chosen for the demand, and time(a,
                           b) is the minimum time required for the slowest vehicle type to travel between a and b. We choose the values of t
                           
                              c
                            based on the size of the port areas in order to prevent instances that will be infeasible nearly regardless of the type of vehicle that is used to solve an instance. We compute time(a,
                           b) using a simple all-pairs shortest path algorithm. We multiply this time by a factor of 2 to further prevent clearly infeasible instances. If t
                           
                              max
                           
                           −2time(a,
                           b) is a negative number, we choose a release time in the interval [0,
                           t
                           
                              max
                           /10]. We then choose a due time of the demand that is between the release time plus time(a,
                           b), with the maximum value being t
                           
                              max
                           . Note that this could mean some demands are infeasible for delivery for slow vehicles. We view this as a necessary part of the evaluation of such vehicle types, as only generating data that is feasible for all vehicle types could make slow vehicles look just as effective as fast vehicles at delivering demands under tight deadlines, which is not always the case.

Each demand is associated with a penalty function to discourage lateness. We use three penalty functions for demands representing low, medium and high priority containers. We use a triangular distribution to assign the majority of the demands to be low priority demands, roughly 30% to be medium priority, and the rest to be high priority (slightly over 10%).

We model the port of Hamburg with 4 terminals and 2 intersections in the base graph, and compute ITT performance over a period of 8hours with a 5minute discretization. We generate 10 sets of demands for 500, 1000, 1500, and 2000 containers. We then generate instances with varying numbers of road vehicles (50, 100, 150, and 200), with 2 barges and with no barges (labeled by b in the following tables), as well as with uniform traffic (U) and rush hour traffic (RH). We model rush hour traffic on specific arcs that contain non-port traffic. During the first and last hour of a rush hour instance, these arcs take longer to traverse than during the other 6hours.


                        Table 1
                         shows the size of the time space graph for the Hamburg instances. The size of the graph is independent of the number of containers. The number of arcs differs between vehicle types because of their different speeds. Some connections at the end of the 8hour period are not possible to complete with slow vehicles. The number of arcs for RH instances is slightly lower for similar reasons. That is, some arcs take longer to traverse due to rush hour, and therefore do not have end points within the 8hour window.

We solved the instances in our Hamburg dataset to optimality using CPLEX 12.4 with AMD Opteron 2344 HE processors with a maximum of 3gigabytes of RAM per process and a maximum CPU time of 1hour. Table 2
                         gives the average penalty, in thousands, for the Hamburg instances, which we present to show the kind of data our model can provide to decision makers. The penalty is averaged across all 10 runs of each combination of number of containers, number of barges, infrastructure type, and vehicle type. In cases where the model was unable to find an optimal penalty, we use the LP relaxation. We are able to do this because the LP relaxation value is very close to the optimal solution value across our dataset. Out of the 382 instances with 500 containers with and without barges that we solved to optimality, 91% of them had an LP relaxation value at the root node equal to the optimal solution. This percentage also holds in the case of 1000 and 1500 container instances. We were unable to solve many 2000 container instances to optimality, but of the 7 that we did solve, all of them had an LP relaxation equal to the optimal solution. While this could be a case of survivorship bias, we note that the problems solved range in CPU time from just a few seconds to almost an entire hour. When we lower the timeout to half an hour instead of a full hour, we see little difference in the percentage of solved instances with their LP relaxation equal to the optimal solution, even though less instances have been solved.

In computing the average penalty, we also combine the results of running the all-at-once model, in which we plug our entire IP model into CPLEX, and the flow-first model from Section 4.5. If one method solves a problem to optimality, that objective is used, or if an approach finds that an instance is infeasible, the instance is declared infeasible even if the other approach timed out attempting to prove this. We provide an analysis of the run time of these two approaches following our discussion of the solutions found by the approaches.

Overall, MTSs offer the lowest penalized delivery across all instances. However, AGVs in combination with barges provide nearly as good performance in the 500 and 1000 container cases, offering only a 6.5% increase in penalty over MTSs and barges on both uniform and rush hour instances. With only 50 vehicles, only MTSs are able to provide delivery for all of the cargo in all instances with 500 containers, and in most of the instances with 1000 containers. Our model shows that, under the given assumptions, 100 road vehicles are generally sufficient for performing ITT, and that adding extra vehicles is unable to provide less penalties, due to road congestion.

The effect of our congestion model, in which intersections have a maximum throughput per time period, can be seen when the number of AGVs and ALVs is increased. The performance of using 100 AGVs and ALVs instead of 50 generally increases across all instance types and numbers of containers. However, moving from 100 to 150 or more vehicles does not have the same increase in performance, despite the increase in capacity. We conclude that this is due to intersections filling with AGVs and ALVs, causing congestion, an important outcome for port authorities to take note of.

We do not include results for barges for 1500 and 2000 container instances as our model timed out on the instances, due to their size. Above 1500 containers, AGVs and ALVs begin to not be sufficient for satisfying all of the demands, and the instances are proven infeasible. The low carrying capacity of AGVs and ALVs is their main drawback, although their slower speed in comparison to MTS systems does not help, either. The faster loading capabilities of ALVs do not seem to outweigh these drawbacks in these scenarios.

We next present CPU time results for the flow-first method and the all-at-once approach for solving the IP model. The flow-first method’s first step, in which a multi-commodity flow problem is solved, generally only takes several seconds in CPLEX. Even with side constraints like our loading and unloading restrictions and LT arc capacity constraints (Constraints (8) and (9), respectively), the resulting model poses no large difficulties.


                        Table 3
                         shows the CPU times and number of timeouts on the Hamburg instances for both the all-at-once and flow-first approaches. In terms of CPU time, the flow-first method outperforms the all-at-once approach on non-barge instances of 1000 containers or less. On 500 container instances, the average CPU time of the flow-first method is 53% of the all-at-once approach non-barge instances. On barge instances, however, the average performance is nearly identical, with the flow-first approach slightly outperforming the all-at-once method on AGV and ALV instances, but underperforming on MTS instances. For 1000 container instances, the flow-first method has an average CPU time of 380.56seconds as opposed to 956.11 for the all-at-once approach, meaning it requires only slightly under 40% of the CPU time of the all-at-once approach, ignoring timeouts. Despite the flow-first method’s numerous timeouts on 1000 container barge instances, the all-at-once approach is so close to the timeout for most instances that the average times are not greatly different between the two approaches.

On 1500 container instances, the flow-first approach has an average CPU time (including timeouts at 3600seconds) on 1500 container instances of only 1242.51seconds, as opposed to 1539.91seconds of the all-at-once approach, a savings of 19%. However, on 2000 container instances, flow-first only achieves an average run time of 1810.73seconds (including timeouts as before) against 1921.41seconds for the flow-first method, an increase of roughly 6%.

On ALV instances with rush hour, we see the flow-first method generally performing better on small instances and being dominated by the all-at-once approach on large instances. This could indicate that the flow-first method needs a stronger relaxation for finding an initial solution when arcs are significantly constrained and there are many containers.

In terms of timeouts, the all-at-once approach achieves fewer timeouts than the flow-first approach across the entire dataset, with only 116 timeouts versus 126 for 50 vehicles, 98 versus 105 timeouts for 100 vehicles, and 91 versus 105 timeouts for 200 vehicles. In the case of 150 vehicles, the flow first method achieves 2 fewer timeouts than all-at-once, with only 98 timeouts as opposed to 100. However, a majority of these timeouts are due to barge instances, which the flow-first method is unable to deal with once the number of containers is greater than 500. Looking only at non-barge instances, the flow-first method has only 113 timeouts as opposed to 136 for all-at-once. We hypothesize that the loading and unloading restrictions of barges using LT arcs makes finding a good multi-commodity flow solution in the flow-first approach more difficult than in the road transportation only case, and in future work we will investigate adding cuts to prevent this from happening.

We conclude that the flow-first method is best suited to non-barge instances, even though it has competitive performance on barge instances in terms of CPU time. However, given that the two approaches often have large differences in performance even on the same instance, a heuristic selection approach, such as the ISAC method of Kadioglu, Malitsky, Sellmann, and Tierney (2010), could be employed to choose whether or not to apply the flow-first method to instances in future work.

Our Maasvlakte 1 & 2 dataset is based off of instances generated with 10 sets of demands in a similar fashion as the Hamburg instances over a 10hour time period with an 8minute discretization. We have increased the time period due to the larger size of the Maasvlakte area, which contains 8 terminals distributed across an area of roughly 15kilometers2. We model the road transportation connections of these terminals using 4 intersections and the waterway connections with three waterway intersections for the 6 terminals with quays. We generated 10 barges for waterway instances because the Maasvlakte area is significantly larger than the port of Hamburg and has more terminals. We set the maximum due time of demands to all be at most two hours before the end of the time period, although deliveries may still occur in the last two hours. We solve these instances on AMD 6386SE processors with a maximum of 3gigabytes of RAM per process using CPLEX 12.5. We solve all Maasvlakte instances with the flow-first method.

In addition to the uniform traffic and rush-hour instances we solved for the port of Hamburg, we propose an infrastructure addition in the Maasvlakte area to show that our model can, with little modification of the underlying graph, model novel infrastructure components. Fast-connector instances model two dedicated tunnels (or bridges) that connect a terminal to a key intersection, and then travels further to another intersection. The fast connector significantly shortens the distance vehicles must travel to reach the far ends of the Maasvlakte area. This modification to our instances is realized simply by adding extra arcs to the base graph.


                        Table 4
                         shows the size of the time–space graph for the Maasvlakte 1 & 2 instances, where b is the number of barges, the instance type is either uniform traffic (U), rush-hour (RH) or fast-connector (FC), and h is the non-barge vehicle type. Instances without barges have 900 nodes, and instances with barges 1575. As in the case of the Hamburg instances, the number of arcs varies slightly between vehicle types due to their differing speeds.


                        Table 5
                         displays the average solution penalty (in thousands) across the 10 instances solved, along with the number of instances found to be infeasible/the number of timeouts. As in the presentation of the Hamburg instances, we compute the average solution penalty using the optimal objective for all instances that are solved to optimality and the value of the LP relaxation for instances that have timed out. The LP relaxation turns out to be a rather tight bound on the optimal solution found in most cases. In fact, across the 1037 instances for which we have an optimal solution, the value of the LP relaxation matches the solution value on 1020 of them, a total of 98.3%. These instances are not trivial to solve, either, with many taking over 1000seconds to find a solution.

We solve instances for 500, 1000, 1500 with and without barges, and for 2000 containers without barges. Our instances with barges proved to be too large for CPLEX, indicating that further work is needed to scale to very large ports with large numbers of containers. Nonetheless, our model is capable of reaching real-world container throughput volumes for actual ports. Several elements in the table have no penalty value computed, and instead are labeled with a dash. In these few cases, the LP relaxation could be solved on the problems that were not proven infeasible.

The lowest penalty across all amounts of cargo tends to be achieved by the MTSs. Despite their slow loading capabilities, they have two key advantages over AGVs and ALVs. First, they can carry up to 5 containers, meaning less MTS vehicles are needed to service large amounts of demands. Second, they travel faster than AGVs or ALVs, allowing them to cover the large distances of the Maasvlakte area more effectively. Without barges, MTSs have only 28% of the penalty of AGV and ALV instances with 500 containers and 100 vehicles in uniform and rush hour scenarios, and 28% and 15% of the penalty of AGV and ALV instances, respectively, for 1500 container scenarios with 200 vehicles. Barges alleviate some of the stress on AGV and ALV systems, reducing the gap between AGVs/ALVs and MTSs by 36% and 38%, respectively, for 500 container instances with 100 vehicles, and by 87% and 85% for 1500 container instances with 200 vehicles. Barges seem to have little effect on MTSs since they already have the carrying capacity to handle high container volumes. Note that these results do not indicate that ports should always use MTSs. Rather, these results give ports an indication of the delivery delay they will experience by using one option over another.

The gap in performance between AGVs/ALVs and MTSs is narrowed in the FC instances, as the distances between different parts of the port become more manageable. In the case of 500 containers with 200 vehicles or more, the fast connector closes the penalty gap by 50%, bringing the penalty of AGVs and ALVs down to only 3.75 away from the MTS penalty. With 2000 containers, the fast connector reduces the number of infeasible instances for AGVs with all three amounts of vehicles. Port authorities can use this information to weigh the cost of such infrastructure changes with the cost savings they can possibly achieve with automated as opposed to manned systems.

The effect of our congestion model, in which intersections have a maximum throughput per time period, can be seen when the number of AGVs and ALVs is increased. The performance of using 200 AGVs and ALVs instead of 100 generally increases across all instance types and numbers of containers. However, moving from 200 to 300 vehicles does not have the same increase in performance, despite the increase in capacity. We conclude that this is due to intersections filling with AGVs and ALVs, an important outcome for port authorities to take note of.

Rush hour (RH) instances show a marked increase in penalty over uniform traffic instances for AGVs and ALVs, but not MTSs, in instances with 1000 containers or more. This provides evidence that MTSs are a better solution than AGVs or ALVs when port and non-port traffic are mixed, as the high numbers of AGVs and ALVs necessary to service cargo contribute to the rush hour traffic.

The fast connector (FC) instances tend to show little improvement as the number of vehicles is increased in both the 500 and 1000 container cases without barges, and in the 500 container case with barges. We suspect that this is due to congestion in port intersections. Without the fast connector, vehicles spend more time traveling on arcs and are unable to crowd the intersections. However, with the fast connector, more cargo can be delivered on time, and this means more crowding of the intersections. This could provide important information to a port in determining how many vehicles they will need given an infrastructure change like in the FC instances. Since less vehicles are required, the port can offset the costs of the infrastructure development. Furthermore, this shows that our model can be used to test out scenarios to find out where the new bottlenecks in a port will be. In our instances, the port would benefit from increasing intersection throughput in addition to building the fast connector.

In our model, MTSs are the only way of servicing large amounts of containers within the 10hour time period; when the number of containers reaches 2000, AGV and ALV instances begin timing out or returning infeasible solutions. In fact, on the ALV and AGV instances with 2000 containers, an LP relaxation is often difficult to compute within the one hour time limit, indicating that there probably is no solution at all.

We report the number of columns, rows and non-zero entries (in thousands) in the post-processed IP in CPLEX 12.5, along with the average CPU times in seconds required to solve an instance in Table 6
                        . Although the underlying model is the same for various numbers of vehicles, with the only difference being the domain of the x
                        
                           ij
                         variables, the number of post-processed rows, columns and non-zeros can vary, but not significantly. The solution time does not have any strong correlation with the number of vehicles in the model. However, the inclusion of barges always makes finding a solution harder, due to the increased problem size. MTS instances are overall easier than AGV and ALV instances, requiring only 24% and 41% of the CPU time of AGV and ALV instances for 500 containers without barges, respectively, despite the fact that the models are essentially the same size. For 1500 container instances without barges, MTS instances solve 47% and 54% faster for AGVs and ALVs, respectively.

As the container volumes grow, the solution times approach, and often exceed, one hour of CPU time. Developing faster algorithms to solve ITT problems is therefore valuable future work. However, we do not view this as a major hindrance to the utilization of our model in practice, as the planning of ports and port expansions is a long term process for which significant computation power can be obtained.

Inter-terminal transportation (ITT) is a key factor in the decision making process for the construction of new ports and expansion of existing ports. These projects represent critical, long-term and expensive infrastructure investments that require effective analysis of ITT for decision makers. To this end, we presented an integer programming model to minimize container delivery delay that takes into account the key components of ITT, including traffic congestion, multiple vehicle types and loading/unloading times, and arbitrary terminal configurations. We also provided a two stage approach for solving the model to optimality. We note that our model cannot handle multiple types of vehicles traveling on the same arcs, and we intend to extend our model to be able to solve this in future work.

Our model scales to the sizes of real-world ports, time periods, and container throughput, as shown using examples from the Maasvlakte area of the port of Rotterdam and the port of Hamburg, and provides important analysis on not only the feasibility, but also the delay of containers reaching their destinations. Our model of ITT is the first to incorporate optimization of vehicle routes and container flows in order to provide ports and terminals with the best performance a particular configuration of vehicles and infrastructure is capable of delivering. The model represents a particularly difficult class of time–space models, in which interacting vehicle flows, a multi-commodity flow, and congestion constraints all interact.

For future work, we intend to use our model to help analyze the costs of building new infrastructure and/or purchasing new types of vehicles versus the improvements in port efficiency and reductions in delays. In addition, we will use this model to guide the input into a discrete even simulation of ports, thus providing a complete view of the impact of strategic decisions on port efficiency. Our model could also be used to assist ports in determining what vehicle characteristics would best fit their port from an engineering perspective. Finally, we also intend to investigate the impact of long distances on port design, such as those found in the port of Shanghai, China, or the port of Rotterdam outside of the Maasvlakte area.

@&#ACKNOWLEDGEMENTS@&#

Kevin Tierney is sponsored in by the Danish Council for Strategic Research as part of the ENERPLAN research project. We would like to thank Pengdi Liu for his comments on an early draft of this paper, as well as the anonymous reviewers for their comments and suggestions.

@&#REFERENCES@&#

