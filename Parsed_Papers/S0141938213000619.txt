@&#MAIN-TITLE@&#Generating Chinese characters based on stroke splitting and feature extraction

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We present a decomposition database to generate new style Chinese characters.


                        
                        
                           
                           Stroke segmentation rules are discussed.


                        
                        
                           
                           A stroke feature searching algorithm is proposed.


                        
                        
                           
                           The evaluation and experiments show a high fidelity of 96.4%.


                        
                        
                           
                           Recombination database can be applied for other stroke constructed characters.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Chinese character

Decomposition database

Font generating

Stroke splitting

Feature extraction

@&#ABSTRACT@&#


               
               
                  There is a large demand for more fashionable style Chinese characters in advertising, art designing and publishing markets. However, it becomes challenging to create a new font style for so many Chinese characters (over 10,000). To solve this problem, a comprehensive Chinese fonts generating scheme is proposed in this paper. Firstly, a decomposition database for stroke splitting and feature extraction is proposed. Secondly, stroke segmentation rules are defined based on splitting, merging and structural model, location definition and minimum feature extraction. Thirdly, a radical searching algorithm based on stroke splitting is presented. Finally, it is realized that the generated characters can be zoomed, rotated and moved. Experimental result shows that Chinese characters with a new style can be generated rapidly with the proposed scheme. The created characters fit the real ones well with a high fidelity of 96.4%. The usability tests are run and participants’ subjective report show that the performance from the generated characters is similar to the original characters in both recognizability test and style-consistency test. The fonts generating method is also reliable for the other stroke constructed block characters such as Japanese and Korean characters.
               
            

@&#INTRODUCTION@&#

Chinese characters have a long history and are regarded as one of the most complicated characters in the world. Due to demands from advertising, art, publishing, printing, designing industries, a variety of Chinese style fonts, e.g. Sung typeface, cursive script, regular script, have been generated. With the advancement in computer science, Chinese characters with more fashionable styles, like cartoon, handwriting, are created in recent years, whereas the demand for new and creative Chinese character typeface keeps on increasing. However, there are statistically more 10,000 Chinese characters if peculiar words are included [1], making it a difficult and time consuming work to create characters with a new font style. The curve-based character skeleton description can be a candidate to solve this problem. Based on this description, the geometrical features of an input pattern, including stroke ends, junctions, crosses and segments, can be extracted easily. However, for handwritten Chinese characters, the geometrical features of different handwriting styles are not usually consistent. This makes the matching processing of recombination more difficult and unstable. This is why Hung-Hsin Chang and Hong Yan used the stroke structure instead of geometrical features in [2]. Additionally, most blockwise-constructed Chinese characters are rather complicated because the structure is composed of strokes. Therefore, we prefer integrating the geometrical features with the character structure which is described and stored in a decomposition database to generate new Chinese character fonts in this paper.

The paper is organized as follows: Section 2 reviews previous attempts to solve the recombination problem of Chinese characters. The problem description is discussed in Section 3, where structure description, stroke splitting and feature extraction are presented in order to provide basic reference and criteria to the recombination methods. The fonts generating solution is provided in Section 4, in which the structure designing of the decomposition database is discussed in detail. Based on the proposed solution, new fonts are generated, which are consistent with the existing sample set in terms of the original shape and style. A fidelity evaluation of the experimental results is conducted in Section 5. In Section 6 the conclusions are drawn and the future work is listed.

@&#RELATED WORK@&#

In this section, the problems related to the recombination of Chinese characters as well as those attempts in literature to solve these problems are presented.

Recombination is also called reconstruction, which is one of the important research issues of character recognition studied by many researchers. Wang et al. [3] presented an algorithm to normalize handwritten Chinese characters based on stroke width extraction, and created the method of recombined handwritten Chinese characters. It was proved the original stroke features of the Chinese characters were reserved and handwritten Chinese characters were effectively recognized with this algorithm. But the process was complex and not suitable for the new type of character generating.

Unlike machine printed or hand printed character segmentation, handwritten cursive word segmentation is poised to overcome the challenge that a ligature is sometimes indistinguishable from a character. In other words, characters in the word could be touching. Lakshmi et al. [5] presented a segmentation method using Hypergraph model. Kuo-Sen Chou et al. [6] investigated a radical-based neighboring segment matching method for Chinese character recognition. In another study, Cheng et al. [7] proposed a modified Hough transform method for the recognition of handwritten Chinese characters. Chinese characters were mapped from the spatial domain into the parametric one for stroke extraction, and the dynamic programming matching (DP matching) algorithm was applied to recognize Chinese characters. This was a new approach to apply the Hough transform and also a new attempt of the stroke extraction of handwritten Chinese characters. Chan et al. [8] used background information to extract radicals from a handprinted Kanji character using “gap” models to aid the interpretation process. But it was not suitable for handwritten Chinese characters. Wang et al. [9] presented a recursive hierarchical approach for extracting radicals from Chinese characters, which combined structural and statistical methods. However, this work required a certain level of trimness of the handwritings. Taft and Zhu [10] took two-radical Chinese characters and transposed their radicals to create another character which showed that positional information was crucial for activating radical information during character recognition. The time course of forming and meaning activation during Chinese word reading was tested in 2 primed-naming experiments with varying prime type and prime-target stimulus onset asynchrony in [11]. Experimental results in [12] demonstrated that morphological awareness was uniquely important for early Chinese character recognition.

All of the above studies have made great improvement for Chinese character recognition and recombination, providing basic theories for the Chinese character recombination. Additionally, the generating algorithm of rare Chinese font set was also studied by some researchers, while other characters, such as English, Japanese Kanji, Indian Bangla script, were also investigated [13–19]. These researches have largely broadened the study fields and provided more topics for Chinese font generating.

In order to generate new Chinese fonts based on existing ones, the radicals and strokes of non-existing style should be extracted or constructed from the current existing characters. Therefore a comprehensive understanding of the character structure is necessary.

In addition, the stroke extraction becomes more complicated in offline recognition of handwritten Chinese characters [20]. In order to achieve a recombination model with abilities of adaptation as well as self-development, the structure of Chinese characters must be discussed for stroke splitting and feature extraction.

Generally the decomposition of the character structure refers to splitting a Chinese character into different primitive strokes or radicals. Each Chinese character is hierarchically constructed from components of three levels: radicals, strokes, and stroxels. A stroxel is defined as the minimum elements of a character, like a straight-line component of a stroke. Some strokes are complex and actually can be further divided. For example, the stroke “乙” can be divided as 一,丿, 一, 丶, which are defined as stroxels in this paper. A character structure consists of radicals and strokes. A radical is frequently constructed by a sub-structure of character. Some radicals themselves are also relatively simple Chinese characters [4]. Some strokes are formed by only one stroke pixel, while others can be constituted of multiple stroke pixels. Fig. 1
                         shows a hierarchical decomposition of a character ‘完’. All of Chinese characters can be decomposed by such a binomial tree chart in Fig. 1. The bottom layer of the chart are single strokes, which are the basic writing units to form various characters.

Stroke splitting is a process that splitting or disassembling primitive strokes into the most basic stroke elements (stroxels). As we know above, a stroke is defined as the basic unit to construct a Chinese character, e.g. vertical stroke ‘丨’, horizontal stroke ‘ー’, left-falling stroke ‘丿’, right-falling stroke ‘乀’. Some strokes can be divided into more simple stroxels. For example, the vertical and bending hook stroke ‘乚’ can be further split into vertical stroke‘丨’, bending stroke‘一’, hook stroke‘丶’. In this way, the complete decomposition of the character ‘完’ by stroke splitting is depicted in Fig. 2
                        .

The structure of some strokes is simplified by splitting. These strokes provide composite structure units for character recombination which may not be found in the existing characters. So these non-existing strokes must be re-constructed by the simplest stroxels.

Strictly speaking, the stroxels are not the basic or primitive strokes in Chinese character. As a basic unit, the stroxel in this paper is a deeply split element.

In Chinese character set, many radicals have the same shape in different characters, just like a stroke in different radicals. But the location of a radical in the whole character may vary with different characters. The features of a radical or a character include the length of the stroke, the roundness of the stroke, the undulation of the stroke, the angle of the stroke, the weight of the stroke, the location, the size, the direction, the corner, and the deformation of outside shape of the font character. Feature extraction means to find the location, size and direction of the radicals or strokes. As we know, radicals are the most frequently used components to construct a Chinese character. These components have some special structure features of size, location and direction, such as left and right, top and bottom. Though some radicals have a similar shape when appear in a character, they have varied sizes when they are assembled to different characters. For example: the character ‘胡’ is composed of ‘古’ and ‘月’, and each component size are approximately 50% of the whole character on the left and right location. Another character ‘湖’ also comprises radicals ‘古’ and ‘月’, whereas the size of ‘古’ or ‘月’ in the character ‘湖’ is about 1/3 of the character in the horizontal direction. This example brings the purpose of feature extraction, which is collecting and extracting the overall shape and structure of radicals or strokes in size, location and direction.

As the Chinese characters are block type characters, a single character can be divided by an 8*8 matrix as shown in Fig. 3
                         to define the location of each radical in the character.

In Fig. 3, the character is divided as one 8 rows and 8 columns matix. The radicals’ location in the character can be described as:
                           
                              •
                              R[i], i
                                 =1–8; (row numbers)

C[i], i
                                 =1–8; (column numbers)

For example, the location of radical ‘宀’ can be described with a coordinate point:
                           
                              •
                              Left Top point=(R[1], C[1]);

Right Bottom point=(R[4], C[8]);

According to the coordinates of the top left and bottom right points, the location of ‘宀’ is almost the upper half of the whole character.

The structure of Chinese characters has been extensively discussed in [21–23] (Yeh, Li, 2003; Yeh, Li, & Chen, 1997; Fu-lai Chung & Wilson, Ip, 2001) and most of the researchers agreed that the decomposition of a character can be classified as: vertical, horizontal, left–right, top-down, P-shaped, L-shaped, surroundings (enclosed), cover. In this paper, these empirical decomposition methods are modified to fill the database. In order to split the character in the decomposition database, the Chinese character structure decomposition is presented as follows:
                           
                              •
                              Left and right: left, right.

Top and bottom: top, bottom.

Left, middle and right: left, middle, right. 
                                    
                                 ;

Top, middle and bottom: top, middle, bottom. 
                                    
                                 .

Half surroundings: surrounding part, inner part. Including: 辶,厂, 乚,乙.

Three sides surrounding: surrounding part, inner part. Including 匚, 凵, 冂.

Full surrounding: surrounding part, inner part. 口.

Suspender: suspending part, inner part. 
                                    
                                 .

Generally, the structure and location features of each character and its radicals or strokes are extracted and classified in the decomposition database. Though some characters may have partly equal radicals or strokes, the size and spacing of them are quite different.

Considering an ordinary character composed of two components with side-by-side structure, the horizontal sizes of the two components are balanced by setting up a relation between the values of their horizontal component spacing. Taking character ‘湖’ as an example which was discussed above, assuming there is a font type A, only character ‘湖’ exists in this character set. In order to reconstruct character ‘胡’ in font A, we have to find radicals ‘古’ and ‘月’ or the entire radical ‘胡’. Based on the feature extraction, ‘胡’ is a radical of ‘湖’. Then the character ‘胡’ can be directly recombined from the existing character ‘湖’. But the proportions of ‘胡’ in the two characters are different. In framework of character ‘湖’, ‘胡’ is about 2/3 of the whole character. The new generated character ‘胡’ has to be resized to fill the whole character frame. This is the resize process of recombination, which may correct the spacing and size inaccuracy of the final constructed character.

The recombination process of Chinese character including structure decomposition, stroke splitting and feature extraction on the basis of discussion in Section 3. The strokes and their features are stored and described in a decomposition database, in which stroke splitting and feature extraction are also modeled and expressed. Since 2-D graphics is the basis for Chinese character recognition and image segmentation [24], the re-combined character is expressed in a 2-D graphics file in this paper. The stroke extraction problem arises in many Chinese character recognition studies and is difficult to solve. A method of radical and stroke extraction in the decomposition database is thus proposed.

In general, the proposed decomposition database for associated multiple routines of Chinese character recombination can be defined as the example table illustrated in Fig. 4
                         and Fig. 5
                        .

There are 4 columns in the database table for each radical or stroke of a character shown in Fig. 4 and Fig. 5. For a character, the columns are defined as follows:
                           
                              •
                              Column ‘id’: Chinese character sequence number in character set database.

Column ‘zi’: Chinese character.

Column ‘zs’: stroke pixels number of a character.

Column ‘zt’: mark of the character to be constructed or not. When ‘zt’ equals 1 means this character is a non-existent character in font type A, which indicates this character needs to be reconstructed. ‘zt’ equals 2 means this character is an existed character in font type A, which indicates this character and its radicals or strokes can used as the composed components of characters to be constructed.

For a component, radical or stroke, the columns are defined as:
                           
                              •
                              Column ‘i’ (i
                                 =0,1,2,…): means the composite components’ (radicals/strokes/stroke pixels) of the character.

Column ‘iw’ (i
                                 =0,1,2,…): the split location of composite components (radicals/strokes/stroke pixels) in the character.

Column ‘is’ (i
                                 =0,1,2,…): is the total stroke pixels number of the number i composite components of the character.

Column ‘it’ (i
                                 =0,1,2,…): mark of the composite components to be constructed or not. This column is the same with ‘zt’ except that ‘it’ refers to components or radicals. When ‘it’ equals 1 means this radical or stroke is not exist in database and needs to be reconstructed. If ‘it’ equals 2 means this component is an existed one in database, so this component and its splitting strokes can be used to construct the other non-existent characters.

For example, in Fig. 4, ‘zs’=10 indicates that ‘版’ is split as 10 stroke pixels. ‘zt’=1 means this character need to be generated. According to ‘0’ related columns, ‘版’ is firstly decomposed as two components: ‘片’ and ‘反’, and their location features are ‘左’(left) and ‘右’(right), respectively. It also shows that the number of splitting pixels of ‘片’ and ‘反’ are 5 and 5 respectively. In this way, all of the extraction features and the splitting radicals or strokes are obtained.

A few characters listed in this database are so complicated that they have to be divided into much more columns. Fig. 6
                         shows an example of the character ‘囖’ with the maximum decomposition in the database.

The total structure of database is depicted in Table 1
                        . In which a characters is split into individual component, radical, stroke and stroxels. Their location features are also described.

According to Table 1, each character can be divided into at most N layers of strokes, i
                        =0∼
                        N, N
                        ⩽9. N is decided by the structure complexity of a character. With experience, a maximum i (N) of 9 can cover general Chinese characters which may be divided into at most 10 hierarchical layers.

After location and size features are acquired by splitting and extraction process, the characters to be generated are recombined with the existing characters and their components in the character set. The strokes and radicals of the new generated character are searched from the decomposition database. Radical based searching algorithm always finds matched strokes in the higher layers of the database which will be discussed in Section 4.3. Generally, the recombination process can be described by the flow chart in Fig. 7
                        , in which the module ‘Tuning the new constructed character’ is optional because only a few of improperly created characters need to be tuned.

Recombination process aims to generate a new font type on the basis of the existing characters or their radicals in this font type X. Firstly, all of the characters in the character set are integrated into decomposition database which are responsible for structure decomposition, stroke splitting and location feature extraction. The next step is marking the value of ‘it’ column of existing characters and sampling the existing character stroxels. Acquiring samples of stroxels is a highly manual interaction which can obtain the minimum strokes of the character and its location features. Fig. 8
                         illustrated some sample strokes. The sample strokes of Chinese character ‘留’ is illustrated in Fig. 9
                        .

The sampled characters and their radicals or strokes are the primitive components to generate the new ones. During the sampling process, operator can zoom, rotate or change the weight of strokes in terms of the font type X. Tuning generated character is manually revising or modifying the shape or location of the recombined character. The stroke flaws of new generated character are eliminated by tuning. Tuning also make sure that the new generated character has the most similar style to that of the originally existing Chinese character fonts.

The purpose of feature searching is to find the most suitable or similar strokes from database to reconstruct the new characters. The features of found radical or stroke must match the location or size features of new characters. Some of the components may need to be resized or tuned during the process.

The feature searching mechanism is processed in the database. The column ‘zt’ of radicals to be constructed are marked as ‘1’ in the database, and the searching workflow strictly follows the decomposition order of the character. Searching algorithm always finds matched strokes in the higher layers of the database which means a high layer has a high priority. The matched strokes are searched from top layer to bottom layer within the span of a stroke or a radical in the decomposition database. All of the found strokes are listed and only the highest layer stroke is stored as the basic units to recreate a new character.

Considering searching ‘飛’ in database for example, the searching algorithm is depicted in Fig. 10
                        :

Feature searching algorithm is implemented with the following steps:
                           
                              •
                              Searching characters whose value of ‘zt’=2, one by one.

If found, search that if there is the same radicals or strokes exist on layer i.

If Yes, collect and store the radicals or strokes.

Resize the radicals or strokes to match the feature of character.

Continue to search the rest radicals of character on layer i.

If No, continue to search the same radicals or strokes exist on layer i+1.

If Not found, go onto look for the next character whose ‘zt’=2 step by step.

The searching algorithm is involved in a two-layer recursive process. The inner recursive process aims to search the similar radicals or strokes; the outer layer is responsible for searching the marked characters. The terminating conditions of these two recursive processes are the final stroke of the marked character and the last record of database, respectively. By these two-layer searching process, the most suitable components (radicals or strokes) of a character will be found in terms of the location and size features. All of the found radicals are used to generate the whole character.

For example, ‘鲁’ is a character to be constructed from character ‘噜’. As ‘鲁’ is a radical of ‘噜’ which has a left and right feature, the location division definition of ‘噜’ is shown in Fig. 11
                        :

According to the Fig. 11, the location feature definition of ‘鲁’ is:
                           
                              •
                              Left Upper point = (R[2],C[1]).

Right Bottom point = (R[8],C[8]).

The radical ‘鲁’ is in the right part of ‘噜’, so the recombined character ‘鲁’ fills the section of the character space. If user requests a fatter style, it can be resized to fill the whole section as in Fig. 12
                        B.

Each radical or stroke can be manually adjusted in the font tuning software, including rotating, moving, zooming, which makes the whole character more suitable or versatile for different font style as user required. Tuning of the character ‘鲁’ is shown in Fig. 13
                        .

@&#EXPERIMENTS@&#

Previous research has demonstrated the facilitative effects of stroke splitting and feature extraction. We randomly chose 3840 characters as examples in the verification experiments. The example characters are those which can be regarded as the independent characters as well as the construction components/radicals. Founder Shu style and Chinese new Wei style are the target character sets in this experiment. Some character examples with these two styles are shown in Tables 2 and 3
                     
                     .

In this table, the grey filled characters are existing ones in the decomposition database. The others are the characters which need to be generated. Fig. 14
                      shows the recombination results. It is surprisingly excellent that almost all of the non-existed characters are correctly constructed. This is probably because most of the top radicals could be found in the decomposition database such as ‘丁’, ‘定’, ‘董’, ‘鼎’, ‘东’, ‘兜’, ‘豆’, ‘朵’, ‘耳’, ‘方’, ‘凡’, ‘分’. Though some of the characters cannot be found in the database, their split strokes can be found in the higher layer of the database, such as “而”,”罚”,”封”,”符”.

In order to verify the validity of proposed method, we defined less existing characters in the decomposition database as shown in Table 3. Chinese New Wei Style is the target font in this experiment.

Similarly, the grey filled characters are existing ones in the decomposition database. The others are the new style characters to be generated in this table. Fig. 15
                      indicated the generated fonts. It is obviously that the character “鼎”, “繁”, “慶” are not properly or perfectly created. For example, the character “鼎” are shown in Fig. 16
                     . The reason is probably because that these improperly generated characters have no top layer or higher layer radicals in the decomposition database. Therefore, strokes in the deeper or bottom layer have to be replaced to construct them. The strokes which construct these characters are probably found on the deeper layers of the database. As we know, the character created by strokes or radicals in the deeper layer is less true than the original character. In other word, recombination based on deep splitting may cause partly loss of the primitive character features such as location, shape, the size, the direction, the corner and geometrical features.

According to the discussion above, the characters are split in the decomposition database with hierarchical layers. Appearance of new fonts created with the strokes or radicals found in the database can vary with the target layers. What’s the relation of target layers of found stroke and fidelity of character? Fidelity means that how the new created character is similar to or looks like the real one. In order to quantify this relation, we have to provide an model to evaluate the similarity or fidelity of new generated characters comparing to the original ones. Fidelity evaluation of character is presented in Ref. [25] which proposed a three-level hierarchical structure of task planning. In this article, another fidelity evaluation on the basis of profile coincidence of character is presented.

Profile coincidence of a character means that how the profile of a new character is overlapping or position-repeating that of the original one. For example, two characters in Fig. 17
                      are not very similar because the profiles of strokes ‘ˊ’ and ‘ー’ are not fitting well.

The character in this paper is stored in a standard 400*400 pixels bitmap file. All of the outline pixels can be described in a profile. Given that each pixel coordinate of a new generated character is 
                        
                           P
                           (
                           
                              
                                 x
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 y
                              
                              
                                 i
                              
                           
                           )
                        
                     , and that of the original one is 
                        
                           
                              
                                 P
                              
                              
                                 0
                              
                           
                           (
                           
                              
                                 x
                              
                              
                                 0
                                 i
                              
                           
                           ,
                           
                              
                                 y
                              
                              
                                 0
                                 i
                              
                           
                           )
                        
                     . The total pixels are N. The average error of pixel on x axis and y axis are given by the following equations, respectively:
                        
                           (1)
                           
                              
                                 
                                    δ
                                 
                                 
                                    x
                                 
                              
                              =
                              
                                 
                                    1
                                 
                                 
                                    N
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    0
                                 
                                 
                                    N
                                 
                              
                              (
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    x
                                 
                                 
                                    0
                                    i
                                 
                              
                              )
                           
                        
                     
                     
                        
                           (2)
                           
                              
                                 
                                    δ
                                 
                                 
                                    y
                                 
                              
                              =
                              
                                 
                                    1
                                 
                                 
                                    N
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    0
                                 
                                 
                                    N
                                 
                              
                              (
                              
                                 
                                    y
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    y
                                 
                                 
                                    0
                                    i
                                 
                              
                              )
                           
                        
                     
                  

The offset of each pixel is:
                        
                           (3)
                           
                              
                                 
                                    Δ
                                 
                                 
                                    x
                                 
                              
                              =
                              
                                 
                                    1
                                 
                                 
                                    N
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    0
                                 
                                 
                                    N
                                 
                              
                              (
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    x
                                 
                                 
                                    0
                                    i
                                 
                              
                              -
                              
                                 
                                    δ
                                 
                                 
                                    x
                                 
                              
                              )
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    Δ
                                 
                                 
                                    y
                                 
                              
                              =
                              
                                 
                                    1
                                 
                                 
                                    N
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    0
                                 
                                 
                                    N
                                 
                              
                              (
                              
                                 
                                    y
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    y
                                 
                                 
                                    0
                                    i
                                 
                              
                              -
                              
                                 
                                    δ
                                 
                                 
                                    y
                                 
                              
                              )
                           
                        
                     
                  

Thus, the fidelity of new generated character and the real one can be described as:
                        
                           (5)
                           
                              f
                              =
                              
                                 
                                    
                                       
                                          P
                                       
                                       
                                          t
                                       
                                    
                                    -
                                    (
                                    
                                       
                                          Δ
                                       
                                       
                                          x
                                       
                                    
                                    +
                                    
                                       
                                          Δ
                                       
                                       
                                          y
                                       
                                    
                                    )
                                    /
                                    2
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          t
                                       
                                    
                                 
                              
                           
                        
                     where Pt
                      is defined as the relative total pixels of character:
                        
                           (6)
                           
                              
                                 
                                    P
                                 
                                 
                                    t
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          P
                                       
                                       
                                          0
                                       
                                    
                                    /
                                    N
                                 
                                 
                                    2
                                 
                              
                              =
                              
                                 
                                    (
                                    
                                       
                                          x
                                       
                                       
                                          0
                                          i
                                       
                                    
                                    -
                                    
                                       
                                          x
                                       
                                       
                                          0
                                          
                                             min
                                          
                                       
                                    
                                    )
                                    /
                                    N
                                    +
                                    (
                                    
                                       
                                          y
                                       
                                       
                                          0
                                          i
                                       
                                    
                                    -
                                    
                                       
                                          y
                                       
                                       
                                          0
                                          
                                             min
                                          
                                       
                                    
                                    )
                                    /
                                    N
                                 
                                 
                                    2
                                 
                              
                           
                        
                     In which 
                        
                           
                              
                                 x
                              
                              
                                 0
                                 min
                              
                           
                        
                      and 
                        
                           
                              
                                 y
                              
                              
                                 0
                                 min
                              
                           
                        
                      are the minimum coordinate location on x and y axis in the 400*400 bitmap file, respectively.

The fidelity of ‘鲁’ in Fig. 17 is about 91.6%. In Fig. 18
                     , it is 77.3%.

In order to validate the fidelity algorithm, we choose 1536 examples from 3840 characters. The number of existing characters and the fidelity are shown in Table 4
                     .

From Table 4, it can be concluded that the more existing sample characters in the database, the higher the fidelity is. When the number of existing characters are reduced to 30, the fidelity rate decreased from 90% to 32.55%. When the number of samples rises to 77, the characters of high fidelity is 1189 which reaches a higher proportion of 77.4% of the total characters. In order to acquire an acceptable and high proportion of the high fidelity, we recommend that the number of sample characters should not be lower than about 6–10% of the total characters.

The relation between target layers of found stroke and fidelity of a character is shown in Fig. 19
                     . The curve with circle symbols represents the Chinese New Wei style and the curve with cross symbols represents the Founder Shu style. It is shown that when the target layer of strokes are found closer to the top layer, the generated character fits original one better and vice versa. The features of new created character are well coincided with primitive one. When the layer exceeds 1, the fidelity dramatically decreased. When it exceeds 3, the new generated character is not similar to original one at all. The reason is that most of the radicals are split from layer 0 to 3, and only a few complicated characters are split in layer 4 and the later layers. It can be seen that Chinese New Wei style has a little higher fidelity than that of Found Shu style, which may probably because that the shape of the former is more regular than the latter. It can also be concluded that the more irregular the font is, the lower the fidelity of the new created one is.

For the generated characters, in addition to the physical test, the usability test is also conducted. The usability indicates the performance of the new generated characters in two aspects: recognizability and style-consistency. Recognizability test could examine whether the generated characters can be easily identified, and to what extent they are recognizable, so that they can be compared with the original characters. Recognizability can be reflected by the performance (e.g., reaction time and error percentage of generated character) of the character recognition task in a briefly-presented condition. The reaction time and error percentage are proved to be efficient in judgments of visual similarity of Chinese Characters by Yeh and Li [26]. In this paper, the error percentage of generated character is defined as the percentage of deformed radicals or strokes compared with the original character. Style-consistency test examines whether the font style is preserved in the generating algorithm. Style-consistency can be measured by participants’ subjective report in terms of the style about how much the generated characters look like the original ones. If performance from the generated characters is similar to the original characters in both tests, we could say that the generating algorithm creates fonts with good usability. For individual characters, such tests can also indicate which characters need to be adjusted manually.

In the usability test, there are 241 samples of the existing characters in the decomposition database. The recognizability test and style-consistency test are run with 50 participants including students and academics in the Chongqing Technology and Business University. The tests aim to collect the human factor data from manually surveying. There are 30 characters randomly chosen from new generated character set. The 30 new generated characters are presented in Fig. 20
                     .

Each character is printed on two separate cards with Chinese New Wei style and Found Shu style respectively. 30 original characters are also printed on two separate cards with two styles. In this test, we take the Chinese New Wei style as the samples. In the statistical Table, 3 items are listed: reaction time, accuracy rate, similarity rate. The statistical table format is shown in Table 5
                     .

In the usability test, the participants are divided into 5 teams. The organization of each team consists of one investigator and 10 participants. Table 5 is filled by every participant and their investigator in each team. When all the surveys completed, the data in the table are collected and the usability testing results can be calculated.

In Table 5, Ei represents the error percentage of a single generated character, which is calculated as the following equation:
                        
                           (7)
                           
                              
                                 
                                    E
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    S
                                 
                                 
                                    i
                                 
                              
                              /
                              
                                 
                                    S
                                 
                                 
                                    t
                                 
                              
                           
                        
                     In the Eq. (7), Si is the number of error strokes in a single character; St is the total strokes of this character. For example, the error percentage of character ‘爸’ in the table is 12.5%. The new generated character ‘爸’ and the original one are shown as Figs. 21 and 22
                     
                      respectively:It is obviously that the point stroke ‘丶’ on the up-right corner of the new generated character is replaced by a right-falling stroke ‘乀’. The participants can recognize this error stroke quickly. The error stroke number is 1, the total strokes of character ‘爸’ is 8. Therefore, the error percentage of character ‘爸’ is calculated by the following formula according to the Eq. (7):
                        
                           
                              
                                 
                                    
                                 
                              
                           
                        
                     Similarly, there are 2 error strokes in character ‘背’. The total strokes of ‘背’ is 9. The error percentage of character ‘背’ is:
                        
                           
                              
                                 
                                    
                                 
                              
                           
                        
                     With Eq. (7), all the error percentage of new generated characters can be similarly calculated.

Another parameter similarity rate in Table 5 is tested by the participants’ subjective perception and knowledge of this character.

The accuracy rate and similarity rate items are filled by the participants themselves, the reaction time item is filled by the investigators according to the participant’s reaction time of recognizing the characters. The participant’s reaction time is measured by the stopwatch timer in the investigator. The participants are required to read the character as soon as possible when the investigator shows the card.

There are totally 50 participants’ reports in this test. The average value of each item in the report is calculated as follows:

The average error percentage of generated characters:
                        
                           (8)
                           
                              EP
                              =
                              
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             1
                                          
                                          
                                             50
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   
                                                      30
                                                   
                                                
                                                
                                                   
                                                      E
                                                   
                                                   
                                                      i
                                                   
                                                
                                                /
                                                30
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       50
                                       .
                                    
                                 
                              
                           
                        
                     In which, EP is the abbreviation of average error percentage of generated characters, i is the index of character, j is the participants’ index.

The average similarity rate:
                        
                           (9)
                           
                              SR
                              =
                              
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             1
                                          
                                          
                                             50
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   
                                                      30
                                                   
                                                
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      i
                                                   
                                                
                                                /
                                                30
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       50
                                       .
                                    
                                 
                              
                           
                        
                     In which, SR is the abbreviation of average similarity rate. Index i and j are the same meaning as Eq. (8).

The average reaction time:
                        
                           (10)
                           
                              RT
                              =
                              
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             1
                                          
                                          
                                             50
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   
                                                      30
                                                   
                                                
                                                
                                                   
                                                      R
                                                   
                                                   
                                                      i
                                                   
                                                
                                                /
                                                30
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       50
                                       .
                                    
                                 
                              
                           
                        
                     In which, RT is the abbreviation of average reaction time. Index i and j are the same meaning as Eq. (8).

The results of each item are shown as following:

The average error percentage of generated characters: 5.63%

The average similarity rate: 93.5%

The average reaction time: 712.16ms

According to the test results, there are averagely 5.63% radical or stroke errors of the generated characters compared with the original ones. The new generated characters are with a high similarity to original characters. And the participants can recognize and read the character at an average time of 712.16ms which is relatively a quick reaction time. The recognizability test and style-consistency test show that the presented fonts generating algorithm creates fonts with good usability. Based on the reports, we can find out that those deformed radicals or strokes which need to be revised manually.

Generally, the experimental result shows that the recombination of Chinese characters could be greatly simplified by splitting the character into radicals and strokes in the decomposition database. It is obviously that the structure of strokes is more stable and simpler than that of characters. In addition, the number of reference patterns based on strokes is much smaller than that of characters [27]. There are approximately 350 basic radicals or strokes [28] which are far fewer than the number of Chinese character categories.

@&#CONCLUSIONS@&#

A Chinese character decomposition database is presented and the feature searching algorithm is proposed in this paper. With the structured character decomposition and stroke splitting, automatic component searching and matching is balanced and the new style of Chinese characters are generated. The construction of a large number of Chinese characters with specific style becomes easier with the proposed fonts generating system. The experiments show that the new generated Chinese fonts fit the real ones well. The proposed decomposition database and searching algorithm can cover a variety of Chinese characters, such as round hand and cursive characters. However, experience shows that sometimes the constructed characters need manually tuning, which is caused by the inaccuracy of location or loss of features. Fidelity evaluation on the basis of profile coincidence of character is presented and it proves that 6–10% of sample characters can recreate high fidelity ones in the fonts generating system. It is also verified that the layer of stroke may have influence on fitness of generated characters to real one. The usability tests are run in recognizability test and style-consistency test. The participants’ subjective report indicates that the performance of the generated characters is similar to the original characters in both tests. The collected human data show that the generating algorithm creates fonts is with good usability. For future work, efforts should be focused on location accuracy and feature identification to reduce the manual interaction. Although producing high-quality digital specific Chinese fonts remains a difficult task, Chinese character recombination research makes great achievements.

@&#REFERENCES@&#

