@&#MAIN-TITLE@&#A Set-Partitioning-based model for the Berth Allocation Problem under Time-Dependent Limitations

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A Set-Partitioning-based model for solving this problem is proposed.


                        
                        
                           
                           This problem is extended to consider a multi-period planning horizon.


                        
                        
                           
                           Improvements in running time and solution quality over earlier approaches.


                        
                        
                           
                           A new benchmark suite is proposed.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Berth Allocation Problem

Set Partitioning

Optimization model

Maritime container terminal

@&#ABSTRACT@&#


               
               
                  This paper addresses the Berth Allocation Problem under Time-Dependent Limitations. Its goals are to allocate and schedule the available berthing positions for the container vessels arriving toward a maritime container terminal under water depth and tidal constraints. As we discuss, the only optimization model found in the literature does not guarantee the feasibility of the solutions reported in all the cases and is limited to a two-period planning horizon, i.e., one low tide and one high tide period. In this work, we propose an alternative mathematical formulation based upon the Generalized Set Partitioning Problem, which considers a multi-period planning horizon and includes constraints related to berth and vessel time windows. The performance of our optimization model is compared with that of the mathematical model reported in the related literature. In this regard, the computational experiments indicate that our model outperforms the previous one from the literature in several terms: (i) it guarantees the feasibility and optimality of the solutions reported in all the cases, (ii) reduces the computational times about 88 percent on average in the problem instances from the literature, and (iii) presents reasonable computational times in new large problem instances.
               
            

@&#INTRODUCTION@&#

Nowadays, maritime container terminals have to face increasingly rough requirements from shipping companies which claim real-time services. This pressure is even higher for terminal managers due to the fierce competitiveness among terminals for being selected as exchange points (hubs) or origin-destination points in shipping routes. Thus, maritime container terminals have to improve their management capabilities with the objective of enhancing their productivity. In this regard, an inefficient use of resources is translated into a bottleneck or a delay of the yard-side and land-side operations. This fact gives rise to a low overall productivity of the maritime container terminal. Notteboom (2006) indicates that 93.6 percent of the delays in the vessel schedules are attributable to terminal operations. In this context, the berth allocation operation can be highlighted as one of the most important ones, since it has a significant impact on terminal productivity (Beškovnik, 2008). Moreover, one of the main indicators used by the shipping companies to measure the performance of a certain maritime container terminal is the berth productivity, in terms of dwell time on berths and waiting time for a free berth (Yeo, 2010). Therefore, it becomes crucial for the container terminals to efficiently use the berths with the goal of improving their productivity and making them more attractive.

The berthing process consists of several phases carried out sequentially. Once a container vessel arrives to a port, a berth is assigned to it according to its particular features (e.g., dimensions, stowage plan, contractual agreements, etc.). Once the vessels are berthed, their containers are unloaded and transferred to the yard, where they are stored temporally. Finally, the containers are loaded into trucks, trains, or other vessels to continue throughout their route. Exhaustive descriptions of the processes within each phase can also be consulted in the works by Steenken, Voß, and Stahlbock (2004), Stahlbock and Voß (2008), and Rashidi and Tsang (2013).

Complex planning and management problems arise in each one of the aforementioned phases. In this regard, the inherent interrelation among the operations involves to treat the problems arisen at each phase and integrate them within functional schemes (i.e., by preprocessing or by feedback). Some examples of schemes can be consulted in the works Meisel and Bierwirth (2006), Meisel (2009), Meisel and Bierwirth (2013), and Lalla-Ruiz, Expósito-Izquierdo, Melián-Batista, and Moreno-Vega (2013). Thus, the effective scheduling of the isolated operations arising at each phase such as berth allocating incoming vessels may lead to an improvement of the overall performance of the terminal. This can be seen in the fact that a poor utilization of berths affects the yard-side (e.g., container arrival/departure schedule, container transshipment operations) and land-side operations (e.g., train or truck container pick-up schedule). Hence, this would result in a low overall productivity of the container terminal, and therefore dissatisfaction of the shipping companies.

The previous discussion leads to the definition of a logistic problem known as Berth Allocation Problem. Its objective is to assign berthing positions along the quay to incoming container vessels. As indicate by Imai, Nishimura, and Papadimitriou (2001a), the berth allocation problem may be frequently solved since berth space is very limited at most container terminals as well as the high interrelation with other related problems (Meisel, 2009), and thousands of containers must be handled daily. Thus an effective berth allocation is crucial (i) for the efficient management of the container flows, (ii) minimize ships waiting time, and (iii) maximize port’s turnaround (Rashidi & Tsang, 2013).

When determining the berth schedule, the maritime container terminal has to consider several factors, such as the vessel and berth time windows, number of loaded/unloaded containers, water depth, and tide constraints. In this regard, those maritime container terminals strongly affected by the tide, the water depth constraints have to consider the specific berth depth, vessel drafts, and tidal conditions over time. Therefore, in order to allocate incoming vessels to berthing positions, terminal managers have to take into account not only berth depths and vessel drafts, but also their arrival and berthing time. In this regard, the available depth at low tide may not be adequate for berthing some vessels since it can give rise to accidents or delays. In other situations, the vessels may require high tide for going through certain sections of their route when they are fully loaded. Moreover, empty vessels may not be able to pass under bridges at high tide. In this context, container terminal managers and shipping companies are aware that a small delay in the service for awaiting proper tidal conditions may be amplified to a greater delay. This fact may result in outstanding economical losses and competitiveness.

The aforementioned issues give rise to the definition of the Berth Allocation Problem under Time-Dependent Limitations (BAPTL), which was introduced by Xu, Li, and Leung (2012). In this problem, the water depth of the berths (subject to the tidal conditions), the draft of the vessels, and the priorities of the vessels are considered.

The main contributions of this paper are the following:

                        
                           •
                           The optimization model proposed by Xu et al. (2012) for the BAPTL is limited to only a two-period planning horizon, i.e., one low tide period and one high tide period. However, as discussed in Section 3.2, when a longer planning horizon is required for providing a solution, this model extends the second period, either low-tide or high-tide to infinity. This may produce infeasible solutions in practice due to the fact that some vessels can be assigned to infeasible positions. On the other hand, in some cases, those infeasible solutions may have a better objective value than feasible ones within the two-period time horizon. Thus, in this work, we address this by proposing additional constraints to ensure the feasibility of the solutions.

Developing a mathematical model based upon the Generalized Set-Partitioning Problem (GSPP), and termed GM-BAPTL for the BAPTL that considers a multi-period planning horizon. As discussed in this paper, this model overcomes those scenarios in which the model proposed by Xu et al. (2012) reports infeasible solutions. The computational experiments indicate that GM-BAPTL is able to solve all the problem instances from the literature to optimality in less than 0.5 second, which constitutes a reduction of about 88 percent in the computational time.

Including container vessel and berth time windows in the definition of the BAPTL. This variant of the problem is referred to as Berth Allocation Problem under Time-Dependent Limitations and Time-Windows (BAPTL-TW), whereas the variant of GM-BAPTL for addressing the BAPTL-TW is termed GM-BAPTL-TW. In order to evaluate the performance of those set partitioning aimed at solving BAPTL and BAPTL-TW, a benchmark suite is proposed.

The remainder of this paper is organized as follows. The literature review is presented in Section 2. The BAPTL is introduced in Section 3. The Generalized Set-Partitioning-based mathematical models for the BAPTL and BAPTL-TW are provided in Section 4. Afterwards, the computational experiments carried out in this work are summarized in Section 5. Finally, the main conclusions extracted from the work and several lines for further research are drawn in Section 6.

@&#LITERATURE REVIEW@&#

A considerable number of papers concerning the Berth Allocation Problem (BAP) have been published in the literature over the last years. It has been studied in the literature at operational, tactical, and strategic levels. At operational level, the time horizon goes from one day to one week and the BAP at this level is aimed at optimizing the delays and waiting times of container vessels as well as maximize port’s turnaround. The tactical level covers tasks ranging from one week up to several months. Some of the BAP objectives at this level aims to optimize the transshipment flows among vessels, cycling visiting of the vessels, fulfillment of contracts among shipping companies and terminal managers, route design, etc. The planning at strategic level has the longest horizon, which goes from one up to several years. In this level, the decisions tackled are related to the market and trade selection, establish specific and dedicated berths, strategic cooperation agreements between terminal and shipping companies, etc. For a more detailed description, the reader is referred to the works by Christiansen, Fagerholt, Nygreen, and Ronen (2007), Vis and de Koster (2003), and Bierwirth and Meisel (2010).

Due to the large variety of maritime terminal layouts, research has produced a multitude of variants for the BAP. According to the classification proposed by Bierwirth and Meisel (2010), the BAP can be distinguished between the static version (SBAP) and the dynamic version (DBAP). In the static version, vessels are in port before starting the planning horizon. Imai, Nagaiwa, and Tat (1997) study this approach. The SBAP can be reduced to a classical assignment problem, which is known to be polynomially-solvable (see Pinedo, 2008). The DBAP is presented as an extension of the SBAP by Imai, Nishimura, and Papadimitriou (2001b), in which vessels can arrive at any moment of the planning horizon. Since the difficulty when finding an optimal solution accurately, they develop a heuristic based on a sub-gradient method with a Lagrangian relaxation. Monaco and Sammarra (2007) present a stronger formulation for the DBAP and develop a Lagrangian relaxation with a non-standard multiplier adjustment method for solving it. Nishimura, Imai, and Papadimitriou (2001) extend the DBAP by considering different water depths and Imai, Nishimura, and Papadimitriou (2003) also include vessels priorities. Cordeau, Laporte, Legato, and Moccia (2005) introduce two formulations for the DBAP, where the major difference lies on the consideration of the quay. While in one formulation a discrete quay is considered, in the other one a hybrid approach is studied. In order to solve them, two Tabu Search algorithms are proposed. Buhrkal, Zuglian, Ropke, Larsen, and Lusby (2011) review the three main mathematical formulations for the DBAP. They highlight that the most appropriate one in terms of quality of the solutions and time requirement is based on a Generalized Set Partitioning Problem proposed by Christensen and Holst (2008). Lalla-Ruiz, Melián-Batista, and Moreno-Vega (2012) address the discrete case of the DBAP by proposing an effective and efficient Tabu Search with Path-Relinking. The work by de Oliveira, Mauri, and Lorena (2012) presents a Clustering Search (CS-SA) with Simulated Annealing for solving the DBAP. This algorithm provides optimal solutions in all the largest instances proposed by Cordeau et al. (2005). In this regard, Ting, Wu, and Chou (2014) propose a Particle Swarm Optimization algorithm for addressing the DBAP, which is able to obtain optimal solutions by shorter computational times than CS-SA. Moreover, Hansen, Oguz, and Mladenovic (2008) take into account the costs for waiting and handling as well as earliness or tardiness of completion with the purpose of including priorities. Also, they consider a handling cost associated with each berth that varies depending on which berth is used. A Variable Neighborhood Search is developed for addressing it.

Concerning spatial constraints, the BAP can be mainly classified as discrete, continuous, or hybrid. For further details the reader is referred to the work by Bierwirth and Meisel (2010). The discrete case presents a quay divided into sections called berths. Some related works that address this variant are those presented by Imai et al. (2001b), Nishimura et al. (2001), Cordeau et al. (2005), and Lalla-Ruiz, González-Velarde, Melián-Batista, and Moreno-Vega (2014). In the continuous case, there is no division of the quay, so that any incoming vessel can be assigned to the quay taking into account its spatial measures. Some works related to this consideration are due to Lim (1998), Park and Kim (2002), and Wang and Lim (2007). In the hybrid version of the BAP, the quay is divided into berths, but a vessel can occupy more than a single berth or share it with other container vessels. Other spatial constraints are described by Cordeau et al. (2005), Imai, Chen, Nishimura, and Papadimitriou (2008) and Cheong, Tan, Liu, and Lin (2010).

Although some of the above considerations regarding physical factors consider water depth (Cheong & Tan, 2008; Cheong et al., 2010; Guldogan, Bulut, & Tasgetiren, 2012; Nishimura et al., 2001), only a few works in the literature take into account tidal constraints. This is the case of the works by Barros, Costa, Oliveira, and Lorena (2011) and Xu et al. (2012).


                     Barros et al. (2011) develop a berth allocation model with tidal time windows in bulk ports, where the vessels are allocated mainly considering a set of tidal time windows. They propose a set of instances for this problem, in which most of them include a single berth, whereas only one problem instance considers three berths. For addressing the problem, the authors propose a Simulated Annealing-based algorithm, which solves the instances in a reasonable computational time and provides high-quality solutions. The authors highlight the benefits of this approach to be used in a decision support system in the terminal of São Luís (Brasil).


                     Xu et al. (2012) consider the Berth Allocation Problem under Time-Dependent Limitations (BAPTL) due to tidal conditions. The container vessels have to be allocated to berths considering different tide periods, which cause changes in the water depth of the berths. They formulate the BAPTL limited to a two-period planning horizon as a Mixed Integer Linear Programming model. Additionally, they propose a set of instances based on real data and an algorithmic procedure for solving them. However, despite the fact that only two periods are considered by these authors, some instances require more than two periods. In those cases, the mathematical model is not able to limit the planning horizon to two periods and extend the second period to infinity. As discussed in Section 3.2, this implies that the model provides infeasible solutions in the majority of the instances under analysis.

The Berth Allocation Problem under Time-Dependent Limitations (BAPTL) was introduced by Xu et al. (2012). It seeks to determine the berthing position and berthing time for those container vessels arriving to a maritime container terminal considering external limiting factors, such as water depth and tidal constraints in such a way that the service time of each vessel is minimized.

In the BAPTL, the time horizon is divided into regular intervals by a parameter T, which represents the time point where the tide level has reached a certain threshold. The resulting intervals represent the low and high tide periods. Namely, a low-water period (LW), defined in [0, T] and a high-water period (HW), defined in [T, ∞). According to Xu et al. (2012) the second time period is extended to the infinity, that is, it does not have a superior time limit. This assumption leads to infeasible solutions as discussed in Section 3.2. Despite the fact that these intervals can be swapped in order to have other scenarios, i.e., LW-HW or HW-LW, the computational results presented by Xu et al. (2012) show that swapping intervals from low-tide to high tide or vice versa for obtaining new scenarios does not increase or change the complexity of the problem. Furthermore, in the BAPTL there is a set of incoming container vessels 
                        
                           N
                           =
                           {
                           1
                           ,
                           2
                           ,
                           ⋯
                           ,
                           n
                           }
                        
                      and a set of available berths 
                        
                           M
                           =
                           {
                           1
                           ,
                           2
                           ,
                           ⋯
                           ,
                           m
                           }
                        
                     . For each vessel j ∈ N, there is a given service time pj
                     , arrival time aj
                     , weight priority vj
                     , high-water berth index Hj
                      and low-water berth index Lj
                     , where Lj, Hj
                     
                     
                        
                           ∈
                           {
                           1
                           ,
                           2
                           ,
                           ⋯
                           ,
                           m
                           }
                        
                     . Regarding this notation, a vessel j ∈ N in high-water period can be assigned to berths 
                        
                           
                              H
                              j
                           
                           ,
                           
                              H
                              j
                           
                           +
                           1
                           ,
                           …
                           ,
                           m
                        
                     . Similarly, during a low-water period, a vessel j can be assigned to berths 
                        
                           
                              L
                              j
                           
                           ,
                           
                              L
                              j
                           
                           +
                           1
                           ,
                           ⋯
                           ,
                           m
                        
                     . According to this, in high and low-water periods, vessels cannot be assigned to berths 
                        
                           1
                           ,
                           2
                           ,
                           ⋯
                           ,
                           
                              H
                              j
                           
                           −
                           1
                        
                      / 
                        
                           
                              L
                              j
                           
                           −
                           1
                           ,
                        
                      respectively. It should be noted that the tide level and vessel draft are taken into account in the Lj
                      and Hj
                      parameters.

With the aim of making this paper self-contained and for including additional constraints to the already proposed model, in the following we report the mathematical formulation proposed by Xu et al. (2012) for the BAPTL. We will refer to this model as M-BAPTL. The following notations are used.

                           
                              N
                           
                           
                              Set of n container vessels

Set of m berths

Time point at which the tide level has reached a certain threshold

Low-water berth index, 
                                    
                                       
                                          L
                                          j
                                       
                                       ∈
                                       
                                          {
                                          1
                                          ,
                                          2
                                          ,
                                          ⋯
                                          ,
                                          m
                                          }
                                       
                                       ,
                                    
                                 
                                 
                                    
                                       
                                       j
                                       ∈
                                       N
                                    
                                 
                              

High-water berth index, 
                                    
                                       
                                          H
                                          j
                                       
                                       ∈
                                       
                                          {
                                          1
                                          ,
                                          2
                                          ,
                                          ⋯
                                          ,
                                          m
                                          }
                                       
                                       ,
                                    
                                 
                                 
                                    
                                       
                                       j
                                       ∈
                                       N
                                    
                                 
                              

Processing time of container vessel j ∈ N
                              

Arrival time of container vessel j ∈ N
                              

Weight priority of container vessel j ∈ N
                              

∈ {0, 1}, equal to 1 if container vessel j is assigned to berth i, and 0 otherwise.

∈ {0, 1}, equal to 1 if container vessels j and j′ (j ≠ j′) are both assigned to berth i and vessel j is processed before vessel j′, and 0 otherwise.

Starting time of the processing of container vessel j
                              

subject to

                           
                              (2)
                              
                                 
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          M
                                       
                                    
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                    
                                    =
                                    1
                                    ,
                                    
                                    ∀
                                    j
                                    ∈
                                    N
                                 
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       s
                                       j
                                    
                                    ≥
                                    
                                       a
                                       j
                                    
                                    ,
                                    
                                    ∀
                                    j
                                    ∈
                                    N
                                 
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       s
                                       
                                          j
                                          ′
                                       
                                    
                                    ≥
                                    
                                       s
                                       j
                                    
                                    +
                                    
                                       p
                                       j
                                    
                                    −
                                    M
                                    
                                       (
                                       1
                                       −
                                       
                                          I
                                          
                                             i
                                             j
                                             
                                                j
                                                ′
                                             
                                          
                                       
                                       )
                                    
                                    ,
                                    
                                    ∀
                                    j
                                    ,
                                    
                                       j
                                       ′
                                    
                                    ∈
                                    N
                                    ,
                                    s.t.
                                    j
                                    ≠
                                    
                                       j
                                       ′
                                    
                                    ,
                                    ∀
                                    i
                                    ∈
                                    M
                                 
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    
                                       I
                                       
                                          i
                                          j
                                          
                                             j
                                             ′
                                          
                                       
                                    
                                    +
                                    
                                       I
                                       
                                          i
                                          
                                             j
                                             ′
                                          
                                          j
                                       
                                    
                                    ≤
                                    
                                       1
                                       2
                                    
                                    
                                       (
                                       
                                          x
                                          
                                             i
                                             j
                                          
                                       
                                       +
                                       
                                          x
                                          
                                             i
                                             
                                                j
                                                ′
                                             
                                          
                                       
                                       )
                                    
                                    ,
                                    
                                    ∀
                                    j
                                    ,
                                    
                                       j
                                       ′
                                    
                                    ∈
                                    N
                                    ,
                                    s.t.
                                    j
                                    <
                                    
                                       j
                                       ′
                                    
                                    ,
                                    ∀
                                    i
                                    ∈
                                    M
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       I
                                       
                                          i
                                          j
                                          
                                             j
                                             ′
                                          
                                       
                                    
                                    +
                                    
                                       I
                                       
                                          i
                                          
                                             j
                                             ′
                                          
                                          j
                                       
                                    
                                    ≥
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                    
                                    +
                                    
                                       x
                                       
                                          i
                                          
                                             j
                                             ′
                                          
                                       
                                    
                                    −
                                    1
                                    ,
                                    
                                    ∀
                                    j
                                    ,
                                    
                                       j
                                       ′
                                    
                                    ∈
                                    N
                                    ,
                                    s.t.
                                    j
                                    <
                                    
                                       j
                                       ′
                                    
                                    ,
                                    ∀
                                    i
                                    ∈
                                    M
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                    
                                    =
                                    0
                                    ,
                                    
                                    ∀
                                    j
                                    ∈
                                    N
                                    ,
                                    
                                       (
                                       i
                                       =
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       
                                          H
                                          j
                                       
                                       −
                                       1
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       s
                                       j
                                    
                                    ≥
                                    T
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                    
                                    ,
                                    
                                    ∀
                                    j
                                    ∈
                                    N
                                    ,
                                    
                                       (
                                       i
                                       =
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       
                                          L
                                          j
                                       
                                       −
                                       1
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    ,
                                    
                                    ∀
                                    j
                                    ∈
                                    N
                                    ,
                                    ∀
                                    j
                                    ∈
                                    M
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       I
                                       
                                          i
                                          j
                                          
                                             j
                                             ′
                                          
                                       
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    ,
                                    
                                    ∀
                                    j
                                    ,
                                    
                                       j
                                       ′
                                    
                                    ∈
                                    N
                                    ,
                                    s.t.
                                    
                                    j
                                    ≠
                                    
                                       j
                                       ′
                                    
                                    ,
                                    ∀
                                    j
                                    ∈
                                    M
                                 
                              
                           
                        
                     

The objective function (1) minimizes the weighted sum of turnaround times of the incoming container vessels. Constraints (2) ensure that each container vessel is assigned to a single berth. Constraints (3) guarantee that the processing time of each container vessel starts after its already arrived time at the terminal. Constraints (4) state that if vessels j and j′ are both assigned to berth i and vessel j is processed before vessel j′ (i.e., 
                           
                              
                                 I
                                 
                                    i
                                    j
                                    
                                       j
                                       ′
                                    
                                 
                              
                              =
                              1
                           
                        ), then, the starting time of vessel j′ cannot be earlier than 
                           
                              
                                 s
                                 j
                              
                              +
                              
                                 p
                                 j
                              
                           
                        . Constraints (5) and (6) ensure that one of 
                           
                              I
                              
                                 i
                                 j
                                 
                                    j
                                    ′
                                 
                              
                           
                         and 
                           
                              I
                              
                                 i
                                 
                                    j
                                    ′
                                 
                                 j
                              
                           
                         is equal to 1 if vessels j and j′ are both assigned to berth i. They also ensure that 
                           
                              
                                 I
                                 
                                    i
                                    j
                                    
                                       j
                                       ′
                                    
                                 
                              
                              =
                              
                                 I
                                 
                                    i
                                    
                                       j
                                       ′
                                    
                                    j
                                 
                              
                              =
                              0
                           
                         if one of vessels j and j′ is not assigned to berth i. Constraints (7) do not allow vessel j to be assigned to berths 
                           
                              1
                              ,
                              2
                              ,
                              ⋯
                              ,
                              
                                 H
                                 j
                              
                              −
                              1
                           
                        . Constraints (8) do not allow vessel j to be assigned to berths 
                           
                              1
                              ,
                              2
                              ,
                              ⋯
                              ,
                              
                                 L
                                 j
                              
                              −
                              1
                           
                         during period [0, T]. Finally, constraints (9) and (10) are the integrability constraints for the different kinds of variables.

According to Xu et al. (2012), the M-BAPTL is limited to only two single periods, i.e., one low-water and high-water period. However, when the departure time of a container vessel exceeds the two-period planning horizon, the M-BAPTL reports infeasible solutions in some cases, since it extends the second period (either low or high tide period) to infinity. For example, considering the LW-HW scenario, if a vessel is appropriately berthed during the second period (high-water) and its departure exceeds the end of the second period. Then, according to M-BAPTL, the solution would still be feasible, even though the draft of the vessel is greater than the berth water depth due to the change of tide (which returned to low-water). An illustrative example of this can be consulted in Section 5.1.1, where the optimal solution provided by M-BAPTL for a problem instance is depicted. Moreover, in some cases, although an appropriate optimal solution can be obtained during the two-period time horizon, M-BAPTL can provide an infeasible optimal solution if it presents a better objective value. That is the case in which a vessel stay goes beyond the two-period time horizon and the berth where it is allocated turns to be infeasible, and the objective value of that solution presents a better objective function value than a feasible solution within the two-period horizon. Finally, it should be noted that in other cases, the solution may remain feasible if the vessel draft is lower than the berth water depth at low tide. In the following, we provide some ways to overcome this issue.

                           
                              1.
                              
                                 Two-period limiting constraints: This set of constraints is aimed at restricting the planning horizon to only two periods in order to enable M-BAPTL to solve to optimality or prove that no solution exists within that horizon. Moreover, these constraints are useful for discarding some cases where, as previously commented, besides an appropriate optimal solution can be obtained during the two-period time horizon, the M-BAPTL provides an infeasible optimal solution since it reports a better objective value than the feasible solution within the two periods. In this regard, the problem instances presented by Xu et al. (2012) are not appropriate since the majority of them require a longer time horizon. This can be easily deduced from the instance data of one of their instances reported in Section 5.1.1, where the sum of the available time of the berths equals to 72 for the two-period time horizon is lower than the sum of service times of the vessels without even taking into account their arrival times which is equal to 77.

Constraints (11) state that each vessel j ∈ N has to be processed before the end of the two-period planning horizon, T:

                                    
                                       (11)
                                       
                                          
                                             
                                                s
                                                j
                                             
                                             +
                                             
                                                p
                                                j
                                             
                                             ≤
                                             2
                                             ·
                                             T
                                             
                                             ∀
                                             j
                                             ∈
                                             N
                                          
                                       
                                    
                                 By adding these constraints to the M-BAPTL formulation, it will be able to ensure feasible solutions or prove that no solution exists for those instances where the required planning horizon is longer than two periods. In the remainder of this paper, the mathematical formulation including these constraints is referred to as M*-BAPTL.


                                 Constraints for providing suboptimal solutions: The constraints proposed in the previous point only enable M-BAPTL to provide feasible solutions or prove that no solution exists for the two-period planning horizon. However, for practical matters, in those cases where no solution can be provided by M-BAPTL due to the planning horizon (i.e., a large number of vessels to be allocated beyond two periods), a feasible schedule despite of the number of periods could be required in practice. Hence, additional constraints aimed at allowing M-BAPTL to provide feasible suboptimal solutions regardless of the number of periods are required. With this goal in mind, we propose new constraints that allow M-BAPTL to provide suboptimal solutions in those scenarios where M*-BAPTL will not provide any solution. To do that, the constraints from the formulation of M-BAPTL (7) and (8) should be removed, and the following constraints (12) should be included:

                                    
                                       (12)
                                       
                                          
                                             
                                                x
                                                
                                                   i
                                                   j
                                                
                                             
                                             =
                                             0
                                             ,
                                             
                                             ∀
                                             j
                                             ∈
                                             N
                                             ,
                                             
                                                (
                                                i
                                                =
                                                1
                                                ,
                                                2
                                                ,
                                                …
                                                ,
                                                max
                                                
                                                   (
                                                   
                                                      L
                                                      j
                                                   
                                                   ,
                                                   
                                                      H
                                                      j
                                                   
                                                   )
                                                
                                                −
                                                1
                                                )
                                             
                                          
                                       
                                    
                                 
                              

Constraints (12) state that each vessel j ∈ N can be berthed at one of those berths that allows a safety service regardless of the situation of the tide.

In this work, we propose an alternative mathematical formulation for the BAPTL termed GM-BAPTL and based upon the Generalized Set-Partitioning Problem (GSPP). Through this reformulation the previous weaknesses of M-BAPTL are addressed, allowing to obtain a feasible solution in all cases by appropriately considering the change of tides. In the related literature, several optimization problems such as Aircrew Scheduling Problem, Network Design Problem, Vehicle Routing Problem, Berth Allocation Problem, etc., have been already formulated as a Set Partitioning Problem.

GM-BAPTL is described as follows. There is a set of columns denoted as Ω that composes the GSPP matrix. Each column represents a feasible berthing assignment of a single container vessel in accordance with the constraints established by the problem (see Section 3.1). This matrix is composed of two sub-matrices, denoted as A and B, both containing |Ω| columns. Matrix 
                        
                           A
                           =
                           (
                           
                              A
                              
                                 i
                                 ω
                              
                           
                           )
                        
                      contains a row for each vessel, and 
                        
                           
                              A
                              
                                 i
                                 ω
                              
                           
                           =
                           1
                           ,
                        
                      if and only if column ω represents a feasible assignment of vessel i ∈ N. Therefore, the time-dependent constraints and the vessel drafts are then considered. Each column of A contains exactly one non-zero element. Matrix 
                        
                           B
                           =
                           (
                           
                              B
                              
                                 p
                                 ω
                              
                           
                           )
                        
                      contains a row per (berth, time) position. The rows of B are indexed by the elements belonging to set P by means of time steps of the problem time horizon. Since in BAPTL the planning horizon is not directly specified in the parameters of the problem, it can be calculated by means of a mathematical method or by considering the worst possible case. That is,

                        
                           (13)
                           
                              
                                 
                                    |
                                    P
                                    |
                                 
                                 =
                                 
                                    (
                                    
                                       (
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             N
                                          
                                       
                                       
                                          p
                                          i
                                       
                                       )
                                    
                                    +
                                    max
                                    
                                       
                                          (
                                          
                                             a
                                             i
                                          
                                          )
                                       
                                       
                                          i
                                          ∈
                                          N
                                       
                                    
                                    ·
                                    λ
                                    )
                                 
                                 ·
                                 m
                                 ,
                              
                           
                        
                     where λ is the number of tide indexes, i.e.,
                     
                        
                           λ
                           =
                           2
                        
                      since we have two indexes, one for low-tide (L) and one for high-tide (H). The entry Bpω
                      is equal to 1, if and only if, a position p ∈ P is contained in the assignment that column ω represents and the related container vessel is able to berth in the specific time condition. As can be checked |P| depends on the number of vessels, number of tide indexes as well as arrival and processing times. The cost cω
                      of any column ω ∈ Ω is the service time of the respective position assignment and it is multiplied by the priority factor wj
                     . A binary decision variable xω
                      is equal to 1 if column ω is used in the solution, and 0 otherwise. Therefore, GM-BAPTL is stated as follows:

                        
                           (14)
                           
                              
                                 min
                                 
                                    ∑
                                    
                                       w
                                       ∈
                                       Ω
                                    
                                 
                                 
                                    c
                                    w
                                 
                                 
                                    x
                                    w
                                 
                              
                           
                        
                     subject to

                        
                           (15)
                           
                              
                                 
                                    ∑
                                    
                                       w
                                       ∈
                                       Ω
                                    
                                 
                                 
                                    A
                                    
                                       i
                                       w
                                    
                                 
                                 
                                    x
                                    w
                                 
                                 =
                                 1
                                 ,
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 N
                              
                           
                        
                     
                     
                        
                           (16)
                           
                              
                                 
                                    ∑
                                    
                                       w
                                       ∈
                                       Ω
                                    
                                 
                                 
                                    B
                                    
                                       p
                                       w
                                    
                                 
                                 
                                    x
                                    w
                                 
                                 ≤
                                 1
                                 ,
                                 
                                 ∀
                                 
                                 p
                                 ∈
                                 P
                              
                           
                        
                     
                     
                        
                           (17)
                           
                              
                                 
                                    x
                                    w
                                 
                                 ∈
                                 
                                    {
                                    0
                                    ,
                                    1
                                    }
                                 
                                 ,
                                 
                                 ∀
                                 
                                 w
                                 ∈
                                 Ω
                              
                           
                        
                     
                  

The objective function (14) minimizes the service time of the container vessels. The set of constraints (15) ensures that all the vessels are served. Finally, the constraints (16) guarantee that at a time interval, in a berth, only one vessel can be served. Constraints (17) are standard binary restrictions on the decision variables.


                     Table 1
                      (a) illustrates an example of GM-BAPTL matrix for a problem instance composed of 
                        
                           n
                           =
                           3
                        
                      container vessels, 
                        
                           m
                           =
                           2
                        
                      berths, and a prefixed time horizon of 4 time steps. Times 1 and 2 correspond to the low tide, whereas times 3 and 4 to the high tide. In order to ease the understanding of this example, it has been included a column that delimits the sub-matrices A and B explained above. Table 1(b) summarizes the arrival time, aj
                     , processing time, pj
                     , and draft of each container vessel. Regarding the time point T when the tide changes, in this example it is set to 2. Table 1(c) indicates the possible berths for each vessel depending on the state of the tide. Additionally, Table 1(d) indicates the water depth of the berths during low-tide (wdL
                     ) and high-tide (wdH
                     ). As can be seen, 
                        
                           |
                           Ω
                           |
                           =
                           13
                        
                     ; that is, 13 feasible single assignments are included when filling the matrix.

Since container vessel 1 can be assigned to any berth (
                        
                           
                              L
                              1
                           
                           =
                           1
                        
                      and 
                        
                           
                              H
                              1
                           
                           =
                           1
                        
                     ) regardless of the state of the tide, all the possible schedules are included for the planning horizon (columns 1–6). The tidal indexes of container vessel 2 (L
                     2 and H
                     2) indicate that at low tide this vessel can only be allocated to berth 2, while at high tide vessel 2 can berth at berths 1 or 2 (columns 7–10). Concerning vessel 3, it is unable to be berthed at any time in berth 1 (
                        
                           
                              L
                              3
                           
                           =
                           
                              H
                              3
                           
                           =
                           2
                        
                     ). Hence, all its possible assignments are located at berth 2 (columns 11–13).

As discussed in Section 3.2, the mathematical model proposed by Xu et al. (2012) is limited to a two-period planning horizon. Nevertheless, GM-BAPTL allows to consider a planning horizon equal to or larger than two periods. This issue has to be taken into account only when creating the sub-matrices A and B.

In this regard, we propose the following statements to be considered when filling the GSPP matrix. Through these statements, selecting feasible berths according to the tidal indexes Lj
                      and Hj
                      when creating the matrices A and B is ensured.

                        
                           •
                           If T > mod(sj
                              , 2T) ≥ 0 and 
                                 
                                    
                                       p
                                       j
                                    
                                    ≤
                                    
                                       (
                                       T
                                       −
                                       mod
                                       
                                          (
                                          
                                             s
                                             j
                                          
                                          ,
                                          2
                                          T
                                          )
                                       
                                       )
                                    
                                 
                               for a vessel j ∈ N, then the index corresponding to [0, T] is considered.

If T > mod(sj
                              , 2T) ≥ 0 and 
                                 
                                    
                                       p
                                       j
                                    
                                    >
                                    
                                       (
                                       T
                                       −
                                       mod
                                       
                                          (
                                          
                                             s
                                             j
                                          
                                          ,
                                          2
                                          T
                                          )
                                       
                                       )
                                    
                                 
                               for a vessel j ∈ N, then the index considered is the most restrictive one, that will be the one corresponding to low-water period.

If 2T > mod(sj
                              , 2T) ≥ T and 
                                 
                                    
                                       p
                                       j
                                    
                                    ≤
                                    
                                       (
                                       2
                                       T
                                       −
                                       mod
                                       
                                          (
                                          
                                             s
                                             j
                                          
                                          ,
                                          2
                                          T
                                          )
                                       
                                       )
                                    
                                 
                               for a vessel j ∈ N, then the index corresponding to [T, 2T] is considered.

If 2T > mod(sj
                              , 2T) ≥ T and 
                                 
                                    
                                       p
                                       j
                                    
                                    >
                                    
                                       (
                                       2
                                       T
                                       −
                                       mod
                                       
                                          (
                                          
                                             s
                                             j
                                          
                                          ,
                                          2
                                          T
                                          )
                                       
                                       )
                                    
                                 
                               for a vessel j ∈ N, then the index considered is the most restrictive one, that will be the one corresponding to low-water period.

As can be checked, with these statements when filling the GSPP matrix allows to solve the BAP-TL also for more than two-periods. It should be noted that in the case of M*-BAPTL, it is restricted to two-period if the user wants to solve to optimality using the model proposed by Xu et al. (2012) or solve to a sub-optimal solution (not restricted to two periods) using the model (Xu et al., 2012) with the additional constraints proposed in point (2) of Section 3.2.

Furthermore, these statements together with the calculation of P are used when determining the GSPP matrix. Its dimensions depend on 
                        
                           |
                           P
                           |
                           +
                           n
                        
                      and the number of columns, |Ω|. In this regard, P is given by Eq. (13) and it depends on the number of vessels, the number of berths and processing times. However, the number of columns is determined by all the possible assignments of each vessel. Therefore, in order to obtain the size of the problem correctly, the number of columns has to be determined, thus, Algorithm 1
                      is proposed. Through it, the number of columns |Ω|, termed as n
                     Col, is determined. This value is obtained considering all the possible allocations of each vessel j ∈ N at each berth i ∈ M starting from their arrival time 
                        
                           t
                           =
                           
                              a
                              j
                           
                        
                      and covering the complete time horizon |P|.

In the original formulation proposed by Xu et al. (2012), berth and container vessel time windows constraints are not considered. However, as pointed out by Yang, Zhang, and Lam (2013), Ting et al. (2014), and Moorthy and Teo (2006), in practical applications the container vessels and berths may have time windows. These time windows may be due to contractual agreements between the port and shipping companies. For instance, maximum possible time that a container vessel can stay at the terminal without prejudicing its performance, or other contractual conditions with additional container terminals. Furthermore, regarding the berths, they may have time windows for establishing their availability, which depends on the terminal planning. In this regard, numerous container terminals are closed for cargo handling during nights or weekends (Christiansen et al., 2007). This feature becomes very significant when cargo handling time is longer than one working day or it is scheduled at the end of the week. This could mean that the vessel would have to stay idle much of the time in port. Therefore, the container vessel service time will depend not only on their arrival and handling times, but also on the schedule of the berths. Consequently, due to the importance and influence of the berths and vessels time windows in the management of the terminal, this paper proposes additional constraints for GM-BAPTL. This new problem is referred to as Berth Allocation Problem under Time-Dependent Limitation with Time Windows (BAPTL-TW). Moreover, since the BAPTL-TW lies within the operational level, the time window constraints are considered within the complete time horizon.

The BAPTL-TW includes the following notations as problem data for including the time windows:

                           
                              dj
                              
                           
                           
                              Maximum departure time of vessel j
                              

Start of berth i availability

End of the berth i availability

As stated above, the time windows in BAPTL-TW are only taken into account when creating the sub-matrices A and B. Hence, when generating the Ω columns the following constraints are taken into account:

                           
                              (18)
                              
                                 
                                    
                                       s
                                       j
                                    
                                    +
                                    
                                       p
                                       j
                                    
                                    ≤
                                    
                                       d
                                       j
                                    
                                    
                                    ∀
                                    j
                                    ∈
                                    N
                                 
                              
                           
                        
                        
                           
                              (19)
                              
                                 
                                    
                                       s
                                       j
                                    
                                    +
                                    
                                       p
                                       j
                                    
                                    ≤
                                    b
                                    _
                                    
                                       d
                                       i
                                    
                                    
                                    ∀
                                    j
                                    ∈
                                    N
                                    ,
                                    ∀
                                    i
                                    ∈
                                    M
                                 
                              
                           
                        
                        
                           
                              (20)
                              
                                 
                                    
                                       (
                                       
                                          s
                                          j
                                       
                                       −
                                       b
                                       _
                                       
                                          a
                                          i
                                       
                                       )
                                    
                                    ·
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                    
                                    ≥
                                    0
                                    
                                    ∀
                                    j
                                    ∈
                                    N
                                    ,
                                    ∀
                                    i
                                    ∈
                                    M
                                 
                              
                           
                        
                     

Constraints (18) establish the maximum possible departure time for the vessels, whereas the berths time windows are defined by constraints (19) and (20). Note that constraints (20) are not linear, nevertheless, these constraints are only considered when filling the A and B matrices. Finally, as can be checked, the time windows considered are hard in the sense that only feasible columns satisfying these constraints are generated. Therefore, in accordance with constraints (15) all the vessels have to be served within their time windows.

The GSPP matrix size to properly provide feasible solutions will depend on 
                           
                              |
                              P
                              +
                              n
                              |
                           
                         and the number of columns, |Ω|. In this regard, for determining it, Algorithm 1 can be used by changing line 4 to 
                           
                              max
                              (
                              
                                 a
                                 j
                              
                              ,
                              b
                              _
                              
                                 a
                                 i
                              
                              )
                           
                         to indicate the starting point of all the allocations for each vessel j ∈ N.


                        Table 2
                         illustrates an example of the BAPTL-TW for a problem instance composed of 
                           
                              n
                              =
                              3
                           
                         container vessels, 
                           
                              m
                              =
                              2
                           
                         berths, and a time horizon of 4 time steps. Table 2(b) reports the processing time pj
                        , arrival time aj
                        , maximum departure dj
                        , and draft of the container vessels. Table 2(c) shows the possible berths where each container vessel can berth depending on the state of the tide. Table 2(d) indicates the water depth of the berths during low-tide (wdL
                        ) and high-tide (wdH
                        ), and the time window of each berth (
                           
                              b
                              _
                              
                                 a
                                 i
                              
                              ,
                           
                        
                        
                           
                              b
                              _
                              
                                 d
                                 i
                              
                           
                        ). Regarding the time point in which the tide changes, we set 
                           
                              T
                              =
                              2
                           
                        . In this example, the total number of columns that represent all the single assignments of the vessels is 
                           
                              |
                              Ω
                              |
                              =
                              7
                              ,
                           
                         which is shorter than the total number of columns generated for the same example without time windows depicted in Section 4. This is due to the constraints added caused by the time windows. Concerning the allocation of the container vessels, vessel 1 can be assigned regardless the state of the tide (
                           
                              
                                 L
                                 1
                              
                              =
                              
                                 H
                                 1
                              
                              =
                              1
                           
                        ). Hence, by considering its time window and the availability of the berths, the columns related to the feasible assignments of vessel 1 are defined in columns 1–3. Container vessels 2 and 3 cannot be berthed in berth 1 during low tide (
                           
                              
                                 L
                                 2
                              
                              =
                              2
                              ,
                           
                        
                        
                           
                              
                                 L
                                 3
                              
                              =
                              2
                           
                        ). Although vessel 2 can be assigned to berth 1 during the high-water period (
                           
                              
                                 H
                                 2
                              
                              =
                              1
                           
                        ), it cannot be allocated in that berth due to the time window of the berth (
                           
                              b
                              _
                              
                                 a
                                 1
                              
                              <
                              
                                 s
                                 2
                              
                              +
                              
                                 p
                                 2
                              
                           
                        ). Finally, container vessel 3 is only able to berth in berth 2 due to the water depth.

This section is devoted to present the computational experiments carried out with the goal of assessing the performance of the optimization model based on Set Partitioning proposed in this work for the BAPTL. Additionally, we also assess its performance when addressing the extension of the BAPTL with vessel and berth time windows introduced in Section 4.1. All the reported computational experiments presented hereunder have been conducted on a computer equipped with an Intel 3.16 GHz and 4 GB of RAM. Moreover, the optimization models have been implemented by using CPLEX 12.3
                        1
                     
                     
                        1
                        
                           http://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/.
                      with an execution time limit of 1 hour for each problem instance.

In order to assess the performance of GM-BAPTL, the set of instances proposed by Xu et al. (2012) and a new set of instances generated in the same way as described in that work are used. Moreover, to consider the time windows constraints related to vessels and berths, a new problem data set including the vessel and berth time window parameters (dj
                     , 
                        
                           b
                           _
                           
                              a
                              i
                           
                           ,
                        
                     
                     
                        
                           b
                           _
                           
                              d
                              i
                           
                        
                     ) as discussed in Section 4.1 have been added. These instances have been generated considering the ones from the work proposed by Cordeau et al. (2005).


                     Table 3
                      summarizes the characteristics of the problem instances tackled in this work. Column Set is used to differentiate the set of instances by means of size, column Effect shows the tidal influence regarding the impact on the container vessel assignment, and columns m and n indicate the number of berths and container vessels, respectively. Finally, the value of the time point where the tide level has reached a certain threshold is reported under the heading T. The distinction of the instances is as follows. The instance sets that range from 3 × 09 to 8 × 24, correspond to the instances from the literature. The instance sets that range from 6 × 30 to 8 × 50 correspond to the instances proposed in this work.
                        2
                     
                     
                        2
                        
                           https://sites.google.com/site/gciports/tidal-berth-allocation-problem.
                     
                  

As discussed in Section 3.2, the majority of the instances proposed by Xu et al. (2012) are not appropriate for evaluating the performance of their mathematical model, M-BAPTL, and their proposed algorithm since those approaches extend the second period to infinity and the solutions may be infeasible. Therefore in this subsection, we firstly show an example of a solution provided by M-BAPTL to point out this issue. Moreover, with the aim of evaluating and compare their model and the one proposed in this work, GM-BAPTL, we have carried out a comparison for those problem instances where at least one feasible solution can be obtained within a planning horizon of two periods. Table 5
                         shows a list with the instances from those provided by Xu et al. (2012) that allow a feasible solution within the two-period planning horizon. Note that for some sets there is no feasible solution within the two-period horizon.

In order to show the shortcoming of M-BAPTL, an optimal schedule reported by it for one of the instances used by Xu et al. (2012) is shown in Fig. 1
                           . This instance (instance 3 × 09—Big—instance 0) consists of 
                              
                                 n
                                 =
                                 9
                              
                            container vessels and 
                              
                                 m
                                 =
                                 3
                              
                            berths. Table 4
                            illustrates, for each vessel j ∈ N, its arrival time aj
                           , processing time pj
                           , weight priority vj
                           , and possible berths during the low-water and high-water periods Lj
                            and Hj
                           , respectively. In this solution, container vessel 9 is assigned to berth 1. However, from time step 24, as the tide level changes to low-water, the assignment of container vessel 9 to that berth is infeasible. The reason is found in that at this period the container vessel can only berth at berth 2 (L
                           9). This happens because constraints (8) are only limited to [0, T]. The same situation occurs for container vessel 8, since it is berthed at berth 0 during the high-water period. Unfortunately, this assignment turns infeasible from time step 24 due to the change of tide to low-water. In this period, this container vessel can only berth in berth 1. Clearly, the solution is infeasible in practice because both vessels are berthed during low-water period at infeasible berths.

Moreover, in Fig. 2
                           
                           
                            we report the optimal solution provided by GM-BAPTL for the same problem instance. It should be noted that M-BAPTL same model with additional constraints, M*-BAPTL, is able to prove that no feasible solution exists within the two-period planning horizon.

As mentioned previously, a comparison for those instances where M-BAPTL provides a feasible solution within the two-period time horizon. Table 5 shows a list of the instances from those provided by Xu et al. (2012) that allow a feasible solution within the two-period planning horizon. Note that for some sets there is no feasible solution within the two-period horizon.


                           Table 5 reports the computational results provided by M-BAPTL with the additional constraints proposed in Section 3.2 (M*-BAPTL) and GM-BAPTL constrained to two periods proposed in Section 4. The column Obj. shows the objective function values, the columns Gap (percent) show the relative error, and the columns t (seconds) show the required computational time measured in seconds. Moreover, the column t
                           imp under GM-BAPTL heading shows the time reduction with respect to the time required by M*-BAPTL. The computational results show that GM-BAPTL clearly requires less computational time than M*-BAPTL. On average, GM-BAPTL reduces over a 88 percent of the computational time required for providing the same quality results than M*-BAPTL. In this regard, the temporal performance exhibited by GM-BAPTL is not strongly affected by the dimensions of the instances. In the worst case, it requires 0.42 seconds. The model reported in the literature achieves the optimal solution in all the problem instances. However, although it reaches the optimal solution for two problem instances (7 × 21 Small—instance 0; 8 × 24 Big—instance 8), it cannot prove the optimality of them within the maximum computational time of 1 hour.

In Table 6 a comparison in terms of number of variables, constraints and nodes reported by CPLEX fo M*-BAPTL and GM-BAPTL is shown. The columns Variables and Constraints report those provided in the reduced MIP given by CPLEX. The column Node reports the number of nodes processed to reach the optimal solution. As can be checked, GM-BAPTL requires far less nodes than M*-BAPTL, in this regard, in the majority of the cases GM-BAPTL does not require to process any node to provide the optimal solution. The problem size in terms of variables and constraints is smaller in the GM-BATL reformulation than in M*-BAPTL in all cases. Moreover, in Fig. 3 we report the evolution of the relative error (Gap (precent)) along the cumulative iterations reported by CPLEX for the largest-sized instances (6 × 18 Small—instance 6 and 7 × 21 Small—instance 4) where both models solve to optimality. The rationale of using the CPLEX cumulative iterations provided by CPLEX instead of number of nodes is based on the fact that GM-BAPTL does not require to process nodes for providing the optimal solution in the majority of the cases. As can be checked in the plot, GM-BATL requires less iterations and directly starts from a gap of 0 percent while the stepwise behavior exhibited by M*-BAPTL starts from a gap of about 17 percent and 14 percent, respectively. Also, it should be highlighted that it requires more iterations. Hence, at the light of these results, we can state that GM-BAPTL outperforms M*-BAPTL for tackling the problem instances proposed by Xu et al. (2012), and can be considered as solid alternative when either tackling new scenarios or using embedding the model in more complex solution approaches.


                           Table 7
                            presents a comparison between M-BAPTL (Xu et al., 2012) and GM-BAPTL. The literature problem instances used are those for which Xu et al. (2012) indicate that M-BAPTL provides the optimal solutions. The rationale behind this is to make us a rough idea of the benefit of considering the regular changes of tides. The benefit of using GM-BAPTL instead of M-BAPTL is given by

                              
                                 (21)
                                 
                                    
                                       ρ
                                       =
                                       
                                          
                                             Avg.
                                             
                                             
                                                Obj
                                                GM-BAPTL
                                             
                                             −
                                             Avg.
                                             
                                             
                                                Obj
                                                M-BAPTL
                                             
                                          
                                          
                                             Avg.
                                             
                                             
                                                Obj
                                                M-BAPTL
                                             
                                          
                                       
                                       ×
                                       100
                                       
                                       percent
                                       ,
                                    
                                 
                              
                           where Avg. ObjM-BAPTL is the average objective function value provided by M-BAPTL and Avg.  ObjGM-BAPTL is the average objective function value provided by GM-BAPTL. Eq. (21) is used for measuring the benefit of GM-BAPTL in comparison with M-BAPTL.

The results reported in Table 7 indicate that GM-BAPTL requires less computational time and provides the optimal solution in all cases. In addition to the fact that many optimal solutions provided by M-BAPTL are infeasible, it requires larger computational times. Concerning the benefit of using GM-BAPTL instead of M-BAPTL, the parameter ρ may indicate a maximum benefit of 4.70 percent for the largest problem instance set. This points out, on the one hand, the advantage of properly considering the changes of tides for the problem instances used. On the other hand, it highlights that GM-BAPTL is a suitable formulation for being used when addressing the berth planning under Time-Dependent Limitations.

As discussed above, the instances proposed by Xu et al. (2012) require a time horizon longer than two periods. Therefore, this subsection is devoted to assess the performance of GM-BAPTL when applied to those instances as well as to assess its performance over a new set of instances that considers more realistic sizes and longer planning horizons.


                        Tables 8
                         and 9
                         show the computational results for the instances provided by Xu et al. (2012) as well as for the new set of problem instances proposed in this work. The average objective function value, Avg. Obj, and average computational time, Avg. t(seconds), are reported. As can be seen, GM-BAPTL requires 133.10 seconds on average to solve the largest problem instances. Moreover, the results reveal that when the number of container vessels increases, GM-BAPTL requires more computational time for solving them.

This subsection is aimed at evaluating the results of the Berth Allocation Problem under Time-Dependent Limitations with Time Windows constraints (BAPTL-TW) proposed in this work. With this purpose, vessels and berth time windows are added to the problem data provided by Xu et al. (2012) and the instances of the benchmark suite used in Section 5.2.


                        Tables 10
                         and 11 reflect the computational results for the instances reported in the literature and in this work with time windows, respectively. Columns Avg.  Obj, Avg.  Gap (percent) and Avg. t (seconds) show the average of the objective values, relative error and required time measured in seconds, respectively.

The results reported in Tables 10 and 11 show that the optimization model for the BAPTL-TW exhibits a suitable performance. In the largest problem instance, the maximum computational time required is 7.02 seconds on average. The computational results also indicate that the temporal behavior is not strongly influenced by the time windows and multiple period assumption. In this regard, it has to be noticed that the computational time required is notably lower than the problem instances without time windows. This is due to the reduction given by the time windows, which make the instances easier to solve.

In this paper, we propose a mathematical formulation for the Berth Allocation Problem under Time-Dependent Limitations (BAPTL) based upon the Generalized Set Partitioning Problem, referred to as GM-BAPTL. This mathematical formulation considers a multi-period planning horizon. This allows to tackle problem instances and scenarios where the planning horizon may be equal to or larger than two periods. Moreover, we have jointly tackled this problem with some real-world issues at maritime container terminals, such as container vessel and berth time windows. This constitutes the Berth Allocation Problem under Time-Dependent Limitation with Time-windows constraints (BAPTL-TW). Finally, we propose a set of additional constraints for enforcing the two-period mathematical formulation reported in the literature (M-BAPTL) proposed by Xu et al. (2012). This set of constraints ensures the feasibility of the solutions reported by M-BAPTL within the two-period planning horizon. In other case, that mathematical formulation may extend the second period to infinity, which can cause non-practical schedules.

From the computational experiments that have been carried out, it is possible to indicate that GM-BAPTL improves the runtime when compared with M-BAPTL enforced with the additional constraints. In this regard, one of the advantages exhibited by GM-BAPTL is its computational efficiency, which is not impaired when considering the multi-period planning horizon that takes into account the regular change of tides beyond a planning horizon larger than two periods. Regarding the BAPTL-TW, the results indicate that this mathematical formulation presents a satisfactory behavior for all instance sizes within small computational times. It is remarkable that the computational effort required for solving large-size instances is, on average, less than 8 seconds. This characteristic makes the BAPTL-TW appropriate for being applied to heavily congested container terminal scenarios, in which the terminal managers have to face several time windows restrictions.

The aforementioned facts justify the use of both optimization models as support tools for the current practice in maritime container terminals since they provide the optimal scheduling in a matter of seconds and as indicated in Imai et al. (2001b) the Berth Allocation Problem is solved frequently as berth space may be limited and thousands of containers within vessels must be handled daily. Furthermore, the time advantage exhibited by GM-BAPTL and BAPTL-TW also suggest that they are suitable for being included in integrated designs, where BAPTL may be embedded with other related seaside problems such as the Quay Crane Allocation Problem, Quay Crane Scheduling Problem, etc. Moreover, in the spirit of dynamic and stochastic frameworks, the proposed models can be used as a way to obtain a baseline schedule, or for assessing ‘a posteriori’ the decisions taken in order to evaluate the suitability of the solution approaches used.

On the basis of the findings presented in this paper, the next stage of our research will be focused on the integration of BAPTL and BAPTL-TW with other related seaside problems arising in maritime container terminals, such as the Quay Crane Allocation Problem and the Quay Crane Scheduling Problem. Furthermore, another interesting topic for future works will be the analysis of different strategies and ways to overcome scenarios where the vessel time windows cannot be satisfied.

@&#ACKNOWLEDGMENTS@&#

This work has been partially funded by the European Regional Development Fund and the Spanish Ministry of Science and Technology (project TIN2012-32608). Eduardo Lalla-Ruiz and Christopher Expósito-Izquierdo would like to thank the Canary Government for the financial support they receive through their doctoral grants.

@&#REFERENCES@&#

