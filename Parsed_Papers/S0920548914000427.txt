@&#MAIN-TITLE@&#An address configuration protocol for 6LoWPAN wireless sensor networks based on PDAD

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The network architecture based on location information is proposed.


                        
                        
                           
                           Based on this architecture, the address initialization algorithm is proposed.


                        
                        
                           
                           Based on this architecture, the address maintenance algorithm is proposed.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

6LoWPAN

Wireless sensor network

Address configuration

Passive duplicate address detection

Location information

@&#ABSTRACT@&#


               
               
                  In a wireless sensor network (WSN), data collected by a sensor node need to be associated with location information in order to support real-world applications. Taking the WSN characteristics into account, this paper proposes an address configuration scheme based on location information and passive duplicate address detection (PDAD). In this scheme, the network architecture based on location information is presented, and based on this architecture the address initialization algorithm and address maintenance algorithm are proposed. The address initialization algorithm is performed once the network starts, and it is made up of the initialization address configuration sub-algorithm (IAC) and the initialization location PDAD sub-algorithm (ILPDAD). The address maintenance algorithm is performed after the initialization algorithm is complete, and it is composed of the maintenance address configuration sub-algorithm (MAC) and the maintenance location PDAD sub-algorithm (MLPDAD). During the address initialization process (address maintenance process), a new node first uses IAC (MAC) to obtain an address and then performs ILPDAD (MLPDAD) to ensure the address uniqueness. Since beacon frames are employed to achieve IAC (MAC) and ILPDAD (MLPDAD), the address configuration cost and delay are reduced. Moreover, IAC (MAC) is based on location information and ILPDAD (MLPDAD) is based on PDAD, so there are always the sufficient address resources for address configuration without address reclamation. In this way, the extra cost and delay caused by both the address reclamation and the address configuration failure are avoided. This paper evaluates the performance of this scheme, and the data results show that this scheme effectively reduces the address configuration delay and cost.
               
            

@&#INTRODUCTION@&#

Recently, a wireless sensor network (WSN) has attracted much attention due to the proliferation of mobile computing devices. With the dramatic growth of the WSN applications as well as the continuous emergence of the new WSN services, it is urgent to demand a communication mechanism with high scalability and good stability to support the point-to-point communication between WSN and the Internet. WSN is made up of a large number of nodes which can move freely while IPv6 (Internet protocol version 6) has the abundant addresses and supports the mobility very well. Therefore, IPv6 over low-power Wireless Personal Area Network (6LoWPAN) WSN is proposed. In 6LoWPAN WSN, each sensor node has a globally unique IPv6 address, supports the IPv6 protocol, and is able to use the IPv6 protocol to achieve the point-to-point communication with nodes in IPv6 networks [1].

Obviously, in 6LoWPAN WSN a node must be configured with a globally unique IPv6 address before it can perform the proper communications [2,3]. In general, data collected by a sensor node need to be associated with its location information in order to support real-world applications. Moreover, if a sensor node's address implies its location information, then it becomes easy to manage 6LoWPAN WSN and perform the efficient communication.

Taking into account the WSN characteristics, such as limited resources, this paper proposes an address configuration scheme based on location information and passive duplicate address detection (PDAD), and it has the following contributions:
                        
                           1)
                           The network architecture based on location information is proposed, and based on this architecture the IPv6 address structure is presented.

Based on this architecture, the address initialization algorithm is proposed. The address initialization algorithm is performed once the network starts, and it is made up of the initialization address configuration sub-algorithm (IAC) and the initialization location PDAD sub-algorithm (ILPDAD). During the address initialization process, a new node first uses IAC to obtain an address and then performs ILPDAD to ensure the address uniqueness. Since beacon frames are employed to achieve IAC and ILPDAD, the address configuration cost and delay are reduced.

Based on this architecture, the address maintenance algorithm is proposed, and it is performed after the initialization algorithm is complete. The maintenance algorithm includes the maintenance address configuration sub-algorithm (MAC) and the maintenance location PDAD sub-algorithm (MLPDAD). During the address maintenance process, a new node first uses MAC to obtain an address and then performs MLPDAD to ensure the address uniqueness. Since beacon frames are employed to achieve both MAC and MLPDAD, the address configuration cost and delay are reduced.

IAC or MAC is based on location information and ILPDAD or MLPDAD is based on PDAD, so there are always the sufficient address resources for address configuration without address reclamation. As a result, the extra cost and delay caused by the address reclamation and the address configuration failure are avoided.

This paper is organized as follows. In Section 2, the related works on the address configuration are discussed. In Section 3 the network architecture based on location information is presented and the IPv6 address structure is proposed. Based on this architecture and address structure, the address initialization algorithm and the address maintenance algorithm are presented in Sections 4 and 5, respectively. The performance of this scheme is evaluated in Sections 6 and 7, and this paper concludes with a summary in Section 8.

@&#RELATED WORKS@&#

Authors [2,3] survey the current state-of-the-art on the connection of multi-hop networks to the Internet and present the related research achievements. They point out that due to the differences between the architecture of multi-hop networks and the architecture of the IPv6 networks the standard address configuration protocols [4,5] commonly used in the IPv6 network cannot be directly applicable in WSN. Therefore, researchers have proposed the address configuration schemes which can be classified into two categories: stateful schemes and stateless schemes [6].

In stateful schemes, servers maintain the state information on address allocation which is usually presented by an address assignment state table, so stateful schemes can ensure the uniqueness of an assigned address without DAD.

In [7], each node maintains an IP address pool and serves as an allocator. After a node joins the network, it requests an address from an allocator. If an allocator has a free address space, it allots half of its address pool to the node. The node configures itself with the first address of the assigned address block, and stores the remaining address block as its free address space. The costly network broadcasts are used to reclaim missing addresses, but it does not eliminate the address leakage.

In the tree-based dynamic address auto-configuration protocol (T-DAAP) [8], a network is organized into a tree and includes three kinds of nodes: normal nodes, leader nodes, and root nodes. A normal node acts as a relay. A leader node has a free address pool and is responsible for assigning an address for a new node. The sole root node in the network stores the information on all leader nodes, and is also responsible for address reclamation and network merging. In this way, a leader node can acquire the information on other leader nodes from the root node.

In [9], an IP address structure is made up of three parts: network ID, node ID and 16-bit port. The network is organized into a tree where an intermediate node is configured with two addresses and a leaf node is configured with one address. A new node acquires an address via joining a tree and the uniqueness of an assigned IP address is ensured.

In [10], the random ID and time stamp are used to identify a new node. If multiple nodes with the same ID and time stamp send an address request message to a proxy node simultaneously, then the proxy node is unable to distinguish between these nodes and properly perform the address configuration. In this scheme, a neighbor solicitation (NS) message and a neighbor advertisement (NA) message are used to perform the communication between a new node and a proxy node while a request (REQ) message and a response (REP) message are employed to achieve the communication between a proxy node and a gateway node. Therefore, a proxy node has to store the mapping among different kinds of messages, so the address configuration performance is potentially degraded.

In [6], in a combination of wired networks and wireless networks, dynamic host configuration protocol (DHCP) servers are deployed in the wired network to administer the dynamic assignment of unique IP addresses for both wired nodes and wireless nodes. A new node selects a neighbor node to act as a DHCP relay agent which forwards all DHCP messages to a known DHCP server. After the address configuration initialization is complete, a node regularly interacts with the DHCP server to renew its address. This algorithm suffers from a single point of service since all DHCP messages are forwarded to the known DHCP server.

In [11], a new node acquires an address from a proxy node with a free address space. The transmission of control messages used for address configuration is controlled within two-hop scope, so the address configuration delay is reduced to some extent. If a proxy node's address space runs out, it broadcasts an address recovery message in the network. The proxy node receiving this message also broadcasts an address recovery message in the network. If the address of a node receiving an address recovery message is within the recovery address space, then it returns a response message to show its normal state. During one address recovery process, almost every proxy node broadcasts a message so a lot of network resources are consumed.

In stateless schemes, each node configures itself with an address, and then performs DAD to verify the address uniqueness. Usually, the DAD schemes are categorized into two categories, namely active DAD and PDAD [12].

In active DAD schemes, whenever a node acquires a new address, the address uniqueness is always checked. In general, active DAD schemes use extra messages to ensure the address uniqueness.

In [13], a new node first selects an initiator which has the right to assign an address, and then requests an address from the initiator. The initiator assigns an address to the new node according to the address configuration information in the local network. After the new node receives the assigned address, it broadcasts this address in the network. If a node detects that its address is equal to the received address, then it returns a negative response to the new node. Otherwise, it returns an affirmative response. If no negative responses are returned, then the uniqueness of the assigned address is ensured. Obviously, DAD increases the address configuration cost and delay.

In [14], the cluster generation algorithm is proposed and the cluster-tree architecture is presented. In this scheme, DAD for a cluster member's address is performed within a cluster and the address configuration for cluster members in different clusters can be carried out in parallel, so the address configuration cost is reduced and the delay is shortened.

In [15], a node acquires location information by a global positioning system (GPS), and then uses the location information to construct an address. Finally, DAD for an address is performed by distributed DAD servers to ensure the address uniqueness. However, it is hard for a mobile node to work as a DAD server, and it is also unpractical to equip each node with GPS.

In [16], one WSN is divided into multiple clusters. This scheme adopts the division method of hash function to achieve the address configuration for cluster heads and cluster members and utilizes the linear probing to deal with the address collision. In this scheme, DAD for a cluster head is performed in the network and DAD for a cluster member is fulfilled within the cluster.

From the above discussion, it can be seen that the extra messages in active DAD schemes degrade the address configuration performance. Therefore, PDAD schemes are proposed to solve this problem. In PDAD schemes, instead of checking address uniqueness, hints of address conflicts (which can be derived by analyzing messages during normal communication processes) are utilized to resolve address conflicts. Since PDAD has lower cost than active DAD, it is more suitable for WSN with limited resources.

In [12], based on on-demand routing protocols three schemes are introduced: 1) PDAD-RREQ-Never-Sent (RNS); 2) PDAD-RREP-Without-RREQ (RwR); and 3) PDAD-2RREPs-on-RREQ (2RoR). In RNS and RwR, only one node among the nodes with the same address starts the route discovery process. If multiple nodes with the same address simultaneously perform the route discovery process, then RNS and RwR cannot properly work. Moreover, 2RoR relies on a strong assumption that a single destination node only replies once to a specific route request. In the case that a destination replies with a new route reply because it finds a better route, 2RoR may mislead the source in PDAD.

In order to solve the problems in [12], in [17] location information or neighbor address information is used to perform PDAD. Since the existing location algorithms [18,19] have some location errors, nodes within an error tolerance range may obtain the same location. In this situation, PDAD based on location information cannot properly work. In PDAD based on neighbor address information, neighbor nodes' link addresses are included in the message to perform DAD. However, this PDAD cannot properly work if multiple nodes have the same link address.

In order to solve the problems in [17], we propose a new PDAD algorithm to ensure the address uniqueness and improve the address configuration performance.

In this scheme, WSN is divided into two-dimension square grids [20,21], and the coordinate of each grid is identified by (x, y) where x and y are non-negative integers. A sensor node can calculate the coordinate (x, y) of its grid through its location coordinate (Lx, Ly) [18,19], as shown in formula (1) and (2) where l is the side length of a grid.

This scheme defines two kinds of nodes: new nodes and configured nodes. A new node is not configured with an IPv6 address, and a configured node is already configured with an IPv6 address, as shown in Fig. 1
                        .
                           
                              (1)
                              
                                 
                                    x
                                    =
                                    
                                       
                                          Lx
                                          l
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    y
                                    =
                                    
                                       
                                          Ly
                                          l
                                       
                                    
                                 
                              
                           
                        
                     

A 6LoWPAN WSN is connected to the IPv6 Internet through an access point which periodically broadcasts the network prefix of the 6LoWPAN WSN. In this way, a node in the 6LoWPAN WSN can acquire the network prefix to achieve the address configuration. In the initial state, the location coordinate of an access point is (0, 0).

At present, different location methods have been developed [18,19], so it is reasonable to assume that nodes in WSN can determine their locations by these location methods [22]. Nodes may employ various location methods to acquire location information, such as angle of arrival (AOA), time difference of arrival (TDOA) and received signal strength (RSS) [18,19]. Among them, AOA provides information on the angles between neighbor nodes, TDOA uses one-way propagation time or roundtrip propagation time to estimate the distances between neighbor nodes, and RSS utilizes the received signal strength to evaluate the distances between neighbor nodes [18,19]. In general, AOA provides complementary localization information for TOA and RSS. Typically, localization algorithms based on AOA and TDOA achieve better accuracy than localization algorithms based on AOA and RSS [19]. Therefore, in this scheme nodes adopt AOA and TDOA to acquire location information, as shown in Fig. 1(b) where the nodes X1 and X2 are neighbor nodes and X1's location coordinate is (x1, y1). Then, X2 uses AOA to acquire the angle α between itself and X1 and adopts TDOA to obtain the distance d between itself and X1. In this way, X2 can calculate its location coordinate (x2, y2) where x2=
                        x1+cos α
                        ·
                        d and y2=
                        y1+sin α
                        ·
                        d.

Taking the WSN characteristics into account, the hierarchical IPv6 address structure is proposed, as shown in Table 1
                        .

An IPv6 address consists of six parts. The first part is global routing prefix, and the global routing prefixes of all nodes in 6LoWPAN WSN are the same. The second part and the third part are grid-x and grid-y, respectively, which are the horizontal coordinate and vertical coordinate of the grid where a node is located. The fourth part and the fifth part are location-x and location-y, respectively, which are the horizontal coordinate and vertical coordinate of a node's location. The sixth part is the inner ID. Due to the inaccuracy of the existing location algorithms, in a small geographic area nodes may obtain the same location coordinate. As a result, these nodes have the same global routing prefix, grid-x, grid-y, location-x and location-y. In this situation, the inner ID is used to differentiate these nodes in order to ensure that the IPv6 addresses of these nodes are unique. A new node's inner ID is 0 and a configured node's inner ID is a positive integer. A node's link address is made up of location-x, location-y and inner ID.

In Table 1, 6LoWPAN WSN is made up of up to (2
                           i
                        
                        −1)2 grids and a grid includes up to 22j
                           +
                           k
                        
                        −2 nodes. In this scheme, i and j are determined by the network size, and k is decided by the node density. Taking the generality into account, i and j are set to 4, and k is set to 8.

The address initialization algorithm is performed once the network starts, and it is made up of two parts, namely the initialization address configuration sub-algorithm (IAC) and the initialization location PDAD sub-algorithm (ILPDAD). During the address initialization process, a new node first uses IAC to obtain an address and then performs ILPDAD to ensure the address uniqueness.

In 6LoWPAN WSN, after a node starts it begins to broadcast a beacon frame [23]. In this way, after a node receives a beacon frame from a neighbor node, it can learn that it has the link connection with the neighbor node. In the initial state, all these connected nodes construct a network. As WSN includes a large number of nodes [2], it is a reasonable assumption that in the initial state all active nodes can form a network. In some extreme situations, if the number of active nodes is small, then these nodes may become isolated nodes and cannot form a network. In this situation, these isolated nodes wait for more new nodes to start until it receives a beacon frame from a neighbor node. In this way, these isolated nodes can join a network and perform IAC to acquire an address.

The address configuration initialization is performed once 6LoWPAN WSN starts. Through the initialization process, all new nodes can obtain a globally unique IPv6 address. A new node first obtains its location coordinate (Lx, Ly) through the location algorithms and calculates its grid coordinate (x, y). Then, the new node uses the global routing prefix of the network where it is located, the grid coordinate and the location coordinate to form a temporary IPv6 address where the inner ID is 0. If the new node does not receive a beacon frame from another node with the same IPv6 address within the specified time, then it sets its inner ID to 1 and marks itself as a configured node, as shown in Fig. 2(a).

Due to the inaccuracy of the existing location algorithms, in a small geographic area nodes may obtain the same location coordinate. As a result, these nodes have the same IPv6 address, as shown in Fig. 2(a). Therefore, ILPDAD is proposed to resolve the address conflict.

The nodes with the same address are located in a relatively small geographic area, so it is a reasonable assumption that these nodes with the same address are neighbors and they can receive each another's beacon frames. If a new node receives multiple beacon frames from the neighbor new nodes with the same address, then it sorts both the received beacon frames and the beacon frame broadcast by itself according to the receiving/sending order. For example, it is assumed that N (N
                        ≤2
                           k
                        ) new nodes are neighbors and have the same address. After a new node receives the beacon frames from other N
                        −1 neighbors, it sorts N beacon frames including its beacon frame and the received N
                        −1 beacon frames according to the receiving/sending order. If a new node detects that the order number of its beacon frame is n (1≤
                        n
                        ≤
                        N), then it sets its inner ID to n. Then, the new node combines its inner ID with the network prefix, the grid coordinate and the location coordinate to form an address, as shown in Fig. 2(b). After a new node gets a globally unique IPv6 address, it marks itself as a configured node.

In the above process, N neighbor new nodes share a channel, so every node receives/sends these N beacon frames in the same order, that is, every node has the same receiving/sending order of these N beacon frames.

In Fig. 2(a), the new nodes D1, D2 and D3 arrive and acquire the same location coordinate, so they have the same temporary IPv6 address. In Fig. 2(b), after ILPDAD is performed, D1 acquires the inner ID 1, D1 gets the inner ID 2, and D3 obtains the inner ID 3. Therefore, D1, D2 and D3 are configured with a globally unique IPv6 address respectively. Fig. 2(c) shows the sequence diagram of a new node arrival case. First, the new nodes D1, D2 and D3 arrive and acquire their location coordinates. Since these three new nodes have the same location coordinates, they sort their beacon frames according to the receiving/sending order in order to acquire their inner IDs. From Fig. 2(c), it can be seen that the sequence of broadcasting a beacon frame is D1, D2 and D3, so D1 acquires the inner ID 1, D2 gets the inner ID 2, and D3 obtains the inner ID 3. In this way, D1, D2 and D3 acquire a globally unique IPv6 address.

The address maintenance algorithm is performed after the address initialization algorithm is complete. The address maintenance algorithm includes two parts, namely the maintenance address configuration sub-algorithm (MAC) and the maintenance location PDAD sub-algorithm (MLPDAD). During the address maintenance process, a new node first uses MAC to obtain an address and then performs MLPDAD to ensure the address uniqueness.

After the address initialization process is complete, a new node acquires an address through MAC. For example, when a configured node moves from the grid G1 to the grid G2, it marks itself as a new node and then gets a new address in G2 through MAC.

After a new node enters a new grid, it first obtains its location coordinate (Lx, Ly) through the location algorithms and calculates its grid coordinate (x, y). Then, the new node uses the global routing prefix of the network where it is located, the grid coordinates and the location coordinates to form a temporary IPv6 address where the inner ID is 0.

After a new node acquires a temporary address, it broadcasts a beacon frame whose payload is its location coordinate (Lx, Ly) and whose source address is its temporary link address. Then, the new node acquires a globally unique address according to the following process:
                           
                              1)
                              After a neighbor configured node receives the beacon frame whose payload is (Lx, Ly), it sets the next beacon frame's payload to (Lx, Ly). If the location-x and location-y of the neighbor configured node's address are equal to Lx and Ly, respectively, then it sends the new node a beacon frame whose payload is its inner ID in the unicast way.

Repeat step 1) until all configured nodes in the same grid receive a beacon frame whose payload is (Lx, Ly).

After the new node acquires the beacon frames from the configured nodes with the same location-x and location-y, it can get the occupied inner ID collection in the same grid. If the new node does not receive a beacon frame from the neighbor new nodes with the same temporary address, then it selects the smallest unoccupied inner ID (except 0) as its inner ID and marks itself as a configured node, as shown in Fig. 3(a). Otherwise, the new node obtains an IPv6 address through MLPDAD in Section 5.2.

If a new node receives N
                        −1 beacon frames from the neighbor new nodes with the same temporary address, then it indicates that there are N new nodes with the same IPv6 address. In this situation, the beacon frames sent by the configured nodes with the same location-x and location-y may reach any one of these N new nodes with the same temporary address. Therefore, after a new node receives the beacon frames from the configured nodes with the same location-x and location-y, it sets the next beacon frame's payload to the collection of the inner IDs in these received beacon frames. In this way, these N new nodes can get the occupied inner ID collection in the same grid, and they set the next beacon frame's payload to the occupied inner ID collection.

Thus, after a new node broadcasts a beacon frame and receives the beacon frames with the occupied inner ID collection from the other N
                        −1 neighbors, it sorts these N beacon frames according to the receiving/sending order. If the new node detects that the order number of its beacon frame is n (1≤
                        n
                        ≤N), then it marks the nth smallest unoccupied inner ID in the grid as its inner ID. Then, the new node combines its inner ID with the network prefix, the grid coordinate and the location coordinate to form an address, as shown in Fig. 3(b) and (c). After a new node gets a globally unique IPv6 address, it marks itself as a configured node.

In Fig. 3(a), the new nodes D1, D2 and D3 acquire an address through MAC. The new nodes E1, E2 and E3 have the same location coordinate, so they have the same temporary IPv6 address. In Fig. 3(c), the location-x and location-y of D1, D2 and D3 are equal to the location coordinate of E1, E2 and E3, so they send a beacon frame whose payload is its inner ID. In this way, E1, E2, and E3 can acquire the unoccupied inner ID collection in the grid. After MLPDAD is performed, E1 acquires the smallest unoccupied inner ID 4, E2 gets the second smallest unoccupied inner ID 5, and E3 obtains the third smallest unoccupied inner ID 6. In this way, E1, E2 and E3 are configured with a globally unique IPv6 address respectively, as shown in Fig. 3(b).

In this scheme, when a configured node moves from a grid to another grid, it marks itself as a new node, gets a new address in the new grid and abandons the address in the old grid.

Since this scheme uses ILPDAD and MLPDAD to achieve the uniqueness of an address, the addresses occupied by the nodes which fail or move out of the grid can be reused without address reclamation.

@&#PERFORMANCE EVALUATION@&#

We analyze the performance of the address configuration through IAC, ILPDAD, MAC and MLPDAD.

In this scheme, the address configuration process in each grid is independent, so we evaluate the address configuration performance in one grid. It is assumed that l is equal to m
                     ·
                     r where m is a positive integer and r is the transmission range of a sensor node.

We analyze the performance of ILPDAD and MLPDAD, and the performance parameters include the PDAD cost which is the additional cost except the original cost in a beacon frame, and the PDAD delay.
                           
                              •
                              ILPDAD

During ILPDAD, it is assumed that there are n new nodes with the same temporary address in one grid. According to Fig. 2, it can be seen that these n new nodes broadcast a beacon frame without additional cost, so the PDAD cost C
                                 
                                    Init-PDAD
                                  in ILPDAD is shown in formula (3). The PDAD delay T
                                 
                                    Init-PDAD
                                  is the delay of these n nodes broadcasting a beacon frame, as shown in formula (4) where tBeacon
                                  is the delay of a new node broadcasting a beacon frame.
                                    
                                       (3)
                                       
                                          
                                             
                                                C
                                                
                                                   Init
                                                   −
                                                   PDAD
                                                
                                             
                                             =
                                             0
                                          
                                       
                                    
                                 
                                 
                                    
                                       (4)
                                       
                                          
                                             
                                                T
                                                
                                                   Init
                                                   −
                                                   PDAD
                                                
                                             
                                             =
                                             n
                                             ⋅
                                             
                                                t
                                                Beacon
                                             
                                          
                                       
                                    
                                 
                              

MLPDAD

In MLPDAD, it is assumed that in one grid there are N configured nodes, n new nodes with the same temporary address and n′ configured nodes whose location-x and location-y are equal to n new nodes' one. According to Fig. 3, the PDAD cost C
                                 
                                    Main-PDAD
                                  in MLPDAD is shown in formula (5) where cLocation
                                  is the cost caused by a new node's location coordinate, cInner
                                  is the cost caused by a configured node's inner ID, and r′ is the radius of the location error area where new nodes have the same location coordinate. The PDAD delay T
                                 
                                    Main-PDAD
                                  is shown in formula (6).
                                    
                                       (5)
                                       
                                          
                                             
                                                
                                                   
                                                      C
                                                      
                                                         Main
                                                         −
                                                         PDAD
                                                      
                                                   
                                                   =
                                                   N
                                                   ⋅
                                                   
                                                      c
                                                      Location
                                                   
                                                   +
                                                   n
                                                   ′
                                                   ⋅
                                                   
                                                      c
                                                      Inner
                                                   
                                                   +
                                                   n
                                                   ⋅
                                                   n
                                                   ′
                                                   ⋅
                                                   
                                                      c
                                                      Inner
                                                   
                                                
                                             
                                             
                                                
                                                   where
                                                
                                             
                                             
                                                
                                                   N
                                                   =
                                                   u
                                                   ⋅
                                                   
                                                      
                                                         mr
                                                      
                                                      2
                                                   
                                                
                                             
                                             
                                                
                                                   n
                                                   ′
                                                   =
                                                   u
                                                   ⋅
                                                   
                                                      
                                                         
                                                            mr
                                                            ′
                                                         
                                                      
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       (6)
                                       
                                          
                                             
                                                T
                                                
                                                   Main
                                                   −
                                                   PDAD
                                                
                                             
                                             =
                                             
                                                2
                                             
                                             m
                                             ⋅
                                             
                                                t
                                                Beacon
                                             
                                             +
                                             
                                                2
                                             
                                             m
                                             ⋅
                                             
                                                t
                                                Beacon
                                             
                                             +
                                             n
                                             ⋅
                                             
                                                t
                                                Beacon
                                             
                                          
                                       
                                    
                                 
                              

We analyze the address configuration performance, and the performance parameters include the address configuration cost which is the additional cost except the original cost in a beacon frame, and the address configuration delay.

In this scheme, a new node acquires a globally unique address in the following four situations:
                           
                              •
                              In the first situation-S1, a new node uses IAC to acquire an address

During the address initialization process, if a new node's temporary address is different from the ones of all the new nodes in the same grid, then according to Fig. 2 the address configuration cost C
                                 
                                    Init-Addr
                                  is shown in formula (7) and the address configuration delay T
                                 
                                    Init-Addr
                                  is shown in formula (8) where N1 is the number of a new node's neighbor nodes.
                                    
                                       (7)
                                       
                                          
                                             
                                                C
                                                
                                                   Init
                                                   −
                                                   Addr
                                                
                                             
                                             =
                                             0
                                          
                                       
                                    
                                 
                                 
                                    
                                       (8)
                                       
                                          
                                             
                                                
                                                   
                                                      T
                                                      
                                                         Init
                                                         −
                                                         Addr
                                                      
                                                   
                                                   =
                                                   N
                                                   1
                                                   ⋅
                                                   
                                                      t
                                                      Beacon
                                                   
                                                
                                             
                                             
                                                
                                                   where
                                                
                                             
                                             
                                                
                                                   N
                                                   1
                                                   =
                                                   
                                                      
                                                         
                                                            
                                                               u
                                                               ⋅
                                                               
                                                                  
                                                                     π
                                                                     
                                                                        r
                                                                        2
                                                                     
                                                                  
                                                               
                                                               ;
                                                               m
                                                               >
                                                               1
                                                            
                                                         
                                                         
                                                            
                                                               u
                                                               ⋅
                                                               
                                                                  r
                                                                  2
                                                               
                                                               ;
                                                               m
                                                               =
                                                               1
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

In the second situation-S2, a new node uses IAC and ILPDAD to acquire an address

During the address initialization process, if a new node's temporary address is the same as its neighbor new node's temporary address in the same grid, then according to Fig. 2 the address configuration cost C
                                 
                                    Init-addr-PDAD
                                  is shown in formula (9) and the address configuration delay T
                                 
                                    Init-Addr-PDAD
                                  is shown in formula (10).
                                    
                                       (9)
                                       
                                          
                                             
                                                C
                                                
                                                   Init
                                                   −
                                                   Addr
                                                   −
                                                   PDAD
                                                
                                             
                                             =
                                             
                                                C
                                                
                                                   Init
                                                   −
                                                   Addr
                                                
                                             
                                             +
                                             
                                                C
                                                
                                                   Init
                                                   −
                                                   PDAD
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       (10)
                                       
                                          
                                             
                                                T
                                                
                                                   Init
                                                   −
                                                   Addr
                                                   −
                                                   PDAD
                                                
                                             
                                             =
                                             Max
                                             
                                                
                                                   T
                                                   
                                                      Init
                                                      −
                                                      Addr
                                                   
                                                
                                                
                                                   T
                                                   
                                                      Init
                                                      −
                                                      PDAD
                                                   
                                                
                                             
                                             =
                                             
                                                T
                                                
                                                   Init
                                                   −
                                                   Addr
                                                
                                             
                                          
                                       
                                    
                                 
                              

In the third situation-S3, a new node uses MAC to acquire an address

During the address maintenance process, if a new node's temporary address is different from the ones of all the new nodes in the same grid, then according to Fig. 3 the address configuration cost C
                                 
                                    Main-Addr
                                  is shown in formula (11) and the address configuration delay T
                                 
                                    Main-Addr
                                  is shown in formula (12).
                                    
                                       (11)
                                       
                                          
                                             
                                                C
                                                
                                                   Main
                                                   −
                                                   Addr
                                                
                                             
                                             =
                                             0
                                          
                                       
                                    
                                 
                                 
                                    
                                       (12)
                                       
                                          
                                             
                                                T
                                                
                                                   Main
                                                   −
                                                   Addr
                                                
                                             
                                             =
                                             
                                                2
                                             
                                             m
                                             ⋅
                                             
                                                t
                                                Beacon
                                             
                                             +
                                             
                                                2
                                             
                                             m
                                             ⋅
                                             
                                                t
                                                Beacon
                                             
                                          
                                       
                                    
                                 
                              

In the fourth situation-S4, a new node uses MAC and MLPDAD to acquire an address

During the address maintenance process, if a new node's temporary address is the same as its neighbor new node's temporary address in the same grid, then according to Fig. 3 the address configuration cost C
                                 
                                    Main-Addr-PDAD
                                  is shown in formula (13) and the address configuration delay T
                                 
                                    Main-Addr-PDAD
                                  is shown in formula (14).
                                    
                                       (13)
                                       
                                          
                                             
                                                C
                                                
                                                   Main
                                                   −
                                                   Addr
                                                   −
                                                   PDAD
                                                
                                             
                                             =
                                             Max
                                             
                                                
                                                   C
                                                   
                                                      Main
                                                      −
                                                      Addr
                                                   
                                                
                                                
                                                   C
                                                   
                                                      Main
                                                      −
                                                      PDAD
                                                   
                                                
                                             
                                             =
                                             
                                                C
                                                
                                                   Main
                                                   −
                                                   PDAD
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       (14)
                                       
                                          
                                             
                                                T
                                                
                                                   Main
                                                   −
                                                   Addr
                                                   −
                                                   PDAD
                                                
                                             
                                             =
                                             Max
                                             
                                                
                                                   T
                                                   
                                                      Main
                                                      −
                                                      Addr
                                                   
                                                
                                                
                                                   T
                                                   
                                                      Main
                                                      −
                                                      PDAD
                                                   
                                                
                                             
                                             =
                                             
                                                T
                                                
                                                   Main
                                                   −
                                                   PDAD
                                                
                                             
                                          
                                       
                                    
                                 
                              


                     NS-2 
                     [24] is used to evaluate the performance of this scheme and the simulation parameters are shown in Table 2
                     .

When u is 0.03/m2 and r is 20m, the address configuration cost and delay based on m are shown in Figs. 4 and 5
                        
                        .

From Fig. 4, it can be seen that the address configuration costs in S1, S2 and S3 tend to be zero, and the one in S4 increases with m. From Fig. 5, it can be seen that the address configuration delays in S1, S2, S3 and S4 all grow with m, and the one in S3 is minimal. In order to improve the performance of this scheme, m is set to 1.

When u is 0.03/m2, the address configuration cost and delay based on r are shown in Figs. 6 and 7
                        
                        .

From Fig. 6, it can be seen that the address configuration costs in S1, S2 and S3 tend to be zero, and the one in S4 increases with r. From Fig. 7, it can be seen that the address configuration delay in S1 tends to be equal to the one in S2 and increases with r. The delays in S3 and S4 have no relation to r and tend to be constant. In S4, a new node acquires an address through MLPDAD, so the delay in S4 is more than the one in S3. From Fig. 7, it can be seen that the address configuration delay in S3 is lowest.

When r is 20m, the address configuration cost and delay based on u are shown in Figs. 8 and 9
                        
                        .

From Fig. 8, it can be seen that the address configuration costs in S1, S2 and S3 tend to be zero, and the one in S4 is maximum and increases with u. From Fig. 9, it can be seen that the address configuration delay in S1 tends to be equal to the one in S2 and increases with u. The delays in S3 and S4 have no relation to u and tend to be constant. In S4 a new node acquires an address through MLPDAD, so the delay in S4 is more than the one in S3. From Fig. 9, it can be seen that the address configuration delay in S3 is lowest.

Our previous work shows that the stateless configuration address HLAC [14] has a better performance than the typical stateless configuration scheme MANETConf [13], so we select HLAC and the typical stateful configuration D-DHCP [6] to compare with this scheme.

When u is 0.03/m2, the address configuration cost and delay comparisons based on r are shown in Figs. 10 and 11
                        
                        .

The number of nodes increases with the square of r. When r increases, the number of nodes in one grid also grows. As a result, the probability of a new node acquiring an address in S4 increases. According to Fig. 6, it can be seen that the address configuration cost in S4 grows with r and is more than the one in S3. Therefore, with the increase in r, the address configuration cost also grows, as shown in Fig. 10. According to Fig. 7, it can be seen that the address configuration delay in S3 is lower than the one in S4, so the address configuration delay tends to increase with r, as shown in Fig. 11.

When r is 20m, the address configuration cost and delay comparisons based on u are shown in Figs. 12 and 13
                        
                        .

When u increases, the number of nodes in one grid also grows. As a result, the probability of a new node acquiring an address in S4 increases. According to Fig. 8, it can be seen that the address configuration cost in S4 grows with u and is more than the one in S3. Therefore, with the increase in u, the address configuration cost also grows, as shown in Fig. 12. According to Fig. 9, it can be seen that the address configuration delay in S3 is lower than the one in S4, so the address configuration delay tends to grow with the increase in u, as shown in Fig. 13.

From Figs. 10 to 13, it can be seen that this scheme has better performance than D-DHCP and HLAC. The main reasons are analyzed as follows:
                           
                              1)
                              In this scheme, 6LoWPAN WSN is divided into multiple grids. The address configuration process in each grid is an independent process and PDAD is performed only within one grid, so the address configuration processes in different grids can be performed in parallel. As a result, the address configuration cost and delay are reduced.

In this scheme, beacon frames are employed to achieve the address configuration and PDAD, so the address configuration cost and delay are reduced.

In this scheme, both IAC and MAC are based on location information while both ILPDAD and MLPDAD are based on the PDAD strategy. Therefore, there are always the sufficient address resources for address configuration without address reclamation. As a result, the extra cost and delay caused by the address reclamation and the address configuration failure are avoided, so the address configuration cost and delay are decreased.

@&#CONCLUSION@&#

In WSN, data collected by a sensor node need to be associated with its location information in order to support real-world applications. Taking the WSN characteristics into account, this paper proposes an address configuration scheme based on both location information and PDAD. This scheme is made up of the address initialization algorithm and address maintenance algorithm. The address initialization algorithm is performed once the network starts. The address maintenance algorithm is performed after the initialization algorithm is complete. Since beacon frames are employed to achieve the address initialization algorithm and address maintenance algorithm, the address configuration cost and delay are reduced. Moreover, this scheme can ensure that there are always the sufficient address resources for address configuration without address reclamation. As a result, the extra cost and delay caused by both the address reclamation and the address configuration failure are avoided.

This paper evaluates the performance of this scheme, and the data results show that this scheme effectively reduces the address configuration delay and cost.

@&#ACKNOWLEDGMENTS@&#

This work is supported by the National Natural Science Foundation of China (61202440).

@&#REFERENCES@&#

