@&#MAIN-TITLE@&#Identifying non-elliptical entity mentions in a coordinated NP with ellipses

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Our NER method resolves simple and complex ellipses in coordinated NPs.


                        
                        
                           
                           We presented two formal notations to express syntactic relationships between words.


                        
                        
                           
                           We model the process of making non-elliptical entity mentions into a coordinated NP.


                        
                        
                           
                           We model the process of finding non-elliptical entity mentions from a coordinated NP.


                        
                        
                           
                           We optimize our NER method using Apriori algorithm.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Ellipsis resolution

Named entity recognition

Text mining

@&#ABSTRACT@&#


               
               
                  Named entities in the biomedical domain are often written using a Noun Phrase (NP) along with a coordinating conjunction such as ‘and’ and ‘or’. In addition, repeated words among named entity mentions are frequently omitted. It is often difficult to identify named entities. Although various Named Entity Recognition (NER) methods have tried to solve this problem, these methods can only deal with relatively simple elliptical patterns in coordinated NPs. We propose a new NER method for identifying non-elliptical entity mentions with simple or complex ellipses using linguistic rules and an entity mention dictionary.
                  The GENIA and CRAFT corpora were used to evaluate the performance of the proposed system. The GENIA corpus was used to evaluate the performance of the system according to the quality of the dictionary. The GENIA corpus comprises 3434 non-elliptical entity mentions in 1585 coordinated NPs with ellipses. The system achieves 92.11% precision, 95.20% recall, and 93.63% F-score in identification of non-elliptical entity mentions in coordinated NPs. The accuracy of the system in resolving simple and complex ellipses is 94.54% and 91.95%, respectively. The CRAFT corpus was used to evaluate the performance of the system under realistic conditions. The system achieved 78.47% precision, 67.10% recall, and 72.34% F-score in coordinated NPs. The performance evaluations of the system show that it efficiently solves the problem caused by ellipses, and improves NER performance. The algorithm is implemented in PHP and the code can be downloaded from https://code.google.com/p/medtextmining/.
               
            

@&#INTRODUCTION@&#

Named Entity Recognition (NER) extracts words denoting a specific target (e.g., protein or DNA) from an unstructured text. It plays a key role in various text mining applications. Named entities in the biomedical domain are often written using a Noun Phrase (NP) along with a coordinating conjunction such as ‘and’ and ‘or’. In addition, repeated words among entity mentions (an entity mention is a text string that refers to a named entity in a document) are frequently omitted. For instance, two biomedical entity mentions of ‘human T cell’ and ‘human B cell’ can be written using the coordinated NP ‘human T and B cell’. This type of omission is known as a coordination ellipsis.

Coordination ellipsis makes it difficult to recognize named entities. Moreover, most of NER systems are not able to resolve non-elliptical entity mentions. However, a few NER systems [1–3] can resolve certain kinds of ellipses. For example, they are able to resolve the following type of ellipsis: ‘alpha – and beta – globin’ and ’IL-2 and -4’. However, their performance is reduced when ellipses occur in two places, such as ‘human T and B cells’. Furthermore, they cannot resolve complex ellipsis, such as ‘control, E2 – treated, and TAM – treated ER + and ER −’ (see the Section 3.1).

To resolve complex ellipsis in a coordinated NP, we propose both intuitive graph-like and formal algebraic representation of a coordinated NP with ellipses. We devised a new NER method that uses linguistic rules based on the two representations. And then we developed a practical NER system that effectively identified non-elliptical entity mentions using linguistic rules and an entity mention dictionary. The system was optimized by Apriori [4] algorithm which greatly reduces processing time. The GENIA [5] and CRAFT [6,7] corpora, which consist of annotated the non-elliptical mentions of biomedical named entities, were used to evaluate the performance of the proposed system. The GENIA corpus, which is rich in elliptical patterns, was used to evaluate the performance of the system according to the quality of the dictionary. The CRAFT corpus, which consists of full-text publications, was used to evaluate the performance of the system under realistic conditions.

@&#BACKGROUND@&#

Coordination ambiguity is a structural ambiguity that is derived from coordinating conjunctions. It has been an area of interest in natural language processing. De Beaugrande and Dressler [8] studied the syntactic structure connected through coordinating conjunctions. They found that morphemes, words, and phrases have an equal syntactic structure on either side of a coordinating conjunction, and called this phenomenon ‘parallelism’. For example, if a Verb Phrase (VP) follows a coordinating conjunction, the left syntactic structure of the coordinating conjunction is a VP; and if a noun follows a coordinating conjunction, the left syntactic structure of the coordinating conjunction is a noun. In this case, each syntactic structure that links itself together with a coordinating conjunction is called a conjunct. The parallelism has been widely used to solve coordination ambiguity in many studies. Agarwal and Boggess [9] defined the left-hand tokens of a coordinating conjunction as a ‘pre-conjunct’ and the right-hand tokens of the conjunction as a ‘post-conjunct’. They suggested a rule to recognize these conjuncts based on the parallelism. Okumura and Muraki [10] clarified coordination ambiguity in terms of analysis cost of ambiguities and ellipses of words. They proposed an English-Japanese machine translation system using the balance matching model originating from the symmetric patterns of parallelism introduced by De Beaugrande and Dressler [8], which achieved 75% accuracy in conjunct identification. Goldberg [11] applied an unsupervised statistical model to identify conjuncts effectively, while Chantree et al. [12] aimed to remove coordination ambiguity using word distributions in the corpus. Thus, these earlier studies focused mainly on conjunct identification.

The study by Ogren et al. [13,14] differed from the aforementioned previous studies in that they performed over the conjunct identification via ellipsis resolution. They extracted a number of candidate sentence sets from possible conjuncts to find the correct coordination structure of a coordinating conjunction. For instance, the sentence ‘Tyr mutation results in increased IOP and altered diurnal changes’ has six possible left conjuncts and two possible right conjuncts of the coordinating conjunction ‘and’. 12 candidate sentence sets are extracted from the sentence by the product of possible conjuncts. If two words are selected as a left conjunct and three words are selected as a right conjunct, the sentence is broken down into two sentences: ‘Tyr mutation results in increased IOP’, ‘Tyr mutation results in altered diurnal changes’. Each candidate sentence is scored with the machine learning method trained by CRAFT [7], GENIA [15], and Penn treebanks [16]. In the above example, Ogren et al. chose the best pair of candidate sentence for which the method attains its maximum score.

Ellipsis resolution of NER is the process of identifying the non-elliptical entity mentions. Finkel et al. [17] discussed the difficulty of understanding a writer’s intention without considering ellipsis resolution. Tanabe and Wilbur [1] designed a method to find the coordinate phrase using a post-processing rule, and identified the non-elliptical entity mentions. Although this method offered a slight improvement in ellipsis resolution, it could only identify simple ellipses and could not recognize complex elliptical patterns.

Some researchers focused directly on the coordination ambiguity itself. For example, Dale and Mazur [2] dealt with the coordination ambiguity problem in the newspaper domain. They divided the conjunctions related to entities into four different types: name internal conjunction (a coordinating conjunction is part of a named entity), name external conjunction (a coordinated NP has no ellipsis), right-copy separator (a left conjunct is incomplete in itself but can be completed by copying information from the right-hand conjunct), and left-copy separator (the opposite of right-copy separator). They aimed to identify the non-elliptical entity mentions using machine learning, with their method achieving an overall performance of 84%. However, the performance of right-copy and left-copy separators was relatively low: 49.2% and 58.5%, respectively. Similarly, Buyko et al. [3] focused on the coordination ellipsis problem in the biomedical domain. They defined a NP consisting of entity mentions with ellipses as elliptical entity expressions; they defined the ellipsis occurring in the pre-conjunct, the left-hand tokens of a coordinating conjunction, as forward ellipsis and the ellipsis occurring in the post-conjunct, the right-hand tokens of the conjunction, as backward ellipsis. They used a machine learning approach based on Conditional Random Fields (CRFs) [18] for recognizing elliptical entity expressions. Their method achieved a 93% F-score for conjunct identification using the GENIA corpus, and 86% accuracy in resolving ellipses. However, the method failed to identify nested entity mentions, such as ‘recombinant human nm23-H1,-H2, mouse nm23-M1, and-M2 proteins’. Furthermore, their method had a relatively high error rate when forward and backward ellipses occurred simultaneously. Thus, it can be concluded that more contextual information is needed to improve the performance of ellipsis resolution.

Further, ellipsis resolution is important in event extraction. Cohen et al. [19] performed coordination analysis in order to extract multiple events from coordinated sentences. The authors trained the syntax parser with GENIA and CRAFT treebanks to find the coordination structures of a sentence. As a result, three separate gene expression events involving the proteins HLA-DR, CD86, and CD40 could be extracted from the sentence: ‘NAC was shown to down-regulate the production of cytokines by DC as well as their surface expression of HLA-DR, CD86 (B7–2), and CD40 molecules’.

There are some limitations to previous NER studies aimed at resolving the ellipsis problem. First, these studies could not resolve complex elliptical patterns, because the methods were optimized for simple elliptical patterns. In addition, in most studies, forward ellipses (an ellipsis site is in the second conjunct) and backward ellipses (an ellipsis site is in the first conjunct) were considered individually, but these can coincide. In [3], though, the authors considered the fact that forward and backward ellipses could coincide, but the complex elliptical patterns in NPs were more numerous than they expected. We describe various elliptical patterns in the following sections.

Second, previous studies [1–3] did not consider coordinated structures in succession. For instance, the ‘control, E2 – treated, and TAM – treated ER
                     
                     + and ER −’ text string with two coordinated structures of (‘control’, ‘E2 – treated’, ‘TAM – treated’) and (‘ER +’,‘ER −’) contains six non-elliptical entity mentions: ‘control ER +’, ‘control ER -’, ‘E2 – treated ER +’, ‘E2 – treated ER −’, ‘TAM – treated ER +’, and ‘TAM – treated ER −’. Thus, previous studies failed to resolve coordinated structures in succession, although CRAFT and GENIA corpora sufficiently annotated such types of coordinated NPs.

Third, previous studies did not fully utilize the catalogue of named entities. The most useful information for resolving ellipses among enumerated entity mentions are non-elliptical entity mentions. For example, if we know that ‘human alpha – globin’ and ‘human beta – globin’ mentions exist, we can easily extract these non-elliptical mentions from the coordinated NP ‘human alpha – and beta – globin’. For this purpose, extensive dictionaries, such as the UMLS Metathesaurus [20], and Entrez [21], and SwissProt [22] offer the official names of named entities for resolving ellipses. Automated dictionary construction methods are also constantly evolving through new research. Thus, we propose a new NER method based on linguistic rules and an entity mention dictionary to overcome the three aforementioned limitations.

There could be various types of omissions in a coordinated NP depending on an author’s intent. In this section, we explain what types of omissions occur during the generation of a coordinated NP, consisting of entity mentions, how ellipses operate in a coordinated NP, and how a reader interprets a coordinated NP as non-elliptical entity mentions. We call the process of transforming non-elliptical entity mentions into a coordinated NP as the encoding process, and the process of transforming a coordinated NP into non-elliptical entity mentions as the decoding process.

We refer to non-elliptical entity mentions in a coordinated NP as an Entity Mention Set (EMS), and an EMS written using a coordinated NP as an Entity Mention Set Elliptical Expression (EMSEE). An EMS can have various EMSEEs. For example, the EMS {‘alpha - globin’, ‘beta – globin’} can be written as any one of the following coordinated NPs: ‘alpha – globin and beta – globin’, ‘alpha – and beta – globin’, ‘alpha and beta – globin’, or ‘beta and alpha – globin’, etc. Thus, when an EMS is expressed as an EMSEE, various types of ellipses may occur.

We categorize three types of ellipses as follows: forward, backward, or complex.
                           
                              forward ellipsis: cytokeratins 8 and 18 (Case 1)
                           
                           
                              backward ellipsis: alpha - and beta - globin (Case 2)
                           
                        
                     

If an ellipsis occurs in a right conjunct of a coordinating conjunction, the ellipsis is called a forward ellipsis; for example, in Case 1, the ‘cytokeratins’ text string is omitted in the right conjunct. If an ellipsis occurs in a left conjunct of a coordinating conjunction, the ellipsis is called a backward ellipsis; for example, in Case 2, the ‘globin’ text string is omitted in the left conjunct. Fig. 1
                        a and b shows the relationship between each word in Cases 1 and 2, respectively. Both forward and backward ellipses are simple ellipses.

Complex ellipsis is an ellipsis that is composed of two or more simple ellipses. There are five types of binary combinations of simple ellipses: forward–forward, forward–backward, backward–forward, backward–backward, and coupled combinations.
                           
                              forward–forward combination: recombinant human nm23- H1, -H2, mouse nm23-M1, and -M2 (Case 3)
                           
                           
                              forward–backward combination: DR beta, DP alpha and -beta, and DQ alpha genes (Case 4)
                           
                           
                              backward–forward combination: B and T lymphocyte activation and mitogenesis (Case 5)
                           
                           
                              backward–backward combination: unstimulated and PMA- or TNF-stimulated cells (Case 6)
                           
                           
                              coupled, forward–backward, and backward–backward combination: control, E2 – treated, and TAM – treated ER + and ER − cells (Case 7)
                           
                        
                     

If two forward ellipses appear successively, we call the combination a forward–forward combination. Case 3 in Fig. 2
                        a is composed of two forward–forward combinations in that the ellipses are connected at ‘human nm2’ and ‘mouse nm2’ text strings. If a backward ellipsis immediately follows a forward ellipsis, we call the combination a forward–backward combination. Case 4 in Fig. 2b is composed of a forward–backward combination. If a forward ellipsis immediately follows a backward ellipsis, we call the combination a backward–forward combination. Case 5 in Fig. 2c is composed of a backward–forward combination. If two backward ellipses appear successively, we call the combination a backward–backward combination. Case 6 in Fig. 2d is composed of a backward–backward combination.

Let more than two forward ellipses have a same conjunct
                        
                           b
                         and more than two backward ellipses have a same conjunct
                        
                           a
                        . If the conjunct
                        
                           b
                         immediately follows conjunct
                        
                           a
                        , we call the combination a coupled combination. If there is a coupled combination, the conjuncts involving in the coupled combination form a complete bipartite subgraph. Case 7 in Fig. 2e is composed of one coupled, three forward–backward, and two backward–backward combinations. In Case 7, ‘ER +’ and ‘ER −’ text strings are the conjuncts of three forward ellipses which share ‘control’, ‘E2 – treated’, and ‘TAM – treated’ text strings, respectively. Further, ‘control’, ‘E2 – treated’, and ‘TAM – treated’ text strings are the conjuncts of two backward ellipses which share ‘ER +’ and ‘ER −’ text strings, respectively. Because the conjuncts (‘ER +’ and ‘ER −’ text strings) of forward ellipses follow the conjuncts (‘control’, ‘E2 – treated’, ‘TAM – treated’) of backward ellipses, they form a coupled combination. In addition, the subsequent backward ellipsis forms forward–backward and backward–backward combinations with coupled and backward ellipses.

Sub-NP nominal substrings (NML) is a label that is introduced in the Penn BioIE [23] to represent sub-NP structures. We call the shared text string of an ellipsis a shared NML, and each conjunct connected to a shared NML a coordinated NML dependent on the shared NML. The set of coordinated NMLs is called a coordinated NML set dependent on the shared NML. For example, Fig. 2a includes seven NMLs (‘recombinant’, ‘human nm23’, ‘- H1’, ‘- H2’, ‘mouse nm23’, ‘- M1’, and ‘- M2’), three shared NMLs (‘recombinant’, ‘human nm23’, and ‘mouse nm23’), and three coordinated NML sets ({‘human nm23’, ‘mouse nm23’}, {‘- H1’, ‘- H2’}, and {‘- M1’, ‘- M2’}), respectively.

We call the graph-like representation in Figs. 1 and 2a graph-like EMSEE. The nodes of a graph-like EMSEE consist of NMLs that make up entity mentions, while the edges represent the interpretation path of the EMSEE. A graph-like EMSEE provides intuitive recognition of non-elliptical entity mentions in the EMSEE. A graph-like EMSEE is not a graph because the location of nodes has special meaning. Consecutive NMLs should be located from left to right, and conjuncts of a coordinating conjunction should be located from top to bottom in a graph-like EMSEE.

The order of some words of an EMSEE can be changed without changing the meaning of the EMSEE. For example, the positions of ‘T’ and ‘B’ are interchanged in the two EMSEE ‘human T and B cell’ and ‘human B and T cell’, but they still have the same meaning. We use algebraic operators to clarify the relations of words in an EMSEE, and call a text string including algebraic operators an algebraic EMSEE. An algebraic EMSEE consists of words of entity mentions and operators. The ⊕ operator takes two substrings in an algebraic EMSEE as inputs, and subsequently enumerates them. The ∗ operator takes two substrings in an algebraic EMSEE as inputs, and concatenates them. A pair of parenthesis operators ‘(’ and ‘)’ represents the priority of the ⊕ and ∗ operators in an algebraic EMSEE. By introducing ⊕,∗, and parenthesis operators, the encoding and decoding process can be expressed as a factorization and expansion of EMSEE using the distributive law, respectively. We call the factorization in a coordinated NP a nominal factorization, and the expansion in a coordinated NP a nominal expansion. If two different algebraic EMSEEs have the same EMS as a result of nominal expansion, we say they are equivalent to each other. The algebraic properties of an algebraic EMSEE are defined as follows.
                           
                              (1)
                              
                                 The ⊕ operator
                                 
                                    
                                       (a)
                                       
                                          For all substrings a,b, and c in an algebraic EMSEE, the equation (a
                                          ⊕
                                          b)
                                          ⊕
                                          c
                                          
                                          =
                                          
                                          a
                                          ⊕
                                          (b
                                          ⊕
                                          c) holds. (associativity of ⊕)
                                       


                                          For all substrings a and b in an algebraic EMSEE, the equation a
                                          ⊕
                                          b
                                          
                                          =
                                          
                                          b
                                          ⊕
                                          a holds. (commutativity of ⊕)
                                       


                                 The ∗ operator
                                 
                                    
                                       (a)
                                       
                                          For all substrings a, b, and c in an algebraic EMSEE, the equation (a∗b)∗c
                                          
                                          =
                                          
                                          a∗(b∗c) holds. (associativity of ∗)
                                       


                                          Commutativity of ∗ is not satisfied.
                                       


                                          If there is only one ∗ operator between two substrings, the ∗ operator can be omitted.
                                       


                                 Distributive laws
                                 
                                    
                                       (a)
                                       
                                          For all substrings a, b, and c in an algebraic EMSEE, the equation a∗(b
                                          ⊕
                                          c)
                                          
                                          =
                                          
                                          (a∗b)
                                          ⊕
                                          (a∗c) holds. (left-distributive over ⊕)
                                       


                                          For all substrings a, b, and c in an algebraic EMSEE, the equation (a
                                          ⊕
                                          b)∗c
                                          
                                          =
                                          
                                          (a∗c)
                                          ⊕
                                          (b∗c) holds. (right-distributive over ⊕)
                                       


                                 The ∗ operator has higher precedence than the ⊕ operator.
                              

Algebraic EMSEE and graph-like EMSEE are interchangeable representations. An algebraic EMSEE can be converted into a graph-like EMSEE by exchanging the NMLs separated by operators into the node. If NMLs are connected by the ⊕ operator in an algebraic EMSEE, they should be expressed as sibling nodes. If NMLs are connected by the ∗ operator in an algebraic EMSEE, they should be expressed as connected nodes.

A graph-like EMSEE can be converted into an algebraic EMSEE as follows. The nodes of a graph-like EMSEE are converted into the consecutive NMLs in order from top to bottom level, and left to right in each level. The ⊕ operator is located between sibling nodes. In the forward ellipsis, ∗ and ‘(’ operators are sequentially located to the left of the first coordinated NML. A right parenthesis operator ‘)’ is located to the right of the rightmost NML among those NMLs each of which has a path from sibling nodes on the right (if all sibling nodes have paths to the same node on the right, only NMLs on the left side of the node are considered). In the backward ellipsis, ‘)’ and ∗ operators are sequentially located to the right of the last coordinated NML. A left parenthesis operator ‘(’ is located to the left of the leftmost NML among those NMLs each of which has a path from sibling nodes on the left (if all sibling nodes have paths to the same node on the left, only NMLs on the right side of the node are considered). Fig. 3
                         shows the algebraic operators found in Cases 3 and 4.

To illustrate the above process, we use the following examples: Fig. 3a includes three forward ellipses. The shared NML ‘recombinant’ is connected to the coordinate NML set {‘human nm23’, ‘mouse nm23’}. ∗ and ‘(’ operators are sequentially located to the left of the first coordinated NML ‘human nm23’. A right parenthesis operator ‘)’ is located to the right of the rightmost NML ‘-M2’ among the NMLs (‘human nm23’, ‘-H1’, ‘-H2’, ‘mouse nm23’, ‘-M1’, and ‘-M2’). Fig. 3b includes a forward ellipsis. The shared NML ‘DP’ is connected to the coordinate NML set {‘alpha’, ‘-beta’}. ∗ and ‘(’ operators are sequentially located to the left of the first coordinated NML ‘alpha’. A right parenthesis operator ‘)’ is located to the right of the rightmost NML ‘-beta’ among the NMLs (‘alpha’ and ‘-beta’). Fig. 3b also includes a backward ellipsis. The shared NML ‘genes’ is connected to the coordinate NML set {‘DR beta’, ‘alpha’, ‘-beta’, ‘DQ alpha’}. ‘)’ and ∗ operators are sequentially located to the right of the last coordinated NML ‘DQ alpha’. A left parenthesis operator ‘(’ is located to the left of the leftmost NML ‘DR beta’ among the NMLs (‘DR beta’, ‘DP’, ‘alpha’, ‘-beta’, and ‘DQ alpha’).

The encoding process generating an EMSEE consists of the following steps: First, convert an EMS into an algebraic EMSEE; Second, convert an algebraic EMSEE into other equivalent algebraic EMSEEs, repeatedly; Third, select a single algebraic EMSEE from the equivalent algebraic EMSEEs, and then transform the selected algebraic EMSEE into an EMSEE.

In the first step of the encoding process, an EMS is converted into an algebraic EMSEE as follows:
                           
                              (1)
                              
                                 Inserting ∗ operators between words of each entity mention in an EMS (e.g., {alpha ∗−∗ globin,beta ∗−∗ globin}).
                              


                                 For all entity mentions in the EMS, concatenate these into an algebraic EMSEE with ⊕ operators (e.g., {alpha ∗−∗ globin
                                 ⊕
                                 beta ∗−∗ globin}).
                              


                                 Remove the set notation (e.g., alpha ∗−∗ globin
                                 ⊕
                                 beta ∗−∗ globin).
                              

In the second step, the generated algebraic EMSEE is converted into equivalent algebraic EMSEEs. The ⊕ operator satisfies the commutative law. Even though the positions of the operands of the ⊕ operator change, there is no meaningful distinction between them. Some words can be omitted by Nominal factorization, because the ∗ operator is distributive over the ⊕ operator. The following two processes can be applied repeatedly.
                           
                              (1)
                              
                                 Change the positions of the operands connected by the ⊕ operator if necessary (e.g., alpha ∗−∗ globin
                                 ⊕
                                 beta ∗−∗ globin
                                 
                                 =
                                 
                                 beta ∗−∗ globin
                                 ⊕
                                 alpha ∗−∗ globin).
                              


                                 Find repeated words, and perform nominal factorization using the distributive law (e.g., alpha ∗−∗ globin
                                 ⊕
                                 beta ∗−∗ globin
                                 
                                 =
                                 
                                 (alpha
                                 ⊕
                                 beta) ∗−∗ globin).
                              

In the third step, a single algebraic EMSEE is selected from the equivalent algebraic EMSEEs. Then, the ⊕ operators of the algebraic EMSEE are replaced by coordinating conjunctions, and the ∗ and parenthesis operators of the algebraic EMSEE are removed. Fig. 4
                         illustrates an example of the encoding process to show how the EMS {‘alpha – globin’, ‘beta – globin’} is converted into the EMSEE ‘alpha – and beta – globin’. The algebraic EMSEE expressions for the aforementioned seven cases are as follows:
                           
                              Case 1: cytokeratins ∗ (8⊕18)
                           
                              Case 2: (alpha ∗−
                              ⊕
                              beta ∗−) ∗ globin.
                           
                              Case 3: recombinant ∗ (human ∗ nm23 ∗ (− ∗ H1⊕
                              −∗ H2)⊕
                              mouse∗ nm23 ∗ (− ∗ M1⊕
                              −∗ M2)).
                           
                           
                              Case 4: (DR ∗ beta
                              ⊕
                              DP ∗ (alpha
                              ⊕
                              −∗ beta)⊕
                              DQ ∗ alpha) ∗ genes
                           
                           
                              Case 5: (B
                              ⊕
                              T) ∗ lymphocyte ∗ (activation
                              ⊕
                              mitogenesis).
                           
                           
                              Case 6: (unstimulated
                              ⊕(PMA ∗−
                              ⊕
                              TNF ∗ −) ∗ stimulated) ∗ cells.
                           
                              Case 7: (control
                              ⊕
                              E2 ∗−∗ treated
                              ⊕
                              TAM∗−∗ treated) ∗ (ER ∗+⊕
                              ER ∗ −) ∗ cells.
                        
                     

The process for finding an author’s intended EMS from a given EMSEE is called the decoding process. An EMSEE usually includes one or more ellipses. First, readers have to resolve the omitted words to find EMSs. Second, readers have to select one EMS from the many EMSs, because ambiguity exists: one EMSEE can be translated into one or more EMSs. The former is the process for finding semantically valid EMSs, while the latter is the process for selecting an author’s intended EMS.

We present two processes for finding semantically valid EMSs from a given EMSEE. The first method begins by generating candidate algebraic EMSEEs, and then finding semantically valid EMSs based on the algebraic EMSEEs. The second method begins by generating candidate EMSs without candidate algebraic EMSEEs, and then finding the semantically valid EMSs based on the validation tests.


                        Fig. 5
                         shows the example of the processing of the first method. The EMSEE ‘human T and B cells’ is converted into four different candidate algebraic EMSEEs, considering all the interpretation paths of the words. Each candidate algebraic EMSEE is converted into a candidate EMS without ellipses via the nominal expansion. Then, if all candidate entity mentions of the EMS are valid entity mentions, the EMS is a semantically valid EMS. A detailed description of the first method is as follows:
                           
                              (1)
                              
                                 A coordinating conjunction of an EMSEE is converted to a 
                                 ⊕ 
                                 operator (e.g., exons 1
                                 ⊕
                                 2
                                 ⊕
                                 3).
                              


                                 If there is no operator between two connected words included in the EMSEE, a ∗ operator is inserted between these words (e.g., exons ∗ 1
                                 ⊕
                                 2
                                 ⊕
                                 3).
                              


                                 Candidate algebraic EMSEEs are generated by the insertion of a pair of parenthesis operators around each ⊕ operator. The insertion of a pair of parenthesis operators obeys the following three rules.
                                 
                                    
                                       (a)
                                       
                                          A left parenthesis operator ‘(’ is added to the left of a left word of the coordinating conjunction, and a right parenthesis operator ‘)’ is added to the right of a right word of the coordinating conjunction.
                                       


                                          exons ∗ 1(⊕2)⊕3 (incorrect).


                                          exons(∗ 1⊕2)⊕3 (incorrect).


                                          exons ∗ (1⊕2)⊕3 (correct).


                                          If two pairs of parenthesis operators overlap, they must have a subset relationship.
                                       


                                          exons ∗ 1⊕(2⊕3)→
                                          exons ∗ (1⊕(2)⊕3) (incorrect).


                                          exons ∗ 1⊕(2⊕3)→
                                          exons ∗ (1⊕(2⊕3)) (correct).


                                          If the range of a pair of parenthesis operators is a whole word in the EMSEE, or coincides exactly with the range of another pair of parenthesis operators, a pair of parenthesis operators is omitted.
                                       

(exons ∗ (1⊕2⊕3))→
                                          exons ∗ (1⊕2⊕3) (correct).


                                          exons ∗ ((1⊕2⊕3))→
                                          exons ∗ (1⊕2⊕3) (correct).


                                 Candidate EMSs are generated by nominal expansion of the candidate algebraic EMSEEs.
                              


                                 Semantically valid EMSs are selected from the candidate EMSs by dictionary matching.
                              

A detail description of the second method is as follows:
                           
                              (1)
                              
                                 If the word sequence of an EMSEE is identical to the words of a specific entity mention in a dictionary, even if there is a gap, the entity is extracted as a candidate entity. For example, if there is an EMSEE ‘human T and B cells’ and the dictionary contains an entity mention with the ‘T cells’ text string, the candidate entity ‘T cells’ is extracted, because the word ‘cells’ appears after the word ‘T’.
                              


                                 If s is the set of candidate entities, and P(s) is the power set of s, a candidate EMS is an element of P(s).
                              


                                 Words used in a candidate EMS must be identical with words used in the EMSEE except coordinating conjunctions. If there is a missing word between them, the candidate EMS is discarded.
                              


                                 Candidate algebraic EMSEE for each candidate EMS is generated by using graph-like EMSEE.
                                 
                                    
                                       (a)
                                       
                                          The node of a graph-like EMSEE is generated by extracting NMLs except coordinating conjunctions from the EMSEE.
                                       


                                          The edge of a graph-like EMSEE is generated according to connections of the words which form entity mentions in the candidate EMS. Each NML can be divided into smaller NMLs as needed.
                                       


                                          The candidate algebraic EMSEE is generated from the graph-like EMSEE.
                                       


                                 If the candidate algebraic EMSEE of a candidate EMS cannot be encoded into the EMSEE, the candidate EMS is discarded.
                              


                                 If the candidate algebraic EMSEE of a candidate EMS cannot be decoded into the candidate EMS, the candidate EMS is discarded.
                              

In step (5), the candidate algebraic EMSEE of a candidate EMS must be encoded into the given EMSEE. If the location of the ⊕ operator of a candidate algebraic EMSEE disagrees with the location of the coordinating conjunctions of a given EMSEE, the candidate algebraic EMSEE is invalid. For example, the EMSEE ‘B and T and lymphocyte activation and mitogenesis’ and the EMSEE in Case 5 form the same candidate algebraic EMSEE, (B
                        ⊕
                        T) ∗ lymphocyte ∗ (activation
                        ⊕
                        mitogenesis), about the EMS {‘B lymphocyte activation’, ‘B lymphocyte mitogenesis’, ‘T lymphocyte activation’, ‘T lymphocyte mitogenesis’}, but the former cannot generate the given EMSEE by the encoding process, because the former has a coordinating conjunct between ‘T’ and ‘lymphocyte’.

In step (6), the candidate algebraic EMSEE of a candidate EMS must be decoded into the candidate EMS. If the nominal expansion of a candidate algebraic EMSEE does not agree with a given candidate EMS, the candidate algebraic EMSEE is invalid. For example, the EMS {‘B lymphocyte activation’, ‘B lymphocyte mitogenesis’, ‘T lymphocyte mitogenesis’} and the EMS in Case 5 form the same candidate algebraic EMSEE, (B
                        ⊕
                        T) ∗ lymphocyte ∗ (activation
                        ⊕
                        mitogenesis), but the former cannot generate the given candidate EMS by the decoding process, because the former does not have the entity mention ‘T lymphocyte activation’. Steps (5) and (6) are referred to as validation tests based on an algebraic EMSEE.

To find a faster method, we need to consider how many of candidates are generated in the processing of the two methods. The number of candidate algebraic EMSEEs in the first method is as follows. Suppose an EMSEE consists of N words and includes C coordinating conjunctions. ⊕ and ∗ operators do not affect the number because the location of the operators is fixed. The parenthesis operator is the only changeable operator. The number of possible positions for a pair of parenthesis operators is N
                        2. Thus, the number of algebraic EMSEEs derived from a single EMSEE is N
                        2C
                        . On the contrary, the number of candidate EMSs in the second method is as follows: Assume that the size of a candidate entity set s is S and the size of the power set of s is 2
                           S
                        . Thus, the number of candidate EMSs generated from a single EMSEE is 2
                           S
                        .

The first method decodes EMSEEs for all NPs including coordinating conjunctions. However, the second method only decodes noun phrases that contain candidate entities. In particular, if a document contains only a few entity mentions and many NPs with one or more coordinating conjunctions, the first method wastes a considerable amount of time in the decoding process. Considering these facts, although the number of candidate EMSs in the second method grows exponentially with S, the second method is more efficient than the first in practice.

There are many different ways of selecting the author’s intended EMS from semantically valid EMSs. We introduce a method based on the parallelism [8]. According to the parallelism, entity mentions enumerated by coordinating conjunctions have an equal syntactic structure. The equal syntactic structure of entity mentions means that the mentions contain the same words. To find the most similar syntactic structure among the semantically valid EMSs, a good way is to use the EMS, because it has non-elliptical mentions. For example, we can easily find that the EMS {‘human T cells’, ‘human B cells’} has a more similar syntactic structure than the EMS {‘human T cells’, ‘B cells’}. The more words are repeated, the more tokens an EMS has. Thus, we select the longest EMS among the semantically valid EMSs as an author’s intended EMS. The score function representing the degree of equal syntactic structure is defined as:
                           
                              
                                 
                                    
                                       EqualityScore
                                    
                                    
                                       s
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          s
                                       
                                    
                                 
                                 |
                                 e
                                 |
                              
                           
                        where s is a semantically valid EMS, e is an entity mention included in the semantically valid EMS, and ∣e∣ is the number of tokens included in e.

@&#METHODS@&#

In the previous sections, two practical methods for decoding process were presented. The second method is more efficient under realistic conditions. Hence, we used the second method for decoding process. Fig. 6
                      depicts our NER system. The system divides a given sentence into tokens, which are then transformed into a normal form during ‘Preprocessing’. In the ‘Finding candidate entities’ module, the system finds candidate entities from the normalized tokens using an entity mention dictionary. Candidate entities are divided into two categories: continuous candidate entities, which consist of continuous tokens, or discontinuous candidate entities, which have other candidate entities’ tokens between their leftmost and rightmost tokens. In the ‘Removing overlapping candidate entities’ module, if the tokens of two continuous candidate entities overlap, the shorter one is discarded to reduce the search space. Overlapping candidate entities are grouped together, without distinguishing between continuous and discontinuous candidate entities in the ‘Finding candidate entity groups’ module. The ‘Finding semantically valid EMSs’ module forms candidate EMSs from each candidate entity group, and only semantically valid EMSs remain after the validation tests based on the algebraic EMSEE. Pruning and optimization methods are used in this process. Finally, in the ‘Selecting author’s intended EMS module, the system selects an author’s intended EMS from the semantically valid EMSs.

In the preprocessing, the system performs tokenization and normalization. Tokenization divides an input sentence into tokens, which are the smallest units for dictionary matching. It is important to select appropriate token separators, because incorrect tokenization leads to incorrect decoding of the EMSEE. We use white space and special characters (such as ‘−’, ‘(’, ‘)’, ‘/’, ‘+’, and ‘.’), as token separators. After tokenization, each token is transformed into its normal form through normalization. We use the UMLS Specialist lexicon (http://lexsrv3.nlm.nih.gov/Specialist/Summary/lexicon.html) and various heuristic rules for normalization.

Candidate entities may have one or more gaps, which make it difficult to find candidate entities. To handle these gaps, our system uses the scattered words matching algorithm [24], which was developed to recognize Human Leukocyte Antigen (HLA) entities. If the sequence of tokens is identical to the sequence of a non-elliptical entity mention in the dictionary, the algorithm extracts the tokens as a candidate entity even though the tokens are scattered. For example, assume that the input NP is ‘alpha – and beta – globin’, and there is an entity mention dictionary consisting of only four entity mentions: ‘alpha globin’, ‘alpha – globin’, ‘beta globin’, and ‘beta – globin’. The algorithm finds five candidate entities: (a) alpha globin, (b) alpha – globin, (c) alpha – globin, (d) beta globin, and (e) beta – globin, as shown in Fig. 7
                        .

The scattered words matching algorithm works with the dictionary, which is constructed in a trie data structure in order to lookup entity mentions more efficiently. The trie is based on an ordered tree data structure with entity mention tokens as nodes. All the children of a node have common prefix tokens associated with that node. If a node is positioned as the last token of an entity mention, it is called a terminal node; otherwise, it is called a non-terminal node. The trie structure is frequently used in dictionary-based NER, as it is an appropriate data structure for recognizing named entities when there are many target named entities.

The algorithm [24] that uses the trie data structure to find candidate entities from tokens is given below.
                           Algorithm 1
                           find_candidate_entities 
                                 
                                    
                                 
                              
                           

The find_candidate_entities function finds all candidate entities in a straightforward manner. Initially, the ref_pool contains only the root reference of the dictionary. Then each token T of the text is sequentially compared to each reference in the ref_pool. If T exists as a child node C on the reference in the ref_pool and C has another node as a child node, the reference of C is added to the ref_pool. If C is a terminal node, the concatenated text string from the root to C is extracted as a candidate entity. If T does not match any reference in the ref_pool, and is not a coordinating conjunction, the ref_pool is initialized to contain only the root reference, because an EMSEE must be a continuous text string. The algorithm terminates after processing the last token, and returns the collection of candidate entities.

The following example demonstrates the workflow in the Algorithm 1 for the sample text string: ‘We have recently demonstrated that stimulation of human T and natural killer cells… ’. Table 1
                         gives the status of the ref_pool and the candidate entities discovered for each token. Fig. 8
                         shows the nodes discovered in the dictionary for the input tokens of the sample text string. Tokens 0, 1, and 2 do not match any child nodes of references in ref_pool, whereas token 3 does. The system inserts the reference of the matched child node into ref_pool as ref1. At the next token, all references in ref_pool are removed (except the root reference ref0), because token 4 does not match any reference in ref_pool. The node that matches token 5 is inserted into ref_pool as ref2, and is included in the candidate entity list because it is a terminal node. Continuing in this way, the algorithm finds nine candidate entities, shown in bold font in Table 1, of which #0, #1, #2, #6, and #7 are continuous candidate entities and #3, #4, #5, and #8 are discontinuous candidate entities.

In the module for removing overlapping candidate entities, the system retains only the longest 
                           continuous
                         candidate entities from the set of overlapping continuous candidate entities. This process is similar to longest prefix matching. Candidate entity #6, appearing in Table 1, is discarded during this process, while continuous candidate entities #0, #1, #2, and #7 remain.

In the finding candidate entity groups module, the system determines candidate entity groups from the candidate entities. As named earlier, overlapping candidate entities are grouped without distinction between continuous and discontinuous candidate entities. In the example, candidate entities #1, #2, #3, #4, #5, #7, and #8 overlap each other, with only candidate entity #0 not overlapping. Thus, the system divides the candidate entities into two candidate entity groups: {#0} and {#1, #2, #3, #4, #5, #7, #8}.

In the finding semantically valid EMSs module, the system determines semantically valid EMSs from each candidate entity group. The system does not know which subsets are semantically valid EMSs, and so must test all possible subsets of a candidate entity group. However, testing all possible combinations introduces a serious computational overhead. Therefore, we propose a process that follows the optimization concept in the Apriori algorithm, which uses a bottom-up approach to find frequent subsets. Just as the Apriori algorithm incrementally increases the size of a candidate set one by one, the proposed system increases the size of a candidate entity set one by one. Apriori discards subsets below a given support level, and selects subsets above a given confidence. Just like Apriori, our system discards candidate entity sets that do not satisfy the necessary conditions of algebraic EMSEE, and selects candidate entity sets that pass the validation tests based on an algebraic EMSEE. The necessary conditions are as follows:
                           
                              (1)
                              ⊕ operators must exist between coordinated NMLs.


                                 A ∗ operator must be consistent in concatenating substrings between candidate entities.
                              


                                 A set of words comprising a candidate entity must not be a subset of a set of words comprising any other candidate entity.
                              


                                 A candidate entity must not have the same words as any other candidate entity (optional).
                              

Rule 1 means that the ⊕ operator cannot be omitted between two adjacent coordinated NMLs, because the NMLs must be connected to each other via a coordinating conjunction. When a forward ellipsis occurs, the ⊕ operator must exist at the front of the coordinated NMLs, except for the first coordinated NML. Similarly, when a backward ellipsis occurs, the ⊕ operator must exist at the back of the coordinated NMLs, except for the last coordinated NML. Rule 2 is a consistency constraint for the ∗ operator in concatenating substrings between candidate entities. If there is a ∗ operator to the left of a specific word, then other candidate entities sharing that word must also have some words to the left of it. Words to the right of a ∗ operator are also affected by Rule 2. From EMS {#7, #8}, for instance, token 10 has a ∗ operator to the left in candidate entity #8 but no ∗ operator to the left in candidate entity #7. Thus, EMS {#7, #8} violates Rule 2. Rule 3 is derived from the distributive laws. If a set of words comprising a candidate entity is a subset of a set of words comprising any other candidate entity, the candidate EMS consisting of these entity mentions cannot be converted into the given EMSEE, because one of the two operands of the ⊕ operator must have an empty text string ∊ during nominal factorization. For example, EMS {#3, #5} is invalid, because the ⊕ operator only has one operand ‘T’ in the algebraic EMSEE ‘human ∗ ( T 
                        ⊕ 
                        ∊ ) ∗ cell’. Rule 4 is an optional rule that can be used if entity mentions in an EMS are guaranteed to be unique.

If a candidate EMS violates the support rules, it is discarded. The superset of a discarded candidate EMS is also discarded, because it violates the necessary condition of being a valid algebraic EMSEE. Consequently, our system is able to reduce the search space dramatically, as shown in Fig. 9
                        .

If a subset is not sufficiently pruned at each stage of the Apriori algorithm, the system requires considerable time to process entire subsets, because the execution time grows exponentially with the size of a candidate entity group. This problem can be solved by restricting the number of nodes at each stage of the Apriori algorithm. We designed the following score function to calculate the possibility of an EMS being an author’s intended EMS:
                           
                              
                                 
                                    
                                       EqualityScoreG
                                    
                                    
                                       s
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          s
                                       
                                    
                                 
                                 
                                    
                                       |
                                       e
                                       |
                                    
                                    
                                       
                                          
                                             gap
                                          
                                          
                                             e
                                          
                                       
                                       +
                                       1
                                    
                                 
                              
                           
                        where gap
                        
                           e
                         is the number of gaps included in e. The score function must, however, consider not discarding a subset occurring in an author’s intended EMS. After several pilot experiments, we used the average number of continuously expressed tokens in the candidate EMS as the score function, because a larger number of continuously expressed tokens implies that there is a lower probability of them occurring by chance. If an entity mention in the candidate EMS has gaps, the number of tokens in the candidate entity is divided by gap
                        +1. However, if two adjacent coordinated NMLs satisfy the first support rule, the gap between the shared NML and coordinated NMLs is not counted.

Thus, the system collects {#1}, {#2}, {#7}, {#2, #7}, {#4, #7}, {#5, #7}, and {#5, #8}, as semantically valid EMSs.

In the module for selecting author’s intended EMS, the system selects an author’s intended EMS from the semantically valid EMSs. As already described, we use the EqualityScore function to select an author’s intended EMS. Thus, the system selects EMS {#5, #8} as an author’s intended EMS.

@&#RESULTS@&#

The quality of the dictionary used in a dictionary-based NER system is one of the major influential factors for the performance of the system. Therefore, as the performance cannot be high without a good quality dictionary, the proposed system, being a dictionary based system, also encounters this limitation. Thus, we prepare two types of dictionaries: one consisting of non-elliptical entity mentions written in documents, and the other consisting of official names of named entities in well-known dictionaries in the biomedical domain.

We used the GENIA corpus, which is rich in elliptical patterns, to evaluate the performance of the system according to the quality of the dictionary. The GENIA corpus has been used frequently as the evaluation corpus for NER systems in the biomedical domain. It consists of entity mentions and coordinated NPs consisting of entity mentions from 1999 MEDLINE abstracts. The GENIA corpus has 11 types of tagged coordinating conjunctions: AND, BUT_NOT, OR, AS_WELL_AS, AND/OR, AND_NOT, TO, NEITHER_NOR, THAN, VERSUS, and NOT_ONLY_BUT_ALSO. The AND and OR coordinating conjunctions comprise 87% and 10%, respectively, of all the coordinating conjunctions. The GENIA corpus has 1585 coordinated NPs with ellipses, and 174(11%) coordinated NPs with complex ellipsis.

Our tests were performed under the assumption that our system is aware of the non-elliptical mentions of all named entities written in documents, unlike other NER systems. Thus, we manually extracted 3,434 entity mentions from 1585 coordinated NPs and 75,042 entity mentions from NPs without using a coordinating conjunction. Then, we constructed the dictionary consisting of 78,476 entity mentions altogether. Our system was configured to use 10 coordinating conjunctions (excluding the TO coordinating conjunction).


                        Table 2
                         summarizes the performance evaluation results of ellipsis resolution methods in coordinated NPs. In a coordinated NP, if all non-elliptical entity mentions found by the system agree with the mentions tagged by GENIA’s experts, the coordinated NP was considered as found. Our system was compared with the Buyko [3] system. The Buyko system uses the ML-based approach, which differs from our dictionary-based approach, for ellipsis resolution. Nevertheless, we decided to compare are our system and the Buyko system because there are very little researches about identifying non-elliptical entity mentions excluding the Buyko’s work in biomedical domain. We just refer the test result of [3] rather than reproducing Buyko’s work in different environment. The Buyko system achieved 86% accuracy in identifying non-elliptical entity mentions in 158 randomly selected coordinated NPs. Our system achieved 94.26% accuracy of ellipsis resolutions in all coordinated NPs. The accuracy of our system is 94.54% and 91.95% in resolving simple and complex ellipses, respectively.


                        Table 3
                         summarizes the performance evaluation results of identifying the non-elliptical entity mentions. If all the words of an entity mention found by the specific method agree with the words of the named entity tagged by GENIA’s experts, we considered it a true positive. Our system was compared with the baseline system using a dictionary-based longest matching method. The baseline system and our system are the same except that our system has only the resolving ellipsis module. Both the systems used the same dictionary. The baseline system could not identify entity mentions with gaps, achieving a recall of only 40.01% in NP
                        1, coordinated NPs consisting of entity mentions tagged by the GENIA experts. In contrast, our system could identify almost all entity mentions, and achieved 95.20% recall in NP
                        1. The precision of the baseline system was very low because it identified the partial text string of a non-elliptical entity mention in NP
                        1. Conversely, our system achieved 92.11% precision in NP
                        1. However, our system had a lower precision of 53.49% in NP
                        2, all coordinated NPs in the GENIA corpus.

We analyzed the 165 false negative cases obtained by our system in NP
                        1. Almost all of these errors occurred during preprocessing, because numbers are not used as token separators. For instance, the experts identified the EMS {’Stat5a proteins’, ’Stat5b proteins’} from the EMSEE ‘Stat5a and b proteins’. If the ‘Stat’ text string had been separated during tokenization, our system would find the EMS. Thirteen false negative cases occurred in process for selecting author’s intended EMS. For instance, our system identified the EMS {‘p50/ p65’, ‘p50/ p50’, ‘p50/ c – rel complex’}, instead of the EMS {‘p50/ p65 complex’, ‘p50/ c – rel complex’}, from the EMSEE ‘p50/ p65 and p50/ c – Rel complexes’. These cases represent just 0.38% of all cases.


                        Table 4
                         gives the evaluation results for system performance according to the algebraic EMSEE patterns. We condensed instances of more than two coordinated NMLs directly connected to each other with ⊕ operators, i.e., N
                        ⊕…
                        N was reduced to the two coordinated NMLs N
                        ⊕
                        N, to simplify the algebraic EMSEE patterns. Our system failed to find 91 EMSs of the 1585 coordinated NPs with ellipses: 66 backward ellipses, 11 forward ellipses, and 14 complex ellipses. The annotated false negatives in Table 4 are:
                           
                              (1)
                              
                                 control, E2-treated, and TAM-treated ER
                                 
                                 +
                                 
                                 and ER- cells
                              


                                 STATs1, −3 DNA binding and growth arrest
                              


                                 not only PMA- or TNF-induced, but also constitutive, HIV-enhancer activity
                              


                                 GATA-1 and −2 or GATA-1 and −3 gene products
                              

The first error case was caused by the module for finding semantically valid EMSs. Our system could not identify the EMS {‘control ER +’, ‘control ER −’, ‘E2 – treated ER +’, ‘E2 – treated ER −’, ‘TAM – treated ER +’, ‘TAM – treated ER –’} because the system was configured to use a maximum of 128 nodes at each stage of the Apriori algorithm. Our system could successfully identify it with 512 nodes. The second was caused by the tokenization during preprocessing, and the third was caused by the coordinating conjunction ‘not only, but also’. The fourth case was caused by support rule 4. The EMSEE ‘GATA – 1 and – 2 or GATA – 1 and – 3 gene products’ elicited four entity mentions, ‘GATA – 1 gene product’, ‘GATA – 2 gene product’, ‘GATA – 1 gene product’, and ‘GATA – 3 gene product’. However, our system identified only three entity mentions, because the ‘GATA – 1 gene product’ mention was duplicated.

Because acquiring an ideal dictionary is difficult under realistic conditions, we performed an experiment to investigate how the number of missed entity mentions in the dictionary affects the performance of our system. Fig. 10
                         shows the degradation of our system’s performance against the ratio of missing entity mentions. Fig. 10a shows the system performance when low-frequency entity mentions in the GENIA corpus were excluded from the dictionary, under the assumption that the frequently used entity mentions are more likely to be included in the dictionary. Fig. 10b shows the system performance following the random elimination of entity mentions. The overall performance in Fig. 10b is worse than that in Fig. 10a. Fig. 10b shows that recall is more sensitive to missing entity mentions, in contrast to precision.

The CRAFT corpus is the linguistic annotation of 67 full-text biomedical publications. It consists of entity mentions and the unique identifiers of the named entities and full parse trees of sentences. The corpus has a number of named entities annotated over it, which allow a broader analysis over various named entity types: the Cell Type Ontology (CL), the Chemical Entities of Biological Interest ontology (ChEBI), the NCBI Taxonomy (NCBITaxon), the Protein Ontology (PRO), the Sequence Ontology (SO), the entries of the Entrez Gene database, and the three subontologies of the Gene Ontology (GO). Each of entity mentions is assigned with the unique identifier of a named entity in ChEBI, CL, Entrez Gene, GO, NCBI Taxon, PRO, and SO sources. The CRAFT corpus consists of 144,989 NPs, 292 coordinated NPs with ellipses, and 1036 non-elliptical entity mentions in the coordinated NPs.

We prepared two types of dictionaries to identify the non-elliptical entity mentions in a coordinated NP with ellipses in the CRAFT corpus. One is a dictionary combined with well-known dictionaries in the biomedical domain; the other is a dictionary consisting of entity mentions. The former consists of official names of named entities and the latter consists of the non-elliptical entity mentions written in documents.

The dictionaries used in the experiment are listed in Table 5
                        . T
                        1 consists of 6 sources: ChEBI, CL, GO, NCBI Taxon, PRO, SO sources, exclusive of Entrez Gene. T
                        2 is an entity mention dictionary which consists of continuous entity mentions (102,358) and discontinuous entity mentions (1642). T
                        3 consists of 80% of continuous entity mentions tagged in individual full-texts under the assumption that there is a NER method which can only recognize 80% of continuous entity mentions. T
                        4 consists of 100% of continuous entity mentions tagged in individual full-texts in the same manner. The experimental results of the proposed system using T
                        1, T
                        2, T
                        3, T
                        4, T
                        1
                        +
                        T
                        3, and T
                        1
                        +
                        T
                        4 dictionaries are listed in Table 6
                        .

The system using T
                        3 and T
                        4 dictionaries without discontinuous entity mentions achieved high performance similar to the performance of the system using the dictionary T
                        2. However, the performance of the system using T
                        1 was much lower than that of the one using T
                        3 and T
                        4. The performances of the systems using T
                        1
                        +
                        T
                        3 and T
                        1
                        +
                        T
                        4 are lower than the ones using T
                        3 and T
                        4, individually. A number of official entity names in T
                        1 led to degradation in precision because the system using T
                        1 identified the partial text string of a non-elliptical entity mention. The lack of entity mentions in T
                        1 also led to degradation in recall. Consequently, the dictionary consisting of entity mentions are more effective for ellipsis resolution than the dictionary combined well-known dictionaries.

In the CRAFT corpus, the system using the dictionary T
                        2, which consists of non-elliptical mentions of all named entities written in documents, does not perform well as shown in the GENIA corpus, mainly because of the tagging scheme of concept annotation used in the CRAFT corpus. Because the non-elliptical entity mentions of the CRAFT corpus are annotated based on unique identifiers of a named entity in ChEBI, CL, Entrez Gene, GO, NCBI Taxon, PRO, and SO sources, the words that do not fit the named entity in sources are excluded by using a gap. For instance, CRAFT experts annotated two GO (biological process, molecular function) entity names of the ‘protein autoprocessing’ (GO:0016540) and ‘expression’(GO:0010467) in ‘protein expression and autoprocessing’ text string. As a result, the system did not recognize the ‘protein autoprocessing’ entity mentions because those entity mentions did not have an equal syntactic structure between them.


                        Table 7
                         shows the experimental results of the system using T
                        3 dictionary according to named entity types. The system in ChEBI, GO (CC), NCBITaxon recorded high performance for ellipsis resolution, but the system in Entrez Gene, GO (BP,MF) achieved a low F-score below 60%. In Entrez Gene, the system had many errors due to parenthesis tokens, which is not relevant to coordinating conjunctions. For instance, the system did not recognize two entity mentions ‘mouse Tif1α’ and ‘Mm Tif1α’ in the NP ‘mouse (Mm) Tif1α’. The major reason for errors in GO (BP,MF) is a difference of the tagging scheme for concept annotation, mentioned earlier.

@&#DISCUSSION@&#

Our system exhibited a high precision of 92.11% in identifying the non-elliptical entity mentions limited to coordinated NPs tagged by the GENIA experts. However, the our system in NP
                     
                        2
                      record in Table 3 shows that, considering all coordinated NPs in the GENIA corpus, our system had a lower precision of 53.49%. We analyzed the false positives of the result to find the reason for the difference between performance in NP
                     1 and that in NP
                     2. As a result, 95%(266/280) of the false positives turned out to be true positives through our verification of about 10% randomly selected abstracts. The following two examples illustrate representative cases of false annotations. First, the GENIA experts did not regard the ‘human T lymphocytes and monocytes’ text string as the EMSEE, and thus tagged it as two entity mentions (‘human T lymphocytes’ and ‘monocytes’). However, the text string is an EMSEE with an ellipsis, and should therefore be tagged as the EMS {‘human T lymphocytes’, ‘human monocytes’}. Second, the GENIA experts missed some named entities in the corpus. As a result, there are cases where coordinated NPs were not tagged as such in the GENIA corpus. For example, the ‘Jurkat and EL4 cells’ text string was tagged as the EMS {‘EL4 cells’}. However, this should be tagged as the EMS {‘Jurkat cells’, ‘EL4 cells’}. It was very difficult to obtain a consensus among experts in annotating entity mentions. We believe that annotation difficulties resulted in the mismatch between our results and those of the GENIA experts.

We also discovered some problems with our system through false positive analysis in the GENIA corpus. System errors were frequently observed in the algebraic EMSEE pattern, N∗(N
                     ⊕
                     N). For example, the system identified the EMS {‘T cell malignancies’, ‘T cell expression’} from the EMSEE ‘T cell malignancies and the expression of the EBV receptor’, because the coordinating conjunction can be used in the enumerating phrase and clause, as well as in enumerating words. If the system works with the NP instead of the sentence through shallow parsing, the problem may be solved. Syntactical rephrasing such as ‘T cell malignancies and the EBV receptor expression’ introduced in [19] also helps to resolve the problem.

One limitation of our system is that we cannot entirely depend on the GENIA annotations. We showed that false positives of our system turned out to be true positives through verification. However, we think that there also remains a possibility of finding more false negatives than previously detected.


                     Fig. 11
                      shows the search space reduction of our support and discard rule in the module for finding semantically valid EMSs in the GENIA corpus. As the size of the candidate entity sets grows incrementally, the size of the default search space grows exponentially. However, the profound pruning effect of the support and discard rule can decrease the growth rate in the search space from exponential to linear, as shown in Fig. 11a. Fig. 11b shows the use of rules by the growth of candidate sets. Discard pruning, unlike support pruning, may induce false identification. The significant difference in usage between support and discard pruning is encouraging. The ratio of support rules leading to search space reductions was 87.64%, 33.76%, 17.91%, and 8.71%, respectively. The sum exceeded 100% because each rule could coexist simultaneously.

We made the assumption, based on the parallelism, that authors prefer elliptical expressions to non-elliptical expressions. In most cases, the EqualityScore function was efficient for selecting author’s intended EMS. In fact, our system showed a precision of 99.18%(1572/1585) in selecting author’s intended EMS from the semantically valid EMSs.

We proposed algebraic EMSEEs to represent relationships between words in a coordinated NP. The algebraic operators can also represent relationships between phrases in sentences including coordinating conjunctions. It means that the distributive laws of algebraic operators can restore original sentences completely. Consequently, expansion process using the distributive laws helps event extraction tasks to extract multiple events from coordinated sentences.

The proposed system is not only used as a NER itself, but also as the post-processing component of existing NER systems. The dictionary for the system can be constructed using automated dictionary construction systems or by merely gathering all entity mentions that are recognized by existing NER methods without a significant alternation of their mentions. The system as post-processing component has three advantages for ellipsis resolution. First, the system can improve the performance of a existing NER system with ellipsis resolution in coordinated NPs. Second, the system is domain independent because it uses entity mentions recognized by existing NER systems. Third, the system is able to achieved high performance on ellipsis resolution because the system uses an entity mention dictionary optimized for individual documents. Thus, the system as post-processing component can effectively identify the non-elliptical entity mentions without great expense. However, the system will not be useful for identifying non-elliptical entity mentions previously unknown or not present in an entity mention dictionary.

@&#CONCLUSIONS@&#

In this study, we presented a new method for identifying non-elliptical entity mentions in a coordinated NP with ellipses. To resolve complex ellipsis in a coordinated NP, we propose both intuitive graph-like and formal algebraic representation of a coordinated NP with ellipses. We modeled the process of both transforming non-elliptical entity mentions into a coordinated NP, and identifying non-elliptical entity mentions from a coordinated NP algorithmically. We developed a practical NER method that uses linguistic rules based on the two representations, and optimized the system based on the Apriori algorithm which greatly reduces processing time for resolving ellipsis.

The proposed system achieved 92.11% precision, 95.20% recall, and 93.63% F-score in the identification of non-elliptical entity mentions in the GENIA corpus. The system resolved simple ellipses with 94.54% accuracy, and complex ellipses with 91.95% accuracy in the GENIA corpus. Performance evaluation showed that the system could efficiently resolve both simple and complex ellipses. Under realistic conditions, the system achieved 78.47% precision, 67.10% recall, and 72.34% F-score.

We tested the proposed method only in the biomedical domain. However, we are sure that the method can resolve ellipses in various domains. For this purpose, we are currently developing an automatic dictionary construction tool using large document collections, and simultaneously constructing immediately available dictionaries for ellipsis resolution in biomedical and general domains.

@&#ACKNOWLEDGMENTS@&#

This work was supported by ACE program through the National Research Foundation of Korea (NRF) grant funded by the Korea Ministry of Education, Science and Technology (MEST) (No. 20100029093).

@&#REFERENCES@&#

