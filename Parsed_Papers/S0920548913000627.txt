@&#MAIN-TITLE@&#Using e-learning standards in educational video games

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Deliver games in Virtual Learning Environments exploiting tracking and adaptation.


                        
                        
                           
                           We analyze the current e-learning standards for content interoperability.


                        
                        
                           
                           We propose 3 game integration models taking as start point the previous analysis.


                        
                        
                           
                           The model implementation in the eAdventure game authoring platform is described.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Educational standards

Game based learning

Virtual Learning Environments

Authoring tool

eAdventure

@&#ABSTRACT@&#


               
               
                  The integration of educational video games in Virtual Learning Environments (VLEs) is a challenging task in need of standardization to improve interoperability and to safeguard investment. The generalized use of VLEs has fostered the emergence of rich contents, and different standards exist to improve their interoperability and reusability. This work describes a proposal of how existing e-learning standards can be used to improve the integration of educational games in VLEs, while introducing a set of models that take into account the features of the selected standards. A specific implementation of this approach in the eAdventure game platform is also presented.
               
            

@&#INTRODUCTION@&#

Online learning is widespread in today's educational environments, supported by Virtual Learning Environments (VLEs) such as Moodle™, Sakai™, or Blackboard™. New VLEs are not only delivery front-ends for on-line repositories of contents, but key elements in the new educational experiences dealing with all the aspects of users, courses and communication management. In addition, there is a generalization of VLEs use in all levels of education, from K-12 to universities or even in-company training programs. However, high quality content is still a key element for an effective VLE-mediated teaching/learning process and this content development is a challenging and costly process that usually involves interdisciplinary teams [1]. In this line, there is a growing interest in the active integration of highly interactive contents (simulations, games, etc.) in VLEs, aiming to attract and retain students and to improve the educational process. In addition, the interactive nature of these contents can be used to improve learning, as they support bidirectional communication (i.e. content–VLE and VLE–content) that can be used to adapt content to specific students' needs and to provide more detailed and accurate assessment, compared to more static contents (e.g. PDFs). However, there are open issues related to the interoperability of these new services due to the number of coexisting e-learning standards and the lack of a general consensus on how to use them to model the new features that interactive contents provide. Furthermore, e-learning standards compliance in mainstream VLEs is limited. Therefore, to obtain complete coverage, the same interactive content usually has to be versioned to target each specific platform, or in the best case a set of platforms, thus increasing development costs.

Among the set of choices in highly interactive multimedia contents, games are positioned as a good complement to traditional education as they have several interesting features from a pedagogical perspective. As Kebritchi and Hirumi [2] state in a comprehensive educational game review, educational games are designed taking into account several learning theories such as learning by doing, discovery learning or constructivist learning. Games present interactive environments where students learn through (difficult) challenges. Games increase engagement and students are usually receptive to this type of media because they are used to playing games. Besides, game-based simulations (systems that simulate a real environment but at the same time implement game mechanics) provide environments for authentic learning that can be very adequate for learning procedural knowledge while allowing students to practice within a highly realistic but risk-free environment.

At the same time, the high interactivity in games allows for developing new strategies for evaluation and assessment of students' progress that are much more detailed [3,4]. Games are also more flexible than other contents, supporting adaptive learning almost in a natural way. Both the improvement of assessment techniques and adaptive learning are considered key aspects for the next generation of learning systems [5,6], which is a strong argument in favor of integrating games in VLEs. However, nowadays there is not a widely accepted standard that deals with the integration of educational games in VLEs as active content (i.e. that can have bidirectional communication with the VLE).

In this paper we propose how to use existing e-learning standards to package, model and deploy games that can take advantage of the adaptation and evaluation features in VLEs. In e-learning standards the Learning Object (LO) is a central concept that offers a new point of view on content modularization in the learning process. LOs are small pieces of self-contained content that can be used to compose full lessons or courses by taking into account their reusable and context-independent nature. We propose to use the LO approach to encapsulate games in order to deliver games and communicate them with VLEs while following e-learning standards. As a case study, we also present a specific implementation of this approach using the eAdventure platform.

As the e-learning field grew, so did the need for mechanisms that facilitate sharing and reusing high quality content. These mechanisms can protect the investment in content production against platform migrations and avoid a potential vendor lock-in. The Learning Object (LO) model was proposed [7] as a logical answer to these needs. According to this model LOs are defined as self-contained packages of educational content that can be stored, searched, reused and combined for the creation of more complex educational contents. It is worth clarifying that a LO can represent different levels of granularity, from simple educational content to a composition of educational contents (encapsulated as LO or not), lessons, courses, etc. Thus, the LO provides a way to encapsulate learning tools and educational contents by giving them a structure and allowing for the creation of complex structures though aggregation with other LOs, thus providing flexibility to educators at the time of reusing pre-existing materials.

The LO model serves as a conceptualization and abstraction of multiple standards that different organizations have produced, which are aimed at guaranteeing the interoperability of educational content across VLEs. Not only organizations related to e-learning – e.g. IMS Global Learning Consortium
                        1
                     
                     
                        1
                        
                           http://www.imsglobal.org/.
                      (IMS), Advanced Distributed Learning
                        2
                     
                     
                        2
                        
                           http://www.adlnet.org.
                      (ADL) and Aviation Industry Computed Based-Training Committee
                        3
                     
                     
                        3
                        
                           http://www.aicc.org.
                      (AICC) – but also international standardization bodies – e.g. IEEE Learning Technology Standards Committee
                        4
                     
                     
                        4
                        
                           http://www.ieeeltsc.org.
                      (IEEE LTSC) and ISO/IEC Technical Committee JTC1 SC36 – are dedicated to this task.

Specifications related to content interoperability usually cover, partially or totally, a subset of:
                        
                           1)
                           
                              content tagging, to add meta information (i.e. educational objectives, age range, etc.), to facilitate LO search and retrieval;


                              content packaging and structuring, to define a common format to store and structure LOs in VLEs;


                              VLE-to-content communication, to establish a communication channel between the content and the back-end system (VLEs in most cases) to exchange information (e.g. students' performance records and profiles);


                              content sequencing, to define the lesson flow while taking into account several factors (students' profile, students' performance in previous activities, etc.);


                              interoperability of e-learning services and tools, to facilitate the integration of different tools among different VLEs.

In e-learning the integration of new content must take into account the LO model to guarantee interoperability, and so it should be for games as well [8]. Moreover, applying the LO model to games has advantages, such as having a common mechanism to tag and package the games, which facilitates storage, search, distribution, deployment and reuse. Supporting active bidirectional communication between games and VLEs will allow the VLE to take advantage of the rich information generated from the in-game user interaction, improving the VLE tasks of student tracking or performance assessment. It will also enable the adaptation of the content by taking into account the previous interactions and students results. This is very common in games, where users can experience different game paths because they achieve different levels of knowledge or skills. It can also facilitate the combination of games with other types of contents or activities (the results obtained in a game can affect the outcome or the flow of the educational design). Besides, recent standards related to the interoperability of e-learning services open new possibilities in the integration of games in VLEs, such as advanced learning analytics features.

In this section we analyze current e-learning standards that tackle interoperability issues for educational contents in the areas identified in the previous section.

The IEEE Learning Object Metadata (LOM) family of specifications (IEEE 1484.12) is by and large the most adopted content-tagging specification [9]. Taking as a starting point the previous efforts made in the definition of a meta-data standard in IMS Learning Resources Meta-data [10] (considered the draft version of LOM), LOM appeared as a mature standard and is still in use. However, LOM is being revised in ISO/IEC 19788 Metadata Learning Resource, which tries to be more flexible by combining the ideas of LOM and Dublin Core. It specifies seven aspects of an LO that can be described (educational, technical, life cycle, relations with other contents, etc.) and the vocabularies used to describe each one.

This model can be customized and extended to fit different educational systems through application profiles. There are several LOM application profiles that localize the standard, adding fields and modifying the vocabularies as needed to adapt it to the geographical and cultural needs of each region. These are the cases of CanCore [11] for the Canadian system, UK LOM Core [12] in the UK and LOM-ES [13] in Spain.

IMS-CP [14] is the most widely adopted e-learning specification for content packaging, having been adapted also by other organizations to create their own standards. For example, IMS-CP 1.2 was taken as a starting point by the International Organization for Standardization to develop an international family of standards (ISO/IEC 12785) for learning-content packaging.

IMS-CP is flexible enough to support different levels of packaging granularity. IMS Content Packages are zip files that include all the assets, materials and tools of the LO, along with a manifest file that describes the structure of the assets contained in the LO. The manifest also allows the linking of different resources with meta-data. Optionally, sub-manifests can be defined to provide more information about each of the contents in the package.

In contrast to the standards described in Sections 4.1 and 4.2, multiple specifications for VLE–LO communication coexist. These are the most relevant:
                           
                              •
                              
                                 CMI and IEEE 1484.11. Computer Managed Instruction (CMI) guidelines cover multiple areas of interoperability of LOs, but they are especially relevant for proposing a model that supports bidirectional communication between VLEs and LOs and a common data model for exchanging information. IEEE LTSC took this work as a basis for developing their data exchange model (IEEE 1484.11.1) and communication specification (IEEE 1484.11.2).


                                 IMS-SSP. The IMS Shareable State Persistence model [15] provides a mechanism to arbitrarily store complex data generated by the LO in the VLE and to share these data among different educational contents (inside or outside the same LO). IMS-SSP provides a customizable storage mechanism not tied to a particular data model and a means to share this information among different LOs.


                                 SCORM. The ADL Sharable Content Object Reference Model (SCORM) [16] is one of the most popular e-learning standards. It covers content tagging, packaging, sequencing and communication. SCORM uses a customized version of (see Table 1
                                 ) IMS-CP, and IMS-Simple Sequencing (see Section 3.4), creating an application profile of them. This specification has put a strong emphasis on active content, relying on CMI (IEEE 1484.11) to define communication protocols and data models.

Different versions of SCORM coexist, being SCORM 1.2 and SCORM 2004 the most popular. There are important differences between them in the nomenclature and elements of the communication API and data model. The structure of the IMS-CP-based manifest file also changes. While SCORM 1.2 uses IMS-LRM for content tagging, SCORM 2004 uses IEEE-LOM. Besides, some VLEs have implemented SCORM 1.2 but not 2004 and vice versa.

SCORM 2004 (3rd edition) has been proposed as a technical recommendation (de facto standard) by the ISO/IEC JTC1 SC36 committee in the form of ISO/IEC TR 29163 family. The ADL SCORM 2004 4th edition has also adopted IMS-SSP.

Two main standards for content sequencing coexist:
                           
                              •
                              
                                 IMS-SS. IMS Simple Sequencing (IMS-SS) [17] allows for the creation of adaptive self-guided courses. The adaptive behavior is defined through if-then-else rules, taking into account the students' performance throughout the course.


                                 IMS-LD. IMS Learning Design (IMS LD) [18] allows for modeling complex collaborative and adaptive learning scenarios. IMS-LD is typically used to define the orchestration and sequencing of the activities performed during the learning process, assigning these activities to different roles (e.g. instructor, learner) and providing the environment (i.e. learning materials, supporting tools, etc.) needed during the learning process.

The main difference between these two specifications is that IMS-SS only considers scenarios where students are isolated (i.e. no collaboration among peers), while IMS-LD supports collaborative activities [19]. In both cases LOs are somewhat “intelligent” as the students' interaction with the educational content can affect the following activities. In games this would allow for information gathered from play to be used to drive the learning flow. While IMS-LD seems to be deprecated to some extent, IMS-SS is a newer specification and its potential for games will be determined by how widespread it becomes in the e-learning industry.

The main standards for the integration of services and tools with VLEs are:
                           
                              •
                              
                                 IMS-LTI. IMS Learning Tool Interoperability (IMS-LTI) [20] aims to facilitate the integration of external tools (even developed by other vendors) into VLEs without requiring the user to authenticate themselves in different systems (single sign-on is used to make multiple authentication transparent to the user). IMS-LTI is an ambitious specification and it is being defined incrementally with richer services and data exchange.


                                 IMS-BLTI. IMS-BLTI [21] was born as a profile of IMS Learning Tools Interoperability (IMS-LTI v1.0) with the aim of producing a simpler specification ready for adoption in short term.


                                 IMS-LIS. IMS Learning Information Services (IMS-LIS) [22] is a specification that defines a set of services aiming to facilitate interoperability in different VLEs and among VLEs and Tools. IMS-LIS allows external tools to manage information related to users, courses, group enrolments, learning outcomes, etc.


                                 IMS-CC. The IMS Common Cartridge (IMS-CC) [23] is a comprehensive specification that may be considered as an alternative to SCORM. Compared to SCORM, IMS-CC proposes a more distributed architecture where remote services and external tools coexist. IMS-CC represents a step forward in content distribution including some of the ideas behind Web 2.0, such as widget mash-ups. It uses application profiles of IMS-CP and IEEE-LOM among other specifications (see Table 1).

These sets of new standards released by IMS are designed to be used in combination. With the term “Digital Learning Standards”, IMS aims to propose a holistic solution that covers all the aspects of educational contents interoperability in an incremental manner. All these specifications are tightly linked. IMS-CC is the package where all the contents and tools to be used are defined. In this sense, IMS-BLTI is included in CC, thus external tools can be referenced inside a cartridge. IMS LTI Basic Outcomes Service gathers a set of use cases and possible applications in order to explore how to properly apply LIS in BLTI. IMS LTI Basic Outcomes Service is not considered a standard, as it is just a case study with a reduced set of LTI fields to better understand and evaluate the importance of each kind of data.

It is important to notice (see Table 1) that some standards use other lower-level standards for certain aspects such as metadata or content packaging. For instance, SCORM uses IMS SS, IEEE1484, IMS CP and IEEE LOM. Also IMS CC packages an e-learning content using IMS CP and IEEE LOM and uses IMS BLTI or IMS LIS depending on the communication requirements.

As educational simulations and games are gaining acceptance a new concern arises, particularly for administrators, about how this new tool can be used and integrated in an effective way with the already established educational tools. This concern is not new; it arose years ago with the development of e-learning and the need for ensuring content interoperability. The LO model was proposed to address the problem. In this section, we analyze three different models for the integration of games in VLEs elaborating on the previous study of the e-learning standards presented in Section 4 and taking into account the LO features related to games identified in Section 3. The three models presented consider different alternatives for delivery and communication with the aim of providing a general overview about the integration possibilities offered by current e-leaning standards.

In these models there is a set of elements related to the game and the VLE services (Fig. 1
                     ). The game is created in a game platform and exported following certain standards or it is retrieved from a content repository. On the VLE side, once the game has been uploaded, the content service is in charge of delivering it and can be connected with the student profile service to manage and update student information. The game platform can also provide the game through a game proxy called by the content service. The game proxy is in charge of remotely providing not only the game (i.e. without uploading it into the VLE) but also a set of game services (report service, tracking service, etc.).

The “black box” integration model (Fig. 1.a) is built upon the possibilities that IEEE LOM and IMS-CP standards provide covering content tagging and packaging. It considers games as independent pieces of content that can be launched from the VLE but with no active communication. According to this model the game is considered just like any other Learning Object. The game lives in the VLE platform and thus it has to be uploaded to the VLE when the course is created. In this model, the VLE does not have any information about what the student is doing when the game is running.

In the VLE there must be a content service that is able to run the game. That is, the VLE is responsible for the game delivery and it should compatible with IMS-CP. Both the VLE's content service and the game provider (i.e. the person who includes the game in the VLE) agree on IMS-CP as the format used to package and deliver the game. From a technical perspective, the games should be developed with technologies that can be deployed through a web page (e.g. Flash, Java Applet or HTML 5).

The “white box” integration model (Fig. 1.b) is built upon the ideas present in ADL SCORM that not only cover content tagging and packaging (because SCORM uses IMS-CP and IEEE LOM in its definition), but also consider active communication between the game and the VLE. Following the same delivery aspect commented in the “black box” model, the “white box” model would typically open a communication link between the game and a VLE service (i.e. student profile service). This communication is implemented using the CMI communication protocol and a data model that is also part of the SCORM definition.

The “decoupled” model is built upon the distributed delivery of content and the interoperability of tools and services offered by IMS-BLTI, IMS-LTI and IMS-CC (Fig. 1.c). It is similar to the widget mash-up approach, where web applications are built by combining external applications and services that are presented to the user through an integrated view.

In this model, the external server is the game provider, not the VLE. The game provider only hosts a game proxy package that is used as a hook between the VLE and the game platform server. The VLE's content service calls the game proxy that is in charge of delivering the game. Although the game could be deployed with or without active communication, these services usually provide support for the IMS-LTI Basic Outcome Service specification that allows for sending data back to the VLE. If such is the case, the game proxy will also manage the communication between the game and the VLE.

The three integration models take advantage of the possibilities offered by current e-learning standards in terms of delivery and communication: non-communicative and VLE-tied delivery of the “black box” model; communicative and VLE-tied delivery of the “white box” model; and VLE-independent delivery of the “decoupled” model, with the possibility of including communication between game and VLE (Fig. 2
                        ). These models require very different development efforts and impose different requirements about the VLE e-learning standards support. There is not a widely accepted model for deploying educational games, so each of these three models will better suit different learning scenarios where games can be applied.

The main strength of the “black box” model is the widespread VLE support of the standards on which it is built. IEEE LOM and IMS-CP for content tagging and packaging respectively have already reached a very stable and mature state, providing a good balance between flexibility and market acceptance that makes them a good mechanism to introduce games in VLEs. The main drawback is that in the “black box” model the game runs in isolation from the VLE and therefore active communication cannot be established. This limits the potential of the games as tracking and assessment tools. For example, the in-game student assessment information can be shown at the end of a game session as self-assessment, but it cannot be sent to the VLE for evaluation purposes. The lack of communication also limits the potential of the games to support adaptive learning, since the game cannot take into account students' profiles or their performance in previous activities. This prevents the possibilities of storing game play statistics and resuming game-play sessions. Finally, this model is dependent on updates of the game where the course creators would need to manually redeploy the game in the VLE.

The “white box” model provides communication between games and VLEs allowing for more sophisticated uses of in-game information (e.g. assessment, adaptation). The current applicability of the model is hindered by the status of SCORM in terms of supporting communication (see Section 4.3). The data model in SCORM (last version: 2004, 4th edition) can be useful for games as, for example, it allows linking the player's progress in the game with the accomplishment of educational goals, but it was not designed to support communication from/to LOs capable of producing a large amount of data. For example, information cannot be shared among LOs, thus limiting how the games could affect the sequence flow or adapt other games or activities. The expressiveness of the data model and the amount of data that can be stored are constrained, which conflicts with the idea of tracking students' interactions and collecting game logs with detailed information about them [24]. Furthermore, it has little support for collaborative learning and its content sequencing capabilities are limited. Finally this model is as dependent on game updates as the “black box” model (if the game is modified, it needs to be redeployed).

Other standards could support the implementation of the “white box” model. For instance, IMS-SSP can be particularly relevant for games because it supports storing the large sets of structured and unstructured data that games can produce, which are usually difficult to fit into a predefined data model. The IEEE 1516 family of standards (Standards for Modeling and Simulation) could also be used to propose similar solutions to these problems. Nevertheless the adoption of IMS-SSP and IEEE I516 is hindered because usually VLEs do not support them.

The “decoupled” model is a more powerful approach but also requires from the VLE a more comprehensive support of standards. In this “decoupled” model, the combination of IMS-CC, IMS-BLTI and IMS-LTI Basic Outcomes Service allows the integration of the game server platform and the VLE with minimal restrictions. The standard mechanism proposed by IMS-LTI Basic Outcomes Service allows the VLE to collect summarized data of all of the information generated by the game (student's summarized grade, etc.) and use this information within other tools of the VLE. In contrast to the “white box” model, where the type and amount of information that can be collected are constrained by the data model (e.g. SCORM), the “decoupled” model allows for collecting richer data as the game platform is a native tool of the VLE. Additionally, the fact that the game developer does not lose the control over the game allows for the implementation of more powerful adaptive learning strategies compared to the “white box” model.

The “black box” model has meant the first step towards a standardized integration of games in VLEs, but it is limited as it does not allow for exploiting the full potential of games in the ways current educational research has pointed out. This model is appropriate for game experiences where the teacher does not need to get information about the student's in-game performance, as when the games are used as mere complementary activities. The “white box” and the “decoupled” models are the most promising educational solutions for the near future. Regardless of the advantages and disadvantages of these two models, each one can be suitable for different learning scenarios. For example, the “white box” model is more appropriate for users without experience using ICT in education because the data model helps them to effectively use the information extracted from video games, so it could be adequate for main activities and homework. The “decoupled” model imposes on educators the need for a better understanding of some ICT aspects but offers more opportunities to the educational game developers because this model provides a good balance between advanced characteristics (e.g. if complex adaptation behaviors are required) and integration with e-learning platforms.

eAdventure is an educator-oriented game authoring platform that tries to reduce the development costs and technical complexity of developing educational games [25]. This platform includes a user-friendly graphical editor to develop games without the need of technical background and a game engine to run games in different ways (desktop, web environments, etc.). eAdventure provides a specific toolset of features focused on enhancing the educational value of the games: a tracking and assessment system and a game adaptation engine that can take into account students' characteristics and their interactions in the game [4].

Since the inception of the eAdventure platform, one of its core objectives has been the integration with the existing e-learning platforms and tools. This objective is not free of issues because of the high number of different VLEs and their continuous evolution. Choosing a widespread e-learning standard increases the chances of being compatible with VLEs. Thus, one of the objectives of the eAdventure platform is the adoption of standards to increase its impact and, at the same time, to reduce the development and support costs of the platform.

The standards implementation in the eAdventure platform imposes requirements both in the game engine and in the game editor. In particular, due to the wide range of standards with which to adhere, we developed a middleware architecture [24] that provides a flexible, extensible and configurable way to include different modules that deal with the different aspects involved in the game exportation process: packaging, tagging and communication. From a technical point of view, we built a set of integration endpoints in the middleware architecture that provides support for the integration models described in Section 5. From the user's point of view, using this architecture, the same game not only can be included in many different VLEs following e-learning standards, but also can keep the same assessment and adaptation features in all of these systems (if the standards support them) [24].

To be more specific, the eAdventure platform allows for the game exportation following the Learning Object model, and thus adhering them to different standards — integration models. eAdventure gives support for IMS-CP, SCORM (both v1.2 and 2004) and an exportation format based on IMS-BLTI that was developed for the GAMETEL project [26]. For each standard supported, a different exportation profile is included in eAdventure.

The eAdventure editor assists in this process by hiding the technical details of the standards as much as possible. In the game editor, the created games would be compliant with different standards only by configuring the game profiles. It is not the purpose of eAdventure to provide a full-featured editor for all of the supported standards. Rather, the emphasis is placed on the parts of the standards that are best aligned to serious games uses. For example, the eAdventure editor allows for the inclusion of IEEE LOM educational metadata. Nonetheless, external editors like RELOAD can be used to edit the game packages if more meta-data are needed.

The following sub-sections describe how the eAdventure platform supports the integration models described in Section 5 and how the games are processed in each case to comply with standards from a developer's point of view (Sections 5.1, 5.2 and 5.3) and from a game creator point of view (Section 5.4). As eAdventure is an open-source project, more technical details about the middleware architecture can be found at es.eucm.eadventure.common package repository.
                        5
                     
                     
                        5
                        svn co https://e-adventure.svn.sourceforge.net/svnroot/e-adventure e-adventure.
                     
                  

eAdventure provides an exportation profile to package the games as “black boxes” following the IMS-CP standard. In the packaging module, the IMS-CP exportation creates a ZIP file that contains:
                           
                              •
                              The eAdventure game: a self-contained .JAR file that includes the game as a Java™ Applet and an .HTML file acting as a driver to launch the game in a browser. Note that the .JAR file contains the eAdventure engine and all of the libraries required, as well as the game description (a .XML file) and the set of artistic resources used inside the game.

The manifest: describing the structure of the package and the associated meta-data (see Section 3.2). eAdventure games exported as IMS-CP packages are mini-courses that include only one activity (the game itself).

Control files: Static .XSD and .DTD files needed to comply with the IMS-CP specification.

eAdventure includes a metadata editor (tagging module) for annotating the game LOs [27]. In the “black box” model, the tagging module allows for filling the IEEE-LOM meta-data, which is used for games exported as IMS-CP. The same standard is used on SCORM 2004 (“white box” model) and GAMETEL (i.e. game exportation for the GAMETEL project, used in “decoupled” model) [28], so the tagging module has the same configuration option for this profile. The tagging module adheres IMS Learning Resource Meta-data for games exported following SCORM 1.2 (“white box” model). The meta-data editor does not allow users to edit all of the fields of these specifications: only those that are relevant to games are included [27]. Categories that are known beforehand or that are statically available are avoided.

eAdventure provides exportation profiles for SCORM v1.2 and 2004 to broaden the number of VLEs supported. When a game is exported with any of the SCORM profiles, IMS-CP is used to package the contents. In the packaging module, the SCORM exportation creates a ZIP file that contains:
                           
                              •
                              The game (.JAR and .HTML files).

An ECMAScript script file that deals with the communication with the VLE. This script is added not only to the package but also to the manifest.

SCORM control files (.XSD and .DTD) to match the tags in the manifest with specific meanings in the application profile (vocabulary and other SCORM values).

In terms of communication, a set of functions are defined in an ECMAScript file that searches for the SCORM API and connects it to the game, managing the information exchange in both directions (game/VLE). The eAdventure game engine communication module explicitly calls the functions provided by the ECMAScript file by using the Java “JSObject” wrapper for initialization/finalization tasks and the sending/retrieval of information. Finally, the SCORM data-model is used to reflect the evaluation of the student during the game experience. eAdventure games can use this information to modify future game runs by performing adaptations to fit the needs of different students. The edition of the SCORM data model is also encapsulated to hide the technical details from the game author. The eAdventure editor also includes a “debugger” mode for SCORM exportation where the data interchanged between game and VLEs is sniffed and the user can look up the SCORM data model. This way, developers can ensure that the game is behaving in the expected way.

In terms of content sequencing, the eAdventure editor does not include a specific view to define sequencing behaviors (i.e. if-then-else rules) in the SCORM packages. Nevertheless, it is possible to use a SCORM package generated by eAdventure as part of a larger SCORM package (e.g. created on Rustici SCORM Driver editor
                           6
                        
                        
                           6
                           
                              http://scorm.com/scorm-solved/scorm-driver/.
                        ) including sequencing rules that can be influenced by the game playing experience. For example, the fields “Completion Status” and “Success Status” can be used to store general information about the level of progress and assessment of student performance in the activity and are also key elements in the conditions definition in SCORM Sequencing & Navigation. eAdventure games can affect the sequence flow by modifying these fields when some game states are reached. It is worth mentioning that a correct tagging that explains which game states perform changes in the data model is a crucial factor to help IMS-SS editors understand how the game outputs can affect the lesson flow. SCORM was the most difficult standard to implement not only because of the extensive technical documentation but also due to all of the LO configuration possibilities related to data model and Sequencing & Navigation.

The eAdventure platform includes an exportation profile that exemplifies the “decoupled” model: GAMETEL exportation. GAMETEL [28] is a research project related to the integration of video games in e-learning. For this project, an eAdventure exportation profile was created. This is a blended model between “decoupled” and “white box” models as it includes communication features. In the GAMETEL project, a VLE was developed and optimized for multi-format/device game and simulation delivery. In the GAMETEL VLE,
                           7
                        
                        
                           7
                           
                              https://sourceforge.net/projects/gametelms/.
                         a set of external tools are integrated following IMS-BLTI. A tool producer was developed for the integration of the eAdventure games, allowing for the exchange of game outcomes and their use to create conditional constrictions in the delivery of educational content in the GAMETEL VLE [29].

The GAMETEL exportation profile in eAdventure does not follow any standard because it is only a way to introduce new games in the tool producer. The tool producer injects a URL during game delivery to establish a communication path. The tracking and adaptation data is exchanged between the game and the tool producer, and later, the tool consumer hosted in the GAMETEL VLE asks for this data. The communication between the tool producer and the consumer follows a specific protocol until a new version of IMS-LTI provides better support for data interchange. The game is packaged in a .ZIP file with an .XML file where the possible attribute–value pairs that the game can report or use to adapt the game flow are located. Thus, the tool consumer can consult this information before the game is executed to create conditions over the other educational contents in a course.

In this sub-section we illustrate from a user's point of view the steps needed to export any already developed game according to each integration model. For each integration model, we describe how to configure the tagging, packaging and communication modules of the middleware architecture. The process is not tied to the characteristics of the game being exported. Thus the features of the game are not described. However, in this example a special variable “score” is used to demonstrate how communication works. The value of this score variable decreases each time the user makes a mistake. This example also assumes that the game is setup with an assessment profile that is responsible for updating score and showing its value at the end of the game. More information about the assessment profiles in eAdventure can be found in previous works [24,30].


                           
                              
                                 1.
                                 
                                    Tagging: The developer uses the eAdventure LOM Metadata editor (IEEE-LOM profile version) to fill in several fields defined in the specification, like the version number of the game or the educational level of the game. Not all of the fields are supported, just cthose that are more relevant for games (Fig. 3
                                    .a).


                                    Packaging: After tagging, the developer uses the exportation dialog (with the IMS-CP option selected) that is available through the “File” menu to generate the final content package (Fig. 3.b) that is ready for deployment in a VLE.

SCORM 2004 is used in this example to demonstrate how a game is packaged as a “white box” model (SCORM 1.2 could also be used, for example).
                              
                                 1.
                                 
                                    Tagging: The tagging process is equivalent to the “black box” model (opening up a meta-data edition dialog and setting up several fields).


                                    Communication: Before the game is packaged, the communication must be configured. This involves several steps. First, the assessment profile (component that updates the score variable) must be setup using a “SCORM 2004 profile” (Fig. 4
                                    .a). This step, which is straightforward (requires changing the selected option from a list), will load SCORM 2004's specific communication data model (CMI). The editor will guide the game developer in the process of selecting the fields of SCORM 2004 data model that will be used to exchange data between game and VLE. The game developer should set the target “CMI” data model field where the data will be sent (Fig. 4.b). In this example, the “cmi.score.raw” CMI data field is linked with the “score” game variable to store the final grade in the SCORM data model (Fig. 4.c).


                                    Packing: Equivalent to the “black model” but selecting “SCORM 2004” option instead.


                           
                              
                                 1.
                                 
                                    Tagging: Equivalent to previous models.


                                    Communication: This process is similar to the “white box” model but not exactly the same. The difference from the “white box” model is the absence of a specific data model. To set up the “communication module”, the game developer should change the “profile type” of the assessment profile to “Normal” (Fig. 4.d) (i.e. with no data model defined). Now, in the list of properties, the “ID” field is empty (the name of the properties is undefined), and the game developer is responsible for defining the name and the intended use of the data sent to the VLE. In this case, the developer types in the name “game_score” and selects the game variable “score” in the “list of properties” (Fig. 4.e), for example.


                                    Packaging: Also equivalent to previous models.

@&#RELATED WORK@&#

The games used in education are in some cases deployed as offline experiences [31,32] instead of as online experiences, due to technical limitations [33]. Nonetheless, there are several examples of online use. This is the case in games that embed tools to enhance communication between educators and students. The most representative examples are 3D Multi User Virtual Environments (MUVEs) like Quest Atlantis [34], River City [35] or AquaMoose [36]. A step forward in the direction of merging the potential of games and VLEs are the approaches where VLE tools are included inside MUVE game environments. In these environments educators are given more control over the learning process as they are provided with instructor-oriented tools that facilitate the review of students' achievements and the assignation of goal-oriented tasks to the students. For example, the NUCLEO [37] and SLOODLE [38] projects enhance the gaming experience by integrating a Moodle back-end in the game world, empowering educators with some of the assessment, communication and control tools present in this environment.

However, the importance of integrating games in VLEs as LOs has been highlighted to improve not only their interoperability but also the possibility of connecting outputs with these systems [27]. In this sense, there are several works in the literature that advocate for the inclusion of games inside SCORM packages. The first works in this direction propose to translate the outputs of the general architecture for the interoperability of simulations, a.k.a. HLA (High Level Architecture), to SCORM, running the games locally and sending the tracking data through a connector included in a SCORM package [39]. The framework SITA (Simulation-based Intelligent Training and Assessment) is a step forward, fully integrating HLA and SCORM, and allowing not only communication but also some more advanced actions such as different instructional usages [40]. These approaches are far from being widely used by educators given the technical complexity imposed.

Some works in the literature aim at facilitating the process of packaging games as LOs. Espinilla, Palomares and Bustince [41] present a set of slightly configurable games, packaged as SCORM but without communication possibilities. A more advanced solution is the open-source game engine Delta3D [42] for the development of games and HLA-compliant simulations, which allows linking actions in games with SCORM objectives [43]. In this line, several authoring tools include exportation as SCORM packages and the configuration of some communication aspects (e.g. the data model elements to send information). Chen et al. [44] proposes a system for the authoring and execution of courses that combine games with other learning tools that can be exported as SCORM packages. Game authoring tools such as Thinking Worlds allow the score to be sent to the VLE, and Raptivity also allows the tracking of SCORM interaction data. In addition, there are content repositories where educators can find educational games; for example, the AGREGA
                           8
                        
                        
                           8
                           
                              http://agrega.educacion.es.
                         initiative.

However, the use of LOs to integrate games in educational settings is not intuitive as there are no general solutions that cover the packaging and delivery while also providing a flexible way to define the communication mechanisms between the game and the VLE. Besides, approaches that facilitate exportation to many different e-learning standards are also needed, in order to protect the investment made in the game's development. Nevertheless, there are several initiatives, such as the European Network of Excellence in serious games GALA (Game and Learning Alliance), which aim to analyze the current state of games in education while studying, among other aspects, how to achieve the active integration of games following e-learning standards.

@&#CONCLUSIONS@&#

The increasing generalization of VLEs has motivated the development of e-learning standards that improve the reusability and interoperability of the educational content. But there is no consensus in the field about which of the different existing standards should be used and supported by VLEs. Separately, video games have increased in importance as educational content. However, for video games to achieve the same presence as other educational contents in e-learning environments they should comply with the standards, simplifying their deployment in the already existent VLEs (e.g. Moodle).

This paper proposes three different models for video game integration in VLEs taking advantage of the LO model and the supporting e-learning standards. These integration models are focused on delivery and content communication because there are no complete and widely accepted solutions for standards-compliant games. The eAdventure platform adheres to the three integration models presented with a set of exportation profiles that support different standards and specifications, allowing games to be exported as LOs compatible with many VLEs. This way, the editor allows for the modification of meta-data, configuring the communication and packaging the games to be included in different VLEs and content repositories without requiring technical knowledge. This also allows for the exportation of pre-existing games as different LOs with different supporting standards, increasing their reuse across different platforms and protecting the investment in their development.

It is worth highlighting that, apart from standardized solutions, there are non-standard approaches that require an ad-hoc integration of games with non-standard compliant VLEs. Non-standardized solutions decrease content interoperability, but increase flexibility and potential at the time of using games within lessons in terms of assessment and adaptation. This fact is currently being studied and taken into account in the development of the new generation of standards (e.g. IMS Digital Learning Standards), but until the final versions are released, non-standardized solutions can provide a most advantageous use of games. As an example of a non-standardized solution, the LAMS platform allows for the development of collaborative educational contents through the creation of activity sequences loosely based on the IMS Learning Design specification. Once created, LAMS sequences allow the storage of the student's performance. LAMS allows for creating complex sequence flow behaviors through a user-friendly interface, using the outputs extracted from the games if defined. Nonetheless, LAMS includes several plug-ins for the most used VLEs (Moodle, Sakai, Blackboard, etc.). This way, LAMS activities can be used in the context of other VLE courses, following the blended “decoupled-white box” model.

The eAdventure platform does not include a pure “decoupled” exportation profile, mainly due to the need for an online service to host games. However, games can be exported for the LAMS platform by exploiting assessment and adaptation features through a specific eAdventure tool [45]. The eAdventure tool is a specific LAMS plug-in (available in LAMS 2.3.5+) that is in charge of managing all the game functionalities. All the data exchanged can be consulted from the external VLE through LAMS plug-ins, but it cannot be included in their system databases to be combined with other activity reports.

Next steps in the project include the study of the new standards proposals to further investigate how to integrate games in VLEs and how they take into account the games' specificities. Furthermore, more case studies to test the advantages and shortcomings of the proposed models are needed. As future work, we are considering how to generalize the ideas about the game's integration in VLEs to other kinds of highly interactive educational contents.

@&#ACKNOWLEDGMENTS@&#

We acknowledge the following organizations that have partially supported this work: the Spanish Ministry of Science and Innovation (grant no. TIN2010-21735-C02-02); the European Commission, through the Lifelong Learning Programme (projects “SEGAN Network of Excellence in Serious Games” — 519332-LLP-1-2011-1-PT-KA3-KA3NW and “CHERMUG” — 519023-LLP-1-2011-1-UK-KA3-KA3MP) and the 7th Framework Programme (project “GALA — Network of Excellence in Serious Games” — FP7-ICT-2009-5-258169) and the Regional Government of Madrid (eMadrid Network — S2009/TIC-1650).

@&#REFERENCES@&#

