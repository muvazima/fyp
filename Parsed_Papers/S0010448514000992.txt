@&#MAIN-TITLE@&#MetaMesh: A hierarchical computational model for design and fabrication of biomimetic armored surfaces

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           
                              MetaMesh is a hierarchical computational construct to generate articulated armored surfaces.


                        
                        
                           
                           The ancient armored fish Polypterus senegalus provides source of bio-inspiration.


                        
                        
                           
                           Local, regional and global levels of organization embed functional differentiation.


                        
                        
                           
                           Articulation of scale units is preserved by neighborhood morphing techniques.


                        
                        
                           
                           The model is adaptable to a wide array of complex hosting surfaces.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Biomimetics

Bio-inspired design

Computational design

Hierarchical computation

Functional differentiation

Natural exoskeletons

@&#ABSTRACT@&#


               Graphical abstract
               
                  
                     
                        
                           
                        
                     
                  
               
            

@&#INTRODUCTION@&#

Structural materials in nature achieve diverse functions such as toughness, flexibility and strength, through spatial variation in material properties and morphometry across organizational hierarchies with precise interfacial control  [1,2]. Biologically inspired engineering, or the translation of design schema in nature, being chemical, physical, genetic, or geometric, to synthetic systems requires complex models that both capture the intricacies of biological models and adapt their multi-scale design principles to new operative constraints. The process of mapping functional requirements between design solutions presents several theoretical and technical challenges to ensure continuity and coherence of all components. With the advent of high resolution materials characterization methods, powerful computational simulation capabilities, and increasingly precise digital fabrication technologies, it is now becoming possible to develop novel multifunctional structures with intricate, interactive, and hierarchical design strategies inspired by biological models.

The study of biological armor systems is an emerging field  [3–7] with recent initial development of structural (load-bearing) bioinspired armor materials, most often nacre-mimetic  [8]. However, the design and manufacture of a bioinspired exoskeleton including salient local–regional–global hierarchical features have yet to be realized. In this paper, we present a computational design methodology that combines scientific analytical methods and computational form finding tools to generate a flexible protective surface based on an armored fish exoskeleton. Our biological model is the exoskeleton of the ancient fish, Polypterus senegalus. Its armor (Fig. 1
                     (a)) is composed of articulated, mineralized scales that act as a protective medium from predatory threats while also allowing biomechanical flexibility in axial bending and torsion  [3,9–13]. The functional framework of the fish scale jacket (Fig. 1(b)) uses spatial variation of unit morphometry (size and shape) and their arrangement into semi-helical rings to balance the two seemingly contradictory functions of full coverage and mobility. Our prior research has begun to explore the geometric design rules underpinning the functional framework  [14–16]. One of our previous models constructed a parametric definition of single scale geometries and an associative model to generate an array of homogeneous scales using computer-aided design (CAD) software for multi-material 3D printing of a flexible, flat surface  [14]. Another model morphed scale-based geometries along a sequence to determine dimensional parameters that can be varied while maintaining connectivity within a single direction  [15].

Our goal is to create a generative computational design framework for functionally graded structures with tunable local performance. These local performances can adapt to any given hosting mesh surface by emulating the design principles observed in the flexible fish exoskeleton. We distill the geometric design rules underlying the P. senegalus exoskeleton across multiple length scales (local, regional, and global). We then present the MetaMesh model that translates these design rules hierarchically to a synthetic system using an efficient framework linking experimental analytical methods (X-ray micro-computed tomography and morphometric analysis) with advanced computational geometry techniques (custom data structures for polygon mesh processing and component adaptation). MetaMesh operates in three levels of resolution: (i) locally—to construct unit geometries based on shape parameters of scales in the P. senegalus exoskeleton, (ii) regionally—to encode articulated connection guides that adapt units with their neighbors according to directional schema in the mesh, and (iii) globally—to generatively extend the unit assembly over arbitrarily curved surfaces through global mesh optimization using a functional coefficient gradient. Unlike component-based parametric techniques that focus on the packed placement of self-similar units over surfaces  [17], MetaMesh incorporates complex connectivity and overlap of the units to enable articulation with neighbors. In addition, through functional variation in unit shape, it allows control over regional connectivity and interlocking between units. We demonstrate the MetaMesh model’s potential with its application to a human body mesh surface and further discuss the model’s advantages and limitations. This computational adaptation of an articulated, segmented, flexible surface serves as a proof-of-concept model for enhanced biomimetic structures in various fields such as transportation (e.g. ground, air, water, or space), architecture (e.g. building skins or canopies), sports and military (e.g. personal protection), and consumer products (e.g. packaging)  [12,14].

Eleven scales were excised from a deceased P. senegalus specimen (every 10th scale across a row on the left side of the body) and scanned via X-ray micro-computed tomography (μCT; Viva CT40, Scanco Medical AG, Switzerland) operated at 45 kV and 177 μA. The microtomographic data was reconstructed using bilinear and inter-plane interpolation algorithms into polygonal meshes using an interactive medical imaging software (MIMICS®  14.1, Materialise, Belgium) to generate digital 3D objects of the scales in stereolithography (STL) format. Further processing was executed in Rhino3D (RHINOCEROS®, Robert McNeel and Associates, USA) to remove noise and internal porosity.

Geometric analysis measured variation in scale shape and served as a basis for the computational model. The coordinates of twenty landmarks defining the outline of the scale including all geometrical features were extracted from the 3D STL objects using a custom Visual Basic code programmed in the Rhino3D environment. These landmark coordinates were subjected to translation, rotation, and scaling relative to the centroid. Magnitudes of relative geometric parameters were calculated based on the coordinates. The volume of the scale was measured from the STL file in Rhino3D.

The computational framework defining the MetaMesh data structure (local scale geometric definition, regional directionality patterns, and global functional gradient application) was implemented in C# on top of the design platform in Rhino3D. The mesh optimization process was implemented in Java (Eclipse IDE, © 2013 The Eclipse Foundation) and deployed within a customized applet.

The closed-surface multi-material prototypes were designed using parametric CAD software (SOLIDWORKS®, Dassault Systèmes SolidWorks Corp., France) as described by Reichert et al. for a flat surface  [14]. The components of the prototype were exported as separate STL files per material component and fabricated using multi-material 3D printing (using digital materials from OBJET Connex500™) with 30 μm resolution in the digital mode. Rigid components were printed with VeroWhite (Objet FullCure®  830) and compliant components were printed with TangoPlus (Objet FullCure®  930).

@&#RESULTS@&#

The geometric design rules in the P. senegalus exoskeleton are characterized across three levels of resolution: local, regional, and global. The individual scales have varying geometries, are articulated with each other to allow flexibility alongside full body coverage, and are organized in a long-range surface over the entire fish body. These design components are formed during the organism’s growth and are thus inseparable; however, we distinguish amongst these levels of resolution for ease of translation using the computational model.

The local level of organization relates to a single scale, its anatomy, and its geometric variation. The scales of the organism are highly mineralized and display a multilayered internal composite structure with a consistent material composition throughout the exoskeleton  [3,12,13]. The geometrical features of the scales (Fig. 2
                           (a), left) include: a protruding peg (P) and a corresponding socket (S) that articulates neighboring scales within a single column of scales (paraserially) and constrains relative motion; the anterior process (AP), a large extension that overlaps with the scales in the next column (interserially) and enables scales to slide relative to each other; and the axial ridge (AR), a protrusion on the underside of the scale that connects the scale to the underlying skin. Based on line lengths and angles between features on the scale (Fig. 2(a), left), eight parameters were calculated for morphometric analysis of the fish scales (Fig. 2(a), right): relative length peg to scale (PSL), shape aspect ratio as the length of the peg-and-socket axis divided by scale width (SR), bounding box size (E), interserial overlap with the adjacent scale in the next column along the 
                              v
                           -axis (IO), paraserial overlap with the adjacent scale in the same column along the 
                              u
                           -axis (PO), relative edge degrees (ANG), anterior process length (APL), and volume (VOL).

The scale geometry varies gradually relative to its position in the exoskeleton  [9], as illustrated in the digitally-reconstructed μCT images of subset of 11 P. senegalus scales lying in the same row from head to tail (labeled by their column position in the exoskeleton, C1–50) in Fig. 2(b). Values for the eight shape parameters for these scales are tabulated and plotted as normalized quantities in Fig. 2(b). The scales exhibit a general trend of feature reduction from head to tail. For instance, in the tail region, variants C45–C50 have smaller magnitudes of the two articulating joints (PSL, IO) compared to front region variants C1–10. The PSL diminishes gradually from 0.22 to 0.03 in scales from head to tail. In the front region, the peg-and-socket joint plays a functional role in stiffening the column of scales, while in the tail region, the lack of peg-and-socket allows scales within a column to move freely relative to each other. The IO between columns also decreases from 0.28 to 0.13, thus compromising the relative sliding between columns. These parameters further relate to regional connectivity between columns as discussed in the next sections.

The regional level of organization describes the interconnectivity of fish scales in the exoskeleton and the correlation between local shape variation and regional functionality of the system. Two articulating joint structures define the standard unit schema between a single scale and its neighbors as shown in schematic views in Fig. 3
                           (a): the peg-and-socket joint connects scales down a column (paraserially) while the overlap joint allows interscale sliding between columns (interserially). The geometry of these joints further defines the rotational degrees of freedom, e.g. bending and twisting, that scales have in moving relative to each other (Fig. 3(b)). The overlap joint allows bending, sliding, and twisting, while peg and socket joint allows only limited bending and rotation around its axis  [9]. In the construction of the computational model in Section  3.2, we define the axis of peg-and-socket joints as the 
                              u
                           -direction (paraserial) and the axis of the overlap joint as 
                              v
                           -direction (interserial); these are two consistently identifiable directions between any set of adjacent scales.

Two fibrous, organic components hold the scales together in the armor: the stratum compactum and Sharpey’s fibers, illustrated in Fig. 3(c). The stratum compactum is a crisscrossed, layered tissue composed of collagenous fibers that attach the scales to the underlying skin  [9]. The fibers are aligned along the paraserial and interserial directions in alternating layers. The Sharpey’s fibers are short fibers that connect the peg and socket of adjacent scales  [9]. These fibers support and align the peg and socket joint, and allow the paraserial column of scales to withstand compressive and tensile stresses.

The degrees of freedom in relative motion are dependent on the geometric parameters of the scales. Fig. 4
                            demonstrates the difference in ranges of motion between two shape variants: a head region scale and a tail region scale. The head region scale (Fig. 4(a)–(d)) is bigger and possesses more pronounced shape features: the well-pronounced peg and socket as well as the paraserial overlap restrict rotation between scales within a single column, while the large anterior process enables relative sliding resulting in significant changes in overlap between scales (42%–110%  [9]) as the exoskeleton bends to extreme curvatures. This variant shows full contact between the scales with additional overlap in the peg-and-socket direction and requires additional bending (Fig. 4(a)) or translation (Fig. 4(b)) to rotate around the peg axis. In contrast, in the tail region scale (Fig. 4(e)–(h)), the anterior process is smaller and has a simpler rhomboid shape, which relaxes the paraserial constraints while still allowing interserial sliding to accommodate the rapid undulation of the tail in steady-state swimming.

The global level of organization relates the long-range assembly of the scales across the body of the fish to its kinetic motion. Semi-helical columns of ‘standard unit’ scales are aligned with their peg and socket joint running top to bottom, and overlap running from head to tail (Fig. 5
                           (a)). These columns of scales are symmetric on the right and left sides of the fish body, and are connected by top and bottom midlines composed of units with a specialized geometry. Two types of specialized units exist in the fish; double-peg unit on the top line and double socket on the bottom line (Fig. 5(b)). Lines of symmetry on the top and bottom of fish trunk possess specialized units (orange) with double pegs and double sockets that receive columns on both sides (blue). The scale shapes and joint configurations are tailored to the varying radius of curvature throughout the structural ring (Fig. 5(c)–(e)).

The orientation of scales within the assembly exoskeleton further contributes to functional variation within the armor. The structural rings and underlying fibrous tissue have an oblique orientation to the main axis of the trunk, which ranges from 60° in the front region to 45° in the back region  [9] as shown in Fig. 6
                           (a). The front 60° orientation is optimal for extreme curvatures in helical arrangement, as found in eels and worms  [18], while the rigid peg-and-socket joint sustains the helical component of the torsional strain  [9]. The back region 45° orientation is optimal for restricting torsion in steady-state swimming  [19]. Furthermore, the angle between the edges of the scale (ANG) also decreases gradually from 87° to 60°, from head to tail, showing that the directionality of the paraserial and interserial axes are regionally adapted to the global kinetic motion of the fish. Local scale geometry further contributes to the functional variation of the armor. A functional coefficient (FC) was calculated as the average value of the normalized geometric parameters PSL, IO, PI, and AP. The FC is mapped onto the fish exoskeleton in Fig. 6(a). The FC indicates how developed the connective interfaces are between adjacent scales, i.e. how constrained the peg and socket joint is along the paraserial direction compared with overlap sliding along the interserial direction, ranging from 0 (maximum protection) to 1 (maximum flexibility). As a consequence of the local scale geometry and regional orientation, the long range assembly of scales is capable of achieving high radii of curvature throughout the exoskeleton, e.g. in the fast-start escape response depicted in Fig. 6(b).

Our hierarchical computational model, MetaMesh, unpacks the organism-specific design principles and applies them, in a generative way, to a different host surface with new functional specifications. MetaMesh creates and maintains consistent neighborhood relationships for the three-dimensional articulated surfaces of units on a quadrilateral polygonal mesh. The mesh data structure tailored for this model is designed to meet specific topological, algorithmic, and data access requirements.

The topology of our structure is a high-resolution polygonal regular mesh of quads with boundaries. The three components of a polygon mesh (vertices, edges, or faces) determine the connectivity between the mesh elements  [20]. To ensure smooth connectivity between component features, each vertex holds one scale unit and each face shares the information of four scale geometries. We specify meshes with boundaries, defined by edges incident to only one face  [21] to include neckline and sleeve openings. The paraserial and interserial axes in the fish exoskeleton are translated onto the 
                           u
                        - and 
                           v
                        -directions of the parametric surface subdivision.

Algorithmic requirements operate on unit orientation and connectivity along 
                           u
                        - and 
                           v
                        -directions, as well as on unit geometry adaptation to new vertex positions through mesh optimization. Furthermore, our model takes into account functional gradients of protection and flexibility mapped on the human body. In order to preserve smooth continuity of the functional changes over the host surface, the model associates extra geometry to the vertices, edges, and faces of the mesh to share geometrical data with neighboring elements. To do this, we used a finite set of vertex indices (
                           V
                        ), a table of 3D vertex coordinates 
                           X
                           =
                           
                              {
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              :
                              I
                              ∈
                              V
                              }
                           
                        , and a set of polygon faces (
                           F
                        ), in which a face 
                           f
                           =
                           
                              (
                              
                                 
                                    i
                                 
                                 
                                    1
                                 
                              
                              …
                              
                                 
                                    i
                                 
                                 
                                    n
                                    f
                                 
                              
                              )
                           
                         is a sequence of non-repeating vertex indices  [22].

We further impose access requirements to the sets of data included in the model. The data sets for vertices, edges, and faces are accessible by enumeration of all elements and the oriented transversal of face edges. Given an edge, we are able to access its starting and end vertices. Given a vertex, at least one attached face or edge must be accessible while all other elements in the neighborhood of the vertex (i.e. incident faces, edges, or neighboring vertices) can be enumerated  [23].

Our hierarchical computational model, MetaMesh, is designed to meet these requirements at three organizational levels following the geometric rules of assembly: (i) local definition of a standard unit and construction of different unit geometries in association with their neighbors, (ii) regional application of directional patterns and functional gradients that define the locations of different units, and (iii) global optimization of the host mesh to reposition vertices that affect local adaptation of unit shapes.

The local level of organization captures the standard scale unit (S) as a building block by taking into account the features of its neighbors and the underlying host mesh geometry (Fig. 7
                           ). Each scale unit is centered on top of one mesh vertex and constructed through a set of controllable parameters (Fig. 7(a)). Since each vertex has an associated unit, its geometry can adapt to the host surface curvature. The local set of information per mesh face contains shared data between four units, which takes into account the features of neighboring scales. Each vertex stores the information of four parameters that will affect its associated unit schema in two different directions. Along the 
                              u
                           -direction (paraserial), the unit geometry is influenced by the PSL, PO, and APL parameters. Along the 
                              v
                           -direction (interserial), the unit geometry and lateral scale superposition are influenced by IO.

Specific parametric dimensions are calculated to determine unit features and their position on the quad in order to unite the underlying mesh with the geometrical parameters and functional requirements of the host surface, described further in Section  3.2.3. A particular vertex is defined as 
                              
                                 
                                    V
                                 
                                 
                                    0
                                 
                              
                              
                                 (
                                 i
                                 ,
                                 j
                                 )
                              
                           , and its four neighbor vertices are defined as 
                              
                                 
                                    V
                                 
                                 
                                    1
                                 
                              
                              
                                 (
                                 u
                                 +
                                 1
                                 ,
                                 v
                                 )
                              
                              ,
                              
                                 
                                    V
                                 
                                 
                                    2
                                 
                              
                              
                                 (
                                 u
                                 −
                                 1
                                 ,
                                 v
                                 )
                              
                              ,
                              
                                 
                                    V
                                 
                                 
                                    3
                                 
                              
                              
                                 (
                                 u
                                 ,
                                 v
                                 +
                                 1
                                 )
                              
                              ,
                              
                                 
                                    V
                                 
                                 
                                    4
                                 
                              
                              
                                 (
                                 u
                                 ,
                                 v
                                 −
                                 1
                                 )
                              
                            as shown in Fig. 7(a). The midpoints of their edges are then defined as 
                              
                                 
                                    m
                                 
                                 
                                    4
                                    −
                                    0
                                 
                              
                              ,
                              
                                 
                                    m
                                 
                                 
                                    0
                                    −
                                    1
                                 
                              
                              ,
                              
                                 
                                    m
                                 
                                 
                                    0
                                    −
                                    3
                                 
                              
                              ,
                              
                                 
                                    m
                                 
                                 
                                    2
                                    −
                                    0
                                 
                              
                           . Fig. 7(b) shows how the unit is constructed from four connecting surfaces for each adjacent mesh quad (blue) and resulting cross-shaped contact surface centered in the vertex (orange). The unit lengths are calculated as shown in the table below and then mapped onto the mesh quads using a unit square bilinear interpolation algorithm  [24], as shown in Fig. 7(c), where an unknown function 
                              f
                            at point 
                              X
                              
                                 (
                                 u
                                 ,
                                 v
                                 )
                              
                            is found with respect to a unit quad of points 
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              
                                 (
                                 1
                                 ,
                                 0
                                 )
                              
                              ,
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                              
                                 (
                                 1
                                 ,
                                 1
                                 )
                              
                              ,
                              
                                 
                                    P
                                 
                                 
                                    3
                                 
                              
                              
                                 (
                                 1
                                 ,
                                 0
                                 )
                              
                            and 
                              
                                 
                                    P
                                 
                                 
                                    4
                                 
                              
                              
                                 (
                                 0
                                 ,
                                 0
                                 )
                              
                           . We perform a linear interpolation between 
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                            and 
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                            resulting in point 
                              A
                              
                                 (
                                 u
                                 ,
                                 v
                                 )
                              
                            and another linear interpolation between point 
                              
                                 
                                    P
                                 
                                 
                                    3
                                 
                              
                            and 
                              
                                 
                                    P
                                 
                                 
                                    4
                                 
                              
                            resulting in point 
                              B
                              
                                 (
                                 u
                                 ,
                                 v
                                 )
                              
                            providing an estimate for 
                              f
                              
                                 (
                                 u
                                 ,
                                 v
                                 )
                              
                           :
                              
                                 
                                    f
                                    
                                       (
                                       u
                                       ,
                                       v
                                       )
                                    
                                    =
                                    f
                                    
                                       (
                                       0
                                       ,
                                       0
                                       )
                                    
                                    
                                       (
                                       1
                                       −
                                       u
                                       )
                                    
                                    
                                       (
                                       1
                                       −
                                       v
                                       )
                                    
                                    +
                                    f
                                    
                                       (
                                       1
                                       ,
                                       0
                                       )
                                    
                                    u
                                    
                                       (
                                       1
                                       −
                                       v
                                       )
                                    
                                    +
                                    f
                                    
                                       (
                                       1
                                       −
                                       u
                                       )
                                    
                                    v
                                    +
                                    f
                                    
                                       (
                                       1
                                       ,
                                       1
                                       )
                                    
                                    u
                                    v
                                    .
                                 
                              
                           
                        


                           
                              
                                 
                                    
                                    
                                    
                                    
                                       
                                          Scale width
                                          
                                             
                                                L
                                                8
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      4
                                                      −
                                                      0
                                                   
                                                
                                                −
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      0
                                                      −
                                                      3
                                                   
                                                
                                             
                                          
                                       
                                       
                                          AP length
                                          
                                             
                                                L
                                                6
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      2
                                                      −
                                                      0
                                                   
                                                
                                                −
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      0
                                                      −
                                                      1
                                                   
                                                
                                             
                                          
                                       
                                       
                                          PO length
                                          
                                             
                                                L
                                                7
                                             
                                          
                                          
                                             
                                                =
                                                APL
                                                /
                                                L
                                                6
                                             
                                          
                                       
                                       
                                          Overall length
                                          
                                             
                                                L
                                                2
                                             
                                          
                                          
                                             
                                                =
                                                L
                                                1
                                                +
                                                L
                                                5
                                                +
                                                L
                                                6
                                             , where 
                                                L
                                                1
                                                =
                                                L
                                                2
                                                ∗
                                                PSL
                                              and 
                                                L
                                                5
                                                =
                                                L
                                                2
                                                ∗
                                                PO
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                =
                                                L
                                                6
                                                /
                                                
                                                   (
                                                   1
                                                   −
                                                   
                                                      (
                                                      PSL
                                                      +
                                                      PO
                                                      )
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          Overall width
                                          
                                             
                                                L
                                                3
                                             
                                          
                                          
                                             
                                                =
                                                L
                                                8
                                                +
                                                L
                                                4
                                             , where 
                                                L
                                                4
                                                =
                                                L
                                                3
                                                ∗
                                                IO
                                             ,
                                       
                                       
                                          
                                          
                                          
                                             
                                                =
                                                L
                                                8
                                                /
                                                
                                                   (
                                                   1
                                                   −
                                                   IO
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

The 
                              u
                           - and 
                              v
                           -directions act as guides for the construction of the peg–socket and overlap connections in a unit. In MetaMesh computation each side of a quad can host either the 
                              u
                           - or 
                              v
                           -direction and this allows definition of new types of specialized units in addition to the ones found in the fish (e.g. A, B, C in Fig. 7(d)). The double-peg and double-socket units in the top and bottom midlines in the fish (e.g. D, E in Fig. 7(d)) are defined as variations from the standard scale through the encoded 
                              u
                           - and 
                              v
                           -directions. This method of specialized units enabling polygonal mesh connectivity is similar to the stitch mesh method developed by Yuksel et al. for yarn patterns in 2.5D, where course and wale edges have an extra layer of information to define the connectivity of the yarn elements at the mesh edges  [25].

The regional level of organization orients mesh regions against the hosting surface. A mesh is defined as “orientable” if all faces (i.e. normal vectors for all polygons) point consistently to the same side of the mesh. The information encoded in our 
                              u
                           - and 
                              v
                           -directions does not affect the orientability of the mesh, but tailors edge directionality as extra regional data in the data structure. Fig. 8
                            illustrates the directionality analysis of a human shoulder mesh in response to an estimated biomechanical logic. The 
                              u
                           - and 
                              v
                           -directions (Fig. 8(a)) are applied to each face of the shoulder mesh (Fig. 8(b)). The complexity of the host in contrast to an idealized tube mesh representing the fish body requires the emergence of more specialized units than the ones present in the P. senegalus. The locations of these specialized units that have emerged through the implementation of our MetaMesh model to the complex mesh of human body in contrast to a tube mesh representing the fish body are identified in Fig. 8(b), (c).

The global level of organization applies optimization strategies to the hosting mesh and subsequently automates the adaptation of regional connectivity patterns and local unit shapes. To integrate functional differentiation that exists in the biological system, we assign a FC map to the mesh data structure to modulate the unit geometry of every mesh vertex toward a protective variation of heavily articulated features (blue, 
                              FC
                              =
                              0
                           ) or more flexible with reduced features (red, 
                              FC
                              =
                              1
                           ). In combination with the neighborhood relationships, this strategy allows functional gradation across the mesh. Fig. 9
                           (a) shows how the range of values of FC is translated into a sequence of scale shapes over a torus ranging from most pronounced to least pronounced relative feature size. The most protective shape variant from the head region in the fish (c11s10) and the most flexible one from the tail region (c31s10) are mapped and morphed on the torus based on the functional gradient of FC. Fig. 9(b) illustrates the mapping of the FC gradient into the human shoulder mesh with lowest values of FC in the upper arm area and highest values in the underarm. This step demonstrates a generative framework for computationally mapping segmented unit geometries to a complex surface while future iterations of the model will implement physiological data for human joints.

A global mesh optimization strategy is then applied as illustrated in Fig. 10
                           . The Tangential Laplacian Smoothing algorithm regularizes the hosting mesh geometry by iteratively repositioning the mesh vertices according to the geometries dictated by the FC without distorting the overall shape of the mesh. A homogenization optimization algorithm was applied to the hosting mesh. The rational behind optimizing for homogeneity is to avoid local spatial heterogeneities and discontinuous changes in the composite structure that would result in stress concentrations, weakened areas and might lead to buckling or kinking, and discomfort by the wearer. This algorithm maximizes the homogeneity across all of the quads in the mesh by replacing each vertex coordinate with a weighted average of itself and its first order neighbors  [24]. In our model, a vertex displacement vector 
                              
                                 Δ
                              
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                            was calculated for each vertex 
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                           : 
                              
                                 
                                    
                                       Δ
                                    
                                    
                                       
                                          x
                                       
                                       
                                          i
                                       
                                    
                                    =
                                    1
                                    
                                       
                                          1
                                       
                                       
                                          n
                                          i
                                       
                                    
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          
                                          ∈
                                          
                                          v
                                          
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                    
                                       (
                                       
                                          
                                             x
                                          
                                          
                                             j
                                          
                                       
                                       −
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                       
                                       )
                                    
                                    .
                                 
                              
                            Vertex displacements were then applied to the vertex coordinates, 
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              ′
                              =
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              +
                              λ
                              
                                 Δ
                              
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                           , where 
                              λ
                            is a fixed-scale parameter in the range 
                              0
                              <
                              λ
                              <
                              1
                           . Finally, we replace the original vertex coordinates 
                              X
                            with the new vertex coordinates 
                              
                                 
                                    X
                                 
                                 
                                    ′
                                 
                              
                              [22]. These three steps are repeated until maximum quad homogeneity for minimum unit distortion is achieved. Here, it is important to preserve the shape of the mesh as new vertex positions are applied; we avoid mesh shrinkage by limiting vertex translation as only tangential to the mesh surface. Fig. 10 demonstrates the iterative steps for regularizing the host mesh Tangential Laplacian Smoothing through 50 iterations, while the quality of the quad ranges from distorted (red) to regular (blue). Future modification to this optimization algorithm seek to fit vertex relocation to physiological data for joint flexure, assign internal porosity to minimize weight, or distribute multiple materials for tunable composite structures with desired mechanical properties.

We validate the MetaMesh computational modeling process by using it to populate a host mesh of a human shoulder with protective scales. Fig. 11
                            presents an overview of this process. A regular polygonal mesh of quads with boundaries was optimized from a distorted base mesh of a human shoulder. A regional directionality pattern was applied over the mesh edges to inform the construction of scale connectivity. The functional gradient was then determined according to an estimate of human biomechanics and applied to the mesh vertices. Finally, the units were adapted to the smoothed geometry through integration of neighborhood parameters encoded into the mesh vertices for each scale. The association of the local unit parameters to its neighbors in addition to the underlying mesh information (FC and regional directionality) allows for the computational translation of the segmented assembly of units adapted to the host geometry while preserving articulating connections between the units. The current composite exoskeleton design is “materials-generic” and allows for the fabrication of varied exoskeletons composed of arbitrary choice of structural materials. The weight of the exoskeleton is driven by the material choice for the rigid individual armor units and related to the composite volume fraction (volume of rigid armor units 
                              V
                              a
                           /volume of organic, 
                              V
                              o
                           ). We have calculated the volume fraction at various locations of the exoskeleton in our model and found them to be in the 1.5–1.7 range.

@&#DISCUSSION@&#

The MetaMesh model is a generative computational design framework for translating design principles observed in the flexible fish exoskeleton of P. senegalus into functionally graded structures adapted to a new host surface, e.g. a human shoulder. Fig. 11 summarizes the main steps in translational process from analysis of the biological armor into generative computation through local shape construction, regional connectivity pattern, and global optimization and adaptation to overall geometry. MetaMesh attempts to solve many challenges heretofore unaddressed in architectural geometric design and flexible protective structures by developing bioinspired functional designs with components operating at multiple length scales.

Parametric Component Population (PCP) is a common method to adapt discrete geometrical components to large-scale complex shapes  [26]. The host surface is normally structured as a polygonal mesh of quadrilateral faces or as a NURBS surface subdivided into 
                        u
                        ,
                        v
                      directions. The component’s geometry is described through a parametric model and then repetitively embedded as discretized shapes on the host surface in two steps: component enclosure in an axis-aligned bounding box, and translation of the bottom-face vertex to every vertex of the mesh face in order to parametrically fill the space of the host mesh. Despite its fast distribution of volumetric units over 3D surfaces, PCP restricts the footprint of the volumetric component to the boundaries of the host quadrilaterals, which does not support certain surface contacts or tangent connections of neighboring geometries. Hence, connectivity between component features along the surface is not assured. In the P. senegalus exoskeleton, the peg and socket joint and overlap joint articulations are key connectivity features of the system that must be preserved when translating to a new host environment. MetaMesh solves this challenge by including neighborhood relationships between the units, which PCP fails to do.

Other architectural geometry strategies use quadrilateral meshes with planar faces (PQ meshes) as a rationalization strategy to build envelopes designed as discrete freeform structures  [17,27]. PQ meshes use a heuristic device to segment the envelope into flat panels for efficient fabrication. Introducing rationalization strategies early in the planning can dramatically reduce cost and risk associated with using unconventional geometry for fabrication and assembly phases  [27]. The method results in the approximation of a smooth surface to a discrete one with architectural-size panels ranging from half to several meters. We chose quadrilateral polygonal meshes over triangular ones, but we did not choose to work with flat faces, to minimize the number of different components, or to maximize component size. Instead, we utilize face curvature of the mesh quad to inform the fittest unit geometry while encouraging maximum shape variation with high resolution of mesh subdivision, all to ensure adaptation and functional gradation over the host environment.

The originality of MetaMesh lies in its efficient framework linking experimental analytical methods (
                        μ
                     CT and morphometric analysis) with advanced computational geometry techniques (custom data structures for polygon mesh processing and component adaptation). The results propose a novel strategy for the multifunctional adaptation of highly elaborate components to complex surfaces with tailored directionality, emergence of new unit types, and the conservation of their interconnectivity patterns. Furthermore, the computational model sets the basis for future work with different exoskeleton systems and for the optimization of requirements beyond the topology of the hosting surface, such as kinematic ranges of motion, porosity for breathability requirements, or material distribution within units to modulate materials and mechanical properties in various regions.

This proof-of-concept model uses rigid, articulated armor units with compliant substrate and interconnections to produce a flexible protective system that provides uniform coverage while preserving user mobility. Current ballistic armor technologies include Kevlar®  fibers  [28] and ceramic plates  [29], which are not flexible enough to cover mobile joints. Alternative flexible armor systems include woven fabrics [29], mosaic tilings  [30], and overlapping discs [31], which have shortcomings that diminish ballistic resistance due to inter-yarn friction or designs that inherently include vulnerable regions of armor at interfaces and areas of variable thickness. The MetaMesh model seeks to overcome shortcomings in existing armor solutions by drawing inspiration from the complex architecture of the P. senegalus exoskeleton, which uses a unique geometry of individual armor units combined with inter-unit articulation to yield a system with spatially homogeneous thickness and no exposed, vulnerable interfaces. Segmented systems, which utilize smaller protection sub-units, have the potential to reduce cost and ease of fabrication, as well as allow for use of a wider range of constituent materials and selective replacement of damaged units. While high performance properties with strict tolerances are required for functional penetration resistance, there is great opportunity for developing novel approaches to protective joint designs where tunability is key.

In our ongoing research we are building continuity between computational construction and additive fabrication. In previous work on this research project, members of our group have successfully fabricated macroscale assemblies on flat and curved surfaces using multi-material 3D printing  [14–16], as well as using materials with graded material properties within the scale units  [16]. The MetaMesh model preserves the closed mesh articulation and the relation amongst the units, but does not yet accommodate material articulation strategies such as layered microstructures, graded material interfaces, and internal porosity. Yet, MetaMesh’s hierarchical organization provides the platform for additional meta organization principles at the local, regional, and global levels of the design process. Additionally, the specialized units for seam lines and the preservation principle of valid connection between units in MetaMesh allow further research and tunability of the system to the complex schema of human kinematics. Further computational development will also require focus on irregular mesh handling and other polygonal topologies to accommodate a variety of host surfaces.


                     MetaMesh model can be used to incorporate real physiological data and kinetic schema from the human body. This paper presents the computational design platform constructed on the logic of a biological system rather than provide for a specific bio-inspired design solution. In future the hierarchical structure of MetaMesh enables it to incorporate other concepts relevant to human physiology, such as the Lines of Non-Extension (LNE). Lines of Non-Extension, a concept first proposed by Iberall  [32] and later developed and implemented in the design of “second-skin” Bio-Suit pressure garment  [33], are the directions on human body that are subjected to minimal skin strain during movement. In P. senegalus armor, the restricted and free ranges of motion around the 
                        u
                     - and 
                        v
                     -directions can be analyzed akin to LNE, and could further serve as a basis for application to new kinematic constraints of human physiology  [34]. For instance, MetaMesh could place the 
                        u
                     -direction of a regional armor assembly on the mesh edges along the LNE of the human shoulder, while placing the 
                        v
                     -direction along lines of maximal movement.

@&#CONCLUSION@&#

Customized computational models like MetaMesh provide a novel and effective method for translating the intricate, multifunctional design principles found in natural structures such as mineralized exoskeletons to synthetic, bioinspired structures. These models challenge traditional design techniques and set the basis for the incorporation of multiple layers of information, such as physiological and kinetic dimensions, at any level of the hierarchical computational data structure. MetaMesh is a computational model that embeds the geometric complexity of mineralized exoskeletons to enable functional gradation to the new bearer. The customized data structure provides adaptation of the system, while varying the unit features with neighborhood connectivity ensures graded overlap and interlock. With the MetaMesh model it is now possible to encode hierarchical relationships at local, regional, and global levels to maintain complex connectivity and functional differentiation of articulated structures on complex hosting surfaces.

Through MetaMesh, we see that interdisciplinary research (here drawing on experimental biology, materials science and engineering, mechanical engineering, and architecture) contributes to a better understanding of biological design principles and enhanced translation to bio-inspired and biomimetic devices. Scientific perspectives on the geometric and materials analysis in the P. senegalus exoskeleton better inform the designer in devising computational methods to translate designs to a new hosting surface and fabricate a functional bio-inspired system.

@&#ACKNOWLEDGMENTS@&#

We gratefully acknowledge support of the US Army through the MIT Institute for Soldier Nanotechnologies (Contract No. W911NF-13-D-0001), the Institute for Collaborative Biotechnologies (Grant No. W911NF-09-0001 from the US Army Research Office), and the National Security Science and Engineering Faculty Fellowship Program (Grant No. N00244-09-1-0064). The content of the information does not necessarily reflect the position or the policy of the Government, and no official endorsement should be inferred. The authors would like to thank Stratasys Ltd. and the Connex team for their continuous support.

Abbreviations and Symbols


                     
                        
                           
                              
                              
                              
                                 
                                    
                                       
                                          
                                             
                                                A
                                             
                                             
                                                
                                                   (
                                                   u
                                                   ,
                                                   v
                                                   )
                                                
                                             
                                          
                                       
                                    
                                    Point interpolation on quad’s boundary
                                 
                                 
                                    ANG
                                    Normalized angle between two adjacent scale edges
                                 
                                 
                                    AP
                                    Scale’s front edge extension that overlaps with the scale in the next column
                                 
                                 
                                    APL
                                    Anterior process length, the relative size of AP to scale’s side length
                                 
                                 
                                    AR
                                    Axial ridge, a protrusion on the bottom of the scale that connects the scale to the underlying organic tissue
                                 
                                 
                                    
                                       
                                          
                                             
                                                B
                                             
                                             
                                                
                                                   (
                                                   u
                                                   ,
                                                   v
                                                   )
                                                
                                             
                                          
                                       
                                    
                                    Point interpolation on quad’s boundary
                                 
                                 
                                    
                                       
                                          E
                                       
                                    
                                    Bounding box size, minimum perimeter rectangle area within which the scale can be subscribed
                                 
                                 
                                    
                                       
                                          F
                                       
                                    
                                    A set of polygon faces, in which a face 
                                          f
                                          =
                                          
                                             (
                                             
                                                
                                                   i
                                                
                                                
                                                   1
                                                
                                             
                                             ,
                                             …
                                             ,
                                             
                                                
                                                   i
                                                
                                                
                                                   n
                                                   f
                                                
                                             
                                             )
                                          
                                        is a sequence of non-repeating vertex indices
                                 
                                 
                                    FC
                                    Functional coefficient, average value of the normalized geometric parameters PSL, IO, PI, and AP, indicates how developed the connective interfaces are between adjacent scales, ranging from 0 for maximum protection to 1 for maximum flexibility
                                 
                                 
                                    IO
                                    Interserial overlap, overlap between scales in the adjacent columns
                                 
                                 
                                    
                                       
                                          
                                             
                                                L
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    Length of the peg
                                 
                                 
                                    
                                       
                                          
                                             
                                                L
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                    Length of the peg and socket axis
                                 
                                 
                                    
                                       
                                          
                                             
                                                L
                                             
                                             
                                                3
                                             
                                          
                                       
                                    
                                    Total width of the scale
                                 
                                 
                                    
                                       
                                          
                                             
                                                L
                                             
                                             
                                                4
                                             
                                          
                                       
                                    
                                    Width of the overlap between scales in the 
                                          v
                                       -direction
                                 
                                 
                                    
                                       
                                          
                                             
                                                L
                                             
                                             
                                                5
                                             
                                          
                                       
                                    
                                    Width of the overlap between scales in the 
                                          u
                                       -direction
                                 
                                 
                                    
                                       
                                          
                                             
                                                L
                                             
                                             
                                                6
                                             
                                          
                                       
                                    
                                    Length of the short edge of the scale
                                 
                                 
                                    
                                       
                                          
                                             
                                                L
                                             
                                             
                                                7
                                             
                                          
                                       
                                    
                                    Length of the long edge of the scale
                                 
                                 
                                    
                                       
                                          
                                             
                                                L
                                             
                                             
                                                8
                                             
                                          
                                       
                                    
                                    Width of the scale without the overlap
                                 
                                 
                                    LNE
                                    Lines of Non-Extension, the directions on human body that are subjected to minimal skin strain during movement
                                 
                                 
                                    
                                       
                                          m
                                       
                                    
                                    A midpoint of an edge of the mesh quad
                                 
                                 
                                    
                                       
                                          n
                                       -axis
                                    The orthogonal direction normal to the surface of the scale
                                 
                                 
                                    
                                       
                                          P
                                       
                                    
                                    Protruding peg, complemented with socket to form a peg-and-socket joint
                                 
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                1
                                                −
                                                4
                                             
                                          
                                       
                                    
                                    Points defining a mesh quad
                                 
                                 
                                    PCP
                                    Parametric Component Population, a common method to adapt discrete geometrical components to large-scale complex shapes
                                 
                                 
                                    PO
                                    Paraserial overlap, an overlap between scales in the peg-and-socket joint direction
                                 
                                 
                                    
                                       
                                          S
                                       
                                    
                                    Socket, complemented with peg to form a peg-and-socket joint
                                 
                                 
                                    SR
                                    Shape aspect ratio, the ratio of the length of peg-and-socket axis to scale’s width
                                 
                                 
                                    
                                       
                                          u
                                       -axis
                                    The “paraserial” direction within one column of scales, parallel to the line connecting the peg-and-socket joints
                                 
                                 
                                    
                                       
                                          v
                                       -axis
                                    The “interserial” direction between columns of scales, parallel to the line connecting the overlapping joints
                                 
                                 
                                    
                                       
                                          V
                                       
                                    
                                    Vertex indices, a table of 3D vertex coordinates 
                                          X
                                          =
                                          
                                             {
                                             
                                                
                                                   x
                                                
                                                
                                                   i
                                                
                                             
                                             :
                                             I
                                             ∈
                                             V
                                             }
                                          
                                       
                                    
                                 
                                 
                                    PQ meshes
                                    Quadrilateral meshes with planar faces, topology of polygonal regular mesh
                                 
                                 
                                    VOL
                                    Volume of scale in 
                                          
                                             
                                                
                                                   mm
                                                
                                             
                                             
                                                3
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             Δ
                                          
                                          
                                             
                                                x
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                    Vertex displacement vector, the change in mesh quad parameters due to mesh optimization
                                 
                                 
                                    
                                       
                                          X
                                       
                                    
                                    Vertex coordinates of the mesh quad
                                 
                              
                           
                        
                     
                  

@&#REFERENCES@&#

