@&#MAIN-TITLE@&#The directed profitable location Rural Postman Problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We studied a location-routing problem with profits.


                        
                        
                           
                           We propose a mathematical formulation and a branch-and-cut algorithm.


                        
                        
                           
                           We discuss in detail an application in the strategic planning of freight transportation.


                        
                        
                           
                           We developed an example of the application and solve it through the branch-and cut.


                        
                        
                           
                           We analyze the properties of the problem.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Freight transportation

Rural Postman Problem

Facility location

Arc routing with profits

Integer programming

@&#ABSTRACT@&#


               
               
                  In this paper we introduce an extension of the well known Rural Postman Problem, which combines arc routing with profits and facility location. Profitable arcs must be selected, facilities located at both end-points of the selected arcs, and a tour identified so as to maximize the difference between the profit collected along the arcs and the cost of traversing the arcs and installing the facilities. We analyze properties of the problem, present a mathematical programming formulation and a branch-and-cut algorithm. In an extensive computational experience the algorithm could solve instances with up to 140 vertices and 190 arcs and up to 50 vertices and 203 arcs.
               
            

@&#INTRODUCTION@&#

In this paper, we present a model to address a network design problem that calls for selecting, in a way that is economically sound, terminals and asymmetric connections. Given a directed graph with a set of profitable arcs, with fixed costs associated with end-points, the problem consists in choosing a subset of profitable arcs in such a way that the difference between the profit collected and the total cost is maximized. The total cost includes the cost to open facilities at the end-points of the selected arcs and the traveling cost. We assume that enough capacity is available to satisfy the demand that originates from the selected connections. This assumption can however be removed by introducing an adequate constraint in the integer programming model. We call this problem the Directed Profitable Location Rural Postman Problem (DPLRPP).

To the best of our knowledge, the DPLRPP was never studied in the literature. However, strongly related problems were addressed, like the Eulerian Location Problems (ELP), treated in Ghiani and Laporte (1999), and the Location-Arc Routing Problems (L-ARP), studied in Ghiani and Laporte (2001) and Liu, Jiang, Chen, Liu, and Liu (2008): these are arc routing problems with costs located at nodes and connections, but without profits. In Ghiani and Laporte (2001) and Liu et al. (2008), the authors present applications of the L-ARP to those routing and delivering problems that require specific facilities like vehicle depots, relay boxes, dump sites, or transfer/replenishment points. In the DPLRPP costs are located at both nodes and connections, like in ELP and L-ARP. However, contrary to ELP and L-ARP, the problem is with profits.

The application domain is mid/long range passenger/freight transportation, e.g., long-distance coach services, airlines, and interstate trucking. In these cases, companies identify a set of potential connections on the basis of demand estimate. The problem is to choose the connections on which to open a service. Unlike local or regional services, and unlike (Ghiani & Laporte, 1999, 2001; Liu et al., 2008), an important characteristic of mid/long range applications is that the company has to bear arc costs, related to transportation service provision, and also node costs, related to passenger/freight service (ticketing, check-in, waiting rooms, warehousing etc.) at both terminals. Terminals and connections form a network, the features of which depend on the specific domain. In the case of interstate freight transportation (e.g., the European TIR, Transports Internationaux Routiers) connections are typically asymmetric, because asymmetry is introduced by import–export imbalances.

The paper is organized as follows. We first describe the problem in Section 2, provide an example of application and review the literature. In Section 3 we state the complexity of the problem and survey a few basic properties while in Section 4 we present an integer linear programming formulation with a number of constraints that grows exponentially with ∣V∣. Based on this formulation, a branch-and-cut algorithm is then presented together with computational results in Section 5.

The DPLRPP is an extension of the well known Rural Postman Problem that combines facility location and arc routing with profits, and is defined as follows.

Let G
                     =(V, A) be a directed connected graph with V
                     ={0,1,…,
                     n} and A
                     ⊆
                     V
                     ×
                     V vertex and arc set, respectively. Vertex 0 is the depot. Each vertex v
                     ∈
                     V is associated with the cost f
                     
                        v
                      of installing a facility in v. Each arc (u, v)∈
                     A is associated with the (non-negative) cost c
                     
                        uv
                      of traversing (u, v). Moreover, a subset of profitable arcs R
                     ⊆
                     A is defined. Each of these arcs is associated with a non-negative profit p
                     
                        uv
                      and an integer demand d
                     
                        uv
                     : the profit is gained only if (u, v) is traversed at least d
                     
                        uv
                      times.

A tour on G is a sequence of arcs T
                     =((0, u),(u, v),…,(w, 0)) starting and ending at 0. The sequence is not necessarily simple, that is, T may contain repeated copies of the same arc of G. If the tour traverses (u, v)∈
                     R at least d
                     
                        uv
                      times, then profit p
                     
                        uv
                      is gained. However, unlike costs, which are paid whenever an arc is traversed, a profit can be collected only once. Also, profits are asymmetric, that is, if u and v are connected in both directions, the profit gained when traversing (u, v) may differ from that gained when traversing (v, u). In the following, we use the term ‘served’ to indicate a profitable arc (u, v) that is traversed at least d
                     
                        uv
                      times. In order for T to be feasible, facilities must be located at each vertex incident to a profitable arc served by T. Let U(T)⊆
                     V be the set of these vertices.

The DPLRPP is the problem of finding a tour T that maximizes the total net profit 
                        
                           
                              
                                 p
                              
                              
                                 ¯
                              
                           
                           (
                           T
                           )
                        
                      given by the difference between the profit p(T) returned from the arcs of R served by T and the cost of T (including both traveling and fixed costs):
                        
                           (1)
                           
                              
                                 
                                    p
                                 
                                 
                                    ¯
                                 
                              
                              (
                              T
                              )
                              =
                              p
                              (
                              T
                              )
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       (
                                       u
                                       ,
                                       v
                                       )
                                       ∈
                                       T
                                    
                                 
                              
                              
                                 
                                    c
                                 
                                 
                                    uv
                                 
                              
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       v
                                       ∈
                                       U
                                       (
                                       T
                                       )
                                    
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    v
                                 
                              
                           
                        
                     
                  

Consider a company interested in offering transportation facilities and services to a set of potential customers, e.g. industries, scattered in a geographical area over a given time period. Suppose that the company is based in Bremen.

Let V be the set of all relevant nodes of the area. Vertex 0 corresponds to the city of Bremen. The potential customers are located at nodes u
                        ∈
                        V and express a need to deliver freight to their own customers located at nodes v
                        ∈
                        V. Freight has to be delivered d
                        
                           uv
                         times from u to v. We say that the potential request of service from u to v has demand d
                        
                           uv
                        . A profit p
                        
                           uv
                         is gained if the demand is served, that is if the freight is transported from u to v the requested number of times. A profitable arc is associated with each of these potential requests of service. We indicate by R the set of all profitable arcs. The set of arcs A is formed by all oriented links (u, v) which define connections between pairs of nodes, that is links a truck can travel. The set of arcs A contains the set of profitable arcs R and other non-profitable arcs. In practice, profitable and non-profitable arcs are selected from a road map filtering inadequate (e.g., too long or too expensive) connections.

The leftmost table in Fig. 1
                         gives a set of potential requests of service, with the associated profit p
                        
                           uv
                         and demand d
                        
                           uv
                        . Using real travel times and filtering off connections requiring more than T
                        
                           max
                        
                        =360minutes, we obtain the graph of Fig. 2
                        . For ease of representation, in Fig. 2 we drew profitable links as directed arcs. Non-profitable connections are represented by edges meaning that the connection between the corresponding pair of cities can be traversed in both directions. Note that profitable arcs can also be traversed in the opposite direction.

In order to make a business plan, the company wants to find the most profitable tour in G. The elements of this tour – terminals and connections – are chosen on the basis of costs and profits.

The most important cost sources, measured on a long-term base, are of two types:
                           
                              •
                              costs f
                                 
                                    v
                                  allocated to terminals, to be covered in order to provide terminal services, such as warehousing: these costs may include infrastructure availability (e.g., premises rental) and fixed operational costs, and do not depend on the number of connections served;

mileage-toll costs c
                                 
                                    uv
                                  allocated to links, depending on the link length and on highway tariffs. Mileage costs not only include fuel consumption, but also the relevant quote of driver/hours, fleet maintenance, etc.

Costs c
                        
                           uv
                         are estimated on the basis of the length of the link (u, v) and reported in Fig. 3
                        . The cost f
                        
                           v
                         of setting up a terminal at v is indicated for each city in the rightmost table of Fig. 1.


                        Fig. 4
                         shows the optimal tour that gives a net profit estimate of 1,797,472euros, over a total cost of 5,083,137euros (2,351,000 for terminal set-up and 2,732,137 for routing). The solution selects 18 profitable arcs out of 22 (82%). This solution has been found through the branch-and-cut algorithm described in Section 5.

@&#LITERATURE REVIEW@&#

The class of problems studied in the literature which is most closely related to the DPLRPP is the class of Location-Arc Routing Problems (L-ARP) (Ghiani & Laporte, 2001; Liu et al., 2008), where a set of required edges have to be served by vehicles starting and ending their tours at some depots which have to be located incurring in a fixed cost. In this case, however, profits are not considered. The case of a single uncapacitated vehicle is called the Location Rural Postman Problem (LRPP) (Ghiani & Laporte, 1999). The difference between the LRPP and the DPLRPP is that the LRPP is undirected, no profit is considered and the decision on where to locate the depots is made on a set of possible locations, while the DPLRPP is directed, profits are considered and each time a profitable arc is traversed, a facility has to be opened in both end-points. An early paper by Rhys (1970) studied a problem that considers the installation of freight handling terminals: similarly to our case, a link can be established only after activating both terminals at its end-points, and a fixed cost is incurred for establishing a terminal. However, no profits are considered.

Another class of problems related to the DPLRPP is the class of arc routing problems with profits. In Aráoz, Fernández, and Meza (2009) the Prize-collecting Rural Postman Problem (P-RPP), which is a generalization of the classical Rural Postman Problem (RPP) (Orloff, 1974), is presented. In the RPP a set of required edges is given and the objective is to find the minimum cost tour that traverses all the required edges. In the P-RPP instead, there is a set R of profitable edges, and a profit is collected the first time each edge of R is traversed. In both problems, the fleet consists of a single vehicle and no vehicle capacity or maximum tour duration constraints are considered. The objective of the P-RPP is to find a tour that maximizes the total net profit, given by the difference between the total profit collected and the cost of the tour. The P-RPP, in fact, generalizes the RPP. If we associate a very large profit with any (u, v)∈
                        R (e.g., 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    E
                                 
                              
                              
                                 
                                    c
                                 
                                 
                                    ij
                                 
                              
                           
                        ) and no profit with (u, v)∉
                        R, a solution of the RPP is found by solving the P-RPP on the constructed instance. Extensions of the RPP to a multi-vehicle fleet have been studied in Archetti, Feillet, Hertz, and Speranza (2010), Feillet, Dejax, and Gendreau (2005). For a survey on arc routing problems with profits, the reader is referred to Archetti and Speranza (2013).

Let us introduce the decision version D-DPLRPP of the DPLRPP.
                        
                           
                              Instance: Directed graph G
                              =(V, A) with V
                              ={0,1,…,
                              n}, non-negative cost c
                              
                                 uv
                               for each (u, v)∈
                              A, non-negative value p
                              
                                 uv
                               (profit) and integer d
                              
                                 uv
                               (demand) associated with arc (u, v)∈
                              R
                              ⊆
                              A, non-negative cost f
                              
                                 v
                               for each v
                              ∈
                              V, positive parameter b.


                              Question: Is there a tour T in G, starting and ending at 0, for which the net profit (1) is greater than or equal to b?

The computational complexity of the D-DPLRPP is easily established, because the DPLRPP generalizes the DRPP. It suffices to associate sufficiently large profits and unitary demands with the required arcs, zero profit with those not required and zero fixed cost with each vertex. It is, however, worth noticing that the problem remains difficult under simplifying assumptions, such as the symmetry of both the underlying graph and the profits collected at arcs.
                        Theorem 1
                        
                           The D-DPLRPP is NP-complete even with
                           
                              
                                 •
                                 
                                    c
                                    
                                       uv
                                    
                                    
                                    =
                                    
                                    c
                                    
                                       vu
                                    
                                    ∈{0,
                                    
                                    1}, ∀(u, v)
                                    ∈
                                    A,
                                 


                                    p
                                    
                                       uv
                                    
                                    
                                    =
                                    
                                    p
                                    
                                       vu
                                    
                                    , ∀(u, v)
                                    ∈
                                    R,
                                 


                                    f
                                    
                                       v
                                    
                                    
                                    =
                                    
                                    0, ∀v
                                    ∈
                                    V,
                                 


                                    d
                                    
                                       uv
                                    
                                    
                                    =
                                    
                                    1, ∀(u, v)
                                    ∈
                                    R.
                                 

By reduction from Hamiltonian Circuit (HC). Consider an instance of HC, that is a connected undirected graph (N, E) with ∣N∣=
                           n, ∣E∣=
                           m
                           ⩾
                           n
                           −1. Construct an instance 
                              
                                 I
                              
                            of the D-DPLRPP with vertex set V
                           =
                           N
                           ∪
                           N′, where N′ is in one-to-one correspondence with N. Thus, ∣N′∣=∣N∣=
                           n. The depot is settled at an arbitrary vertex of N. The arc set A is formed by two sets, A′ and A″: A′ contains two arcs (u, v) and (v, u) for each (u, v)∈
                           E, u, v
                           ∈
                           N, whereas A″ contains arcs (u, u′) and (u′, u), u
                           ∈
                           N and u′∈
                           N′, where u′ is the replica of u in N′. Set f
                           
                              v
                           
                           =0, ∀v
                           ∈
                           V, R
                           =
                           A″ and, for all (u, v)∈
                           A,
                              
                                 
                                    
                                       
                                          c
                                       
                                       
                                          uv
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      1
                                                   
                                                   
                                                      if
                                                      
                                                      (
                                                      u
                                                      ,
                                                      v
                                                      )
                                                      ∈
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      0
                                                   
                                                   
                                                      otherwise
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 
                                    
                                       
                                          p
                                       
                                       
                                          uv
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            m
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                   
                                                      if
                                                      
                                                      (
                                                      u
                                                      ,
                                                      v
                                                      )
                                                      ∈
                                                      R
                                                   
                                                
                                                
                                                   
                                                      0
                                                   
                                                   
                                                      otherwise
                                                      .
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           Finally, set d
                           
                              uv
                           
                           =1 for all (u, v)∈
                           R and b
                           =
                           nm
                           −
                           n.

Let U
                           ⊆
                           V, T
                           ⊆
                           A be a solution of 
                              
                                 I
                              
                           . Every time T visits a vertex v
                           ∈
                           N, it then visits its replica v′ and comes back to v, because arcs (v, v′) and (v′, v) have cost 0 and profit 
                              
                                 
                                    
                                       m
                                    
                                    
                                       2
                                    
                                 
                                 >
                                 0
                              
                           . Thus, w.l.o.g., T visits t
                           ⩽
                           n vertices of N (including the depot) traversing q arcs of A′, and t vertices of N′ traversing 2t arcs of A″, and consequently has value 
                              
                                 
                                    
                                       p
                                    
                                    
                                       ¯
                                    
                                 
                                 (
                                 T
                                 )
                                 =
                                 tm
                                 -
                                 q
                              
                           . If t
                           =
                           q
                           =
                           n, then 
                              
                                 
                                    
                                       p
                                    
                                    
                                       ¯
                                    
                                 
                                 (
                                 V
                                 ,
                                 T
                                 )
                                 =
                                 b
                              
                           . In this case, A″⊆
                           T and T
                           −
                           A″ is a cycle of G that corresponds to a Hamiltonian circuit of (N, E). Otherwise, either t
                           =
                           n and q
                           >
                           n or t
                           <
                           n and 
                              
                                 
                                    
                                       p
                                    
                                    
                                       ¯
                                    
                                 
                                 (
                                 V
                                 ,
                                 T
                                 )
                                 ⩽
                                 (
                                 n
                                 -
                                 1
                                 )
                                 m
                                 -
                                 (
                                 n
                                 -
                                 1
                                 )
                                 =
                                 (
                                 n
                                 -
                                 1
                                 )
                                 (
                                 m
                                 -
                                 1
                                 )
                                 <
                                 nm
                                 -
                                 n
                              
                           . In both cases 
                              
                                 
                                    
                                       p
                                    
                                    
                                       ¯
                                    
                                 
                                 (
                                 V
                                 ,
                                 T
                                 )
                                 <
                                 b
                              
                            and T
                           −
                           A″ does not correspond to a Hamiltonian circuit of (N, E). Hence, 
                              
                                 
                                    
                                       p
                                    
                                    
                                       ¯
                                    
                                 
                                 (
                                 V
                                 ,
                                 T
                                 )
                                 =
                                 b
                              
                            if and only if (N, E) is Hamiltonian. □

In the RPP (Eiselt, Gendreau, & Laporte, 1995) and the P-RPP (Aráoz et al., 2009) one can show that there always exists an optimal solution where each edge is traversed at most twice. We can readily see that this result does not hold for the DPLRPP. This is expected, as the DPLRPP generalizes the Directed Rural Postman Problem (DRPP), where it is well known that in an optimal solution arcs can be traversed more than twice.

Thus, in the DPLRPP, how many times does an optimal tour use an arc? The answer is given by the following theorem. No special assumption is made on profits, that may be symmetric or asymmetric. Let 
                        
                           d
                           =
                           
                              
                                 ∑
                              
                              
                                 (
                                 u
                                 ,
                                 v
                                 )
                                 ∈
                                 R
                              
                           
                           
                              
                                 d
                              
                              
                                 uv
                              
                           
                        
                     .
                        Theorem 2
                        
                           There exists an optimal solution of the DPLRPP that traverses any arc of G at most d
                           
                           +
                           
                           1 times.
                        

Let T
                           =(π
                           1,
                           R
                           1,
                           π
                           2,
                           R
                           2,
                           π
                           3,…,
                           π
                           
                              q
                           ,
                           R
                           
                              q
                           ,
                           π
                           
                              q+1) be an optimal tour, where π
                           
                              k
                            and R
                           
                              k
                            are sub-paths of T and
                              
                                 •
                                 
                                    R
                                    
                                       k
                                    
                                    ⊆
                                    R is a maximal sequence of (possibly repeated) arcs (u, v)∈
                                    R traversed a number of times which is lower than or equal to d
                                    
                                       uv
                                     in the sub-path (π
                                    1,
                                    R
                                    1,…,
                                    π
                                    
                                       k
                                    ,
                                    R
                                    
                                       k
                                    );


                                    π
                                    
                                       k
                                     is a sequence of arcs, either in A
                                    −
                                    R, or in R but already traversed d
                                    
                                       uv
                                     times or more in subpaths preceding π
                                    
                                       k
                                    .

Note that π
                           
                              k
                            is a simple path, i.e., each vertex is visited at most once in each π
                           
                              k
                           . If not, it contains a simple path π from the last arc of R
                           
                              k
                            to the first arc of R
                           
                              k+1. Since c
                           
                              uv
                           
                           ⩾0 and the profitable arcs (u, v) of π
                           
                              k
                            have already been traversed d
                           
                              uv
                            times (then further crossing give no profit), the arcs in π
                           
                              k
                           
                           −
                           π can be removed from T without affecting optimality.

Let (u, v)∉
                           R. Being π
                           
                              k
                            simple, (u, v) is traversed at most once in each π
                           
                              k
                           , k
                           =1,…,
                           q
                           +1. Since 
                              
                                 |
                                 
                                    
                                       ⋃
                                    
                                    
                                       k
                                       =
                                       1
                                    
                                    
                                       q
                                    
                                 
                                 
                                    
                                       R
                                    
                                    
                                       k
                                    
                                 
                                 |
                                 ⩽
                                 d
                              
                           , then also q
                           ⩽
                           d: then (u, v) appears in T at most q
                           +1⩽
                           d
                           +1 times.

Let instead (u, v)∈
                           R, and let R
                           
                              h
                            be the sequence where (u, v) is traversed for the d
                           
                              uv
                           th time. Then (u, v) is traversed d
                           
                              uv
                            times in the sub-path (π
                           1,
                           R
                           1,…,
                           π
                           
                              h
                           ,
                           R
                           
                              h
                           ), and
                              
                                 (i)
                                 does not appear in any R
                                    
                                       j
                                     with j
                                    >
                                    h;

can be traversed again in each π
                                    
                                       j
                                    , j
                                    >
                                    h, but no more than once since π
                                    
                                       j
                                     is simple.

The following example shows that the bound of Theorem 2 is tight.
                        Example 3
                        Let G
                           =(V, A) with
                              
                                 
                                    V
                                    =
                                    {
                                    0
                                    ,
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    ,
                                    n
                                    }
                                    
                                    A
                                    =
                                    {
                                    (
                                    0
                                    ,
                                    1
                                    )
                                    ,
                                    (
                                    1
                                    ,
                                    2
                                    )
                                    ,
                                    (
                                    2
                                    ,
                                    0
                                    )
                                    ,
                                    (
                                    2
                                    ,
                                    3
                                    )
                                    (
                                    3
                                    ,
                                    1
                                    )
                                    ,
                                    (
                                    2
                                    ,
                                    4
                                    )
                                    ,
                                    (
                                    4
                                    ,
                                    1
                                    )
                                    ,
                                    …
                                    ,
                                    (
                                    2
                                    ,
                                    n
                                    )
                                    ,
                                    (
                                    n
                                    ,
                                    1
                                    )
                                    }
                                 
                              
                           where 0 represents the depot, see Fig. 5
                           . Suppose c
                           
                              uv
                           
                           =1, ∀(u, v)∈
                           A, and f
                           
                              v
                           
                           =0, ∀v
                           ∈
                           V. Let R
                           ={(2, 3),(2, 4),…,(2, n)} (solid arcs), and p
                           
                              uv
                           
                           =10, d
                           
                              uv
                           
                           =1 ∀(u, v)∈
                           R.

An optimal tour serves all the arcs in R and, to do so, traverses arc (1, 2) d
                           +1=∣R∣+1 times (∣R∣ times to visit all profitable arcs and once to go back to the depot).

Note that assuming G symmetric does not prevent arcs from being traversed a large number of times in an optimal solution.
                        Example 4
                        Consider the symmetric closure of the graph of Example 3. Suppose c
                           
                              uv
                           
                           =1, ∀(u, v), f
                           
                              v
                           
                           =0, ∀v
                           ∈
                           V, and p
                           
                              uv
                           
                           =10, ∀(u, v)∈
                           R
                           ={(2, 3),(3, 1),(2, 4),(4, 1),…,(2, n),(n, 1)}. Again, an optimal tour traverses all the arcs of R and uses arc (1, 2) ∣R∣/2 times.

For any S
                     ⊆
                     V, we let δ
                     +(S) (respectively, δ
                     −(S)) denote the set of arcs with tail (respectively, with head) in S and head (and tail) not in S. When S
                     ={v} we use the shorthand δ
                     +(v), δ
                     −(v).

Let us introduce the following decision variables:
                        
                           •
                           
                              x
                              
                                 uv
                              
                              ∈{0, 1} for each (u, v)∈
                              R, with x
                              
                                 uv
                              
                              =1 if the profitable arc (u, v) is served, 0 otherwise;


                              
                                 
                                    
                                       
                                          y
                                       
                                       
                                          uv
                                       
                                    
                                    ∈
                                    N
                                 
                               for each (u, v)∈
                              A, equal to the number of times (u, v) is traversed;


                              z
                              
                                 v
                              
                              ∈{0, 1} for each v
                              ∈
                              V, with z
                              
                                 v
                              
                              =1 if a facility is located at v, 0 otherwise.

Objective (2) corresponds to maximizing the net profit. Constraints (3) express flow conservation. Inequalities (4) establish that a profitable arc (u, v) must be traversed a number of times greater than or equal to its demand to be served. Inequalities (5) and (6) enable a profit to be collected only if a facility is located at both end-points of the profitable arc. Inequalities (8) force the tour to visit a connected subgraph of G: in fact, at least one out-arc of S is to be traversed if two points – one in S and the other not in S – are visited by the tour. These inequalities, together with (7), also impose that the tour passes through the depot.

In this section we (i) provide a schematic description of the branch-and-cut algorithm we implemented and (ii) report the outcome of a computational experience carried out on a test bed specifically elaborated on the basis of arc routing instances taken from the literature. The algorithm, which uses the formulation (2)–(11) given in Section 4, is described in Section 5.1, the test bed in Section 5.2, and the results of the computational experiments are commented in Section 5.3.

Formulation (2)–(11) is solved by first removing constraints (8), and then reinserting them when violated by the current solution. This procedure is implemented in a branch-and-cut algorithm, coded in C using CPLEX Library version 11.2. Its basic features are summarized hereafter. The branch-and-cut algorithm we implemented follows the standard scheme for branch-and-bound where, at each node of the branch-and-bound tree, once the linear relaxation of the corresponding problem is solved, a separation algorithm is called to detect violated inequalities (8). Once these inequalities are found, they are introduced in the problem formulation and the linear relaxation of the problem is solved again. Branching is performed when no valid inequality is found.
                           
                              
                                 Lower bound. No primal heuristic to find a lower bound z
                                 
                                    LB
                                  is employed. Note that x
                                 
                                    uv
                                 
                                 =0, ∀(u, v), is a feasible (and possibly optimal) solution. Consequently, we initially set z
                                 
                                    LB
                                 
                                 ≔0.


                                 Subproblem selection. Subproblems are chosen on the basis of the Best Bound criterion.


                                 Constraint generation. Violated inequalities (8) are identified by solving a max-flow min-cut problem for each pair of vertices u and v on the auxiliary graph. Each time the separation algorithm is called, a pool of violated inequalities is constructed containing up to one violated inequality per vertex u. The minimum cut is found using a standard formulation solved by CPLEX. The cuts are added at all nodes of the branch-and-bound tree.


                                 Variable selection and branching direction. Default CPLEX parameters are adopted.

The test was carried out on a large number of instances of the DPLRPP. In all instances G has symmetric costs and asymmetric profits. The test bed consists of two types of instances obtained from
                           
                              •
                              18 benchmark instances of the Arc Routing Problem (ARP) proposed by Benavent, Campos, Corberán, and Mota (1992) and Li and Eglese (1996), and adapted to the Directed Profitable Rural Postman Problem (P-DRPP) by Archetti, Guastaroba, and Speranza (2012);

118 benchmark instances of the P-RPP elaborated by Aráoz et al. (2009) from various sources (Christofides, Campos, Corberán, & Mota, 1986; Corberán & Sanchis, 1994; Hertz, Laporte, & Nanchen-Hugo, 1999).

The ARP is defined on an undirected graph and no profit is associated with edges. A set of required edges, i.e., edges that must be traversed by any feasible solution, is defined. We adapted the instances of the first type to our problem as follows. First, we associated a nonzero profit with each required arc (u, v), generating it at random in the interval [∊c
                        
                           uv
                        , δc
                        
                           uv
                        ]. Three different classes of values were chosen for (∊, δ), namely (1.0, 2.0), (1.5, 2.5) and (2.0, 3.0). In this way, 3×18=54 instances were constructed. Then, we randomly chose a direction (u, v) in which this profit can be collected. The profit corresponding to the opposite direction (v, u) was generated at random in the range [0.5p
                        
                           uv
                        , 1.5p
                        
                           uv
                        ]. We set d
                        
                           uv
                        
                        =1 for each profitable arc. For arcs not originally required, we assumed zero profit in both directions. The resulting instances, classified with acronyms EA∊_δ, have up to 140 vertices and 190 profitable arcs.

Unlike the ARP, the P-RPP has profits associated with edges, but unlike the DPLRPP, the problem is defined on an undirected graph. Thus, for each edge we established a direction which inherits the original profit, and the profit of the arc associated with the opposite direction was generated as before. The resulting set of instances, classified with acronyms NoRPP, consists of 118 instances with up to 102 vertices and 203 profitable arcs.

For both types, we generated three classes of instances by varying the fixed location costs f
                        
                           v
                        . We have low, medium and high location cost classes, respectively, corresponding to f
                        
                           v
                         randomly generated in the intervals [1, 10], [1, 50] and [1, 100]. On the whole, the experiments were carried out on 3×(54+118)=516 problem instances. The main features of the instances tested are summarized in Tables 1 and 2
                        
                        . The name in the first column refers to a class of instances. The cardinality of the class is reported in the last column.

The algorithm was implemented in C, compiler gcc, and the experiments were carried out on a 2.53gigahertz Pentium III laptop with 4gigabytes RAM and Linux Ubuntu operating system.

The maximum time limit has been fixed to 3600seconds. Average statistics for all the instances solved to optimality can be found in Tables 3–8
                        
                        
                        
                        
                        
                        . Each row corresponds to a specific class. In some (very few) cases, the optimal solution value turned out to be 0. In such cases z
                        ∗/z
                        
                           UB
                         was set to 1.

Results in Tables 3–8 show that the upper bound at the root node is always very close to the optimum, as z
                        ∗/z
                        
                           UB
                         is, in most cases, greater than 0.99 and always greater than 0.974. The algorithm could solve 486 problems out of 516 (94.18%) within the time limit. More in detail, 422 instances (81.78%) were solved in less than 10seconds, 34 instances (6.58%) in less than 100seconds, and only for 30 instances (5.81%) the computational time exceeded 100seconds.

The hardest instances were those labeled D, derived from Hertz et al. (1999) and constructed with disconnected profitable arc sets, and those labeled EA_∊_δs, derived from Benavent et al. (1992) and Li and Eglese (1996) and constructed by generating nonzero profits at random when ∊ and δ vary within the three intervals [1.0, 2.0], [1.5, 2.5] and [2.0, 3.0].

Instances labeled G (grid instances from Hertz et al. (1999), see Table 2) and EA_∊_δval (from Benavent et al. (1992) and Li and Eglese (1996), see Table 1) turned out to be the easiest. These instances were solved in all cases at the root node within 1.13seconds, often with no cuts (8) added. For this reason, the detailed results are not reported.

Prioritizing branching on specific variables had no relevant impact on the computational times.

The number of nodes in the search tree tends to be small. The average number of nodes is 22.5 for the instances of Table 1, and 25.1 for those of Table 2 (the average considers only instances solved to optimality). This number is larger for the instances with large fixed costs.

@&#CONCLUSIONS@&#

The scientific literature reporting studies on integrated modeling of problems that have been previously treated independently is constantly increasing, due to the progress in technology and in algorithm design. This paper represents a first contribution to the integration of facility location and arc selection decisions within an arc routing setting.

In this paper we introduced a new problem in the class of arc routing problems with profits that incorporates facility location, arc selection and routing decisions. The problem, which is proved to be NP-hard even under strongly simplifying assumptions, models long/mid-range network planning. Its formulation differs significantly from the ones used in the literature for arc routing with profits. A branch-and-cut algorithm was implemented and tested on a large set of instances. We tested two classes of instances. The first class has up to 140 vertices and 190 profitable arcs, the second has up to 102 vertices and 203 profitable arcs. The computational results show the effectiveness of the algorithm which allowed us to solve 487 instances out of 516 within 1hour.

@&#ACKNOWLEDGMENTS@&#

The authors acknowledge the comments and suggestions of three anonymous reviewers that helped them improve a previous version of this paper.

@&#REFERENCES@&#

