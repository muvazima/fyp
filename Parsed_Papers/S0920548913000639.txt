@&#MAIN-TITLE@&#Analysis of approaches to structured data on the web

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We present approaches for publishing machine readable data online.


                        
                        
                           
                           Presented approaches are: Microformats, Microdata, RDFa and Linked Data.


                        
                        
                           
                           The major contribution of the paper is a direct comparison of approaches.


                        
                        
                           
                           The comparison is for readers that are deciding which approach they should use.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Structured data online

Semantic web

Resource description framework

Microformats

Microdata

Linked Data

Query languages

@&#ABSTRACT@&#


               
               
                  The early concept of the World Wide Web was the network of related (linked) documents represented in human readable form. The ongoing development leads to another aspect of the web, the web of data. The goal being that the network will provide first-class, machine readable data. Therefore the current network will be transformed to a network where the machines will not only serve as the platform that hosts human readable data but as a true machine–machine network. In this paper, we review and compare the formats, technologies and approaches that are used today for publishing semantic, machine readable data, on the web.
               
            

@&#INTRODUCTION@&#

Before the WWW the Internet was already a medium of communication with the primary methods of email and distributed data (Gopher, FTP) [1]. WWW introduced a simple markup language; HyperText Markup Language (HTML) [2]. HTML primarily focuses on the representation of data. HTML along with Hypertext Transfer Protocol (HTTP) provides a network of linked documents. In large part the success of the web, despite its simplicity, lies in the concept of the uniformly identifiable resources (URIs). Each web site is identified with a unique URI. HTML provides a simple way to publish and share information. The limitation of the current web is that it is essentially a human network. The machines provide only the infrastructure; the current state does not allow true automated data processing. The vision that everyone shares is that the web should be extended with semantic data. The current most widely used web language, HTML, is designed specifically for the representation of data. Consequently data publishing is limited to: raw data, comma-separated values, eXtensible Markup Language (XML) [3] or HTML tables. These formats suffer from the problem of losing the original data structure and semantics. Since the WWW is intended for human–human interactions and visualization of content it is sometimes referred to as the document web. The goal for the future is referred to as the data web; a web of first class data suitable for autonomous machine processing. The idea for the data web is to incorporate the openness of the WWW and the concept of URIs with semantic metadata that allows the creation of autonomous machine agents to perform user tasks and interact with other agents while performing them.

Currently there are two approaches to provide semantic data online: inline (structured data is a part of a HTML document) and parallel (structured data is published separately from the current web). The inline approach reuses existing HTML web pages and annotates them with tags that enable them to be machine readable. The parallel approach offers semantic data completely separate from existing content. Resource Description Framework (RDF) [4] is the standard data model used in both approaches (inline: RDFa syntax, parallel: Linked Data [5]). We have analyzed and compared approaches that are currently used on a large scale (Microformats, Microdata, RDFa and Linked Data). We could not find much related work that directly compares these approaches with the exception of Tim Berners-Lee's paper on the current state of Linked Data [6]. Therefore we felt that a comparison of the approaches was needed to provide an overview of existing technologies with regard to capabilities, performances and practices of operation.

We represent data representational languages, RDF and its successor, OWL in Section 2. Section 3 briefly presents the traditional alternative of publishing data, through APIs and web services. Section 4 is dedicated to the inline method of providing semantic data: Microformats [7], RDFa [8] and Microdata [9]. Section 5 presents Linked Data [6] as the only method of parallel publication of semantic data. In Section 6 we analyze and compare these approaches while in Section 7 we discuss query processing languages. We conclude with a summary.


                     Resource Description Framework (RDF) is a general-purpose language created for graph based information representation on the Web [4]. The information is presented, with Resource Description Framework Schema (RDFS), in the form of resources and relationships between them. “RDF provides a generic, graph-based data model with which to structure and link data that describes things in the world” [6]. RDF uses triples to encode data. A triple consists of a subject, a predicate (the property of the triple) and an object. The subject is either a RDF URI reference or an empty node, the predicate can only be a RDF URI reference and the object can be one of the following: a RDF URI reference, a literal or an empty node. The usual notation is in the form of a subject, predicate and object. A set of RDF nodes forms an RDF graph where the nodes are linked with predicates. RDFS is a simple language for the formalization of ontologies [10]. While it enables the building of a hierarchy of classes it does have several limitations. Some of the more important limitations are [11] (chapter: Web Ontology Language: OWL):
                        
                           •
                           properties are global in scope (RDF does not allow the statement that some cars are petrol only while others are hybrids),

relationships are only of the subclass type (“petrol car” is a subclass of a car, RDF does not provide any mechanism to state that petrol and diesel cars are disjoint),

classes cannot be built with Boolean operators (RDF does not allow a statement that would specify that a car is a disjoint union of petrol and diesel car classes),

restrictions on property cardinality are not possible (RDF does not allow a statement that would specify that a car needs at least four tires),

properties do not have the option of special characteristics (RDF does not allow a property to be defined as the opposite of another property e.g. selling and sold by).

The successor of RDF(S) is the ontology web language (OWL) [12]. OWL was designed as the answer to the missing features of RDF(S). Due to the extensive and contradictory requirements on expressive power and efficient reasoning support OWL comes in 3 different sublanguages: OWL Lite, Owl DL and Owl Full 
                     [13]. OWL Lite offers classification hierarchy and simple constraints. OWL DL offers great expressive power and guarantees computational completeness and decidability [13]. OWL Full combines the full scope of OWL language primitives with RDF and RDFS. OWL Full is completely compatible with RDF in both the syntax and semantics. This compatibility however results in a language so powerful that it cannot guarantee computational completeness.

The traditional way of sharing data and or functionalities is to expose them through a public API. Mashups are the combination of two or more public APIs in order to provide complementary functionalities in a unified manner. Many websites and information technology companies are providing access to their data or functionalities through public APIs. Programmable Web website [14] provides an API directory of over 2400 APIs (December 2010). The companies providing them are from a variety of fields: information retrieval (web search), location services (mapping and directions), e-commerce, news and many others. Traditionally these APIs are more functionality oriented; very few of them are actually providing data. A variety of mechanisms are used for the access to the APIs. Also the retrieved data is in a variety of different formats. We believe that the primary component for sharing data, through public APIs, is web services [15]. We can divide them into traditional non-semantic services and semantic web services. Traditional web services are described with the Web Service Definition Language (WSDL) [16]. They do not provide automated discovery and composition. Semantic Web services are services that overcome traditional limitations of Web services with the use of ontologies to describe the service. The languages commonly used for semantic Web services are OWL-S [17], WSMO [18] and WSDL-S [19].

The concept of semantic web requires the content to be annotated semantically. Several approaches have been proposed in recent years: Simple HTML Ontology Extensions—SHOE [20] (1996), RDF/XML in/linked from HTML (1998), Microformats [7] (2003) and eRDF (2005). Currently there are three approaches (that are used in a significant scale) to inline content annotation (structured data is located in the form of tags in HTML documents): Microformats, RDFa and Microdata.

The Microformat initiative is based on the concept of evolution not revolution. It is an approach to encode structured data in standard XHTML [7]. “XHTML is a family of current and future document types and modules that reproduce, subset and extend HTML 4. XHTML family document types are XML based, and are ultimately designed to work in conjunction with XML-based user agents” [21]. Microformats build on the XHTML class attribute system and use several existing elements to describe semi structured information (people, events). Underlying XHTML is based on XML and a similar concept is used for Microformats. The compound Microformats (e.g. hCard) are comprised of elemental Microformats (e.g. rel-nofollow).

Microformats have been designed for two reasons: (1) the inability of users to upload files on most blogging platforms and (2) the ability of HTML to encode some semantic information along with regular content [22]. The first reason is purely practical and it was intended as a means of independent enhancement of blogging platforms. The second is the initiative to promote the use of semantic technology, however limited it may be. The basic philosophy of Microformats can be presented in the following key words: reduce (focus on a specific problem), reuse (work from previous knowledge, reuse existing widely-adopted schemas), recycle (decentralize innovation by encouraging modularity and embeddability; XHTML enables embedding of Microformats in blog posts, ATOM and RSS feeds …), presentable (human readable, semi-structured information should be accessible and visible) and parsable (machine readable).

One of the most widely used Microformats is the representation of a calendar. Common issues such as time zones, recurrences and locations have been solved in the iCalendar format (successor of vCalendar) [23]. The only problem with iCalendar (as seen by the authors of Microformats), besides it being a machine only (not human) readable format, was that it was in the form of an external file (.vcs). Most blogging platforms at the time did not allow uploading file attachments. An example of a vCalendar is presented in Example 1. The same event in RDF is presented in Example 2. As we can see the Microformat representation, shown in Example 3, allows for both human and machine readability. Other Microformat specifications are listed in Table 1
                        . Along with the finalized specifications, the Microformat initiative is working on several drafts: adr (address information), geo (geographic coordinates), hAtom (syndication of episodic content), hAudio (information about audio recordings), hListing (information on online listings), hMedia (media publishing—images, video and audio), hNews (extends hAtom, used for news content), hProduct (publishing and embedding product data), hRecipe (publishing and embedding recipes), hResume (publishing and embedding resumes and CVs), hReview (embedding reviews of products, services, etc.), rel-directory (indication that the destination of a hyperlink is a directory listing containing an entry for the current page), rel=enclosure (indication that the destination of a hyperlink is to be downloaded and cached), rel=home (indication that the destination of a hyperlink is the homepage of the current page), rel-payment (indication that the destination of a hyperlink provides a way to show or give support), robots exclusion (implementation of the Robots META tag as a microformat) and xFolk (publishing collections of bookmarks).

RDFa provides a set of XHTML attributes to facilitate machine readable data along with visual representation for human use [8]. The abbreviation stands for Resource Description Framework in attributes. The attributes refer to attributes of a general mark-up language. In general RDFa is designed with the intention of representing an RDF graph in various document mark-up languages. Currently the specification only refers to RDFa in XHTML [24]. As represented in Table 2
                         RDFa both reuses existing attributes of XHTML as well as introduces new ones [24].


                        Example 4 shows how an image is annotated with RDFa. The image is annotated with attributes representing its title and author. Both are in general ambiguous and are used to show how RDFa handles vocabularies. Since RDFa is only a method (different syntax) of exposing machine readable data it uses the same mechanism of extensibility as RDF. All RDF vocabularies can be used in RDFa. Example 4 uses an existing vocabulary; Dublin Core (dc; vocabulary for the description of documents). The vocabulary is first imported so that the dc prefix is associated with the full name (dc="http://purl.org/dc/elements/1.1").

Microdata is another mechanism that allows machine-readable data to be embedded in HTML documents [9]. Microdata uses items which are collections of name–value pairs. Each name–value pair is a property. An item is specified by the itemscope attribute. Example 5 shows an item that presents the leading author of a scientific paper along with the information on when the paper was last revised. Another item presents how multiple properties with the same value are specified. This representation was selected to avoid duplication. Full list of Microdata attributes is represented in Table 3
                        . Microdata encourages reuse of existing vocabularies although ad-hoc vocabularies can be created and used. Some of the commonly used vocabularies include: Person, Product, Review and Event.
                           Example 1
                           An event in vCalendar format.
                                 
                                    
                                 
                              
                           

An event in RDF Calendar format.
                                 
                                    
                                 
                              
                           

The same event in the hCalendar microformat.
                                 
                                    
                                 
                              
                           

Example of RDFa in XHTML.
                                 
                                    
                                 
                              
                           

Example of Microdata in HTML.
                                 
                                    
                                 
                              
                           

Linked Data is a set of best practices for publishing and connecting structured data on the web [6]. The basic principles are determined with a set of rules defined by Berners-Lee [26]:
                        
                           1.
                           use URIs as names for things

use HTTP URIs so that people can look up those names,

when someone looks up a URI, provide useful information, using the standards (RDF, SPARQL),

include links to other URIs, so that they can discover more things.

From the rules we can infer that Linked Data uses standard WWW technologies with the exception of using URI addresses instead of Uniform Resource Locators (URLs). On top of HTTP and URI (used for address/location resolution and access to content) Linked Data uses RDF for content representation. This complies with the general architecture of the WWW [6,27] and positions the Linked Data as a top layer on the existing architecture. According to Berners-Lee [6] Linked Data shares many properties with the classic WWW of today:
                        
                           1.
                           Linked Data can contain any type of data,

publication is open to everyone,

vocabularies used for data representation are not limited,

the fact that entities are connected with RDF links leads to a global graph of data. Similarly to hyperlinks in WWW, this enables the discovery of new data sources.

The most visible application of the Linked Data principles is the Linked Open Data (LOD) project. The growth of the LOD cloud of connected data sources is shown in Fig. 1
                     .

We have reviewed and presented the current approaches available for the publication of structured data that is machine readable on the web. When we consider languages designed for data representation we conclude that currently only RDF(S) and OWL are standardized (and used in real life on a large scale). When considering the approaches to data representation two distinct types emerge: inline and parallel. RDF is used as the data model in both approaches (inline: RDFa, parallel: Linked data). The only nonstandard approach to publishing semantic data is the Microformat initiative. Microdata is the standard alternative to Microformats proposed by the World Wide Web Consortium (W3C). Microformats are the first approach to semantically annotate content and are rigidly designed with little common syntax. RDFa is an alternative syntax to RDF for embedding data to HTML pages. Microdata is a part of HTML standard with similar goals. Linked Data is the only approach to establishing a global web of data. Linked Data does not reuse existing content in HTML format. Therefore publishing data does not require changing any existing HTML content. However Linked Data is not indexed in the same way as standard web pages therefore search engines don't support it. Linked Data also requires separate browsers. Some of the distinctions between individual approaches are presented in the following subsections. A fuller comparison is in Table 4
                      where the individual approaches are compared on a broader set of criteria.

RDFa and Linked Data use RDF as their data model. Linked Data publishes data in large datasets. Because RDFa, Microformats and Microdata are all inline approaches they are implemented with the reuse or introduction of new (X)HTML elements.

Microformats are the most limited in their ability to model real world data as every microformat is a rigid specification intended only for a specific (narrow) problem area (for instance representing contact information for a person). Therefore each microformat is a vocabulary for a particular problem. Microdata, RDFa and Linked Data support many existing vocabularies for data representation. Microformats have a centralized control over vocabularies and only the organization creating microformats can create a new vocabulary or format. Microdata, RDFa and Linked Data do not have the same limitation as they support many preexisting vocabularies as well as introduction of new ones.

When considering syntax in the terms of difficulty of publishing we see that Microformats do not share any syntax among individual specifications. RDFa, Microdata and Linked Data each individually have common syntax. However the difficulty of publishing is greatest with these three formats. This is because of their individual advantages. When it comes to data integration common vocabularies alleviate many problems. However the content creator has to be aware of the vocabularies and how to use them. The rigidity and narrow focus of Microformats greatly reduce the amount of knowledge (or effort) that is needed for data publishing.

RDFa, Microformats and Microdata are a part of regular HTML content, therefore they are crawled exactly the same as content without semantic data. The crawlers simply extract the structured data in the process of indexing the retrieved content. This is not the case with Linked Data, as it is a web of RDF documents that lies in parallel to the current web. Google supports RDFa, Microformats and Microdata.

Linked data is best suited for publishing datasets (government, science). Other approaches are more suited for annotating presentable, human readable content with machine readable tags. From the three approaches Microformats are the easiest to use as they are suited for regular web developers and content publishers. However they are the most limited and therefore useful only for narrowly focused web sites.

As mentioned three of the four approaches are based on RDF (Microdata, RDFa and Linked Data). Because of RDF these approaches offer the usage of query languages. Several RDF query processing languages have been presented [31]. Motivation for RDF query language includes [32]:
                        
                           1.
                           declarative query language provides easy access to RDF repositories (enabling access to the repositories for various applications),

query language can use semantic information to provide better results,

robust query language can overcome the problem of multiple schema languages (impossible to assure that every resource will use the same schema language [33]),

query paradigm allows intuitive data access and allowing to overcome situations with operation overhead (SOAP protocol) [34],

RDF-based query language is needed to achieve logical and physical data independence.

RDF query languages need to support RDF concepts such as the abstract data model, formal semantics and inference, XML data types and statements on resources. Additionally query languages need to [31]:
                        
                           1.
                           be expressive—language needs to support powerful queries (at least relational algebra),

be safe—syntactically correct queries return finite number of results,

be orthogonal—all operations are independent of context,

support closure—query results are elements of the data model,

support all concepts from the data model.

Well-known RDF query languages include: SPARQL [35], RQL [36], Sesame RDF Query Language (SeRQL) [37], TRIPLE [38], RDQL [39] and N3 (in Euler [40] or CWM [41]). SPARQL is a W3C recommendation since 2008 and is designed to meet the requirements set by RDF Data Access Working Group [42]. SPARQL is a W3C recommendation and it offers many features of an RDF query language (XQuery and XPath, time, string and numeric functions and operators—casting, comparison…). RQL supports path expressions with variables on both nodes and edges of an RDF graph. It is able to combine schema and data querying by using taxonomies of labels. However RQL is not closed, queries return variables instead of RDF graphs and also places additional constraints on RDF models. SeSQL is being developed iteratively and is somewhat based on RQL, RDQL and N3. It is intended as a best practice approach to deliver an expressive query language that focuses on practical usage. TRIPLE is actually a query, a rule language and a runtime environment. Since it is derived from F-Logic it represents RDF triples as F-Logic expressions. TRIPLE is also not safe, closed and the mapping from RDF to F-Logic is not without loss. RQL has a select clause similar to SQL, it also is not closed and orthogonal but it is sage and has some support for data types. N3 has a text-based syntax; the data model conforms to RDF. N3 allows the definition of rules; it is a safe, orthogonal, closed and safe language. The major downside is that RDF semantics are not supported without custom rules. Versa uses a list of RDF resources as its main building block. The data structure and expression tree limit the ability to project multiple values at once therefore a new operator is introduced: distribute. Versa does not support multiple models, built in types and data manipulation. On the other hand Versa is a safe, orthogonal language. In Table 5
                      we provide a direct comparison of these languages. If a language supports a feature or property it is denoted by a ✓, unsupported features are marked by an “x” and features that are not directly supported but can be emulated in some way are marked with “s”. Features/properties in the table are those that are necessary/desirable in any RDF query language. Path expressions are used to support graph matching. If the data model represents irregular or incomplete information, the language needs to support optional path expressions to deal with these problems. Quantification (at least one match, all values match) is only supported by RQL. Aggregation is used to count the number of results that match a query. Grouping (such as the SQL GROUP BY clause) is not supported in any language and the same goes for sorting, the only exception being Versa. Recursion in a query is used to descend a tree of categories (like a family tree “recursively return all sons of current fathers”). Reification is unique to RDF; it allows using RDF statements as resources (therefore statements can be made on statements, for example who created the statement). Operations on namespaces, like querying only properties in a specific namespace are also desirable in an RDF query language. RDF allows language tagging (“xml:lang” attribute) however only SeRQL supports the processing of it. Also query languages need to support literals and data types. RDFS supports entailment of two typical usage cases: 1) subsumption between classes and properties and 2) classification of resources. Entailment is directly supported only in SeRQL and RQL. Basic algebraic functions, selection, projection, Cartesian product, set difference and set union, are also necessary for a query language to support.

@&#CONCLUSION@&#

We intended to provide an overview of existing semantic annotation technologies on the web. We have examined major approaches for publishing semantic data. Three of them are inline and one is parallel. RDFa, Microdata and Microformats are all approaches that are suited for regular web sites. They provide a mechanism that enables information represented in regular HTML to be additionally tagged with machine readable information. Linked Data is the only approach today that enables large dataset to be published online. We have presented all of the approaches individually and compared them on a variety of criteria. We conclude that RDFa is the standard to use for inline publishing of semantic information and Linked Data is the method for publishing large datasets. The use of RDFa is on the rise (more than 510% increase in usage in the period of March 2009 and October 2010, according to [28]). Microformats on the other hand are currently leading in the number of websites that are using them (over 2 billion) but the majority of formats have stagnated (except hAtom). Microformats are a rigid specification of narrow use, mostly applicable for web search engine usage scenarios (better crawling because data is semantically tagged, rich snippets when displaying results of search). Most notably they are used because they are simple. A standardized approach to eliminate major weaknesses (rigidity, interlinking, vocabularies) is the proposal of microdata, the W3C response to microformats. They also introduce a simple syntax while supporting vocabularies and interlinking of data. However the standard is not yet finalized. RDF on the other hand is a well known data modeling framework. RDF also offers query languages that enable direct access to the stored data in an SQL-like manner. We provided a comparison on performance of major RDF query languages. Some key features are still not supported (no language supported all key features), however progress is being made in this area. In the near future RDF based approaches are the most suitable for publishing semantic data. Weather the publication is in RDFa syntax or in a Linked Data dataset of triples it depends on the usage scenario and the target audience. Semantic markup is intended primarily for unification of data from various sources into unifying vocabularies. RDFa and Linked Data enable crosslinking and supplement each other therefore creating a true global semantic net.

@&#REFERENCES@&#

