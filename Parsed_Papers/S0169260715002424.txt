@&#MAIN-TITLE@&#Lessons learned from the implementation of remote control for the interoperability standard ISO/IEEE11073-20601 in a standard weighing scale

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The authors are working on a remote command and control extension package for the X73PHD stack.


                        
                        
                           
                           The extension package allows the manager to remotely modify agent's settings.


                        
                        
                           
                           A proof-of-concept implementation of this extension package applied to a X73-10415 compliant agent is presented.


                        
                        
                           
                           The proof-of-concept shows the implications in terms of footprint and development time.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Extension package

Remote control

Interoperability

ISO/IEEE11073

Standard

Personal health device (PHD)

@&#ABSTRACT@&#


               
               
                  The Point of Care (PoC) version of the interoperability standard ISO/IEEE11073 (X73) provided a mechanism to control remotely agents through documents X73-10201 and X73-20301. The newer version of X73 oriented to Personal Health Devices (PHD) has no mechanisms to do such a thing. The authors are working toward a common proposal with the PHD Working Group (PHD-WG) in order to adapt the remote control capabilities from X73PoC to X73PHD. However, this theoretical adaptation has to be implemented and tested to evaluate whether or not its inclusion entails an acceptable overhead and extra cost. Such proof-of-concept assessment is the main objective of this paper. For the sake of simplicity, a weighing scale with a configurable operation was chosen as use case. First, in a previous stage of the research – the model was defined. Second, the implementation methodology – both in terms of hardware and software – was defined and executed. Third, an evaluation methodology to test the remote control features was defined. Then, a thorough comparison between a weighing scale with and without remote control was performed. The results obtained indicate that, when implementing remote control in a weighing scale, the relative weight of such feature represents an overhead of as much as 53%, whereas the number of Implementation Conformance Statements (ICSs) to be satisfied by the manufacturer represent as much as 34% regarding the implementation without remote control. The new feature facilitates remote control of PHDs but, at the same time, increases overhead and costs, and, therefore, manufacturers need to weigh this trade-off. As a conclusion, this proof-of-concept helps in fostering the evolution of the remote control proposal to extend X73PHD and promotes its inclusion as part of the standard, as well as it illustrates the methodological steps for its extrapolation to other specializations.
               
            

@&#INTRODUCTION@&#

Technological advances in clinical environments during the last decades have led to the development of a variety of medical devices at the Point of Care (PoC) [1–4]. Most manufacturers developed medical devices with proprietary hardware and software solutions for the acquisition of data related to different pathologies. This heterogeneity however, led to compatibility and interoperability issues, largely due to the different models of communication implemented by each manufacturer [5,6]. Hence, the ISO/IEEE11073 family of standards (also referred to as X73) was initially defined to enable the interoperable exchange of vital signs between medical devices (agents) and central equipment (managers) at the PoC (X73PoC) [7–9].

More recently, the increase of people in adulthood who are requiring homecare as well as the recent advances in the development of medical devices – which opened the way for the integration of wireless technologies into medical devices – have fostered the spread of new personal health environments. Likewise, the personal health device (PHD) market was initially promoted by different manufacturers, causing a lack of interoperability. Therefore, it was necessary to develop standards that allowed interoperability between PHDs. The standardization effort driven by the Personal Health Device Working Group (PHD-WG) [10] brought many improvements to the ISO/IEEE11073 set of standards, such as an adaptation for Personal Health Devices (also referred to as X73PHD) [11,12]. This new version is mainly defined within the Optimized Exchange Protocol (ISO/IEEE11073-20601) and the pertinent device specializations (ISO/IEEE11073-104xx).

The scope of X73PHD covers areas such as health and fitness monitoring, independent living, and disease management. Traditionally, X73PHD-compliant devices were designed as simple pieces of equipment requiring little, if any, configuration. Currently, new scenarios demanding wide-ranging configuration options for devices have been introduced in the X73 ecosystem. Some examples are the Basic Electrocardiograph (X73-10406), the Sleep Apnea Breathing Therapy Equipment (X73-10424), and the Medication Monitor (X73-10472) specializations. These novel use cases expose the requirement of a service for configuration and remote control, which would allow modifying PHD parameters remotely [13]. In existing scenarios – such as e.g. home telemonitoring – remote control and configuration could improve the performance and usefulness of agents, by adjusting their parameters as a function of the dynamics of the patient's condition. Additionally, this could also extend the scope of X73PHD to other scenarios like sports, where PHDs could monitor the performance of athletes and, at the same time, receive orders on how to modify the desired parameters by remote control for each agent in particular. The possibilities that command and control offers could help to decrease costs associated to traditional telemedicine systems (e.g. when agents need a specialist to reconfigure them, remote command and control functionalities may help to decrease costs by avoiding the need of time to travel to the locations where the agent is operating).

To include remote control features, the X73PoC standardization group developed a communication profile (IEEE P11073-20301) to allow remote configuration of X73PoC agents. Several definitions of this drafted profile were already included in the ISO/IEEE 11073-10201 document. However, given that the X73PoC standard does not cover the needs of PHDs, there has been effort aimed at integrating remote control and command into PHDs [14,15]. In [14], a meta-model for describing medical devices and a communication protocol enabling remote control is proposed. In [15], a mobile transport vehicle implementing an ISO/IEEE 11073-20601 compliant communication interface is designed and the remote set features (which are not fully supported in ISO/IEEE 11073-20601) are discussed. However, none of these proposals above has been integrated into the X73PHD family, possibly because such proposals were not presented to, nor discussed with, the PHD-WG, which would have helped them to reach enough maturity, or because there was not enough consensus to continue the process. Therefore, it is highly convenient to work with the support of the PHD-WG.

During the last months, the authors have been working along with the PHD-WG in order to fully integrate remote control into the X73PHD family. The current proposal is an adaptation of the previously developed documents X73-10201 and X73-20301 of X73PoC version to the X73PHD version of the standard. The PoC devices were usually connected to the power line and therefore could implement heavy processing routines without battery drainage. This is not the case of PHD devices, which are usually powered by batteries. To that end, it is necessary to systematically examine the process and ensure that its implementation does not entail an unacceptable extra processing load. Such situation may discourage manufacturers from implementing the command and control feature, in view of the changes that it would require (such as, for instance, the microcontroller used, the battery capacity, etc.). A command and control implementation with an assumable processing load should stay within the same order of magnitude as current implementations of the X73PHD stack – which do not implement remote control. Thus, as mentioned above, the authors are working actively toward a common proposal along with the PHD-WG [13]. This proposal is based on a study on remote-control-related use cases, which helped in identifying the requirements [16]. Based on those requirements, the authors have drafted a new remote control package that was initially presented to the PHD-WG, and continues its evolution to publication [17,18]. Before the final publication, it is important to thoroughly test and evaluate the command and control proposal by implementing some of the use cases requiring remote control functionalities. Hence, members of the PHD-WG and other external researchers should be able to reproduce the results, which would allow checking that the additions to the standard are properly defined and detecting possible open points to discuss within the PHD-WG. Moreover, the implementation offers the possibility of making interoperability tests, connecting our agent to other manager implementations or vice versa. Therefore, this paper presents the development and evaluation of the proposed command and control package applied to a weighing scale (ISO/IEEE11073-10415) as a proof of concept. The remote control use case consists of being able to change its units of measure from kilograms to pounds and vice versa directly from the manager, which could be, for example, a smartphone in personal health scenarios or a compute engine in nursing units. The evaluation is based on the impact that the implementation of remote control features would have on developers and devices – protocol overhead, bandwidth, etc. – as well as on manufacturers – this impact will be measured in terms of the number of statements a manufacturer declares on a specific agent by means of Implementation Conformance Statements (ICSs), which are a form of data sheets that disclose details of a specific implementation and specify the features provided by the device.

This paper is organized as follows: first of all, the methodology (Section 2) covers three different methodological aspects, namely, the theoretical methodology (Section 2.1), the implementation methodology (Section 2.2), and the evaluation methodology (Section 2.3). Secondly, the results of implementing and evaluating the theoretical proposal – in terms of X73PHD protocol overhead and ICSs – are shown in Section 3.1 number of noteworthy points arising from the implementation of this proposal – along with future lines related to this proposal – are discussed in Section 4. Finally, conclusions are drawn in Section 5. It is worth noting that the kernel of the theoretical proposal (Section 2.1) was already presented in [17], but this manuscript describes it more thoroughly, so that readers can benefit from an overall approach to the problem. The implementation and the evaluation of the proposal – that is to say, the remaining of the methodology section, as well as the results and the discussion sections – are published herein for the first time.

@&#METHODOLOGY@&#

This section is divided into three different methodological aspects, namely, the theoretical methodology (Section 2.1) – which presents the proposal of command and control and how it is integrated into the three main domains of the X73PHD model applied to the weighing scale–the implementation methodology (Section 2.2) – which illustrates how the development process has been carried out – and the evaluation methodology (Section 2.3) – which describes which parameters have been measured and how they have been calculated.

The definition of the command and control proposal was divided into the three main components of the X73PHD model, namely, (a) the Domain Information Model (DIM), (b) the service model, and (c) the communication model. The modifications to the current version have been included in a draft, which is currently being discussed within the PHD-WG [17,18].

With regards to the weighing scale DIM, several objects were defined (Fig. 1
                           ). These objects are instances of classes both from the original X73-20601 [11,12] and new classes defined by the authors [18]. The new classes are marked using a tag with the text “draft”. The object instances that already form a part of X73-20601 and that were selected for future implementation are the following:
                              
                                 •
                                 Medical Device System (MDS) object: It represents general information attributes such as identification, model and manufacturer, date and time, etc.

Body weight numeric object: It describes a single weight measurement.

The object instances of new classes defined in the authors’ proposal are the following:
                              
                                 •
                                 Service and Control Object (SCO) object: It provides mechanisms to modify and operate with operation objects.

Select item: There is a single object of this class, which enables changing the unit of measure (kilograms or pounds). It represents a select item control. The selectable values are given as a list in the Select-Item-List attribute. This object inherits properties from the Operation class, which represents remote controllable items.

Operating scanner: It reports the information specifically about the operations implemented in the PHDs. In addition, this object inherits attributes and methods from both the Scanner and the Unconfigurable Scanner classes:
                                       
                                          ∘
                                          Unconfigurable scanner (UcfgScanner): It represents an observer that monitors the DIM and reports its changes.

Scanner: It provides a flow control mechanism that allows the manager start and stop agent reporting functions.

It is noteworthy that all classes related to the remote control extension package use a number of attributes which will be implemented in the PHDs according to necessary requirements. The attributes required for each class are summarized in Table 1
                           .

The service model defines the interactions between agent and manager in the X73-20601 architecture. The weighing scale MDS defines the following services:
                              
                                 •
                                 GET: This service allows the manager to retrieve attribute values of the MDS object in the agent.

Set-Time method: This method allows the manager to set the date and time in the agent.

MDS-Configuration-Event: This notification is used by the agent to report DIM configuration.

MDS-Dynamic-Data-Update-Fixed: This notification is used by the agent to send observations such as weight measurements.

The Operating Scanner of the weighing scale defines the following services:

SET (from the Scanner class): This service is used by the manager to enable or disable the Operational-State attribute. When it is enabled, the scanner starts sending notifications (MDS-Configuration-Event and MDS-Dynamic-Data-Update-Fixed). When it is disabled, it pauses and saves what it reported up to that moment.
                              
                                 •
                                 Oper-Create-Notification, Oper-Delete-Notification, and Oper-Attribute-Update: These notifications are used by the agent to transmit changes in context (creation of new Operations, changes on them, and deletion, respectively). Particularly, these notifications transmit the state of the Select-Item object (i.e. the units of measure currently active).

The SCO of the weighing scale defines the Operation-Invoke service. It allows the manager to modify the Select-Item object (in our use case to change the units of measure).

The SCO object access services defined for this proof of concept are summarized in Table 2
                           .

The new version of the communication model that includes the remote control extension package defines the common communication features in a bidirectional way between agents and managers. This is governed by a Finite State Machine (FSM) that defines the states an agent goes through during the process of remote control (Fig. 2
                           ). This process is used to change the units of measure (kilograms or pounds) and it is allowed exclusively within the Operating state (as defined in the X73-20601 communication model). Within this context, the weighing scale command and control FSM initially begins in the Disabled state (which is reflected in the Operational-State attribute in the Operating Scanner). To initiate the process, the manager sends the Operating Scanner a request to set the Operational-State attribute to enabled (RxSetOnReq). The Operating Scanner responds acknowledging the state change (TxSetOnRsp). From the Uninitialized state, the FSM goes, automatically, to the Initialized state. During this transition, the Operating Scanner sends the manager a report (TxCreateReq). The report contains information about the Select-Item operation, which controls the units of measure selected in the weighing scale. When the agent receives the response from the manager (RxCreateResponse), the FSM goes to the Ready state. In this state, the manager can invoke a method to modify the Select-Item operation in the SCO, in order to change units of measure. It is invoked by sending the corresponding command to the agent (RxInvokeReq), to the SCO. The SCO then acknowledges the invocation (TxInvokeRsp) and the agent goes to the Executing state. During some time, the SCO executes the invocation requested and, when it is done, the Operating Scanner sends to the manager the new units of measure selected using a report with the attribute changes (TxUpdateReq). When the manager acknowledges the reception of attribute changes (RxUpdateRsp), the FSM goes from the Synchronizing state to the Ready state. At this point, the process has been completed and the units of measure have been remotely changed.

An example sequence that illustrates a regular operation of the weighing scale remote control FSM and the Application Protocol Data Units (APDUs) interchanged is shown in Fig. 3
                           . This sequence includes the following interactions:
                              
                                 (A)
                                 A SET operation is sent by the manager to the Operating Scanner object. This process enables it by setting the attribute Operational-State.

The Oper-Create-Notification event is sent by the Operating Scanner to the manager containing the Select-Item and its attributes and current values.

At this point, the manager can change of units of measure by updating the Select-Item object. To do so, the manager sends the Operation-Invoke to the SCO object. The contents of this request include the Selected-Item-Index to be set in the Select-Item object.

Finally, in order to inform about the changes in the weighing scale, the Oper-Attribute-Update notification is sent by the Operating Scanner object with the new value of units of measure.

A platform for the remote control extension package was developed in order to test the theoretical proposal presented above. This implementation is crucial mainly for two reasons: first of all, an actual implementation provides feedback to check whether the extension of the X73PHD models for the newly created remote control feature was properly defined. Secondly, the implementation increases the possibilities of testing and debugging the theoretical proposal, given that other researchers would be able to develop independent implementations (based on the same theoretical proposal) and make interoperability tests connecting our agent to their manager or vice versa.

The developed platform consisted of an agent that implemented the profile X73-10415 and a manager to handle it. Both devices included the remote control extension proposed by the authors. The agent was programmed into a microcontroller which used a Bluetooth transceiver for sending and managing information (Fig. 4(a)). The manager was comprised of a personal computer and a development board including a Bluetooth transceiver (Fig. 4(b)).

Schematically (see Fig. 5a), the agent was comprised of an LPCXpresso Board for LPC1769, an Embedded Artists LPCXpresso BaseBoard, and a WT12 Bluetooth Breakout Board [19–21]. Internally, the LPCXpresso Board includes an LPC1769 microcontroller based on the ARM Cortex-M3 processor, which executed the X73PHD stack, and the LPC3154, which managed the standardized debugging interface used to debug the microcontroller software. Additionally, the Embedded Artists LPCXpresso BaseBoard provides an organic light-emitting diode display connected to the LPC1769 inter-integrated circuit port. This display was used to visually check configuration changes through remote control. In our specific use case of the weighing scale, any change in the units of measure could be seen in the display. Finally, the WT12 Bluetooth Breakout Board included the Bluegiga WT12 that managed the health device profile required for X73PHD-compliant medical devices implementing Bluetooth wireless communication.

The manager (Fig. 5b) was comprised of a WT12 Evaluation Kit and a personal computer connected through a standardized serial interface [22]. The WT12 Evaluation Kit includes a WT12 module that manages Bluetooth communications. The personal computer implements the X73PHD stack corresponding to the manager.

Regarding the operating system, the Real Time Operating System FreeRTOS [23] was selected to deploy the agent device in the LPC1769, due to its small footprint, high performance and its ability to communicate through the serial port, which is necessary to handle the WT12 via the universal asynchronous receiver-transmitter. The exchanged frames were managed by means of interruption handlers programmed as subroutines in operating system service tasks. With regards to software development, the LPC1769 FreeRTOSPlus Featured Demo was used to implement the X73PHD stack in C programming language, using the LPCXpresso v7.6.2 for Windows [24] as integrated development environment. Methodologically, an event-driven, pattern-based approach was followed [25].

The evaluation methodology is based on two aspects, the data overhead that the implementation of the command and control feature would cause, and the extra amount of work that manufacturers would need to carry out in order to include this feature in their devices. The former will be measured in terms of the size of the data packets transmitted, whereas the latter will be measured by means of the ICSs, which are statements that an X73PHD manufacturer uses to declare which features a specific agent does implement. These parameters are directly connected to the theoretical methodology presented above (in Section 2.1) due to the following reasons. Firstly, modifying the DIM – which means creating new classes and attributes – implies changes in the frames sent and in the number of ICSs. Secondly, a modified service model – which means either creating new frames or modifying existing ones – has implications in the size of the frames exchanged, but also in the number of ICSs. Finally, a new communication model – which means that there are new or modified states – affects mainly to the number of ICSs, but indirectly it also leads to modifications in the size of the underlying frames.

Such measurements have been selected to be the outcome of this study due to the following reasons. First, the data overhead is directly related to battery consumption, which is a crucial factor when developing wireless, personal devices. The overhead calculation is based on the size of the frames exchanged, given that sending more bytes implies a higher need of processing time – required to generate them – more microcontroller memory – needed to store the program that generates them– and more energy consumption – required to transmit them. Therefore, this outcome will help developers and designers of X73PHD-compliant medical devices providing information about the hardware requirements necessary to implement the remote control extension package. Second, the number of ICSs a manufacturer declares a specific device to be compliant with is directly related to the amount of money necessary to be invested to produce the device. The higher the number of ICSs declared, the longer the time developers must spend learning and checking them and, thus, the higher the implementation effort. This leads to the increase of the development costs manufacturers must assume. Therefore, it is an important measurement for manufacturers.

Methodologically, two closely related indicators have been selected to illustrate the differences – both in terms of bytes transmitted and number of ICSs declared – between a standard configuration weighing scale (P
                        
                           sc
                        ) and a remote-control-enabled weighing scale (PRC
                        ). The first one is the increment, which can be expressed either in absolute terms (ΔP) or in relative terms (ΔP
                        % ) that is to say in percentage. The absolute increment (ΔP) is calculated as the amount of items (bytes or ICSs) with remote control implemented minus the amount of items without remote control implemented (Eq. (1)). The relative increment (ΔP
                        %) is obtained as the ratio of the absolute increment and the number of items without remote control, multiplied by 100 (Eq. (2)). The second one is the relative weight (ΔW
                        %), which is calculated as the ratio of the absolute increment and the number of items with remote control, multiplied by 100 (Eq. (3)).
                           
                              (1)
                              
                                 
                                    
                                       Δ
                                    
                                    P
                                    =
                                    
                                       P
                                       
                                          R
                                          C
                                       
                                    
                                    −
                                    
                                       P
                                       
                                          S
                                          C
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    
                                       Δ
                                    
                                    
                                       P
                                       %
                                    
                                    =
                                    100
                                    ×
                                    
                                       
                                          
                                             Δ
                                          
                                          P
                                       
                                       
                                          
                                             P
                                             
                                                S
                                                C
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       Δ
                                    
                                    
                                       W
                                       %
                                    
                                    =
                                    100
                                    ×
                                    
                                       
                                          
                                             Δ
                                          
                                          P
                                       
                                       
                                          
                                             P
                                             
                                                R
                                                C
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

@&#RESULTS@&#

The software results of this investigation have been made publicly available in [26]. From this repository, the software that can be deployed on top of the FreeRTOS as well as all the APDUs generated during the agent-manager remote control process in the use case of the weighing scale can be downloaded.

In the following sections, the implications of the remote control proposal – in terms of X73PHD overhead, and ICSs – are described.

An example of a remote control sequence between a weighing scale and an X73PHD manager is shown in Fig. 6
                        . This event report contains all the information about the remote control objects defined for this agent. In this particular case, the operating scanner reports the Select-Item operation from the SCO instance of the class with its attributes. The figure is divided in several blocks. The header of the APDU is encapsulated in block 1, while the data themselves can be found within block 2. In turn, block 2 is further subdivided into four blocks corresponding to the four attributes related to the Select-Item operation instance (i.e. MDC_ATTR_OP_SPEC, MDC_ATTR_OP_STAT, MDC_ATTR_INDEX_SEL, and MDC_ATTR_LIST_SEL). It is noteworthy that this example corresponds to the create notification exchanged in the interaction (A) in Fig. 2.


                        Table 3
                         shows a comparison of the size of each APDU when remote control is or is not implemented. The second-to-rightmost column shows the sizes when the current X73-10415 profile is used, whereas the rightmost column shows the sizes when using the proposed remote control extension package. The highlighted cells correspond to the new features. The bottommost row shows the full size of each sequence.

When a manufacturer declares the ICSs a device is compliant with, such declaration of ICSs must meet the rules described in X73-20601. Table 4
                         exemplifies the ICSs that a manufacturer developing the proposed weighing scale should declare, distinguishing between ICSs belonging to a standard configuration weighing scale and those ICSs required in an extended remote control implementation. The first column (named “Index” as per the standard nomenclature) shows a unique code that represents specific features, i.e., the versions or revisions supported by the implementation and some other high-level generic system definitions (GEN-x), X73-20601 specific requirements (REQ-y), the services implemented (SRV-x), the attributes implemented (ATTR-n-a), the notification reports implemented (NOTI-n-s), the action services implemented (ACT-n-t), and the PHD object class implemented (POC-x). Two new subcategories have been created for this proposal: one related to the operations implemented (POC-OP-n) and the other to the attributes implemented in such operation objects (ATTR-OP-n-a). In the second column, the implemented features are listed. The third column provides the location of the specific section within the documents of the X73 family where this feature is defined. Finally, the last column indicates the feature status and qualifier of the ICS.

The influence of the proposed implementation can also be observed in Table 4. Highlighted rows belong to the ICSs corresponding to the implementation of the remote control extension. The ICSs with superscript 1 are present in [11], and its implementation is mandatory, as is the case of the operational state, which determines the generation of the MDC_NOTI_OP_CREAT event by the Scanner package. The ICSs with superscript 2 are present in [18]. The ICSs with superscript 3 correspond to those subcategories created specifically for this proposal. Finally the rest of ICS belongs to features implemented in the current version of the standard.

@&#SUMMARY@&#

The results, calculated as detailed in Section 2.3, are summarized in Table 5. The first row indicates the parameter, and the next rows show the results for: the parameter in the implementation without remote control, the parameter with remote control, its absolute increment, its relative increment, and its relative weight.

@&#DISCUSSION@&#

The specialization chosen to prove the feasibility of the proposed remote control package was the weighing scale (ISO/IEEE11073-10415). This is a simple but comprehensive specialization and, therefore, it provided all the capabilities to test the whole remote control proposal. Even though the weighing scale is the least complex specialization, the level of complexity to add remote control is rather elevated. On account of the new objects introduced by the command and control proposal, a legacy manager that does not implement them would not able to load the remote-control-enabled configuration event report and associate with the weighing scale, given that there would be object classes that could not be interpreted. Therefore, to get associated with such a legacy manager, the agent could offer a fallback configuration that does not include command and control objects. In order to facilitate the coexistence of both versions and to incorporate this extension to the standard, it would be needed to increment the protocol version of the standard. Hence, if the manager is not compatible with command and control, the manager can reject the command and control configuration and select a compatible X73PHD version directly during association.

The discussion section is divided into three subsections, where the protocol overhead, the extra number of ICSs and some future lines are discussed.

According to the results in the bottommost row in Table 5
                        , implementing the remote control process would imply that the relative weight of the size in bytes of the remote control procedure represents as much as 53%. This increase in transmitted bytes could be related to an increase in power consumption. However, due to several factors – including, for example, the agent specialization used (e.g. an electrocardiogram recorder could require configuration every time it associates meanwhile the weighing scale would probably need configuration only the first time it is used), the number of users sharing the agent (ranging from a strict personal use to a retirement home that requires multiple user-tailored configurations), user preferences (some users may want to reconfigure the agent more frequently), medical prescriptions (a formal caregiver may require continuous reconfiguration of the agents to better support clinical decisions making), among others – providing quantitative measures on how deeply the incorporation of remote control would affect X73-compliant agents is an intricate task. In the case of the weighing scale, the configuration process would probably be executed only the first time it is used and, therefore, in the long term, the impact on the overhead and, thus, on the autonomy of the device, could be considered as limited.

Regarding compliance to X73, the relative weight of new ICSs that a manufacturer has to implement is as much as 34%, according to the results in Table 5. If we make the assumption that the workload to implement the standard is uniformly distributed among all the ICSs, the manufacturers shall dedicate as much as 34% of the resources to the implementation of remote-control-related features. Although these devices would be more expensive to develop, their new functionalities could compensate their cost, for example avoiding the need of technicians spending time (and money) traveling to reconfigure agents in situ. Additionally, the use of remote-control-enabled stacks could decrease total costs, for example if a software development kit were used by a manufacturer to develop several specializations and also if such kit were, eventually, publicly available or at least shared among different manufacturers. Moreover, the new features could open the market to new niches that could have not been appropriately (or cost-efficiently) covered without remote control. Anyway, the final decision of a manufacturer to develop a remote-control-enabled device will also depend on a number of variables such as market needs, device type, use case, etc.

Within this subsection, two closely related topics not covered by the current proposal are discussed, namely, security and privacy issues – which are relevant in remote control scenarios – and verification and validation issues – which cover aspects related to the integrity of the proposed models.

Transversely, security and privacy need special consideration when building a remote command and control solution. To date, X73PHD does not provide means to address a fully-fledged secure transmission of information, although some built-in characteristics can be considered as security- or privacy-related features: such as user identification (through the PersonID attribute), device identification (through the System-ID attribute, which is compliant with the IEEE 64-bit extended unique identifier) or the data encryption that may be provided by lower transport layers (even though this is not specifically part of X73PHD).

Recently, there has been some effort toward the inclusion of some security and privacy measures within X73PHD [27–30]. The methods proposed by such projects for handling authentication range from modifying the FSM to add challenge-based authentication [27,28] to develop a rather complex certificate-based architecture [29]. The encryption tools proposed on those manuscripts include symmetric algorithms like “Rivest, Shamir & Adleman” [27], asymmetric algorithms like the advanced encryption standard (assuming that the secret key is allotted in advance within the agent and the manager) [30], or biometric keys [28].

None of them however, provides a complete risk assessment and a comprehensive X73PHD security extension. Indeed, this is a complex issue, since serious considerations on legal and ethical issues have to be taken into account [13]. Although a secure end-to-end configuration is possible at a technical level, some use cases – e.g. configuration of pacemakers, drug pumps, insulin dispenser – may advise against the use of remote control. Nevertheless, the definition of a security- and privacy-related extension of X73PHD is a desirable feature. If such an extension were created, the remote control proposal described in this paper shall be revised to ensure its validity.

At the early stages of the definition of the command and control proposal, real and specific use cases that require remote control need to be implemented to test the proposed model. This approach allows to detect possible flaws or lacks, which can lead to improvements in the proposal. The first step is therefore to implement simple use cases and then complete them with more complex ones.

In addition to real and practical implementation of the extension in particular use cases, the formal verification is a consistent method to theoretically check the correctness of the FSM. In the literature, a number of approaches – mainly by means of specific simulators – have been used to test the association process of the FSM [31,32]. In [31], the simulation was based on the Promela language and the Spin tool. The results obtained in this study highlighted several flaws in the association procedure of the FSM, which led to additions to the standard. A different approach was used in [32]. In such work, the association model was evaluated using the mCRL2 simulator, which showed, additional flaws in the association process of the FSM, which were consequently referred to the PHD-WG.

Any of these approaches that has been used to test the association procedure of the FSM could also be used to test the proposed command and control extension. Although model checking testing is complete in theory, they are in practice limited to model checkers features, modeling limitations and sometime to the lack of cross-modeler tests. Naturally, the proposal presented herein would benefit from a validation test using such methods – the more, the better. To that end, however, appropriate models of the command and control FSM should be created to be used in the model checkers.

@&#CONCLUSION@&#

The implementation developed in this research exemplifies the use of a remote control extension for the ISO/IEEE11073 interoperability standard. The extension has been applied to the particular case of a weighing scale, where the unit of measure parameter in an agent can be modified from a manager – from kilograms to pounds or vice versa. Both agent and manager devices have been designed and the results obtained have been evaluated in terms of protocol overhead and number of ICS. The overhead and ICSs of this implementation are not significantly larger – in absolute terms – than the implementation of the standard weighing scale (Configuration-Id=1500) from the current version of the standard. Therefore, the application of this extension generates a tolerable (that is to say, within the same order of magnitude) extra processing load to the PHDs. Affordable microcontroller architectures that operate with low power consumption can be used for the deployment of agents implementing remote tasks as proposed in this research. The potential final inclusion as part of the standard could leave open to the manufacturers the actual implementation the remote control. However, PHDs that finally do implement the remote control would be required to also implement a standard configuration, so that the interoperability between earlier versions is guaranteed.

Finally, the remote control extension proposed in this research can be extrapolated to any other specialization of the X73PHD standard. Sequence diagrams, FSM and specific binary codes can be obtained from this extension for each specialization.

@&#ACKNOWLEDGMENTS@&#

The work of the Héctor Gilberto Barrón-González was supported by Coordination of Electronic and Communication Engineering of the Faculty of Engineering, Autonomy University of Nuevo León. The Public University of Navarre under project Res. 637/2014 supported the work of J.D. Trigo. The authors would like to thank to Personal Health Devices Working Group (PHD WG) members for their guidance.

@&#REFERENCES@&#

