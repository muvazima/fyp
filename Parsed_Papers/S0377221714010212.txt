@&#MAIN-TITLE@&#A distribution-free TSP tour length estimation model for random graphs

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We develop a new tour length estimation model for random graphs.


                        
                        
                           
                           The model has high predictive power even when the node dispersion in unknown.


                        
                        
                           
                           For known dispersions, the model estimates Beardwood et al.’s (1959) coefficient.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

TSP

Tour length estimation

@&#ABSTRACT@&#


               
               
                  Traveling Salesman Problem (TSP) tour length estimations can be used when it is not necessary to know an exact tour, e.g., when using certain heuristics to solve location-routing problems. The best estimation models in the TSP literature focus on random instances where the node dispersion is known; those that do not require knowledge of node dispersion are either less accurate or slower. In this paper, we develop a new regression-based tour length estimation model that is distribution-free, accurate, and fast, with a small standard deviation of the estimation errors. When the distribution of the node coordinates is known, it provides a close estimate of the well-known asymptotic tour length estimation formula of Beardwood et al. (1959); more importantly, when the distribution is unknown or non-integrable so Beardwood et al.’s estimation cannot be used, our model still provides good, fast tour length estimates.
               
            

@&#INTRODUCTION@&#

Tour length estimation models for the Traveling Salesman Problem (TSP) are useful especially in cases where we do not need to know what the exact tour is, yet we are interested in the optimal tour length. For example, some heuristics for the Location-Routing Problem (LRP) use iterative approximations of tour lengths to cut down on the computation time. Chien (1993) showed that tour length estimations can be used to get good solutions for the LRP. Nagy and Salhi (1996) proposed using tour length approximations in heuristic approaches to solve the LRP. They showed that estimation-based models find good solutions while they require less computation time. In applications where available computation time is constrained, using tour length estimates can allow the heuristics to spend more of their time searching for better solutions (Nagy and Salhi, 2007). For example, time constraints can be an issue in mobile location routing problems where the facilities are set up temporarily. This can be due to high establishment cost, or highly changing demand; related application areas are cellular communication, humanitarian logistics, blood collection, and postal service in urban areas (Halper and Raghavan, 2011). Since decisions in these applications are made repeatedly and time is limited, using good tour length estimation models to speed up the decision process to reach better solutions can provide significant benefits.

There are several tour length estimation models in the literature. However, they mostly study graphs where the nodes follow a known distribution, usually uniform. To enable a broader use of tour length estimation models, we design in this paper a distribution-free model to estimate the tour length. The model can be used with general node scatters where the distribution may not be known.

In their seminal paper, Beardwood, Halton, and Hammersley (1959) showed that when nodes are identically and independently distributed according to a probability density function f on a two-dimensional region R, the following holds:

                        
                           (1)
                           
                              
                                 
                                    lim
                                    
                                       n
                                       →
                                       ∞
                                    
                                 
                                 
                                    
                                       T
                                       *
                                    
                                    
                                       n
                                    
                                 
                                 =
                                 β
                                 ∫
                                 
                                 
                                    ∫
                                    R
                                 
                                 
                                    
                                       
                                          f
                                          c
                                       
                                       
                                          (
                                          x
                                          ,
                                          y
                                          )
                                       
                                    
                                 
                                 d
                                 x
                                 d
                                 y
                                 ,
                              
                           
                        
                     where T* is the optimal tour length, n is the number of the nodes, fc
                      is the absolutely continuous part of f, and β is a constant. The exact value of β is unknown; computational studies determined that the practical value of β is approximately 0.712 (Cook, 2011).


                     Eilon, Watson-Gandy, and Christofides (1971) derived an expression for the expected length of a traveling salesman problem with large number of uniformly randomly distributed nodes. They showed that the length of a TSP tour is equal to a constant times 
                        
                           
                              n
                              A
                           
                        
                      for any arbitrary area A. Beardwood et al.’s (1959) model also reduces to this form when we define 
                        
                           β
                           
                              
                              ′
                           
                           =
                           β
                           ∫
                           
                           
                              ∫
                              R
                           
                           
                              
                                 
                                    
                                       f
                                       c
                                    
                                    
                                       (
                                       x
                                       ,
                                       y
                                       )
                                    
                                 
                                 A
                              
                           
                           d
                           x
                           d
                           y
                        
                     . Eq. (1) becomes 
                        
                           
                              T
                              *
                           
                           =
                           β
                           
                              
                              ′
                           
                           
                              
                                 n
                                 A
                              
                           
                        
                      on a region of area A, so that each node dispersion family has its own value of β′ in Beardwood et al.’s model. For example, graphs with uniformly-distributed nodes will have β′ approximately equal to 0.712 regardless of the area over which nodes are distributed.

When the node dispersion is unknown, 
                        
                           ∫
                           
                           
                              ∫
                              R
                           
                           
                              
                                 
                                    f
                                    c
                                 
                                 
                                    (
                                    x
                                    ,
                                    y
                                    )
                                 
                              
                           
                           d
                           x
                           d
                           y
                        
                      cannot be computed, so in such cases Beardwood et al.’s estimation model cannot be used. To address this situation, the literature contains several estimation methods based on regression, and others that use TSP heuristics to find a tour.

Some of these methods are based on the desire to estimate TSP tour length within the Vehicle Routing Problem (VRP). Christofides and Eilon (1969) showed a model to estimate the tour length covered by a fleet of trucks using the radial distances. To test their models, they used uniformly distributed nodes on a square region. Daganzo (1984b) proposed a heuristic-based tour length estimation formula for the TSP. His model divides the area into strips of width w, and visits the nodes in the order that they are encountered along each strip. Following this approach, he found that the length of a tour is approximately 
                        
                           0.9
                           n
                           
                              δ
                           
                           ,
                        
                      where δ is the density of the nodes. His focus in this paper was on uniform node dispersion. Daganzo (1984a) also developed a tour length estimation model specifically for the type of tours one finds in the Capacitated VRP (CVRP). Hall, Du, and Lin (1994) tested the accuracy of Daganzo’s (1984a) model. They computationally showed that the model generates accurate estimates for instances where shipment sizes are identical. They also used the model in their VRP heuristic. Robusté, Daganzo, and Souleyrette II (1990) showed that Daganzo’s CVRP-specific model is suitable for cases when 7 < C < 1.5n/C, where C is the maximum number of nodes that a vehicle can visit. Therefore, while the model is well suited for instances of CVRP, it is not designed for general TSP tours. Robusté et al. showed that the model should be updated as follows if n/C
                     2 > 1.5−1:

                        
                           (2)
                           
                              
                                 
                                    T
                                    *
                                 
                                 ≈
                                 
                                    (
                                    0.9
                                    +
                                    k
                                    n
                                    /
                                    
                                       C
                                       2
                                    
                                    )
                                 
                                 
                                    
                                       n
                                       A
                                    
                                 
                                 .
                              
                           
                        
                     
                  

The value for the constant k is suggested as 0.45 for squares and 0.55 for six-by-ten rectangles. del Castillo (1998) proposed a method to find suboptimal solutions to TSP. His method is designed for uniform node dispersion on regions with circular or ring shape. His method divides the region into subregions and visits the nodes either in radial or in angular order depending on which subregion they are in.


                     Robusté, Estrada, and López-Pita (2004) provided formulas for elliptic regions for 3 different heuristics for VRP-specific tours using regression. They also empirically verified Daganzo’s and Robusté’s formulas on small graphs. Chien (1992) tested seven different TSP tour length estimation regression models. He compared the models on uniformly distributed small-number of nodes, and experimentally determined the most robust one among the others. Kwon, Golden, and Wasil (1995) also developed two regression models to estimate TSP tour length. The models have 
                        
                           
                              n
                              A
                           
                        
                      as one of the terms along with others. They analyzed both depot at the center and at the origin cases.


                     Platzman and Bartholdi (1989) developed a TSP heuristic based on space filling curves. Their algorithm is fast and lean, requiring just O(nlogn) operations and O(n) memory. However, the tours constructed by this algorithm can be significantly longer than the optimal tour. A space filling curve heuristic was implemented by Bartholdi, Platzman, Collins, and Warden (1983) to construct tours for a non-profit organization, and generated solutions which are about 25 percent longer than optimum. Other TSP heuristics can also be used to estimate tour length, such as k-opt (Lin and Kernighan, 1973; Reinelt, 1994), etc. These methods give good estimates, but take significantly more time, especially in the iterative LRP solution process.

Overall, the literature contains some tour length estimation models that are accurate, some that are fast (quicker than computing a tour), and some that can be used even when the random node dispersion is unknown; however, to the best of our knowledge, none of the models in the literature has all three of these desirable properties. In this paper, we present a tour length estimation model with all three. Table 1
                      summarizes the need for our model.

The rest of the paper is organized as follows. In Section 2, we discuss the design of the model. In Section 3, we validate the model by testing it under different environments with small and large random graphs and identify the conditions when it works well. In Section 4, we show that we can use the statistics of the population distribution of the node coordinates, rather than the exact locations of the nodes, to get close matches to Beardwood et al.’s model when the dispersion is known. In Section 5, we show the performance of our model on non-random graphs. In Section 6, we present some final remarks.

Our goal is to develop a model to estimate the optimal tour length on random graphs, which will perform well across many node dispersion types and even when the distribution is unknown. For this purpose, we first specify some graph attributes that capture information about how the nodes are distributed on a graph.

Classical attributes used in the literature are the number of nodes and the area of the graph. Additionally, we used the following attributes not yet considered in the literature.

                        
                           •
                           
                              Dispersion in each dimension: We measure each dimension’s dispersion using the standard deviation of the node coordinates in each dimension.


                              Closeness to the center: We measure closeness to the center by the average horizontal and vertical distance of nodes to the central axes (the horizontal and vertical midpoint lines of the space).


                              Dispersion around the central axes: We measure the dispersion of the nodes around the center by the standard deviation of their distances to the horizontal and vertical midpoint lines of the space.

The above measures account for the effects of node dispersion on the optimal tour length.

The following notation is used to define the graph attributes.


                     
                        Notation:
                     
                     
                        
                           •
                           
                              n: number of nodes in the graph,


                              lx, ly
                              : horizontal and the vertical lengths of a rectangular graph,


                              xi, yi
                              : horizontal and vertical coordinates of each node i,


                              
                                 
                                    
                                       
                                          c
                                          ¯
                                       
                                       x
                                    
                                    ,
                                 
                              
                              
                                 
                                    
                                       c
                                       ¯
                                    
                                    y
                                 
                              : average distance of nodes to the central horizontal and vertical axes,


                              stdevx, stdevy
                              : standard deviation of the nodes’ horizontal and vertical coordinates,


                              cstdevx, cstdevy
                              : standard deviation of the absolute distances of the nodes from the central horizontal and vertical axes,


                              A: area of the graph,


                              T: tour length.

Since the model is aimed to work well with many different node dispersions, we generated six types of rectangular graphs to train the model. In all these graphs, the first 4 nodes are placed on the corners to ensure that the total area within the convex hull is the same.

                        
                           1.
                           
                              Uniform graph: The coordinates of each node are uniformly distributed in each dimension independently on the intervals [0, lx
                              ], and [0, ly
                              ]. We use U(a, b) to denote a uniform distribution on the interval [a, b].


                              Triangular graph: The horizontal and vertical node coordinates are randomly generated by independent symmetric triangular distributions with parameters 
                                 
                                    (
                                    0
                                    ,
                                    
                                       
                                          l
                                          x
                                       
                                       2
                                    
                                    ,
                                    
                                       l
                                       x
                                    
                                    )
                                 
                               and 
                                 
                                    (
                                    0
                                    ,
                                    
                                       
                                          l
                                          y
                                       
                                       2
                                    
                                    ,
                                    
                                       l
                                       y
                                    
                                    )
                                 
                              . We use T(a, b, c) to denote a triangular distribution with minimum a, maximum c, and mode b.


                              Squeezed graph: In this graph, the nodes are denser around the right upper corner and less dense around the left lower corner.

To obtain the required node dispersion, we generate uniformly random nodes (x, y) on the plane. Then, we keep each node with probability 
                                 
                                    
                                       
                                          x
                                          y
                                       
                                       
                                          
                                             l
                                             x
                                          
                                          
                                             l
                                             y
                                          
                                       
                                    
                                    ,
                                 
                               so that nodes closer to the upper right corner are more likely to be accepted. The pseudocode is shown below. For each potential uniformly-generated node, we also generate a random variable accept from the distribution U(0, lxly
                              ). If the generated node is close enough to upper right corner, i.e., xy is larger than accept, we keep the node. Otherwise, we discard it and generate a new one.


                              repeat
                           


                              x ← U(0, lx
                              )


                              y ← U(0, ly
                              )


                              accept ← U(0, lxly
                              )


                              until 
                              accept < x · y
                           


                              x-axis uniform, y-axis triangular: This is a hybrid graph. Horizontal coordinates are generated by U(0, lx
                              ) and vertical coordinates are generated by 
                                 
                                    T
                                    (
                                    0
                                    ,
                                    
                                       
                                          l
                                          y
                                       
                                       2
                                    
                                    ,
                                    
                                       l
                                       y
                                    
                                    )
                                 
                              .


                              x-axis triangular, y-axis squeezed: This is another hybrid graph where the horizontal coordinates are generated by 
                                 
                                    T
                                    (
                                    0
                                    ,
                                    
                                       
                                          l
                                          x
                                       
                                       2
                                    
                                    ,
                                    
                                       l
                                       x
                                    
                                    )
                                    ,
                                 
                               and vertical coordinates are squeezed around the ceiling as shown in the pseudocode below.


                              repeat
                           


                              y ← U(0, ly
                              )


                              accept ← U(0, ly
                              )


                              until 
                              accept < y
                           


                              x-central graph: Vertical coordinates of the nodes are denser around the boundary, but horizontal coordinates are denser around the center. Each node is generated as shown below.


                              repeat
                           


                              x ← U(0, lx
                              )


                              y ← U(0, ly
                              )


                              accept ← U(0, 1)


                              until
                              
                                 
                                    a
                                    c
                                    c
                                    e
                                    p
                                    t
                                    <
                                    
                                       (
                                       1
                                       −
                                       
                                          
                                             ∣
                                             x
                                             −
                                             
                                                
                                                   l
                                                   x
                                                
                                                2
                                             
                                             ∣
                                          
                                          
                                             
                                                l
                                                x
                                             
                                             2
                                          
                                       
                                       )
                                    
                                    
                                       (
                                       
                                          
                                             ∣
                                             y
                                             −
                                             
                                                
                                                   l
                                                   y
                                                
                                                2
                                             
                                             ∣
                                          
                                          
                                             
                                                l
                                                y
                                             
                                             2
                                          
                                       
                                       )
                                    
                                 
                              
                           

Each of these six graphs is illustrated by one example with 1000 nodes in Figs. 1–6
                     
                     
                     
                     
                     
                     .

To train the model, 400 graphs were generated for the aforementioned six graph types. The parameter combinations to generate the graphs were obtained by crossing the elements from the following sets.

                        
                           •
                           
                              n ∈ {3000, 4000, 5000, 5200, 5400, ..., 6600, 7000, 8000},


                              lx
                               ∈ {250, 300, 400, 500, 600, 800, 1000, 1200, 1600},


                              ly
                               ∈ {
                                 
                                    
                                       
                                          250
                                          ,
                                          000
                                       
                                       
                                          l
                                          x
                                       
                                    
                                    ,
                                 
                              
                              
                                 
                                    
                                       
                                          360
                                          ,
                                          000
                                       
                                       
                                          l
                                          x
                                       
                                    
                                    ,
                                 
                              
                              
                                 
                                    
                                       640
                                       ,
                                       000
                                    
                                    
                                       l
                                       x
                                    
                                 
                              }.

Since our graphs are large, finding optimal solutions to all of them is impractical. So, we used the Lin–Kernighan (LK) implementation by Applegate et al. to find tour length estimates to train the model. This algorithm is known to produce results within 1 percent of optimal Applegate, Bixby, Chvatal, and Cook (2011). We could alternatively have used a different implementation such as that of Helsgaun (2000), which produces results even closer to optimality; however, our familiarity with Applegate et al.’s code made the testing much more straightforward, with results still being ≤ 1 percent of optimality.

Using regression, we discovered the following model for LK tour length estimation:

                        
                           (3)
                           
                              
                                 T
                                 ≈
                                 2.791
                                 
                                    
                                       n
                                       (
                                       c
                                       s
                                       t
                                       d
                                       e
                                       
                                          v
                                          x
                                       
                                       c
                                       s
                                       t
                                       d
                                       e
                                       
                                          v
                                          y
                                       
                                       )
                                    
                                 
                                 +
                                 0.2669
                                 
                                    
                                       n
                                       
                                          (
                                          s
                                          t
                                          d
                                          e
                                          
                                             v
                                             x
                                          
                                          s
                                          t
                                          d
                                          e
                                          
                                             v
                                             y
                                          
                                          )
                                       
                                       
                                          A
                                          
                                             
                                                
                                                   c
                                                   ¯
                                                
                                                x
                                             
                                             
                                                
                                                   c
                                                   ¯
                                                
                                                y
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

The model has a high predictive power for the training data as implied by R
                     2 = 0.9956, and the other statistics shown in Table 2
                      indicate that the coefficients are significant and have low relative estimation errors. Fig. 7
                      demonstrates the relation between the tour length found by the LK algorithm and the estimated tour length by the model in Eq. (3). Fig. 8
                      presents the same comparison for the estimation model proposed by Beardwood et al. in Eq. (1); β′ is calculated for each dispersion.

However, finding the suitable β′ is not possible when the node dispersion is unknown. In such cases, as seen in Fig. 7, our model still provides reliable estimates capturing the differences in the dispersions correctly, but Fig. 9
                      shows that using the wrong β′ when the distribution is unknown can lead to large estimation errors. Thus, our model is especially useful for graphs with unknown dispersion.

To measure the performance of the tour length estimation model, we tested it on a wider set of graphs than the one used for training. The first test set has the same node distribution and the same parameters as the training set, but the graphs are different. In the second

test set, we generate graphs with the same dispersion types but with different parameters. In the third set of tests, we use different node dispersions than the ones used in training. Then, we test the model on nonrectangular graphs.

As before, the optimal tour lengths are estimated by the Lin– Kernighan (LK) implementation in (http://www.tsp.gatech.edu/concorde/index.html
, March 2013). As a performance measure we use the ratio of our model’s estimated tour length (E) to the LK tour length (T).

The sets of test graphs were generated as follows:

                        
                           1.
                           [G1] We generated graphs for the six node dispersions we used to train the model, using the same area and number of nodes, but different random seeds.

The goal of the second test set is to measure the estimation model’s robustness to differences in the number of nodes and the elongation of the graphs generated by using the same six training dispersions:
                                 
                                    (a)
                                    [G2.1] Graphs having 40 percent more nodes than the training data in the same area,

[G2.2] Graphs with the same number of nodes as the training data, but 20 percent longer and 40 percent wider,

[G2.3] Graphs having between 20,000 and 30,000 nodes in a rectangular area where the length and the width are uniformly and independently randomly distributed between 1000 and 2000,

[G2.4] Graphs having between 100,000 and 200,000 nodes in a rectangular area where the length and the width are uniformly and independently randomly distributed between 1000 and 2000, also using the six training dispersions.

In this group of tests, the density of the graphs, n/A, comes from a wider range than in the training data.

We also generated three new graph types to test the model on node dispersions different from those it was trained on:

                                 
                                    (a)
                                    [G3.1] Rectangular graphs where the nodes are denser around the corners, and there is a cavity in the center.

The pseudo code to generate this type of graph is given below.


                                       repeat
                                    


                                       x ← U(0, lx
                                       )


                                       y ← U(0, ly
                                       )


                                       accept ← U(0, 1)


                                       until
                                       
                                          
                                             a
                                             c
                                             c
                                             e
                                             p
                                             t
                                             <
                                             
                                                
                                                   ∣
                                                   x
                                                   −
                                                   
                                                      
                                                         l
                                                         x
                                                      
                                                      2
                                                   
                                                   ∣
                                                
                                                
                                                   
                                                      l
                                                      x
                                                   
                                                   2
                                                
                                             
                                             
                                                
                                                   ∣
                                                   y
                                                   −
                                                   
                                                      
                                                         l
                                                         y
                                                      
                                                      2
                                                   
                                                   ∣
                                                
                                                
                                                   
                                                      l
                                                      y
                                                   
                                                   2
                                                
                                             
                                          
                                       
                                    

An example graph with 1000 nodes can be seen in Fig. 10
                                       .

[G3.2], [G3.3] Two other graph types were generated using truncated exponential distributions. To create the horizontal and vertical coordinates of the nodes, we used truncated exponential distributions in (0,1) with rate 1 for [G3.2] and rate 2 for [G3.3]. Multiplying them by lx
                                        and ly
                                       , we obtained the node coordinates. The pseudo code used to generate this dispersion type is given below.


                                       rate ← 1 or 2


                                       a ← −log (U(0, 1))/rate
                                    


                                       b ← −log (U(0, 1))/rate
                                    


                                       x ← (a − ⌊a⌋)lx
                                       
                                    


                                       y ← (b − ⌊b⌋)ly
                                       
                                    

The parameter sets to generate these three new graphs for test groups [G3.1], [G3.2], [G3.3] are as follows:

                                 
                                    •
                                    
                                       n ∈ {5000, 5500, ..., 100,000},


                                       lx
                                        ∈ {250, 500, 1000},


                                       ly
                                        ∈ 
                                          
                                             
                                                100
                                                ,
                                                000
                                             
                                             
                                                l
                                                x
                                             
                                          
                                       .


                     Fig. 11
                      presents an example graph for [G3.2] and Fig. 12
                      presents an example graph for [G3.3].

Having created all these instances for eight different test settings, we tested our model together with eight other tour length estimation models in the literature. Table 3
                      shows the other models that we compare with. All the estimators assume Euclidean distances. Some of the models assume a special depot node at which tours start and end. D denotes the average distance from the depot in these models. δ denotes the density of the nodes. While training our model, we did not specify the location of the depot. For the test sets, we assume that the node at the origin is the depot, because Chien trained his model assuming that the depot is at the origin, and Kwon et al. trained their models both for depot in the center and at the origin. For completeness, we also ran the same tests with the depot in the center. The results were not significantly different, so they are not reported in detail. R denotes the ratio of the length to width, assuming that the longer dimension is the length. A′ is the area of the smallest rectangle covering only the customers, i.e., not the depot. Since our test graphs have a large number of nodes, one node at each corner of the rectangle and they are dense around the origin, A′ = A.

Daganzo’s CVRP-based model (Daganzo, 1984a) was developed for multiple vehicle routing problems. Others are trained on smaller size instances, and mostly uniform node dispersion. Although these models perform well on the types of instances they are designed for, they should not be expected to perform well on the test cases in this paper. However, we still include them in the test results for completeness.

In Table 4
                     , we report the test results in terms of estimated tour length (E) divided by the tour length (T) found by the LK implementation (http://www.tsp.gatech.edu/concorde/index.html
, March 2013). We also report the amount of variability in the estimation error. This is important because it might be possible to simply scale results; for example, even if Platzman and Bartholdi’s (1989) space-filling curve algorithm gives estimates 36 percent greater than the optimal tour length, might it be usable for tour length estimation by dividing its initial estimates by 1.36?

Overall, our new model (3) performs very well, similar to that of Beardwood et al.’s model, both in terms of high accuracy and low variability. Both models are within 1–2 percent of the true optimal tour length, with standard deviations of E/T of 0.01 or less for all of the graph types tested. None of the other models was as accurate or as consistent. Table 4 shows that even if we scale estimates as suggested above, only Beardwood et al.’s (1959) model has lower estimation error variability then ours (and the difference is slight).

Daganzo’s CVRP-based model (Daganzo, 1984a) underestimates the tour length according to average performance, i.e., the average E/T is between 0.83 and 0.92 for this model. Chien’s (1992) model, whose only difference from Daganzo’s (1984a) model is to use 0.69 instead of 0.57, overestimates on the average for all test groups except for [G3.2]. This indicates that a constant between 0.57 and 0.69 as the coefficient of the term 
                        
                           
                              
                                 A
                                 ′
                              
                              
                                 (
                                 n
                                 −
                                 1
                                 )
                              
                           
                        
                      would generate more accurate estimates. For this reason, instead of using the updated version of Daganzo’s model by Robusté et al., which is 
                        
                           
                              (
                              0.9
                              +
                              k
                              n
                              /
                              
                                 C
                                 2
                              
                              )
                           
                           
                              
                                 n
                                 A
                              
                           
                           ,
                        
                      we used the original model as developed by Daganzo, even though 7 < C < 1.5n/C is not satisfied. Daganzo’s (1984b) heuristic-based model provides overestimates. Platzman and Bartholdi’s (1989) space-filling curve algorithm always overestimates; deviation in the errors increases when the rectangle becomes more elongated.


                     Kwon et al.’s (1995) models returned either negative or very low values when the number of nodes in a graph is large, due to the negative coefficient of n in the models. del Castillo’s (1998) construction heuristic did not generate reliable estimates on our test instances mostly because that model is designed for circular-shaped regions and the performance gets worse as the number of nodes increases. Therefore, we did not include either of those in the table. Note that we have used the parameters specified in each of these papers; we have not re-estimated the parameters of the models that we compared with.

Overall, these results are not meant to imply the deficiency in the models from the literature; instead Table 4 shows the necessity of our model for more general graphs where the distribution may not be known.

[G3.1] is the only test group where our model fails to return average E/T inside the interval [0.99, 1.01]. Although our model gives low-variance estimates to the tour length, it underestimates. Our conjecture is that the statistics we are collecting are not well reflective of the graph attributes, because the cavity dispersion (Fig. 10) looks like a combination of four subgraphs, each similar to the squeezed dispersion (Fig. 3). So, we ran an additional test. We divided the cavity graph into four subgraphs, estimated the tour length for each and added these estimates to find the tour length estimation for the whole graph. We used the same parameters as before, except the maximum number of nodes was 50,000 instead of 100,000; otherwise, the subgraphs merge and the whole graph cannot be divided into independent subsets properly.

Since other models do not require such an adjustment, we made it only for our estimation model. The summary of this test can be seen in Table 5
                     . Considering the average ratio between the estimated tour length and LK tour length, the performance of our model is improved, i.e., the estimation/tour length ratio is now 1.02, at the expense of a slight increase in the standard deviation in the errors.

Our model tends to underestimate when the number of nodes in the graph is small. The plot in Fig. 13
                      shows the relation between the number of nodes in a graph and the E/T ratio. The model underestimates when there are fewer than 1000 nodes in the graph. The E/T factor can be expressed as an exponential function of number of nodes as in Eq. (4).

                        
                           (4)
                           
                              
                                 
                                    E
                                    T
                                 
                                 =
                                 0.9325
                                 
                                    e
                                    
                                       0.00005298
                                       n
                                    
                                 
                                 −
                                 0.2972
                                 
                                    e
                                    
                                       −
                                       0.01452
                                       n
                                    
                                 
                              
                           
                        
                     The R
                     2 of this fit is 0.9867. We tested the model on graphs with small number of nodes, correcting estimation according to Eq. (4). The parameter set used in this test is as follows:

                        
                           •
                           
                              n ∈ {100, 125, ..., 975},


                              lx
                               = {500, 1000},


                              
                                 
                                    
                                       l
                                       y
                                    
                                    =
                                    
                                       
                                          1
                                          ,
                                          000
                                          ,
                                          000
                                       
                                       
                                          l
                                          x
                                       
                                    
                                 
                              .

The comparative results are presented in Table 6
                     . Based on the average E/T, our model performs better. Kwon et al.’s (1995) second model also returns average E/T ratios that are close to 1, but the deviations in the errors are higher. Chien’s (1992) and Kwon et al.’s (1995) first model do not perform well on this test. More detailed comparison data can be seen in Table 6. A similar correction factor to that we used for our model could have been used for the others as well. However, to the best of our knowledge no such factors are available for them.

So far, in all the test groups we measured the performance of the tour length estimation model on rectangular areas. To observe the model’s robustness to distortion in the graph shape, we tested the estimation model on graphs with different shapes.

In this test group [G4], we first generated m nodes randomly on a rectangle with length lx
                      and width ly
                     , and determined the convex hull of these initial nodes. Then, the remaining n − m nodes were generated inside this convex hull. For large enough m the graphs are almost rectangular, but for small m the graph shapes may be very different from what we trained our model on. For small m, since the graphs are not necessarily rectangles and do not lie parallel to the x-axis, we rotate the graph so that the ratio of the area of the convex hull to the area of the smallest rectangle covering all the nodes and lying parallel to the x-axis is maximum, exploiting Freeman and Shapira’s (1975) observation that the rectangle of minimum area enclosing a convex polygon has a side collinear with one of the edges of the polygon. Having created the graphs, we first determined the optimal rotation and calculated the statistics we used in the estimation using the rotated graph. The parameter sets for this test group are as follows:

                        
                           •
                           
                              n ∈ {2000, 4000, 6000, 8000, 10, 000},


                              m ∈ {5, 10, 15, …, 50, 70, 100},


                              lx
                               ={250, 500, 1000},


                              ly
                               = 
                                 
                                    
                                       1
                                       ,
                                       000
                                       ,
                                       000
                                    
                                    
                                       l
                                       x
                                    
                                 
                              .

For each m, one uniformly randomly generated graph with 2000 nodes is presented in Figs. 14–25
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                      below. Those figures show the change in the shape of graphs as the number of initial nodes m generated to create the convex hull increases. For each different m, 120 graphs were generated using the graphs types shown in Figs. 1–6, 11 and 12. The graphs are rotated when necessary, as above. Detailed comparison data are provided in Table 7
                     .

Performance of our estimation model improves with an increase in m as expected. However, as it is seen in Table 7, even when a graph does not have a rectangular shape, our model provides an average ratio of estimated tour length to the LK tour length close to 1 and has a relatively small standard deviation.

In the previous section, the computational results show that our model has a high predictive power and can be reliably used instead of Beardwood et al.’s when the node dispersion is unknown or non-integrable. In this section, we will show the interesting property that it can also be used to estimate the coefficient of Beardwood et al.’s model, for example, in a case where the integration is difficult or the dispersion is unknown. Of course, in such a case one can try to fit a distribution on the node coordinates, and use it to estimate β′. However, distribution fitting also takes time, and there will be an error in distribution fitting in addition to the estimation error.

To make comparisons, we first computed β′ for the other node dispersions we use in this paper. For example, it is a straightforward integration to compute 
                        
                           ∫
                           ∫
                           
                              
                                 
                                    f
                                    c
                                 
                                 
                                    (
                                    x
                                    ,
                                    y
                                    )
                                 
                              
                           
                           d
                           x
                           d
                           y
                        
                      for the Triangular node dispersion on a unit square as 0.889, so β′ = (0.712)(0.889) = 0.633. Beardwood et al.’s estimation model for the Triangular node dispersion is therefore 
                        
                           
                              T
                              *
                           
                           ≈
                           0.633
                           
                              
                                 n
                                 A
                              
                           
                        
                     .

In our estimation model (3), if we replace sample statistics cstdevx, stdevy, stdevx, stdevy, 
                        
                           
                              c
                              ¯
                           
                           x
                        
                      and 
                        
                           
                              c
                              ¯
                           
                           y
                        
                      by the population statistics (when we know the node dispersion), then (3) reduces to 
                        
                           T
                           ≈
                           κ
                           
                              
                                 n
                                 A
                              
                           
                        
                     . This is the same form as Beardwood et al.’s model. So, the values of κ should match with the values of β′ as described above. For example, for the Triangular node dispersion we obtain 
                        
                           T
                           ≈
                           0.656
                           
                              
                                 n
                                 A
                              
                           
                        
                     . To show that κ for each node dispersion is actually a good estimate for β′, we computed them for the other node dispersions used in this paper. Table 8
                      displays the β′ and κ values for the corresponding dispersions. Each κ is within 4 percent of the corresponding β′.

We also repeated the tests in the previous section on the same graphs using the estimate 
                        
                           T
                           ≈
                           κ
                           
                              
                                 n
                                 A
                              
                           
                        
                      instead of exact node coordinates. The results are presented in Table 9
                     .

Having shown that our model works well on random graphs for many node dispersions, we decided to test it on instances from the TSP Library (http://www.iwr.uni-heidelberg.de/groups/comopt/software/TSPLIB95/tsp/
, March 2013) and National TSP instances (http://www.math.uwaterloo.ca/tsp/world/countries.html
, March 2013) to determine the model’s performance on non-random graphs. For graphs having fewer than 1000 nodes, the estimation is corrected according to Eq. (4). In these tests, we used the area of the convex hull of the nodes as A. Also, since these graphs do not have a predefined depot, we used the boundary node with the smallest total distance to the other nodes as the depot. Since not all these graphs are rectangular in shape, in order to decrease the effect of mis-rotation of the graphs on the estimation models’ performance, we rotated the graphs so that they have the optimal position, i.e., the ratio of area of the convex hull to the area of the minimum area-rectangle covering all the nodes and lying parallel to the x-axis is maximum, as before.

Many of these graphs have different attributes from the ones we trained and tested on, specifically because they are not randomly generated. These different attributes include:

                        
                           (I)
                           Graphs that are composed of distinct subgraphs, e.g., instance p152 in Fig. 26
                              ,

Graphs where nodes are placed on a grid, e.g., instance u1432 in Fig. 27
                              ,

Graphs with irregular shapes, e.g., instance brd14051 in Fig. 28
                              ,

Graphs where the convex hull has a significant empty space inside it, e.g., instance Yemen in Fig. 29
                              .

The summary of the estimation results of our model and the other models in the literature is presented in Table 10
                     . In those tables, the graphs are grouped according to their common attributes. Some graphs repeat in more than one group, e.g., p152 in Fig. 26 has both attributes (I) and (IV). These results reveal that none of the estimation models provides a reasonable estimation for graphs having at least one of the attributes (I), (II), (III), and (IV). On average they overestimate and the standard deviations are very high; Platzman and Bartholdi’s (1989) model is the only one with a standard deviation below 20 percent. However, when graphs do not have any of these attributes, the estimation results improve. Results for Beardwood et al. (1959) are not reported because the β′ value cannot be calculated for these graphs.

These results suggest that while our model (and Beardwood et al.’s model, when the node dispersion is known and integrable) performs very well for random graphs on a continuous space, there is still significant room for contributions on the problem of estimating optimal TSP tour length on non-random graphs, especially those with properties (I), (II), (III) and (IV). When graphs have one or more of properties (I), (II), (III), and (IV), then Platzman and Bartholdi’s algorithm, scaled down by a factor of about 1.39, performs best.

@&#SUMMARY@&#

Motivated by the lack of an accurate and fast model in the literature to estimate the TSP tour length for unknown random node distributions, in this paper we introduce a fast new distribution-free estimation model. We trained and tested our regression model on graphs which are specifically designed to reflect several node dispersions in addition to uniform randomness. We tested the model on graphs up to 200,000 nodes and showed that our model produces reliable estimates even for dispersions and shapes different from what it was trained on.

We also demonstrated that our model is similar to Beardwood et al.’s model when we replace the sample statistics with the population statistics. This explains why these two models perform similar to each other when the node dispersion is known, and supports our model’s validity for the cases when the node dispersion is unknown.

@&#REFERENCES@&#

