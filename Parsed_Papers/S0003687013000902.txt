@&#MAIN-TITLE@&#Customization of user interfaces to reduce errors and enhance user acceptance

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Reconfiguration allows customizing a user interface according to own preferences.


                        
                        
                           
                           Reconfiguration reduced error rates and enhanced user acceptance.


                        
                        
                           
                           Promising approach that warrants further exploration.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Reconfiguration

Customization

Process control

User acceptance

@&#ABSTRACT@&#


               
               
                  Customization is assumed to reduce error and increase user acceptance in the human–machine relation. Reconfiguration gives the operator the option to customize a user interface according to his or her own preferences. An experimental study with 72 computer science students using a simulated process control task was conducted. The reconfiguration group (RG) interactively reconfigured their user interfaces and used the reconfigured user interface in the subsequent test whereas the control group (CG) used a default user interface. Results showed significantly lower error rates and higher acceptance of the RG compared to the CG while there were no significant differences between the groups regarding situation awareness and mental workload. Reconfiguration seems to be promising and therefore warrants further exploration.
               
            

The basic idea of individuation is “to explore ways through which each and every single individual can customize his or her own tools to optimize the pleasure and efficiency of his or her own personal interaction” (Hancock et al., 2005, p. 12). Thus, according to the idea of individuation, technological tools such as user interfaces should be customizable and adaptable to individuals with the aim of increasing efficiency and safety (Hancock et al., 2005). In the context of this study, individuation is perceived as the perfected or accomplished form of customization. Individuation and customization are assumed to increase an individual's perception of control over the environment. Perceived control satisfies the need for autonomy and therefore, has been shown to increase job satisfaction, work motivation, and positive affect (Fritzsche and Parrish, 2005, cited in Hancock et al., 2005).

According to Pozzi and Bagnara (2011), research on customization within the field of human–computer interaction is increasing and the focus in design is changing from designing for average users to designing for individuals. Empirical research has shown that user performance is enhanced when characteristics of user interfaces are matched to the skill levels of users (Trumbly et al., 1994). In the present study, we focus on customization of user interfaces and aim at studying whether performance in a process control task can be enhanced through customization of user interfaces.

In our study, participants were provided with a reconfiguration tool which allowed them to customize their user interface to their own preferences. The reconfiguration tool allowed different reconfiguration operations such as the duplication or removal of interaction elements (e.g., buttons or sliders) or the discretization of continuous interaction elements, generating various values in a given interval (e.g., sliders), into one discrete interaction element (e.g., buttons), generating only one specific value out of the range the former defined interval (e.g., button; Weyers et al., 2010). Thus, both, the reconfiguration of the interaction logic (defining the data-based communication between user and the system to be controlled) as well as the reconfiguration of the physical representation of the user interface were possible. A computer-based simulation of a feedwater circuit of a nuclear power plant was employed as a process control task. This process control task involved controlling and operating the reactor and running procedures such as start-up and shut-down, and dealing with fault states (Weyers et al., 2012).

We expect the customization of user interfaces, i.e., the possibility to reconfigure one's own user interface, to enhance performance in process control. This assumption is based on considerations on the importance of an operator's mental model of the system (e.g., the reactor). A mental model is defined as “a mental structure that reflects the user's understanding of a system” (Carroll and Olson, 1987; cited in Wickens and Hollands, 2000, p. 280). The mental model forms the basis “for understanding the system, predicting its future behavior, and controlling its actions” (Wickens and Hollands, 2000, p. 132). An accurate mental model of the system is therefore essential for successful performance. However, mental models can be inaccurate which can decrease performance and increase the chance of operator errors. Effective user interfaces require the correspondence of the following three levels of representation: (1) the physical system, (2) the operator's mental model, and (3) the user interface between the system and the operator (Wickens and Hollands, 2000, p. 133). We suggest that this correspondence between levels of representation can be improved with the customization of user interfaces. With the reconfiguration tool, the operator can reconfigure his or her user interface (level 3) corresponding to his or her own mental model of the system (level 2) while the physical system (level 1) will be left untouched. This increased correspondence is expected to reduce errors, because the operator can ensure an intuitive and effective user interface organized according to the physical system (cf. Wickens and Hollands, 2000; Weyers et al., 2012). We assume that the process of reconfiguration can lead to a better mental model of how to control and handle the system. This mental model of handling and control of a system may be individual and cannot be predicted for every operator. Therefore, reconfiguration of user interfaces according to individual mental models is assumed to enhance performance and support operators. However, an inaccurate mental model may lead to a non-optimal user interface which may increase errors and present a risk to safety. Therefore, it is suggested to incorporate a safety check of reconfigured user interfaces by experts especially in safety-relevant fields and industries.

We expect customization to support not only process control performance but also increase acceptance of the user interface. The technology acceptance model (e.g., Davis et al., 1989) aims at predicting the acceptance of a certain technology or computer system from intentions measured by attitudes, perceived usefulness, and perceived ease of use (Davis et al., 1989). The model is based on the theory of reasoned action by Ajzen and Fishbein (1980) which has been empirically tested in a range of different domains and shown to be able to predict behavior (Davis et al., 1989). The technology acceptance model is more specific than the theory of reasoned action in that it is tailored to computer usage behavior (Davis et al., 1989). The technology acceptance model suggests that the two beliefs perceived usefulness and perceived ease of use determine the behavioral intention to use a certain technology or computer system, which is related to subsequent behavior (Davis et al., 1989; Venkatesh, 2000). Perceived usefulness refers to “the prospective user's subjective probability that using a specific application system will increase his or her job performance” and perceived ease of use is defined as “the degree to which the prospective user expects the target system to be free of effort” (Davis et al., 1989, p. 985). The technology acceptance model is a widely employed model of user acceptance and has been empirically supported in different studies (Venkatesh, 2000; Taylor and Todd, 1995). The model's variables have also been operationalized and the scales and items have been validated (e.g., Venkatesh, 2000). In the present study, we will measure user acceptance based on the technology acceptance model, because we aim at evaluating computer-based user interfaces with a theoretically and empirically supported model. Research within the context of human-adaptable automation has shown that flexibility can increase user acceptance (Miller and Parasuraman, 2007). Therefore, we expect that customization of user interfaces will increase user acceptance.

Situation awareness is referred to as the perception and comprehension of information and the projection of the information status in the near future (Endsley, 1995b). Situation awareness is important for safety and performance since poor situation awareness such as incomplete or inaccurate situation awareness increases the probability of human error. Therefore, situation awareness has received increased attention in user interface design. According to Endsley (1995b), user interface design can have a great impact on situation awareness because the design of a user interface determines the quantity and accuracy of information acquired and the degree of compatibleness of the user interface with the user's situation awareness needs. Therefore, Endsley (1995b) suggests to design user interfaces in a way “that will transmit needed information to the operator without undue cognitive effort” (p. 50). Thus, both mental workload and situation awareness should be considered in user interface design (Endsley, 1995b). Based on these considerations regarding situation awareness and mental workload, we assume that situation awareness will increase with the possibility to reconfigure user interfaces. The underlying reasoning is that when reconfiguring user interfaces, the operator can choose a way to present information that suits his or her preferences. Furthermore, we assume that operators will come up with a user interface that displays needed information with little effort. Therefore, we expect that an effectively designed user interface can help to reduce mental workload (Endsley, 1995b).

@&#METHOD@&#

In all, 72 participants (12 female, gender unknown: 4) took part in this between-subjects design involving two groups. The experimental group, i.e. the reconfiguration group (RG; n = 38, 6 female), trained and worked with the reconfigurable user interface while the control group (CG; n = 34, 6 female) trained and worked with the initial user interface. Participants were students of applied computer science and they participated in the study for course credit. Their ages ranged from 19 to 41 years with an average age of 22.7 years (SD = 4.3 years).

We employed a simulation of a feedwater steam circuit of a nuclear power plant as an experimental task (see Fig. 1
                        ). The simulation was based on an implementation by Eriksson (2012). More detailed information on the simulation can be found in another article by Weyers et al. (2012) which is based on the same study but focuses on formal modeling and reconfiguration of user interfaces whereas the focus of the present article is on the psychological aspects of reconfiguration. The main tasks of the operator were (a) to keep the reactor in a safe system state by keeping the water level in the reactor tank constant (at 2100 mm) and to prevent accidents from happening, (b) to generate a constant output of the generator (700 MW) and (c) to react to upcoming system faults due to malfunctions of certain technical parts such as water pumps. Two parameters were critical to the safe running of the reactors: The water level in the reactor tank and the pressure (Weyers et al., 2012). These two critical parameters could be controlled directly by the position of the control rods defining the value of thermal energy generated in the reactor tank and the speed of the feedwater pumps. Overall, for operating the reactor, various valves could be opened and closed, water pumps could be regulated, and the position of the control rods could be changed. The simulation allowed training of different scenarios such as start-up, shut-down, and fault states.


                        Fig. 1 depicts the default user interface of the reactor simulation. This user interface was designed taking into consideration usability standards such as learnability, consistency, and transparency (cf., Dix et al., 1997) as well as Gestalt principles of organization such as proximity, similarity, and good continuation (cf., Wickens and Hollands, 2000). The user interface and its usability were tested in pilot studies prior to this experimental study including interviews with users.

A simulation of a reactor was chosen as an exemplary task to test the potential of reconfiguration, because it is easy enough to learn in the available time and complex enough to simulate realistic scenarios of control and monitoring of two or more variables in a dynamic system. The simulation has also been tested in a pilot study with respect to training duration and resulting success in controlling the feedwater steam circuit. However, reconfiguration could not be directly applied to this particular field because of safety regulations and laws (e.g., for Germany, Federal Ministry of Justice, 2012a,b).

Performance was measured as the number and type of errors committed according to a method by Hollnagel (1998). Hollnagel's cognitive reliability and error analysis method (CREAM) allows the definition and classification of different error types. Errors were defined as deviations from the procedures of start-up, shutdown, and handling of system faults as described in the checklists provided to the participants. Log files of the participants were compared to the predefined procedures to identify errors. More detailed information on coding and processing of error type data can be found in Weyers et al. (2012). Due to technical problems, there were some missing data (leading to a sample of n = 61 and 63, respectively). Two groups of magnitude and sequence errors were identified. Magnitude errors were defined as actions taken too far and included the two types of errors “oversteering” and “understeering”. Sequence errors refer to the order of actions, i.e., “performing an action at a wrong place in a sequence or procedure” (Hollnagel, 1998, p. 166). Five different types of sequence errors were identified in the present study: (1) swapping two neighboring operations (“swap”), (2) operations performed too early in the sequence (“premature”), (3) operations performed too late in the sequence (“belated”), (4) repeated operations (“repetition”), (5) operations that were not part of the predefined procedure (“false operation”).

User acceptance was assessed employing scales by Venkatesh (2000) and Taylor and Todd (1995). The scales, sources, Cronbach's alpha, item numbers and item examples are shown in Table 1
                           . The scales were translated to German and slightly adapted to fit the purpose if necessary (e.g., “reconfigured interface” instead of “system”). Furthermore, the items were adapted to each group, i.e., the items for the RG referred to the reconfigured user interface, while the items of the CG referred to the default user interface. The items were assessed on a 7-point scale ranging from −3 (strongly disagree) to +3 (strongly agree). In addition to the scales based on Venkatesh (2000) and Taylor and Todd (1995), two scales for perceived responsibility and handling of task were developed.

We measured situation awareness based on the Situation Awareness Control Room Inventory (Hogg et al., 1995) and the situation awareness measurement employed by Burkolter et al. (2010) which are assumed to be objective situation awareness measurements. The Situation Awareness Control Room Inventory was derived from the Situation Awareness Global Assessment Technique (Endsley, 1995a) and adapted for process control tasks. The situation awareness measurement took place during the last testing scenario. The simulation was automatically stopped at three times by the system and a message on the screen asked the participants to answer questions making the whole information visualization of the process invisible. Following Endsley's (1995b) concept of situation awareness, the first item referred to the perception of the situation while the second item concerned comprehension of the current status and prediction of the future status of the system. The first item was “How is the status of the water level?” which could be answered with the three alternatives (a) below normal range (below 2050 mm), (b) within normal range at 2100 mm (+/− 50 mm), and (c) above normal range (above 2150 mm). The following item read: “How do you think the course of the water level will develop over the next 10 s? Provided that no intervention to the system is undertaken, the water level will...” with the answer alternatives (a) decrease, (b) remain stable, and (c) increase. The first and third measurement of situation awareness was related to the water level while the second measurement asked about the output power. These parameters were chosen because they represented the target parameters to control the simulation. Control of these two target parameters was also clearly stated as main objective to the participants. In total, there were three questions referring to perception of the situation and three questions referring to comprehension and projection. To determine whether responses made by the participants were correct, they were compared to logged data (cf. Hogg et al., 1995; Burkolter et al., 2010).

Mental workload was assessed using a translated and adapted version of the NASA task load index (Hart and Staveland, 1988) which was shown to have high validity and user acceptance (Vitense et al., 2003). The scales included items relating to mental, physical, and temporal demand as well as performance, effort, and frustration level. Ratings were made on a 10-point scale ranging from e.g., low to high or a little to greatly. The questionnaire was administered to the participants during the testing session before assessing situation awareness.

@&#PROCEDURE@&#

The present study had an overall duration of approximately 2 h and consisted of three parts: An introductory part (approx. 20 min), a training part (approx. 65 min), and the testing session in the end (approx. 25 min; see Table 2
                        ). Upon arrival, all participants filled in questionnaires on control variables. Participants then received an introduction to the reactor simulation, its initial user interface and controls, and were given a couple of minutes to explore the simulation on their own. After this introductory part, the training session was held. The training session included three exercises which aimed at practicing the start-up of the reactor, the shutdown of the reactor, and the handling of a system fault. Participants were provided with checklists which explained the steps of the procedures and were given about 10 min to practice each exercise. Introduction to the simulation and the training session were aimed at providing participants with the most effective training possible within the given time constraints. Therefore, the training session included several practice sessions and was held in small groups of five to eight participants to give participants the opportunity to ask questions individually. Participants were guided through the task procedure by an instructor. First, participants were introduced to the start-up procedure in a step-by-step manner. In a next step, participants conducted the start-up procedure by themselves but with guidance and support by the instructor. Finally, participants completed the start-up procedure on their own.

In the subsequent testing session, participants were asked to start-up the reactor. In addition, participants needed to handle the practiced fault state (system fault of a feedwater pump) without knowing in beforehand that the fault would occur. Then, they were to start-up the reactor and handle a novel fault state which they had not encountered before (system fault of turbine). Again, participants were not aware previously that this fault would occur. Following these tasks, mental workload and situation awareness were assessed. Situation awareness was measured as described above while the participants were performing a combination of the start-up and shutdown procedures. Finally, the questionnaire regarding user acceptance was filled in by the participants.

While the exercises and type of tasks in training and testing session were the same for both groups, the RG used their reconfigured user interface whereas the CG used the initial one. The RG was introduced to the reconfiguration tool and its usage before starting with the exercises. This introduction to the reconfiguration tool had a duration of approximately 10 min and included explanations of the possibilities and tools as well as time for practicing with the reconfiguration tool and exploring its options. The participants of the RG were then given 10 min after each of the three exercises to reconfigure their user interface in a way to increase performance at the task. Reconfiguration was only possible during the training phase. While the RG group was introduced to the reconfiguration tool and was given time to reconfigure their own user interfaces, the CG was given other tasks with the same duration and similar workload to ensure comparability. During the time in which the RG was introduced to the reconfiguration tool (about 10 min), the CG was shown a sequence of a documentary about simulations. The topic of the documentary was supposed to be unrelated to the reactor simulation and the user interface. While the RG was reconfiguring their user interfaces, the CG sketched ideas of possible improvements and adaptations to the user interface using pen and paper.

The reconfiguration tool allowed four different types of reconfiguration operations applied interactively to the interaction elements of the user interface (e.g., buttons or sliders): (1) the duplication of a single interaction element, (2) the removal or deletion of an interaction element, (3) the sequencing of two or more operations triggered by discrete interaction elements (buttons) into one step that is triggered by one new button, and (4) discretization of continuous interaction elements (such as sliders) into one discrete interaction element as has been described above. Other than the four basic reconfiguration types, it was also possible (5) to combine discretization and sequencing (cf. Weyers et al., 2010). These reconfigurations of the user interface mainly involved adaption of its physical representation such as adding a new button. Using these reconfiguration operations, it was possible to sequence various steps of the start-up, shut-down and handling routines for fault states, such as combining opening and closing of valves and setting water pumps to previously discretized values. Some parts of the routines, however, could not be subsumed by reconfiguration, such as the alternating the increase of water pump 1 and the control rods as part of the start-up routine. A screenshot of a reconfigured user interface by a participant in our study is shown in Fig. 2
                         as an example.

In Table 3
                        , number and percentages of reconfiguration types used by the study participants are presented. Discretization was the reconfiguration type that was most frequently used, followed by the combination of sequencing and discretization and sequencing alone.

We controlled for pre-training knowledge, subjective rating of knowledge level, cognitive flexibility, and general mental ability. Pre-training knowledge was measured with seven multiple-choice questions about nuclear power plants (e.g., “How is electricity produced in a power plant?”). In addition, participants were asked to give subjective assessment of their previous knowledge about nuclear power plants on a seven-point scale ranging from (1) very poor to (7) very good. General mental ability was assessed with the Wonderlic Personnel Test (Wonderlic Inc., 2002). Due to time constraints, general mental ability was assessed at a later date (on which not all of the participants could take part, n = 43). Cognitive flexibility was assessed with the Cognitive Flexibility Inventory (Spiro et al., 1996). Participants in the two groups did not differ significantly with regard to control variables which indicates that there was not an “unhappy randomization” (Mohr, 1995; see Table 4
                        ).

@&#RESULTS@&#

In line with our assumptions, performance of the RG was better than performance of the CG which is shown by the total number of errors committed (see Table 5
                        ). Both during start-up of the reactor and the practiced fault state as well as the novel fault state, the RG committed significantly fewer errors (practiced: M = 2.48, SD = 1.93; novel: M = 1.72, SD = 1.62) than the CG (practiced: M = 5.53, SD = 2.71; novel: M = 3.38, SD = 2.32). Thus, the RG committed about half as many errors than the CG, constituting a large effect in the case of the practiced fault state (r = .54) and a medium to large effect in the case of the novel fault state (r = .38; Field, 2005; Cohen, 1992). Regarding the types of errors during start-up and practiced fault state, the RG committed significantly fewer “oversteering” errors, “swap” errors, and “false operations”. However, the CG committed fewer “repetition” errors during start-up and practiced fault state. With respect to start-up and novel fault state, the RG committed fewer “oversteering” errors and “premature” errors.

Descriptive statistics as well as results of t-tests regarding user acceptance scales can be found in Table 6
                        . As expected, participants in the RG showed significantly higher acceptance of the user interfaces than the CG, except from ratings regarding perceived responsibility and handling of task. On a scale from −3 to 3, participants in the RG rated their behavioral intention to use the user interface again almost 2 on average (SD = 1.07) whereas the CG rated their behavioral intention to use 0.5 on average (SD = 1.68). This difference between the two groups was significant and constituted a large effect (r = .53; Field, 2005; Cohen, 1992). Similarly, perceived usefulness was rated significantly higher by the RG (M = 1.95, SD = 1.05) than the CG (M = 0.40, SD = 1.47) and also this effect was large (r = .53). Furthermore, there was a significant difference between the groups regarding perceived behavioral control, although the effect was smaller (r = .22). The reconfigured user interface received thus a higher user acceptance rating than the default user interface. However, user acceptance of the default user interface was still on the positive side on the scale from −3 to 3. Finally, the RG rated perceived ease of use of the reconfiguration tool on average 1.78 (SD = 1.31) on a scale from −3 to 3. Thus, the RG perceived the reconfiguration tool as fairly easy to use.

Results regarding situation awareness and mental workload are shown in Table 7
                        . Although the possibility to reconfigure one's own user interface was expected to enhance situation awareness, the RG did not outperform the CG regarding situation awareness (see Table 7).

Unlike our assumptions, the groups did not differ significantly with respect to mental workload. That is, the RG did not show significantly lower mental workload ratings than the CG. Participants' ratings of their mental workload were around four to six on a scale from one to ten, which suggests that they perceived their workload as not very high.

As an additional analysis, duration of initialization (i.e., duration from starting the simulation until power is produced) was compared between the groups. For the first task (start-up and practiced fault state), the RG needed 20.35 s on average (SD = 17.92) and the CG 45.68 s on average (SD = 18.47). This difference in duration of initialization proved to be significant (t(58) = −5.39, p < .000) with a large effect size of r = .58 (Field, 2005; Cohen, 1992). For the second task (start-up and novel fault state), average duration of initialization of the RG was 18.86 s (SD = 11.72) and of the CG 38.55 s (SD = 14.80). Also this difference in mean duration of initialization was significant (t(65) = −6.07, p < .000) with a large effect size of r = .60; Field, 2005; Cohen, 1992). Thus, reconfiguration reduced the time needed until power was produced.

@&#DISCUSSION@&#

In the present study, we took up the idea of individuation that tools such as user interfaces should be customizable (Hancock et al., 2005). We tested whether customization of user interfaces had the potential to enhance performance and user acceptance as well as situation awareness and reduce mental workload. Participants in the experimental group, the RG, were provided with a reconfiguration tool which allowed different reconfiguration operations such as the discretization of continuous interaction elements or the duplication and removal of interaction elements. The RG trained and worked with the reconfigurable user interface while the CG trained and worked with a default user interface.

First, results showed clearly that the RG committed fewer errors than the CG. Both during start-up and practiced fault state as well as novel fault state, the RG committed significantly fewer errors than the CG and this proved to be a medium to large effect. The CG committed about twice as many errors than the RG. These findings show the potential of reconfigurable user interfaces to support performance.

Second, not only was performance supported by reconfigurable user interfaces but the interfaces also enhanced user acceptance. Participants in the RG rated perceived usefulness, perceived behavioral control and perceived intention to use significantly higher than the participants in the CG. However, perceived responsibility and handling of task were not significantly increased by the use of reconfigurable interfaces. In summary, participants learned to handle the complex task better with the reconfigurable interface and also subjectively liked the reconfigurable interface better than the CG.

Third, results regarding situation awareness and mental workload, however, were not in line with our assumptions. The RG did not outperform the CG regarding situation awareness nor mental workload. In general, performance is supposed to be good when situation awareness is good (Endsley, 1995b). Thus, situation awareness is expected to be linked to performance. In the present study, however, it seems that performance was good as such (in the RG) without the need of support by good situation awareness. Possibly, for the task at hand, the option to reconfigure was more critical for good performance than having high situation awareness. The findings may also be explained by usage duration: The study lasted approximately 2 h in total of which approximately 25 min were reserved for the testing session. This usage duration may have been too short to build up and maintain high situation awareness, especially when using a novel system. As Endsley (1995b) argues, situation awareness “is not necessarily acquired instantaneously but is built up over time” (p. 38). Further research may thus consider a longer usage duration. Another possibility is to consider reconfiguration of the system parameters' visual representation (output elements; e.g., single- and multi-value displays and diagrams) in addition to reconfiguration of interaction elements of the user interface (i.e., input; cf. Weyers et al., 2012). Reconfiguring output elements may enhance situation awareness since information can be displayed as preferred. Regarding mental workload, we expected the reconfigured interface to decrease mental workload of the RG. However, mental workload ratings did not differ significantly for the two groups. Maybe this result can be explained by the fact that mental workload ratings were on a rather low level for both groups. Thus, the reconfigurable interface could not decrease an already low perceived workload further. Another explanation could be that reconfiguration led to an increased mental workload during the training session and was still on an increased level during the testing session.

Although these findings are promising with respect to the use of reconfiguration, some limitations of this study need to be discussed. Performance was assessed as the number and type of errors committed according to Hollnagel's (1998) classification. The latter represents one possible method of assessing performance, however, future studies should explore other measures such as measures for normal operation. Also, future research should assess the participants' mental model of the system at the beginning and the end of the study to compare possible differences and changes in the mental models of the RG and the CG. Furthermore, participants were–although students of applied computer science–novices and the process control task was unknown to them before the experiment. Also, their mean age was around 23 years. In view of these facts, the question arises to what extent similar findings could be expected for more experienced operators or for operators with a different level of education? With regard to more experienced operators' benefit from using the reconfiguration tool, potential may be seen regarding the decrease of workload. Reconfiguring a user interface and working with a reconfigured user interface may enhance performance by reducing workload. Also, further research may look into how operators work with the reconfiguration tool when using it for a prolonged duration, e.g., whether they work on improving their own reconfigured user interface.

Finally, significance of the present findings for practice is discussed. Reconfiguration presents opportunities to learning and performing in complex, technical systems. Individuation is assumed to increase job satisfaction, motivation, and positive affect through enhanced user control over the technical system (Fritzsche and Parrish, 2005 cited in Hancock et al., 2005). Furthermore, correspondence between user interface, mental model of the user, and physical system (cf. Wickens and Hollands, 2000) is believed to increase performance. The reconfiguration tool may be used with a group of operators in the simulator to configure a user interface according to the needs of these operators. Reconfiguration may also be employed for learning and training purposes (cf. Weyers et al., 2011). Reconfiguring a user interface may help to enhance understanding of processes and systems.

However, despite possible opportunities, difficulties and risks with the use of reconfiguration need to be considered as well. Reconfiguration entails the risk that the reconfigured interface may not be optimal or even includes erroneous operations. Therefore, a correction function needs to be implemented to prevent errors as well as limitations as to what extent reconfiguration is possible. Furthermore, research is needed to study long-term effects of reconfiguration. Research needs to rule out the possibility that a user's mental model becomes less differentiated over time, because the user may be prone to think in “macroprocedures” and less in specific procedures and operations. Thus, further research on reconfiguration is warranted before possible use in practice.

In conclusion, reconfigurable user interfaces seem to be promising and the present findings warrant further exploration of reconfiguration. For instance, the potential of reconfiguration for learning and training may be further investigated.

@&#REFERENCES@&#

