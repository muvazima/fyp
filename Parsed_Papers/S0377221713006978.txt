@&#MAIN-TITLE@&#A branch-and-cut-and-price algorithm for the cumulative capacitated vehicle routing problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We present a model for minimizing customers’ arrival times in vehicle routing.


                        
                        
                           
                           We propose an exact algorithm which is able to solve several test instances.


                        
                        
                           
                           Our work is a step towards modeling sustainability issues in transportation.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Routing

Minimum latency

CCVRP

Branch-and-cut-and-price

@&#ABSTRACT@&#


               
               
                  In this paper we consider the Cumulative Capacitated Vehicle Routing Problem (CCVRP), which is a variation of the well-known Capacitated Vehicle Routing Problem (CVRP). In this problem, the traditional objective of minimizing total distance or time traveled by the vehicles is replaced by minimizing the sum of arrival times at the customers. We propose a branch-and-cut-and-price algorithm for obtaining optimal solutions to the problem. To the best of our knowledge, this is the first published exact algorithm for the CCVRP. We present computational results based on a set of standard CVRP benchmarks and investigate the effect of modifying the number of vehicles available.
               
            

@&#INTRODUCTION@&#

The Capacitated Vehicle Routing Problem (CVRP) is one of the most well-studied problems within the area of transportation optimization. Recently it has, however, become clear to the research community that the CVRP does not fully capture the essence of real life transportation problems. This has for instance led to the introduction of so-called Rich Vehicle Routing Problems (Hartl, Hasle, & Janssens, 2006), a family of problems which capture the complications of real life problems far better than the classical CVRP.

One aspect of rich vehicle routing problems is the consideration of objective functions that differ from the traditional one of minimizing the total distance or time traveled by the vehicles. These include minimizing the number of vehicles used and minimizing the length of the longest tour. The latter is known as a Min–Max objective and is studied by Golden, Laporte, and Taillard (1997) and Applegate, Cook, Dash, and Rohe (2002), among others. Other studies consider simultaneous optimization of multiple objectives (Bowerman, Hall, & Calamai, 1995; Corberán, Fernández, Laguna, & Martí, 2002).

In this paper we consider the variation of the CVRP where the objective is to minimize the sum of arrival times at the customers, for a fixed starting time of each route. This problem is known as the Cumulative Capacitated Vehicle Routing Problem (CCVRP). We note that minimizing the sum of arrival times is equivalent to minimizing the average arrival time.

The CCVRP occurs in several applications. It is relevant in distribution systems where it is desirable to provide early service measured across the whole set of customers. In school bus routing, for example, minimizing average arrival time is one fairness measure which may have priority over minimizing total distance traveled. A more detailed discussion of performance criteria in the context of school bus routing is provided in Bowerman et al. (1995). Furthermore, when natural disasters strike, it is essential that aid arrives quickly in order to save lives and provide emergency supplies, so the traditional goal of cost minimization must step aside for fast response and fairness. Several performance measures can be used in relation to providing aid to multiple locations quickly, and minimizing the latest arrival time or minimizing the average arrival time are among the commonly used. The effect on the quality of one objective function when optimizing another is investigated by Campbell, Vandenbussche, and Hermann (2008) in the context of relief effort.

The outline of our paper is as follows. We first consider related literature in Section 2. Our mathematical model formulation is presented in Section 3, our algorithm is described in Section 4, and computational results are given in Section 5. Finally, we present the conclusion and perspectives in Section 6.

The CCVRP has recently been studied from a heuristic point of view in several papers. These studies include Iterated Local Search (Chen, Dong, & Niu, 2012), Adaptive Large Neighborhood Search (Ribeiro & Laporte, 2012), Memetic algorithms (Ngueveu, Prins, & Wolfler Calvo, 2010), and a two-phase heuristic (Ke & Feng, 2013). In Ke and Feng (2013), the performance of three algorithms (Ke & Feng, 2013; Ngueveu et al., 2010; Ribeiro & Laporte, 2012) were compared. Based on that comparison, the two-phase algorithm (Ke & Feng, 2013) and the Adaptive Large Neighborhood Search (Ribeiro & Laporte, 2012) each provide the best known solution for about half of the test instances.


                     Kara, Kara, and Yetiş (2008) consider a variation of the CCVRP, where the objective function to be minimized is not the sum of arrival times, but rather the sum of arrival times multiplied by the demand of the node. They refer to this problem, which is an extension of the CCVRP, as CumVRP and study the relationship to various other problems. Flow based formulations of the problem for both the delivery and the collection case are presented and based on these, the authors are able to solve instances with up to 34 locations.

The uncapacitated version of the CCVRP is known as the k-traveling repairman problem, where k is the number of vehicles available. For this problem, Fakcharoenphol, Harrelson, and Rao (2007) present an 8.497-approximation algorithm which is partly based on a result due to Chaudhuri, Godfrey, Rao, and Talwar (2003). Jothi and Raghavachari (2007) study an extension of the k-traveling repairman problem in which there is a repair time in addition to the travel time. They present a 
                        
                           (
                           
                              
                                 3
                              
                              
                                 2
                              
                           
                           β
                           +
                           
                              
                                 1
                              
                              
                                 2
                              
                           
                           )
                        
                     -approximation algorithm for this problem, where β is the approximation factor obtainable for the k-traveling repairman problem.

The related single vehicle problem, referred to as the Minimum Latency Problem (MLP), has attracted many researchers. It is well studied both from an approximation and an exact point of view. The current best approximation algorithm for the MLP is due to Chaudhuri et al. (2003) and achieves an approximation factor of 3.59. Several exact approaches have been proposed for the MLP, most of which are based on dynamic programming, branch-and-bound, or a combination of the two (Wu, Huang, & Zhan, 2004). We refer the reader to Silva, Subramanian, Vidal, and Ochi (2012) for an overview of research on the MLP.


                     Dewilde, Cattrysse, Coene, Spieksma, and Vansteenwegen (2013) study a single vehicle problem, where a profit is obtained the first time a location is visited and the visit of each location is optional. The objective is to maximize the sum of profits minus the sum of arrival times. This problem arises as the subproblem if the CCVRP is solved using column generation approaches, except from the exclusion of capacity constraints. The authors present a tabu seach algorithm for this problem.

Recently, some interesting problem variations, where the MLP is combined with another problem, have been studied. We point out a couple of such papers. Levin and Penn (2008) present a 16.31-approximation algorithm for a combination of MLP and machine scheduling where n jobs are to be processed on a single machine located at a plant and subsequently are to be delivered to n individual customer locations by a single vehicle. Processing times are given for the jobs and travel times are given among the customers and between the plant and the customers. The goal is to determine a production sequence for the jobs at the machine and determine the routing of the vehicle such that the sum of the delivery times of the jobs at the customers are minimized. We emphasize that it is fully allowed for the vehicle to pick up jobs from the plant several times. Li, Vairaktarakis, and Lee (2005) consider a variation of the same problem where several jobs can be associated with the same customer and the vehicle may or may not be capacity constrained.


                     Chakrabarty and Swamy (2011) study a combination of MLP and facility location. Given a central depot, a set of customers, and a set of possible facilities, the problem is to determine which facilities to activate. The objective function to be minimized is combined of three terms: a fixed cost for each activated facility, a cost of assigning each customer to a facility (this is not a routing cost), and a minimum latency cost of a tour connecting the depot to the facilities.

The CCVRP can be defined as follows. Let G
                     =(V, E) be a complete undirected graph, with V
                     ={0, …, n}. Vertex 0 represents a depot, whereas each of the vertices in V
                     
                        c
                     
                     ={1, …, n} represents a customer. The symmetric travel time between vertices i and j is denoted by t
                     
                        ij
                     . A number K of identical vehicles, each of capacity Q
                     >0, is available. Each customer i has an integer demand q
                     
                        i
                     , with 0<
                     q
                     
                        i
                     
                     ⩽
                     Q. Each customer must be served by a single vehicle and no vehicle can serve a set of customers whose demand exceeds its capacity. Each vehicle used must leave the depot at time 0, visit one or more customers, and return to the depot. The objective is to minimize the sum of all n arrival times at the customers.

In the following subsections we first describe two individual formulations (a Set Partitioning and a Vehicle Flow formulation, respectively) which are then combined into the formulation that we solve by our algorithm.

We define a feasible elementary route as a path (0, z
                        1, …, z
                        
                           k
                        , 0), where z
                        1, …, z
                        
                           k
                         are k different customers whose total demand does not exceed the vehicle capacity Q. As such, any feasible elementary route starts and ends at the depot, and we use the convention that the starting time at the depot is zero for any route.

For any feasible elementary route r, we define its cost c
                        
                           r
                         as the sum of arrival times for all customers on the route. Further, let 
                           
                              R
                           
                         denote the set of all feasible elementary routes. Moreover, we let α
                        
                           ir
                         be a parameter of value 1 if route r visits customer i and 0 otherwise, and we let λ
                        
                           r
                         be a variable of value 1 if route r is chosen and 0 otherwise. This leads to the following Set Partitioning formulation:
                           
                              (1)
                              
                                 
                                    
                                       
                                       
                                          
                                             (
                                             SPP
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             min
                                             :
                                             
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      r
                                                      ∈
                                                      R
                                                   
                                                
                                             
                                             
                                                
                                                   c
                                                
                                                
                                                   r
                                                
                                             
                                             
                                                
                                                   λ
                                                
                                                
                                                   r
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 s
                                 .
                                 t
                                 .
                                 :
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       α
                                    
                                    
                                       ir
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 i
                                 ∈
                                 
                                    
                                       V
                                    
                                    
                                       c
                                    
                                 
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                 
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 =
                                 K
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                 
                                 
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 r
                                 ∈
                                 R
                              
                           
                        The objective (1) minimizes the total cost of all routes. Constraints (2) ensure that each customer is contained in exactly one route, the constraint (3) specifies the required number of routes K, and (4) are the binary constraints on the decision variables.

This model can be solved by branch-and-bound (BB), where the Linear Programming (LP) relaxation in each subproblem is solved by column generation (CG). This would result in a branch-and-price (BP) algorithm where the CG subproblem is the problem of determining a feasible elementary route of minimum reduced cost, for a given set of dual prices associated with (2) and (3).

In this paper, however, we will develop a different formulation involving the same set of route variables, and apply branch-and-cut-and-price (BCP) on this formulation.

While any feasible solution to the CCVRP can be described in terms of λ-variables as in (2)–(4), we also have the alternative of representing a solution as in the two-index solution space used in vehicle flow formulations of the CVRP (Laporte, 2009; Lysgaard, Letchford, & Eglese, 2004), which we reproduce here with the objective function intentionally omitted. Let x
                        
                           ij
                         denote the number of times a vehicle travels directly between vertices i and j. Moreover, for any S
                        ⊂
                        V, let δ(S) denote the set of edges with exactly one end-vertex in S, where we for simplicity write δ(i) instead of δ({i}). Further, for any customer set S
                        ⊆
                        V
                        
                           c
                        , we let 
                           
                              k
                              (
                              S
                              )
                              =
                              ⌈
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    S
                                 
                              
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                              
                              /
                              Q
                              ⌉
                           
                         denote a lower bound on the number of vehicles required to service the customers in S. Finally, let x(F) denote 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    e
                                    ∈
                                    F
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    e
                                 
                              
                           
                         for any F
                        ⊆
                        E. Then the constraints (5)–(9) describe a feasible solution to the CVRP.
                           
                              (5)
                              
                                 x
                                 (
                                 δ
                                 (
                                 i
                                 )
                                 )
                                 =
                                 2
                                 
                                 for
                                 
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 n
                              
                           
                        
                        
                           
                              (6)
                              
                                 x
                                 (
                                 δ
                                 (
                                 S
                                 )
                                 )
                                 ⩾
                                 2
                                 k
                                 (
                                 S
                                 )
                                 
                                 ∀
                                 S
                                 ⊆
                                 
                                    
                                       V
                                    
                                    
                                       c
                                    
                                 
                                 ,
                                 |
                                 S
                                 |
                                 ⩾
                                 2
                              
                           
                        
                        
                           
                              (7)
                              
                                 x
                                 (
                                 δ
                                 (
                                 0
                                 )
                                 )
                                 =
                                 2
                                 K
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 for
                                 
                                 i
                                 ,
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 n
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       x
                                    
                                    
                                       0
                                       j
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 ,
                                 2
                                 }
                                 
                                 for
                                 
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 n
                              
                           
                        Constraints (5) are the degree equations, (6) are rounded capacity inequalities (RCIs), and (7) specifies the required number of routes K. Finally, (8) and (9) are the integrality constraints, where variables x
                        0j
                         are permitted to take the value 2 in order to allow a vehicle to serve only a single customer. The formulation in (5)–(9) involves the requirement that each route begins and ends at the depot. In other words, in the CVRP each route is required to be closed, unlike an open route beginning at the depot and ending at a customer, as in the Capacitated Open Vehicle Routing Problem (COVRP) (Letchford, Lysgaard, & Eglese, 2007).

For the purpose of working only with closed routes in relation to the CCVRP, we defined the route set 
                           
                              R
                           
                         in Section 3.1 so that any route ends at the depot. Nonetheless, it is clear from the definition of route cost that the traversal back to the depot from the last customer does not influence the route cost at all. Indeed, our requirement for closed routes is entirely due to our interest in working with the same solution space as in the CVRP, as specified by (5)–(9).

Following the modeling approach in Fukasawa et al. (2006), as also described in Laporte (2009), we can combine a formulation based on route variables, as in the SPP formulation, with the two-index vehicle flow formulation. Letting 
                           
                              
                                 
                                    β
                                 
                                 
                                    r
                                 
                                 
                                    e
                                 
                              
                           
                         denote the number of times route r traverses edge e
                        ∈
                        E, we have the following coupling between flow variables and route variables:
                           
                              (10)
                              
                                 
                                    
                                       x
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       β
                                    
                                    
                                       r
                                    
                                    
                                       e
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 ,
                                 
                                 ∀
                                 e
                                 ∈
                                 E
                                 .
                              
                           
                        The β-coefficients may take values as follows. For a feasible elementary route r with more than one customer we have that 
                           
                              
                                 
                                    β
                                 
                                 
                                    r
                                 
                                 
                                    e
                                 
                              
                              =
                              1
                           
                         for each edge e along the route, whereas 
                           
                              
                                 
                                    β
                                 
                                 
                                    r
                                 
                                 
                                    e
                                 
                              
                              =
                              2
                           
                         for e
                        ={0, j} if route r services only customer j.

We are then able to strengthen the SPP formulation by adding valid inequalities for the 2-index formulation. This leads to a formulation involving both a large number of rows and columns; the resulting formulation (SPP-VF) is given in (11)–(18).
                           
                              (11)
                              
                                 
                                    
                                       
                                       
                                          
                                             (
                                             SPP
                                             -
                                             VF
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             min
                                             :
                                             
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      r
                                                      ∈
                                                      R
                                                   
                                                
                                             
                                             
                                                
                                                   c
                                                
                                                
                                                   r
                                                
                                             
                                             
                                                
                                                   λ
                                                
                                                
                                                   r
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (12)
                              
                                 s
                                 .
                                 t
                                 .
                                 :
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          δ
                                          (
                                          i
                                          )
                                       
                                    
                                 
                                 
                                    
                                       β
                                    
                                    
                                       r
                                    
                                    
                                       e
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 =
                                 2
                                 
                                 ∀
                                 i
                                 ∈
                                 
                                    
                                       V
                                    
                                    
                                       c
                                    
                                 
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                 
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 =
                                 K
                              
                           
                        
                        
                           
                              (14)
                              
                                 
                                 
                                 
                                 
                                 x
                                 (
                                 δ
                                 (
                                 S
                                 )
                                 )
                                 ⩾
                                 2
                                 k
                                 (
                                 S
                                 )
                                 
                                 ∀
                                 S
                                 ⊆
                                 
                                    
                                       V
                                    
                                    
                                       c
                                    
                                 
                                 ,
                                 |
                                 S
                                 |
                                 ⩾
                                 2
                              
                           
                        
                        
                           
                              (15)
                              
                                 
                                 
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       β
                                    
                                    
                                       r
                                    
                                    
                                       e
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 0
                                 
                                 ∀
                                 e
                                 ∈
                                 E
                              
                           
                        
                        
                           
                              (16)
                              
                                 
                                 
                                 
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 r
                                 ∈
                                 R
                              
                           
                        
                        
                           
                              (17)
                              
                                 
                                 
                                 
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 for
                                 
                                 i
                                 ,
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 n
                              
                           
                        
                        
                           
                              (18)
                              
                                 
                                 
                                 
                                 
                                 
                                    
                                       x
                                    
                                    
                                       0
                                       j
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 ,
                                 2
                                 }
                                 
                                 for
                                 
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 n
                              
                           
                        We do not attempt to solve (11)–(18) directly; instead, we use Eq. (15) to reformulate the model so that it contains only route variables. In this way the RCIs (14) are expressed in route variables, we avoid the ∣E∣ constraints (15), and we obtain a much more compact formulation. The LP relaxation of the resulting formulation is given by (19)–(23), which we refer to as the Dantzig-Wolfe Master problem (DWM), as in Fukasawa et al. (2006).
                           
                              (19)
                              
                                 
                                    
                                       
                                       
                                          
                                             (
                                             DWM
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             min
                                             :
                                             
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      r
                                                      ∈
                                                      R
                                                   
                                                
                                             
                                             
                                                
                                                   c
                                                
                                                
                                                   r
                                                
                                             
                                             
                                                
                                                   λ
                                                
                                                
                                                   r
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (20)
                              
                                 s
                                 .
                                 t
                                 .
                                 :
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          δ
                                          (
                                          i
                                          )
                                       
                                    
                                 
                                 
                                    
                                       β
                                    
                                    
                                       r
                                    
                                    
                                       e
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 =
                                 2
                                 
                                 ∀
                                 i
                                 ∈
                                 
                                    
                                       V
                                    
                                    
                                       c
                                    
                                 
                              
                           
                        
                        
                           
                              (21)
                              
                                 
                                 
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          δ
                                          (
                                          S
                                          )
                                       
                                    
                                 
                                 
                                    
                                       β
                                    
                                    
                                       r
                                    
                                    
                                       e
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 ⩾
                                 2
                                 k
                                 (
                                 S
                                 )
                                 
                                 ∀
                                 S
                                 ⊆
                                 
                                    
                                       V
                                    
                                    
                                       c
                                    
                                 
                                 ,
                                 |
                                 S
                                 |
                                 ⩾
                                 2
                              
                           
                        
                        
                           
                              (22)
                              
                                 
                                 
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 2
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 =
                                 2
                                 K
                              
                           
                        
                        
                           
                              (23)
                              
                                 
                                 
                                 
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 ⩾
                                 0
                                 
                                 ∀
                                 r
                                 ∈
                                 R
                              
                           
                        The set of feasible solutions to the CCVRP is given by the set of integer feasible solutions to DWM. We adopt the general framework of BB for finding an optimal integer solution to DWM. However, the presence of both an exponential number of columns (λ-variables) and an exponential number of rows (due to the RCIs in (21)) implies that we resort to generating both columns and rows dynamically, i.e., by branch-and-cut-and-price.

We have developed a BCP algorithm for the exact solution of the CCVRP using the DWM formulation. As such, we implement a BB algorithm in which each node in the search tree consists of an LP problem which we solve by both column generation and cut separation.

In the following description of our algorithm, we focus on that part of the algorithm which in particular deals with the consequences of the particularities of the CCVRP relative to the CVRP. Essentially, the difference between CCVRP and CVRP lies in the definition of route cost, hence we will give priority to the description of how to solve the pricing subproblem, although we also briefly mention the other main ingredients of our BCP algorithm. For further details on BCP in relation to the CVRP we refer to (Fukasawa et al., 2006).

We initialize the solution process by defining an LP containing only a small number of rows and columns.

The LP contains n
                        +1 constraints, namely the n degree equations (20) together with the single constraint (22) specifying the number of routes.

Moreover, the LP contains a single-customer route for each customer. In addition, for the purpose of ensuring that the LP always has a feasible solution, we create a dummy column which, in any node of the BB tree, has a coefficient which is identical to the right-hand side in each of the rows in the LP. In this way, a feasible LP solution can be obtained simply by setting this dummy variable to one; obviously, its associated cost is given a prohibitive high value so that the column will be used only if necessary for the sake of feasibility.

Together with these n
                        +1 columns, we add the columns produced by running a simple nearest neighbor (NN) heuristic, which works as follows. We start a route at the depot and iteratively extend the route from its current end point to the nearest yet unvisited customer subject to the vehicle capacity, where nearest is measured in terms of travel time. The route extension continues not necessarily as long as possible, but only until the route under construction has received an even share of the remaining demand. Specifically, the first route is completed as soon as its total demand is at least 
                           
                              ⌈
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    
                                       
                                          V
                                       
                                       
                                          c
                                       
                                    
                                 
                              
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                              
                              /
                              K
                              ⌉
                           
                        . In general, if we let D
                        
                           k
                         denote the actual demand on the k’th route, then the required demand on route k is 
                           
                              ⌈
                              (
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    
                                       
                                          V
                                       
                                       
                                          c
                                       
                                    
                                 
                              
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 
                                    k
                                    -
                                    1
                                 
                              
                              
                                 
                                    D
                                 
                                 
                                    i
                                 
                              
                              )
                              /
                              (
                              K
                              -
                              k
                              +
                              1
                              )
                              ⌉
                           
                        .

This heuristic rule for filling the individual vehicle is introduced as a very simple attempt to balance the routes in terms of route lengths and delivered quantities, which in broad terms appears to be useful in the CCVRP.

Given an optimal solution to the current LP relaxation, we need to be able to determine whether or not there exists a feasible elementary route with negative reduced cost. If such a route exists, we also need to identify one or more such routes.

Under the conventional objective of minimizing route lengths, the reduced cost of a route can be calculated as the length of a path from source to sink in an appropriately defined graph, and so that the length of the path is simply the sum of the lengths of the individual arcs traversed along the path. This construction is applied extensively across a wide variety of problem types and algorithms, where the column generation subproblem is represented as a resource-constrained shortest path problem. For an extensive coverage we refer to (Desaulniers et al., 2005; Desrosiers, Dumas, Solomon, & Soumis, 1995, chap. 2).

However, under the objective in the CCVRP, the cost of traversing an edge is not defined independently from the route on which the edge is traversed. Basically, in order to evaluate the cost of traveling directly from i to j, we need to know not only the travel time from i to j, but also how many customers still remain to be visited on the route, as the time spent traveling from i to j adds to the arrival time at each of the remaining customers on the route.

Due to this untraditional cost structure we find it appropriate to give a detailed description of our pricing calculations in the following. We describe the pricing in two stages, where we first consider how the cost of a route can be calculated, and secondly we describe how we modify the route cost calculation so as to obtain the reduced cost of a route.

The total cost c
                           
                              r
                            of a feasible elementary route (0=
                           z
                           0, z
                           1, …, z
                           
                              k
                           , 0) is the sum of the k arrival times at the customers along the route:
                              
                                 (24)
                                 
                                    
                                       
                                          c
                                       
                                       
                                          r
                                       
                                    
                                    =
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             1
                                          
                                          
                                             j
                                             =
                                             k
                                          
                                       
                                    
                                    
                                       
                                          T
                                       
                                       
                                          
                                             
                                                z
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                              
                           where the arrival time 
                              
                                 
                                    
                                       T
                                    
                                    
                                       
                                          
                                             z
                                          
                                          
                                             j
                                          
                                       
                                    
                                 
                              
                            at customer z
                           
                              j
                            is calculated as follows:
                              
                                 (25)
                                 
                                    
                                       
                                          T
                                       
                                       
                                          
                                             
                                                z
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                    =
                                    
                                       
                                          T
                                       
                                       
                                          
                                             
                                                z
                                             
                                             
                                                j
                                                -
                                                1
                                             
                                          
                                       
                                    
                                    +
                                    
                                       
                                          t
                                       
                                       
                                          
                                             
                                                z
                                             
                                             
                                                j
                                                -
                                                1
                                             
                                          
                                          
                                             
                                                z
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                    
                                    for
                                    
                                    1
                                    ⩽
                                    j
                                    ⩽
                                    k
                                 
                              
                           with T
                           0
                           =0. The recursive nature of (25) highlights the fact that the travel time from z
                           
                              j−1 to z
                           
                              j
                            is included not only in the arrival time at z
                           
                              j
                            but in all arrival times at the k
                           −
                           j
                           +1 last customers on the route.

This suggests an alternative way of calculating the sum of arrival times, namely as a sum of contributions, one for each edge traversed from the depot until the last customer on the route, and where the travel time from z
                           
                              j−1 to z
                           
                              j
                            is weighted by the number of remaining customers (k
                           −
                           j
                           +1) on the route:
                              
                                 (26)
                                 
                                    
                                       
                                          c
                                       
                                       
                                          r
                                       
                                    
                                    =
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             1
                                          
                                          
                                             j
                                             =
                                             k
                                          
                                       
                                    
                                    (
                                    k
                                    -
                                    j
                                    +
                                    1
                                    )
                                    
                                       
                                          t
                                       
                                       
                                          
                                             
                                                z
                                             
                                             
                                                j
                                                -
                                                1
                                             
                                          
                                          
                                             
                                                z
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                              
                           If we would design a procedure where we would build up a route by repeatedly appending the edge {z
                           
                              j−1
                           z
                           
                              j
                           } to a partial route (0, z
                           1, …, z
                           
                              j−1), then it is seen from (26) that it would be required to know the number of remaining customers on the route, in order to determine the cost contribution from traversing the edge {z
                           
                              j−1
                           z
                           
                              j
                           }. Not only would this be impractical, but it also leads to our idea of basically taking the opposite approach, namely to build a route sequentially in reverse order, i.e., to begin with the end depot and then repeatedly add an edge before the current first vertex on the route.

Hence, let us again consider an elementary feasible route with k customers, but where we now let the subscript increase from the last to the first customer. As such, we can write the route as (0=
                           v
                           
                              k+1, v
                           
                              k
                           , …, v
                           1, 0), i.e., v
                           
                              j
                            is the j’th last customer on the route. The route cost can now be calculated as follows, where the travel time from v
                           
                              j+1 to v
                           
                              j
                            is weighted by the remaining number (j) of customers:
                              
                                 (27)
                                 
                                    
                                       
                                          c
                                       
                                       
                                          r
                                       
                                    
                                    =
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             1
                                          
                                          
                                             j
                                             =
                                             k
                                          
                                       
                                    
                                    
                                       
                                          jt
                                       
                                       
                                          
                                             
                                                v
                                             
                                             
                                                j
                                                +
                                                1
                                             
                                          
                                          
                                             
                                                v
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                              
                           The important characteristic of (27) is that the cost contribution from each individual edge is determined without using information on the preceding part of the route. This allows us to calculate the cost contribution from each edge immediately while building up a route in reverse order.

Using the same fundamental idea of building paths in reverse order, we can define a convenient set of labels for our path calculations to be used in our pricing of routes. Specifically, we let L(i, a, q) denote the cost of the minimum cost path from vertex i to the depot, containing a arcs, and having a total demand of q including the demand of vertex i. Throughout the calculations we use q
                           0
                           =0.

We determine an upper bound ā on a based on how many customer demands could possibly be loaded onto the same vehicle. Specifically, ā is the largest integer for which the sum of the ā−1 smallest demands does not exceed the vehicle capacity, considering that we have a
                           −1 customers on a route with a arcs, starting and ending at the depot.

For computing the L-values we propose the following steps; we prefix the step numbers by ‘C’ to represent cost calculations, as opposed to the prefix ‘RC’ which we use later to represent calculations of reduced costs.
                              
                                 Step (C1). Set L(i, a, q)=∞ for i
                                    =0, …, n; a
                                    =0, …, ā; q
                                    =0, …, Q.

Step (C2). Set L(i, 1, q
                                    
                                       i
                                    )=0, for i
                                    =1, …, n.

Step (C3). Compute path costs as follows:
                                       
                                          (28)
                                          
                                             L
                                             (
                                             i
                                             ,
                                             a
                                             ,
                                             q
                                             )
                                             =
                                             
                                                
                                                   
                                                      min
                                                   
                                                   
                                                      j
                                                      ∈
                                                      
                                                         
                                                            V
                                                         
                                                         
                                                            c
                                                         
                                                      
                                                      ⧹
                                                      {
                                                      i
                                                      }
                                                   
                                                
                                             
                                             (
                                             (
                                             a
                                             -
                                             1
                                             )
                                             
                                                
                                                   t
                                                
                                                
                                                   ij
                                                
                                             
                                             +
                                             L
                                             (
                                             j
                                             ,
                                             a
                                             -
                                             1
                                             ,
                                             q
                                             -
                                             
                                                
                                                   q
                                                
                                                
                                                   i
                                                
                                             
                                             )
                                             )
                                             ,
                                             
                                             for
                                             
                                             i
                                             =
                                             0
                                             ,
                                             …
                                             ,
                                             n
                                             ;
                                             
                                             a
                                             =
                                             2
                                             ,
                                             …
                                             ,
                                             
                                                
                                                   a
                                                
                                                
                                                   ¯
                                                
                                             
                                             ;
                                             
                                             q
                                             =
                                             
                                                
                                                   q
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             …
                                             ,
                                             Q
                                          
                                       
                                    
                                 


                                 The values of L(i, a, q) are determined correctly by steps C1–C3, for all combinations of i, a, and q.
                              

In step C1, all entries are set to infinity which effectively eliminates labels for non-existing paths. In step C2 we set for each customer i the cost to zero for the combination (i, 1, q
                                 
                                    i
                                 ); this is obviously the only combination that represents the final arc from customer i back to the depot, and the cost is zero since there are no customers remaining to be visited. Hence, the values determined for a
                                 =1 are correct. With respect to the correctness of step C3, we note that for a
                                 ⩾2 any path starting from vertex i must necessarily go immediately to some customer j and from there complete the path along a
                                 −1 arcs to the depot. Along the first arc from i to j we have a
                                 −1 customers remaining to be visited, and the travel time t
                                 
                                    ij
                                  adds to the arrival time to each of these a
                                 −1 customers, hence we get the contribution of (a
                                 −1)t
                                 
                                    ij
                                  from traversing the arc (i, j). In addition, completing the path to the depot must be made from j along a
                                 −1 arcs with the remaining demand of q
                                 −
                                 q
                                 
                                    i
                                 , which by definition is done at minimum cost given by L(j, a
                                 −1,q
                                 −
                                 q
                                 
                                    i
                                 ).□

In order to describe how the reduced cost of a route is determined, we let the dual prices associated with (20)–(22) be denoted by μ, π, and ν, respectively.

In the DWM, Eq. (20) may be viewed as constraints (2) of SPP where both the left hand side and the right hand side have been multiplied by two. That is, a feasible elementary route will have a coefficient of two in each constraint of (20) representing a visited customer on the route, as we on the left hand side of (20) count the number of traversals in δ(i), which equals two for each visit to customer i. As such, in the calculation of reduced costs, μ
                           
                              i
                            must be subtracted twice for each visited customer i on the route.

Concerning constraints (21), we note that the coefficient on the left hand side equals the number of times that the route traverses an edge in δ(S), hence we must subtract π
                           
                              S
                            for each traversal of an edge in δ(S).

Finally, in relation to (22) we note that ν must be subtracted twice for each route, equivalent to subtracting ν once for each traversal of an edge in δ(0).

In order to embed these cost reductions into our pricing algorithm, we define 
                              
                                 
                                    
                                       
                                          
                                             c
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                    
                                       e
                                    
                                 
                              
                            as the cost reduction induced by each traversal of edge e, for each e
                           ∈
                           E, and we compute 
                              
                                 
                                    
                                       
                                          
                                             c
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                    
                                       e
                                    
                                 
                              
                            as follows:
                              
                                 (29)
                                 
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                ̃
                                             
                                          
                                       
                                       
                                          e
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            μ
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            μ
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            
                                                               ∑
                                                            
                                                            
                                                               S
                                                               |
                                                               δ
                                                               (
                                                               S
                                                               )
                                                               ∋
                                                               e
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            π
                                                         
                                                         
                                                            S
                                                         
                                                      
                                                   
                                                   
                                                      for
                                                      
                                                      e
                                                      =
                                                      {
                                                      i
                                                      ,
                                                      j
                                                      }
                                                      ∈
                                                      E
                                                      ⧹
                                                      δ
                                                      (
                                                      0
                                                      )
                                                   
                                                
                                                
                                                   
                                                      ν
                                                      +
                                                      
                                                         
                                                            μ
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            
                                                               ∑
                                                            
                                                            
                                                               S
                                                               |
                                                               δ
                                                               (
                                                               S
                                                               )
                                                               ∋
                                                               e
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            π
                                                         
                                                         
                                                            S
                                                         
                                                      
                                                   
                                                   
                                                      for
                                                      
                                                      e
                                                      =
                                                      {
                                                      0
                                                      ,
                                                      j
                                                      }
                                                      ∈
                                                      δ
                                                      (
                                                      0
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           We can now express the reduced cost 
                              
                                 
                                    
                                       
                                          
                                             c
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       r
                                    
                                 
                              
                            of route r in the following form:
                              
                                 (30)
                                 
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                       
                                          r
                                       
                                    
                                    =
                                    
                                       
                                          c
                                       
                                       
                                          r
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             e
                                             ∈
                                             E
                                          
                                       
                                    
                                    
                                       
                                          β
                                       
                                       
                                          r
                                       
                                       
                                          e
                                       
                                    
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                ̃
                                             
                                          
                                       
                                       
                                          e
                                       
                                    
                                 
                              
                           We wish to calculate reduced costs of routes by modifying the calculations of route costs, i.e., by making modifications to steps C1–C3. As C1–C3 calculates c
                           
                              r
                           , what remains to be done is to subtract 
                              
                                 
                                    
                                       
                                          
                                             c
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                    
                                       e
                                    
                                 
                              
                            for each traversal of edge e, for each e
                           ∈
                           E. Accordingly, we let 
                              
                                 
                                    
                                       L
                                    
                                    
                                       ∼
                                    
                                 
                                 (
                                 i
                                 ,
                                 a
                                 ,
                                 q
                                 )
                              
                            denote the reduced cost of the minimum reduced cost path from vertex i to the depot, containing a arcs, and having a total demand of q including the demand of vertex i, where the reduced cost of a path is its cost (as given by L(i, a, q)) minus the cost reductions for the edges along the path, as given by (29). Effectively, this leads to steps RC1-RC3, where we use the prefix ‘RC’ to represent calculations of reduced costs.
                              
                                 Step (RC1). Set 
                                       
                                          
                                             
                                                L
                                             
                                             
                                                ∼
                                             
                                          
                                          (
                                          i
                                          ,
                                          a
                                          ,
                                          q
                                          )
                                          =
                                          ∞
                                       
                                     for i
                                    =0, …, n; a
                                    =0, …, ā; q
                                    =0, …, Q.

Step (RC2). Set 
                                       
                                          
                                             
                                                L
                                             
                                             
                                                ∼
                                             
                                          
                                          (
                                          i
                                          ,
                                          1
                                          ,
                                          
                                             
                                                q
                                             
                                             
                                                i
                                             
                                          
                                          )
                                          =
                                          -
                                          
                                             
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      ̃
                                                   
                                                
                                             
                                             
                                                i
                                                0
                                             
                                          
                                       
                                    , for i
                                    =1, …, n.

Step (RC3). Compute reduced path costs as follows:
                                       
                                          (31)
                                          
                                             
                                                
                                                   L
                                                
                                                
                                                   ∼
                                                
                                             
                                             (
                                             i
                                             ,
                                             a
                                             ,
                                             q
                                             )
                                             =
                                             
                                                
                                                   
                                                      min
                                                   
                                                   
                                                      j
                                                      ∈
                                                      
                                                         
                                                            V
                                                         
                                                         
                                                            c
                                                         
                                                      
                                                      ⧹
                                                      {
                                                      i
                                                      }
                                                   
                                                
                                             
                                             (
                                             (
                                             a
                                             -
                                             1
                                             )
                                             
                                                
                                                   t
                                                
                                                
                                                   ij
                                                
                                             
                                             -
                                             
                                                
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         ̃
                                                      
                                                   
                                                
                                                
                                                   ij
                                                
                                             
                                             +
                                             
                                                
                                                   L
                                                
                                                
                                                   ∼
                                                
                                             
                                             (
                                             j
                                             ,
                                             a
                                             -
                                             1
                                             ,
                                             q
                                             -
                                             
                                                
                                                   q
                                                
                                                
                                                   i
                                                
                                             
                                             )
                                             )
                                             ,
                                             
                                             for
                                             
                                             i
                                             =
                                             0
                                             ,
                                             …
                                             ,
                                             n
                                             ;
                                             
                                             a
                                             =
                                             2
                                             ,
                                             …
                                             ,
                                             
                                                
                                                   a
                                                
                                                
                                                   ¯
                                                
                                             
                                             ;
                                             
                                             q
                                             =
                                             
                                                
                                                   q
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             …
                                             ,
                                             Q
                                          
                                       
                                    
                                 

In step RC2, the final edge back to the depot has a reduced cost equal to its cost reduction, as its original cost is zero. With respect to the recursion in RC3 we note that the calculation is essentially the same as in step C3, except that we now use 
                              
                                 (
                                 a
                                 -
                                 1
                                 )
                                 
                                    
                                       t
                                    
                                    
                                       ij
                                    
                                 
                                 -
                                 
                                    
                                       
                                          
                                             c
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                    
                                       ij
                                    
                                 
                              
                            instead of (a
                           −1)t
                           
                              ij
                           , i.e., the cost reduction of 
                              
                                 
                                    
                                       
                                          
                                             c
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                    
                                       ij
                                    
                                 
                              
                            is embedded in the recursion. Correctness of steps RC1-RC3 follows by the same line of reasoning as in the proof of Proposition 1.

We note that whole routes, i.e., paths that start at the depot, are associated with values of 
                              
                                 
                                    
                                       L
                                    
                                    
                                       ∼
                                    
                                 
                                 (
                                 i
                                 ,
                                 a
                                 ,
                                 q
                                 )
                              
                            for which i
                           =0.

The recursion in step RC3 does not guarantee the resulting paths to be elementary. Indeed, we have adopted the strategy of allowing paths to be non-elementary. However, we eliminate the occurrence of 2-cycles, as in many previous approaches to column generation in vehicle routing (see, e.g., Christofides, Mingozzi, & Toth, 1981; Irnich & Desaulniers, 2005, chap. 2). For the sake of brevity, we do not describe the details of the well-established technique of 2-cycle elimination.

Permitting non-elementary paths allows for a pseudo-polynomial running time. The complexity of our CG procedure is 
                              
                                 O
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       ¯
                                    
                                 
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                                 Q
                                 )
                              
                           .

As observed in Section 3.2, in the space of the x-variables we may use any of the inequalities that are valid for the CVRP. However, we use only one class of cuts, namely the RCIs (Lysgaard et al., 2004), as this in a BCP framework seems to be by far the most effective class in practice for the CVRP (see Fukasawa et al., 2006). We use the CVRPSEP package (Lysgaard, 2003) for separating the RCIs.

In our implementation, each BB node is processed by first doing column generation until no more columns are generated, after which we call the cut separation routine. If this succeeds in finding at least one violated cut, we reoptimize the LP and repeat the process, again beginning with column generation. The process stops when no columns as well as no RCIs are produced for the given LP solution.

In the first call to column generation at each BB node, we run the NN heuristic in Section 4.1 using modified travel times, i.e., we replace each t
                        
                           ij
                         by 
                           
                              
                                 
                                    t
                                 
                                 
                                    ij
                                 
                              
                              -
                              
                                 
                                    
                                       
                                          c
                                       
                                       
                                          ̃
                                       
                                    
                                 
                                 
                                    ij
                                 
                              
                           
                         in order to let the routes be influenced by the current dual prices. Only in the first call to column generation do we use the heuristic, in all subsequent iterations do we call our dynamic programming procedure described in Section 4.2.

In each call to our dynamic programming procedure we allow a maximum of 5n columns to be returned. These are selected as follows. Given that all 
                           
                              
                                 
                                    L
                                 
                                 
                                    ∼
                                 
                              
                              (
                              i
                              ,
                              a
                              ,
                              q
                              )
                           
                         values have been calculated as described in Subsection 4.2.2, we loop through the a-values in decreasing order, and for each a value we loop through all customer indices i. For a given combination of a and i, we identify the route (0, i, …, 0) with minimum reduced cost among routes with a
                        +1 arcs (i.e., with a arcs from i to 0); as such, we consider only the best q-value for each pair of a and i. When all combinations of a and i have been examined, or as soon as 5n routes with negative reduced cost have been identified, the set of identified routes with negative reduced cost is returned from the dynamic programming procedure. All these routes are then added as columns to the LP.

With respect to the branching strategy, we choose to branch on sets as in (Fukasawa et al., 2006; Lysgaard et al., 2004), i.e., to branch on the disjunction (x(δ(S))=2∨
                        x(δ(S))⩾4) in the underlying flow network, where S is a set of customers. Given that we use this disjunction, we must use a customer set S so that 2<
                        x
                        ∗(δ(S))<4 in order to make the current LP solution infeasible in both subproblems. We use (Lysgaard, 2003) to identify a single customer set S. The procedure that we call takes as input the target value that we want x
                        ∗(δ(S)) to be close to, and we simply use 3.0 as the target value of x
                        ∗(δ(S)). It may well happen that ∣S∣=2, which is just the special case of branching on a single edge.

Our node selection strategy is ‘best-bound’, i.e., when choosing a BB node to be processed next, we choose the BB node with the smallest lower bound.

We have applied our BCP algorithm on CVRP test instances all of which are available from www.branchandcut.org. More specifically, in Subsections 5.1 and 5.2 we give results for all A, B, E, M, and P instances. We use distances rounded to integer values as travel times in all these instances. For these experiments we have set a maximum computing time of one hour.

In Subsection 5.1 we report our results obtained by fixing the number of routes (i.e., the value of K in (3)) at the minimum possible, taking the vehicle capacity and customer demands into account; this number equals the optimal objective value for a Bin Packing Problem with bin capacity given by the vehicle capacity and item sizes given by customer demands.

In Subsection 5.2 we report our results obtained by increasing K by one, i.e., we insist on using one more than the minimum number of routes. Provided that travel times satisfy the triangle inequality, the CCVRP objective value will generally improve as a result of increasing the number of routes. While the rounding convention used in the test instances implies that the triangle inequality may just be violated by a single unit, the results are still expected to show a decrease in objective function value as a function of a larger number of vehicles.

Finally, in Subsection 5.3 we report our results from applying our BCP algorithm on the ‘CMT’ instances which have been used for testing recently published metaheuristics. Unlike the instances with integer distances in Subsections 5.1 and 5.2, the CMT instances have real distances. We allow a computing time of eight hours for the CMT instances.

All computations were done on a PC with a 2.53GHz Intel Core 2 Duo P8700 processor and 1.86GB RAM running under Microsoft Windows XP. We used the IBM ILOG CPLEX 12.2 callable library and the Microsoft Visual Studio 2005 C/C++ compiler. All computing times are reported in seconds.


                        Tables 1–4
                        
                        
                        
                         show the results. Column ‘Name’ gives the name of the instance, where the two numbers in the instance name indicate the number of vertices including the depot, and the minimum possible number of routes, respectively. For example, the instance A-n32-k5 has 31 customers and requires at least 5 routes.

Column ‘UB’ gives the upper bound, i.e., the objective value of the best known feasible solution, where a ‘*’ means that the bound is proven optimal. A ‘–’ represents that no feasible solution were found in our computations. In our algorithm, the only source of feasible solutions was the BCP algorithm itself, i.e., only when the LP solution in the individual BB node was integer and feasible did we record a feasible solution (possibly using routes produced by our NN heuristic).

The two columns under the heading ‘Root CG’ show the LP objective value and the associated computing time at the root node when it happens for the first time that no columns are produced for the given LP solution.

Similarly, the next two columns under the heading ‘Root CG & RCI’ show the LP objective value and the associated computing time at the root node when it happens for the first time that no columns as well as no RCIs are produced for the given LP solution.

Finally, the three columns under the heading ‘BCP’ show the overall results for the BCP algorithm, specifically the global lower bound, the total computing time (where a ‘–’ represents that the one hour time limit was reached), and the number of nodes in the search tree.

For example, the instance A-n32-k5 has an optimal objective value of 2192, and this is concluded by the BCP in 1second using a BB tree with 9 nodes. At the root node of the BB tree, the lower bound from using only column generation is 2159.4 (found in 0.2second), whereas the addition of RCIs increases the lower bound to 2184.8 (found in a total of 0.3second).

For many instances, the combination of CG and RCIs produces much tighter bounds than those obtained with CG only (such as for A-n32-k5), whereas the CG bound for other instances (such as for E-n51-k5) is not improved much by the addition of RCIs. Viewed across all instances, however, we believe that the results confirm the effectiveness of combining CG and RCIs as in our BCP.

In general, we do find it encouraging that our algorithm is able to solve the majority of instances with a limited computational effort.

For the sake of completeness we note that the instance M-n200-k16 is omitted from Table 3, as the one hour of computing time was exceeded without reaching the situation where column generation produced no columns; moreover, no feasible solution was obtained.


                        Tables 5–8
                        
                        
                        
                         show the results (under the same headings as in Tables 1–4) for these instances. We have appended a ‘+1’ to the instance names in order to emphasize that an extra vehicle has been added.

In addition to obtaining the smaller objective function value as expected, we also observe that the instances seem much easier to solve with an extra vehicle. For the B instances, this may very well be due to the structure of the location of customers. Indeed, in the B instances the customers are located in clusters, and the number of clusters exceed the minimum number of vehicles (see Augerat, 1995), which necessitates some inter-cluster driving by one or more vehicles if K is fixed at the minimum possible. With an extra vehicle, there will be more flexibility towards having clusters serviced by separate vehicles.

However, also for the A and P instances do we find that the extra vehicle makes the problems more easily solved. Further, most of the E instances are also easily solved with the extra vehicle.

From a practical perspective, this seems to be a very promising result. Indeed, the nature of the objective function does in itself suggest that it will be beneficial for customers to allow for more routes. Our results seem to suggest that under such circumstances with a higher number of routes, many CCVRP instances are solvable with a limited computational effort.

Finally, we have performed some further computational results to assess the quality of heuristic methods for the CCVRP. In particular, the CMT instances used by Christofides, Mingozzi, and Toth (1979, chap. 11) have been used for testing the metaheuristics for the CCVRP in Ke and Feng (2013), Ngueveu et al. (2010), Ribeiro and Laporte (2012), and we have accordingly made an attempt to solve them by our code. The first three of these instances were actually introduced in Christofides and Eilon (1969), whereas the remaining four instances were introduced in Christofides et al. (1979, chap. 11). In Table 9
                         we have also given the other name by which the individual instance is known, using our naming convention from Tables 1–8. As noted, all distances are real-valued in these instances.

In six of the seven instances in Table 9, the number of vehicles is fixed at the minimum possible, whereas an extra vehicle is available in CMT5. Following our naming convention, for this instance we have used the alternative name M-n200-k16+1 in order to emphasize that the number of vehicles is actually one more than the minimum possible.


                        Table 9 shows the results. For each of the instances, the table shows our lower bound and the time spent by our code, respectively. Our LB is marked by a ‘*’ if it is proven to be optimal, otherwise we report the LB obtained after eight hours. For each instance we also report the upper bounds obtained by three metaheuristics, namely those of Ngueveu, Prins and Wolfler Calvo (NPC) (Ngueveu et al., 2010), Ribeiro and Laporte (RL) (Ribeiro & Laporte, 2012), and Ke and Feng (KF) (Ke & Feng, 2013), respectively.

We find it very encouraging that our code was able to find the proven optimal solution to five of the CMT instances, including the instance M-n151-k12 with as many as 150 customers.

The results in Table 9 also show that both RL and KF found the optimal solution to all five instances that we solved to optimality, whereas NPC reached the optimum to four of the five instances. As such, our results do indeed confirm the high quality of the three metaheuristics.

In this paper we have proposed an exact algorithm for the CCVRP. Our algorithm is a BCP algorithm, which previously has shown to be an effective type of algorithm for the CVRP. Our computional experiments on well-known CVRP instances show that our algorithm is able to solve many CCVRP instances with a limited computational effort. Our algorithm has shown to be particularly effective in solving the CCVRP instances if we allow for one more than the minimum number of routes.

While our work is concerned with the CCVRP itself, we consider this work on the CCVRP also as a contribution towards being able to solve a wider spectrum of vehicle routing problems, taking into account issues of sustainability in transportation.

In particular, fuel consumption and CO2 emission do not depend solely on distance but are also influenced by factors such as type of vehicle and engine, speed, street surface, and load of the vehicle (we refer to Sbihi & Eglese (2006) for a survey).

The cost structure in the CCVRP may actually be viewed as one where the cost per distance unit along an arc is proportional to the weight of the vehicle when traversing the arc, provided that the number of customers on board the vehicle is used as the measure of weight of the vehicle.

More generally, a vehicle’s fuel consumption might be modeled as a product of distance travelled and vehicle weight (see, e.g., Kara, Kara, & Yetiş, 2007), but where the vehicle weight includes both the weight of the empty vehicle and the load on board the vehicle when traversing the individual arc. We consider our model and algorithm for the CCVRP to be a step in the direction towards being able to handle such more general structures.

@&#ACKNOWLEDGEMENT@&#

The authors thank two anonymous referees for their helpful comments which led to an improved paper.

@&#REFERENCES@&#

