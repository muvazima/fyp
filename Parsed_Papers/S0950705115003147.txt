@&#MAIN-TITLE@&#Chaotic fruit fly optimization algorithm

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Development of new method named chaotic fruit fly optimization algorithm (CFOA).


                        
                        
                           
                           Fruit fly algorithm (FOA) is integrated with ten different chaos maps.


                        
                        
                           
                           Novel algorithm is tested on ten different well known benchmark problems.


                        
                        
                           
                           CFOA is compared with FOA, FOA with Levy distribution, and similar chaotic methods.


                        
                        
                           
                           Experiments show superiority of CFOA in terms of obtained statistical results.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Fruit fly optimization algorithm

Chaos

Metaheuristic technique

Optimization

@&#ABSTRACT@&#


               
               
                  Fruit fly optimization algorithm (FOA) is recently presented metaheuristic technique that is inspired by the behavior of fruit flies. This paper improves the standard FOA by introducing the novel parameter integrated with chaos. The performance of developed chaotic fruit fly algorithm (CFOA) is investigated in details on ten well known benchmark problems using fourteen different chaotic maps. Moreover, we performed comparison studies with basic FOA, FOA with Levy flight distribution, and other recently published chaotic algorithms. Statistical results on every optimization task indicate that the chaotic fruit fly algorithm (CFOA) has a very fast convergence rate. In addition, CFOA is compared with recently developed chaos enhanced algorithms such as chaotic bat algorithm, chaotic accelerated particle swarm optimization, chaotic firefly algorithm, chaotic artificial bee colony algorithm, and chaotic cuckoo search. Overall research findings show that FOA with Chebyshev map show superiority in terms of reliability of global optimality and algorithm success rate.
               
            

@&#INTRODUCTION@&#

Recently, a large number of complex nonlinear optimization problems are solved using mathematical tools inspired by phenomena found in nature. In such cases, traditional algorithms often may not produce desired outcomes and therefore the alternate methods must be employed. Metaheuristic techniques are a well known global optimization approach that has been widely used to solve many different optimization issues [1,2]. These methods mimic the social behavior of species or natural mechanisms in order to find the best possible result for the given problem. In majority of these techniques, an algorithm starts by creating a random population of units which is then manipulated by using iterations and stochastic processes.

Many metaheuristic algorithms have been developed over the last few years. Most popular techniques in the field include harmony search [3], firefly algorithm [4], cuckoo search [5], bat algorithm [6], and krill heard [7], which are successfully applied for solving various optimization and real world problems [8]. One of the latest population-based techniques is the fruit fly optimization algorithm (FOA) [9]. So far, FOA has been used for: tuning of PID controller [10], semiconductor testing scheduling [11], power load forecasting [12], solving multidimensional knapsack problem [13] and continuous function optimization problem [14]. The algorithm proved to be very efficient, even in comparison with other state-of-the art techniques, such as mentioned harmony search [14]. However, similarly to other metaheuristic approaches, determination of algorithm-dependent parameters is still one of the key issues that influence FOA performance.

Latest trend in developing more effective metaheuristic techniques lies in their integration with chaos. Chaos theory is related to the study of chaotic dynamical systems that are sensitive to initial conditions [15]. Due to the ergodicity and mixing properties of chaos, algorithms can potentially carry out iterative step search at higher speeds then standard stochastic search with common probability distributions [16,17]. Recent research in the field refers to employment of chaos in: genetic algorithms [18], particle swarm optimization [19], harmony search [20], ant colony optimization [21], bee colony optimization [22], simulated annealing [23], firefly algorithm [24], bat algorithm [17], krill heard technique [25], and biogeography-based optimization [15]. Empirical studies in all of these approaches show that methods with chaos have a high-level mixing capability, which results in solutions with higher diversity and mobility.

Initial result of implementation of chaos in FOA is reported in [26]. In this study, FOA is integrated with logistic chaos map and such algorithm is tested in optimization of one function. However, it is known that different maps may lead to different behavior of algorithms, so the most of the aforementioned works in this domain investigate influence of various chaotic maps. Also, in order to obtain a full insight of the capabilities of the developed algorithm, it is necessary to test its performance on several different unimodal and multimodal nonlinear functions. Likewise, it is essential to compare the chaotic algorithm with the standard version, and also with other state-of-the-art techniques with chaos so as to obtain full insight in the capabilities of chaos enhanced algorithm.

This paper presents novel FOA method based on chaotic mapping with the following main contributions: (i) FOA algorithm is integrated with ten different chaos maps in order to find the most appropriate one for the problem in hand; (ii) algorithm performance is tested on ten different nonlinear functions; and (iii) the developed method is compared with standard FOA and FOA with Levy distribution, as well as with other state-of-the-art chaos based metaheuristic techniques.

The rest of the paper is organized as follows. In Section 2 basic FOA is described. Section 3 presents developed chaotic levy FOA, with the detailed mathematical description of each of the employed map. Implementation details are stated in Section 4. Experimental results obtained for different unimodal and multimodal functions, comparison with other chaos optimization algorithms, as well as discussion of results are given in Section 5. Finally, Section 6 delivers the conclusion of this study.

Fruit fly optimization algorithm is inspired by the behavior of the fruit flies found in nature [9]. Fruit fly (lat. Drosophila) is superior in comparison with other similar species, especially in terms of food foraging using osphresis and vision characteristics. The smell foraging phase enables an individual to search and locate food sources around the fruit fly swarm. For each of the food sources the smell concentration that corresponds to the fitness value is evaluated next. In the vision foraging phase maximum smell concentration value is allocated, and then the swarm is directed towards it. This foraging behavior of fruit flies is presented in Fig. 1
                     .

FOA can be summarized thorough 6 independent steps which are defined as follows [11]: (i) set the maximum number of iteration and population size and (ii) randomly initialize fruit fly swarm location using Eq. (1);
                        
                           (1)
                           
                              
                                 
                                    
                                       δ
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 lower
                                 _
                                 bound
                                 +
                                 (
                                 upper
                                 _
                                 bound
                                 -
                                 lower
                                 _
                                 bound
                                 )
                                 ×
                                 rand
                                 (
                                 )
                                 
                              
                           
                        
                     (iii) randomly generate a number of fruit flies around the fruit fly swarm so as to form a population (osphresis search process) using Eq. (2);
                        
                           (2)
                           
                              
                                 
                                    
                                       x
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       δ
                                    
                                    
                                       j
                                    
                                 
                                 ±
                                 rand
                                 (
                                 )
                                 
                                 ,
                                 
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 n
                              
                           
                        
                     (iv) evaluate the entire fruit fly population in order to obtain the smell concentration value of each fruit fly in swarm; (v) determine the fruit fly with the maximum smell concentration and then direct the swarm towards the location of this best individual (vision search process), and finally (vi) finish the algorithm if the maximum number of generation is reached, or go to step (iii) otherwise.

The parameters 
                        
                           
                              
                                 x
                              
                              
                                 i
                                 ,
                                 j
                              
                           
                        
                      and 
                        
                           
                              
                                 δ
                              
                              
                                 j
                              
                           
                        
                      influence both search phases (osphresis and vision), and are responsible for generation of food sources. It is obvious that the way they are calculated in a significant manner determines the final algorithm solution. Numerous studies showed that random-based optimization algorithms perform better when using non-standard distributions (i.e. Gauss or uniform distribution) [16,17]. Additionally, the properties of non-repetition and ergodicity of chaos can force an algorithm to carry out overall searches at higher speeds [16]. These are the main reasons for the development of improved FOA described next.

This section presents novel FOA by introducing a new parameter enhanced by chaos. We start the explanation of the chaotic fruit fly optimization algorithm (CFOA) as follows.

Initial swarm location may have major influence in faster convergence and final outcome. As a first improvement, CFOA determines the initial fruit fly swarm location by choosing the best one among PS randomly generated solutions. Similarly to what is found in [14], this calculation of initial swarm position results in a faster convergence and a better algorithm solution at the end of experimental run.

In FOA, crucial influence on algorithm performance refers to the calculation of food sources. Basic implementation of this metaheuristic technique assumes randomization of 
                           
                              
                                 
                                    x
                                 
                                 
                                    i
                                    ,
                                    j
                                 
                              
                           
                         variables using uniform distribution. This is often not a good choice, especially when dealing with complex nonlinear and multimodal problems. In order to enhance convergence and overall speed of FOA we introduce a new parameter, alpha, which is used for generation of food sources. Particularly, we modified the Eq. (2) so that it involves a chaotic variable as follows:
                           
                              (3)
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    =
                                    
                                       
                                          x
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    +
                                    alpha
                                    (
                                    
                                       
                                          x
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    -
                                    
                                       
                                          x
                                       
                                       
                                          j
                                       
                                       
                                          ∗
                                       
                                    
                                    )
                                    ,
                                    
                                    i
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    PS
                                    ,
                                    
                                    j
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    n
                                 
                              
                           
                        where 
                           
                              
                                 
                                    x
                                 
                                 
                                    j
                                 
                                 
                                    ∗
                                 
                              
                           
                         is the currently best solution. In this manner, we force the individuals to move towards the best so far optimal solution in the chaotic manner. This proved to be a huge advantage in comparison with basic FOA and FOA with Levy distribution. The complete procedure of a novel CFOA is presented in Fig. 2
                        .

In this paper, we investigate the influence of ten different one-dimensional non-invertible chaotic maps, similarly to other recent studies [15]. A mathematical description and graphical presentation of these maps for 300 iterations are given in Table 1
                         and Fig. 3
                        , respectively. It is important to note that the chaotic behavior is evident in Fig. 3 despite the lack of random component in equations given in Table 1. Each chaotic map presented in Fig. 4
                         has the starting point of 0.7. The maps that do not produce values in range of [0,1] are normalized to fit into this scale.

@&#IMPLEMENTATION DETAILS@&#

Chaotic FOA presented in this study is benchmarked using 14 different well-known functions [14,15,27]. Total optimization set contains seven unimodal and seven multimodal examples. The mathematical description and graphical presentation of these functions are given in Table 2
                         and Fig. 4, respectively.

For all test problems global optimum is equal to 
                           
                              f
                              
                                 
                                    
                                       
                                          
                                             X
                                          
                                          
                                             ∗
                                          
                                       
                                    
                                 
                              
                              =
                              0
                           
                        . Boundaries for functions are equal to their known initial ranges. After the every algorithm iteration, boundary constraint for each 
                           
                              
                                 
                                    x
                                 
                                 
                                    i
                                    ,
                                    j
                                 
                              
                           
                         parameter is applied.

Beside the usual measures for algorithm evaluations such as best, mean and median results, in this paper we additionally apply success rate criterion. The success rate parameter 
                           
                              
                                 
                                    S
                                 
                                 
                                    r
                                 
                              
                           
                         is defined as [24]:
                           
                              (4)
                              
                                 
                                    
                                       
                                          S
                                       
                                       
                                          r
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                N
                                             
                                             
                                                success
                                             
                                          
                                       
                                       
                                          
                                             
                                                N
                                             
                                             
                                                all
                                             
                                          
                                       
                                    
                                    ×
                                    100
                                 
                              
                           
                        where 
                           
                              
                                 
                                    N
                                 
                                 
                                    success
                                 
                              
                           
                         is the number of successful trials, and 
                           
                              
                                 
                                    N
                                 
                                 
                                    all
                                 
                              
                           
                         is number of trials. Similarly to other studies [17,19], one experimental run is considered successful if the final algorithm solution is close to the searched optimum. The closeness criterion depends on the search space of a particular function, and is defined as [24]:
                           
                              (5)
                              
                                 
                                    
                                       
                                          
                                             
                                                X
                                             
                                             
                                                gbest
                                             
                                          
                                          -
                                          
                                             
                                                X
                                             
                                             
                                                ∗
                                             
                                          
                                       
                                    
                                 
                                 ⩽
                                 (
                                 upper
                                 _
                                 bound
                                 -
                                 lower
                                 _
                                 bound
                                 )
                                 ×
                                 
                                    
                                       10
                                    
                                    
                                       -
                                       4
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    X
                                 
                                 
                                    gbest
                                 
                              
                           
                         is the obtained global best result of the developed algorithm.

In this paper, we tested each function with 50 independent algorithm runs. The initial conditions of each test are completely different, so the algorithm outcome is practically independent of the starting position of the fruit fly swarm. To completely evaluate the CFOA performance, we used statistical measures such as median and mean objective values, as well as their standard deviations. This information is provided for each chaotic map and every tested function.

Additionally, extensive studies regarding parameter settings are carried out. From conducted experiments, we concluded that a population of 50 individuals and 700 iterations per experimental run is sufficient for all testing cases. Likewise, in all of the experiments, initial value of 0.95 for parameter alpha proved to be a good choice.

Finally, it is also important to note that every reported result in this paper is obtained using Matlab software that runs on a desktop PC with 4GBs RAM and Windows 7 (64 bit) operating system.

Computational results for all functions using all maps are given in Tables 3–16
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                         (best result is given in bold font). Chaotic FOA is tested on 14 benchmark problems using Chebyshev, Circle, Gauss/Mouse, Iterative, Logistic, Piecewise, Sine, Singer, Sinusoidal, and Tent map. Beside the mentioned statistical measures, we added best and worst results obtained over 50 independent runs, as well as average time for one such test.

Overall, the experimental results prove the usefulness of the implementation of chaos in FOA. In each tested case, CFOA final output was very close to the desired function optimum. For ten out of the fourteen functions, the best minimum value is obtained before the maximum number of iteration is reached. Algorithm also converged in case of F3 and F8, while CFOA did not solve minimization problems in functions F7 and F13. We also provide additional information on the exact iteration in which the function optimum is reached.

Experiments show that Chebyshev, Iterative, Logistic, Sine and Singer map provide best results in all cases (Tables 3–16). Particularly, these maps reached maximum algorithm performance before the end of one experimental cycle, except for F3 and F8 (for F7 and F13 algorithm did not converged). Among then, Chebyshev map yields the best results in terms of fastest algorithm convergence.

Statistical results given in Table 8 for F6 show that all chaotic maps except map No. 9 has the same influence on the algorithm performance. As the matter of fact, by observing Tables 3–16 one should note that Sinusoidal map is the worst choice for generation of parameter alpha. This conclusion supports the results obtained for success rate showed in Table 17
                        . Except for functions F6, F9 and F14, CFOA based on Sinusoidal map did not manage to successfully converge. All of the other types of CFOA show impressive performance in terms of algorithm performance and convergence. This is especially evident in comparison with other chaotic state-of-the-art algorithms, which did not succeed to achieve such a consistent, high level result.

Additionally, the algorithm is tested using random values instead of chaotic sequences. Particularly, alpha parameter in Eq. (3) is drawn from the uniform distribution (within range [0,1]), and results are presented in Table 18
                        . It is evident that this algorithm with random alpha successfully converged in same benchmark problems. However, employment of chaotic variable proved the be the optimal choice since it can be observed that in all cases algorithm with chaos alpha converged faster.

In order to further evaluate the developed algorithm, we compared CFOA with basic FOA and FOA with Levy distribution. We implemented Chebyshev map since the previous results indicate that this is the best choice in all test cases. Similarly to the experiment showed above, we tested these algorithms on ten selected benchmark problems with 50 independent runs. Results are presented in Table 19
                           . Convergence curves for obtained mean values of these algorithms are showed in Figs. 5–14
                           
                           
                           
                           
                           
                           
                           
                           
                           
                           .

From Table 19 it is evident that CFOA gives best results in comparison with other two algorithms. For each optimization function CFOA proved to be the best choice in terms of obtained statistical measures. Likewise, success rate of CFOA in each tested case reached maximum of 100%, while the FOA and LFOA showed much worse results. Only in the case of optimization of function F5, all of three algorithms converged with maximum rate. These results indicate that integration of chaos in FOA significantly improves overall algorithm performance.

Similarly to what is found in Table 14, results presented in Figs. 5–14 show the superiority of CFOA (note that values on x-axis and y-axis depicts iterations and fitness, respectively). For every optimization task proposed algorithm successfully found the optimal solution in minimal number of iterations. In comparison with FOA and LFOA, CFOA converge much faster and produce significantly better final outcome. It is also important to note that the CFOA initialization (as described in Section 3) has a major influence on algorithm performance and convergence.

Furthermore, we compare developed CFOA with other recently introduced FOA based methods. Similarly to previous case, Table 20
                            show superiority of CFOA in comparison with algorithms presented in literature [14,28].

In addition to the above experiments, we compare the CFOA with recently developed state-of-the-art chaotic algorithms. Besides CFOA, we implemented chaotic bat algorithm (CBA), chaotic accelerated particle swarm optimization (CAPSO), chaotic firefly algorithm (CFA), chaotic artificial bee colony algorithm (CABC), and chaotic cuckoo search (CCS). Population size, maximum number of iterations, and specific algorithm parameters are presented in Table 21
                           , while comparison results are given in Table 22
                           . All aforementioned algorithms are implemented and tested in Matlab software under the same initial conditions. The algorithms are tested on 3 unimodal and 3 multimodal functions with global optimum equal to zero. Best chaotic maps are employed for each individual algorithm: Sinusoidal map for CBA and CAPSO [17,19], Logistic map for CCS [29], and Gauss map for CABC and CFA [22,24]. Results indicate that the CFOA outperforms all other algorithms in terms of mean final optimization result, except for the F8 and F9 in which the identical result is obtained as with employed CABC. This is an additional proof that the implementation of chaotic component remarkably improves the standard FOA. Finally, Friedman test also confirms the superiority of CFOA (Table 22).

@&#CONCLUSIONS@&#

Implementation of chaos in metaheuristic algorithms has become increasingly popular in research community. Because of the ergodicity and mixing property of chaos, these types of algorithms show better behavior than original variants in terms of final outcome. In this paper we investigate the effectiveness of ten different chaotic maps in improving the performance of recently developed fruit fly optimization algorithm (FOA). In order to fairly compare these maps, we employ fourteen different well known unimodal and multimodal functions. By introducing new chaotic parameter and different initialization setting in basic FOA, novel algorithm is enhanced in terms of convergence speed and overall performance. Statistical results on every optimization task indicate that the chaotic fruit fly algorithm (CFOA) has a very fast convergence. Moreover, Chebyshev map proved to be the best map in terms of final algorithm solution. Likewise, we compare the CFOA with the standard FOA and Levy flight FOA as well as other FOA based approaches in terms of finding global optimum of a particular function. Additionally, the comparison study with other state-of-the-art chaos enhanced algorithms such as chaotic bat algorithm, chaotic accelerated particle swarm optimization, chaotic firefly algorithm, chaotic artificial bee colony algorithm, and chaotic cuckoo search is provided. CFOA proved to be better or at least as equal to the performance of aforementioned algorithm in all test cases. Finally, it can be concluded that overall findings confirm the superiority of CFOA in terms of statistical results, reliability of global optimality, and algorithm success rate.

In future research studies, CFOA could be applied for solving real world engineering problems. Specifically, the performance of the CFOA in structural model updating, gear train design, and pressure vessel design needs to be investigated. Likewise, it would be interesting to see the influence of other chaotic maps on the developed algorithm.

@&#ACKNOWLEDGEMENT@&#

This research is supported by the Serbian Government – the Ministry of Education, Science and Technological Development under Grant TR35004 (2011–2015).

@&#REFERENCES@&#

