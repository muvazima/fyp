@&#MAIN-TITLE@&#CDNFRE: Conflict detector in non-functional requirement evolution based on ontologies

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Proposing the software architecture of CDNFRE tool for detecting conflicts in non-functional requirements


                        
                        
                           
                           The ontological conflict detection method is represented as a set of rules for automatic conflict detection.


                        
                        
                           
                           Proposing the non-functional requirement metadata and processes about derived requirement generation and conflict detection


                        
                        
                           
                           Implementing prototype for demonstrating how the CDNFRE software architecture works


                        
                        
                           
                           Providing a case study to validate the effectiveness of the proposed conflict detection rules


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Systems analysis

Requirement engineering

Ontology

Conflict detection

Non-functional requirement

@&#ABSTRACT@&#


               
               
                  Analyzing conflicts in non-functional requirements is a major task in large software systems development projects. Many of the non-functional requirements that accumulate vary over time. Systems analysts often maintain non-functional requirements incrementally. Requirement information overload and employee turnover problems may complicate conflict detection in the non-functional requirement evolution process. This work proposes a conflict detector in non-functional requirement evolution (CDNFRE) system that uses ontologies as a theoretical foundation for automatically detecting conflicts. Requirement metadata and conflict detection rules and their associated requirement generation and conflict detection processes are proposed for the CDNFRE mechanism. A prototype is developed. A case study of electronic commerce in a television station company demonstrates the feasibility and effectiveness of the proposed CDNFRE system.
               
            

@&#INTRODUCTION@&#

Information systems development for the highly competitive consumer markets of today must consider intertwining technology and business requirements [3,32]. Technology and business requirements are numerous and constantly evolving. The hidden inconsistencies and conflicts are often difficult to identify in a large mass of requirements. Employee turnover is inevitable and may cause organizations to forget requirements. Therefore, formal requirement analysis is essential and requires computer support [20].

Customers are now focusing on non-functional requirement (NFR) [9,27]. Non-functional requirements determine the efficiency and effectiveness of a software system in completing a task [38]. Non-functional requirements are often presented chaotically without a common standard and without sufficient analysis [17]. Analyzing NFR conflicts is essential for successful information systems development [31]. Insufficient NFR analysis can cause serious problems in systems development [25,28].

To facilitate NFR analysis, this work proposes a Conflict Detector in Non-Functional Requirement Evolution (CDNFRE) mechanism for automatically detecting conflicts during maintenance of non-functional requirements by systems analysts. The CDNFRE tool includes four essential elements: metadata, ontology, cause-and-effect relationship, and conflict detection rule. Metadata can be conceptualized as a blank form, and ontology can be conceptualized as a dictionary that stores concepts and semantic relationships. By applying ontology concepts (vocabulary in the dictionary), the system analyst can provide the metadata (the blank form) needed to model non-functional requirements. Based on cause-and-effect relationships, inference knowledge can be used to derive requirements about side effects from ontology and metadata. In contrast, a conflict detection rule is a rule for using ontology and metadata to infer conflicts as NFRs evolve.

Non-functional requirements consist of software attribute, business value, and restriction [9,22]. Software attribute considers interface, performance, and quality. Business value includes goal, strategy, policy, and control. Restriction represents limitations and assumptions for constraining information systems, such as law, culture, and budge. Business value and restriction, which are related to software attribute, must be considered when determining software attributes. Business value is an important element of information system development in a profit-oriented organization [1,22]. For example, business considerations such as target market and brand position must be considered when designing the interface during electronic commerce websites design.

Ontology is typically offered to support a shared understanding [29]. An ontology includes both concepts and their relationships [4,10]. In the software engineering domain, application of ontology is increasingly common [12]. There are evidences of the benefits of using ontologies in requirement engineering activities both in industry and academy for reducing inconsistencies although the most existing studies addressed functional requirements [5]. One of the nice characteristics of ontologies is their capability of reasoning. The reasoning may help in detecting some type of inconsistencies [14]. Some studies [2,14] apply ontologies in functional requirements. Besides software attributes, other features should be included in NFR, such as business value, restriction, and cause-and-effect relationship which are not considered yet. To fill this research gap, this work uses ontologies which consider various NFR features to detect conflict in non-functional requirements.

The rest of this paper is structured as follows. Section 2 discusses related works in requirement analysis. Section 3 introduces the proposed method of CDNFRE design. Section 4 describes the proposed ontologies for non-functional requirements. Section 5 presents the software architecture and database design of CDNFRE tool. Sections 6 and 7 describes the CDNFRE prototype and the results of a real-world case study to confirm its feasibility and effectiveness. Finally, the results are discussed, and conclusions are given.

@&#RELATED WORKS@&#

The requirement metadata provides a requirement data format. Most of the existing works [8,11,15,16,21] focus on functional requirement metadata, and only Fletcher, Liu, and Tang [7]) have considered NFR metadata. Sadana and Liu [31]) proposed that NFR metadata can be described in terms of three main characteristics: quality attribute, functionality, and specific characteristic. In the metadata, a quality attribute of functionality can be presented as a specific characteristic. For example, the following requirement can be presented based on the above metadata: sound quality of music player should be excellent. Egyed and Grünbacher [6]) revealed that quality attributes often needs adjustment. One software attribute may influence another. Therefore, cause-and-effect relationships must be considered for an effective non-functional requirement analysis.

To compare existing requirement conflict analysis methods, several features including purpose, considering NFR, automatic tool, and configurable rule support are chosen based on the research goals of this work. Table 1
                      shows the conventional requirement conflict analysis methods, most of which provide tools for automatically detecting conflict. Three of the studies [7,15,16] listed in the table partially consider NFR, and no one discusses how configuration capability affects conflict detection rules. To fill the gap on low variety of NFR features and the lack of configurable rule support, this work focuses on conflict detection in various NFR features and how to provide configuration capability.

The NFR metadata proposed in this study are based on the works summarized in Table 2
                     . In other words, seven features presented in Table 2 are revealed by the related works. Lee and Xue [19] and Lee et al. [18] integrated unified modeling language (UML) with goals, i.e., non-functional requirements. Examples of goals are maintaining max number of users, optimizing performance, and optimizing flexibility.

In a study of software quality, Egyed and Grünbacher [6] argued that quality can be adjusted and that one quality can influence another. Robertson and Robertson [30]) defined the elements of a requirement as identification number, NFR, type, use case, description, rationale, originator, fit criterion, customer satisfaction and dissatisfaction, priority, conflicts, supporting material, and history. Customer satisfaction revealed by Robertson and Robertson [30]) is not included in this CDNFRE metadata because customer satisfaction can be represented by NFR concretely. Glinz [9]) defines a non-functional requirement as system attribute or system constraint.

Sadana and Liu [31]) proposed that NFR metadata can be defined in terms of quality attribute, module, and specific characteristic. Mylopoulos, Chung, and Nixon [26]) and Supakkul, Hill, Chung, Tun and Prado Leite [33]) showed that modules for increasing and decreasing NFR goals can achieve a sufficient satisfaction level. They also showed that side effects should be considered when formulating NFRs. This CDNFRE metadata provides plentiful NFR features comparing to the existing NFR metadata to fill the research gap.

The CDNFRE system was designed to support ontology-based non-functional requirement conflict analysis (ONFRCA) method [22], which analyzes ontology-based non-functional requirement conflict in four steps: modeling prior knowledge, modeling new NFR, determining side effect, and detecting conflicts. Fig. 1
                      depicts the four steps of ONFRCA.

Constructivism theory is the theoretical foundation of the ONFRCA method. Constructivism indicates that the existing knowledge is the basis in interpretation. The new data should be considered and interpreted based on the existing knowledge to reason new information for adapting the external world. Therefore, modeling prior knowledge is the first step in the ONFRCA process. Modeling new NFR in step 2 is to consider new data. The prior knowledge and new NFR are used to reason new information, such as side effects and conflicts. The four steps of the ONFRCA process are summarized as follows.
                        
                           (1)
                           Modeling prior knowledge: this phase models the minimum prior knowledge needed to describe existing information systems. Prior knowledge comprising adopted NFR, cause-and-effect relationships, and ontologies that is manually proposed by employees and then approved by an organization according to the consensus of a management-level committee. Adopted NFR describes existing information systems. Cause-and-effect relationships must be identified to understand side effects. Ontologies contain the terms needed to describe NFR and cause-and-effect relationships. For example, an adopted NFR is “the atmosphere of the electronic commerce website should be relaxing”. Atmosphere is a kind of interface attribute, electronic commerce website is a module, and relaxing is a specific value for describing the atmosphere in the ontologies.

Modeling new NFR: a major task in this phase is referencing prior knowledge by browsing the NFRs adopted so far. Ontologies include terms that describe new NFRs manually. The ONFRCA process adds new terms to the ontologies of prior knowledge by returning to the modeling prior knowledge phase. For example, an employee can propose a new NFR: “the atmosphere of the electronic commerce website should be nervous”.

Determining side effect: based on the cause-and-effect relationships observed in the prior knowledge, this phase determines whether or not the new NFR has a side effect automatically. A side effect means that something happens in addition to a new NFR proposition. Once a side effect is identified, this phase derives the NRF. For example, a cause-and-effect relationship is “the color of the electronic commerce website should be black so that the atmosphere of the electronic commerce website is lifeless”.

Detecting conflicts: This phase detects NFR conflicts based on the data produced in the above three phases. Rules are used to detect NFR conflicts automatically. For example, the relaxing atmosphere is conflicting with the nervous atmosphere.

The domain knowledge used to set NFR requirements include software attribute, business value, and restriction. This work uses primitive concepts and does not use derived concepts (e.g. C1=C2 union C3) in the ontologies. Software attribute and restriction are based on concepts introduced in prior works. Glinz [9]) indicates that software attribute includes performance and quality. The IEEE Standard Glossary of Software Engineering Terminology reveals that interface requirements which are not classified in functional requirements. Software attribute has three essential child concepts (Fig. 2
                     ): interface, performance, and quality. Interface, which indicates the presentation requirements, includes atmosphere, color, location, image, and animation. Performance comprises time, speed, throughput, and volume. Quality includes reliability, usability, security, availability, portability, maintainability, and complexity.

Restriction based on Glinz [9]) indicates the underlying limitations and assumptions of constraints on information systems. The child concepts of restriction are legal, culture, available material, limited budget, environment, design and implementation limitation (Fig. 3
                     ). For example, the small screen size of smart phones is a design and implementation limitation.


                     Fig. 3 shows that the child concepts of business value are goal, strategy, policy, and control [1,22]. Goal is the organizational objective such as increasing sales and overall profit. Strategy is an approach for achieving an organizational goal. Examples of profit-making strategies are minimizing costs and maximizing service quality. Policy is a plan of action that guides business decisions and activities, such as privacy policy. Control is the monitoring of business activities and the confirmation that they are performed effectively and efficiently to achieve organizational goals according to strategies and policies, such as monitoring shopping cart drop off rate in electronic commerce websites.

The CDNFRE tool detects conflicts by considering four elements (Fig. 4
                        ): Action, non-functional requirement (NFR), cause-and-effect relationship (CAER), and ontology. Fig. 4 shows that action initiates the CDNFRE mechanism. The systems analyst uses an action, such as add, replace, and delete, to open a form that is appropriate for modeling non-functional requirements and cause-and-effect relationships. The systems analyst adds, replaces, and deletes NFRs (Fig. 11). The systems analyst can also add and delete cause-and-effect relationships (Fig. 13).

The NFR form is a format for representing the requirement content in NFR (Fig. 4). Fig. 5
                         shows the format. The systems analyst refers to the ontology for completing the requirement form that articulates NFR content. Cause-and-effect relationships (CAER) and NFR content generate NFRs based on observed side effects. If an NFR complies with the condition in the CAER content, the CDNFRE tool generates a new NFR according to the conclusion in the CAER content. The ontologies considered in this work include software attribute, business value, restriction, module, specific value, adjustment direction, and evaluation ontologies. Finally, the CDNFRE mechanism generates NFR conflict results based not only on NFR content and ontology, but also on NFR conflict detection rules (Table 2).

The metadata concepts introduced in this work are NFR evolution and cause-and-effect relationship. The NFR evolution metadata is conceptualized according to the studies shown in Table 2. Fig. 5 depicts the NFR evolution metadata that reveal evolutionary action and the structure of NFR content. The NFR in this work is written in keywords according to the grammar presented by Fig. 5 and stored in a relational database. During the NFR evolution process, the systems analyst can add requirement R1, replace requirement R2 with requirement R1, and delete requirement R3. Therefore the concepts in the action ontology, such as add, use, to replace, and delete, can be applied to perform Act1 and Act2 (Fig. 5).

The proposed NFR metadata is developed according to the literatures. Describing software attribute for a system module is a basic element in the NFR content [9]. Sadana and Liu [31] indicate that NFR can be described by a specific value, such as good and bad. Egyed and Grünbacher [6] argue that software attribute can be adjusted, such as increase and decrease. Lee and Xue [19] and Yang and Liu [37] indicate that business values which include business goals are important non-functional requirements which facilitate functional requirement derivation. Robertson and Robertson [30]), Glinz [9]) and Yang and Liu [37]) reveal that restriction is also important in NFR.

The content of Requirement 1 (R1) in Fig. 5 consists of Software Attribute SAR1, Module MR1, Specific Value SVR1, Adjustment Direction ADR1, Business Value BVR1, Restriction RR1, and Supported or Rejected SRR1. Ontological concepts can represent a non-functional requirement content by filling in the requirement metadata. Selected concepts in the software attribute ontology (Fig. 2) can be used for Software Attribute SAR1. Business value ontology concepts (Fig. 3) are applicable for Business Value BVR1. Restriction ontology concepts (Fig. 3) are applicable for Restriction RR1. The concepts in the module ontology, such as electronic commerce website, are applicable for Module MR1. The concepts in the specific value ontology, such as simple and complex, can be chosen to fill in Specific Value SVR1. The concepts in the adjustment direction ontology, such as increased and decreased, can be used to fill in Adjustment Direction ADR1. Finally, the concepts in the supported or rejected ontology, such as supported by management-level committee and rejected by marketing department, are applicable for Supported or Rejected SRR1. Fig. 5 shows that Requirements 1–3 have similar structures.

Conflict relationships are semantic relationships between two requirements. The conflict relationships between Requirements R1 and R2 (Fig. 5) are RSA1, RM1, RSV, RAD, RBVR, and RSR. The conflict relationships between Requirements R1 and R3 (Fig. 5) are RSA2 and RM2. The ontologies reveal the semantics of conflict relationships. Fig. 5 shows that, based on the software attribute ontology in Fig. 2, the semantic of RSA1 is a kind relationship between performance (SAR1) and speed (SAR2).

The CDNFRE system refers to a rule set (Table 3
                        ) for detecting conflict relationships (RSA1, RM1, RSV, RAD, RBVR, RSR, RSA2, and RM2). For example, Rule1 in Table 3 is, “If Act 1=Add, RSA1
                        =equality or kind, RM1
                        =equality, kind, or composition, RSV!=kind, a conflict exists”.


                        Fig. 6
                         depicts two cause-and-effect relationship metadata used to represent side effect phenomena. Fig. 6 (a) indicates that value assignment VAs1 causes value assignment VAs2. For example, high (SVVAs1) complexity (SAVAs1) of product recommender (MVAs1) causes low (SVVAs2) download speed (SVVAs2) of product catalog (MVAs2). Fig. 6 (b) shows that value adjustment VAd1 causes value adjustment VAd2. For example, increasing (ADVAd1) complexity (SAVAd1) of customer service (MVAd1) causes decreasing (ADVAd2) maintainability (SAVAd2) of customer service (MVAd2).


                        Table 3 summarizes twelve conflict detection rules, which are a modification of rules introduced in a prior work [22]. The prior work [22] does not consider actions (e.g. add, replace, and delete) in supporting requirement evolution and only including seven conflict detection rules. To ensure the completeness of the rules, three experts were invited to examine the completeness of the rules and provide opinions to improve the rules. The rules in Table 3 are developed according to the prior work and expert opinions. And the experts acknowledged that these rules in Table 3 are as complete as possible. Comparing to the prior work, Table 3 considers actions in supporting requirement evolution and includes more rules. The rules consider ten relationships, including RSA1, RM, RSV, RAD, RBVR, RSR, RSA2, RM2, and RVAsVAd, and concepts (e.g., Action1, Action2, ADR3, BVR3/RR3 and SVR1) in Fig. 5.

The basic structure for ontology description is Subject-Semantic Relationship-Object. This work uses five semantic relationships: Eq (equality), K (kind), C (composition), A (antonym), and Ex (exclusion). These semantic relationships are introduced as follows: “Eq” means that two terms present the same concept; “K” is a taxonomic relation between two terms; “C” indicates that a term representing a concept is a part of another concept. “A” means that terms in a pair have opposite meaning, such as dark and bright. “Ex” means two concepts cannot exist simultaneously.

Rule1 detects a value diversity conflict which has two contradictive software attribute values exist in two requirements (e.g. simple and sophisticated). Rule2 analyzes an opposite direction conflict which has two directions in two software attribute adjustment requirements (e.g. deteriorate and improved). Rule3 analyzes an opposite direction conflict in three requirements which have two software attribute values and one adjustment direction (e.g. increased and using low to replace high). Rule4 detects a value shift conflict (e.g. making a dark color more brightened). Rule5 detects an invalid business value and restriction conflict (e.g. a committee rejects a business strategy about maximizing female customer enjoyment). Rule6 detects a business value and restriction incompatibility conflict which has two exclusive or antonym business values (e.g. maximizing male customer enjoyment and maximizing female customer enjoyment are two exclusive business values). Rule7 analyzes a no consensus on business value and restriction conflict which indicates that both a support and a rejection of a business value exist in two requirements. Rule8 analyzes a business value and restriction support cancellation conflict which reveals that deleting a requirement may decrease a business value achievement.

The CDNFRE system is designed to support the NFRCA method [22] introduced in Section 4. Fig. 7
                         illustrates the proposed CDNFRE software architecture. The three layers used by the CDNFRE system to detect NFR conflicts are user interface, system functionality, and database. User interface comprises windows forms. System functionality consists of seven modules: requirement manager, cause-and-effect relationship manager, derived requirement generator, ontology editor, conflict detector, and rule editor. The modules are discussed in further below.
                           
                              (1)
                              Requirement manager: this module adds, updates, and deletes requirements during NFR evolution. Fig. 5 illustrates how requirements are managed by the systems analyst. The NFR evolution action, which consists of Act1 and Act2, describes the relationships among the systems analyst and Requirements R1 and R2. The instances of NFR evolution action are add (Act1) R1, use (Act1) R1 To replace (Act2) R2, and delete (Act1) R1.

The requirements in Fig. 5 include nouns, adjectives, and verbs. The four nouns and the three adjectives in non-functional requirements are software attribute, module, specific value, adjustment direction, business value, restriction, and supported or rejected. The five verbs are of, should be, to facilitate, comply with, and is. Software attribute, which indicates the non-functional attributes of software systems, comprises interface (e.g., color, location, and atmosphere), performance (e.g., spending time, speed, throughput, and volume), and quality (e.g., reliability, usability, security, availability, maintainability, and complexity) (Fig. 2). Module indicates a software subsystem or a software system component. Specific value describes a characteristic of software attribute, such as high and low. Adjustment direction describes a movement towards a direction, such as increased and decreased. Business value indicates the purpose and approaches that are valuable to an organization (Fig. 3). Software systems help organizations to achieve business values such as increasing profit. Restriction describes the limitations and assumptions for software systems, such as law, culture, and budget (Fig. 3). Support or rejected describes the decision made after an evaluation of a business value or a restriction. For example, gaining profit (business value) is supported (supported or rejected) by a general manager.

Value assignment consists of software attribute, module, and specific value. An example of a value assignment is, “the complexity (software attribute) of checkout process (module) should be low (specific value)”. The composition of value adjustment is software attribute, module and adjustment direction. An example of a value adjustment is, “the security level (software attribute) of credit card transaction (module) should be increased (adjustment direction)”. Notably, value assignment and value adjustment are also used in the cause-and-effect relationship editor.

Cause-and-effect relationship editor: this module manages cause-and-effect relationships describing side effects and then using the descriptions to generate requirements. Fig. 6 depicts the cause-and-effect metadata. The two cause-and-effect relationships are the following: (a) value assignment cause-and-effect relationship: This relationship reveals a condition that causes a conclusion. Both the condition and conclusion are value assignments. For example, the complexity (Software Attribute SA
                                 
                                    Condition
                                 ) of the product recommender module (Module M
                                 
                                    Condition
                                 ) should be high (Specific Value SV
                                 
                                    Condition
                                 ) so that the webpage download speed (Software Attribute SA
                                 
                                    Conclusion
                                 ) of the product catalog module (Module M
                                 
                                    Conclusion
                                 ) is low (Specific Value SV
                                 
                                    Conclusion
                                 ). (b) Value adjustment cause-and-effect relationship: according to this relationship a value adjustment condition causes a value adjustment conclusion. For example, complexity (Software Attribute SV
                                 
                                    Condition
                                 ) of customer service (Module M
                                 
                                    Condition
                                 ) should increase (Adjustment Direction AD
                                 
                                    Condition
                                 ), which causes maintainability (Software Attribute SA
                                 
                                    Conclusion
                                 ) of customer service (Module M
                                 
                                    Conclusion
                                 ) to decrease (Adjustment Direction AD
                                 
                                    Conclusion
                                 ).

Derived requirement generator: This module uses a cause-and-effect relationship to generate a derived requirement if the new requirement is equal to, is a parent of, or is a child of a condition of the cause-and-effect relationship. Fig. 8
                                  shows the process for deriving requirements. Once the module is triggered, it looks up the semantic relationships between two software attributes, two modules, two specific values, and two adjustment directions of the new requirement and cause-and-effect relationship condition in the ontology. If each semantic relationship is an equality relationship or a kind relationship, a requirement is derived. For example, suppose a systems analyst uses requirement manager to propose a new Requirement R1, “the complexity (SA
                                 
                                    R1
                                 ) of customer service (M
                                 
                                    R1
                                 ) should be increased (AD
                                 
                                    R1
                                 )”, to enhance the customer service module. A cause-and-effect relationship is, “complexity (SA
                                 
                                    Condition
                                 ) of customer service (M
                                 
                                    Condition
                                 ) should increase (AD
                                 
                                    Condition
                                 ) so that maintainability (SA
                                 
                                    Conclusion
                                 ) of customer service (M
                                 
                                    Conclusion
                                 ) decreases?] (AD
                                 
                                    Conclusion
                                 )”. This new requirement and cause-and-effect relationship include equality relationships between SA
                                 
                                    R1
                                  and SA
                                 
                                    Condition
                                 , M
                                 
                                    R1
                                  and M
                                 
                                    Condition
                                 , and AD
                                 
                                    R1
                                  and AD
                                 
                                    Condition
                                 . Therefore, the new requirement is equal to the cause-and-effect relationship condition. Fig. 8 shows how the requirement is derived by the requirement generation process.

Ontology editor: This module adds and deletes the concepts and semantic relationships in the ontologies. The systems analyst can use the ontological concepts to present an NFR based on requirement metadata (Fig. 5). The ontological concepts include software attribute, module, specific value, adjustment direction, business value, restriction, and support or rejection. By analyzing semantic relationships in the ontologies, e.g., kind, composition, antonym, and exclusion relationships, conflict can be detected. For example, maintainability is a software attribute in the software attribute ontology, checkout process is a part of electronic commerce website in the module ontology, and increased is an antonym of decreased in the adjustment direction ontology.

Rule editor: This module maintains the conflict detection rules (Table 3), which are stored in the rule base of the relational database (Fig. 10). Rules can be added, modified, and deleted by systems analysts as needed. Section 6 details the proposed rules summarized in Table 3.

Conflict detector: in this module, ontologies and rules are used for automatic analysis of NFR conflicts. Fig. 9
                                  depicts the conflict detection process in this module. The first step is to looking up the relationships of NFR Evolution Metadata (including RSA1, RM, RSV, RAD, RBVR, RSR, RSA2, RM2, and RVAsVAd in Fig. 5) in the ontologies. The query results are semantic relationships (e.g., equality, kind, composition, antonym, and exclude relationship). The module then compares relationships and concepts with conditions of conflict detection rules (Table 3). If the relationships and concepts fit the conditions of the rule, a conflict is detected. For example, the system analyst John performs add (Act1) for Requirement R1: “the complexity (SAR1) of checkout process (MR1) should be increased (ADR1)”. The existing Requirement R2 is “the complexity (SAR2) of website x (MR2) should be decreased (ADR2). The first step of the conflict detection process is looking up the relationships, including RSA1 between SAR1 and SAR2, RM1 between MR1 and MR2, and RAD between ADR1 and ADR2. In this example, RSA1 is an equality relationship, RM1 is a composition relationship (checkout process is a part of website x), and RAD is an antonym relationship. In Table 2, the conditions of Rule2 are Act1=add, RSA1
                                 =equality or kind, RM1
                                 =equality, kind, or composition, and RAD
                                 =antonym. In the next step, relationships and concepts are compared with the rule conditions. Here, the relationships (RSA1, RM1, and RAD) and concepts (Act1) match the Rule2 conditions in Table 2, which indicate a conflict.

The entity-relationship model (Fig. 10
                        ) depicts the design of the CDNFRE database. The entity-relationship model includes five entities and six relationships. The five entities are action, non-functional requirement, cause-and-effect relationship, ontological concept and rule base. [The action entity stores the data of Act1 and Act2 in NFR evolution metadata (Fig. 5), such as add, use … to replace, and delete. The action entity stores data for Act1 and Act2 in the NFR evolution metadata, e.g., add, use … to replace, and delete (Fig. 5), in the NFR evolution database. The non-functional requirement Entity stores the concept identification numbers, which constitute R1, R2, and R3 based on NFR evolution metadata. The For relationship between the action and non-functional requirement entity in Fig. 10 stores the relationship records between systems analyst and R1 and between R1 and R2 in Fig. 5. The cause-and-effect relationship entity stores concept identification numbers used to fill in cause-and-effect relationship metadata shown in Fig. 6. The Trigger relationship reveals what NFRs trigger what cause-and-effect relationships. The result in relationship indicates what cause-and-effect relationships derive what NFRs.

The ontological concept entity stores terms corresponding to concept identification numbers in the non-functional requirement entity. The relate entity stores semantic relationships among terms. The rule base entity stores the conflict detection rules shown in Table 3.

The feasibility and effectiveness of the CDNFRE system are demonstrated in a case study of an electronic commerce website project. The goal of this project is continuous improvement of an electronic commerce website operated by a television station company. The scenarios which demonstrate the CDNFRE rules are based on the interviews of employees in the electronic commerce project.

The front end of the electronic commerce system has modules for product browsing, checkout process, and customer service. The product browsing module includes navigation tool and product description. The checkout process module includes the registration stage for new customers.

The CDNFRE prototype is implemented in C# language and structured query language (SQL). The CDNFRE prototype is executed on .NET platform and SQL Sever 2005. Relational database management systems have standardized and popular structured query language. Many information technology technicians are familiar with relational database management systems. And relational database management systems are stable for handling several important issues such as deadlock. Although several semantic database management systems exist (e.g. IBM Scalable Ontology Repository, Jena, and RDFSuite), the successful relational database management system which are widely used in industries is chosen in this work. Fig. 11
                      shows a screenshot of the CDNFRE main form.

The following prototype usage scenario demonstrates the CDNFRE system. Fig. 11 shows that existing NFRs (8) and (9) are displayed when the electronic commerce website module is selected. The system analyst uses the Manage Existing Requirement module (in Fig. 14) to manage existing NFR. Existing NFR (8) is “maintainability of product browsing should be high”. Existing NFR (9) is “maintainability of electronic commerce website should be increased to facilitate improvement of systems maintenance productivity”. To update an existing requirement, the systems analyst first clicks the update button to display the update form. Fig. 12
                      is a screenshot of the update form showing that the systems analyst can select concepts to composite a new requirement and to choose an existing requirement that should be replaced. If no concepts are appropriate, the systems analyst can click the edit ontology button (in Fig. 11) to add new concepts and relationships in the ontology editor module (in Fig. 16). Fig. 12 shows the new requirement, “maintainability of product browsing should be low”. The existing requirement replaced by the above new requirement is “maintainability of product browsing should be high”. When the submit button is clicked, the CDNFRE main form in Fig. 11 displays a NFR: “— use (7) to replace (8) —; (7) maintainability of product browsing should be low”. The systems analyst then clicks the generate derived requirement button so that cause-and-effect relationship can be used to determine whether the new requirement generates a derived requirement. Clicking on the edit cause-and-effect relationship button in Fig. 11 displays the cause-and-effect relationship editor form. Fig. 13
                      is a screenshot showing the cause-and-effect relationship: security level of electronic commerce website should be increased –cause–> download speed of electronic commerce website should be decreased. Since no relevant requirements match the cause-and-effect relationship, no derived requirement is generated. Finally, the system analyst clicks the Detect Conflict button (Fig. 11), which executes the Conflict Detector module for automatic conflict detection based on the rules in Table 3 and ontologies. These rules are edited by the Rule Editor module (in Fig. 15). The conflict detection result is “According to Rule 4(b), there is a conflict in Requirements (7), (8), and (9)”.
                     
                     
                  

Based on the electronic commerce website project case study, the following seven scenarios were selected to demonstrate the feasibility and effectiveness of the CDNFRE rules in Table 3: shopping cart drop rate problem, customer convenience and security dilemma, maintainability of product browsing, web designer taste and good customer service image, target market selection, strategy of product return rate, and business goal of trustworthy payment service. The scenarios are described in further detail in Sections 6.1 to 6.7 below.

Because product purchases are limited to members, the design of the existing checkout process module in the website is complicated for new customers. Generally, memberships help the company build long-term relationship with valuable customers. However, the checkout process requires excessive data from new customers. Therefore, the marketing director hypothesized that the high complexity of the checkout process result may explain the high shopping cart drop rate observed in the survey. The solution proposed by the marketing department is to simplify the design of the checkout process module.

The systems analyst models the NFRs in the above scenario by adding a new NFR R1: “complexity of checkout process should be simple to facilitate lowing shopping cart drop rate”. The existing R2 is “complexity of checkout process should be sophisticated”. Table 4
                         summarizes NFR R1 and R2, which trigger Rule1. Table 3 summarizes how Rule1 detects conflicts in value assignment as described in detail below.

A conflict occurs if all of the following are true: Act1 equals Add, RSA1 is an equality or a kind relationship, RM1 is an equality, a kind, or a composition relationship, and RSV is not a kind relationship.

In this scenario, which involves RSA1, RM1, and RSV1 (Fig. 4), the ontolgoies provide semantic information (i.e., antonym, kind, and composition) to determine whether or not a conflict occurs. The RSA1 is an equality relationship between SAR1 and SAR1. The RM1 is an equality relationship between MR1 and MR2 because both MR1 and MR2 are Complexity. The RSV1 is not a kind relationship between SVR1 and SVR2 because simple is an antonym of sophisticated. Under Rule1, a conflict is detected by the CDNFRE tool.

Security issues such as unauthorized use of credit cards and unauthorized intrusion are major problems when operating electronic commerce websites. To improve the security of the electronic commerce website, the vice manager requests the information systems department to use new security features such as Completely Automated Public Turing test to tell Computers and Humans Apart (CAPTCHA), which requires users to read letters or digits on a distorted image and enter the letters or digits correctly to obtain an access permission. However, customer service representatives for the electronic commerce website have reported that many customers have complained about the inconvenient CAPTCHA security mechanism.

Rule2 detects the opposite software attribute adjustment in this scenario, which is summarized in Table 3. The exact wording of Rule2 is as follows.

A conflict occurs if all of the following are true: Act1 equals Add, RSA1 is an equality or a kind relationship, RM1 is an equality, a kind, or a composition relationship, and RSD is an antonym relationship.

In this scenarios, the system analyst adds a new non-functional Requirement R1. The R1 is “security of customer service should deteriorate to facilitate customer convenience”. The existing Requirement R2 is “security of electronic commerce website should be improved”. Table 5
                            summarizes R1 and R2. Fig. 5 shows that RSA1 is a relationship between SAR1 and SAR2, RM1 is a relationship between MR1 and MR2, and RSV is a relationship between SVR1 and SVR2. In this example, RSA1 is an equality relationship because both SAR1 and SAR2 are security level. The RM1 is a composition relationship because customer service (MR2) is a part of electronic commerce website (MR2). The RSV is an antonym relationship because SVR1
                           =improved and SVR2
                           =deteriorated. According to Rule2, a conflict occurs.

Since maintenance to meet business needs is frequently requested, the information systems department must simplify maintenance of the e-commerce website. The marketing department, however, has argued that the product browsing module requires pictures and animations to attract users. The information systems department, however, indicates that product browsing with pictures and animations reduces maintainability.

Rule3 detects these opposing directions in the software attribute adjustment in the above scenario. Table 3 summarizes Rule3(a) and Rule3(b), which are discussed further below.

A conflict occurs if all of the following are true: Act1 equals Use, Act1 equals to replace, RSA1 is an equality relationship, RM1 is an equality relationship, RSV is SVR1
                           >SVR2, RSA2 is an equality or kind relationship, RM2 is an equality, a kind, or a composition relationship, and ADR3 is decreased.

A conflict occurs if all of the following are true: Act1 equals use, Act1 equals to replace, RSA1 is an equality relationship, RM1 is an equality relationship, RSV is SVR1
                           <SVR2, RSA2 is an equality or kind relationship, RM2 is an equality, a kind, or a composition relationship, and ADR3 is increased.

In this case, the system analyst replaces R2 with R1. Table 6
                            shows NFRs R1–R3. The R1 is “maintainability of product browsing should be low”. The existing Requirement R2 is “maintainability of product browsing should be high”. The existing Requirement R3 is “maintainability of electronic commerce website should be increased to facilitate improvement of system maintenance productivity”. This scenario considers RSA1, RM1, RSV, RSA2, and RM2 in Fig. 5. The RSA1 is an equality relationship between SAR1 (maintainability) and SAR2 (maintainability), RM1 is an equality relationship between MR1 (product browsing) and MR2 (product browsing), RSV is a SV R1
                           <SV R1 relationship between SVR1 (low) and SVR2 (high), RSA2 is an equality relationship between SAR2 (maintainability) and SAR3 (maintainability), RM2 is a composition relationship between MR2 (product browsing) and MR3 (electronic commerce website), and ADR3
                           =increased. Replacing R2 with R1 indicates that maintainability should be decreased. However, R3 indicates that maintainability should be increased. Application of Rule3(b) reveals a conflict.

In this scenario, customer service representatives need a new webpage design for the customer service module of the e-commerce website. Their intention is to make a good impression on customers during the post-purchase process. A webpage designer in the information systems department proposes a new webpage design for the customer service module. The background color of the new webpage is dark gray, but the customer service representatives argue that a brighter color would make a more positive impression on customers.

In this scenario, Rule4 detects conflicts in value changes for the software attributes. Table 3 summarizes Rules4 (a–b), which are detailed as follows.

A conflict occurs if all of the following are true: Act1 equals Add, RSA1 is an equality or a kind relationship, RM1 is an equality, a kind, or a composition relationship, SVR1 is not null, and ADR2 is not null.

A conflict occurs if all of the following are true: Act1 equals Add, RSA1 is an equality or a kind relationship, RM1 is an equality, a kind, or a composition relationship, ADR1 is not null, and SVR2 is not null.

The system analyst adds NFR R1. In Table 7
                           , R1 is “color of customer service should be more brightened”, and R2 is “background color of customer service should be dark”. The ontologies indicate that background color (SAR2) is a kind of color (SAR1). Both MR1 and MR2 are customer service. Neither ADR1 nor SVR2 is null. In this example, the new Requirement R1 indicates that the existing Requirement R2 is refutable. According to Rule4 (b), R1 conflicts with R2 in CDNFRE. The systems analyst needs further information to determine the brightness of the color of the customer service module.

The first target market selection scenario is an electronic commerce website for the television station company that initially focuses on products for women, such as cosmetics, care products, and diet food. The website is designed to provide a pleasant shopping experience for women. In the first year, the sales volume of the website targeting women increased dramatically and quickly. However, the sales volume fell in the second year. The vice manager would like to change the target market instead of focusing on women.

Rule5 detects invalid business values and restricts conflict in the first target market selection scenario.

If Act1 equals add, RBVR is an equality, a kind, or a composition relationship, VAsR2/VAsR2 is not null, and SRR1 is rejected, a conflict occurs.

If Act1 equals add, RBVR is an equality, a kind, or a composition relationship, VAsR1/VAsR1 is not null, and SRR2 is rejected, a conflict occurs.


                           Table 8
                            summarizes the requirements in this case. The system analyst adds a new Requirement R1 because the business value of electronic commerce website is maximizing female customer enjoyment is rejected by the vice manager. The R1 is “maximizing female customer enjoyment is rejected”. However, an existing Requirement R2 is “atmosphere of electronic commerce website should be warm and fragrant to facilitate maximizing female customer enjoyment”. In the above example, VAsR2/VAdR2 (atmosphere of electronic commerce website should be warm and fragrant) is not null. Both BV R1 and BV R2 are maximizing female customer enjoyment. The SRR1 is rejected. In this example, the atmosphere supports an invalid business value. According to Rule5 (a), the CNDFRE system detects a contradiction.

After observing the results in the first scenario, the vice manager chooses general customers as the target market for the e-commerce website in the second target market selection scenario. New product categories, such as 3C products, appear on the electronic commerce website. Therefore, the company intends to maximize the enjoyment of general customers. After several months, the electronic commerce website director leaves the company and is replaced by a new director. The new director of the electronic commerce website suggests that the webpage for the 3C product category should be attractive and unique to maximize the enjoyment of male customers. However, further discussion is needed to determine whether this suggestion conflicts with the prior decision.


                           Table 9
                            summarizes how Rule6 detects conflicting business values and incompatible restrictions in the second scenario. Table 3 summarizes Rules 6(a–b), which are detailed as follows.

If Act1 equals Add, RBVR is an antonym or an exclusion relationship, VAsR2/VAsR2 is not null, and SRR1 is supported, a conflict occurs.

If Act1 equals Add, RBVR is an antonym or an exclusion relationship, VAsR1/VAsR1 is not null, and SRR2 is supported, a conflict occurs.

In this case, the systems analyst adds a Requirement R1: atmosphere of electronic commerce website should be attractive and unique to facilitate maximizing male customer enjoyment. The vice manager has declared that “maximizing customer enjoyment is supported” (R2). In this example, VAsR2/VAdR2 (atmosphere of electronic commerce website should be cool and vivid) is not null. Maximizing male customer enjoyment (BVR1) and maximizing general customer enjoyment (BVR2) cannot be achieved simultaneously because the ontologies indicate that RBVR between BVR1 and BVR2 is an exclusive relationship. Additionally, SR R2
                           =supported. According to Rule6 (b), a conflict between business value and restriction incompatibility occurs.

The ex-director of the electronic commerce website resolves to reduce the product return rate because a high product return rate increases operation costs of processing returned products. Customers cannot return products conveniently on the website. The new director has a different perspective about product return rate and argues that reducing the product return rate is inappropriate and may result in unpleasant post-purchase shopping experiences.

Rule7 is used to detect conflict in this scenario. Rule7 is summarized in Table 3 and detailed as follows.

A conflict occurs if all of the following are true: Act1 equals add; RBVR is an equality, a kind, or a composition relationship; and RSR is an antonym relationship.


                           Table 10
                            summarizes the above scenario regarding the absence of a consensus on business value and restriction conflict. The R2 indicates that “decreasing product return rate is supported by director of electronic commerce website”. The system analyst adds a new Requirement R1: decreasing product return rate is rejected by director of electronic commerce website. In this example, RBVR is an equality relationship, and RSR is an antonym relationship. The CDNFRE tool detects a conflict based on Rule7.

Budget constraints require the information systems department to adopt a new payment gateway solution in the checkout process module. The reliability of the new payment gateway solution is unconfirmed since it has only been released several weeks earlier, and few companies have adopted it. However, the company promises that providing trustworthy payment service is an important mission of the electronic commerce website.

Rule8 controls the deletion action in this scenario. Rule8 is summarized in Table 3 and detailed as follows.

A conflict occurs if all of the following are true: Act1 equals Delete; RBVR is an equality, a kind, or a composition relationship; VAsR1/VAsR1 is not null, and SRR2 is supported.


                           Table 11
                            summarizes the above scenario of a conflict resulting from cancellation of a business value supported by the information system department. In this scenario, the system analyst deletes R1, which is “reliability of checkout process should be extreme high to facilitate providing trustworthy payment service”. The management level committee decided that “providing trustworthy payment service” should be recorded in R2. The VAsR1/VAdR1 (reliability of checkout process should be extreme high) is not null. The BVR1 is equal to BVR2. Finally, SRR2 is supported. Under these conditions, a conflict occurs according to Rule8.

To collect feedback of the CDNFRE users, a marketing division in a television station company which develops commercial websites was invited to conduct a survey. The questionnaire was developed according to the requirement engineering work [36]. There are ten items as shown in Table 12
                     . Three experts were invited to review the questionnaire for ensuring its content validity.

Employees of the marketing division and its allied companies were invited to join this survey. The CDNFRE prototype, the document which introduces how to use the prototype, and the questionnaire were provided to the respondents. After two weeks, 37 respondents fill out the questionnaire.


                     Table 12 shows the questionnaire results. In reliability analysis, the Cronbach's alpha is 0.913 which indicates that these items have acceptable reliability. In Table 12, one sample t-test analysis shows that the mean of each item is significantly greater than the middle value 3. Therefore the respondents satisfy the CDNFRE prototype in general.

Counting the percentages of respondents answering the value 4 (i.e. satisfy) and 5 (i.e. strongly satisfy) for each item, the satisfaction rates are listed in Table 12. Over 89% respondents agreed that the CDNFRE system can avoid design faults to reduce wasted costs (Item 3) and avoid information overload which causes forgetting requirements (Item 8). Over 80% respondents agreed that the CDNFRE system can alleviate resistance and dispute in systems development (Item 4), facilitate discussions for inconsistencies (Item 5), and facilitate new employee education for requirement management (Item 9). Over 70% respondents agreed that the CDNFRE system can fulfill with user needs (Item 1), fulfill with business values (Item 2), accepting the data input efforts in the CDNFRE system (item 6), and facilitate job handover in requirement management (Item 7). And 58.3% respondents agreed that using the CDNFRE system can completely represent requirements (Item 10).

@&#DISCUSSION@&#

To evaluate the CDNFRE system, several issues must be addressed, including completeness of NFR metadata, cost and benefit of the CDNFRE system, and rule completeness. These issues are discussed as follows.
                        
                           1.
                           Metadata completeness: The proposed NFR metadata (Figs. 5–6) are based on the existing literature summarized in Table 2. Table 2 indicates that seven components are considered in the existing eight works: software attribute, specific value of attribute, adjustment of attribute, module, rationale, evaluation, and cause and effect. The proposed NFR metadata are used to analyze several real-world scenarios in the Prototype and case study section. These scenario analyses confirm the feasibility of the proposed metadata for modeling NFRs. In the empirical evidences about metadata completeness, over half respondents agreed that the metadata is complete enough to represent their requirements. A respondent suggested that she will give a higher score on the requirement representation completeness if the tool also considers functional requirements.

Cost and benefit of the proposed ontological approach:
                                 
                                    a.
                                    Shared cost of ontology maintenance: Although about 70% of respondents agreed that the ontological data input efforts in the tool is acceptable, decreasing ontology maintenance costs is still an interesting issue. Organizational ontologies can be reused for various purposes, such as supporting information systems planning and integration [34], online customer service collaboration [35], use cases diagram analysis in Unified Modeling Language [24], activity diagram in Unified Modeling Language [21], and access control of confidential data [23]. Expanded use of ontologies in an organization enables apportionment of their maintenance costs.

Benefits for handling NFR information overload: Numerous non-functional requirements cause information overload. Over 89% of respondents agreed that the tool can help themselves to avoid information overload which causes forgetting requirements. Besides, the automatic conflict detection mechanism in the CDNFRE system helps the systems analysts to discover conflicts that are hidden by numerous NFRs. In this issue, over 80% of respondents agreed that the tool can facilitate discussions for inconsistencies.

Benefits of retaining NFR organizational memory: Frequent staff turnover causes the loss of implicit knowledge stored in organizational memory. Ontologies and formal requirements must be documented so that implicit organizational memory can be converted to explicit organizational memory. The empirical evidences about retaining organizational memory indicates that over 70% respondents agreed that the tool facilitates job handover and over 80% respondents agreed that the tool facilitates new employee education. Therefore, the CDNFRE system can help companies to retain their important organizational memory of NFRs.

Rule completeness: the Prototype and case study section demonstrates the applicability of the proposed rules in various situations. Expert opinions were considered to ensure the rule completeness. In general, the respondents revealed that the conflict detection rules are effective enough in several ways, such as avoiding design faults to reduce wasted costs (over 89% respondents agreed), facilitating discussions for inconsistencies (over 80% respondents agreed), and alleviating resistance and dispute (over 80% respondents agreed). Although this work proposes that conflict detection rules should be as complete as possible, ensuring the absolute completeness of the proposed rule is extremely difficult. The problem is analogous to a law that is expected to be refined over time. In the proposed database design (Fig. 10), the rule base is extensible and can store new rules as needed.

@&#CONCLUSION@&#

The CDNFRE tool proposed in this work automatically detects conflicts during the evolution of NFRs. By using the CDNFRE tool, the systems analyst can gradually add, modify, and delete NFRs. By using this tool, the system analyst can generate derived requirements and detect conflicting NFRs based on the semantic relationships in ontologies.

This work introduced the CDNFRE system architecture, derived requirement generation and conflict detection flowcharts, a database design, and conflict detection rules. The advantage of the CDNFRE tool is that both ontologies and rules can be modified. New concepts and relationships can be added to the ontologies of the CDNFRE tool as needed. As new rules are discovered, they are added to the CDNFRE database. Although the e-commerce case study and the preliminary user feedback in this work confirmed the effectiveness of an implementation of the CDNFRE prototype and the proposed rules, the CDNFRE tool needs further studies to confirm its effectiveness in more complex scenarios and to collect more user feedback. Further studies are also needed to develop additional conflict detection rules for NFRs. To make the proposed ontology more consensual and standardized, a committee for managing an organizational ontology is necessary in a company level. And an institute which is responsible for managing an industrial ontology may be necessary in an industry level.

@&#REFERENCES@&#

