@&#MAIN-TITLE@&#Adaptive symbiotic organisms search (SOS) algorithm for structural design optimization

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Correlation between organisms, optimization and engineering.


                        
                        
                           
                           Adaptive symbiotic organisms search (SOS) algorithm is proposed.


                        
                        
                           
                           Implementation on structural design problems.


                        
                        
                           
                           Effective over other methods.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Truss optimization

Shape and size optimization

Symbiotic organisms search (SOS)

Metaheuristic

@&#ABSTRACT@&#


               
               
                  The symbiotic organisms search (SOS) algorithm is an effective metaheuristic developed in 2014, which mimics the symbiotic relationship among the living beings, such as mutualism, commensalism, and parasitism, to survive in the ecosystem. In this study, three modified versions of the SOS algorithm are proposed by introducing adaptive benefit factors in the basic SOS algorithm to improve its efficiency. The basic SOS algorithm only considers benefit factors, whereas the proposed variants of the SOS algorithm, consider effective combinations of adaptive benefit factors and benefit factors to study their competence to lay down a good balance between exploration and exploitation of the search space. The proposed algorithms are tested to suit its applications to the engineering structures subjected to dynamic excitation, which may lead to undesirable vibrations. Structure optimization problems become more challenging if the shape and size variables are taken into account along with the frequency. To check the feasibility and effectiveness of the proposed algorithms, six different planar and space trusses are subjected to experimental analysis. The results obtained using the proposed methods are compared with those obtained using other optimization methods well established in the literature. The results reveal that the adaptive SOS algorithm is more reliable and efficient than the basic SOS algorithm and other state-of-the-art algorithms.
               
            

@&#INTRODUCTION@&#

The design optimization of an engineering structure subjected to dynamic behavior is a challenging area of study that has been an active research area for many years. Thus, structural optimization with frequency constraints has been getting significant attention in the past decades. The fundamental natural frequencies of an engineering structure are extremely useful parameters to improve the dynamic behavior of the structure [25,34]. Therefore, some appropriate limits on the natural frequencies of the structure can help to avoid resonance with the external excitations [21]. In addition, engineering structures should be as light as possible, so as to make them cost effective [15,31,45]. On the other hand, weight reduction conflicts with the frequency constraints and induces difficulty in the structural optimization [44,47]. Therefore, an efficient optimization method is required to design the trusses subjected to fundamental frequency constraints and continuous efforts are put by the researchers in this direction.

Structural optimization can be broadly classified into two categories: discrete structural optimization and continuum structural optimization. Discrete structural optimization is also known as truss optimization and having connectivity of finite dimension parameters as variables (naturally discrete parameter system) and continuum structural optimization have field as a variable (discretized parameter system) [1,28,3,46,48]. The optimization of truss structure can be classified into three categories: size optimization, shape optimization, and topology optimization. Size optimization works to find the optimal element cross-sectional areas, whereas shape optimization works to find the optimal nodal positions of definite joints of the truss structure. The effect of shape and size variables on both the objective function as well as the related frequency constraints is fairly unlike [9]. Therefore, simultaneous shape and size optimization with multiple natural frequency constraints adds further complexity and often leads to divergence. Several researchers have employed various methods towards this end, yet this field has not been completely addressed so far. Bellagamba and Yang [4] introduced structural optimization with frequency constraints and later several researchers have been investigating further into this topic. Lin et al. [27] used a bi-factor algorithm based on the Kuhn-Tucker criteria. Grandhi and Venkayya [14] and Grandhi and Venkayya [39] tested optimality criterion (OC) based on the differentiation of the Lagrangian function. Wei et al. [40] introduced niche genetic hybrid algorithm (NGHA) by hybridizing the simplex search method and genetic algorithm (GA). Particle swarm optimization (PSO) was tested by Gomes [13]. Kaveh and Zolghadr [21] used charged system search (CSS) and enhanced CSS. Wei et al. [41] used parallel GA. Kaveh and Zolghadr [23] addressed hybridized CSS and big bang-big crunch (CSS-BBBC) with trap recognition capability. Miguel and Miguel [29] tested harmony search (HS) and firefly algorithm (FA). Kaveh and Zolghadr [19] utilized democratic PSO (DPSO). Kaveh and Zolghadr [20] compared the performance of nine metaheuristics. Pholdee and Bureerat [34] tested the comparative performance of 24 metaheuristics. Zuo et al. [49] applied hybrid OC-GA. Khatibinia and Naseralavi [24] presented orthogonal multi-gravitational search algorithm. Kaveh and Mahdavi [17] introduced colliding-bodies optimization (CBO). On the other hand, structural optimization with simultaneous static and dynamic constraints has been investigated by very few researchers [16,22,30,42].

Cheng and Prayogo [7] proposed a very promising metaheuristic algorithm, called the symbiotic organisms search (SOS) algorithm that is based on cooperating behavior among organisms in the nature. The SOS algorithm mimics symbiotic communication strategies that organisms use to stay alive in the ecosystem. The SOS algorithm is a population-based algorithm, where the organism of the ecosystem is considered as a population. The SOS algorithm prerequisites only common governing parameters such as population size and maximum number of function evaluations for its operation unlike the GA [49] requires mutation, crossover, selection rate, etc., the PSO [19] algorithm needs inertia weight, social, and cognitive parameters, and the HS [29] algorithm requires harmony memory rate, pitch adjusting rate, and improvisation rate [6]. However, the SOS algorithm does not require algorithm-specific controlling parameters, which makes the algorithm robust and generalize.

The SOS algorithm has been examined for constrained and unconstrained benchmark engineering problems and has proved to be a superior performer with other metaheuristics [6,7]. Cheng et al. [6] proposed the discrete SOS algorithm to optimize multiple-resources levelling problems. Capability of the SOS algorithm in the field of structural optimization is still under research; however, Cheng and Prayogo [7] have investigated the SOS algorithm for some structural optimization problems. The SOS algorithm works on three phases viz. the mutualism phase, the commensalism phase, and the parasitism phase. In the basic SOS algorithm, the benefit factor is decided through a heuristic step and it can be either one or two, which means that the organism gets partial or complete benefits from the interaction. However, in real practice, the organism may get benefits in any proportion. Moreover, Patel and Savsani [32,33] proposed a multi-objective improved teaching–learning based optimization (TLBO) algorithm with the use of adaptive control mechanism (viz. adaptive teaching factor) in order to enhance its capability. Automatically driven teaching factors has been improved the performance of the various algorithms in order to set a good balance between exploration and exploitation of the search space and to enhance the diversity of the population [10,2,26,32,33,35,36,38,43]. Therefore, the benefit factors (AB1 and AB2) of the SOS algorithm are improved to adaptive benefit factors (ABF1 and ABF2), which automatically tunes the value. This paper intends to investigate a good balance between exploration and exploitation of the search space. Therefore, we proposed three new versions of the basic SOS algorithm by considering all possible combinations of BF1, BF2, ABF1, and ABF2 in the basic SOS algorithm. It is also observed from the literature that the SOS algorithm has not been investigated for structural optimization with frequency constraints so far. These motives encouraged us to propose adaptability in the basic SOS algorithm and to investigate its effect on structural optimization problems.

The SOS algorithm, proposed by Cheng and Prayogo [7], is a simple and powerful metaheuristic algorithm. The SOS algorithm works on the cooperative behavior seen among organisms in nature. Some organisms do not live alone because they are interdependent on other species for survival and food. The interdependency between two discrete species is known as symbiotic. In this context, mutualism, commensalism, and parasitism are the most common symbiotic relations found in the nature. Interdependency between two different species that results in mutual benefit is called mutualism. A relationship between two different species that offers benefits to only one of them (without the affecting other) is called commensalism. Finally, a relationship between two different species that offers benefits to one and cause harm to the other is called parasitism.

The SOS algorithm initiates with a randomly generated population, where the system has ‘n’ number of organisms (i.e. population size) in the ecosystem. In the next stage, the population is updated in each generation ‘g’ by ‘the mutualism phase’, ‘the commensalism phase’, and ‘the parasitism phase’ respectively. Moreover, the updated solution in the each phase is accepted only if it has a better functional value. The course of optimization is repeated until it satisfies the termination criterion. In this optimization method, the better solution can be achieved by the symbiotic relations between the current solution and either of other random solution and the best solution from the population.

The detailed description of all three phases and modification of the SOS algorithm is explained in the subsequent sections:

A relationship between two organisms of different species results into individual benefits of the symbiotic interaction is called mutualism. The symbiotic interaction between the bee and the flower is a classic example of this phenomenon. Bees fly from one flower to another and collect nectar that is produced into honey. This activity also benefits to result in the formation of seeds as the bee acts as the vehicle by transferring pollen for the plant. In this way, this symbiotic association benefits both individuals from the exchange. Therefore, this relationship is called a mutually beneficial symbiotic [7].

In this phase, the design vector (X
                        
                           i
                        ) of the organism ‘i’ (i.e. population) interacts with another design vector (X
                        
                           k
                        ) of a randomly selected organism ‘k’ of the ecosystem (where k ≠ i). The interaction between these organisms results in a mutualistic relationship, which improves individual functional values of the organisms in the ecosystem. Therefore, new organisms are governed by a Mutual Vector (MV) and Benefit Factors (BF1 and BF2). The mutual vector (the average of two organisms) signifies the mutual connection between organisms ‘X
                        
                           i
                        ’ and ‘X
                        
                           k
                        ’ (Eq. (3)). The benefit factors are decided by a heuristic step and so it is decided randomly with equal probability, either 1 or 2 ((Eqs. (4) and 5)). Therefore the benefit factors signify two conditions where organisms ‘X
                        
                           i
                        ’ and ‘X
                        
                           k
                        ’ benefit partially or fully from the interaction respectively. The organism with the best functional value is considered as the best organism (X
                        
                           best
                        ) of the ecosystem. In this phase, organisms ‘X
                        
                           i
                        
                        ’ and ‘X
                        
                           k
                        ’ also interact with the best organism. Therefore, this phase keeps a good balance between exploration and exploitation of the search space. The organism is updated only if its new functional value 
                           
                              (
                              
                                 
                                    F
                                 
                                 
                                    (
                                    
                                       
                                          
                                             X
                                          
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                    
                                    )
                                 
                                 
                                    or
                                 
                                 
                                    F
                                 
                                 
                                    (
                                    
                                       
                                          
                                             X
                                          
                                          
                                             k
                                          
                                          
                                             ′
                                          
                                       
                                    
                                    )
                                 
                              
                              )
                           
                         is better than existing. The mathematical formulations of the new solutions are given in (Eqs. (1) and 2).
                           
                              (1)
                              
                                 
                                    
                                       
                                          X
                                       
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          X
                                       
                                       
                                          i
                                       
                                    
                                    
                                       +
                                    
                                    
                                       rand
                                    
                                    
                                       *
                                    
                                    
                                       (
                                       
                                          
                                             
                                                X
                                             
                                             
                                                best
                                             
                                          
                                          
                                             −
                                          
                                          
                                             MV
                                          
                                          
                                             *
                                          
                                          
                                             
                                                BF
                                             
                                             
                                                1
                                             
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    
                                       
                                          X
                                       
                                       
                                          k
                                       
                                       
                                          ′
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          X
                                       
                                       
                                          k
                                       
                                    
                                    
                                       +
                                    
                                    
                                       rand
                                    
                                    
                                       *
                                    
                                    
                                       (
                                       
                                          
                                             
                                                X
                                             
                                             
                                                best
                                             
                                          
                                          
                                             −
                                          
                                          
                                             MV
                                          
                                          
                                             *
                                          
                                          
                                             
                                                BF
                                             
                                             
                                                2
                                             
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    MV
                                 
                                 
                                    =
                                 
                                 
                                    
                                       
                                          
                                             X
                                          
                                          
                                             i
                                          
                                       
                                       
                                          +
                                       
                                       
                                          
                                             X
                                          
                                          
                                             k
                                          
                                       
                                    
                                    
                                       
                                          2
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    B
                                    
                                       
                                          F
                                       
                                       
                                          1
                                       
                                    
                                    =
                                    1
                                    +
                                    r
                                    o
                                    u
                                    n
                                    d
                                    
                                    
                                       [
                                       
                                          r
                                          a
                                          n
                                          d
                                       
                                       ]
                                    
                                 
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    B
                                    
                                       
                                          F
                                       
                                       
                                          2
                                       
                                    
                                    =
                                    1
                                    +
                                    r
                                    o
                                    u
                                    n
                                    d
                                    
                                    
                                       [
                                       
                                          r
                                          a
                                          n
                                          d
                                       
                                       ]
                                    
                                 
                              
                           
                        where, 
                           
                              i
                              =
                              1,2
                              ,
                              …
                              ,
                              n;
                           
                         
                        k is a randomly selected population; 
                           
                              k
                              ≠
                              i; k
                              ∈
                           
                           
                              (
                              
                                 1,2
                                 ,
                                 …
                                 ,
                                 n
                              
                              )
                           
                           
                              ;
                           
                         
                        rand is a random number; 
                           
                              rand
                           
                           
                              ∈
                           
                           
                              [
                              
                                 0,1
                              
                              ]
                           
                        .

When a relationship established by an organism with another organism of a different species results into benefits for this organism while having no influence on the other organism, such symbiotic interaction is called commensalism. The commensalism relationship between the remora fish and sharks is a classic example of this phenomenon [7]. The remora fish rides shark to get food or other benefits. On the other hand, the shark is neither damaging nor benefiting from the remora fish.

In this phase, the design vector (X
                        
                           i
                        ) of the organism ‘i’ (i.e. population) interacts with another design vector (X
                        
                           k
                        ) of a randomly selected organism ‘k’ of the ecosystem (where k ≠ i). The interaction between these organisms results in a commensalism relationship, which improves the functional value of the organism ‘i’. However, the organism ‘k’ has neither benefits nor loss from the relationship. Moreover, the organism ‘X
                        
                           i
                        ’ also interacts with the best organism of the ecosystem. The organism is updated only if its new functional value, 
                           
                              
                                 F
                              
                              
                                 (
                                 
                                    
                                       
                                          X
                                       
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 )
                              
                           
                         is fitter than existing. Therefore, this phase keeps a good exploitation promising region near the best organism of the search space and works to improve convergence speed of the algorithm. The mathematical formulation of the new population is given in Eq. (6).
                           
                              (6)
                              
                                 
                                    
                                       
                                          X
                                       
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          X
                                       
                                       
                                          i
                                       
                                    
                                    
                                       +
                                    
                                    
                                       rand
                                    
                                    
                                       (
                                       −
                                    
                                    
                                       1
                                       ,
                                       1
                                       )
                                    
                                    
                                       *
                                       (
                                    
                                    
                                       
                                          X
                                       
                                       
                                          best
                                       
                                    
                                    
                                       −
                                    
                                    
                                       
                                          X
                                       
                                       
                                          k
                                       
                                    
                                    
                                       )
                                    
                                 
                              
                           
                        where, 
                           
                              i
                              =
                              1,2
                              ,
                              …
                              ,
                              n;
                           
                         
                        k is a randomly selected population; 
                           
                              k
                              ≠
                              i; k
                              ∈
                           
                           
                              (
                              
                                 1,2
                                 ,
                                 …
                                 ,
                                 n
                              
                              )
                           
                           
                              ;
                           
                         
                        rand is a random number in the range [−1, 1].

A relationship established by an organism with another organism of a different species either benefits or harms the other organism, such symbiotic phenomenon is called parasitism. The symbiotic interaction between the plasmodium parasite and the anopheles mosquito is an example of this phenomenon. The anopheles mosquito passes the plasmodium parasite between human hosts. The parasite thrives and breeds inside the human body; as a result the human host suffers disease. If the human host is fit capable of fighting the parasite, he/she will develop immunity against the parasite and the parasite will no longer be able to live in that ecosystem; otherwise the human host may die. In this way, this symbiotic association benefits or harms other organism from the exchange [7].

In this phase, the design vector (X
                        
                           i
                        ) of the organism ‘i’ (i.e. population) is assumed to be the anopheles mosquito. The anopheles mosquito produces an artificial parasite called Parasite_Vector. Parasite vector is produced by changing values of some randomly selected design variables of the organism ‘X
                        i’, the randomly selected design variables are modified using a random generated number within its bounds. Therefore, parasite vector is a fusion of design variables of the organism ‘i’ and randomly generated design variables. The design vector (X
                        
                           k
                        ) of a randomly selected organism ‘k’ of the ecosystem (where k ≠ i) works as a human host to the parasite vector. The interaction between these organisms results in a parasitism relationship. If the parasite vector has a better functional value than functional value of organism ‘k’, the parasite will kill organism ‘k’ and acquire its position in the ecosystem. If the functional value of organism ‘k’ is better, organism ‘i’ will have immunity from the parasite and the parasite will die. Therefore, the parasitism phase improves the exploration and exploitation of the search space as parasite vector is generated by a fusion of host design variables and randomly generated variables. The highly random nature of the phase allows search to jump into non-visited regions to escape premature convergence, and also permits local search of visited regions to improve convergence rate.

Tollo et al. [38] studied how adaptive control efficiently sets a good balance between exploration and exploitation in a metaheuristic. Authors have stated based on experimental study that adaptive strategies are better than fixed search mechanisms, in terms of solution quality and operators controlling. In this aspect, many studies have been proposed by employing various adaptive control strategies on various metaheuristics, yet this field is not totally explored. Likewise; Piotrowski [35] proposed an adaptive memetic differential evolution by using the concept of global and local mutation operators. Shan et al. [36] presented artificial bee colony algorithm to improve the performance for numerical optimization problems. Li and Yin [26] carried out a modified cuckoo search algorithm by introducing an adaptive parameter setting to enhance the diversity of the population. Baykasoğlu and Ozsoydan [2] proposed an adaptive FA with adaptive move mechanisms as well as self-adaptive parameters for mechanical design optimization problems. Yi et al. [43] used an adaptive differential evolution algorithm based on fitness function value. Many studies to develop adaptive algorithms for multi-objective optimization are also addressed in the literature. Bingul [5] carried out an adaptive GA with dynamic fitness function for multi-objective problems. Patel and Savsani [32,33] successfully employed a multi-objective improved TLBO algorithm by incorporating adaptive teaching factor. Dai et al. [10] used the self-adaptive parameter setting based on variation of harmony memory variance for harmony memory considering rate and pitch adjusting rate in multi-objective HS algorithm. Different applications of adaptive control have proven their capabilities in single and multi-objective problems in order to improve the convergence, search ability, and the appropriate balance between exploration and exploitation. On the other hand, the SOS algorithm is a recently developed algorithm and it is always interesting to investigate different modification that can improve the performance of the algorithm. Moreover, it is virtually not possible to forecast the influence of the adaptive operators for different real life applications [38]. These proficiencies and prospects encouraged us to formulate an adaptive SOS algorithm and to investigate its effect on challenging structural optimization problems.

In the mutualism phase, the benefit factors decide the effect of the mutual vector. In the basic SOS algorithm, the decision of the benefit factors is a heuristic step and it can be either 1 or 2. This practice corresponds to the situation where organisms ‘X
                        
                           i
                        ’ and ‘X
                        
                           k
                        ’ benefit partially or fully from the mutual vector. Thus, during the course of optimization the organisms update only with these two possibilities. Lower value of benefit factor allows fine search in small steps, but causes slow convergence and larger value of benefit factor speeds up the search. Moreover, in an actual mutualism phenomenon these benefit factors may not always at its end state but varies in between also. Patel and Savsani [32,33] used adaptive teaching factor, which varies automatically during the search depending upon the result of the learner (i.e. population) and the teacher (i.e. best population). The authors had concluded that automatic tuning of teaching factor improved the performance of the TLBO algorithm in order to speed up the search procedures. Considering this fact the benefit factors (BF1 and BF2) are modified to adaptive benefit factors (ABF1 and ABF2) to balance exploration and exploitation in an effective manner as defined by (Eqs. (7) and 8).
                           
                              (7)
                              
                                 
                                    
                                       
                                          ABF
                                       
                                       
                                          1
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          
                                             F
                                          
                                          
                                             (
                                             
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                             )
                                          
                                       
                                       
                                          
                                             F
                                          
                                          
                                             (
                                             
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      best
                                                   
                                                
                                             
                                             )
                                          
                                       
                                    
                                    
                                       if
                                    
                                    
                                       F
                                    
                                    
                                       (
                                       
                                          
                                             
                                                X
                                             
                                             
                                                best
                                             
                                          
                                       
                                       )
                                    
                                    
                                       ≠
                                    
                                    
                                       0
                                    
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       
                                          ABF
                                       
                                       
                                          2
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          
                                             F
                                          
                                          
                                             (
                                             
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      k
                                                   
                                                
                                             
                                             )
                                          
                                       
                                       
                                          
                                             F
                                          
                                          
                                             (
                                             
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      best
                                                   
                                                
                                             
                                             )
                                          
                                       
                                    
                                    
                                       if
                                    
                                    
                                       F
                                    
                                    
                                       (
                                       
                                          
                                             
                                                X
                                             
                                             
                                                best
                                             
                                          
                                       
                                       )
                                    
                                    
                                       ≠
                                    
                                    
                                       0
                                    
                                 
                              
                           
                        
                     

Therefore, the value of the design variables may change to a small extent or to a significant extent as they are governed by various factors. The large and small changes in the design variables represent the exploration and exploitation of a search space respectively. The ABF1 or ABF2 allows making exploration capability stronger, when an organism (‘k’ or ‘i’) is far from the best organism, whereas the ABF1 or ABF2 sets a good exploitation capability, when an organism (‘k’ or ‘i’) is near to the best organism. On the other hand, pure exploration reduces the precision of the algorithm, whereas pure exploitation moves the algorithm to a local optimal solution. Therefore, the ability of an algorithm to find a global optimal solution depends on its ability to find a good balance between the exploitation and the exploration of the search space.

In order to investigate the effect of various benefit factors (i.e. BF1, BF2, ABF1, and ABF2) and find a good balance between exploration and exploitation of search space, different variants of the SOS algorithm are formulated by combining different benefit factors as follows:
                           
                              (1)
                              The SOS algorithm by incorporating ABF1 and BF2 called a SOS-ABF1 algorithm

The SOS algorithm by incorporating BF1 and ABF2 called a SOS-ABF2 algorithm and

The SOS algorithm by incorporating ABF1 and ABF2 called a SOS-ABF1&2 algorithm.

Therefore, the variants of the SOS algorithm aim to effectively combine the robust and global search features of adaptive benefit factors and benefit factors.

The proposed algorithms work in three phases such as ‘the mutualism phase’, ‘the commensalism phase’, and ‘the parasitism phase’. In addition, each phase is governed by a number of generations and various factors. Schematic diagram of the SOS algorithm and its variants is shown in 
                        Fig. 1. The figure signifies various stages of the proposed algorithms like initialization, mutualism phase, commensalism phase, parasitism phase, and termination criteria. Detailed steps of the SOS algorithm and its variants are explained in Appendix A.

The subsequent sections investigate the efficiency of the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms with respect to the structural optimization problems.

The aim of the structural optimization problem is to minimize the truss weight by finding the optimal nodal positions and optimal elemental cross-sectional areas such that it satisfies multiple natural frequency constraints. Therefore, the objective function is formulated for the structural weight by neglecting the weight of lumped masses, whereas the nodal coordinates and the element cross-sectional areas are the design variables. The mathematical formulation corresponding to the problem considered in this work is as follows:
                        
                           (9)
                           
                              
                                 Find
                                 ,
                              
                              
                                 X
                              
                              
                                 =
                              
                              
                                 {
                                 
                                    
                                       A
                                    
                                    
                                       ,
                                    
                                    
                                       N
                                    
                                 
                                 }
                              
                              
                                 ,
                              
                              
                                 where
                              
                              
                              
                                 A
                              
                              
                                 =
                              
                              
                                 {
                                 
                                    
                                       
                                          A
                                       
                                       
                                          1
                                       
                                    
                                    
                                       ,
                                    
                                    
                                       
                                          A
                                       
                                       
                                          2
                                       
                                    
                                    
                                       ,
                                    
                                    
                                       …
                                       ,
                                    
                                    
                                       
                                          A
                                       
                                       
                                          m
                                       
                                    
                                 
                                 }
                              
                              
                              
                                 and
                              
                              
                              
                                 N
                              
                              
                                 =
                              
                              
                                 {
                                 
                                    
                                       
                                          N
                                       
                                       
                                          1
                                       
                                    
                                    
                                       ,
                                    
                                    
                                       
                                          N
                                       
                                       
                                          2
                                       
                                    
                                    
                                       ,
                                    
                                    
                                       …
                                       ,
                                    
                                    
                                       
                                          N
                                       
                                       
                                          n
                                       
                                    
                                 
                                 }
                              
                           
                        
                     
                  


                     
                        
                           to
                        
                        
                        
                           minimize
                        
                        
                           ,
                        
                        
                           Weig
                        
                        
                           h
                        
                        
                           t
                        
                        
                        
                           of
                        
                        
                        
                           truss
                        
                        
                           ,
                        
                        
                           F
                        
                        
                           (
                           
                              X
                           
                           )
                        
                        
                           =
                        
                        
                           ∑
                           
                              
                                 i
                              
                              
                                 =
                                 1
                              
                           
                           
                              m
                           
                        
                        
                           
                              
                                 A
                              
                              
                                 i
                              
                           
                           
                              
                                 ρ
                              
                              
                                 i
                              
                           
                           
                              
                                 L
                              
                              
                                 i
                              
                           
                        
                     
                  


                     
                        
                           Subjected
                        
                        
                        
                           to
                        
                        
                           :
                        
                     
                     
                        
                           
                              
                                 
                                    
                                       
                                          g
                                       
                                       
                                          1
                                       
                                    
                                    
                                       (
                                       
                                          X
                                       
                                       )
                                    
                                    
                                       :
                                    
                                    
                                       
                                          f
                                       
                                       
                                          q
                                       
                                    
                                    
                                       −
                                    
                                    
                                       
                                          f
                                       
                                       
                                          q
                                       
                                       
                                          min
                                       
                                    
                                    
                                       ≥
                                    
                                    
                                       0
                                    
                                 
                              
                           


                              
                                 
                                    
                                       
                                          g
                                       
                                       
                                          2
                                       
                                    
                                    
                                       (
                                       
                                          X
                                       
                                       )
                                    
                                    
                                       :
                                    
                                    
                                       
                                          f
                                       
                                       
                                          r
                                       
                                    
                                    
                                       −
                                    
                                    
                                       
                                          f
                                       
                                       
                                          r
                                       
                                       
                                          max
                                       
                                    
                                    
                                       ≤
                                    
                                    
                                       0
                                    
                                 
                              
                           


                              
                                 
                                    
                                       
                                          g
                                       
                                       
                                          3
                                       
                                    
                                    
                                       (
                                       
                                          X
                                       
                                       )
                                    
                                    
                                       :
                                    
                                    
                                       
                                          A
                                       
                                       
                                          i
                                       
                                       
                                          min
                                       
                                    
                                    
                                       ≤
                                    
                                    
                                       
                                          A
                                       
                                       
                                          i
                                       
                                    
                                    
                                       ≤
                                    
                                    
                                       
                                          A
                                       
                                       
                                          i
                                       
                                       
                                          max
                                       
                                    
                                 
                              
                           


                              
                                 
                                    
                                       
                                          g
                                       
                                       
                                          4
                                       
                                    
                                    
                                       (
                                       
                                          X
                                       
                                       )
                                    
                                    
                                       :
                                    
                                    
                                       
                                          N
                                       
                                       
                                          j
                                       
                                       
                                          min
                                       
                                    
                                    
                                       ≤
                                    
                                    
                                       
                                          N
                                       
                                       
                                          j
                                       
                                    
                                    
                                       ≤
                                    
                                    
                                       
                                          N
                                       
                                       
                                          j
                                       
                                       
                                          max
                                       
                                    
                                 
                              
                           


                              
                                 
                                    where
                                 
                                 
                                    ,
                                 
                                 
                                    i
                                 
                                 
                                    =
                                    1,2
                                    ,
                                 
                                 
                                    …
                                 
                                 
                                    ,
                                 
                                 
                                    m
                                 
                                 
                                    ;
                                 
                                 
                                    j
                                 
                                 
                                    =
                                    1,2
                                    ,
                                 
                                 
                                    …
                                 
                                 
                                    ,
                                 
                                 
                                    n
                                 
                              
                           

The penalty function approach is incorporated to handle the frequency constraints. There is no penalty for no violation of the constraints; otherwise, the penalty is considered as follows [22].
                        
                           (10)
                           
                              
                                 
                                    Penalized
                                 
                                 
                                    
                                    F
                                 
                                 
                                    (
                                    
                                       X
                                    
                                    )
                                 
                                 
                                    =
                                 
                                 
                                    {
                                    
                                       
                                          
                                             
                                                
                                                   F
                                                
                                                
                                                   (
                                                   
                                                      X
                                                   
                                                   )
                                                
                                                
                                                   ,
                                                
                                                
                                                   
                                                      if
                                                   
                                                   
                                                
                                                
                                                   no
                                                
                                                
                                                   
                                                   
                                                      violati
                                                   
                                                
                                                
                                                   
                                                      on
                                                   
                                                   
                                                
                                                
                                                   
                                                      of
                                                   
                                                   
                                                
                                                
                                                   constraint
                                                
                                             
                                          
                                          
                                             
                                                
                                                   F
                                                
                                                
                                                   (
                                                   
                                                      X
                                                   
                                                   )
                                                
                                                
                                                   *
                                                
                                                
                                                   
                                                      F
                                                   
                                                   
                                                      penalty
                                                   
                                                
                                                
                                                   ,
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (11)
                           
                              
                                 
                                    
                                       F
                                    
                                    
                                       penalty
                                    
                                 
                                 
                                    =
                                 
                                 
                                    
                                       
                                          (
                                          1
                                          +
                                       
                                       
                                          
                                             ε
                                          
                                          
                                             1
                                          
                                       
                                       
                                          *
                                          ∁
                                          )
                                       
                                    
                                    
                                       
                                          
                                             ε
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 
                                    ,
                                    ∁
                                    =
                                 
                                 
                                    ∑
                                 
                                 
                                    (
                                    
                                       
                                          
                                             ∁
                                          
                                          
                                             q
                                          
                                       
                                       
                                          +
                                       
                                       
                                          
                                             ∁
                                          
                                          
                                             r
                                          
                                       
                                    
                                    )
                                 
                                 
                                    ,
                                 
                                 
                                    
                                       ∁
                                    
                                    
                                       q
                                    
                                 
                                 
                                    =
                                 
                                 
                                    |
                                    
                                       
                                          1
                                          −
                                       
                                       
                                          
                                             |
                                             
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      q
                                                   
                                                
                                                
                                                   −
                                                
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      q
                                                   
                                                   
                                                      min
                                                   
                                                
                                             
                                             |
                                          
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   q
                                                
                                                
                                                   min
                                                
                                             
                                          
                                       
                                    
                                    |
                                 
                                 
                                    ,
                                 
                                 
                                    
                                       ∁
                                    
                                    
                                       r
                                    
                                 
                                 
                                    =
                                 
                                 
                                    |
                                    
                                       
                                          1
                                          −
                                       
                                       
                                          
                                             |
                                             
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      r
                                                   
                                                
                                                
                                                   −
                                                
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      r
                                                   
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         ax
                                                      
                                                   
                                                
                                             
                                             |
                                          
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   r
                                                
                                                
                                                   max
                                                
                                             
                                          
                                       
                                    
                                    |
                                 
                              
                           
                        
                     
                  

The parameters 
                        
                           
                              ε
                           
                           
                              1
                           
                        
                      and 
                        
                           
                              ε
                           
                           
                              2
                           
                        
                      are selected in view of the constraint violation. In this study, values of 
                        
                           
                              ε
                           
                           
                              1
                           
                        
                      and 
                        
                           
                              ε
                           
                           
                              2
                           
                        
                      are set as 3 by examining its effect and referring to the previous studies. Schematic diagram of formulation of the truss optimization problem is presented in 
                     Fig. 2.

In this section, six distinct and challenging trusses with 10, 37, 52, 72, 120, and 200 elements are shown in 
                     
                     Figs. 3 and 4. The problem is to do the shape and size optimization under multiple natural frequency constraints. The performance of the SOS algorithm and its variants (viz. SOS-ABF1, SOS-ABF2, and SOS-ABF1&2) are investigated on all six truss problems. The results obtained for the proposed algorithms are compared with the results of other algorithms like OC, GA, FA, CBO, CS, etc. reported in the literature. All benchmark problems are coded in MATLAB R2013a, and finite element model is coded as per [11]. The results and discussions of the test problems are explained in the subsequent sections:

The first benchmark truss is presented in Fig. 3(A). This truss has been examined by several researchers, including [40, 13,41,21,29,23,49]. The material properties, design variable bounds, and natural frequency constraints are given in 
                        Table 1. It can be seen from the table that size optimization with 10 continuous design variables is considered for this truss. Moreover, a constant lumped mass of 454.0kg is attached at each of the free nodes (nodes 1–4) as presented in Fig. 3(A).

The SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms are investigated to test its effects on size and shape optimization by considering a population size and FE
                        
                           max
                         as 20 and 4000 respectively. The results are obtained for 100 independent runs and the results obtained in these runs are presented in 
                        Table 2. The result table highlights size variables, best weight, mean weight, SD of weight, function evaluations (FE), and frequency responses. The results show that the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms offer trusses with the best weight of 525.2789, 524.9274, 524.8289, and 525.2702kg respectively. The results show that the SOS algorithm and its variants give better results as compared to the other results reported in the literature with no violation of constraints. Moreover, The SOS-ABF2 algorithm ranks first among the considered algorithms, whereas SOS-ABF1 stands second. Therefore, the results of the SOS-ABF2 algorithm are compared with the results of the other methods. The weight benefit for the SOS-ABF2 algorithm is 17.9211, 13.1511, 10.3111, 7.1211, 4.4211, 10.1611, 6.4511, 4.2611, 10.9011, 0.45, 0.0985, and 0.4413kg as compared to those obtained from the NHGA, PSO, NHPGA, CSS, enhanced CSS, HS, FA, CSS-BBBC, hybrid OC-GA, SOS, SOS-ABF1, and SOS-ABF1&2 algorithms respectively. 
                        Fig. 5 presents the relative virtual effect of element cross-sectional areas on optimum truss structures obtained using various approaches. It is observed that the elements connected to the fixed nodes have larger cross-sectional areas. The figure also shows that the optimal topologies obtained using the proposed metaheuristics are lighter as compared to those obtained using other algorithms.

The SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give mean weight as 531.4033, 528.6291, 528.5501, and 528.7075kg respectively. Moreover, the SOS-ABF2 algorithm gives best mean weight among the proposed algorithms, whereas SOS-ABF1 stands second. The mean weight benefit for the SOS-ABF2 algorithm is 12.3399, 7.8399, 9.9799, 9.1299, 6.5199, 2.8532, 0.079, and 0.1574kg as compared to those obtained from the PSO, CSS, enhanced CSS, HS, FA, SOS, SOS-ABF1, and SOS-ABF1&2 algorithms respectively. The results show that the SOS algorithm and its variants give better mean weight as compared to similar results reported in the literature. Moreover, it is also observed that the SOS-ABF2 algorithm gives best mean weight among the considered algorithms.

The SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give SD of weight as 4.2243, 3.4999, 2.9827, and 2.8779 respectively. It can be seen from the results that that the SOS-ABF1&2 algorithm gives best result as SD of weight among the proposed algorithms, whereas SOS-ABF2 stands second. The SD benefit for the SOS-ABF1&2 algorithm is 1.9861, 3.9621, 0.4421, 3.0921, 0.7621, 1.3464, 0.622, and 0.1048 as compared to those obtained from the NHGA, PSO, CSS, enhanced CSS, FA, SOS, SOS-ABF1, and SOS-ABF1&2 algorithms respectively. However, the HS algorithm stands first in view of SD of weight. Moreover, it should be noticed that maximum number of FE used in the proposed algorithms is fairly small as compared to the HS, FA, and hybrid OC-GA algorithms. This study indicates that the results of the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms are more reliable and proficient as compared to the other results reported in the literature. Moreover, it is found from the results that the SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms are more efficient than the SOS algorithm, whereas the SOS-ABF2 algorithm stands first among the considered algorithms.

The initial layout of the second benchmark truss, simply supported bridge, is depicted in Fig. 3(B). Wang et al. [39] first optimized this truss and later it was investigated by many researchers [13,40,
                        41,21,29,17,19]. Table 1 presents the material properties, design variable bounds, and constraints for this problem. A constant lumped mass of 10kg is attached at each of the free nodes of the lower chord. The lower chord elements of the truss are presumed with fixed rectangular cross-section area of 0.4cm2, whereas the remaining elements are clustered into 14 groups by considering structure symmetry about the middle vertical plane. Nodes on the upper chords (shape variables) can move vertically in view of structural symmetry about the middle vertical plane, whereas the lower chord nodes are fixed. Therefore, this problem has 14 size variables and 5 shape variables.

In this study, the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms are tested by considering population size and FE
                        
                           max
                         as 20 and 4000 respectively. The results obtained for 100 independent runs are presented in 
                        Table 3. The results signify the shape variables, size variables, best weight, mean weight, SD of weight, FE and frequency responses. It can be seen from the results that the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give the best weight without violation of constraints as 360.8658, 360.4260, 359.9050, and 360.5007kg respectively. The results show that the SOS-ABF2 algorithm gives better results as compared to similar results reported in the literature. The weight benefit for the SOS-ABF2 algorithm is 6.595, 8.935, 17.295, 3.127, 2.935, 2.475, 1.595, 0.145, 0.0189, 0.495, 0.9608, 0.521, and 0.5957kg as compared to those obtained from the OC, GA, PSO, NHPGA, CSS, enhanced CSS, HS, FA, CBO, DPSO, SOS, SOS-ABF1, and SOS-ABF1&2 algorithms respectively. 
                        Fig. 6 displays the relative virtual effect of element cross-sectional areas and nodal positions of the optimal trusses obtained using various approaches. It should be noted that elements connected to the top nodes of the trusses have larger cross-sectional areas, whereas the lower chord elements are of fixed and smaller cross-sectional areas. The figure also demonstrates that the trusses obtained using the proposed approaches are light and compact as compared to those obtained using other methods.

The SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give mean weight as 364.8521, 363.3662, 363.0816, and 363.6336kg respectively. The SOS-ABF2 algorithm gives best mean weight among the proposed algorithms, whereas the SOS-ABF1 stands second. The mean weight benefit for the SOS-ABF2 algorithm is 18.1184, 3.6884, 2.6684, 1.7705, 0.2846, 0.552kg as compared to those obtained from the PSO, CSS, enhanced CSS, SOS, SOS-ABF1, and SOS-ABF1&2 algorithms respectively. However, the HS, FA, CBO, and DPSO algorithms give better results in terms of mean weight. Moreover, it is observed that maximum number of FE used in the proposed algorithms is fairly small as compared to the PSO, HS, FA, CBO, and DPSO algorithms.

The SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give SD of weight as 2.9650, 2.1704, 1.8304, and 2.0771 respectively. It can be seen from the results that that the SOS-ABF2 algorithm gives best result as SD of weight among the proposed algorithms. The SD benefit for the SOS-ABF2 algorithm is 7.2021, 2.4296, 1.9116, 1.6306, 1.1346, 0.34, and 0.2467 as compared to those obtained from the GA, PSO, CSS, enhanced CSS, SOS, SOS-ABF1, and SOS-ABF1&2 algorithms respectively. However, the HS, FA, CBO, and DPSO algorithms give better results in terms of SD, however the maximum number of FE used in the proposed algorithms is fairly small as discussed earlier. The study shows that the results of the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms are comparable to the results of the other considered methods. Moreover, it is observed that the SOS-ABF1, SOS-ABF2 and SOS-ABF1&2 algorithms are more efficient than the SOS algorithm, whereas the SOS-ABF2 algorithm gives better results as compared to the others algorithms.


                        Fig. 4 presents the third benchmark truss. This truss was investigated by Kaveh and Zolghadr [21], Kaveh and Zolghadr [23], and Kaveh and Mahdavi [17] as a large-scale, size optimization problem. The material properties, design variables, and constraints are summarized in Table 1. This truss is grouped into 16 groups of elements by considering structural symmetry similar to the previous study. The constant lumped mass of 2770 kg is attached at each of the top nodes (nodes 1–4) as shown in Fig. 4.

In this problem, the proposed algorithms are tested by considering population size and FE
                        
                           max
                         as 20 and 4000 respectively. As can be seen from 
                        Table 4, the best weight achieved by the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms are 325.5585, 325.086, 324.6897, and 325.2317kg respectively. The results show that the SOS algorithm and its variants give better results as compared to similar results reported in the literature (except results of the CBO algorithm). However, it observed that maximum number of FE used by the CBO algorithms is 50 % higher as compared to the other algorithms. Moreover, The SOS-ABF2 algorithm ranks first among the considered metaheuristics, whereas the SOS-ABF1 algorithm ranks second. Therefore, we compared the results of the SOS-ABF2 algorithm with the results of the other metaheuristics. The results signify that the weight benefit for the SOS-ABF2 algorithm is 4.1243, 3.7033, 2.8173, 0.0655, 0.8688, 0.3963, and 0.542kg compared to those obtained from the CSS, enhanced CSS, CSS-BBBC, CBO, SOS, SOS-ABF1, and SOS-ABF1&2 algorithms respectively.

The results signify that the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give mean weight as 331.1228, 328.6582, 328.4621, and 334.9979kg respectively. The results indicate that the SOS algorithm and its variants reported better mean weight than other algorithms reported in the literature except the results of the CBO algorithm. However, maximum number of FE used in the proposed algorithms is fairly small as compared to the CBO algorithm. The result also signifies that the SOS-ABF2 algorithm ranks fist to provide mean weight. The mean weight benefit for the SOS-ABF2 algorithm is 9.2379, 7.3079, 1.9533, 2.6607, 0.1961, and 6.5358kg as compared to the CSS, enhanced CSS, CBO, SOS, SOS-ABF1, and SOS-ABF1&2 algorithms respectively.

The SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give SD of weight as 4.2278, 2.7948, 2.4600, and 6.0566 respectively. It can be seen from the results that that the SOS-ABF2 algorithm gives best result as SD of weight among the proposed algorithms, whereas SOS-ABF1 stands second. The SD benefit for the SOS-ABF2 algorithm is 2.96. 4.74, 5.2463, 1.7678, 0.3348, and 3.5966 as compared to those obtained from the CSS, enhanced CSS, CBO, SOS, SOS-ABF1, and SOS-ABF1&2 algorithms respectively. This study indicates that the results of the SOS, SOS-ABF1, and SOS-ABF2 algorithms are more reliable and proficient as compared to the results of the other metaheuristics. Moreover, it is observable that the results of the SOS-ABF1&2 algorithms are less efficient than the results of the SOS algorithm, and the SOS-ABF2 algorithm stands first among the considered methods.

The dome truss is selected as the fourth benchmark problem, shown in Fig. 3(C). This problem was first studied in [27] and followed in [40,13,21,29,23,19] for simultaneous shape and size optimization. Table 1 illustrations the material properties, design variable bounds, and constraints. A constant lumped mass of 50kg is attached at each of the free nodes. The elements are linked into 8 groups by considering symmetry about the z-axis, whereas the free nodes can shift ±2m in each direction of the vertical plane to keep the dome symmetric.

In this study, the SOS algorithm and its variants are used by considering population size and FE
                        
                           max
                         as 20 and 4000 respectively. 
                        Table 5 compares the results of the proposed algorithms with other optimization methods. The results indicate that the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms proposes trusses with the optimum weight of 195.4969, 194.8089, 195.1730, and 198.2630kg respectively. The SOS-ABF1 and SOS-ABF2 algorithms rank first and second among the considered metaheuristics respectively. The weight benefit for the SOS-ABF1 algorithm is 103.1911, 41.2371, 33.5721, 10.4281, 2.5281, 20.1311, 2.7211, 2.5001, 0.5421, 0.688, 0.3641, and 3.4541kg compared to those obtained from the bi-factor algorithm, NGHA, PSO, CSS, enhanced CSS, HS, FA, CSS-BBBC, DPSO, SOS, SOS-ABF2, and SOS-ABF1&2 algorithms respectively. 
                        Fig. 7 presents the relative virtual effect of element cross-sectional areas and nodal positions of the optimal dome trusses obtained using different methods. It is noticed from the figure that the optimum distribution of elemental cross-sectional areas and nodal positions contributes to reducing the weight of the truss structure. The figure also shows that the trusses obtained using the enhanced CSS, FA, CSS-CBBBC, DPSO, SOS, SOS-ABF2, and SOS-ABF2 are light and compact as compared to those obtained using other methods.

The results signify that the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give mean weight as 214.6676, 210.7033, 211.5683, and 224.5050kg respectively. The results indicate that the SOS-ABF1 algorithm gives better mean weight as compared to other algorithms reported in the literature except the results of the enhanced CSS and DPSO algorithms. However, maximum number of FE used in the proposed algorithms is fairly small as compared to the PSO, HS, FA, and DPSO algorithms. The mean weight benefit for the SOS-ABF1 algorithm is 23.5967, 2.3977, 19.1767, 2.0967, 3.9643, 0.865, and 13.8017kg as compared to those obtained from the PSO, CSS, enhanced CSS, HS, FA, CSS-BBBC, DPSO, SOS, SOS-ABF2, and SOS-ABF1&2 algorithms respectively.

The SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give SD as 15.1499, 11.8339, 12.7871, and 17.8552 respectively. It can be seen from the results that that the SOS-ABF1 algorithm gives best result as SD of weight among the proposed algorithms, whereas SOS-ABF2 stands second. The SD benefit for the SOS-ABF1 algorithm is 25.6281, 0.6061, 6.1461, 2.0161, 3.316, 0.9532, and 6.0213 as compared to those obtained from the NGHA, HS, FA, DPSO, SOS, SOS-ABF2, and SOS-ABF1&2 algorithms respectively. This study indicates that the results of the SOS, SOS-ABF1, and SOS-ABF2 algorithms are more reliable and proficient as compared to the results of the other considered metaheuristics. Moreover, it is evident that the results of the SOS-ABF1&2 algorithms are less efficient than the results of the SOS algorithm. Moreover the SOS-ABF1 algorithm performs more efficiently among the considered metaheuristics.


                        Fig. 3(D) presents the fifth benchmark. This 3-D dome truss was first optimized in [23] and followed in [17,
                        19] for size optimization. The material properties, design variable bounds, and constraints are tabulated in Table 1. A constant lumped mass is attached as 3000kg at node 1, 500kg at nodes 2 to 13, and 100kg at the rest of the free nodes. The elements are clustered into 7 groups by considering symmetry about the z-axis.

In this test, the proposed algorithms are used population size and FE
                        
                           max
                         as 20 and 4000 respectively. 
                        Table 6 presents the results obtained using the proposed algorithms and other optimization methods. The results indicate that the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give the trusses with the best weight of 8713.3030, 8712.1100, 8710.3300, and 8716.9470kg respectively. The results show that the SOS algorithm and its variants give better results as compared to similar results reported in the literature without violation of constraints. Moreover, The SOS-ABF2 algorithm ranks first among the considered metaheuristics, whereas the SOS-ABF1 algorithm stands second. The SOS-ABF2 algorithm gives weight benefit as 494.18, 336.01, 178.8003, 461.6, 180.15, 2.973, 1.78, and 6.617kg compared to those obtained from the CSS, CSS-BBBC, CBO, PSO, DPSO, SOS, SOS-ABF1, and SOS-ABF1&2 algorithms respectively. 
                        Fig. 8 shows the relative virtual effect of element cross-sectional areas the optimal dome trusses obtained using different approaches. It is observed that the elements neighboring the top of the dome have larger cross-sectional areas, and the optimum distribution of elemental cross-sectional areas contributes to reducing the weight of the truss structure. The CSS, CBO, and DPSO algorithms give nearly similar trusses, whereas the trusses obtained using the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 set nearly identical trusses. The figure also shows that the dome trusses obtained using the proposed methods are lighter as compared to those obtained using other methods.

Mean weight for the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms are of 8735.3452, 8727.4267, 8725.3075, and 8790.6961kg respectively. Moreover, the SOS-ABF2 algorithm gives best mean weight among the proposed algorithms, whereas the SOS-ABF1 stands second. The mean weight benefit for the SOS-ABF2 algorithm is 165.9465, 526.5325, 170.6825, 10.0377, 2.1192, and 65.3886kg as compared to those obtained from the CBO, PSO, DPSO, SOS, SOS-ABF1, and SOS-ABF1&2 algorithms respectively. It is seen clearly that the SOS algorithm and its variants give better mean weight as compared to similar results reported in the literature, whereas the SOS-ABF2 algorithm gives best mean weight among the proposed algorithms.

The SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give SD of weight as 17.9011, 16.5503, 10.6402, and 55.7294 respectively. It can be seen from the results that that the SOS-ABF2 algorithm gives better result as SD of weight among the proposed algorithms. The CBO and DPSO algorithm stands first and second respectively in terms of SD of weight. Moreover, it is noticed that maximum number of FE used in the proposed algorithms is fairly small as compared to the CBO, PSO, and DPSO algorithms. This study indicates that the results of the SOS, SOS-ABF1, and SOS-ABF2 algorithms are more reliable and proficient as compared to the results of the literature. Moreover, it is observed that the results of the SOS-ABF1&2 algorithms are less efficient as compared to the results of the SOS algorithm Moreover, the SOS-ABF2 algorithm performs better among the considered metaheuristics.

The sixth benchmark truss, illustrated in Fig. 3(E), is considered as a large-scale, size optimization problem. This problem was optimized in [23,
                        18]. Table 1 presents the material properties, design variable bounds, and constraints for this problem. A constant lumped mass of 100kg is attached at each of the upper nodes (nodes 1–5), whereas all elements are grouped into 29 groups by considering geometrical symmetry.

In this problem, the SOS algorithms and its variants are considered with population size and FE
                        
                           max
                         as 20 and 10,000 respectively. 
                        Table 7 presents the results obtained by the proposed algorithms and those of the previously reported in the literature. The best weights for the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms are 2180.3210, 2164.8840, 2165.8010, and 2207.8880kg respectively. The results show that the SOS, SOS-ABF1, and SOS-ABF2 algorithms give better results as compared to similar results reported in the literature without violation of constraints. Moreover, The SOS-ABF1 algorithm ranks first among the considered algorithms, whereas the SOS-ABF2 stands second. The table shows that the SOS-ABF1 algorithm gives weight benefit of 94.976, 133.726, 38.328, 24.196, 15.437, 0.917, and 43.004kg as compared to those obtained from the CSS, CSS-BBBC, CBO, 2D-CBO, SOS, SOS-ABF2, and SOS-ABF1&2 algorithms respectively. 
                        Fig. 9 shows the relative virtual effect of element cross-sectional areas the optimal trusses obtained using various approaches. It is observed that the elements neighboring the fixed nodes of the truss have larger cross-sectional areas. The trusses obtained using the SOS-ABF1 and SOS-ABF2 set nearly identical trusses. The figure also shows that the trusses obtained using the SOS-ABF1 and SOS-ABF2 algorithms are lighter as compared to those obtained using other methods.

The results indicate that the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give the mean weight of 2303.3034, 2186.5744, 2187.2517, and 2405.3479kg respectively. The SOS-ABF1 algorithm gives best mean weight among the proposed algorithms, whereas SOS-ABF2 stands second. The mean weight benefit for the SOS-ABF1 algorithm is 294.9176, 121.8686, 116.729, 0.6773, and 218.7735kg as compared to those obtained from the CBO, 2D-CBO, SOS, SOS-ABF2, and SOS-ABF1&2 algorithms respectively.

The SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms give SD of weight as 83.5897, 15.2711, 16.9436, and 128.1578 respectively. It can be seen from the results that that the SOS-ABF1 algorithm gives best result as SD of weight among the proposed algorithms, whereas SOS-ABF2 stands second. The SD benefit for the SOS-ABF1 algorithm is 235.5548, 117.2437, 68.3186, 1.6725, and 112.8867 as compared to those obtained from the CBO, 2D-CBO, SOS, SOS-ABF2, and SOS-ABF1&2 algorithms respectively. This study indicates that the results of the SOS, SOS-ABF1, and SOS-ABF2 algorithms are more reliable and proficient as compared to the results of the literature. Moreover, it is observed that the results of the SOS-ABF1&2 algorithms are less efficient as compared to the results of the SOS algorithm. The SOS-ABF1 and SOS-ABF2 algorithms stand first and second among the considered algorithms respectively.


                        
                        Fig. 10 presents convergence graphs of mean weight for the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms of all the test problems. The mean weight is computed by considering the average weight of all runs for each generation. The convergence graphs indicate that the SOS-ABF1, SOS-ABF2 algorithms converge faster and set superior solutions as compared to the SOS and SOS-ABF1&2 algorithm for the all considered problems.

Result summary of the proposed algorithms is presented in 
                        Table 8. It can be seen from the summary table the SOS-ABF2 algorithm ranks first in the 10-bar truss, 37-bar truss, 72-bar truss, and 120-bar truss, whereas the SOS-ABF2 algorithm ranks first in the 52-bar truss and 200-bar truss in order to get best weight, mean weight, and SD of weight. The SOS-ABF1 algorithm ranks second on the 10-bar truss, 37-bar truss, 72-bar truss, and 120-bar truss, whereas the SOS-ABF1 algorithm ranks first on the 52-bar truss and 200-bar truss in order to get best weight, mean weight, and SD of weight. Therefore, the results signify that the SOS-ABF1 and SOS-ABF2 algorithms improve the efficiency of the basic SOS algorithm. Moreover, the SOS-ABF2 algorithm performs significantly better among the proposed algorithms. On the other side, the SOS-ABF1&2 algorithm ranks third on the 10-bar truss and 37-bar truss, and ranks fourth on the 72-bar truss, 52-bar truss, 120-bar truss, and 200-bar truss in order to get best weight, mean weight, and SD of weight. Therefore, it can be seen from the result the SOS-ABF1&2 algorithm reduces performance of the SOS algorithm.

@&#CONCLUSIONS@&#

In this study, the SOS algorithm and its variants (viz. the SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms) are proposed to design optimum planar and space trusses subjected to multiple natural frequency constraints. Moreover, in order to improve the efficiency of the SOS algorithm in the search process, adaptive benefit factors are proposed in the basic SOS algorithm. This study also investigates the effect of adaptive benefit factors and benefit factors in the form of variants of the SOS algorithm. In order to investigate the effectiveness of the proposed algorithms, six widely used benchmark problems of shape and size optimization with multiple natural frequency constraints are considered. The design variables such as nodal coordinates and cross-sectional areas are of widely different characteristics, and their simultaneous use often leads to divergence. In addition, the implicit relationship between the natural frequencies and design variables induces more complexity.

This study compared the performance of the SOS, SOS-ABF1, SOS-ABF2, and SOS-ABF1&2 algorithms with that of other metaheuristics such as NHGA, NHPGA, CSS, enhanced CSS, HS, FA, CSS-BBBC, OC, GA, hybrid OC-GA, CBO, 2D-CBO, PSO, and DPSO. In all the problems, the SOS-ABF1 and SOS-ABF2 algorithms have a better capability for obtaining results based on the best weight, mean weight, and SD of weight than the SOS and SOS-ABF1&2 algorithms. It is also observed that the simultaneous use of adaptive benefit factor and benefit factor plays an important role in the global exploration and exploitation of the search space in the proposed algorithms. Moreover, the results of the SOS algorithm and its three variants are observed to be comparable to those obtained using other state-of-the-art algorithms.

We (all the authors) declare that, we do not have any conflict of interest with anyone.


                     
                        
                           Table
                           
                              
                              
                                 
                                    Step I: Define the problem, minimize F(X), initialize the optimization parameters, and set termination criterion (‘FE
                                       
                                          max
                                       
                                       ’, or ‘g
                                       
                                          max
                                       
                                       ’); where F(X) is the objective function and ‘X’ is the design vector. Organisms of the ecosystem are considered to be a part of the population (i=1,2,…,n).
                                    
                                 
                                 
                                    Step II: Initialize the randomly generated population within its upper and lower bounds and evaluate it.
                                 
                                 
                                    Step III: Identify the best solution of the ecosystem.
                                 
                                 
                                    Step IV: begin the optimization loop.
                                 
                                 
                                    
                                       FE=0
                                    
                                 
                                 
                                    
                                       
                                          for g=1 to g
                                       
                                          max
                                        
                                       
                                          do
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          for i=1 to n do
                                        /* update the population /*
                                 
                                 
                                    Step IV: The mutualism phase:
                                 
                                 
                                    
                                       
                                       
                                       BF
                                       
                                          1
                                       =1 + round [rand] /* 
                                       
                                          
                                             rand
                                          
                                          
                                             ∈
                                          
                                          
                                             [
                                             
                                                0,1
                                             
                                             ]
                                          
                                        
                                       /*
                                    
                                 
                                 
                                    
                                       
                                       
                                       BF
                                       
                                          2
                                       =1 + round [rand]
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          
                                             MV
                                             =
                                          
                                          
                                             
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      i
                                                   
                                                
                                                
                                                   +
                                                
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      k
                                                   
                                                
                                             
                                             
                                                
                                                   2
                                                
                                             
                                          
                                        
                                       /* ‘k’ is a randomly selected population of the ecosystem, k ≠ i /*
                                    
                                 
                                 
                                    
                                       
                                          if the SOS algorithm then
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                +
                                                rand
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                      MV
                                                      *
                                                   
                                                   
                                                      
                                                         BF
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                             
                                             
                                                +
                                                rand
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                      MV
                                                      *
                                                   
                                                   
                                                      
                                                         BF
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          else if the SOS-ABF1 algorithm then
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          if f(X
                                       
                                          best
                                       
                                       ) ≠ 0 then
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       ABF
                                       
                                          1
                                       =f(X
                                       
                                          i
                                       
                                       )/f(X
                                       
                                          best
                                       )
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                +
                                                rand
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                      MV
                                                      *
                                                   
                                                   
                                                      
                                                         ABF
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          else
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                +
                                                rand
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                      MV
                                                      *
                                                   
                                                   
                                                      
                                                         BF
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          end if
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                             
                                             
                                                +
                                                rand
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                      MV
                                                      *
                                                   
                                                   
                                                      
                                                         BF
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          else if the SOS-ABF2 algorithm then
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                +
                                                rand
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                      MV
                                                      *
                                                   
                                                   
                                                      
                                                         BF
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          if f(X
                                       
                                          best
                                       
                                       ) ≠ 0 then
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       ABF
                                       
                                          2
                                       =f(X
                                       
                                          k
                                       
                                       )/f(X
                                       
                                          best
                                       )
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                             
                                             
                                                +
                                                rand
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                      MV
                                                      *
                                                   
                                                   
                                                      
                                                         ABF
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          else
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                             
                                             
                                                +
                                                rand
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                      MV
                                                      *
                                                   
                                                   
                                                      
                                                         BF
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          end if
                                       
                                    
                                 
                                 
                                    
                                       
                                          else if the SOS-ABF1&2 algorithm then
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          if f(X
                                       
                                          best
                                       
                                       ) ≠ 0 then
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       ABF
                                       
                                          1
                                       =f(X
                                       
                                          i
                                       
                                       )/f(X
                                       
                                          best
                                       )
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       ABF
                                       
                                          2
                                       =f(X
                                       
                                          k
                                       
                                       )/f(X
                                       
                                          best
                                       )
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                +
                                                rand
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                      MV
                                                      *
                                                   
                                                   
                                                      
                                                         ABF
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                             
                                             
                                                +
                                                rand
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                      MV
                                                      *
                                                   
                                                   
                                                      
                                                         ABF
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          else
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                +
                                                rand
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                      MV
                                                      *
                                                   
                                                   
                                                      
                                                         BF
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                             
                                             
                                                +
                                                rand
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                      MV
                                                      *
                                                   
                                                   
                                                      
                                                         BF
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          end if
                                       
                                    
                                 
                                 
                                    
                                       
                                          end if
                                       
                                    
                                 
                                 
                                    
                                       FE=FE + 2 /*
                                    
                                 
                                 
                                    
                                       /* the organisms are updated only if their new functional value is fitter than existing /*
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          if
                                        
                                       
                                          
                                             F
                                          
                                          
                                             (
                                             
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                             )
                                          
                                          
                                             <
                                             F
                                             (
                                          
                                          
                                             
                                                X
                                             
                                             
                                                i
                                             
                                          
                                          
                                             )
                                          
                                        
                                       
                                          then
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          end if
                                       
                                    
                                 
                                 
                                    
                                       
                                          if
                                        
                                       
                                          
                                             F
                                          
                                          
                                             (
                                             
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      k
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                             )
                                          
                                          
                                             <
                                             F
                                             (
                                          
                                          
                                             
                                                X
                                             
                                             
                                                k
                                             
                                          
                                          
                                             )
                                          
                                        
                                       
                                          then
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          end if
                                       
                                    
                                 
                                 
                                    
                                       
                                          end if
                                       
                                    
                                 
                                 
                                    Step VII: The commensalism phase:
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                +
                                                rand
                                                (
                                                −
                                                1,1
                                                )
                                                *
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         best
                                                      
                                                   
                                                   
                                                      −
                                                   
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                        
                                       /* ‘k’ is a randomly selected population of the ecosystem, k ≠ i /*
                                    
                                 
                                 
                                    
                                       FE=FE + 1
                                    
                                 
                                 
                                    
                                       /* the organism is updated only if its new functional value is fitter than existing /*
                                    
                                 
                                 
                                    
                                       
                                          if
                                        
                                       
                                          
                                             F
                                          
                                          
                                             (
                                             
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                             )
                                          
                                          
                                             <
                                             F
                                             (
                                          
                                          
                                             
                                                X
                                             
                                             
                                                i
                                             
                                          
                                          
                                             )
                                          
                                        
                                       
                                          then
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   X
                                                
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          end if
                                       
                                    
                                 
                                 
                                    Step VIII: The parasitism phase:
                                 
                                 
                                    
                                       Parasite_Vector /* Parasite vector is a fusion of design variables of the organism ‘i’ and randomly generated design variables within its bound /*
                                    
                                 
                                 
                                    
                                       /* If parasite vector is fitter than the organism ‘k’, parasite will kill organism ‘k’ and acquire its position in the ecosystem. /*
                                    
                                 
                                 
                                    
                                       
                                          if
                                        
                                       
                                          
                                             F
                                          
                                          
                                             (
                                             
                                                Parasite_Vector
                                             
                                             )
                                          
                                          
                                             <
                                             F
                                             (
                                          
                                          
                                             
                                                X
                                             
                                             
                                                k
                                             
                                          
                                          
                                             )
                                          
                                        
                                       
                                          then /* ‘k’ is a randomly selected population of the ecosystem, k ≠ i /*
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   k
                                                
                                             
                                             
                                                =
                                             
                                             
                                                Parasite_Vector
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          end if
                                       
                                    
                                 
                                 
                                    Step IX: Termination criterion (FE ≤ FE
                                       
                                          max
                                        or 
                                          
                                             g
                                             ≤
                                          
                                          
                                             
                                                g
                                             
                                             
                                                max
                                             
                                          
                                       ): Repeat the procedure from step III until the termination criterion is satisfied.
                                 
                                 
                                    
                                       
                                       
                                       
                                          if FE ≥ FE
                                       
                                          max
                                        
                                       
                                          then
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                       
                                       break optimization loop
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          end if
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          end for /* population loop end /*
                                    
                                 
                                 
                                    
                                       
                                          end for /* optimization loop end /*
                                    
                                 
                              
                           
                        
                     
                  

@&#REFERENCES@&#

