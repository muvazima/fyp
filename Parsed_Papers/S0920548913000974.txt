@&#MAIN-TITLE@&#Towards the integration of reputation management in OpenID

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Definition of a reputation management solution integrated as part of the OpenID protocol


                        
                        
                           
                           Know reliability before transferring users private information


                        
                        
                           
                           Enhancing the users' experience when using OpenID


                        
                        
                           
                           Tests performed to validate the feasibility of the framework


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Single Sign-On

Reputation

OpenID

User-centric

Identity management

@&#ABSTRACT@&#


               
               
                  OpenID is an open standard providing a decentralized authentication mechanism to end users. It is based on a unique URL (Uniform Resource Locator) or XRI (Extensible Resource Identifier) as identifier of the user. This fact of using a single identifier confers this approach an interesting added-value when users want to get access to different services in the Internet, since users do not need to create a new account on every website they are visiting. However, OpenID providers are normally used as a point to store certain personal attributes of the end users too, which might be of interest for any service provider willing to make profit from collecting that personal information. The definition of a reputation management solution integrated as part of the OpenID protocol can help users to determine whether a given service provider is more or less reliable before interacting with it and transferring their private information. This paper is providing the definition of a reputation framework that can be applied to the OpenID SSO (Single Sign-On) standard solution. It also defines how the protocol itself can be enhanced so OpenID providers can collect (and provide) recommendations from (to) users regarding different service providers and thus enhancing the users' experience when using OpenID. Besides the definition, a set of tests has been performed validating the feasibility of the framework.
               
            

@&#INTRODUCTION@&#

Providing effective authentication solutions is a key part to successfully deploy any service provider nowadays. That implies, as a minimum, to identify individuals in such providers and to control the access to the different resources and services being provided by them.

Even if these authentication approaches can be based on well-known technologies such as login/password, smart cards, digital certificates or biometric information, among others, it is usually the case that different service providers belonging to different companies or organizations are managing their own identifiers and mechanisms to authenticate their users [1–4]. This is leading to users creating new accounts on almost every website where they are required to do so and, in certain cases, even avoiding websites where they have to create yet another identifier (e.g., username and password) [5].

OpenID [6,7] is an open technology standard that provides a solution to this problem. As such, it is defined as a mechanism allowing the use of a single account to sign in to different service providers. In this proposal, the user only has to enable her current existing account for OpenID access and then provide any OpenID-enabled service her unique OpenID identifier. With this identifier the service provider redirects the user to the OpenID provider where she can be authenticated and then get access (after successful authentication) to the service.

The wide use of this approach as well as the information that certain service providers are requesting from the users are making OpenID providers the right place to store certain private attributes of the end user. Those attributes are also needed when taking certain decisions in the service provider so the access can be provided (or denied) to particular resources. Such access may depend on the role of the user, the domain where she is coming from, her age, etc.

However, as this private information is directly exchanged between the OpenID provider and the service provider via a set of OpenID extensions and the user is not having direct control on this exchange under certain circumstances, there is a clear need to extend the OpenID standard to provide a tighter control over such exchange.

Several approaches can be considered here, for instance deploying solutions based on pre-established agreements to regulate how the information is released [8], deploying white/black lists [9], or allowing the users to manually manage attribute release policies [10] to decide which entities have access to their attributes. However, due to the dynamic and decentralized nature of OpenID, trust and reputation management becomes a promising option [11,12]. It can provide end users with certain key information before starting an OpenID authentication process (and attribute release) with an unknown service. Users can then decide whether they are willing to exchange this personal information with that service or not, based on the interactions that other users had in the past, i.e., based on the reputation that this service provider is having among different users.

This paper provides a detailed definition of a reputation framework designed to be integrated with OpenID. Moreover, it is describing how the OpenID protocol can be enhanced so the OpenID provider can collect recommendations from different users on a given service provider based on their interactions with it, although they belong to other OpenID providers. Our work also describes how these recommendations can be aggregated appropriately and provided to the user before she starts interacting with a service.

This paper is a revised and extended version of a previous publication [13]. The paper at hand includes the description of several reputation computation engines, showing different ways of aggregating recommendations from different sources. In addition, we have defined a simulation environment in order to validate the feasibility of the framework. Not only the behavior of the framework, but also the advantages and disadvantages of different reputation computation engines, are analyzed and explained how they fit to different system conditions.

The remainder of the article is organized as follows. Section 2 provides the main references and related works. Section 3 provides a common nomenclature as well as the description of the particular problem being addressed as part of this research work. Then, in Section 4 we describe both the functional and non-functional requirements for developing a reputation framework, while in Section 5 the OpenID protocol enhancement needed to deal with this reputation framework is presented. Section 6 shows the reputation framework itself, which has been designed for enhancing the users' experience using the OpenID technology. Later, Section 7 explains different ways to aggregate the collected recommendations to compute the reputation value, while Section 8 presents the experiments conducted to validate the feasibility of the proposed framework. Finally, in Section 9 the main conclusions and lines of future work are identified.

@&#RELATED WORK@&#

Counting on any authentication system with Single Sign-On (SSO) capabilities is an essential characteristic for any Internet service nowadays. Modern solutions establish protocols to exchange authentication data in such a way that the authentication could be delegated to an external service. For example, Kerberos [14] defines tickets allowing users to be authenticated in one place and accessing to different services without requiring them to be continuously validating their credentials. Furthermore, recent works enhance the Kerberos protocol by guaranteeing the anonymity of the users while accessing those services [15].

We focus our contribution on the OpenID protocol [6] because of the challenges it raises due to its decentralized nature. Many authentication systems count on trust relationships, usually maintained by a central authority. This central authority maintains the trust information of all the entities involved in the system. However, in distributed systems, further mechanisms are required to manage the trust, which could be based, among other relevant information, on recommendations and past experiences, managed by a reputation framework [16]. This section describes in more detail the work done in this specific area and contextualizes our work within this field.

Trust and reputation management systems for distributed and heterogeneous environments have been studied since a while [17–19]. Moreover, reputation frameworks have been proposed in different contexts, e.g., P2P file sharing [20–23] and reputation enabled service-oriented frameworks [24–28]. Thereafter, the next trends that we could analyze are the application of reputation frameworks for enhancing authentication systems and the proposal of distributed reputation frameworks.

The TRIMS framework [29] applies a trust and reputation model aiming to guarantee an acceptable level of security when deciding if a service in a different domain is reliable for receiving user's personal data. That is to say, it applies reputation techniques for enhancing the privacy of the users when exchanging attributes between services, in a multi-domain scenario. Each domain relies on its own past experiences with the other domain being evaluated. Those experiences are weighted in order to give more or less importance on the final result.

Following the idea of the TRIMS framework, AttributeTrust Framework [30] deals with the trust of relying parties when requesting user's attributes during Internet transactions. They address the problem by aggregating user's attributes in defined Attribute Providers and then perform policy based trust negotiations for evaluating trust in the attributes. They proposed a reputation model for calculating confidence values that result from confidence paths leading from the relying party to the attribute providers. Such reputation model is resilient to the common attacks known in reputation systems.

Authors of [31] introduce a flexible reputation system framework to augment explicit authorization in a web application. They argue that explicit authorization frameworks implemented with access control lists (ACL), capabilities, or roles (RBAC) [32] require such a high overhead to the administrators for manually granting the user's specific privileges, that it cannot scale for Internet type of applications. The framework supports multiple computation models for reputation. However, different from our framework, its focus and design choices target reputation calculations for human subjects. For example, the framework helps to decide which users' identifiers should a service provider support. Moreover, it is a centralized framework and also does not consider opinions of other users because of the complexity that user's opinions bring to the system. It is an objective reputation system based on measurements.

In [33] authors propose a model for determining the level of trust that a service provider could hold on the subject interacting with it. The trust is based on the reputation values that the users have gained for interacting with the offered services. Aimed at federated environment, this solution maintains the reputation of the users in the Identity Providers. Hence, together with the authentication token, it is sent the reputation value of the user accessing a service.

In [34] authors propose a distributed reputation and trust management framework where trust brokers exchange and collect information data about services. By doing so, individual users only need to ask their brokers for accessing reputation information. They claim that due to the distributed nature of the brokers it is impossible to collect the information of all brokers. From the authors' perspective, every user would have an online trust broker, which would collect reputation information for them. The personal brokers are then hierarchically organized for the information distribution. The approach is based on a global database that has information about all servers. Therefore, there is a centralized component in this distributed approach that can also bring a single point of failure and all the other drawbacks common to centralized systems.

Authors in [35] make use of trusted computing to increase the reliability of the OpenID protocol. It replaces the common username/password authentication mechanism for a trusted platform module (TPM) [36]. In this way, in the authentication process, the OpenID provider can compare the reported system state to previously generated reference values, allowing only trustworthy clients to login and claim an identity.

There are some approaches describing reputation frameworks for OpenID-based solutions [37]. However, these solutions are based on centralized concepts, where a trustworthy entity is in charge of managing the reputation information of all the entities.

Analyzing the aforementioned works, we came to the conclusion that, to the best of our knowledge, there is no related work targeting a distributed reputation framework applied on top of the SSO OpenID protocol that can provide reputation information about the relying parties to the users prior to their interaction. We claim that such distributed framework on top of the OpenID protocol can enhance the user experience when dealing with SSO in the Internet. What we achieve here is a unique framework providing SSO and reputation information at the same time.

For consistency throughout the remainder of the paper, we present next a basic glossary of the terms used within the OpenID environment:
                        
                           •
                           User or end-user: The entity that wants to assert a particular identity.

Identifier or OpenID: The URL or XRI chosen by the end-user to name the end-user's identity (for instance, http://felixgm.myopenid.com).

Identity provider or OpenID provider (IdP or OP): A service that specializes in registering OpenID URLs or XRIs and providing OpenID authentication (and possibly other identity services).

Relying party (RP or SP): The site that wants to verify the end-user's identifier; other terms include “service provider” or the now obsolete “consumer”.

Once we have defined the meaning of those terms and the role of each player, we present how they interact in a common scenario.

Let's say Alice wants to watch a film online, so she accesses the service provider (relying party) offering such service. However, the film that Alice wants to watch contains explicit violent scenes and she must therefore prove that she is an adult in order to get access to it.

Then, instead of registering and creating yet another account for this particular RP, Alice wants to use her existing OpenID already registered in a certain OP. If it is allowed by Alice, the RP would have access to Alice's identity information stored in the specified OP (like for instance, age, e-mail, and credit card) and, after checking that she is an adult, the RP actually provides the requested film.


                     Fig. 1
                      represents the sequence diagram corresponding to the regular operation of the OpenID protocol. The workflow starts when a user tries to access a protected resource of the relying party (RP), for instance a film in the aforementioned example (step 1). The RP shows to the user an authentication page (step 2), where the user is able to make use of her OpenID URL (step 3) to be redirected to her OpenID provider (step 8). Before being redirected, the RP and the OP start an association process, establishing a shared secret between them, which is used to verify subsequent protocol messages (steps 4 to 7).

When the user is authenticated in her OpenID provider (steps 9 to 11) she is redirected back to the RP (step 12). The RP can then validate the authentication response making use of the shared secret previously established (step 13). Along with the authentication response, some requested user attributes are also sent, if the user has given her consent. Finally, the RP provides the resource of the service that the user has been requested (step 14).

Nevertheless, despite its several advantages, based on a market survey [38], 97% of the users today in the Internet would like their OpenID providers to offer a way of assisting them with trustworthy information about the relying parties (services that they use). Such reputation information would lead to smarter and more accurate decisions from users when deciding which relying parties to interact with, while preventing them from having transactions with malicious or fraudulent RP, which would be, in turn, identified and isolated.

Spiteful relying parties might misbehave and misuse users' personal information like e-mail address for spamming, or credit card number for charging unexpected expenses, amongst many other dishonest operations. Therefore it is crucial to promptly and accurately detect their unreliable behavior and share this information in the form of a low reputation value within the community, in order to warn other (maybe unwary) users.

The main aim and contribution of our work is to enhance such protocol so that the specified OpenID provider is able to collect recommendations about the selected RP, and aggregate them appropriately in order to provide the user with a useful and reliable reputation score about the RP.

This section identifies the functional as well as non-functional requirements for developing the envisioned reputation framework for the OpenID SSO system. As in any other study of this category, the requirements represent a list of trade-offs that have to be analyzed and evaluated when building such a system. Our proposal is intended to fulfill these requirements, since currently there is not any OpenID implementation which addresses all of them. First, we address the functional requirements that are relevant to the framework. These are:
                        
                           1.
                           Majority rating evaluation: In order to provide a realistic and fair representation of the RP behavior in terms of a reputation score, our framework should consider the suggestions or feedbacks provided by the majority of raters.

Time awareness: Not only the majority has to be considered, but the framework should consider as well that old ratings should be treated as less important than new ones. Therefore the framework should consider the instant when the recommendation ratings were provided to the relying parties.

Incorrectness awareness: The framework should consider the possible incorrect feedbacks provided by either malicious users [39] or users that by mistake provide wrong rating values to the relying parties.

Users' preferences awareness: The framework should provide a mechanism that allows users to look for services based on their preferences [40,41]. That means, the framework should provide a mechanism where the users can express their preferences with regard to the provision of each service.

Privacy: The framework should provide a mechanism allowing users to rate service providers in a privacy-preserving way [42,43]. Only the OpenID provider should know about the digital identity of the user. This should be protected from the relying parties which receive the recommendation information. We believe such mechanism will give an extra incentive to the users for providing feedback information about the relying parties that they have interacted with.

Moreover, we foresee the following non-functional requirements as the most relevant in order to provide a reliable reputation framework on top of a SSO system like OpenID.
                        
                           6.
                           Scalability: When designing the system, we have to take care of the rate of recommendation inputs and queries made on the system. A centralized or distributed solution might have different implications regarding scalability issues. It is therefore important to bear in mind the potential bottlenecks of the architecture that might also constitute a single point of failure.

Reliability of the transaction: We believe that, for certain specific situations (like those with a very high frequency of transactions), a reputation system might not provide a 100% reliable transactional support for users' recommendations input. It should rather consist of a best-effort solution based on messages to be exchanged between the different peers. We foresee a high load of interactions; therefore, a 100% reliable transactional support might give additional delay or even block the system.

Performance: We think that the system should support a lot of applications requests at high rates. For example, a popular OpenID provider, which is accessed by a lot of users, will also have to communicate with other OpenID providers in order to exchange reputation information with them. Such exchange of information needs to have a high performance because otherwise the user experience will be degraded.

Reputation model: The system should support different reputation models, since we believe those models will be improved, due to a lot of research happening in this area. Therefore, it is important for the framework to be able to support different reputation models on the fly through a reputation model plug-in framework.

Portability of data exchange: The framework should allow data describing the reputation information of the relying parties to be exchanged across the different trust management frameworks. At the current state of the art, there is no protocol between OpenID providers allowing the exchange of information between them. Therefore, the framework requires a protocol and a standardized model for reputation data that can be exchanged between OpenID parties [44].

Compliance with laws and regulations: Since these SSO protocols might deal with very sensitive and private users' information, any enhancement over them must keep the compliance with current related laws and regulations. Moreover, such compliance with regulations will improve the users' perception of security in the system and, therefore, their willingness to adopt it.

As we commented previously, the OpenID protocol defines a decentralized SSO solution, where any entity could form part of the system by only implementing the defined protocol. In this section we present the OpenID protocol enhancement needed to deal with the presented reputation framework.

Based on the common OpenID workflow, Fig. 2
                      shows a modified sequence diagram. The principal goal of the reputation framework is depicted in steps 11.1 to 11.5. In these steps, the OpenID provider queries other OpenID providers regarding the reputation of the RP (steps 11.1 and 11.2). How the OpenID provider knows which other OpenID providers have interacted with the RP, therefore having updated reputation values, is described in the following sections. Once collected, the OpenID provider calculates an overall reputation (step 11.3), giving the user of such a system the possibility to receive reputation information about the relying party that she is accessing (step 11.4).

As it is currently considered in the OpenID protocol, the user should provide explicit consent to release the requested attributes. With this enhancement, the user is not only informed about the attributes which would be released, but also she could make that decision based on the reputation of the RP. In other words, the user could cancel the operation if she considers that the RP does not have enough reputation (step 11.5).

Furthermore, this decision could be taken automatically by the OpenID provider based on pre-configured setting made by the users. For instance, the users may establish some rules in their OpenID provider, indicating that if the reputation of the RP has a score of at least 4 out of 5, the attributes will be released without explicit consent.

In case the user decides to continue with the process, the service is actually provided. Eventually, the user has the opportunity to evaluate the RP and provide her feedback to the OP (steps 14.1 and 14.2). The OpenID provider offers some mechanism where the users can rate the service or even provide additional comments. For instance, The OP would show a section in its website showing the pending-evaluation services once they login in the future, or send an email to them with a web page link where they can evaluate the received services.

Such information will be, in turn, used by forthcoming users to keep the most updated reputation value reflecting the current behavior of the RP. Furthermore, the users should be able to modify their recommendations afterwards in case they discover misleading behavior of the service, such as the RP starts to send spam, the conditions of the service change, or it is discovered that the RP reveals private information to third parties.

This section shows the reputation framework designed for enhancing the OpenID users' experience when accessing a relying party. It will describe each one of the components [45], features and processes constituting the whole architecture.

In order to determine how trustworthy an entity is, fulfilling the majority rating evaluation requirement (see Section 4), the first step of any trust and reputation infrastructure is collecting behavioral information about certain entity, in this case, the relying party. To collect as much information as possible, that information (i.e., recommendations) might come from different sources. In this proposal, the recommendations not only come from direct experiences the OP has had with a given RP, but also different recommendations are collected from other OpenID providers.

This enables obtaining accurate reputation values even though the OP does not have enough amount of registered users to obtain recommendations. Furthermore, although external recommendations are being requested, information about the users who provide such recommendations is not released, fulfilling the previously presented privacy requirement.

The first issue to solve when the specified OP wants to compute the reputation of the selected RP is to find those other OpenID providers that might have information about that concrete RP. To this end, we have designed the next subscription/notification mechanism.

As soon as one of the end users of an OP wants to access a certain RP for the first time (the OP has never had any transaction with such RP in the past), then the OP sends a subscription request to that RP. Every RP keeps a list with the most recent OPs that have had an interaction with each of them (and therefore might have recommendations/opinions to provide about such RPs).

Thus, the RP will notify all the OP providers subscribed to it when this list of potential recommenders is updated. This publish/subscribe mechanism makes use of secure communication channels which require previous authentication of the parties to avoid any attacker to inject misleading information.

Additionally, in order to avoid an excessive flooding and overhead, such notification will take place with a certain frequency. Moreover, this frequency will dynamically change throughout the time in order to avoid unnecessarily flooding the system with non-needed messages, while keeping subscribers updated when such information is really necessary.

Hence, this list of OP providers will be sent to the subscribed OPs only when it contains ∆ (Delta) new entries, whereas the actual value of ∆ will determine the real frequency of the notifications. Thus for instance a value of ∆=10 would mean that such list of OPs would not be sent to the subscribers until 10 new entries are inserted in the list.

In order to dynamically adapt such value, every time a user accesses a certain RP through her OP, the value of ∆ would decrease, increasing this way the frequency of notifications, since more users are interested in such RP and therefore the OP needs to have the most up-to-date information as possible. However, after certain time without receiving requests, the associated ∆ would increase (decreasing the frequency of notifications), since the users of the OP are less interested in the services of the RP and the OP does not need to be continuously updated with the latest sources of recommendations for such RP.

Additionally, ∆ would be bounded by a minimum value (to avoid an excessively high frequency of notifications). On the other hand, it should also have a maximum value. This value, when reached, should cause the OP to remove the subscription to that RP, since any of the users of such OP is no longer interested in such RP.

In order to accomplish with the users' preference awareness requirement described in Section 4 and to provide customized and user-tailored reputation information, each query for recommendations issued by the OP comes with the preferences of the end-user related to the provision of the final service (with regards to price, quality of service, delivery time, etc), although without revealing the identity of the user.

Thus, for a given end-user (user
                           
                              i
                           ) a higher weight 
                              
                                 
                                    ω
                                    
                                       use
                                       
                                          r
                                          i
                                       
                                       ,
                                       use
                                       
                                          r
                                          j
                                       
                                    
                                 
                              
                            will be given to those recommendations 
                              
                                 
                                    Re
                                    
                                       c
                                       
                                          use
                                          
                                             r
                                             j
                                          
                                       
                                    
                                    
                                       RP
                                    
                                 
                              
                            coming from a user (user
                           
                              j
                           ) whose service preferences 
                              
                                 
                                    Pre
                                    
                                       f
                                       
                                          use
                                          
                                             r
                                             j
                                          
                                       
                                    
                                 
                              
                            match with the end-user ones 
                              
                                 
                                    Pre
                                    
                                       f
                                       
                                          use
                                          
                                             r
                                             i
                                          
                                       
                                    
                                 
                              
                           , since both share predilections or priorities and therefore the opinions of the former might be very valuable for the latter.
                              
                                 
                                    
                                       
                                          ω
                                          
                                             use
                                             
                                                r
                                                i
                                             
                                             ,
                                             use
                                             
                                                r
                                                j
                                             
                                          
                                       
                                       =
                                       
                                          f
                                          1
                                       
                                       
                                          
                                             Pre
                                             
                                                f
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                
                                             
                                             ,
                                             Pre
                                             
                                                f
                                                
                                                   use
                                                   
                                                      r
                                                      j
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

As to fulfill the incorrectness awareness requirement (see Section 4), when an OpenID is aggregating recommendations about a RP, it establishes a weight to each source of recommendations, both users and other OpenID providers. This weight (
                              
                                 ω
                                 
                                    O
                                    
                                       P
                                       i
                                    
                                 
                              
                            for external OPs and 
                              
                                 ω
                                 
                                    use
                                    
                                       r
                                       i
                                    
                                 
                              
                            for users) represents how much reliable the information given by the recommender is. Depending on this weight factor, the OpenID providers can treat information provided more or less relevant for the overall calculation of the relying party reputation.

This weight factor should be dynamically adapted based on the difference between the recommendations given by a specific recommender and those given by the rest of recommenders. In general, the closer the recommendations given by a specific source are to the average recommendations, the more unlike to be such source biased. Hence, the weight of a given OpenID provider OP
                           
                              i
                           , or a given user user
                           
                              i
                            could be adjusted when a direct recommendation (e.g. given by user
                           
                              j
                           ) is received.
                              
                                 
                                    
                                       
                                          ω
                                          
                                             O
                                             
                                                P
                                                i
                                             
                                          
                                       
                                       =
                                       
                                          f
                                          2
                                       
                                       
                                          
                                             Re
                                             
                                                c
                                                
                                                   use
                                                   
                                                      r
                                                      j
                                                   
                                                
                                             
                                             ,
                                             Re
                                             
                                                c
                                                
                                                   O
                                                   
                                                      P
                                                      i
                                                   
                                                
                                             
                                             
                                                RP
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 
                                    
                                       
                                          ω
                                          
                                             use
                                             
                                                r
                                                i
                                             
                                          
                                       
                                       =
                                       
                                          f
                                          2
                                       
                                       
                                          
                                             Re
                                             
                                                c
                                                
                                                   use
                                                   
                                                      r
                                                      j
                                                   
                                                
                                             
                                             ,
                                             Re
                                             
                                                c
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                
                                             
                                             
                                                RP
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Time awareness requirement shown in Section 4 entails assigning a higher weight to most recent transactions (and, consequently, their corresponding users' recommendations), in contrast to older ones, which might be considered less important. Thus, we are able to more accurately predict the actual current behavior of the given RP. Therefore, each recommendation 
                              
                                 
                                    Re
                                    
                                       c
                                       
                                          use
                                          
                                             r
                                             j
                                          
                                       
                                    
                                    
                                       RP
                                    
                                 
                              
                            is additionally given a weight 
                              
                                 
                                    ω
                                    
                                       t
                                       ,
                                       Re
                                       
                                          c
                                          
                                             use
                                             
                                                r
                                                j
                                             
                                          
                                       
                                       
                                          RP
                                       
                                    
                                 
                              
                            which is obtained as follows:
                              
                                 
                                    
                                       
                                          ω
                                          
                                             t
                                             ,
                                             Re
                                             
                                                c
                                                
                                                   use
                                                   
                                                      r
                                                      j
                                                   
                                                
                                             
                                             
                                                RP
                                             
                                          
                                       
                                       =
                                       
                                          f
                                          3
                                       
                                       
                                          
                                             t
                                             ,
                                             time
                                             
                                                
                                                   Re
                                                   
                                                      c
                                                      
                                                         use
                                                         
                                                            r
                                                            j
                                                         
                                                      
                                                   
                                                   
                                                      RP
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where t is the current instant of time, while time(Rec) is a function returning the time when recommendation Rec was provided.

So once the designed OP receives all the recommendation information from other OpenID providers (step 9.2 in Fig. 2), it has to aggregate it properly in order to compute the final reputation value for a given user of the relying party at a specific time 
                           
                              Reputatio
                              
                                 n
                                 
                                    use
                                    
                                       r
                                       i
                                    
                                    ,
                                    t
                                 
                              
                              
                                 RP
                              
                           
                        .

This reputation computation component should take several elements into account when calculating such score, namely: the recommendations of their user and other end-users belonging to other OpenID providers 
                           
                              
                                 Re
                                 
                                    c
                                    
                                       use
                                       
                                          r
                                          j
                                       
                                    
                                 
                                 
                                    RP
                                 
                              
                           
                        , the weight given to each of those recommendations based on the matching of users' preferences (
                           
                              ω
                              
                                 use
                                 
                                    r
                                    i
                                 
                                 ,
                                 use
                                 
                                    r
                                    j
                                 
                              
                           
                        ), the weight associated to each OP, measuring the reliability of its recommendations 
                           
                              
                                 ω
                                 
                                    O
                                    
                                       P
                                       i
                                    
                                 
                              
                           
                         and the so-called forgetting factor 
                           
                              
                                 ω
                                 
                                    t
                                    ,
                                    Re
                                    
                                       c
                                       
                                          use
                                          
                                             r
                                             j
                                          
                                       
                                    
                                    
                                       RP
                                    
                                 
                              
                           
                        .

The reputation calculation engine of our reputation framework should be designed in such a way that it supports multiple reputation computational models. Different example computation engines are presented in Section 7. Those computation models should be exchanged easily so that the framework can adapt to different scenarios on the fly, based on current conditions or circumstances (computation or network resources, storage resources, number of feedbacks, etc.), as shown in Fig. 3
                        .

The framework would therefore seamlessly select the optimal reputation computation engine depending on the current conditions of the system, with the aim of adapting to those dynamic circumstances and to provide the user with the more accurate reputation scores at every time, without degrading the performance of the system or the user's experience.

As a summary, next we present the steps to be followed by our proposal, as depicted in Fig. 4
                        .
                           
                              1
                              Alice wants to watch a film at RP1.

Alice is redirected to OP1 in order to log-in and therefore share her Open ID with RP1.
                                    
                                       2.1
                                       If OP1 is not subscribed to RP1, OP1 sends a subscription request to RP1.
                                             
                                                2.1.1
                                                RP1 replies with the list of OPs that have interacted with RP1.

If OP1 was already subscribed to RP1, then RP1 decreases the value of ∆ associated to OP1.

OP1 has the list of other OPs that have interacted with RP1 [13] (either because it was previously subscribed and already got it, or because it obtained it in step 2.(a).i). Therefore, OP1 sends a request to each of those OPs, asking for their respective recommendations about RP1. It also sends the preferences of the end-user (Alice in this example) preserving her privacy.

Each queried OP replies with a tailored recommendation based on the received preferences of the end-user.

OP1 collects and aggregates all the received recommendations.

OP1 applies the selected reputation computation mechanism and provides a final reputation score about RP1 to Alice.

Alice then decides, based on such reputation value, whether to trust the RP1 and go on with the process, or finish/cancel here the whole transaction.
                                    
                                       7.1
                                       Alice notifies OP1 about her decision, giving explicit consent to release the requested attributes if she has decided to continue.

If Alice trusts the RP1, then her profile is shared and sent from OP1 to RP1, where she is now logged-in.

RP1 provides the service to Alice, together with an electronic receipt. The RP1 also updates his list of recommenders, including OP1. If applicable, according to the current value of ∆, the OpenID providers subscribed to RP1 are notified with the updated list of recommenders.

Alice assesses her satisfaction with the received service and provides a recommendation about RP1 in her OP1, presenting the electronic receipt obtained in step 9.

OP1 updates its database of recommendations about RP1.

OP1 updates its reliability weights associated to other OPs.

The main objective of the presented reputation framework is to collect and aggregate recommendations from different sources, in order to give additional information to the user about a specific relying party, before accessing its services. As introduced in the previous section, there are different ways to aggregate the collected recommendations, in order to compute the reputation value for a given relying party. These several mechanisms are implemented by the OpenID providers as computation engines, in such a way that each OpenID provider can dynamically choose the engine for calculating the reputation values depending on the system conditions, as shown in Fig. 3.

The results of each computation engine depend on the aspects or elements taken into account when performing the calculation, like users' preferences, among many others. Furthermore, the computation engines not only differ on the way of performing the reputation calculation but also in the resources they need to work. The aim of this section is to introduce different computation engines in order to analyze the feasibility of each of them under certain system conditions.

The first and most straightforward computation engine that we describe is named Average. Being the recommendations provided by users or OpenID providers a real number belonging to the same interval ([0,1], for instance), this engine computes the reputation value for each relying party as an arithmetic mean in the following way.

On the one hand it calculates the arithmetic mean of all the available user recommendations. In case a user provides more than one recommendation about the same relying party, they all have to be taken into account to compute the reputation, but giving more weight to more recent ones. However, in order to avoid having to store all the recommendations given by a user, they are aggregated as soon as they are received by the OpenID provider.

When a user supplies an actual recommendation (in the moment t) the weight given to that recommendation depends on the time passed (∆t) since the last aggregation was calculated 
                           
                              
                                 Re
                                 
                                    c
                                    
                                       use
                                       
                                          r
                                          i
                                       
                                       ,
                                       t
                                       −
                                       Δt
                                    
                                 
                              
                           
                        , as shown in Eq. (1). Notice that ∆t is a number between 0 and t (Δt
                        ∈[0,t]). Hence if ∆t is nearly 0 (i.e. the two recommendations have been given closely in terms of time), they both will be almost equally taken into account, whereas if ∆t is nearly t (i.e. plenty of time has passed between the two recommendations) almost only the new recommendation is considered. In this way, each user has just one recommendation value representing all given recommendations about a relying party, but giving a higher importance to more recent recommendations.
                           
                              (1)
                              
                                 
                                    newRe
                                    
                                       c
                                       
                                          use
                                          
                                             r
                                             i
                                          
                                          ,
                                          t
                                       
                                    
                                    =
                                    
                                       
                                          
                                             1
                                             2
                                          
                                          −
                                          
                                             Δt
                                             
                                                2
                                                t
                                             
                                          
                                       
                                    
                                    Re
                                    
                                       c
                                       
                                          use
                                          
                                             r
                                             i
                                          
                                          ,
                                          t
                                          −
                                          Δt
                                       
                                    
                                    +
                                    
                                       
                                          
                                             1
                                             2
                                          
                                          +
                                          
                                             Δt
                                             
                                                2
                                                t
                                             
                                          
                                       
                                    
                                    Re
                                    
                                       c
                                       
                                          use
                                          
                                             r
                                             i
                                          
                                          ,
                                          t
                                       
                                    
                                 
                              
                           
                        
                     

On the other hand, it calculates the arithmetic mean taking all the previous OpenID provider recommendations about the specific relying party in the same ways as in Eq. (1) too. Finally, it aggregates these two arithmetic means giving a weight to each one (α and β, respectively), as represented in Eq. (2). Such weights, given to the users' recommendations and to the OpenID providers' recommendations respectively, could be adjusted beforehand, for instance by the system administrator, based on the scenario characteristics or other systems conditions.
                           
                              (2)
                              
                                 
                                    Reputation
                                    =
                                    α
                                    
                                       
                                          
                                             1
                                             n
                                          
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                n
                                             
                                          
                                          
                                          Re
                                          
                                             c
                                             
                                                use
                                                
                                                   r
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    +
                                    β
                                    
                                       
                                          
                                             1
                                             m
                                          
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                m
                                             
                                          
                                          
                                          Re
                                          
                                             c
                                             
                                                O
                                                
                                                   P
                                                   i
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     


                        
                           
                              α
                           
                           
                              weight of the users' recommendations

weight of the OpenID providers' recommendations

number of users' recommendations

number of OpenID providers' recommendations

aggregation of recommendations given by the ith user

last recommendation given by the ith OpenID provider

This computation engine extends the previous one by assigning a weight to each user and OpenID provider, so the reputation values are computed performing a weighted average accordingly. The weights are defined with regards to the estimated goodness of each user or OpenID provider, in order to associate a lower importance to the recommendations given by malicious users or malicious OpenID providers when computing reputation values.

The goodness (i.e. the associated weight) of each user and each OpenID provider is calculated from the deviation of its recommendations compared to the recommendations of the rest of users and OpenID providers. For instance, a user will decrease her goodness if she provides low value recommendations while the rest of users provide high value recommendations to the same service, or vice versa. To do so, an initial weight is given to each user and OpenID provider, and they are updated when a user provides a new recommendation.

The weight of the user i at time t 
                        
                           
                              
                                 ω
                                 
                                    use
                                    
                                       r
                                       i
                                    
                                    ,
                                    t
                                 
                              
                           
                         is calculated following Eq. (3).
                           
                              (3)
                              
                                 
                                    
                                       ω
                                       
                                          use
                                          
                                             r
                                             i
                                          
                                          ,
                                          t
                                       
                                    
                                    =
                                    f
                                    
                                       
                                          ω
                                          
                                             use
                                             
                                                r
                                                i
                                             
                                             ,
                                             t
                                             −
                                             1
                                          
                                       
                                       
                                          
                                             Reputation
                                             −
                                             Re
                                             
                                                c
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

While the weight of the OpenID provider i at time t 
                        
                           
                              
                                 ω
                                 
                                    O
                                    
                                       P
                                       i
                                    
                                    ,
                                    t
                                 
                              
                           
                         is calculated by Eq. (4).
                           
                              (4)
                              
                                 
                                    
                                       ω
                                       
                                          O
                                          
                                             P
                                             i
                                          
                                          ,
                                          t
                                       
                                    
                                    =
                                    f
                                    
                                       
                                          ω
                                          
                                             O
                                             
                                                P
                                                i
                                             
                                             ,
                                             t
                                             −
                                             1
                                          
                                       
                                       
                                          
                                             Reputation
                                             −
                                             Re
                                             
                                                c
                                                
                                                   O
                                                   
                                                      P
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Finally, the reputation value at time t is computed as a weighted average given by the formula presented in Eq. (5).
                           
                              (5)
                              
                                 
                                    Reputatio
                                    
                                       n
                                       t
                                    
                                    =
                                    α
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                             
                                             
                                             
                                                ω
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                   ,
                                                   t
                                                
                                             
                                             ⋅
                                             Re
                                             
                                                c
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                             
                                             
                                             
                                                ω
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                   ,
                                                   t
                                                
                                             
                                          
                                       
                                    
                                    +
                                    β
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   m
                                                
                                             
                                             
                                             
                                                ω
                                                
                                                   O
                                                   
                                                      P
                                                      i
                                                   
                                                   ,
                                                   t
                                                
                                             
                                             ⋅
                                             Re
                                             
                                                c
                                                
                                                   O
                                                   
                                                      P
                                                      i
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   m
                                                
                                             
                                             
                                             
                                                ω
                                                
                                                   O
                                                   
                                                      P
                                                      i
                                                   
                                                   ,
                                                   t
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The computation engines shown so far calculate global reputation values representing the opinion of all users as a unique value. However, they do not take into account that each user could have a different expectation about the same service, evaluating it with different values. In order to provide customized reputation information adapted to each user, OpenID providers should be able to compute user-tailored values depending on the similarity between users' preferences or profiles.

In order to measure such similarity, this computation engine takes into account the user preferences. These preferences express the assessment of each user with regards to the properties describing the service. Hence, this computation engine gives a higher weight to those recommendations coming from those other users whose preferences match with the user ones (the user who is currently accessing the service). The preferences assessment could be done when users are registered in the system, or the first time the user tried to access a kind of service. For instance, for a streaming video server the user could establish her predilection about parameters like video quality, audio quality, and price.

The Preferences weighted average computation engine establishes weights based on the similarity of the user preferences when calculating the reputation for a specific user. 
                           
                              pre
                              
                                 f
                                 
                                    use
                                    
                                       r
                                       n
                                    
                                 
                              
                           
                         being the set of preferences of the user n, this engine defines the similarity of user i with regards to user j (sim
                        
                           i,j
                        ) as the deviation of their preferences over a given service parameters, as shown in Eq. (6).
                           
                              (6)
                              
                                 
                                    si
                                    
                                       m
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    =
                                    σ
                                    
                                       
                                          pre
                                          
                                             f
                                             
                                                use
                                                
                                                   r
                                                   i
                                                
                                             
                                          
                                          ,
                                          pre
                                          
                                             f
                                             
                                                use
                                                
                                                   r
                                                   j
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Thus, the reputation for the user j at time t is given by the formula described in Eq. (7).
                           
                              (7)
                              
                                 
                                    Reputatio
                                    
                                       n
                                       
                                          use
                                          
                                             r
                                             j
                                          
                                          ,
                                          t
                                       
                                    
                                    =
                                    α
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                             
                                             
                                             
                                                ω
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                   ,
                                                   t
                                                
                                             
                                             ⋅
                                             si
                                             
                                                m
                                                
                                                   i
                                                   ,
                                                   j
                                                
                                             
                                             ⋅
                                             Re
                                             
                                                c
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                             
                                             
                                             
                                                ω
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                   ,
                                                   t
                                                
                                             
                                             ⋅
                                             si
                                             
                                                m
                                                
                                                   i
                                                   ,
                                                   j
                                                
                                             
                                          
                                       
                                    
                                    +
                                    β
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   m
                                                
                                             
                                             
                                             
                                                ω
                                                
                                                   O
                                                   
                                                      P
                                                      i
                                                   
                                                   ,
                                                   t
                                                
                                             
                                             ⋅
                                             Re
                                             
                                                c
                                                
                                                   O
                                                   
                                                      P
                                                      i
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   m
                                                
                                             
                                             
                                             
                                                ω
                                                
                                                   O
                                                   
                                                      P
                                                      i
                                                   
                                                   ,
                                                   t
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

In turn, the recommendations collected by the OpenID provider from other OpenID providers, before performing the aggregation, are also customized for the specific user preferences.

The previous computation engine calculates a customized reputation value assuming that all users having similar preferences evaluate the same service in a similar way. Additionally, it also assigns a global weight to each user and each OpenID provider estimating her goodness in order to avoid malicious actions.

The Users weighted average engine goes one step further and, instead of assigning just a weight, it establishes one weight for each pair of users and another one for each pair of user-OpenID provider. In this sense, when computing the reputation value for a specific user, this engine gives higher weight to those recommendations coming from users and OpenID providers whose previous recommendations were more similar to those given by the user [46].

The weight associated to the user i for the recommendations of the user j at time t is given by Eq. (8).
                           
                              (8)
                              
                                 
                                    
                                       ω
                                       
                                          use
                                          
                                             r
                                             i
                                          
                                          ,
                                          use
                                          
                                             r
                                             j
                                          
                                          ,
                                          t
                                       
                                    
                                    =
                                    f
                                    
                                       
                                          ω
                                          
                                             use
                                             
                                                r
                                                i
                                             
                                             ,
                                             use
                                             
                                                r
                                                j
                                             
                                             ,
                                             t
                                             −
                                             1
                                          
                                       
                                       
                                          
                                             Re
                                             
                                                c
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                
                                             
                                             −
                                             Re
                                             
                                                c
                                                
                                                   use
                                                   
                                                      r
                                                      j
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

While the weight associated to the user j for the recommendations of the OpenID provider i at time t is given by Eq. (9).
                           
                              (9)
                              
                                 
                                    
                                       ω
                                       
                                          O
                                          
                                             P
                                             i
                                          
                                          ,
                                          use
                                          
                                             r
                                             j
                                          
                                          ,
                                          t
                                       
                                    
                                    =
                                    f
                                    
                                       
                                          ω
                                          
                                             O
                                             
                                                P
                                                i
                                             
                                             ,
                                             use
                                             
                                                r
                                                j
                                             
                                             ,
                                             t
                                             −
                                             1
                                          
                                       
                                       
                                          
                                             Re
                                             
                                                c
                                                
                                                   use
                                                   
                                                      r
                                                      j
                                                   
                                                
                                             
                                             −
                                             Re
                                             
                                                c
                                                
                                                   O
                                                   
                                                      P
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

In this way, the reputation for the user i at time t could be represented as shown in Eq. (10).
                           
                              (10)
                              
                                 
                                    Reputatio
                                    
                                       n
                                       
                                          use
                                          
                                             r
                                             j
                                          
                                          ,
                                          t
                                       
                                    
                                    =
                                    α
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                             
                                             
                                             
                                                ω
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                   ,
                                                   use
                                                   
                                                      r
                                                      j
                                                   
                                                   ,
                                                   t
                                                
                                             
                                             ⋅
                                             Re
                                             
                                                c
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                             
                                             
                                             
                                                ω
                                                
                                                   use
                                                   
                                                      r
                                                      i
                                                   
                                                   ,
                                                   use
                                                   
                                                      r
                                                      j
                                                   
                                                   ,
                                                   t
                                                
                                             
                                          
                                       
                                    
                                    +
                                    β
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   m
                                                
                                             
                                             
                                             
                                                ω
                                                
                                                   O
                                                   
                                                      P
                                                      i
                                                   
                                                   ,
                                                   use
                                                   
                                                      r
                                                      j
                                                   
                                                   ,
                                                   t
                                                
                                             
                                             ⋅
                                             Re
                                             
                                                c
                                                
                                                   O
                                                   
                                                      P
                                                      i
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   m
                                                
                                             
                                             
                                             
                                                ω
                                                
                                                   O
                                                   
                                                      P
                                                      i
                                                   
                                                   ,
                                                   use
                                                   
                                                      r
                                                      j
                                                   
                                                   ,
                                                   t
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

@&#EXPERIMENTS AND RESULTS@&#

This section describes the conducted experiments showing relevant aspects of the system behavior. The results obtained have been analyzed in order to validate the feasibility of the proposed framework. Finally, we summarize the main differences between the presented computation engines.

First of all, it is necessary to investigate the feasibility of the presented reputation solution. One of the main concerns when the framework was evaluated was the capability of malicious relying parties to exploit the reputation system. The point to explore is whether the relying party could easily increase its reputation score, or if it could be done by malicious users or OpenID providers. From this perspective, we have also analyzed the behavior of the different reputation computation engines in different scenarios.

In order to analyze and compare the presented computation engines we have defined a simulation environment, representing the behavior of the reputation framework under different conditions. This section first describes the elements simulated to test and analyze the reputation framework, and secondly it characterizes the parameters used to compare the performance and requirements of different reputation engines.

In order to evaluate the system behavior against different conditions, we have developed a tool able to simulate the actors and entities involved in the system. This tool is able to define virtual scenarios by specifying the amount of users, and the OpenID providers where they belong, and simulate their interactions with a given relying party.

In a scenario, different kind of users, OpenID providers and relying party could be defined, which allow analyzing the resilience to biased recommendations when the reputation is computed. For example, to determine the accuracy of the reputation framework if 20% of the users are providing biased recommendations, or if some of the OpenID providers are not honestly following the protocol. The different kind of actors and entities defined is described below. Furthermore, it could be specified which reputation computation engine the OpenID providers make use of in order to compare their output.

Once the scenario is defined, the developed tool generates random interactions between the different elements, following the previously defined protocol (see Section 6.3). To that end, a predefined number of simulation steps are executed, each of them consisting of a random subset of simulated users asking to their OpenID providers for the reputation value of the relying party, and interacting with it accordingly.


                           Fig. 5
                            depicts the phases executed in each simulation step. When a user requests a reputation value, her OpenID provider collects other OpenID providers and users recommendations, using the publish/subscribe mechanism described in Section 6.1.1, and aggregates them by making use of a specific computation engine.

The computation engines, which were developed within the tool, consist of the implementation of the equations described in Section 7. For example, the implementation of the Average computation engine computes and aggregates the arithmetic mean of the recommendations given by the users and those given by other OpenID providers (see Eq. (2)), assigning the same value to the weights of both the users' recommendations and the OpenID providers' recommendations 
                              
                                 
                                    α
                                    =
                                    β
                                    =
                                    
                                       
                                          1
                                          2
                                       
                                    
                                 
                              
                           .

To compute the similarity function of the Preferences weighted average engine (see Eq. (6)), we have defined 5 aspects (representing for instance price, graphical interface, and usability) and each of them is rated by each user according to their preferences from 0, meaning not important at all, to 5, meaning that this aspect is very important to her. In this sense, the similarity between two users is computed based on the deviation of these preferences values.

Depending on the reputation value given to the user, she accesses (or not) to the relying party service. In the simulation tool, the users will interact with the relying party with a probability p
                           ∈[0,1], p being the reputation value given to the relying party by the OpenID provider each user belongs to. Since this is a simulation environment, there is not a real service offered by the relying party, however this phase, where the user accesses the service, has been added in the figure to represent the real behavior of the system. After the user accesses the relying party, she provides her feedback to the OpenID provider, giving her opinion about how the service was. Finally, the OpenID provider, after receiving the feedback, recalculates the weights of the OpenID providers and users in case the calculation engine needs to do it, using the equations defined in Section 7.

For instance, the weights of the users in the Users weighted average computation engines are adjusted firstly computing the deviation between the feedbacks received for each pair of users, and then decreasing or incrementing their associated weights according to that deviation.

At the end of each simulation step, the tool logs the details of reputation framework, such as the average reputation given by each OpenID provider, the reputation received by each user, and the real quality received from the relying party. Executing several steps, the simulation gives information enough to analyze the behavior of the reputation framework against the defined scenario.

Moreover, simulations take into account possible attacks which could make the system vulnerable [39]. In order to define the elements taking part in the system, some premises regarding the relying party have been considered:
                              
                                 •
                                 The quality of service offered by a given relying party could vary during the time. For instance, a relying party providing good quality of service (therefore having a good reputation) could suddenly change its behavior and start giving a bad quality of service.

A given relying party could influence the reputation score that each OpenID provider calculates about it. To this end, when an OpenID provider asks the relying party for the list of other OpenID providers having updated recommendations about such relying party, the relying party could decide to answer only with the OpenID providers which recommend it with high score.

A given relying party could decide not to participate in the reputation framework. Hence, when an OpenID provider asks it for the list of OpenID providers which have had interaction with this relying party, it does not provide anything. It could take place either if the relying party prefers not to participate in order to avoid low score recommendations, or in case the relying party cannot implement the reputation framework, for instance due to lack of resources.

In the same sense, it should be taken into consideration that malicious users, or even malicious OpenID providers could be present in the system. With the term malicious we are referring, in this context, to those users or entities which try to degrade the reliability of the reputation framework. For instance, trying to ill-intentionally increase or decrease the reputation of a specific relying party.

Taking these considerations, we have defined different types of users, OpenID providers and relying parties acting in the system, as follows:
                              
                                 •
                                 Types of users:
                                       
                                          -
                                          Normal: These users provide appropriate recommendations according to the relying party quality of service.

Negative raters: This kind of user always provides low recommendation when giving the feedback, regardless of the relying party quality of service.

Positive raters: This kind of user always provides good recommendation values when giving the feedback, regardless of the relying party quality of service.

Types of OpenID providers:
                                       
                                          -
                                          Normal raters: These OpenID providers represent the normal behavior within the system. That is, they collect user recommendations and other OpenID recommendations about the relying party, in order to calculate an accurate reputation value. When other OpenID providers ask them for the reputation value, they provide the calculated one.

Negative raters: Negative raters OpenID providers always give bad recommendation about the relying party (regardless the quality of service) trying to decrease the relying party global reputation.

Positive raters: Positive raters OpenID providers always give good recommendation about the relying party (regardless the quality of service) trying to increase the relying party global reputation.

Camouflaged positive raters: This kind of OpenID provider is an extension of the previous one. They give good recommendation, regardless the real quality of service, but only p% of the times. The rest of times, (100-p)%, they have a normal behavior.

Sybil positive raters: Sybil positive raters OpenID providers always provide good recommendation (regardless the quality of service), but additionally, after a while they are disconnected and replaced with a new identity. These providers try to perform the Sybil attack [47], where a single malicious entity can present multiple identities, issuing a substantial fraction of the recommendations of the system.

Types of relying party:
                                       
                                          -
                                          Normal: The relying party acts normal. When an OpenID provider asks for the list of OpenID providers with whom it recently interacted, it gives the real list.

Malicious: The relying party, when queried to get the OpenID providers with whom it recently interacted, it always delivers a list containing the ones with better recommendations about itself.

Sybil: The relying party, after a while, is disconnected and replaced with a new identity. This allows the relying party to reset its associated reputation, since it will be seen as a new entity.

Not participative: The relying party does not return the OpenID providers with whom it has recently interacted.

These actors and entities interact with each other simulating different environments where the reputation system could be deployed. The purpose of the simulations is to know if the users applying this solution will be properly informed about the quality of the requested services before accessing them. That is, if the reputation framework is able to compute a correct and accurate reputation value despite the aforementioned malicious elements.

Once we have presented the different types of users, OpenID providers and relying parties that we are considering for our simulations, we will analyze different system or environment conditions and study their influence in each of the reputation engines described in Section 7. Furthermore, we will apply several performance measurements in order to assess the reliability of each of those computation engines. Such study will allow us to identify which is the most suitable engine for each situation, depending on the scenario requirements (more accuracy, more resilience, etc), and the current system conditions (network resources, number of collected feedbacks, etc).

Next we present several parameters describing the system conditions that could mainly influence each of the considered reputation engines. Simulation outcomes shown later will determine the adaptability of each engine with regards to each system condition.
                              
                                 •
                                 Number of users: This parameter represents the amount of end users participating in the system.

Number of OpenID providers: It represents the amount of OpenID providers participating in the system.

User participation: This parameter specifies how participative the users are within the system. In other words, it indicates whether the users participating in the system are being active and continually requesting services to make the reputation framework efficiently work.

Network resources: It indicates how many network resources (in terms of bandwidth, for instance) are present in the system.

Computer resources: It indicates how many computer resources (in terms of computation capacity, storage, etc.) every OpenID provider has, on average.

In order to study the feasibility of each reputation engine, we have defined several performance measurements as described next:
                              
                                 •
                                 Accuracy: This measurement indicates how similar the computed reputation score with regards to the actual goodness or behavior of the corresponding relying party is.

User satisfaction: This measurement indicates the similarity between the reputation score provided by the framework to a user (regarding a concrete relying party) and the actual satisfaction or feedback of that user (with that specific relying party).

Adaptability: This measurement indicates the ability of the reputation engine to quickly and accurately react to sudden changes in the behavior of the relying party, by recalculating an appropriate new reputation score.

Behavior with malicious users: This measurement indicates the level of resilience of the analyzed engine with regards to malicious users.

Behavior with malicious OpenID providers: This measurement indicates the level of resilience of the analyzed engine with regards to malicious OpenID providers.

Several tests have been performed in order to analyze the presented computation engines against the system conditions presented in Section 8.1.2. This section summarizes the main tests performed presenting preliminary results about each of those system conditions.

There are computation engines which need a large amount of users to achieve an optimal performance. On the other hand, there are computation engines whose behavior is not affected by the number of users acting in the system. In order to determine this condition, we have performed tests simulating different OpenID providers, including malicious ones, changing the amount of users belonging to each of these OpenID providers.

In the tests deploying several malicious OpenID providers, trying to raise the reputation value of the relying party, we have realized that the more users are deployed in the system the more accurate some models are. A summary of the results of these experiments is shown in Fig. 6
                           . They show that the Average computation engine does not depend on the number of users at all, but in other factors, such as the percentage of malicious users as we show later on. That is, the result of an arithmetic mean does not depend on the number of addends if all of them are equals. Both Weighted average and Preferences weighted average engines get better results when there are more users in the system, although they do not need a vast amount of users to get good results. That is why the weight given to a specific user is mainly based on the recommendations of the rest of the users. The more users participating, the more recommendations there are and, therefore, the more precise the weights are. Yet, the Users weighted average engine needs about 100 users per OpenID provider to achieve an accuracy of 97%. That is due to the fact that this model, for each user, needs other users with similar behavior to obtain an adapted reputation value.

Extending the previous point, we analyzed the number of OpenID providers that each computation engine needs in order to get an optimal performance. This time, we have simulated different scenarios containing all types of users, changing the amount of OpenID providers which provide recommendations about a given RP, but maintaining the amount of users in each of them.

For some calculation engines, the number of OpenID providers does not affect the accuracy of the system. However, there are other calculation engines where tests have shown that the accuracy and user satisfaction could grow when increasing the number of OpenID providers. However, when this number reaches an upper limit, then the behavior remains constant. That is, from a specific point the accuracy does not improve even if the number of OpenID providers increases. For instance, Fig. 7
                            shows the results of the user satisfaction, supposing that there are just 2 users supplying recommendations on each OpenID provider.

These results are in fact related with the results of the number of users in the system, in the sense that if the OpenID providers do not have enough users belonging to them, they cannot offer adapted reputation values, because they do not have enough recommendations. However, these OpenID providers could increase the number of recommendations asking other OpenID providers.

On the one hand, Average and Weighted average engines do not need too many OpenID providers to reach such upper limit, since the recommendations given by their users are usually enough. On the other hand, Preferences weighted average and Users weighted average engines need more recommendations to calculate accurate reputation values. Therefore, they work better if they ask other OpenID providers for recommendations when there are not enough users on each OpenID provider.

Besides the number of users and OpenID providers in the system, the accuracy of some models also depends on the participation of the users in the system. For example, even if there were a lot of users belonging to a specific OpenID provider, such OpenID provider might not be able to compute a reliable reputation value if its users are not regularly providing feedbacks.

In order to analyze this parameter, we have simulated similar scenarios than in the previous tests, but in this case modifying the frequency of participation of the users in the system, therefore providing more or less feedbacks. As shown in Fig. 8
                           , in general terms, the frequency of users participation does not affect to the Average computation engine accuracy, since few recommendations are needed to reach an upper limit using this engine, as previously shown. Nevertheless, in other simulated scenarios where there are not many users or several malicious OpenID providers has been deployed, the rest of the computation engines, specially the Users weighted average one, could be linked to this parameter. Since these models have to adjust the weight related to each of its users, they require the users providing more recommendations to successfully adjust such weights.

In order to collect external recommendations, the OpenID providers have to send queries to other OpenID providers, which in turn have to send the response back containing the recommendation. So then, the more recommendations a computation engine needs to collect the more network resources it requires.

Since the Average and Weighted average models do not adapt the reputation values to each user, they collect global recommendations. In this sense, once collected the external recommendations, they can be used to compute the reputation value of any of the users. They just need to ask an OpenID provider for recommendations again, when the previously collected recommendations are out of date.

On the other hand, the Preferences weighted average and the Users weighted average models should collect different recommendations for each user (or group of users). Therefore, the network resources that these computation engines require to work are higher.

All models need to store collected recommendations, both user feedbacks and other OpenID recommendations, in order to apply the computation algorithm to calculate the reputation. Furthermore, some calculation engines also make use of additional information to avoid malicious behaviors or to get adapted reputation values.
                              
                                 •
                                 The Average computation engine just needs to store and compute the users and OpenID provider recommendations.

The Weighted average engine has to store the weight of each user and OpenID provider, which should be also adapted after receiving the user feedback.

Additionally, the Preferences weighted average engine has to store the preferences of each user, which has to be also computed in order to determine the similarity between users.

The Users weighted average engine stores a weight for each pair of users and each pair of user-OpenID provider which could require a vast amount of computer resources if there are lot of users deployed in the OpenID provider, although it could be avoided by making use of grouping techniques. In addition, it should compute a reputation value for each user.

Thus, the Average computation engine is the one needing fewer resources, among the studied engines.

This section presents the results achieved in order to evaluate the performance measurements between the different computation engines described in Section 7.

All studied models obtain good accuracy measurements supposing nice conditions in the simulated environment, that is, without adding malicious components, as depicted in the Fig. 7a. Taking into account that the users will access the relying party with a probability given by the reputation value, this plot shows the percentage of users which has accessed the offered service when the relying party has a specific quality of service. Therefore, the percentage of user connections should be equal to the quality of service (expressed as a percentage) of the relying party if the model has optimal accuracy. For instance, if the relying party has a quality of service of 30%, the closer the percentage of user connections to 30% is, the more accurate the model is.

However, when there are malicious components in the system the accuracy of the reputation values given by the OpenID providers could be reduced. As shown in Fig. 7b, the accuracy of the Average computation engine is reduced in scenarios containing malicious elements, since it does not implement any mechanism to evaluate the goodness of the collected recommendations. The rest of the computation engines calculate more accurate recommendation values even receiving unsuitable recommendations, since these engines are, in certain way, resilient to malicious users or OpenID providers, as we will discuss in the following sections.

By performing some experiments under normal conditions, that is, without malicious OpenID providers or malicious users, we have demonstrated that the Preferences weighted average and Users weighted average engines provide significantly more adapted reputation values to the users. This is due to the fact that these computation engines, when calculating the reputation for a specific user, they associate a higher importance to the recommendations given by other users with similar behavior. A summary of the performed test is depicted in Table 1
                           .

Average and weighted average computation engines, although they accurately calculate the average reputation value, they do not provide correct reputation value to those users whose opinions are far from the average.

If a relying party has good reputation but it suddenly starts to provide bad services, it should be quickly detected by the reputation system. Some tests have been performed in this direction in order to detect how long the different engines take to discover the new quality of service of the relying party. Fig. 8c shows general result of these tests, supposing that a relying party radically changes its quality of service. Considering an iteration the process where all users perform the execution phases, previously described, it indicates the accuracy of the computation engines calculating the reputation value after a given number of iterations.

The Average computation engine takes several iterations to find the updated quality of service, because during some iterations it still takes into account past recommendations related to the previous reputation value. The Weighted average punishes inaccurate recommendations, either given by malicious users or out of date, so it quickly adapts to the current reputation value.

Those computation engines which base the weights on the similarity between users take more time to adapt the reputation value to the current quality of service, specially the Users weighted average one. That is due to the fact that they should readjust all the weights after the quality of service changes, so they need a higher amount of feedbacks. In general, the more users deployed in the system the longer the computation engine takes to discover the new quality of service.

Although under nice conditions the presented computation engines have demonstrated to calculate accurate reputation values, they also have to be resilient against user attacks. By modifying the percentage of malicious users distributed throughout the system, we have performed different tests in order to analyze this parameter, whose outcomes are summarized in Fig. 8a.

The inaccuracy of the Average engine directly depends on the percentage of the malicious users, since it does not implement any mechanism to detect them. The Weighted average engine is, to some extent, resilient to malicious users, since it will provide less weight to those user opinions which are not similar to the rest of the user opinions. Additionally, the Preferences weighted average is slightly less resilient against malicious users, since the weights it provides are also depending on the users' preferences.

Finally, the Users weighted average engine is the most resilient to malicious users due to the fact that it tries to match users who are providing similar feedbacks. Therefore, the users providing inappropriate feedbacks will not be taken into account by the users which provide feedbacks according to the relying party quality of service.

Similar to the previous section, we have investigated the behavior of the engines against malicious OpenID providers. A summary of testing different scenarios, modifying the percentage of OpenID providers, is shown in Fig. 8b.

Except for the Average computation engine, which does not implement any mechanism to detect malicious OpenID providers, the computation engines are resilient to malicious OpenID providers, in general. If the recommendations given by a specific OpenID provider are not related to the feedbacks provided by the users, the weight of such OpenID provider decreases notably, skipping its recommendations in future interactions.

@&#SUMMARY@&#

Conducted experiments have proven the feasibility of the reputation framework, since the evaluated computation engines have shown a good performance, providing accurate reputation values and good user satisfaction, even in the case where several malicious entities were present in the system.

The reputation values are not determined by the honesty of the relying party, i.e., whether it is malicious or not. Instead, the reputation values could be conditioned by the number of malicious OpenID providers, although they could be avoided by the reputation computation engine. For instance, if there is no OpenID provider highly scoring a given malicious low-quality relying party, such relying party is not able to interact with any OpenID provider. In case there are OpenID providers highly scoring this concrete relying party, these OpenID providers could be marked as malicious by the computation engine. Therefore, their recommendation could not be taken into consideration.

Besides, one of the main conclusions reached after performing these simulations is that there is not an ideal computation engine which can be used in every environment. Instead, their performance depends on the current conditions present in the system. For instance, if we have to deploy the reputation framework in a system where just a few users are going to interact, or these users are not so active, we will probably have to make use of the Average or Weighted average computation engine, since the other engines need many feedbacks to acquire good accuracy in the reputation values.

Likewise, although the Preferences weighted average and the Users weighted average computation engines provide more adapted reputation values, they need more network and computer resources to be deployed, so in systems having limited resources they are not a good option. Table 2
                         summarizes a comparison between different computation engines regarding the system conditions.

Besides the system conditions, the choice of the computation engine should also depend on the specific performance demands of the application scenario. For instance, if an OpenID provider wanted to provide adapted recommendation to their users, it should choose the Preferences weighted average or Users weighted average engine. However, if it needs an engine which quickly detects the changes of the relying party quality of service, it should select the Weighted average engine instead, although it has less user satisfaction. Table 3
                         summarizes the performance measurements outcomes.

Finally, it is worth mentioning that the OpenID provider should be able to dynamically choose the computation engine, selecting in each case the one giving more accurate reputation values, depending on the system conditions and the expected performance parameters. To this end, we are currently investigating a new and novel system capable of analyzing such system conditions on-the-fly, and to select the computation engine that better fits with the defined (expected) performance metrics.

@&#CONCLUSIONS AND FUTURE WORK@&#

In the current Internet there are many service providers, most of them are being aimed to provide appropriate services while some others are not so well intended. In this context, it is interesting for any end user to have mechanisms to determine how trustworthy a particular service provider is, so she can decide if she wants to interact with it or not. It is particularly interesting if this service is requesting some of her personal information (email address, bank account, age, etc.) before granting access to any of the resources the service provider has.

This is a problem that should be addressed before starting the interaction with the system, i.e., before sending the end user attributes to the service provider. To this end, IdM solutions need to be adapted and enhanced with particular mechanisms enabling the provisioning of certain meta-information to the user on the particular service provider being accessed.

One of the SSO-enabled IdM solutions most widely developed nowadays is OpenID. A lot of service providers and certain key IdM providers are including this standard solution as part of the authentication and basic access control services provided to their end users. However, OpenID in its current definition can be used by a malicious service provider to gain access to the private attributes of users and make profit with them.

To provide end users with valuable behavioral information on the different service providers, this paper is defining a reputation framework and how it can be applied to an extended version of the OpenID protocol. In this way, this paper is describing a solution helping to mitigate this problem. It is based on the idea that users can provide a recommendation level on a particular service and it is later being aggregated by the OpenID provider and provided to any other potential user that might be interested to interact with the same service provider in the future. With this help, authors are provided with a mechanism aimed to increase their level of satisfaction with the OpenID system.

Performed experiments show that the reputation values are not determined by the honesty of the relying party. Furthermore, although the reputation values could be conditioned by the number of malicious users and OpenID providers, they can be avoided by certain reputation computation engines. We have analyzed different reputation computation engines, so the different pros and cons can be determined.

As for future work, since there is not a perfect reputation computation engine, that is, suitable for each conditions, we are developing a mechanism to perform a dynamic and automatic selection of the most convenient reputation computation engine at each moment based on the current system conditions and the specified performance measurements. Finally, such mechanism will comprise a smooth transition between computation engines.

@&#ACKNOWLEDGMENT@&#

This research work has been partially funded by the Next-Generation Hybrid Broadcast Broadband (HBB-NEXT) EU research project, FP7-ICT-2011.1.5, grant no.: 287848.

@&#REFERENCES@&#

