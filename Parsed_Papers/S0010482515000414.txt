@&#MAIN-TITLE@&#Respiratory rate extraction from single-lead ECG using homomorphic filtering

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A new technique for the EDR extraction using homomorphic filtering is proposed.


                        
                        
                           
                           The performance of proposed EDR technique depends on selection of filter type.


                        
                        
                           
                           Results of proposed scheme are significantly better than R Peak amplitude algorithm.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

ECG

Respiration

ECG derived respiration (EDR)

Homomorphic filtering

DFT

@&#ABSTRACT@&#


               
               
                  In this paper a new technique for the extraction of respiratory signal from the single-lead ECG using generalized homomorphic filtering is presented. It is proposed to perform band pass filtering on the cepstrum of the ECG signal to extract the respiratory signal. For this study, transforms used in generalized homomorphic filtering are the discrete Fourier transform (DFT) and the discrete cosine transform (DCT). The performance of the ECG-derived respiration (EDR) signal obtained using the proposed method is compared with the reference respiratory signal in terms of the correlation, magnitude squared coherence coefficients and breath rate accuracy. It is observed from the comparisons that the EDR technique based on generalized homomorphic filtering using DFT performs better than the homomorphic filtering using DCT. The proposed EDR technique is also compared with the two well-known EDR techniques: principal component analysis and R peak amplitude algorithm. It is seen from the results that the proposed EDR technique (R
                     DFT) performs significantly better than the R peak amplitude algorithm, but significant improvements are not observed when compared with the PCA based EDR technique.
               
            

@&#INTRODUCTION@&#

Respiratory signal is measured using inductive plethysmograph, spirometer and impedance pneumograph. During the respiration process, some morphological changes in the ECG signal arise due to some mechanisms such as: i) the volume of lung changes during inspiration and expiration which causes change in electric impedance of thorax [1], and ii) changes in the heart vector with respect to ECG electrodes [2]. These changes in the ECG signal occur due to the respiration process which can be separated using appropriate signal processing techniques. Thus, extraction of the respiratory signal from the ECG is called ECG derived respiration (EDR). Extraction of the respiratory signal from the ECG signal provides facility of simultaneous study of cardiac activity and the respiration, as it reduces the cost of healthcare system. Moreover, looking for the derived respiratory signal from the ECG provides the benefit of not interfering with natural breathing and noise.

A wide range of the EDR algorithms have been developed in the last twenty years. The EDR technique based on amplitude demodulation of the ECG signal was proposed in [3]. The single-lead EDR algorithms to identify the beat-to-beat amplitude variation of the QRS complex or T wave to monitor the respiratory signal are discussed in [4–6]. These techniques are associated with the variations in the thoracic impedance due to the respiration process. The EDR techniques proposed in [4–6] are suitable to study beat to beat variations but are not robust in case of noisy ECG signals because noise directly affects amplitude of the R peaks of the ECG signal. Filtering of ECG signals in predefine respiratory frequency band is also a well-known technique to extract the respiratory signal from the ECG [7–9]. The filtering techniques for extraction of the respiratory signal from the ECG are not suitable when respiratory frequency lies outside the predefined respiratory frequency band. It is seen from previous studies that the filtering techniques are more efficient in noisy environment as compared to other EDR techniques. [8]. The discrete wavelet transform (DWT) technique to derive the respiratory signal from the ECG is proposed in [10]. The DWT technique is computationally viable but this technique is not good to retain the actual shape of respiratory signal because shape of the extracted respiratory signal strongly depends on used mother wavelet. Also, the performance of the DWT based EDR technique decreases as respiration rate decreases [8]. The empirical mode decomposition (EMD) technique is being used into a number of applications and it has also emerged as a tool for time-frequency analysis. The EMD technique is a data driven technique with high computational cost which determines the oscillatory modes present in the signal and it has been used to monitor the respiratory signal from the ECG in [10,11]. Recently, Langley et al. [12] introduced principal component analysis (PCA) to obtain beat-to-beat variation in the ECG signal and extracted the respiratory signal on the concept of maximum variability with the assumption of linear relation between the respiratory signal and the ECG signal. The improved form of PCA is proposed by Widjaja et al. [13] as Kernel principal component analysis (KPCA) to deal with non-linearity between the ECG and respiratory signals in order to overcome the drawback of linear PCA. In the KPCA technique, optimization of the unknown parameter (sigma) of used kernel function and effect of noise (present in the ECG signal) on the derived respiratory signal are still difficult to analyze.

Homomorphic filtering is a well-known technique for signal and image processing, involving a nonlinear mapping to a different domain in which the linear filter techniques are applied, followed by mapping back to the original domain [14]. In this paper, a new technique for the extraction of respiratory signal from the single-lead ECG using generalized homomorphic filtering is proposed. The main motivation for using the homomorphic filtering as EDR technique stems from the assumption that the ECG signal is generated from the convolution of electrical signals of heart activities and the transfer function of a LTI system which is influenced by the respiratory process. In this paper, we will address the homomorphic filtering approach that de-convolves the ECG components in order to separate the respiratory signal.

The rest of the paper is organized as follow: a brief overview of the homomorphic filtering technique is discussed in Section 2. In Section 3, the methodology and assessment of the performance of the different EDR algorithms are presented. The comparison of results of the proposed technique with the existing EDR methods is provided in Section 4. Finally, Section 5 concludes this paper.

In many signal processing applications, the homomorphic filtering technique is used to remove multiplicative noise from the signal [14,15]. The concept used in homomorphic filtering is to transform convolved components of a given signal into additive form where linear filtering can be applied to separate the desired signal components. The block diagram representation of homomorphic filtering is shown in 
                     Fig. 1 which shows the basic steps involved in the homomorphic filtering technique [14].

The block diagram for de-convolution of the input signal in its components is shown in Fig. 1(a). Let us assume a signal 
                        s
                        (
                        n
                        )
                      which is generated through the convolution of two components 
                        
                           
                              s
                           
                           
                              1
                           
                        
                        (
                        n
                        )
                     and 
                        
                           
                              s
                           
                           
                              2
                           
                        
                        (
                        n
                        )
                     , i.e.,
                        s
                        (
                        n
                        )
                        =
                        
                           
                              s
                           
                           
                              1
                           
                        
                        (
                        n
                        )
                        ⊗
                        
                           
                              s
                           
                           
                              2
                           
                        
                        (
                        n
                        )
                     , where 
                        ⊗
                      denotes convolution operator. The characteristic function 
                        D
                        (
                        .
                        )
                     , shown in Fig. 1(b), conveys the property
                        
                           (1)
                           
                              D
                              [
                              a
                              
                                 
                                    s
                                 
                                 
                                    1
                                 
                              
                              (
                              n
                              )
                              ⊗
                              b
                              
                                 
                                    s
                                 
                                 
                                    2
                                 
                              
                              (
                              n
                              )
                              ]
                              =
                              a
                              D
                              [
                              
                                 
                                    s
                                 
                                 
                                    1
                                 
                              
                              (
                              n
                              )
                              ]
                              +
                              b
                              D
                              [
                              
                                 
                                    s
                                 
                                 
                                    2
                                 
                              
                              (
                              n
                              )
                              ]
                              ,
                           
                        
                     where 
                        a
                      and 
                        b
                      are scalars and the system 
                        D
                        (
                        .
                        )
                      is invertible. It can be seen from Fig. 1(b) that the signal is first transformed in the Fourier domain using the discrete Fourier transform where convolution becomes multiplication and then logarithmic function is applied followed by the inverse discrete Fourier transform (IDFT). These steps are used to transform multiplicative components of the signal into additive form into log domain so that the linear operations can be applied. The output of the characteristic system 
                        D
                        (
                        .
                        )
                      is called complex cepstrum 
                        
                           s
                           ^
                        
                        (
                        n
                        )
                      which is input for the linear system.

The homomorphic system passes the desired signal unaltered but it removes undesired components of the signal with the help of some linear operations. Therefore, the characteristic function 
                        D
                        (
                        .
                        )
                      is applied to the signal 
                        s
                        (
                        n
                        )
                      to remove the undesired signal components using the linear filtering techniques. Thus, we can write
                        s
                        (
                        n
                        )
                     as
                        
                           (2)
                           
                              s
                              (
                              n
                              )
                              =
                              
                                 
                                    s
                                 
                                 
                                    1
                                 
                              
                              (
                              n
                              )
                              ⊗
                              
                                 
                                    s
                                 
                                 
                                    2
                                 
                              
                              (
                              n
                              )
                              .
                           
                        
                     
                     
                        
                           (3)
                           
                              
                                 s
                                 ^
                              
                              (
                              n
                              )
                              =
                              D
                              
                                 {
                                 
                                    s
                                    (
                                    n
                                    )
                                 
                                 }
                              
                              =
                              
                                 
                                    
                                       s
                                       ^
                                    
                                 
                                 
                                    1
                                 
                              
                              (
                              n
                              )
                              +
                              
                                 
                                    
                                       s
                                       ^
                                    
                                 
                                 
                                    2
                                 
                              
                              (
                              n
                              )
                              .
                           
                        
                     
                  

If the given input signal 
                        s
                        (
                        n
                        )
                      to the characteristic system 
                        D
                        (
                        .
                        )
                      is real than the complex cepstrum 
                        
                           s
                           ^
                        
                        (
                        n
                        )
                      at the output is also real. It can be seen from (3) that the signal components appear in additive form in log domain where the linear system 
                        L
                      can be applied to separate undesired signal components from the composite. Hence, output of the linear system can be represented as
                        
                           (4)
                           
                              
                                 y
                                 ^
                              
                              (
                              n
                              )
                              =
                              L
                              {
                              
                                 
                                    
                                       s
                                       ^
                                    
                                 
                                 
                                    1
                                 
                              
                              (
                              n
                              )
                              +
                              
                                 
                                    
                                       s
                                       ^
                                    
                                 
                                 
                                    2
                                 
                              
                              (
                              n
                              )
                              }
                              =
                              
                                 
                                    
                                       y
                                       ^
                                    
                                 
                                 
                                    1
                                 
                              
                              (
                              n
                              )
                              +
                              
                                 
                                    
                                       y
                                       ^
                                    
                                 
                                 
                                    2
                                 
                              
                              (
                              n
                              )
                              .
                           
                        
                     
                  

For a given input sequence 
                        s
                        (
                        n
                        )
                     , DFT may have large number of zeros at the origin which shift the phase by large amount. To retain the information of interest, linear phase shift needs to remove before getting complex cepstrum 
                        
                           s
                           ^
                        
                        (
                        n
                        )
                     . The signal obtained at the output of linear system has to retain in its original form and this is carried out by first applying discrete Fourier transform (DFT) to the signal 
                        
                           y
                           ^
                        
                        (
                        n
                        )
                      and then exponential operation followed by the IDFT which provides the required signal at the output. Thus, the output of inverse homomorphic de-convolution can be written as
                        
                           (5)
                           
                              y
                              (
                              n
                              )
                              =
                              
                                 
                                    D
                                 
                                 
                                    −
                                    1
                                 
                              
                              {
                              
                                 
                                    
                                       y
                                       ^
                                    
                                 
                                 
                                    1
                                 
                              
                              (
                              n
                              )
                              +
                              
                                 
                                    
                                       y
                                       ^
                                    
                                 
                                 
                                    2
                                 
                              
                              (
                              n
                              )
                              }
                              =
                              
                                 
                                    y
                                 
                                 
                                    1
                                 
                              
                              (
                              n
                              )
                              ⊗
                              
                                 
                                    y
                                 
                                 
                                    2
                                 
                              
                              (
                              n
                              )
                              .
                           
                        
                     
                  

Hence, we can separate required components from the input signal 
                        s
                        (
                        n
                        )
                      using the homomorphic de-convolution. In case of the ECG signal as input to the homomorphic filtering, it is possible to separate the respiratory component from the ECG by using the homomorphic filtering technique because it is assumed that the ECG signal is convolved output of electric signals of heart activities and the transfer function of a LTI system which is influenced by respiratory process then.

@&#METHODS@&#

The data from the Fantasia database are used in this work which is available at physioNet [17]. This database includes simultaneously recorded ECG as well as respiration signal with the sampling rate of 250Hz. The database contains the recording of twenty young subjects (21–34 years old) and twenty elderly subjects (68–85 years old). All subjects were in resting state and watched the movie Fantasia (Disney, 1940) to help maintain wakefulness. For experimental purpose, a 5min segment of recording from each subject is selected manually in such a way that selected segment is not affected by movement artifacts and abrupt changes.

For the application of respiratory signal extraction, the ECG signal is first preprocessed to remove the supply interference and baseline wander. Therefore, the ECG signal is passed through a notch filter (60Hz) to remove supply interference and then the baseline wander is removed using the FIR high pass filter (20th order) using Kaiser window with cut-off frequency of 0.05Hz. The shape of the Kaiser window is determined by a control parameter beta (
                           β
                        ). In this work, the value of control parameter is taken four (
                           β
                        =4). Now, the preprocessed ECG signal is used for the extraction of respiratory signal.

Analysis and modeling of the ECG signal using homomorphic filtering was first proposed in [16] where four types of ECG signals were selected and de-convolved through cepstrum filtering to extract more features and components for diagnostic purpose. The linear filtering techniques can be applied on the cepstrum of ECG to extract the signal of interest. Generally, the respiratory signal is a low frequency signal and its frequency varies in the band of 0.2–0.8Hz [8,9]. In the proposed technique, it is assumed that the ECG signal is convolved output of electrical signals generated from heart activities and the transfer function of a LTI system which is influenced from the respiratory process. A block diagram is shown in 
                        Fig. 2 which describes steps involved in extraction of the respiratory signal from the ECG using the homomorphic filtering technique. Based on the homomorphic de-convolution concept, let us assume that the ECG signal 
                           s
                           (
                           n
                           )
                         has 
                           k
                         components 
                           (
                           
                              
                                 s
                              
                              
                                 1
                              
                           
                           (
                           n
                           )
                           ,
                           
                              
                                 s
                              
                              
                                 2
                              
                           
                           (
                           n
                           )
                           ,
                           ....
                           .
                           
                              
                                 s
                              
                              
                                 k
                              
                           
                           (
                           n
                           )
                           )
                        . By applying de-convolution property of characteristic system 
                           H
                        , components of 
                           s
                           (
                           n
                           )
                         can be written as
                           
                              (6)
                              
                                 H
                                 
                                    [
                                    
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                       
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                       ⊗
                                       
                                          
                                             a
                                          
                                          
                                             2
                                          
                                       
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       (
                                       n
                                       )
                                       ⊗
                                       ....
                                       .
                                       ⊗
                                       
                                          
                                             a
                                          
                                          
                                             k
                                          
                                       
                                       
                                          
                                             s
                                          
                                          
                                             k
                                          
                                       
                                       (
                                       n
                                       )
                                    
                                    ]
                                 
                                 =
                                 
                                    
                                       a
                                    
                                    
                                       1
                                    
                                 
                                 H
                                 [
                                 
                                    
                                       s
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 n
                                 )
                                 ]
                                 +
                                 
                                    
                                       a
                                    
                                    
                                       2
                                    
                                 
                                 H
                                 [
                                 
                                    
                                       s
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 n
                                 )
                                 ]
                                 +
                                 ....
                                 .
                                 +
                                 
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 H
                                 [
                                 
                                    
                                       s
                                    
                                    
                                       k
                                    
                                 
                                 (
                                 n
                                 )
                                 ]
                                 .
                              
                           
                        
                     

Here 
                           n
                         varies from 1 to N, and N denotes the total number of samples in the ECG signal. It can be observed from (6) that some signal components are separable in complex cepstrum 
                           
                              s
                              ^
                           
                           (
                           n
                           )
                         under some conditions whereas the signal components were not separable in the original signal 
                           s
                           (
                           n
                           )
                        . Thus, by applying band pass filtering on the cepstrum of ECG signal, the respiratory signal can be extracted in log domain. To retain the signal 
                           
                              y
                              ^
                           
                           (
                           n
                           )
                         in its original domain, inverse characteristic function 
                           
                              
                                 H
                              
                              
                                 −
                                 1
                              
                           
                         is performed.

In the homomorphic filtering approach, many possible equivalent representations of the characteristic function 
                           
                           H
                         exist but use of the DFT provides the most applicable and straightforward way to define the characteristic function 
                           H
                         in the homomorphic filtering (see Fig. 1(b)). Instead of DFT, other transforms can also be used in the characteristic function 
                           H
                         and that represents generalized form of homomorphic filtering. In this paper, the discrete cosine transform (DCT) and the DFT are used separately in homomorphic filtering technique for the respiratory signal extraction. 
                        Fig. 3 represents the two characteristic functions based on the DFT and DCT which are used in this paper. In the proposed homomorphic filtering approach, the respiratory signals derived from the ECG using DFT and DCT in the characteristic function 
                           H
                         are represented as R
                        DFT and R
                        DCT, respectively.

For each subject׳s recording, four respiratory signals are extracted as: using R peak algorithm (R
                        Ramp), using linear principal component analysis (R
                        PCA) and using proposed generalized homomorphic filtering (one of them using DFT (R
                        DFT) and another using DCT (R
                        DCT)). Therefore, total 160 EDR signals are extracted from ECG recordings of 40 subjects.

In order to compare the derived respiratory signal with the reference respiratory signals, the correlation coefficient and the magnitude squared coherence coefficient are calculated. For determining the correlation coefficient, both the reference respiratory signal (R
                        ref) and the EDR signal are decimated to get sampling rate of 15Hz. The correlation coefficient is calculated as the maximum cross correlation between the derived respiratory signal and the reference respiratory signal (R
                        ref) by considering possible phase delays into account. In general, the correlation coefficient c is defined between signals 
                           x
                           [
                           k
                           ]
                         and 
                           y
                           [
                           k
                           ]
                         as follows[9]:
                           
                              (7)
                              
                                 c
                                 =
                                 
                                    
                                       1
                                       /
                                       (
                                       N
                                       −
                                       1
                                       )
                                       
                                          ∑
                                          
                                             k
                                             =
                                             1
                                          
                                          
                                             N
                                             −
                                             n
                                          
                                       
                                       
                                          (
                                          x
                                          [
                                          k
                                          ]
                                          −
                                       
                                       
                                          
                                             x
                                             [
                                             k
                                             ]
                                          
                                          
                                             ¯
                                          
                                       
                                       )
                                       (
                                       y
                                       [
                                       k
                                       +
                                       n
                                       ]
                                       −
                                       
                                          
                                             y
                                             [
                                             k
                                             +
                                             n
                                             ]
                                             )
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       
                                          
                                             1
                                             /
                                             
                                                
                                                   (
                                                   N
                                                   −
                                                   1
                                                   )
                                                
                                                2
                                             
                                             
                                                ∑
                                                
                                                   k
                                                   =
                                                   1
                                                
                                                N
                                             
                                             
                                                
                                                   
                                                      (
                                                      x
                                                      [
                                                      k
                                                      ]
                                                      −
                                                      
                                                         
                                                            x
                                                            [
                                                            k
                                                            ]
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                      )
                                                   
                                                   2
                                                
                                                
                                                   ∑
                                                   
                                                      k
                                                      =
                                                      1
                                                   
                                                   N
                                                
                                                
                                                   
                                                      
                                                         (
                                                         y
                                                         [
                                                         k
                                                         ]
                                                         −
                                                         
                                                            
                                                               y
                                                               [
                                                               k
                                                               ]
                                                            
                                                            
                                                               ¯
                                                            
                                                         
                                                         )
                                                      
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        where 
                           N
                         is the total number of samples in the signal, 
                           n
                         is the shifting parameter, 
                           
                              
                                 x
                                 [
                                 k
                                 ]
                              
                              
                                 ¯
                              
                           
                         and 
                           
                              
                                 y
                                 [
                                 k
                                 ]
                              
                              
                                 ¯
                              
                           
                         are means of signals 
                           x
                           [
                           k
                           ]
                         and 
                           y
                           [
                           k
                           ]
                        , respectively.

The magnitude squared coherence coefficient [13] between signals 
                           x
                           [
                           k
                           ]
                         and 
                           y
                           [
                           k
                           ]
                         denoted by 
                           
                              
                                 C
                              
                              
                                 x
                                 y
                              
                           
                           (
                           f
                           )
                         is defined as follows:
                           
                              (8)
                              
                                 
                                    
                                       C
                                    
                                    
                                       x
                                       y
                                    
                                 
                                 (
                                 f
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             |
                                             
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      x
                                                      y
                                                   
                                                
                                                (
                                                f
                                                )
                                             
                                             |
                                          
                                          2
                                       
                                    
                                    
                                       
                                          
                                             P
                                          
                                          
                                             x
                                             x
                                          
                                       
                                       (
                                       f
                                       )
                                       
                                          
                                             P
                                          
                                          
                                             y
                                             y
                                          
                                       
                                       (
                                       f
                                       )
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              
                                 P
                              
                              
                                 x
                                 x
                              
                           
                           (
                           f
                           )
                         and 
                           
                              
                                 P
                              
                              
                                 y
                                 y
                              
                           
                           (
                           f
                           )
                         are the power spectral densities of the signals 
                           x
                           [
                           k
                           ]
                         and 
                           y
                           [
                           k
                           ]
                        , respectively, and 
                           
                              
                                 P
                              
                              
                                 x
                                 y
                              
                           
                           (
                           f
                           )
                         is the cross spectral density between the signals 
                           x
                           [
                           k
                           ]
                         and 
                           y
                           [
                           k
                           ]
                        . For calculating the magnitude squared coherence, the range of frequencies around the fundamental respiratory frequency which have at least half of maximum power are considered. Thus the magnitude squared coherence is determined as the mean coherence in a range of frequencies around the fundamental respiratory frequency [13]. The spectra are obtained by Welch׳s method using 
                           
                              
                                 2
                              
                              
                                 10
                              
                           
                         point fast Fourier transform (FFT) with a periodic Hamming window of length of eight equal sections in both the reference respiratory signal and the EDR signal.

The performance of the proposed technique is also evaluated based on mean and standard deviation of the difference in breath rate of the derived respiratory signal and the reference respiratory signal. To avoid the influence of single deep breaths (i.e. cycles with very high amplitudes) the time series was first standardized. The standardization is performed by dividing the time series by the value of local maximum that was exceeded by 25% of all other local maxima [7]. Furthermore, a threshold value for valid respiratory cycle was fixed. For each 5-min segment, all valid respiratory cycles are determined using the threshold value and then the difference between the reference respiratory rate and the derived respiratory rate are determined by breath-by-breath comparison. For each segment, the mean and the standard deviation of differences in respiratory rates are calculated between the EDR signals (R
                           DFT, R
                           DCT, R
                           PCA, and R
                           Ramp) and the reference respiratory signal (R
                           ref).

To assess whether the results of proposed technique are significant with respect to the other EDR techniques (PCA technique and the R peak amplitude technique), the Friedman׳s test is performed which is a nonparametric statistical test similar to the parametric two-way ANOVA. For multiple comparisons, Tukey׳s honesty significant difference criterion is used where 
                              p
                              <
                              0.05
                            is considered as statistically significant.

@&#RESULTS@&#

It is discussed in Section 3.3 that the ECG-derived respiratory signal can be obtained via filtering of the cepstrum of ECG using suitable band pass filter. In the selected data segment, all subject׳s recordings are collected in the rest state and thus, the maximum variations in the respiratory frequency lie in frequency band of 0.2–0.4Hz. Therefore, a Butterworth band pass filter (order 50 and pass band frequency range of 0.2–0.4Hz) is used to extract the respiratory signal from the cepstrum of ECG in log domain. When compared the performance of R
                        
                           DFT
                         and R
                        DCT over 40 subjects, Friedman׳s test shows that no significant difference is observed in the values of correlation and magnitude squared coherence coefficients of the R
                        DFT and R
                        DCT for the value of 
                           
                           p
                           <
                           0.05
                        . The correlation coefficients for the R
                        DFT and R
                        DCT are obtained as 0.73 and 0.69, respectively and the magnitude squared coherence coefficients for the R
                        DFT and R
                        DCT are obtained as 0.89 and 0.85, respectively. The values for correlation and magnitude squared coherence shown in this paper are the median values calculated over forty subjects. It can be seen from the above results and Fig. 5 that the EDR technique based on homomorphic filtering using DFT (R
                        DFT) performs better than the EDR approach based on homomorphic filtering using DCT (R
                        DCT). Also, the EDR technique based on homomorphic filtering using DFT (R
                        DFT) performs better in case of detection of cycles in the respiratory signal when compared with the DCT (R
                        DCT).

The performance of the proposed EDR technique based on homomorphic filtering (R
                        DFT and R
                        DCT) is compared with the two well-known EDR algorithms: linear principal component analysis (R
                        PCA) and R peak amplitude algorithm (R
                        Ramp). 
                        Fig. 4 compares the performance of the proposed EDR technique with the existing EDR methods is term of correlation and coherence. Friedman׳s test shows the significant differences in both the correlation and magnitude squared coherence coefficients of the four EDR techniques for the value of 
                           
                           p
                           <
                           0.05
                        . The correlation and coherence values for R
                        DFT are statistically significantly better than the R
                        Ramp and R
                        PCA. Although, the correlation and coherence values for R
                        DCT are observed to be statistically significantly better than R
                        Ramp, but no significant statistical difference is observed to the values of R
                        PCA. The correlation and magnitude squared coherence for the PCA based EDR technique are obtained as 0.67 and 0.85, respectively, and the correlation and magnitude squared coherence for the R peak amplitude algorithm are observed as 0.61 and 0.80, respectively. It is seen from the above results (discussed in Sections 4.1 and 4.2) that the proposed EDR technique based on homomorphic filtering using DFT (R
                        DFT) performs better than the PCA based technique and the R peak amplitude based algorithm in terms of correlation and magnitude squared coherence. It can be observed from Fig. 4 that the correlation coefficients are more bounded in homomorphic filtering based approach (R
                        DFT) as compared to the PCA based technique and the R peak amplitude based algorithm.

The results are calculated with the part of recordings which do not contain movement artifacts and abrupt changes in the ECG signal to get optimum performance. For the extraction of respiratory signal using PCA technique, QRS complex of the ECG is used as feature to form the covariance matrix [11], and if the ECG signal is affected from abrupt changes than it is difficult to detect the R peaks of the ECG with less probability of error. Hence, the PCA based EDR technique may perform poorly when the noise and abrupt changes are present in the ECG recording. 
                        Fig. 5 represents an example of the derived respiratory signals using the proposed EDR technique, the PCA based EDR technique and the R peak amplitude based EDR algorithm along with the reference respiratory signal. It can be seen from Fig. 5 that all respiratory cycles can be observed using our proposed EDR technique (R
                        DFT) based on homomorphic filtering, whereas the EDR signals using PCA technique and R peak amplitude algorithm are resembled poorly with the reference respiratory signal. For the performance evaluation, the derived respiratory signal is compared with the reference respiratory signal by considering possible phase delays into account.

A comparison for the breath rate accuracy among the four EDR techniques discussed in this paper is shown in 
                        Table 1. The estimated ranges of breath rates of different respiratory signals are observed as: reference respiratory signal: 7.4–23.6cpm (cycles per minute), R
                        DFT: 10.2–23.0cpm, R
                        DCT: 11.3–22.6cpm, R
                        PCA: 7.0–24.2cpm and R
                        Ramp: 8.0–23.0cpm. The mean difference between two respiratory rates R
                        ref−R
                        DFT is observed to be statistically significantly better than R
                        ref−R
                        Ramp and R
                        ref−R
                        DCT, but any significant difference is not observed between R
                        DFT−R
                        PCA and R
                        DCT−R
                        PCA. It can be seen from Table 1 that the mean difference between two respiratory rates is determined as 0.3316±0.19cpm (cycles per minute) for the reference respiratory and R
                        DFT which is approximately equal to the mean difference in respiratory rates between the reference respiratory signal and R
                        PCA (0.3368±0.23cpm) but significantly differ than R
                        DCT (0.450±0.29cpm) and R
                        Ramp (0.5105±0.27cpm). Similarly, the standard deviation difference between the reference respiratory signal (R
                        ref) and R
                        DFT is observed better than the other EDR techniques (R
                        DCT, R
                        PCA and R
                        Ramp) by small amounts, but no significant differences are observed for the values of standard deviation of the differences (bpm) of the four EDR techniques.

Selection of the band pass filter in generalized homomorphic filtering is an important issue to discuss. In this paper, for performance evaluation, three band pass filters (Butterworth, Chebyshev-I and FIR filter with Kaiser window (
                           β
                        =0.5)) are used to extract the respiratory signal from the ECG using the proposed homomorphic filtering technique (using DFT in the characteristic function
                           
                           H
                        ). Results are determined with different orders of the filter but in most of the cases, filter with the order 50 gives better results. The performance of filters is evaluated on the basis of correlation coefficients between the reference respiratory signal and the EDR signal.

The performance of these three filters varies with different ECG signals. A box plot representation of the correlation coefficients obtained for the three filters using the homomorphic filtering approach is shown in 
                        Fig. 6 where it can be seen that Butterworth filter outperforms as compared to the window based FIR filter and Chebyshev-I filter. The correlation values for R
                        DFT using the Butterworth filter are statistically significantly better than the correlation values obtained using the FIR filter with Kaiser window and Chebyshev-I filter in the homomorphic filtering technique for the value of p<0.01 but, no significant statistical difference is observed to the values of the FIR filter with Kaiser window and the Chebyshev-I filter. The Correlation coefficient for the Butterworth filter is obtained as 0.73 whereas correlation coefficients for the FIR filter with Kaiser window and the Chebyshev-I filter are determined as 0.64 and 0.61, respectively. Moreover, the Butterworth filter gives maximally-flat response and it exhibits nearly flat pass band with no ripple. Also, the waveform distortion in the Butterworth filter is less as compared to other two filters. Therefore, results obtained using the Butterworth filter are more bounded across the median value as compared to other two filters. From the results, it is observed that the Chebyshev-I and the FIR filter based on Kaiser window are not suitable for the extraction of respiratory signal from the ECG whereas the Butterworth filter is more reliable as well as more bounded across median value of correlation coefficients.

Some EDR algorithms like linear PCA and Kernel PCA (KPCA) are likely to have their drawbacks. Linear PCA performs better as EDR algorithm when analyzing beat to beat variations, but in PCA, the relation between the ECG and respiration is assumed to be linear [13]. Similarly, KPCA is less suitable for real time of short segments of data [13]. The filtering techniques for the respiratory signal extraction are expected more reliable as compared to the other algorithms because of sensitivity to the noise of R peak amplitude which is a major drawback of the non-filtering EDR algorithms. Thus, the respiratory signal extracted from the ECG using the homomorphic filtering technique is expected to perform more efficiently than the other two algorithms (used in this paper for comparison) when noise affects amplitude of R peaks.

The limitation of homomorphic filtering (also with existing filtering techniques) as EDR technique is that when the respiratory frequency lies outside the predefined band (0.2–0.4Hz) then it is not possible to extract the respiratory signal using the filtering approach. To overcome this problem, valid adjustment of lower and upper cut off frequencies of band-pass filter is needed. If we select wider range of frequency, e.g., 0.1–0.8Hz, then other components of the ECG signal and lower frequency noisy signal may fall in selected frequency range which may distort the derived respiratory signal. The lower estimated range of the reference respiratory rate in the selected data segments is observed as 7.4cpm and the respiratory signal with this rate cannot be extracted properly using the filtering techniques when the pass band frequency range lies in the range of 0.2–04Hz. To overcome this problem, the range of pass band needs to be tuned to get the better output. A suitable selection of band-pass filter and filter order also improve the quality of the EDR signal. The order of the filter also affects to the EDR signal in terms of shape of the respiratory cycles. In this work we have examined the results with varying filter order and in most of the cases of Fantasia data, Butterworth band pass filter of order 50 provide better results.

In this paper, we also analyzed the improvement or degradation in the respiratory signal extracted from the pre-processed ECG signal. It is observed in the proposed homomorphic filtering approach that the respiratory signal extracted from the pre-processed ECG does not degrade or improve significantly as compared to the respiratory signal extracted from the original ECG. It can be seen in 
                        Fig. 7 that the respiratory signals extracted using proposed technique (R
                        DFT) from original ECG and pre-processed ECG are approximately similar.

The proposed EDR technique is computationally less expensive than the PCA based EDR technique. To assess the computational effort of homomorphic filtering with respect to the PCA technique and the R peak amplitude algorithm, we determined the computational time for all the four techniques discussed in this paper. To evaluate the computational load, computations were executed on an Intel(R) Core(TM) i3 CPU M350 processor with 2.27GHz using MATLAB R2009a (Math-Works, NA). The four EDR signals were obtained from every subject׳s ECG recording, starting from the selection of the segment. For one minute of data segment, the average computational time of R
                        DFT and R
                        DCT are observed as 0.594 and 0.6204s, respectively whereas the average computational cost of R
                        PCA and R
                        Ramp are observed as 0.825 and 0.534s. These Results shows that proposed EDR technique is computationally efficient. In this work our aim was to assess the ability of the new algorithm to derive the respiratory signal in controlled condition and to test it against some well-known techniques. In this study, we restricted our analysis to healthy individuals and future work should assess the reliability of proposed algorithm in clinical practice. There is more real time validation required with different patient conditions (stress, exercise and any cardiac abnormalities) to extract the respiratory signal using homomorphic filtering and review the performance with other existing algorithms.

@&#CONCLUSION@&#

In this paper, a new technique for the respiratory signal extraction from the single-lead ECG using generalized homomorphic filtering is performed. In homomorphic filtering approach, two transforms DFT and DCT are used in characteristic function 
                        H
                        
                      to get two different EDR signals as R
                     DFT and R
                     DCT, respectively. The performance of proposed EDR technique is compared with the PCA based EDR technique and the R peak amplitude based EDR algorithm in terms of correlation, magnitude squared coherence and breath rate accuracy. It is observed from the results that the EDR technique based on homomorphic filtering using DFT performs better than DCT (RDCT), and it is seen that the proposed technique (R
                     DFT) performs significantly better than the R peak amplitude algorithm, but no significant improvement in the performance is observed when compared with the PCA based EDR technique. The proposed technique allows us a reliable technique for the respiratory signal extraction from the single lead ECG in controlled conditions. To get proper shape of respiratory signal in the EDR signal, selection of filter and order of the filter still need to analyze. Results show that the proposed EDR technique may have applications in detection of sleep activities and simultaneous study of heart and respiration process.

@&#REFERENCES@&#

