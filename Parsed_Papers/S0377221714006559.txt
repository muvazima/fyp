@&#MAIN-TITLE@&#Optimization-based heuristics for underground mine scheduling

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We develop a paradigm in which to model complex scheduling operations.


                        
                        
                           
                           We improve the tractability of our problem using exact and heuristic methods.


                        
                        
                           
                           We derive an optimization-based heuristic for otherwise intractable instances.


                        
                        
                           
                           We apply our techniques to generate schedules for the Lisheen mine.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Mining/metals industries: determining optimal operating policies at an underground mine

Production/scheduling applications: production scheduling at an underground mine

Integer programming applications: determining a production schedule

@&#ABSTRACT@&#


               
               
                  Underground mine production scheduling possesses mathematical structure similar to and yields many of the same challenges as general scheduling problems. That is, binary variables represent the time at which various activities are scheduled. Typical objectives seek to minimize costs or some measure of production time, or to maximize net present value; two principal types of constraints exist: (i) resource constraints and (ii) precedence constraints. In our setting, we maximize “discounted metal production” for the remaining life of an underground lead and zinc mine that uses three different underground methods to extract the ore. Resource constraints limit the grade, tonnage, and backfill paste (used for structural stability) in each time period, while precedence constraints enforce the sequence in which extraction (and backfill) is performed in accordance with the underground mining methods used. We tailor exact and heuristic approaches to reduce model size, and develop an optimization-based decomposition heuristic; both of these methods transform a computationally intractable problem to one for which we obtain solutions in seconds, or, at most, hours for problem instances based on data sets from the Lisheen mine near Thurles, Ireland.
               
            

Metallic, or hard rock, mining is separated into two principal categories: (i) surface mining and (ii) underground mining (Fig. 1
                     ). We compare the two mining approaches in Table 1
                     . When the ore is located close to the earth’s surface, the most productive and economically efficient mining method is open pit, a form of surface mining. With this method, notional three-dimensional blocks of material are extracted from an ore body, regardless of whether they meet the cut-off grade, i.e., the percentage mineral content at which the material is deemed profitable, declared ore, and processed. Material below the cut-off grade is termed waste and discarded. Consequently, a significant factor in the viability of the open pit approach is the ratio of extracted ore to extracted waste.

Despite its relatively lower infrastructure cost, surface mining becomes cost-prohibitive when the ratio of extracted waste to ore becomes too high. Below ground, trucks haul ore throughout miles of tunnels. Crushed ore is conveyed to the surface for refinement at the mill. Tailings (i.e., waste produced by the mill) are disposed of in a tailings pond. With targeted extraction methods that minimize costly waste production, underground miners seek to extract only blocks of material that will be processed into mineral concentrate. Underground mining is also suitable for mineral deposits located in environmentally sensitive areas, where high reclamation costs would be associated with an open pit operation. However, while they minimize waste production and the environmental footprint, these underground operations are also more complex, have higher extraction costs, and are far more dangerous than surface mines.

The mine production scheduling problem requires planners to select and schedule blocks for extraction in a sequence that maximizes or minimizes a specific goal, e.g., minimizes deviations from planned production targets. We use binary variables to represent the time at which a block is scheduled. Two principal types of constraints exist: (i) resource constraints, which limit the number of activities committed to a time period based on the availability of a given resource and on the amount of that resource required to perform the activity and (ii) precedence constraints, which dictate the order in which activities must be completed.

The quality of the production schedule used in the exploitation stage of mining depends, in part, both on the accuracy of the model (and solution procedure), and on the quantity of alternative scheduling scenarios that planners examine; while mine planning software enables the examination of a greater number of schedules, the complex and mine-specific nature of the operations and the combinatorial nature of the production scheduling problem in many cases preclude both the generation of near-optimal schedules and the quick examination of the entire set of alternatives, especially for schedules with a large number or activities and/or a long time horizon with fine fidelity. Consequently, mine production plans can be far from optimal. While better models are being developed, solution techniques are being refined, and hardware and software continue to improve (Newman, Rubio, Caro, Weintraub, & Eurek, 2010), production scheduling problems, particularly for underground mining operations, continue to challenge researchers.

Applications of operations research to mining have concentrated on strategic and tactical planning decisions at the development and exploration stages in the life cycle of a mine (Newman et al., 2010; Topuz & Duan, 1989). Strategic planning is concerned with long-term decisions that affect the value of the mining venture, such as: (i) determining the most economical pit size for a surface mine, or the ultimate pit; (ii) locating the processing plant (i.e., the mill) and other facilities; (iii) selecting machines and equipment; (iv) designing infrastructure, e.g., the number and placement of ramps, roads, and shafts; and (v) scheduling production in the long term. Over shorter horizons, tactical planning considers the decisions required to realize the objectives of the strategic plan. Examples include: (i) routing trucks; (ii) blending ore at the mill; and (iii) scheduling production in the short term.

Over the past fifty years, operations research associated with mine planning has focused primarily on open pit mining. The majority of this work is a derivative of Lerchs and Grossmann’s (1965) network-based solution approach for the ultimate pit limit problem, e.g., Underwood and Tolwinski (1998) and Ramazan (2007). The Lerchs–Grossmann algorithm forms the basis for many of the commercial software packages used in industry to schedule open pit mine production, e.g., Whittle (GEOVIA, 2012), and Vulcan Optimizer (Maptek, 2012). A recent study includes (Kawahata, Schumacher, & Hufford, 2013), who compare in-house and commercial optimizers for Newmont’s Nevada operations. Unlike open pit mining, there is not a “core” optimization model for underground mine planning, and there is virtually no commercial optimization software available.

The application of optimization to underground mine production planning begins with Williams, Smith, and Wells (1973), who demonstrate that a linear programming approach can be used to solve high-level strategic problems. Their method employs continuous variables and, consequently, cannot enforce the logic to schedule production at an operational level. Seventeen years later, Chanda (1990) employs integer programming when creating a schedule for six consecutive work shifts at a copper mine in Zambia. He circumvents the difficulty in solving multi-period integer programs by combining mixed integer programming (MIP) and simulation to produce a solution.

Maximizing the net present value of a copper mine for a 17-period time horizon, Trout’s (1995) model incorporates sequencing, production, and backfilling constraints. He produces a schedule by introducing variable restrictions that yield a tractable problem. Winkler (1996) outlines the suitability of mixed integer programming to underground mine scheduling problems. However, she also illustrates the exponential complexity associated with this approach when producing a schedule for a multi-period time horizon. She encompasses single-period MIP solutions within a simulation routine to produce a multi-period schedule for a German coal mine. Maximizing discounted ore revenue, Carlyle and Eaves (2001) apply mixed integer programming to schedule production at an underground platinum and palladium mine for a number of mine expansion scenarios. The authors solve their model, that incorporates development and extraction decisions, to generate schedules for ten time periods, but do not provide details of any special solution methods.


                     Ataee-pour (2005) reviews existing algorithms, which he categorizes as exact or heuristic, for optimizing stope layout; the layout is analogous to the ultimate pit limit in open pit mining, and defines the design in underground mining. In developing the various design algorithms, the author demonstrates how the constraints involved in different underground mining methods are considered. Nehring, Topal, and Little (2010) solve a mixed integer programming model for instances of varying sizes (numbers of stopes) in a sublevel stoping mine. By recognizing that in this mine, the activities of development, drilling, extraction and backfilling are done continuously and in sequence for a given area, the authors combine four variables into one; the result is a substantial decrease in solution time without compromising solution quality. Little, Knights, and Topal (2013) integrate stope design and production scheduling decisions. Not surprisingly, the authors show that when these two types of decisions are integrated, a better objective function value is obtained. Of course, the stope design options must be enumerated, which leads to larger and more difficult integrated models. While we take stope design as given, our production scheduling model is more complicated than those mentioned in this paragraph, primarily because of the nature of the extraction and backfilling sequencing constraints.

Benders’ decomposition, an exact solution technique, is used by Sarin and West-Hansen (2005) to solve the mixed-integer programming model they develop for a complex mine that uses multiple extraction methods. Application of their model to a coal mining case study produces a profit-maximizing 100-week schedule. With an objective to minimize deviations from contracted production quantities, Newman and Kuchta (2007) optimize long-term production at an underground iron ore mine in Sweden. The authors use an aggregation heuristic to solve a mixed-integer programming model for a 60-month horizon. This model also forms the basis for Martinez and Newman (2011), who build on the long-term model by incorporating a short-term production component for the Swedish mine to produce solutions for a 48-month horizon using an optimization-based heuristic.

We cite here deterministic optimization models, although some work, most notably in the open pit mining area, has been done on mine planning under ore price and/or geological uncertainty. Alonso-Ayuso et al. (2014) represents a rare, but important, case in which ore price uncertainty is treated in underground (block caving) mine planning. The authors present a well formulated, deterministic, mixed-integer programming model, and then examine a variety of risk types with respect to solution quality (e.g., risk reduction) and solution time. Gholamnejad and Moosavi (2012) address open-pit operations, and examine geological (tonnage and grade) uncertainty; they suggest a multi-objective approach in which they seek to maximize net present value and minimize risk. Finally, in an effort to integrate open pit and underground scheduling, Epstein et al. (2012) present a model that considers multiple open pit and underground mines simultaneously, and the effect of their output on shared resources, e.g., processing plants. The authors identify a multi-commodity network flow problem structure in their formulation, and solve large instances with combinations of exact procedures and rounding heuristics; Codelco, the large, state-run mining organization in Chile, has successfully used the results. Burks (2013) also describes an integrated extraction and processing approach at both open pit and underground mines, examines various changes in strategic and operational decisions that affect throughput and yield, and demonstrates savings for a variety of mining operations.

The Lisheen mine in Ireland motivates our production scheduling work. In this case, the mine was having difficulty satisfying production targets and faced the possibility of early closure. The complex operation required a strategic production scheduling model that could consider both the implications of extraction decisions for production in future time periods and, at the same time, satisfy tactical constraints. The strategic component necessitated a two-year time horizon, corresponding to the remaining life of the mine. In addition, the complexity of the mine mandated that an implementable schedule would need to be high-fidelity, with decisions made at weekly time intervals.

Our contributions consist of the following: (i) we develop a paradigm in which to model complex scheduling operations, such as (but not limited to) those at Lisheen; (ii) we improve the tractability of our problem by using exact and heuristic methods to reduce the problem size; and (iii) we tailor an optimization-based decomposition heuristic that can take intractable instances of the model and generate schedules within seconds (for shorter time horizons) or hours (for long, post-life-of-mine schedules). This paper is organized as follows: Section 2 describes the development and exploitation stages for surface and underground mines in more detail and outlines the production process at the Lisheen mine, specifically. In Section 3, we present the model, and explain its complexity, the framework for our solution approach, and present an exact variable reduction method. We describe heuristic efforts to improve the tractability of our model in Section 4. We present and discuss our results in Section 5 and conclude with Section 6.

When planning the development of an open pit mine, engineers generate a computerized block model that approximates the ore body as a three-dimensional array of blocks. For a given set of economic parameters, each block possesses a value based on its volume and metal content. In open pit mining, ore blocks can be stored in graded stockpiles from which mill operators draw to produce a consistent grade of feed for the mill. The order in which blocks must be extracted is dictated by geometric precedence constraints; Fig. 2
                      provides a rendition of what is used in practice. (See Askari-Nasab, Pourrahimian, Ben-Awuah, & Kalantari (2011) for a discussion.)

For an underground mine, block models are used, in conjunction with economic information, to identify areas of ore that appear to be profitable to extract. However, unlike open pit mining, underground mining considers the in situ ore as inventory, employing targeted approaches that minimize necessary waste extraction.


                     Fig. 3
                      depicts the three different mining methods used at the Lisheen lead and zinc mine in south central Ireland (O’Sullivan & Newman, 2014). Where the host rock is strong, and the ore body is not steeply angled, room-and-pillar mining is preferred (a). Areas of the mine where the ore is thick and the host rock is strong are suited to the large-scale and economically efficient long-hole stoping method (b). Finally, where the mine has poor host rock strength, drift-and-fill mining is practiced (c), i.e., voids must be backfilled for structural stability. Cut-off grade selection determines ore block shape and size, which, in turn, can define the mining method and precedence structure (Fig. 4
                     ). In this figure, box (a) shows part of the ore body with a nonuniform distribution of metal. A cut-off grade of 7% results in a large area classified as ore (see Box (b)) that can be partitioned into homogeneous blocks and extracted with a single mining method, e.g., drift-and-fill. At a cut-off grade of 9%, the material classified as ore diminishes (Box (c)). Drift-and-fill mining would now excavate too much waste rock so a different mining approach is used. Box (d) shows material classified as ore at a cut-off grade of 12%. With most of the area now defined as waste, a targeted mining method is suitable.

At a depth of 170meters below the surface, the ore bodies at Lisheen are shallow enough to be accessed by a decline, rather than by a shaft. Their predominantly flat-lying orientation allows Load Haul Dump trucks to transport blasted ore blocks along a network of haulage routes throughout the mine. These haulage routes, supported by large pillars of ore, connect working areas, or panels, to a crushing machine that fragments ore before conveyance to the mill for refinement into zinc concentrate. In Fig. 5
                     , the haulage route collapses west of any pillar P1–P5 that is removed, with the arrows indicating the direction of the mine exit. Hence, the extraction precedence for these pillars would require P1 be taken first and P5 last. Removal of pillar P3, P4, or P5 would result in the destruction of the haulage route in that area, eliminating a means to access the panel.

Lisheen’s objective is to determine a schedule for the extraction of ore that maximizes the quantity of metal produced by the mill over the remaining mine life. A feasible schedule: (i) satisfies the resource limitations, i.e., maximum production rates, at the mine; (ii) ensures that concurrently mined ore blocks and haulage pillars produce a blend of ore that satisfies mill requirements, (iii) guarantees that the paste fill required to create structurally stable voids does not exceed a maximum volume per time period, and (iv) enforces precedence rules. Lisheen, like most underground mines, does not stockpile ore. Consequently, grade control for the milling operation is more challenging than for an open pit mine that can draw from a stockpile.

Mine planners at Lisheen partition the ore bodies into 88 distinct panels, clustering adjacent blocks of ore based on a common mining method, or shared access to haulage routes. For each panel, they define a logical sequence for extraction and backfilling activity. Considering haulage pillar extraction to be independent of that of any panel, we model the structure of the mine as panels of ore that are accessed by a network of critical haulage routes supported by haulage pillars. Consequently, we define three distinct types of activities in our model: (i) panel block extraction; (ii) pillar extraction; and (iii) panel void backfilling. We differentiate between the two types of extraction activity because: (i) panel extraction activities must be preceded and/or followed by other activities, whereas pillar activities must not necessarily have predecessors or successors; and (ii) execution of a panel activity has consequences only for activities that are adjacent to it, whereas extraction of a pillar prevents the execution of any activity “upstream” of that pillar. To simplify, we refer to the target of a panel extraction activity as a panelblock and that of a pillar extraction activity as a pillar. We use the term block in a general way to refer to any extraction activity.

We capture the precedence relationships between panel activities and haulage pillar activities as follows:
                        
                           1.
                           We group panelblock extraction and void backfilling activities into ordered sets in which the order reflects the precedence rules, e.g., if the order of mining is A before B before C, we define the set {
                                 
                                    A
                                    ,
                                    B
                                    ,
                                    C
                                 
                              }.

Any panel may have more than one ordered set associated with it, because many panels have predecessors or successors which can be scheduled concurrently.

Any panel activity can be a member of multiple ordered sets if that activity requires more than one precedent to finish before the activity can begin. Fig. 6
                               illustrates: For this panel consisting of Panelblocks A–O, we show in Box (a) that Panelblocks A–F must be mined sequentially; this is also true for L–O. In addition, any panelblock from A–F can be mined concurrently with any panelblock from L–O. However, Panelblocks X–Z must wait until all other panelblocks have been extracted and backfilled (Box (b)). To represent this, we define two ordered sets here: {
                                 
                                    A
                                    ,
                                    B
                                    ,
                                    C
                                    ,
                                    D
                                    ,
                                    E
                                    ,
                                    F
                                    ,
                                    BF
                                    1
                                    ,
                                    X
                                    ,
                                    Y
                                    ,
                                    Z
                                 
                              } and {
                                 
                                    L
                                    ,
                                    M
                                    ,
                                    N
                                    ,
                                    O
                                    ,
                                    BF
                                    2
                                    ,
                                    X
                                    ,
                                    Y
                                    ,
                                    Z
                                 
                              }. Both of these sets are linked to Pillar 1, which, if extracted, destroys the haulage route that provides access to the panel.

We place haulage pillar activities into ordered sets in which the order reflects the precedence rules. Each ordered set represents a section of a critical haulage route. The first member of the set corresponds to the pillar furthest from the mine exit.

A pillar activity may belong to more than one ordered set. If critical haulage routes intersect, their corresponding ordered sets contain the same pillar activities downstream from the point intersection.

Each panel ordered set is linked to exactly one pillar. Extraction of this pillar or any other pillar that follows in that pillar’s ordered set destroys access to the panel.

We present the integer-programming formulation for the scheduling problem at weekly fidelity. This model description is more detailed and generalizable than the formulation we presented in previous work on the Lisheen mine (O’Sullivan & Newman, 2014). The decision variables dictate whether or not we begin an activity during a specified time period. The objective discounts metal in an attempt to pull it forward in the schedule. In addition to the precedence constraints, the model enforces resource constraints.


                     Sets
                     
                        
                           •
                           
                              
                                 
                                    A
                                 
                              : set of all activities 
                                 
                                    a
                                    ,
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                 
                              .


                              
                                 
                                    E
                                 
                              : set of all extraction activities.


                              
                                 
                                    B
                                 
                              : set of all backfilling activities.


                              
                                 
                                    
                                       
                                          F
                                       
                                       
                                          a
                                       
                                    
                                 
                              : set of extraction activities that necessitate backfill activity 
                                 
                                    a
                                    ∈
                                    A
                                 
                              .


                              
                                 
                                    T
                                 
                              : set of all time periods 
                                 
                                    t
                                    ,
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          t
                                       
                                       
                                          ̃
                                       
                                    
                                 
                              .


                              
                                 
                                    
                                       
                                          
                                             
                                                T
                                             
                                             
                                                ˆ
                                             
                                          
                                       
                                       
                                          a
                                       
                                    
                                 
                              : restricted set of time periods in which activity 
                                 
                                    a
                                    ∈
                                    A
                                 
                               can start.


                              
                                 
                                    I
                                 
                              : groups of sets i, where each set represents an ordered chain of precedences between activities.


                              
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                       
                                          i
                                       
                                    
                                 
                              : ordered set i of both extraction and backfill activities within a panel, where 
                                 
                                    (
                                    
                                       
                                          ·
                                       
                                       
                                          ¯
                                       
                                    
                                    )
                                 
                               is the ordinal position of the element in the precedence set 
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                       
                                          i
                                       
                                    
                                 
                              .


                              
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                ̃
                                             
                                          
                                       
                                       
                                          i
                                       
                                    
                                 
                              : ordered set i of haulage pillar extraction activities, where 
                                 
                                    (
                                    
                                       
                                          ·
                                       
                                       
                                          ̃
                                       
                                    
                                    )
                                 
                               is the ordinal position of the element in the precedence set 
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                ̃
                                             
                                          
                                       
                                       
                                          i
                                       
                                    
                                 
                              .


                              
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                ˆ
                                             
                                          
                                       
                                       
                                          a
                                       
                                    
                                 
                              : set of haulage pillar extraction activities that must not precede activity a.


                     Parameters
                     
                        
                           •
                           
                              
                                 
                                    
                                       
                                          v
                                       
                                       
                                          at
                                          
                                             
                                                t
                                             
                                             
                                                ̃
                                             
                                          
                                       
                                    
                                 
                              : volume of ore obtained in time period 
                                 
                                    
                                       
                                          t
                                       
                                       
                                          ̃
                                       
                                    
                                 
                               given we started extraction activity 
                                 
                                    a
                                    ∈
                                    A
                                 
                               at time 
                                 
                                    t
                                    ∈
                                    
                                       
                                          
                                             
                                                T
                                             
                                             
                                                ˆ
                                             
                                          
                                       
                                       
                                          a
                                       
                                    
                                 
                              , only defined for cases in which 
                                 
                                    
                                       
                                          t
                                       
                                       
                                          ̃
                                       
                                    
                                    ⩾
                                    t
                                 
                               (tonnes).


                              
                                 
                                    
                                       
                                          g
                                       
                                       
                                          a
                                       
                                    
                                 
                              : average grade of ore produced from extraction activity 
                                 
                                    a
                                    ∈
                                    A
                                 
                               (%).


                              
                                 
                                    
                                       
                                          e
                                       
                                       
                                          ¯
                                       
                                    
                                 
                              : maximum allowable tonnage of ore extracted in a week (tonnes).


                              
                                 
                                    
                                       
                                          g
                                       
                                       
                                          ¯
                                       
                                    
                                    ,
                                    
                                       
                                          g
                                       
                                       
                                          ̲
                                       
                                    
                                 
                              : maximum/minimum allowable metal produced by the mill in a week (tonnes).


                              
                                 
                                    
                                       
                                          d
                                       
                                       
                                          a
                                       
                                    
                                 
                              : duration of activity 
                                 
                                    a
                                    ∈
                                    A
                                 
                               (weeks).


                              
                                 
                                    
                                       
                                          p
                                       
                                       
                                          at
                                          
                                             
                                                t
                                             
                                             
                                                ̃
                                             
                                          
                                       
                                    
                                 
                              : paste applied in time period 
                                 
                                    
                                       
                                          t
                                       
                                       
                                          ̃
                                       
                                    
                                    ∈
                                    T
                                 
                               given we started backfilling activity 
                                 
                                    a
                                    ∈
                                    A
                                 
                               at time 
                                 
                                    t
                                    ∈
                                    
                                       
                                          
                                             
                                                T
                                             
                                             
                                                ˆ
                                             
                                          
                                       
                                       
                                          a
                                       
                                    
                                 
                               (cubic meters).


                              
                                 
                                    
                                       
                                          p
                                       
                                       
                                          ¯
                                       
                                    
                                 
                              : available paste for backfilling in each week (cubic meters).


                              r: discount rate used to encourage production to shift toward the start of the time horizon (%/week).


                     Binary decision variable
                     
                        
                           
                              
                                 
                                    y
                                 
                                 
                                    at
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          
                                             
                                                1
                                             
                                             
                                                if activity
                                                
                                                a
                                                ∈
                                                A
                                                
                                                starts during time period
                                                
                                                t
                                                ∈
                                                
                                                   
                                                      
                                                         
                                                            T
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      a
                                                   
                                                
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                otherwise
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  


                     Formulation
                     
                        
                           (1)
                           
                              
                                 
                                    
                                       
                                          (
                                          Q
                                          )
                                          
                                          max
                                       
                                    
                                    
                                       
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   a
                                                   ∈
                                                   E
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   t
                                                   ∈
                                                   
                                                      
                                                         
                                                            
                                                               T
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         a
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         ̃
                                                      
                                                   
                                                   ∈
                                                   T
                                                   :
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         ̃
                                                      
                                                   
                                                   ⩽
                                                   t
                                                   +
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         a
                                                      
                                                   
                                                   -
                                                   1
                                                
                                             
                                          
                                          
                                             
                                                g
                                             
                                             
                                                a
                                             
                                          
                                          
                                             
                                                v
                                             
                                             
                                                at
                                                
                                                   
                                                      t
                                                   
                                                   
                                                      ̃
                                                   
                                                
                                             
                                          
                                          
                                             
                                                (
                                                1
                                                +
                                                r
                                                )
                                             
                                             
                                                -
                                                
                                                   
                                                      t
                                                   
                                                   
                                                      ̃
                                                   
                                                
                                             
                                          
                                          
                                             
                                                y
                                             
                                             
                                                at
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          s.t.
                                       
                                    
                                    
                                       
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   t
                                                   ∈
                                                   
                                                      
                                                         
                                                            
                                                               T
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         a
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                y
                                             
                                             
                                                at
                                             
                                          
                                          ⩽
                                          1
                                          
                                          ∀
                                          a
                                          ∈
                                          A
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       a
                                       ∈
                                       E
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       t
                                       ∈
                                       
                                          
                                             
                                                
                                                   T
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             a
                                          
                                       
                                       :
                                       t
                                       ⩾
                                       
                                          
                                             t
                                          
                                          
                                             ̃
                                          
                                       
                                       -
                                       
                                          
                                             d
                                          
                                          
                                             a
                                          
                                       
                                       +
                                       1
                                    
                                 
                              
                              
                                 
                                    v
                                 
                                 
                                    at
                                    
                                       
                                          t
                                       
                                       
                                          ̃
                                       
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    at
                                 
                              
                              ⩽
                              
                                 
                                    e
                                 
                                 
                                    ¯
                                 
                              
                              
                              ∀
                              
                                 
                                    t
                                 
                                 
                                    ̃
                                 
                              
                              ∈
                              T
                           
                        
                     
                     
                        
                           (3)
                           
                              
                              
                                 
                                    g
                                 
                                 
                                    ̲
                                 
                              
                              ⩽
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       a
                                       ∈
                                       E
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       t
                                       ∈
                                       
                                          
                                             
                                                
                                                   T
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             a
                                          
                                       
                                       :
                                       t
                                       ⩾
                                       
                                          
                                             t
                                          
                                          
                                             ̃
                                          
                                       
                                       -
                                       
                                          
                                             d
                                          
                                          
                                             a
                                          
                                       
                                       +
                                       1
                                    
                                 
                              
                              
                                 
                                    g
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    v
                                 
                                 
                                    at
                                    
                                       
                                          t
                                       
                                       
                                          ̃
                                       
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    at
                                 
                              
                              ⩽
                              
                                 
                                    g
                                 
                                 
                                    ¯
                                 
                              
                              
                              ∀
                              
                                 
                                    t
                                 
                                 
                                    ̃
                                 
                              
                              ∈
                              T
                           
                        
                     
                     
                        
                           (4)
                           
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       a
                                       ∈
                                       B
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       t
                                       ∈
                                       
                                          
                                             
                                                
                                                   T
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             a
                                          
                                       
                                       :
                                       t
                                       ⩾
                                       
                                          
                                             t
                                          
                                          
                                             ̃
                                          
                                       
                                       -
                                       
                                          
                                             d
                                          
                                          
                                             a
                                          
                                       
                                       +
                                       1
                                    
                                 
                              
                              
                                 
                                    p
                                 
                                 
                                    at
                                    
                                       
                                          t
                                       
                                       
                                          ̃
                                       
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    at
                                 
                              
                              ⩽
                              
                                 
                                    p
                                 
                                 
                                    ¯
                                 
                              
                              
                              ∀
                              
                                 
                                    t
                                 
                                 
                                    ̃
                                 
                              
                              ∈
                              T
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                          
                                             
                                                y
                                             
                                             
                                                at
                                             
                                          
                                          ⩽
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   ∈
                                                   
                                                      
                                                         
                                                            
                                                               T
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               a
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                   :
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   ⩽
                                                   t
                                                   -
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         
                                                            
                                                               a
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                y
                                             
                                             
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                
                                                   
                                                      t
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          
                                          ∀
                                          i
                                          ∈
                                          I
                                          ;
                                          a
                                          ,
                                          
                                             
                                                a
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          
                                             
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                             
                                                i
                                             
                                          
                                          :
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                          (
                                          
                                             
                                                a
                                             
                                             
                                                ¯
                                             
                                          
                                          )
                                          ⩾
                                          (
                                          
                                             
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                             
                                                ¯
                                             
                                          
                                          )
                                          ;
                                          
                                          t
                                          ∈
                                          
                                             
                                                
                                                   
                                                      T
                                                   
                                                   
                                                      ˆ
                                                   
                                                
                                             
                                             
                                                a
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       t
                                       ∈
                                       
                                          
                                             
                                                
                                                   T
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    at
                                 
                              
                              ⩾
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                       ∈
                                       
                                          
                                             
                                                
                                                   T
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             
                                                
                                                   a
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              
                              ∀
                              a
                              ∈
                              B
                              ;
                              
                                 
                                    a
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              
                                 
                                    F
                                 
                                 
                                    a
                                 
                              
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                          
                                             
                                                y
                                             
                                             
                                                at
                                             
                                          
                                          ⩽
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   ∈
                                                   
                                                      
                                                         
                                                            
                                                               T
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               a
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                   :
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   ⩽
                                                   t
                                                   -
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         
                                                            
                                                               a
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                y
                                             
                                             
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                
                                                   
                                                      t
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   1
                                                   -
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            
                                                               
                                                                  t
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            ∈
                                                            
                                                               
                                                                  
                                                                     
                                                                        T
                                                                     
                                                                     
                                                                        ˆ
                                                                     
                                                                  
                                                               
                                                               
                                                                  
                                                                     
                                                                        a
                                                                     
                                                                     
                                                                        ′
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         
                                                            
                                                               a
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         
                                                            
                                                               t
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                          ∀
                                          i
                                          ∈
                                          I
                                          ;
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                          a
                                          ,
                                          
                                             
                                                a
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          
                                             
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      ̃
                                                   
                                                
                                             
                                             
                                                i
                                             
                                          
                                          :
                                          
                                          (
                                          
                                             
                                                a
                                             
                                             
                                                ̃
                                             
                                          
                                          )
                                          ⩾
                                          (
                                          
                                             
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                             
                                                ̃
                                             
                                          
                                          )
                                          ;
                                          
                                          t
                                          ∈
                                          
                                             
                                                
                                                   
                                                      T
                                                   
                                                   
                                                      ˆ
                                                   
                                                
                                             
                                             
                                                a
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (8)
                           
                              
                              
                                 
                                    y
                                 
                                 
                                    at
                                 
                              
                              ⩽
                              1
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                       ∈
                                       
                                          
                                             
                                                
                                                   T
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             
                                                
                                                   a
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                       :
                                       
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                       ⩽
                                       t
                                       +
                                       
                                          
                                             d
                                          
                                          
                                             a
                                          
                                       
                                       -
                                       1
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              
                              ∀
                              i
                              ∈
                              I
                              ;
                              a
                              ∈
                              
                                 
                                    
                                       
                                          P
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                              ;
                              
                              
                                 
                                    a
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              
                                 
                                    
                                       
                                          P
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    a
                                 
                              
                              ;
                              
                              t
                              ∈
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    a
                                 
                              
                           
                        
                     
                     
                        
                           (9)
                           
                              
                              
                                 
                                    y
                                 
                                 
                                    at
                                 
                              
                              
                              binary
                              
                              ∀
                              a
                              ∈
                              A
                              ,
                              
                              t
                              ∈
                              T
                           
                        
                     
                  


                     Objective function
                  

We maximize the discounted quantity of extracted metal over the horizon. The timing of these extraction activities corresponds to valid periods based on precedence and resources (see Sections 3.2 and 4.1).

We use a parameter, double-subscripted by time, 
                        
                           
                              
                                 v
                              
                              
                                 at
                                 
                                    
                                       t
                                    
                                    
                                       ̃
                                    
                                 
                              
                           
                        
                     , to ensure that an extraction activity beginning in period t continues at a predefined rate (with predefined consequences) through subsequent periods until completion. Because our model is deterministic, we assume fixed activity rates; consequently, equal quantities of ore are extracted in each period of the activity’s duration. By restricting the time at which an activity can produce ore to the interval 
                        
                           [
                           t
                           ,
                           t
                           +
                           
                              
                                 d
                              
                              
                                 a
                              
                           
                           -
                           1
                           ]
                        
                     , we can effectively ensure that we account for the full tonnage of a block.

We categorize our constraints as follows:


                     Packing constraints
                  

Constraints (1) prevent excessive extraction or backfilling activities by ensuring that an activity can only be scheduled to begin in at most one time period.


                     Knapsack constraints
                  

These constraints ensure that the demand for resources in any time period does not exceed the availability of those resources. Constraints (2) restrict extraction in any time period to be no more than the production capacity for that time period. Production includes extraction of ore blocks and waste blocks and, in practice, is limited by factors such as labor and equipment availability. Constraints (3) require the model to maintain grade control at the mill. To operate efficiently, the metal output from the mill must remain within certain bounds. If too much high-grade ore enters the mill, the efficiency of the operation suffers; consequently, the upper limit on metal production from the mill can be a tighter constraint on extraction activity than the production constraint.

Constraints (4) ensure that the paste being used for backfill activities does not exceed its availability. Note that here we also use a parameter, double-scripted by time (
                        
                           
                              
                                 p
                              
                              
                                 at
                                 
                                    
                                       t
                                    
                                    
                                       ̃
                                    
                                 
                              
                           
                        
                     ), to account for the quantity of paste applied in 
                        
                           
                              
                                 t
                              
                              
                                 ̃
                              
                           
                        
                      given the backfill activity began in period t. We require that for activity a, paste can only be applied within the interval 
                        
                           [
                           t
                           ,
                           t
                           +
                           
                              
                                 d
                              
                              
                                 a
                              
                           
                           -
                           1
                           ]
                        
                     .


                     Sequencing constraints
                  

Constraints (5)–(8) enforce the logic of the precedence rules between activities (see Fig. 7
                     ). Constraints (5) and (6) sequence activities in panels. Constraints (5) ensure that a panel activity a cannot begin until all of its predecessor panel activities, 
                        
                           
                              
                                 a
                              
                              
                                 ′
                              
                           
                        
                      in precedence chain i, i.e., in 
                        
                           
                              
                                 
                                    
                                       P
                                    
                                    
                                       ¯
                                    
                                 
                              
                              
                                 i
                              
                           
                        
                     , have been completed. Constraints (6) ensure that performing any one of the extraction activities in 
                        
                           
                              
                                 F
                              
                              
                                 a
                              
                           
                        
                      forces the inclusion of the corresponding backfill activity in the solution to maintain structural support. Specifically, in Box (a), constraints (5) ensure that Panelblock C can only be extracted if Panelblocks A and B are extracted in advance. Constraints (7), which simplify to 
                        
                           
                              
                                 y
                              
                              
                                 at
                              
                           
                           ⩽
                           1
                           -
                           
                              
                                 ∑
                              
                              
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 
                                    
                                       
                                          
                                             T
                                          
                                          
                                             ˆ
                                          
                                       
                                    
                                    
                                       
                                          
                                             a
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 :
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 ⩾
                                 t
                                 -
                                 
                                    
                                       d
                                    
                                    
                                       
                                          
                                             a
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 +
                                 1
                              
                           
                           
                              
                                 y
                              
                              
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                        
                     , ensure that the order of mining along a critical haulage route be maintained, regardless of whether or not all predecessors of a pillar have been extracted, and guarantee that haulage pillars furthest from the mine exit are taken before those that are closer. Box (b) shows that Pillar 2 has been extracted and the roof allowed to cave in; consequently, Pillar 1 can no longer be accessed. Also, the collapsed roof now blocks access to the panel, illustrating the need for constraints (8), which preclude a panel activity a from occurring once a haulage pillar 
                        
                           
                              
                                 a
                              
                              
                                 ′
                              
                           
                           ∈
                           
                              
                                 
                                    
                                       P
                                    
                                    
                                       ˆ
                                    
                                 
                              
                              
                                 a
                              
                           
                        
                      on which the activity depends is extracted.

Precedence constraints (5) prevent activity a from being scheduled at time t if a’s direct predecessor 
                        
                           
                              
                                 a
                              
                              
                                 ′
                              
                           
                        
                      is not completed by t. This implies that a is also prevented from being scheduled in all periods prior to t. As a consequence, we can formulate stronger constraints by summing 
                        
                           
                              
                                 y
                              
                              
                                 a
                                 
                                    
                                       t
                                    
                                    
                                       ˆ
                                    
                                 
                              
                           
                        
                      over all 
                        
                           
                              
                                 t
                              
                              
                                 ˆ
                              
                           
                           ⩽
                           t
                        
                     , as shown in (10) below. The additional variables included on the left-hand side produce a stronger constraint that is valid, i.e., no integer solutions are excluded, and can reduce fractionalization in the LP solution, resulting in a stronger initial LP bound (Nemhauser & Wolsey, 1988; Wolsey, 1998):
                        
                           (10)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       
                                          
                                             t
                                          
                                          
                                             ˆ
                                          
                                       
                                       ∈
                                       
                                          
                                             
                                                
                                                   T
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             a
                                          
                                       
                                       :
                                       
                                          
                                             t
                                          
                                          
                                             ˆ
                                          
                                       
                                       ⩽
                                       t
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    a
                                    
                                       
                                          t
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                              
                              ⩽
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                       ∈
                                       
                                          
                                             
                                                
                                                   T
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             
                                                
                                                   a
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                       :
                                       
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                       ⩽
                                       t
                                       -
                                       
                                          
                                             d
                                          
                                          
                                             
                                                
                                                   a
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              
                              ∀
                              i
                              ∈
                              I
                              ;
                              a
                              ,
                              
                                 
                                    a
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              
                                 
                                    
                                       
                                          P
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              :
                              
                              (
                              
                                 
                                    a
                                 
                                 
                                    ¯
                                 
                              
                              )
                              ⩾
                              (
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                              )
                              ;
                              
                              t
                              ∈
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    a
                                 
                              
                           
                        
                     
                  

Instances of 
                           
                              (
                              Q
                              )
                           
                         are NP-hard. They are at least as hard to solve as a category of very difficult nondeterministic polynomial time-complete problems (NP-complete), which, in theory, require exponential time to produce a solution. By rearranging constraints (8), i.e., moving the right-hand-side variable term to the left-hand side, we identify sets of set packing constraints: 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    
                                       
                                          
                                             
                                                T
                                             
                                             
                                                ˆ
                                             
                                          
                                       
                                       
                                          
                                             
                                                a
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              +
                              
                                 
                                    y
                                 
                                 
                                    at
                                 
                              
                              ⩽
                              1
                           
                        . While some set packing problems have a special structure that permits them to be solved easily as network problems, e.g., cyclic staffing (Bartholdi, Orlin, & Ratliff, 1980), set packing problems that lack special structure, as ours does, are categorized as NP-complete. Consequently, because a subset of our problem is NP-complete, we can say that the entire problem is at least as hard, or NP-hard (Gary & Johnson, 1979).

On a practical level, the model is complicated by the following factors: (i) the precedence constraints are irregular, following a variety of different logical structures, (ii) the block size is extremely heterogeneous, with corresponding extraction times of a few days to many months, and (iii) the ore grade is highly variable, resulting in the employment of three different mining methods. These factors create difficulties both in the nature of the constraints, and in the number of variables per instance, owing both to the number of time periods necessary to capture the required resolution and the inability to aggregate spatially.

Given its difficult mathematical structure, our high-fidelity model quickly becomes intractable as we increase the number of weeks in the time horizon. Consequently, we consider a variety of solution techniques to improve the tractability of our problem. In the following subsection, we mention an exact technique, i.e., one that does not compromise optimality of the solution. Because this is insufficient to ensure that our model instances are solvable, we also resort to heuristic (or inexact) techniques, which we detail in the following section.

For panel activities, we use a variant of an existing procedure for establishing early start times for machine placement activities in a sublevel caving mine (Martinez & Newman, 2011). Our variant considers blocks already scheduled to start, the prescribed sequence in which blocks must be extracted, and mining rates. We assume that the order of mining in a panel is fixed, and we represent this with an ordered set of activities in which no activity can start until its preceding activity is completed. If an activity has more than one precedent, it will be a member of more than one set. Because the algorithm is a fairly straightforward rendition of a critical path method, we refer the reader to O’Sullivan (2013, pp. 37–38) for the notation and details.

When the exact solution methods mentioned above are not sufficiently effective, heuristic techniques offer an additional approach that can be used to produce good solutions quickly. While it may be difficult or impossible to get a measure of the quality of a heuristic solution, the alternative is often to have no solution at all. We show in Section 5 that we can bound the quality of our heuristic solutions in many cases. For those in which we cannot, exact methods produce no solution at all.

Pillar extraction precedence rules have more degrees of freedom than those for the panel activities. Specifically, although a pillar’s extraction precludes all panel and pillar mining upstream from that pillar’s haulage route, pillars do not have any strict precedence. Consequently, we cannot use an exact network-based algorithm to calculate start time restrictions for the pillars as we did for the panelblocks; instead, we rely on a heuristic. We take advantage of the fact that we can solve smaller instances of our problem to optimality to heuristically determine the early start times for the pillars. This heuristic procedure, (
                           
                              V
                           
                        ), includes all of the pillars, but only a subset of medium-grade and lower-grade panel activities, which we solve for a shortened horizon. Excluding high-grade panel activities reduces the model size, and makes the pillars more attractive and more likely to appear in a solution. We use the date at which the first pillar along a critical haulage route is scheduled in the solution produced by (
                           
                              V
                           
                        ) as an early start time for all pillars along that haulage route.

Admittedly, using the same early start time for all pillars along a haulage route does not eliminate as many variables as were we to set the early starts based on the start time of each pillar in the solution to the smaller problem. However, it would be overly restrictive to employ the latter approach, because we want to provide the solver with the option to take any pillar early, regardless of its location along the haulage route.

In some mining applications, researchers use aggregation to heuristically reduce the number of variables by grouping adjacent ore blocks together into a superblock under the assumption that all of the blocks included in the aggregated superblock are extracted if the superblock is extracted; correspondingly, this approach can significantly decrease computational time for strategic production planning over a time horizon of decades or more (Boland, Dumitrescu, Froyland, & Gleixner, 2009; Tabesh & Askari-Nasab, 2011; Weintraub, Pereira, & Schultz, 2008). However, the benefits of block aggregation are countered by a reduction in scheduling flexibility which: (i) may preclude potential solutions in which the solver might cherry pick individual higher grade blocks, rather than the superblock itself and (ii) reduces the resolution at which extraction and blending decisions can be made because a common assumption for this approach is that the superblock must be mined continuously from start to completion. In addition, block aggregation may not be possible if there are complicated precedence rules, particularly between blocks in the superblock and their predecessors, which are not necessarily spatially proximate.

For our model, the high variation of the grade within adjacent blocks, in addition to the complexity of the mining precedences, preclude block aggregation for mining activities. However, with straightforward precedence rules between each other and no blending to consider, backfilling activities are candidates for aggregation. Aggregating backfill activities is the most efficient and cost effective way of backfilling in practice. For a number of panels, the backfilling of voids can be postponed until the mining sequence has been completed, after which the voids are filled together at the same time. In our model, we replace groups of backfills that can be scheduled consecutively a priori with a single superbackfill activity that has a volume equal to the total volume of its group members.

Our objective is to find an optimal production schedule for an operating mine at weekly fidelity to capture tactical decision making. We can solve instances of 
                           
                              (
                              Q
                              )
                           
                         for 52weeks, but these results are not useful to the mine in practice because most of the pillar activities have early start times greater than one year. When the horizon is increased to a length that would produce a practical solution, i.e., two years or more, we have great difficulty in finding any feasible solution to our problem, let alone an optimal one, simply by solving the monolith using a state-of-the-art commercial optimizer. Instances of 
                           
                              (
                              Q
                              )
                           
                         become too large for our hardware to read in for a mine life scenario of three years.

Initially, we sought to take advantage of the tractability of model instances with shorter horizons by experimenting with variants of a sliding time window heuristic (STWH) (Brown, Keegan, Vigus, & Wood, 2001; Pochet & Wolsey, 2006). With this approach, a subproblem window containing an initial segment of the time horizon is solved. The schedule is then fixed for the initial segment, the window is slid forward so that it overlaps the time horizon contained in the previous solution (and variable values in the overlapping portion are allowed to vary), and the next subproblem is solved. The heuristic continues in this manner, fixing variables and sliding, until the end of the horizon is reached. STWH approaches that do not consider the entire horizon until the last solve produce solutions for our problem relatively quickly; however, the quality of the solutions is poor when compared to the actual schedule used at the mine as a consequence of the greediness of the STWH, which, for horizons longer than 52weeks, schedules pillars too early and prevents panelblocks (that depend on those pillars for access) from being scheduled.

Another STWH variant, to which the authors refer as fix-and-relax (Dillenberger, Escudero, Wollensak, & Zhang, 1994), considers the entire time horizon, rather than simply a subset of the time periods. In general, there are three sets of variables: (i) those whose values are already fixed via a previous solve, (ii) those whose values must be integer in the current solve, and (iii) those whose values are relaxed to be continuous in the current solve. The authors use this heuristic to obtain good-quality solutions to instances of their production scheduling problems with variable setup times. In a similar vein, a decomposition heuristic that works well for our problem is based on sequentially solving a series of subproblems that: (i) contains only a subset of activities determined on the basis of ore grade in each subproblem, yet (ii) considers the entire time horizon. This heuristic is, in fact, similar to the one given in Escudero and Salmeron (2005), in which the authors consider introducing projects into successive solves, decreasing by value. In our case, the value corresponds to the grade; the details of our heuristic differ from those in Escudero and Salmeron (2005) in that the particular form of some of our precedence constraints requires careful book-keeping to ensure a feasible solution when activities are added to the problem instance in subsequent solves. We begin by solving for a schedule that considers only the high-grade extraction activities, i.e., those activities above a specified grade for which their inclusion produces a tractable problem. We then fix this schedule, include activities of the next highest grade, and resolve the model. We repeat this process of fixing variables, adding progressively lower grade activities, and resolving the model until we produce a solution that includes all of the extraction and backfill activities.

We now describe the optimization-based decomposition heuristic that we apply to 
                           
                              (
                              Q
                              )
                           
                        , the monolith integer program. The goal of the heuristic procedure, which we label (
                           
                              H
                           
                        ), is to achieve near-optimal solutions more quickly than by solving 
                           
                              (
                              Q
                              )
                           
                         directly, i.e., by executing the procedure (
                           
                              Q
                           
                        ). (Note: The use of Roman font in parentheses denotes a problem, while a similar use of the script letter denotes a procedure.)

Our procedure for (
                           
                              H
                           
                        ) follows:


                        Additional notation
                        
                           
                              •
                              
                                 
                                    
                                       k
                                       ∈
                                       K
                                    
                                 : set of subproblems.


                                 
                                    
                                       
                                          
                                             
                                                
                                                   E
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             k
                                          
                                       
                                    
                                 : subset of extraction activities considered in subproblem 
                                    
                                       k
                                       ∈
                                       K
                                    
                                 .


                                 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             k
                                          
                                       
                                    
                                 : set of fixed activities that occur in the solution to problem 
                                    
                                       k
                                       ∈
                                       K
                                    
                                 .


                                 
                                    
                                       
                                          
                                             
                                                
                                                   t
                                                
                                                
                                                   ˇ
                                                
                                             
                                          
                                          
                                             ak
                                          
                                       
                                    
                                 : time period that fixed activity 
                                    
                                       a
                                       ∈
                                       A
                                    
                                  was scheduled to start in the solution to subproblem 
                                    
                                       k
                                       ∈
                                       K
                                    
                                 .


                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ̲
                                          
                                       
                                       ,
                                       
                                          
                                             f
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                 : time window for fixed activity 
                                    
                                       a
                                       ,
                                       
                                          
                                             
                                                
                                                   t
                                                
                                                
                                                   ˇ
                                                
                                             
                                          
                                          
                                             ak
                                          
                                       
                                       -
                                       
                                          
                                             f
                                          
                                          
                                             ̲
                                          
                                       
                                       ⩽
                                       t
                                       ⩽
                                       
                                          
                                             
                                                
                                                   t
                                                
                                                
                                                   ˇ
                                                
                                             
                                          
                                          
                                             ak
                                          
                                       
                                       +
                                       
                                          
                                             f
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                 .


                        Heuristic (
                           
                              H
                           
                        ):
                           
                              
                                 Step 1.
                              Define the initial subproblem, 
                                    
                                       (
                                       k
                                       =
                                       1
                                       )
                                    
                                 , of all backfill activities and a subset of high-grade extraction activities 
                                    
                                       
                                          
                                             
                                                
                                                   E
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             1
                                          
                                       
                                    
                                 .

Solve the initial subproblem for the entire time horizon, 
                                    
                                       T
                                    
                                 .

Define a set 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             1
                                          
                                       
                                    
                                  of activities that have a nonzero variable value in the solution to the initial subproblem.

For subproblems 
                                    
                                       k
                                       ∈
                                       K
                                       :
                                       k
                                       >
                                       1
                                    
                                 ,
                                    
                                       
                                          Step 4a.
                                       Define subproblem k of all activities considered by the previous subproblem, 
                                             
                                                k
                                                -
                                                1
                                             
                                          , in addition to the extraction activities characterized as possessing one grade lower than those in subproblem 
                                             
                                                k
                                                -
                                                1
                                             
                                          .

Add a constraint requiring that each nonzero variable, 
                                             
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      at
                                                   
                                                
                                             
                                          , in 
                                             
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      k
                                                      -
                                                      1
                                                   
                                                
                                             
                                           assume a value of 1 within a restricted time window of the horizon, 
                                             
                                                
                                                   
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            ˇ
                                                         
                                                      
                                                   
                                                   
                                                      a
                                                      ,
                                                      k
                                                      -
                                                      1
                                                   
                                                
                                                -
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      ̲
                                                   
                                                
                                                ⩽
                                                t
                                                ⩽
                                                
                                                   
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            ˇ
                                                         
                                                      
                                                   
                                                   
                                                      a
                                                      ,
                                                      k
                                                      -
                                                      1
                                                   
                                                
                                                +
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                          .

Solve subproblem k for the entire time horizon.

Each subproblem k considers all backfill activities and a subset of extraction activities, 
                           
                              
                                 
                                    
                                       
                                          E
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    k
                                 
                              
                           
                        . We amend our model shown in Section 3 to reflect this change by altering the objective function as follows:
                           
                              
                                 (
                                 
                                    
                                       
                                          
                                             Q
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       k
                                    
                                 
                                 )
                                 
                                 
                                    max
                                 
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                          
                                             
                                                
                                                   
                                                      E
                                                   
                                                   
                                                      ˆ
                                                   
                                                
                                             
                                             
                                                k
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          t
                                          ∈
                                          
                                             
                                                
                                                   
                                                      T
                                                   
                                                   
                                                      ˆ
                                                   
                                                
                                             
                                             
                                                a
                                             
                                          
                                       
                                    
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                t
                                             
                                             
                                                ̃
                                             
                                          
                                          ∈
                                          T
                                          :
                                          
                                             
                                                t
                                             
                                             
                                                ̃
                                             
                                          
                                          ⩽
                                          t
                                          +
                                          
                                             
                                                d
                                             
                                             
                                                a
                                             
                                          
                                          -
                                          1
                                       
                                    
                                 
                                 
                                    
                                       g
                                    
                                    
                                       a
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       at
                                       
                                          
                                             t
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                 
                                 
                                    
                                       (
                                       1
                                       +
                                       r
                                       )
                                    
                                    
                                       -
                                       
                                          
                                             t
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       at
                                    
                                 
                              
                           
                        
                     

Constraints (1)–(3) now apply to the subset 
                           
                              
                                 
                                    
                                       
                                          E
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    k
                                 
                              
                           
                        , rather than to the entire set 
                           
                              A
                           
                         or 
                           
                              E
                           
                        , and constraints (6) now consider only the subset of mining activities, 
                           
                              
                                 
                                    F
                                 
                                 
                                    a
                                 
                              
                           
                         
                        
                           
                              ∩
                           
                        
                        
                        
                           
                              
                                 
                                    
                                       
                                          E
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    k
                                 
                              
                           
                        . In addition, we modify the precedence constraints to consider only the extraction activities within a precedence set that are also in
                        
                           
                              
                                 
                                    
                                       
                                          E
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    k
                                 
                              
                           
                        . Consequently, each subproblem, with the exception of the final one, may produce an infeasible schedule because some required predecessors are missing. Therefore, activities that appear to be skipped because they were not included in a subset must be incorporated into the schedule as the heuristic proceeds through the subproblems. To ensure that space is allotted for the missing activities, we change precedence constraints (5) so that the time at which a panel activity can begin is based on the difference between the early start times for panel activities a and 
                           
                              
                                 
                                    a
                                 
                                 
                                    ′
                                 
                              
                              ,
                              
                                 
                                    ES
                                 
                                 
                                    a
                                 
                              
                              -
                              
                                 
                                    ES
                                 
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                        , and not on the duration of the preceding activity, 
                           
                              
                                 
                                    d
                                 
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                        .
                           
                              
                                 
                                    
                                       y
                                    
                                    
                                       at
                                    
                                 
                                 ⩽
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          
                                             
                                                
                                                   
                                                      T
                                                   
                                                   
                                                      ˆ
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          :
                                          
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                          ⩽
                                          t
                                          +
                                          
                                             
                                                ES
                                             
                                             
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          -
                                          
                                             
                                                ES
                                             
                                             
                                                a
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       
                                          
                                             a
                                          
                                          
                                             ′
                                          
                                       
                                       
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 
                                 ∀
                                 i
                                 ∈
                                 I
                                 ;
                                 a
                                 ,
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 
                                    
                                       
                                          
                                             P
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 ∩
                                 
                                 
                                    
                                       
                                          
                                             E
                                          
                                          
                                             ˆ
                                          
                                       
                                    
                                    
                                       k
                                    
                                 
                                 ∪
                                 B
                                 :
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       ¯
                                    
                                 
                                 )
                                 ⩾
                                 (
                                 
                                    
                                       
                                          
                                             a
                                          
                                          
                                             ′
                                          
                                       
                                    
                                    
                                       ¯
                                    
                                 
                                 )
                                 ;
                                 
                                 t
                                 ∈
                                 
                                    
                                       
                                          
                                             T
                                          
                                          
                                             ˆ
                                          
                                       
                                    
                                    
                                       a
                                    
                                 
                              
                           
                        Because the early start times for panel activities are calculated by considering all panel activities, our algorithm, based on the critical path method, ensures that the difference between early start times for any two activities in an ordered set is sufficient to complete all activities between them in the ordered set. We do not make similar changes to constraints (7) and (8) because they relate pillars to each other and to panels. Exact early start times for pillar activities cannot be calculated using a network-based algorithm, and pillars’ extraction is never required to facilitate further mining. Consequently, we are not required to maintain space for pillar activities in any subproblem to produce a feasible schedule.

In Step 1 of the heuristic (
                           
                              H
                           
                        ), the initial subproblem considers all backfill activities, but only the extraction activities associated with the highest grade of ore. Solving the initial subproblem, Step 2, produces a schedule that forms the backbone for the finished schedule. We require all activities that appear in the schedule at this point to remain in the schedule as the heuristic progresses. Subsequent subproblems merely consider lower grade extraction and related backfill activities. Therefore, we try to obtain a good initial schedule by including as many activities as possible in the corresponding subproblem. By doing this, we may attain a higher-quality heuristic solution because the subproblem more closely resembles the monolith. In Step 3, we define 
                           
                              
                                 
                                    S
                                 
                                 
                                    1
                                 
                              
                           
                         of all activities that were scheduled in the initial subproblem solution.


                        Step 4 outlines the procedure for the remaining subproblems. In Step 4a, we identify the activities in the current subproblem k, which consist of: (i) all backfilling activities; (ii) all previously considered extraction activities; and (iii) a set of lower grade extraction activities that were not previously considered for scheduling. The set 
                           
                              
                                 
                                    
                                       
                                          E
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    k
                                 
                              
                           
                         is comprised of (ii) and (iii). In Step 4b, we ensure that variables with nonzero values from the previous solution also have nonzero values in the current subproblem by adding the following constraint to the model:
                           
                              (11)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      t
                                                   
                                                   
                                                      ˇ
                                                   
                                                
                                             
                                             
                                                a
                                                ,
                                                k
                                                -
                                                1
                                             
                                          
                                          -
                                          
                                             
                                                f
                                             
                                             
                                                ̲
                                             
                                          
                                          ⩽
                                          t
                                          ⩽
                                          
                                             
                                                
                                                   
                                                      t
                                                   
                                                   
                                                      ˇ
                                                   
                                                
                                             
                                             
                                                a
                                                ,
                                                k
                                                -
                                                1
                                             
                                          
                                          +
                                          
                                          
                                             
                                                f
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       at
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 a
                                 ∈
                                 
                                    
                                       S
                                    
                                    
                                       k
                                       -
                                       1
                                    
                                 
                              
                           
                        
                     

In this constraint, the set 
                           
                              
                                 
                                    S
                                 
                                 
                                    k
                                    -
                                    1
                                 
                              
                           
                         consists of the activities that appear in the solution to the previous subproblem, 
                           
                              k
                              -
                              1
                           
                        . We constrain these activities to appear in the current subproblem solution close to the time at which the activity was scheduled in subproblem 
                           
                              k
                              -
                              1
                           
                         by restricting the start times for these fixed activities based on a time window around 
                           
                              
                                 
                                    
                                       
                                          t
                                       
                                       
                                          ˇ
                                       
                                    
                                 
                                 
                                    a
                                    ,
                                    k
                                    -
                                    1
                                 
                              
                           
                        , the time at which the fixed activity was scheduled in the solution to subproblem 
                           
                              k
                              -
                              1
                           
                        . We control the size of the window by choosing parameter values, 
                           
                              
                                 
                                    f
                                 
                                 
                                    ̲
                                 
                              
                           
                         and 
                           
                              
                                 
                                    f
                                 
                                 
                                    ¯
                                 
                              
                           
                        . A larger window size may produce higher quality solutions because it presents the solver with more time periods in which to schedule the activities in 
                           
                              
                                 
                                    S
                                 
                                 
                                    k
                                    -
                                    1
                                 
                              
                           
                         over the horizon. However, larger windows generate more variables to be considered by the solver, reducing the tractability of the problem. We solve the current subproblem in Step 4c and repeat Step 4 while additional subproblems remain. The final subproblem considers the entire set of activities and produces a feasible production schedule.

Occasionally, when first working with a new data set, we may encounter an infeasible subproblem if the inclusion of new activities, combined with those already in 
                           
                              
                                 
                                    S
                                 
                                 
                                    k
                                 
                              
                           
                        , would require more of a resource than is available, violating one or more of constraints (2)–(4). Widening the windows around the corresponding variables can induce a feasible subproblem in this case. Otherwise, a strategy of solving the initial subproblem subject to tighter resource bounds allows subsequent subproblems to satisfy the resource constraints.

The tractability of each subproblem in the heuristic procedure, 
                           
                              (
                              H
                              )
                           
                        , like the monolith procedure 
                           
                              (
                              Q
                              )
                           
                        , is highly correlated with: (i) the number of activities in the problem; (ii) the ratio of pillar activities to panel activities; and (iii) the number of periods in the time horizon. Tractable instances of 
                           
                              (
                              Q
                              )
                           
                        , which we solve for short time horizons with procedure 
                           
                              (
                              Q
                              )
                           
                        , provide us with an indication of the appropriate size for the initial subproblem of the heuristic.

As mentioned previously, the number of pillars included in an instance of the problem significantly influences tractability. Consequently, we try to ensure that a manageable number of pillars are included in each subproblem. We can estimate the number of pillars to add to the data by solving a series of instances of 
                           
                              (
                              Q
                              )
                           
                         in which each instance considers more pillars than the previous one. Fig. 8
                         shows the results of one such trial, and indicates that the problem becomes difficult to solve when more than 120 pillars are included.

We attempt to solve the initial subproblem for the estimated number of activities and pillars. If a subproblem solves slowly, we reduce the number of pillar and/or panel activities. Conversely, an instantaneous solution indicates that we should add more activities to the subproblem. As we proceed through subproblems, i.e., as k increases, we consider an increasing number of activities. However, the size of the problem remains manageable because, for the activities contained in the relevant sets 
                           
                              
                                 
                                    S
                                 
                                 
                                    k
                                 
                              
                           
                        , we only define variables for the number of time periods in their window.

In this section, we compare the performance of our heuristic procedures, backfill aggregation and 
                        
                           (
                           H
                           )
                        
                     , described in Section 4, to the monolith solution procedure 
                        
                           (
                           Q
                           )
                        
                     . (For ease of exposition, we refer to the union of the heuristic procedures here simply as 
                        
                           (
                           H
                           )
                        
                     .) We use three real data sets that correspond to different stages in the life of the Lisheen mine. The design of the mine was significantly altered between each of these stages, resulting in changes to block shape definitions and, consequently, new extraction approaches, precedences, and rates of extraction. Each data set contains nearly 1000 extraction activities and, depending on the data set, some number fewer than this of backfill activities (which depend on the precedence structure). We consider three time horizons for each data set, ranging from 52 to 156weeks. The combination of the different mine designs and horizon lengths results in a total of nine data sets. The range of possible outcomes for the problem 
                        
                           (
                           Q
                           )
                        
                      is represented in Fig. 9
                     . Each outcome is associated with either procedure 
                        
                           (
                           Q
                           )
                        
                      or procedure 
                        
                           (
                           H
                           )
                        
                     . If we can produce an integer feasible solution, then the best theoretical outcome is to solve the monolith to optimality; otherwise, using a heuristic can produce a good solution. If we cannot solve the monolith for an integer-feasible solution, the best we can do with 
                        
                           (
                           Q
                           )
                        
                      is to produce a bound from the LP relaxation solution; if we cannot do that, it indicates that the problem is too large to be read into the solver, and 
                        
                           (
                           Q
                           )
                        
                      produces no information.

For instances of 
                        
                           (
                           Q
                           )
                        
                     , linear programming (LP) relaxation solutions produce weak bounds that can be up to 15% greater than the objective function value of the optimal integer solution, because, without binary restrictions on the variables, the precedence rules cannot be enforced correctly. Specifically, an LP solution to 
                        
                           (
                           Q
                           )
                        
                      schedules haulage pillars for concurrent extraction even though they are members of the same critical haulage route, resulting in more haulage pillars scheduled for extraction than physically possible. Therefore, we consider implementing tightened constraints (10) in lieu of constraints (5); however, the former set of constraints produces models with a denser constraint matrix, so while we begin the branch-and-bound procedure with a better LP bound, progression through the tree is slowed by an increase in computation time at each node. For our problem, the computational cost of implementing tightened precedence constraints outweighs the benefit from having stronger initial bounds. Consequently, we revert to using the original form of the precedence constraints, i.e., constraints (5).

We model our integer program using the AMPL programming language (Fourer, Gay, & Kernighan, 2003), and solve it with the CPLEX solver, Version 12.1 (CPLEX, 2009) on a machine with two Dual Intel Xeon X5570 Quad Core processors and 24Gigabytes of RAM. For all instances of 
                        
                           (
                           Q
                           )
                        
                     , we set a time limit of 24hours.

We summarize our computational results in Table 2
                     . For each data set, we first list the problem size in terms of the numbers of variables and constraints in 
                        
                           (
                           Q
                           )
                        
                      after implementation of the variable reduction techniques mentioned in Sections 3.2 and 4.1. Consequently, 
                        
                           (
                           Q
                           )
                        
                      and 
                        
                           (
                           H
                           )
                        
                      solve identically sized problems. Column 4 compares the quality of the solutions expressed as a ratio of the objective function value produced by (
                        
                           H
                        
                     ) relative to that produced by (
                        
                           Q
                        
                     ). Values close to 1 indicate that the heuristic produces a near-optimal solution, and, specifically, a value less than 1 indicates that solving 
                        
                           (
                           Q
                           )
                        
                      directly yields a better objective, while a value greater than 1 indicates that the heuristic found a better solution than the monolith due to a gap resulting after the time limit. A value of infinity indicates that, after the time limit, the monolith had found no integer solution. In lieu of obtaining an integer-feasible solution, a best bound provides a measure of heuristic performance. Column 5 displays the ratio of the best bound value from (
                        
                           Q
                        
                     ) to the best integer solution values from (
                        
                           H
                        
                     ). Values close to 1 indicate that this solution is close to its theoretical bound. The total solution times for 
                        
                           (
                           H
                           )
                        
                      and 
                        
                           (
                           Q
                           )
                        
                      are given in Columns 6 and 7. The final column lists the number of subproblems that we solved in an instance of the heuristic.

We obtain optimal integer solutions by solving 
                        
                           (
                           Q
                           )
                        
                      directly for all three 52-week data sets. Although 
                        
                           (
                           Q
                           )
                        
                      produces a better objective value than 
                        
                           (
                           H
                           )
                        
                      for two of the three data sets, the objective values resulting from instances solved with 
                        
                           (
                           H
                           )
                        
                      are within 1% of the optimal solutions produced by 
                        
                           (
                           Q
                           )
                        
                     . For all three data sets, 
                        
                           (
                           H
                           )
                        
                      produces solutions in under 4minutes. By contrast, at best, procedure 
                        
                           (
                           Q
                           )
                        
                      requires 13minutes to solve and, at worst, requires five hours to produce a solution.

For the 104-week horizon, 
                        
                           (
                           Q
                           )
                        
                      can no longer identify an optimal solution within the time limit of 24hours and can only produce an integer feasible solution for data set C2. Solving 
                        
                           (
                           H
                           )
                        
                      now requires significantly more time than solving problem instances for the shorter horizon (just over 2hours, on average, versus 38minutes). For these data sets, we use the best bound from 
                        
                           (
                           Q
                           )
                        
                      to compute the quality of the heuristic solutions. For data sets A2 and B2, the best bound corresponds to the tightened root node value, i.e., the objective value of the linear program (LP) relaxation after CPLEX has added a number of cuts. For data set A2, our heuristic produces a solution within 8.8% of a theoretical best possible objective value. We implemented an instance of 
                        
                           (
                           Q
                           )
                        
                      with the tightened precedence constraints mentioned in Section 3. However, while the initial bound provided by the LP relaxation was tighter than before, the solver progressed slowly and did not generate enough cuts at the root node to produce a better bound than the original formulation did after generating cuts.

With a solution within 3.7% of its best bound, the heuristic performs well for data set B2. Although this best bound is also a result of cuts generated at the root node, the cuts appear to be more effective than they were on the preceding data set. We measure the quality of the heuristic solution for data set C2 by comparing it against the best feasible solution (Column 4) and also against the best bound (Column 5) produced by 
                        
                           (
                           Q
                           )
                        
                     . In this case, because the solver outputs a solution for 
                        
                           (
                           Q
                           )
                        
                      at the 24hour time limit, a gap of 5.49% remains between the best feasible integer solution and the best bound. Correspondingly, Column 4 shows that 
                        
                           (
                           H
                           )
                        
                      produces an objective value that is better than that provided by the monolith procedure, 
                        
                           (
                           Q
                           )
                        
                     , by 5.4%. Again, the best bound from 
                        
                           (
                           Q
                           )
                        
                      provides a better measure with which to assess the quality of the heuristic solution. In this instance, the heuristic produces a solution within 0.1% of the best bound.

We cannot bound solutions produced with 
                        
                           (
                           H
                           )
                        
                      for the 156-week post-life-of-mine horizon because the model size for 
                        
                           (
                           Q
                           )
                        
                      exceeds 30Gigabytes, which is beyond the capability of our hardware. We do solve all three instances of 
                        
                           (
                           Q
                           )
                        
                      by applying the heuristic, 
                        
                           (
                           H
                           )
                        
                     , although the problem size now requires more subproblems to be solved than for shorter horizons and the solve times increase to 40hours in the worst case.

@&#CONCLUSIONS@&#

Our integer programming model considers the strategic implications of extraction activities while scheduling production at a tactical level. As a result, model instances are large and possess excessive solution times for schedules of requisite length. We expedite solutions by: (i) using exact and heuristic methods to reduce the problem size and (ii) developing an optimization-based decomposition heuristic.

Comparing performance on nine real data sets from the Lisheen mine, the decomposition heuristic produces good solutions significantly faster than the monolith problem. For the three problem instances that the monolith procedure solves to optimality, the heuristic produces objective values within 1% of optimality and solves the problems, on average, 98% faster than solving the monolith directly. In three more cases, the monolith can only provide a bound against which to compare the heuristic solution’s objective function value. In only one of these cases is the gap between the bound and heuristic greater than 3.7%; however, this difference does not provide sufficient evidence to question the quality of the heuristic solution because the gap is also a function of the quality of the LP bound. Most significantly, the heuristic can produce practical solutions for datasets that generate a problem size in monolithic form that exceeds the memory capacity of our hardware.

In an attempt to improve the quality of the LP bound for the monolith, we implement tightened precedence constraints. However, the increase in computational time associated with these denser constraints reduces tractability, producing unsatisfactory results. A potential topic for future research is to implement a by formulation (e.g., Caccetta & Hill, 2003) for the problem, in which 
                        
                           
                              
                                 y
                              
                              
                                 at
                              
                           
                        
                      would assume a value of 1 if activity a is performed by time t. This type of formulation reduces the density of constraints that contain summations of variables over time, i.e., the precedence constraints. However, it would increase the density of the knapsack constraints, of which our model contains more than most mine production scheduling models for which this technique has been shown to be effective (Lambert, Brickey, Newman, & Eurek, 2014). More dense constraints, combined with a more complicated precedence structure induced, in part, by the backfill activities, yields no guarantee that a by formulation would expedite solutions, because reducing the density of one type of constraint might increase the computational cost associated with other constraints in our model. Indeed, preliminary testing on similar models reveals a faster solving LP relaxation and fewer nodes examined overall, yet a slower node throughput (due to slower solving LPs at the child nodes of the branch-and-bound tree).

@&#ACKNOWLEDGEMENTS@&#

The authors wish to acknowledge the monetary and informational support provided by the Lisheen Mine, and the use of the supercomputer Mio, administered by Tim Kaiser, on the Colorado School of Mines campus. They also wish to thank three anonymous reviewers for their helpful comments on earlier drafts of this paper.

@&#REFERENCES@&#

