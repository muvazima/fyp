@&#MAIN-TITLE@&#Bayesian evolutionary hypergraph learning for predicting cancer clinical outcomes

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose a new prognostic prediction model based on a Bayesian evolutionary learning.


                        
                        
                           
                           The evolutionary hypergraph classifiers identify higher-order prognostic biomarkers.


                        
                        
                           
                           The proposed Bayesian evolutionary learning effectively handles a complex search space.


                        
                        
                           
                           The performance of hypergraph classifiers outperforms other classification models.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Bayesian evolutionary learning

Clinical outcome prediction

Hypergraph classifier

Cancer genomic data

@&#ABSTRACT@&#


               
               
                  Predicting the clinical outcomes of cancer patients is a challenging task in biomedicine. A personalized and refined therapy based on predicting prognostic outcomes of cancer patients has been actively sought in the past decade. Accurate prognostic prediction requires higher-order representations of complex dependencies among genetic factors. However, identifying the co-regulatory roles and functional effects of genetic interactions on cancer prognosis is hindered by the complexity of the interactions. Here we propose a prognostic prediction model based on evolutionary learning that identifies higher-order prognostic biomarkers of cancer clinical outcomes. The proposed model represents the interactions of prognostic genes as a combinatorial space. It adopts a flexible hypergraph structure composed of a large population of hyperedges that encode higher-order relationships among many genetic factors. The hyperedge population is optimized by an evolutionary learning method based on sequential Bayesian sampling. The proposed learning approach effectively balances performance and parsimony of the model using information-theoretic dependency and complexity-theoretic regularization priors. Using MAQC-II project data, we demonstrate that our model can handle high-dimensional data more effectively than state-of-the-art classification models. We also identify potential gene interactions characterizing prognosis and recurrence risk in cancer.
               
            

@&#INTRODUCTION@&#

Prognostic prediction is an important task in clinical medicine. It is crucial to estimate the clinical outcomes of patients and the potential effects of treatments. A refined treatment based on likely clinical outcomes is especially necessary in oncology due to the variation of cancer progression in patients. By accurately estimating the clinical response to treatments, clinicians can personalize and hence provide an improved therapy for a patient.

Gene expression profiling has been widely used to identify tumor heterogeneity, and it has led to the discovery of molecular signatures of potential prognostic and therapeutic interest [1,2]. As such, it is recognized as a powerful source for improving prognostic assessment and treatment selection in cancer medicine. Moreover, cancer prognosis is associated with combinatorial and modular regulation by multiple genetic factors. Thus, for more precise prediction of cancer clinical outcomes, the higher-order relationships among genetic factors must be induced from gene expression profiles. However, the complexity of gene interactions renders this task extremely challenging.

Predictive methods, which classify patient outcomes on a genome-wide scale from high-throughput biological data, have flourished in recent decades. Many studies have adopted computational approaches, such as machine learning-based models [3–7] and statistical methods [8,9], to predict prognosis from cancer genomic data. However, few of the existing approaches address the higher-order interactions between genes involved in cancer prognosis.

Predicting outcomes from higher-order gene relationships requires searching an exponential search space consisting of tens of thousands of genes. It is infeasible to exhaustively explore such a huge combinatorial feature space using a gradient method, and thus various feature selection methods are frequently used [10]. Typically, these approaches reduce the problem space by individually evaluating each gene under the assumption of the independence between features. However, such restrictions may not capture the important genes involved in higher-order relationships underlying pathological processes.

Evolutionary computation is one of the most useful techniques for solving real-world complex problems. This approach is conceptually simple and widely applicable, and it outperforms classical optimization procedures. Moreover, it can be easily hybridized with various existing methods and data structures. Evolutionary methods include genetic algorithm (GA) [11,12], genetic programing (GP) [13], particle swarm optimization (PSO) [14], learning classifier system (LCS) [15,16], multi-objective optimization evolutionary algorithm (MOEA) [17], and estimation of distribution algorithm (EDA) [18]. These methods have been successfully applied to problems that are unsolvable by deterministic methods. Numerous biological problems can be formulated as optimization issues, for which evolutionary approaches are eminently suitable [19–23]. Also, especially in medicine, evolutionary computation has expanded rapidly in recent years, and is currently adopted in diagnosis and prognosis [24–26]. Despite various proposals and several successes, however, it remains difficult to evolve complex higher-order systems involving tens of thousands of features.

Here we introduce a new population-based model that uses an evolutionary learning method to predict clinical outcomes of cancer patients (Fig. 1
                     ). The model handles complex genetic interactions by means of a flexible hypergraph structure comprising a large population of hyperedges, encoding the multi-variable combinations corresponding to all potential genes or markers. Each hyperedge is weighted by its discriminative ability to predict prognostic outcomes. Thus, each hyperedge potentially behaves as a prognostic module influencing the cancer clinical outcomes.

The model learning involves the search of a high-dimensional space characterizing the higher-order relationships between factors. To learn the model from a dataset comprising several tens of thousands of genetic variables, we use an evolutionary method based on sequential Bayesian sampling scheme. The proposed Bayesian evolutionary algorithm is designed upon a standard evolutionary computation framework. The repeat of variation, evaluation, and selection is addressed as a sequential Bayesian sampling process, where the posterior distribution is recursively calculated from the prior distribution by estimating the likelihood from fitness measurements. Using this Bayesian formulation of evolutionary computation, the model can determine the problem-specific bias as a guideline for efficient search of a huge combinatorial feature space. This study adopts an information theoretic co-regulatory measure i.e., mutual information, and the model complexity for the prior distribution. The information theoretic measure enhances the efficiency of the evolutionary search, while the complexity retains a compact model size by controlling the parsimony.

The proposed model is evaluated on MAQC-II breast cancer and multiple myeloma gene expression data [27]. The proposed model demonstrates high classification performance for predicting prognosis in patients, and can identify higher-order prognostic biomarkers of cancer clinical outcomes. Moreover, our model directly identifies potential modules of informative genes that characterize prognosis and recurrence risk in cancer.

This paper is organized as follows. Section 2 details the proposed hypergraph-based model and the Bayesian evolutionary algorithm for learning the model. In Section 3, the experimental results are described and discussed. Discussion and conclusions are presented in Sections 4 and 5.

@&#METHODOLOGY@&#

A hypergraph [28] is a generalized graph for representing complex interactions. The edge in a conventional graph (which connects two vertices) is generalized to the hyperedge, which connects two or more vertices concurrently. A hyperedge is weighted by the strength of the higher-order dependency among its elements. Unlike conventional graphs, hypergraphs are suitable for explicitly representing higher-order relationships among many features.

Formally, a hypergraph H is formulated as a triple H
                        ={V,
                        E,
                        W}, where V, E, and W denote the sets of vertices v, hyperedges e, and hyperedge weights w(e), respectively. A hyperedge of weight w(e) is represented as a subset of V. Let d(v) and δ(e) denote the degree of a vertex v and the degree of a hyperedge e, respectively. Each degree is then defined as follows:
                           
                              (1)
                              
                                 d
                                 (
                                 v
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          E
                                       
                                    
                                 
                                 w
                                 (
                                 e
                                 )
                                 h
                                 (
                                 v
                                 ,
                                 e
                                 )
                                 
                                 and
                                 
                                 δ
                                 (
                                 e
                                 )
                                 =
                                 |
                                 e
                                 |
                                 ,
                              
                           
                        where |e| is the cardinality (number of vertices) of e and h(v,
                        e) is an indicator function that returns 1 if v is an element of e and 0, otherwise. A hyperedge with degree k is called a k-hyperedge and a hypergraph solely consisting of k-hyperedges is a k-hypergraph. Fig. 2
                         shows an example of a hypergraph. A higher-degree vertex can be regarded as a hub of the hypergraph structure, which may signify an informative feature for classifying the given data. Moreover, a hyperedge with higher degree embodies more specific information, whereas one with lower degree characterizes more general patterns. Hypergraphs have become a popular choice for solving a range of problems [29–31] by their higher-order representation.

In this study, the hypergraph is a population of hyperedges reflecting the higher-order relationships among many features. As proposed in [32,33], the vertices of the hypergraph denote genetic factors obtained from genomic data. A hyperedge includes two or more variables corresponding to genes and encodes an arbitrary relationship among them. The weight of the hyperedge reflects the strength of the higher-order dependency among the involved genes for each class denoting the prognostic outcome. Thus, each hyperedge implies a higher-order gene interaction that influences cancer clinical outcomes. The hypergraph therefore is an ensemble of gene modules that enhances the discriminative capability of predicting a specific prognosis.

The proposed population-based model uses hypergraph structures composed of a large collection of hyperedges playing the role of a weak classifier. These hyperedge ensembles are called hypergraph classifiers. The unlabeled data can be predicted by assembling this population of many weak classifiers.

Let Y denote a set of class labels denoting clinical outcome. When the nth data instance x
                        (
                        
                           n
                        
                        ) and a hypergraph H are given, x
                        (
                        
                           n
                        
                        ) is then classified as by 
                           
                              
                                 
                                    
                                       
                                          y
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    (
                                    n
                                    )
                                 
                              
                           
                         whose weighted summation of hyperedges matched to x
                        (
                        
                           n
                        
                        ) is the largest among the elements of Y. Specifically, the class label is predicted as follows:
                           
                              (1)
                              Calculate cy
                                 , the sum of weights for y
                                 ∈
                                 Y over all hyperedges in E:


                        
                           
                              (2)
                              Predict the class label of x
                                 (n), 
                                    
                                       
                                          
                                             
                                                
                                                   y
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             (
                                             n
                                             )
                                          
                                       
                                    
                                 , as the y value with the highest total weight:

In Eqs. (2) and (3) above, 
                           
                              f
                              (
                              
                                 
                                    x
                                 
                                 
                                    (
                                    n
                                    )
                                 
                              
                              ,
                              
                                 
                                    e
                                 
                                 
                                    i
                                 
                              
                              )
                              
                              and
                              
                              φ
                              (
                              
                                 
                                    y
                                 
                                 
                                    (
                                    n
                                    )
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    i
                                 
                              
                              )
                           
                         denote a matching and an indicator functions, which return 1 if ei
                         matches x
                        (
                        
                           n
                        
                        ) and if y
                        (
                        
                           n
                        
                        )
                        =
                        yi
                        , respectively. These functions are defined as Eqs. (14) and (15) in the next subsection. This classification process is similar to an LCS [15], in which each classifier participates in classifying the unlabeled data as a significant condition-action rule. However, the proposed hypergraph classifier focuses on the hypergraph structure rather than each hyperedge itself. The hyperedges composing the population exert the main influence on the classification performance. In the next subsection, we explain how the population is generated and how the model is learned by an evolutionary method.

Bayesian evolutionary algorithm implements an evolutionary learning method based on sequential Bayesian sampling. A standard evolutionary computation process that iterates the generation of individuals (variation), calculation of the fitness (evaluation), and selection of individuals (selection) is implemented with the Bayesian sampling framework where the posterior distribution is recursively computed by estimating the likelihood from the prior distribution. Fig. 3
                            presents the terms of hypergraph classifiers and their corresponding terms in standard evolutionary computation schema. A naïve evolutionary method may be inefficient when the problem involves the searching of vast and complex solution spaces. However, Bayesian evolutionary algorithm can efficiently search the space by introducing problem-specific knowledge to the prior distribution.

Let Ht
                            be a population at the tth generation. For a dataset D
                           =(X,
                           Y), where 
                              
                                 X
                                 =
                                 
                                    
                                       {
                                       
                                          
                                             x
                                          
                                          
                                             (
                                             n
                                             )
                                          
                                       
                                       }
                                    
                                    
                                       n
                                       =
                                       1
                                    
                                    
                                       N
                                    
                                 
                              
                            and 
                              
                                 Y
                                 =
                                 
                                    
                                       {
                                       
                                          
                                             y
                                          
                                          
                                             (
                                             n
                                             )
                                          
                                       
                                       }
                                    
                                    
                                       n
                                       =
                                       1
                                    
                                    
                                       N
                                    
                                 
                              
                           , are given, Bayes’ rule specifies the posterior distribution of Ht
                            as the conditional probability:
                              
                                 (4)
                                 
                                    p
                                    (
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    |
                                    X
                                    ,
                                    Y
                                    )
                                    =
                                    
                                       
                                          p
                                          (
                                          Y
                                          |
                                          X
                                          ,
                                          
                                             
                                                H
                                             
                                             
                                                t
                                             
                                          
                                          )
                                          p
                                          (
                                          
                                             
                                                H
                                             
                                             
                                                t
                                             
                                          
                                          |
                                          X
                                          )
                                       
                                       
                                          p
                                          (
                                          Y
                                          |
                                          X
                                          )
                                       
                                    
                                    ,
                                 
                              
                           where p(Y|X,
                           Ht
                           ) and p(Ht
                           |X) denote the likelihood and the prior, respectively. In Eq. (4), p(Y|X) is a normalizing constant because it is independent of Ht
                           . Thus, the posteriori distribution is proportional to the product of the likelihood and the prior:
                              
                                 (5)
                                 
                                    p
                                    (
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    |
                                    X
                                    ,
                                    Y
                                    )
                                    ∝
                                    p
                                    (
                                    Y
                                    |
                                    X
                                    ,
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    )
                                    p
                                    (
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    |
                                    X
                                    )
                                    .
                                 
                              
                           
                        

The aim of the evolutionary process is to maximize the model fitness Ft
                           , defined as the logarithm of the posterior:
                              
                                 (6)
                                 
                                    
                                       
                                          F
                                       
                                       
                                          t
                                       
                                    
                                    =
                                    log
                                    p
                                    (
                                    Y
                                    |
                                    X
                                    ,
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    )
                                    +
                                    log
                                    p
                                    (
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    |
                                    X
                                    )
                                    ,
                                 
                              
                           
                           
                              
                                 (7)
                                 
                                    
                                       
                                          H
                                       
                                       
                                          ∗
                                       
                                    
                                    =
                                    
                                       
                                          
                                             arg
                                             max
                                          
                                          
                                             
                                                
                                                   H
                                                
                                                
                                                   t
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          F
                                       
                                       
                                          t
                                       
                                    
                                    .
                                 
                              
                           
                        

Finally, the evolution of hypergraph classifiers is regarded as the maximum a posteriori (MAP) process in the Bayesian learning. Fig. 4
                            describes the evolving process of hypergraph classifiers learned by the Bayesian approach.

The model fitness is computed from the prior and the likelihood. The empirical prior distribution p(Ht
                           
                           |
                           X) can be defined by prior knowledge of the problem, which enhances the efficiency of the evolutionary search. In this study, the prior includes two factors. One is mutual information (MI) between each variable and the class label. MI is an information-theoretic measure that specifies the degree of conditional independence between two random variables [34]. Here, it is used as a co-regulatory measuring criterion for efficiently selecting genes for hyperedge generation similar to [31]. The other is the model complexity. The prior is defined to prefer more parsimonious or smaller model. This prior not only ensures that genetic variables relevant to prognostic outcomes are more frequently included in the model, but also retains the model compact. Therefore, the current empirical prior for generating hyperedges is calculated from the MIs and the previous posterior, p(Ht
                           
                           −
                           1|Y,
                           X) reflecting the model complexity |Ht
                           
                           −
                           1|:
                              
                                 (8)
                                 
                                    p
                                    (
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    |
                                    X
                                    )
                                    ∝
                                    p
                                    (
                                    
                                       
                                          H
                                       
                                       
                                          t
                                          -
                                          1
                                       
                                    
                                    |
                                    Y
                                    ,
                                    X
                                    )
                                 
                              
                           
                           
                              
                                 (9)
                                 
                                    p
                                    (
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    |
                                    X
                                    )
                                    ∝
                                    
                                       
                                          1
                                       
                                       
                                          |
                                          
                                             
                                                H
                                             
                                             
                                                t
                                                -
                                                1
                                             
                                          
                                          |
                                       
                                    
                                    
                                       
                                          
                                             ∏
                                          
                                          
                                             e
                                             ∈
                                             
                                                
                                                   E
                                                
                                                
                                                   new
                                                
                                             
                                          
                                       
                                    
                                    P
                                    (
                                    e
                                    )
                                    ≈
                                    
                                       
                                          1
                                       
                                       
                                          |
                                          
                                             
                                                H
                                             
                                             
                                                t
                                                -
                                                1
                                             
                                          
                                          |
                                       
                                    
                                    
                                       
                                          
                                             ∏
                                          
                                          
                                             e
                                             ∈
                                             
                                                
                                                   E
                                                
                                                
                                                   new
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∏
                                          
                                          
                                             
                                                
                                                   x
                                                
                                                
                                                   i
                                                
                                             
                                             ∈
                                             e
                                          
                                       
                                    
                                    
                                       
                                          P
                                       
                                       
                                          I
                                       
                                    
                                    (
                                    
                                       
                                          x
                                       
                                       
                                          i
                                       
                                    
                                    )
                                 
                              
                           s.t.
                              
                                 
                                    
                                       
                                          P
                                       
                                       
                                          I
                                       
                                    
                                    (
                                    
                                       
                                          X
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          I
                                          
                                             
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ;
                                                Y
                                                )
                                             
                                             
                                                η
                                             
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                |
                                                X
                                                |
                                             
                                          
                                          {
                                          I
                                          
                                             
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ;
                                                Y
                                                )
                                             
                                             
                                                η
                                             
                                          
                                          }
                                       
                                    
                                    ,
                                    
                                    |
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    |
                                    =
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             e
                                             ∈
                                             
                                                
                                                   E
                                                
                                                
                                                   t
                                                
                                             
                                          
                                       
                                    
                                    δ
                                    (
                                    e
                                    )
                                    ,
                                    
                                    and
                                    
                                    
                                       
                                          E
                                       
                                       
                                          new
                                       
                                    
                                    =
                                    
                                       
                                          E
                                       
                                       
                                          t
                                       
                                    
                                    -
                                    
                                       
                                          E
                                       
                                       
                                          t
                                          -
                                          1
                                       
                                    
                                    ,
                                 
                              
                           where Et
                            is the hyperedge set of Ht
                           , and P(e) denotes the probability with which a hyperedge e is generated. PI
                           (Xi
                           ) indicates the probability of selecting the ith genetic factor Xi
                           , which depends on the MI between Xi
                            and the class label Y, I(Xi
                           ;
                           Y). The nonnegative constant η regulates the influence of MIs on the gene selection. The prior distribution influences hyperedge construction in every generation. Specifically, a hyperedge is generated as follows:


                           
                              
                                 (1)
                                 Select the data instance from which to subsample a hyperedge.

Probabilistically determine the degree of the hyperedge within a predefined range:


                           
                              
                                 (3)
                                 Probabilistically select the variables based on PI
                                    (Xi
                                    ).

Construct a hyperedge from a set of variable values and the class label of the selected data instance.

Add the generated hyperedges to the population.

Hyperedge generation in our model differs from that of LCS, where each classifier is generated by genetic operations such as crossover and mutation. Our model can efficiently search a high-dimensional space without a heavy computational cost, because it guarantees that a pattern in a hyperedge always exists in the training data.

The likelihood is defined to represent the discriminative capability of the model. To achieve this, we assume that the capability grows by increasing the difference of the weighted sum between the correctly and the incorrectly matched hyperedges for all training data. A hyperedge is said to be correctly matched if it matches a given data instance and the label of the hyperedge is equal to that of the instance. On the other hand, an incorrectly matched hyperedge is matched to an instance with a different class label. Since the instances are independent, the likelihood is estimated as the product of the empirical likelihoods on the given data:
                              
                                 (11)
                                 
                                    p
                                    (
                                    Y
                                    |
                                    X
                                    ,
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          
                                             ∏
                                          
                                          
                                             n
                                             =
                                             1
                                          
                                          
                                             N
                                          
                                       
                                    
                                    p
                                    (
                                    
                                       
                                          y
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                    
                                    |
                                    
                                       
                                          x
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                    
                                    ,
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    )
                                    ,
                                 
                              
                           and the empirical likelihood is defined by:
                              
                                 (12)
                                 
                                    p
                                    (
                                    
                                       
                                          y
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                    
                                    |
                                    
                                       
                                          x
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                    
                                    ,
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    )
                                    ≡
                                    
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                |
                                                
                                                   
                                                      E
                                                   
                                                   
                                                      t
                                                   
                                                
                                                |
                                             
                                          
                                          w
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                i
                                             
                                          
                                          )
                                          {
                                          
                                             
                                                f
                                             
                                             
                                                i
                                             
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                          ·
                                          
                                             
                                                φ
                                             
                                             
                                                i
                                             
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                          -
                                          
                                             
                                                f
                                             
                                             
                                                i
                                             
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                          ·
                                          (
                                          1
                                          -
                                          
                                             
                                                φ
                                             
                                             
                                                i
                                             
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                          )
                                          }
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                |
                                                
                                                   
                                                      E
                                                   
                                                   
                                                      t
                                                   
                                                
                                                |
                                             
                                          
                                          w
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                i
                                             
                                          
                                          )
                                       
                                    
                                    ,
                                 
                              
                           where w(ei
                           ) denotes the weight of the ith hyperedge. Thus, we have
                              
                                 (13)
                                 
                                    p
                                    (
                                    Y
                                    |
                                    X
                                    ,
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          
                                             ∏
                                          
                                          
                                             n
                                             =
                                             1
                                          
                                          
                                             N
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      
                                                         |
                                                         
                                                            
                                                               E
                                                            
                                                            
                                                               t
                                                            
                                                         
                                                         |
                                                      
                                                   
                                                   w
                                                   (
                                                   
                                                      
                                                         e
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                   {
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         (
                                                         n
                                                         )
                                                      
                                                   
                                                   ·
                                                   (
                                                   2
                                                   
                                                      
                                                         φ
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         (
                                                         n
                                                         )
                                                      
                                                   
                                                   -
                                                   1
                                                   )
                                                   }
                                                
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      
                                                         |
                                                         
                                                            
                                                               E
                                                            
                                                            
                                                               t
                                                            
                                                         
                                                         |
                                                      
                                                   
                                                   w
                                                   (
                                                   
                                                      
                                                         e
                                                      
                                                      
                                                         i
                                                         )
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                    s
                                    .
                                    t
                                    .
                                    
                                    
                                       
                                          f
                                       
                                       
                                          i
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                    
                                    =
                                    f
                                    (
                                    
                                       
                                          x
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                    
                                    ,
                                    
                                       
                                          e
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    
                                    and
                                    
                                    
                                       
                                          φ
                                       
                                       
                                          i
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                    
                                    =
                                    φ
                                    (
                                    
                                       
                                          y
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                    
                                    ,
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    )
                                 
                              
                           with the matching and indicator functions respectively defined as follows:
                              
                                 (14)
                                 
                                    
                                       
                                          f
                                       
                                       
                                          i
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                    
                                    =
                                    f
                                    (
                                    
                                       
                                          x
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                    
                                    ,
                                    
                                       
                                          e
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      1
                                                      ,
                                                   
                                                   
                                                      if exp
                                                      
                                                      {
                                                      c
                                                      (
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            (
                                                            n
                                                            )
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            e
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      )
                                                      -
                                                      |
                                                      
                                                         
                                                            e
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      -
                                                      {
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      }
                                                      |
                                                      }
                                                      >
                                                      θ
                                                   
                                                
                                                
                                                   
                                                      0
                                                      ,
                                                   
                                                   
                                                      otherwise
                                                   
                                                
                                             
                                          
                                       
                                    
                                    ,
                                 
                              
                           
                           
                              
                                 (15)
                                 
                                    
                                       
                                          φ
                                       
                                       
                                          i
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                    
                                    =
                                    φ
                                    (
                                    
                                       
                                          y
                                       
                                       
                                          (
                                          n
                                          )
                                       
                                    
                                    ,
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      1
                                                      ,
                                                   
                                                   
                                                      if
                                                      
                                                      
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            (
                                                            n
                                                            )
                                                         
                                                      
                                                      =
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      0
                                                      ,
                                                   
                                                   
                                                      otherwise
                                                   
                                                
                                             
                                          
                                       
                                    
                                    ,
                                 
                              
                           where c(x
                           (
                           
                              n
                           
                           ),
                           ei
                           ) is the matching number, defined as the number of hyperedge variables that equal their corresponding variables in x
                           (
                           
                              n
                           
                           ). The matching threshold θ smoothes and enhances robustness against data noise by allowing partial matching. If an edge is correctly matched, then 
                              
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                    
                                       (
                                       n
                                       )
                                    
                                 
                                 ·
                                 
                                    
                                       φ
                                    
                                    
                                       i
                                    
                                    
                                       (
                                       n
                                       )
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                    
                                       (
                                       n
                                       )
                                    
                                 
                                 ·
                                 (
                                 1
                                 -
                                 
                                    
                                       φ
                                    
                                    
                                       i
                                    
                                    
                                       (
                                       n
                                       )
                                    
                                 
                                 )
                              
                            are equal to one and zero, respectively. Inversely, they become zero and one when an edge is incorrectly matched. The weight of a hyperedge is a function of correctly and incorrectly matched cases:
                              
                                 (16)
                                 
                                    w
                                    (
                                    
                                       
                                          e
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    =
                                    |
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    
                                       
                                          |
                                       
                                       
                                          β
                                       
                                    
                                    
                                       
                                          
                                             α
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      n
                                                      =
                                                      1
                                                   
                                                   
                                                      N
                                                   
                                                
                                             
                                             
                                                
                                                   f
                                                
                                                
                                                   i
                                                
                                                
                                                   (
                                                   n
                                                   )
                                                
                                             
                                             ·
                                             
                                                
                                                   φ
                                                
                                                
                                                   i
                                                
                                                
                                                   (
                                                   n
                                                   )
                                                
                                             
                                             -
                                             (
                                             1
                                             -
                                             α
                                             )
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      n
                                                      =
                                                      1
                                                   
                                                   
                                                      N
                                                   
                                                
                                             
                                             
                                                
                                                   f
                                                
                                                
                                                   i
                                                
                                                
                                                   (
                                                   n
                                                   )
                                                
                                             
                                             ·
                                             (
                                             1
                                             -
                                             
                                                
                                                   φ
                                                
                                                
                                                   i
                                                
                                                
                                                   (
                                                   n
                                                   )
                                                
                                             
                                             )
                                          
                                       
                                    
                                    =
                                    |
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    
                                       
                                          |
                                       
                                       
                                          β
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      n
                                                      =
                                                      1
                                                   
                                                   
                                                      N
                                                   
                                                
                                             
                                             
                                                
                                                   f
                                                
                                                
                                                   i
                                                
                                                
                                                   (
                                                   n
                                                   )
                                                
                                             
                                             ·
                                             
                                                
                                                   φ
                                                
                                                
                                                   i
                                                
                                                
                                                   (
                                                   n
                                                   )
                                                
                                             
                                             -
                                             (
                                             1
                                             -
                                             α
                                             )
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      n
                                                      =
                                                      1
                                                   
                                                   
                                                      N
                                                   
                                                
                                             
                                             
                                                
                                                   f
                                                
                                                
                                                   i
                                                
                                                
                                                   (
                                                   n
                                                   )
                                                
                                             
                                          
                                       
                                    
                                    ,
                                 
                              
                           where α is a constant for preferring more correct or less incorrect predictions. For data whose class labels are imbalanced, a quantity |yi
                           |, denoting the number of data with class label yi
                           , and a negative constant β, are introduced into the weight function. If w(e) is negative, it is reset to zero to prevent the construction of a negatively weighted graph. The model fitness is then reformulated from (6) using the defined prior (9) and the estimated likelihood (13):
                              
                                 (17)
                                 
                                    
                                       
                                          F
                                       
                                       
                                          t
                                       
                                    
                                    =
                                    log
                                    p
                                    (
                                    Y
                                    |
                                    X
                                    ,
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    )
                                    +
                                    log
                                    p
                                    (
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    |
                                    X
                                    )
                                    ≈
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             n
                                             =
                                             1
                                          
                                          
                                             N
                                          
                                       
                                    
                                    log
                                    
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                |
                                                
                                                   
                                                      E
                                                   
                                                   
                                                      t
                                                   
                                                
                                                |
                                             
                                          
                                          {
                                          w
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                i
                                             
                                          
                                          )
                                          
                                             
                                                f
                                             
                                             
                                                i
                                             
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                          (
                                          2
                                          
                                             
                                                φ
                                             
                                             
                                                i
                                             
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                          -
                                          1
                                          )
                                          }
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                |
                                                
                                                   
                                                      E
                                                   
                                                   
                                                      t
                                                   
                                                
                                                |
                                             
                                          
                                          w
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                i
                                             
                                          
                                          )
                                       
                                    
                                    +
                                    λ
                                    |
                                    
                                       
                                          H
                                       
                                       
                                          t
                                       
                                    
                                    |
                                    
                                    +
                                    ζ
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             e
                                             ∈
                                             
                                                
                                                   E
                                                
                                                
                                                   t
                                                
                                             
                                          
                                       
                                    
                                    log
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             
                                                
                                                   x
                                                
                                                
                                                   i
                                                
                                             
                                             ∈
                                             e
                                          
                                       
                                    
                                    
                                       
                                          P
                                       
                                       
                                          I
                                       
                                    
                                    (
                                    
                                       
                                          x
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    ,
                                 
                              
                           where λ and ζ denote a negative constant for regularizing the model size and a positive value for regulating the selection power of the variables in the prior, respectively. To increase the fitness, hyperedges with high weight survive at every generation; in addition, a hyperedge is generated from variables with large PI
                           (x), and the proportion of lower-degree hyperedges is increased.

As the population changes, the hypergraph structure evolves by removing hyperedges with relatively low weight and replacing them with new hyperedges at every generation. To prevent the removal of highly discriminating hyperedges, the number of replaced hyperedges decreases to a specific value as the iterations proceed. The number of replacements at the tth generation is adaptively determined:
                              
                                 (18)
                                 
                                    
                                       
                                          R
                                       
                                       
                                          t
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                R
                                             
                                             
                                                max
                                             
                                          
                                          -
                                          
                                             
                                                R
                                             
                                             
                                                min
                                             
                                          
                                       
                                       
                                          exp
                                          (
                                          t
                                          /
                                          κ
                                          )
                                       
                                    
                                    +
                                    
                                       
                                          R
                                       
                                       
                                          min
                                       
                                    
                                    ,
                                 
                              
                           where t is the iteration number of the learning process, and R
                           max and R
                           min denote the maximum and minimum boundary values of Rt
                           , respectively. κ is a constant that moderates the speed at which the system proceeds from R
                           max to R
                           min.

The parameter settings are listed in Table 1
                        . The parameters are determined as the values yielding optimal performance after empirical experiments. Although a hypergraph classifier has many parameters, most of them can be used as default values independent on problems. Main parameters determined according to problems are initial population size and individual length. Too small initial population causes the discriminative capability of the model to decrease due to the lack of the information for classification. Too large population size leads too heavy computational cost. Therefore, the appropriate range of initial population size is from five to one hundred. Individual length influences the discriminative ability and the probability matching data of a hyperedge. The minimum value of the length is usually set to three and the maximum value does not usually exceed ten. The proper ranges of the parameter values are presented in Table 1.

@&#EXPERIMENTAL RESULTS@&#

The proposed model is evaluated on MicroArray Quality Control (MAQC)-II gene expression data [27] of human breast cancer and multiple myeloma. The breast cancer dataset consisting of 12,993 genes is used to predict pathological complete response (pCR) to preoperative chemotherapy. It was originally divided into two sets: a 130-sample training set consisting of 33 positives and 97 negatives, and a 100-sample test set consisting of 15 positives and 85 negatives. The multiple myeloma dataset consisting of 20,638 genes is used to predict the overall survival (OS) 730days post-treatment. The original 340-sample training set consisted of 51 positives and 289 negatives, while the 214-sample test set comprised 27 positives and 187 negatives. During preprocessing, sample-wise and feature-wise normalization was conducted, and the variable data values were converted into three-level discretized values {−1,0,1} based on z-scores.

Classification performance was evaluated using six standard classification models: Naïve Bayes classifier, decision tree (J48), random forest (the number of trees=10), AdaBoost with J48, and support vector machine (SVM) with sequential minimal optimization (SMO) and the second polynomial kernel implemented in Weka [35]. A variant of learning classifier system (LCS), sUpervised Classifier System (UCS), were also used [36]. We used default values of Weka as the parameters not explained of the other models. In LCS, the pop-size and the iteration number are 1000 and 500, respectively. Because of the large number of variables, probability of the wild card is set to 0.9997. The classification performance of each model was evaluated using the original validation datasets from the MAQC-II project. The results of the evolutionary learning-based models (our model and LCS) were averaged over 10 runs on each test dataset. Prediction performance was based on four measures; sensitivity, specificity, accuracy, and Matthews correlation coefficient (MCC) [37,38], defined below:
                           
                              
                                 Sensitivity
                                 =
                                 
                                    
                                       TP
                                    
                                    
                                       TP
                                       +
                                       FN
                                    
                                 
                                 ,
                                 
                                 Specificity
                                 =
                                 
                                    
                                       TN
                                    
                                    
                                       FP
                                       +
                                       TN
                                    
                                 
                                 ,
                                 
                                 Accuracy
                                 =
                                 
                                    
                                       TP
                                       +
                                       TN
                                    
                                    
                                       TP
                                       +
                                       FN
                                       +
                                       FP
                                       +
                                       TN
                                    
                                 
                                 ,
                              
                           
                        
                        
                           
                              
                                 MCC
                                 =
                                 
                                    
                                       (
                                       TP
                                       ·
                                       TN
                                       -
                                       FP
                                       ·
                                       FN
                                       )
                                    
                                    
                                       
                                          
                                             (
                                             TP
                                             +
                                             FN
                                             )
                                             (
                                             TP
                                             +
                                             FP
                                             )
                                             (
                                             TN
                                             +
                                             FP
                                             )
                                             (
                                             TN
                                             +
                                             FN
                                             )
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        where TP, TN, FP, and FN denote true positive, true negative, false positive, and false negative, respectively. In particular, MCC is informative when the ratio of two classes in a dataset is highly skewed. Consequently, MCC has become a popular reference performance measure in bioinformatics, biomedical informatics, and other fields involving imbalanced datasets. MCC values range from +1 to −1, where +1 indicates a perfect prediction, 0 is essentially random prediction, and −1 is the asymptote of extreme misclassification.


                        Table 2
                         presents the performance of the proposed model compared with other models. As revealed by the adjusted p-values, the accuracy of hypergraph classifiers is similar to those of SVM and LCS, and superior to those of naïve Bayes classifier, decision tree, random forest, and AdaBoost on both datasets. The adjusted p-values are calculated based on Wilcoxon signed-ranks test and multiple comparison correction with Bonferroni correction [39]. Compared to existing models, the MCC obtained by our hypergraph model is especially improved on the multiple myeloma dataset with a significant adjusted p-value. Although LCS and SVM demonstrate strong prediction accuracy, another measure is necessary for more precise evaluation in these problems, because the accuracy is distorted by severe imbalance of the classes in the datasets. Therefore, the proposed hypergraph classifiers more precisely predict clinical outcomes than existing models in terms of MCC and sensitivity. In addition, comparing the results of HC and 2-HC (a hypergraph classifier with degree-2 hyperedges), we observe that higher-order relationships are more important for accurately predicting cancer prognosis than pair-wise relationships. Moreover, we note that the model performance of HCs using MI as prior is improved by efficient searching of the huge combinatorial space.


                        Fig. 5
                         plots the receiver operating characteristic (ROC) curves of the proposed hypergraph classifier and other classification models on the test datasets of breast cancer and multiple myeloma, respectively, with adjusted p-values by Bonferroni correction. The areas under the ROC curves (AUCs) are calculated as a measure of predictive discrimination in the given test dataset in terms of specificity and sensitivity. An index of 0.5 presents no discrimination ability, whereas a value of 1 indicates perfect discrimination. Our model showed better classification performance than other models considering AUCs on the multiple myeloma dataset with a significant adjusted p-value in Fig. 5. This result is consistent with that presented in Table 2. Interestingly, NB shows relatively high AUC compared to other measures in multiple myeloma and this is caused by the property that an AUC is large when the difference between sensitivity and specificity is small. From these results, we indicate that the hypergraph classifier is suitable model for classifying imbalanced data with high dimensionality compared to other models.

We now present the changes of the proposed model as the Bayesian evolution proceeds. Fig. 6
                         shows the dynamics of the MCCs and fitness values evaluated on the breast cancer and multiple myeloma datasets, respectively. Although the MCCs fluctuate, they increase overall as the learning proceeds. The fitness values increase toward their specified maximum. Thus, the defined fitness function reasonably indicates the discriminative capability of the model. In addition, the proposed model evolves into a predictive model that is competitive in terms of both accuracy and MCC despite the skewed class ratio of the data.

Next, we explored the evolution of the hypergraph classifier structure, by analyzing the composition of the hyperedges. The dynamics of hyperedge degree distribution are plotted in Fig. 7
                        . For both datasets, the proportion of lower-degree hyperedges (δ(e)=3 and 4) increases as the number of generations increases, while the proportion of higher-order degree hyperedges (δ(e)>5) decreases. Lower-degree hyperedges are assigned a higher weight to reflect their higher probability of matching more training data. In Fig. 7(b), especially, 3-hyperedges steadily increase following a decrease in early generations. This initial decrease occurs because, although 3-hyperedges are more likely to match training data, they are also prone to incorrect matching. However, highly discriminative 3-hyperedges survive under the evolutionary learning and thus their proportion increases. Furthermore, higher-degree hyperedges with δ(e)>5 are useful for class discrimination because their proportion never converges to zero. Higher-order hyperedges may be especially important for classifying data involving complex relationships between factors. According to Fig. 7, the proportion of 5-hyperedges (δ(e)=5) increases during the early stages of the evolution, and subsequently decreases. This pattern typifies evolutionary phenomena in nature, suggesting that 5-hyperedges play the role of intermediates in the evolutionary process. These changes of the distribution of hyperedge degrees are supported by statistical analysis because all the p-values on the distribution changes during the model evolution are less than 0.0001.


                        Fig. 8
                         shows how the learning performance of the model depends on MI used as the prior. The effect of the prior on evolving hypergraph classifiers can be investigated by varying the parameter η. From (9), when η
                        =0, the model reduces to naive random search-based evolution. We observe that MI improves the efficiency of the learning and increases the performance of the model throughout the evolution.

Here, we analyze the structure of the hypergraph classifiers at the hyperedge level as the model is evolved. Table 3
                         lists the genes with large d(v) and the degree of vertices included in hypergraph classifiers learned from each dataset, together with their MI-rank. Genes with large d(v) can be regarded as genes that significantly affect prediction. The threshold of d(v) is defined as the d(v) for which p
                        <0.05, determined by averaging d(v) over all genes. As shown in Table 3, many genes with low MI rank out of top 200 appear in the list of large d(v). Those genes with large d(v) but low MI-rank may exert a strong influence on prognostic prediction under the appropriate conditions of other related genes. Moreover, the informative genes repeatedly appear in most of the independently-learned models, indicating that the proposed evolutionary learning method can robustly identify significant hyperedges as prognostic gene modules without the dominant effects of the used prior knowledge. At the same time, the efficiency is enhanced by introducing mutual information to the evolutionary learning of the hypergraph classifiers, without reducing the search space.

Several genes, such as MKI67, CCND1, TTK, PTTG1, CENPA, COX2, and BCL2 have been associated with cancer prognosis in the literature. For example, MKI67 and CCND1 are well-known prognostic markers. They can effectively predict the treatment efficacy of chemotherapy by measuring expression levels of MKI67 and CCND1 [40]. TTK and PTTG1 were found to be associated with increased breast cancer risk [41]. CENPA has also been reported as a significant independent prognostic marker in patients with ER-positive breast cancer [42]. In addition, increased COX2 expression is known as an independent adverse prognostic factor in multiple myeloma [43]. BCL2 is also reported to be associated with the response to interferon therapy in multiple myeloma patients [44]. Thus, high-degree genes identified by evolutionary learning can be prognostic markers for predicting cancer clinical outcomes, since they form hubs in the learned hypergraph structure. Table 4
                         presents an example of hyperedges as potential gene modules influencing on prognosis prediction. In particular we observe that a module involving TTK and PTTG1 appears concurrently from the learned model in the breast cancer. Interestingly, this finding is consistent with a previous study, in which TTK and PTTG1 act jointly as reproductive risk factors reflecting susceptibility to estrogen exposure for determining breast cancer risk [41].

Moreover, the proposed model can be visualized by converting a hyperedge to a clique and then genes can be clustered using hypergraph spectral clustering method [28], a generalized spectral clustering method [45] for hypergraph structures. We also calculated the hypergraph Laplacian L from the learned model, a matrix representing the data variables whose column vectors are eigenvectors of L 
                        [28]. For clustering, we selected 76 eigenvectors corresponding to eigenvalues below 0.4 from L. The clusters extracted from the learned hypergraphs involve important prognostic marker genes, such as MKI67 and CENPA, and they are closely related to breast cancer. Table 5
                         presents two extracted clusters with Gene Ontology (GO) analysis [46]. The results indicate that genes comprising each cluster have the similar function related to cellular processes. Herein, interpreting the results in this way, we can analyze complex biological phenomena. Thus, the proposed model presents as an alternative method for solving a variety of biomedical problems.

@&#DISCUSSION@&#

The proposed hypergraph classifier predicts cancer clinical outcomes through evolutionary learning from genomic data. Human cancer clinical outcomes are typically induced by the interactions of multiple genomic components. Although the analysis of multiple gene interactions should be important to predict cancer prognosis and to understand complex cancer phenomena, however, it is computationally infeasible to explore all the combinatorial interactions in a higher-order level.

Herein we proposed a population-based model that uses an evolutionary learning method to predict cancer prognosis. The results of the proposed learning method formulated to a sequential Bayesian sampling showed that our model efficiently searches to a huge problem space and provides competitive performance with other state-of-the-art classification models. As shown in the result of classification performance including accuracy, MCC, and AUC, the performance of the proposed model was competitive or superior to those of existing models. In particular, the MCC score of our model was higher than that of SVMs for multiple myeloma data as 0.34 with a significant adjusted p-value, while the MCC of LCSs was zero for both breast cancer and myeloma datasets. This result indicates that the proposed hypergraph classifiers are robust to imbalanced data, thus more precisely predicting clinical outcomes in cancer patients than the existing models. We also compared the performance of the proposed model against two variants of hypergraph classifiers (2-HCs and HCs without using MI as prior). We observe that higher-order relationships are more important for accurately predicting cancer prognosis than pair-wise relationships. Moreover, when hyperedges were generated based on mutual information, the MCC was improved for both datasets, indicating that the proposed method allowed the model to efficiently search a huge combinatorial feature space by introducing problem-specific knowledge to the prior in the evolutionary learning process. Moreover, the change of the distribution of the hyperedge degrees in Fig. 7 notes that the proposed learning method finds the best composition and the number of hyperedges that increases the model performance while keeping the model complexity. Furthermore, we observe that higher-order information is useful for enhancing the prediction accuracy in cancer prognosis. Furthermore, our method can find significant genes and gene modules for predicting cancer clinical outcomes.

Diagnosing models have been constantly proposed to predict cancer recurrence. The recent proposed hybrid model for predicting breast cancer prognosis [47] is similar to our model in view of using evolutionary computation technique for learning model. This model is a hybrid neural network classifier combining with genetic algorithms as optimization technique in learning the weights of neural networks for breast cancer prognosis prediction using breast cancer imaging data from UCI machine learning repository. In contrast to Belciug and Gorunescu’ study, we used gene expression profiles consisting of tens of thousands genomic factors for predicting cancer prognosis.

However, the proposed model has some limitations despite many advantages including classification performance, readability, and the discovery of important features. One is the model has relatively heavy time complexity which is O(MN), where M and N denote the number of hyperedges and data instances, respectively. Although our method conducts simple operation without any complex numerical function in the learning, it spends much time for learning from data with large number of instances. This issue can be solved by using parallel processing techniques such as GPGPU. The other is that our learning method is batch-style and thus is not suitable for learning from increasing data. We will improve the method to allow the model to incrementally learn.

@&#CONCLUSIONS@&#

We proposed hypergraph classifiers based on evolutionary learning to predict cancer prognoses from complex genetic interactions, using two archived datasets. The learning method evolves a population-based representation of hypergraphs based on a sequential Bayesian sampling. The Bayesian evolutionary hypergraph model accommodates formal management of model complexity by defining priors on a huge combinatorial search space comprising tens of thousands of genes. Specifically, we controlled the evolutionary search process using two types of prior distributions. One is defined in terms of the mutual information between each genetic variable and the class label and it guides the compositional variation of the variables in a hyperedge. The other is related to the model size, modulating the degree of a hyperedge and the number of hyperedges in the model.

Cancer prognosis is typically influenced by the combinatorial regulation of multiple genetic factors. By analyzing gene relationships at higher-order levels, we can better predict clinical outcomes in cancer patients. We have demonstrated that higher-order interactions discriminate prognosis more precisely than pair-wise analysis of single gene relationships. From this viewpoint, we predicted that potential prognostic gene modules could be identified from higher-order gene interactions.

The performance of the proposed method was validated on MAQC-II data. The classification performance of the hypergraph classifiers was superior to those of other models including SVM, naïve Bayes classifier, decision tree, random forest, AdaBoost and LCS, especially in terms of MCC and AUC. Furthermore, the interpretable structures of hypergraph classifiers proved useful for analyzing complex biological phenomena. That is, the proposed model presents as an alternative method for solving a variety of biomedical problems. Such contributions will greatly assist toward developing a personalized and refined therapy.

@&#ACKNOWLEDGMENTS@&#

This work was supported by the National Research Foundation (NRF) Grant funded by the Korea government (MSIP) (NRF-2010-0017734 and 2012M3A9D1054622), supported by KEIT Grants (10044009-HKI and 10035348-mLife), and supported by AOARD R&D grant funded by AFOSR (124087).

@&#REFERENCES@&#

