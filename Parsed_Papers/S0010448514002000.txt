@&#MAIN-TITLE@&#Efficient offset trimming for deformable planar curves using a dynamic hierarchy of bounding circular arcs

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Offset trimming for planar freeform curves under deformation.


                        
                        
                           
                           Dynamic BVH generation using a hierarchy of recursive bisections.


                        
                        
                           
                           BV generation using the bounding circular arcs (BCA) of Meek and Walton (1995).


                        
                        
                           
                           Performance improvement over the biarc-based algorithm of Kim et al. (2012).


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Planar freeform curve

Offset curve trimming

Monotone spiral curve

Bounding circular arcs

Dynamic BVH

Self-intersection

@&#ABSTRACT@&#


               
               
                  We present an efficient algorithm for computing a family of trimmed offsets for planar freeform curves under deformation. The algorithm is based on a dynamic bounding volume hierarchy (BVH) for the untrimmed offsets of a given planar curve, which can be generated efficiently using a hierarchy of recursive bisections of the given curve. The proposed algorithm is effective for deformable planar curves. At each time frame, we segment the input curve into monotone spiral pieces (Barton and Elber, 2011), which is the only pre-processing needed for the dynamic BVH construction. To speed up the on-line generation of dynamic BVH, we employ the bounding circular arcs (BCA) of Meek and Walton (1995) that can be computed very efficiently using the position and tangent information at the endpoints of each monotone spiral curve segment. Using several experimental results, we demonstrate the performance improvement of our algorithm over the previous biarc-based algorithm of Kim et al. (2012).
               
            

@&#INTRODUCTION@&#

The generation of offset curves and surfaces has been one of the most active research areas in CAD/CAM  [1,2]. There are many previous algorithms developed for trimming offset curves and surfaces  [3–11]. Nevertheless, the offset trimming is a highly unstable geometric problem, in particular, when the given curves and surfaces are under deformation. The current work proposes an efficient and robust solution to this non-trivial problem.

Given a deformable planar freeform curve 
                        C
                        
                           (
                           t
                           )
                        
                     , we consider the problem of computing a family of trimmed offset curves 
                        
                           
                              O
                           
                           
                              r
                           
                        
                      with respect to different offset radii 
                        r
                     . For this purpose, we present an efficient algorithm for computing all self-intersection points of the untrimmed offset curve defined as follows: 
                        
                           
                              
                                 
                                    O
                                 
                                 
                                    r
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                              =
                              C
                              
                                 (
                                 t
                                 )
                              
                              +
                              r
                              ⋅
                              N
                              
                                 (
                                 t
                                 )
                              
                              ,
                           
                        
                      where 
                        N
                        
                           (
                           t
                           )
                        
                      is the unit normal of 
                        C
                        
                           (
                           t
                           )
                        
                     .

Topological analysis (combined with efficient point projections to the curve 
                        C
                        
                           (
                           t
                           )
                        
                     ) around self-intersection points produces a robust algorithm for trimming all redundant components of the offset curve, i.e., the segments closer to the curve 
                        C
                        
                           (
                           t
                           )
                        
                      than the offset radius 
                        r
                     . Fig. 1
                      shows a self-intersecting planar curve (in black) and its two-sided offset curve (in red). All self-intersections of the untrimmed offset curve 
                        
                           
                              O
                           
                           
                              r
                           
                        
                        
                           (
                           t
                           )
                        
                      are marked as dots. Removing redundant branches (in blue) of the offset curve 
                        
                           
                              O
                           
                           
                              r
                           
                        
                        
                           (
                           t
                           )
                        
                     , we can complete the offset trimming procedure. The main computational bottleneck for the offset trimming is the efficient and robust detection of self-intersection locations in the untrimmed offset curve 
                        
                           
                              O
                           
                           
                              r
                           
                        
                        
                           (
                           t
                           )
                        
                     .

In a recent work, Kim et al.  [12] employed a 
                        
                           
                              G
                           
                           
                              1
                           
                        
                     -biarc approximation of planar freeform curves  [13] and essentially reduced the offset trimming problem to that of computing all intersections among offset arcs. Because of the high approximation order of arc-splines to planar curves, the biarc-based approach of Kim et al.  [12] is considerably more efficient and robust than previous algorithms [7,10]. For deformable planar curves, however, the biarc approach requires a repetitive computation of the 
                        
                           
                              G
                           
                           
                              1
                           
                        
                     -biarc approximation for each time frame of the curve deformation. The most time-consuming part in the biarc approximation is in the estimation of a tight upper bound for the maximum error of the curve approximation.

In this paper, we make the error bounding straightforward for a monotone spiral curve using the bounding circular arcs (BCA) of Meek and Walton  [14]. (A spiral curve is an inflection-free curvature monotone curve  [15].) Each arc of BCA interpolates two end points and one end tangent. The center is located at the intersection between the curve normal line at one end and the bisector line of the two endpoints. The bounding arcs share the bisector line as their common axis of symmetry as shown in Fig. 2
                     (a). The BCA bounding volume has cubic convergence  [14], as illustrated in Fig. 2(b) for the spiral curve 
                        C
                        
                           (
                           t
                           )
                        
                        =
                        
                           (
                           t
                           ,
                           
                              
                                 t
                              
                              
                                 2
                              
                           
                           )
                        
                        ,
                        
                        0
                        ≤
                        t
                        ≤
                        1
                     , subdivided at 
                        C
                        
                           (
                           
                              
                                 1
                              
                              
                                 2
                              
                           
                           )
                        
                     . For efficient overlap tests, we may employ simpler bounding volumes such as oriented bounding box (OBB)  [16] and line swept circle (LSC)  [17] using the outer bounding circle of BCA (Figs. 2(c) and (d)).

As an illustration of our approach, Fig. 3
                     (a) shows a periodic cubic 
                        B
                     -spline curve 
                        C
                        
                           (
                           t
                           )
                        
                      which consists of 12 cubic Bézier segments 
                        
                           
                              C
                           
                           
                              i
                           
                        
                        
                           (
                           t
                           )
                        
                        ,
                        
                        0
                        ≤
                        t
                        ≤
                        1
                     . Also shown in the figure is a two-sided untrimmed offset curve 
                        
                           
                              O
                           
                           
                              r
                           
                        
                        
                           (
                           t
                           )
                        
                      (excluding “fishtails”). Each Bézier curve is first segmented into 
                        x
                      and 
                        y
                     -monotone spiral curves by subdividing at 
                        x
                      and 
                        y
                     -extreme points, inflection points, and curvature extreme points  [15]. The corresponding offset segments are then bounded by axis-aligned bounding boxes (AABBs), bounding circular arcs (BCAs), line swept circles (LSCs) (Figs. 3(b)–(d)). The BCAs after one step refinement are visually almost indistinguishable from the offset curve (Fig. 3(e)). The corresponding LSCs are shown in Fig. 3(f). The size of LSC changes depending on the segmentation result of 
                        C
                        
                           (
                           t
                           )
                        
                      and 
                        
                           
                              O
                           
                           
                              r
                           
                        
                        
                           (
                           t
                           )
                        
                      into small pieces. Each self-intersection of 
                        
                           
                              O
                           
                           
                              r
                           
                        
                        
                           (
                           t
                           )
                        
                      should be contained in the overlap of (non-adjacent) BCAs (or LSCs). By refining the overlapping regions and repeating the same overlap test, we can compute a more accurate location of the self-intersection point contained in the overlap region. Redundant offset curve segments are eliminated when the distance to the curve 
                        C
                        
                           (
                           t
                           )
                        
                      is smaller than the offset radius 
                        r
                     , an efficient detection of which can be implemented using the BCA tree of the curve 
                        C
                        
                           (
                           t
                           )
                        
                     . Fig. 3(g) shows the BCA regions for 
                        C
                        
                           (
                           t
                           )
                        
                      at the highest level of the hierarchy. The final result of offset trimming is presented in Fig. 3(h).

The rest of this paper is organized as follows. In Section  2, we briefly review related previous work. Section  3 presents the dynamic BVH for planar curves and their offsets. In Section  4, we discuss the details of our offset trimming algorithm. Some experimental results are presented in Section  5, and finally, Section  6 concludes the paper.

@&#RELATED WORK@&#

Early methods for the generation and approximation of offset curves and surfaces are well-documented in two survey articles [1,2]. Seong et al.  [10] presented an extensive literature survey of conventional methods for trimming self-intersections in both offset curves and surfaces.

Elber and Cohen  [4] detected local self-intersections in the planar offset curve by comparing the tangent directions of 
                        C
                        
                           (
                           t
                           )
                        
                      and 
                        
                           
                              O
                           
                           
                              r
                           
                        
                        
                           (
                           t
                           )
                        
                     . Lee et al.  [7] computed offset self-intersections using a plane sweep to a polygonal approximation of the offset curve. Maekawa and Patrikalakis  [8] convert the offset self-intersection equation to a system of four polynomial equations in four variables, the solution of which is time-consuming.

Elber  [5] and Seong et al.  [10] introduced a stable method for the planar offset curve trimming problem using the squared distance from an offset curve to the given curve 
                        C
                        
                           (
                           t
                           )
                        
                     . Though Seong et al.  [10] also extended this approach to freeform surfaces and the trimming of their offsets, the distance computation is quite expensive even for planar curves when using no pre-built data structures  [18,19].

Using pre-built 
                        
                           
                              G
                           
                           
                              1
                           
                        
                      biarc-splines that tightly fit the curve 
                        C
                        
                           (
                           t
                           )
                        
                     , Kim et al.  [12] greatly improved the efficiency and robustness of the previous offset curve trimming techniques  [5,7,10]. Nevertheless, the biarc approach is inefficient for deformable planar curves. The current work proposes a new approach for the deformable case using the bounding circular arcs (BCA) of Meek and Walton  [14].

The biarc method of Kim et al.  [12] bounds each curve segment using a fat biarc  [20], which has an important advantage in the offset computation—each offset curve can be bounded by another fat biarc simply by adding the offset radius to the original fat biarc, thus preserving the thickness of fat biarc. For deformable curves, however, it is relatively expensive to determine the thickness of fat arc—the computation involves estimating an upper bound for the squared distance from a point (circle center) to the curve segment (see Fig. 4
                     (a)). The concept of BCA was originally introduced by Meek and Walton  [14] for the purpose of proving the cubic convergence of biarc approximation to planar freeform curves. In this work, we employ the simple BCA construction as an efficient bounding for monotone spiral curves and their offsets.

To the best of our knowledge, the BCA region has never been used for the generation of bounding volume hierarchy (BVH). Barton and Elber  [15] suggested the spiral fat arc (consisting of two osculating circular arcs and two line segments as shown in Fig. 4(b)) as a tighter bounding region for monotone spiral planar curves. For deformable planar curves and their offsets, however, the BCA construction is more efficient than the spiral fat arc. The deficiency in tightness can easily be overcome by subdividing the curve as shown in Fig. 2(b). The BCA arcs share the two endpoints, which greatly simplifies the design of geometric tests and improves the overall performance of our algorithm.

The 
                        
                           
                              G
                           
                           
                              1
                           
                        
                      biarc approximation has also been proven to be an effective tool for constructing the medial axis and the Voronoi diagram of planar freeform shapes  [21,22]. The offset trimming is a direct consequence of the Voronoi diagram construction [23–26]. There is no doubt that the Voronoi diagram is more difficult to compute than the trimmed offset curves. Nevertheless, the current work takes an important step towards narrowing the computational gap between the two important geometric problems, as illustrated in Fig. 7 for the experimental result of constructing approximate Voronoi cells of planar freeform curves.

At each time-frame of the curve deformation, we subdivide the planar freeform curves into Bézier curve segments 
                        C
                        
                           (
                           t
                           )
                        
                        ,
                        
                        0
                        ≤
                        t
                        ≤
                        1
                     , which are 
                        x
                     - and 
                        y
                     -monotone spiral curves. Each Bézier curve 
                        C
                        
                           (
                           t
                           )
                        
                      is then completely contained in an axis-aligned bounding box (AABB) that is determined by the two end points 
                        C
                        
                           (
                           0
                           )
                        
                      and 
                        C
                        
                           (
                           1
                           )
                        
                     . The given planar curves are then organized hierarchically in an AABB tree which is constructed in a bottom-up fashion starting with AABBs, each bounding a spiral Bézier curve 
                        C
                        
                           (
                           t
                           )
                        
                     . Each leaf node of the AABB tree contains a single curve 
                        C
                        
                           (
                           t
                           )
                        
                      which is then represented in a separate dynamic BVH, the construction of which is discussed below.

A monotone spiral Bézier curve 
                           C
                           
                              (
                              t
                              )
                           
                           =
                           
                              
                                 ∑
                              
                              
                                 l
                                 =
                                 0
                              
                              
                                 d
                              
                           
                           
                              
                                 
                                    b
                                 
                              
                              
                                 l
                              
                           
                           
                              
                                 B
                              
                              
                                 l
                              
                              
                                 d
                              
                           
                           
                              (
                              t
                              )
                           
                         of degree 
                           d
                        , 
                           0
                           ≤
                           t
                           ≤
                           1
                        , can be bounded by a hierarchy of bounding circular arcs (BCA)  [14] which are determined by the position and derivative information of the curve 
                           C
                           
                              (
                              t
                              )
                           
                         at the uniform sample parameters: 
                           
                              
                                 t
                              
                              
                                 i
                              
                              
                                 h
                              
                           
                           =
                           i
                           /
                           
                              
                                 2
                              
                              
                                 h
                              
                           
                        , for 
                           i
                           =
                           0
                           ,
                           …
                           ,
                           
                              
                                 2
                              
                              
                                 h
                              
                           
                        , at the hierarchy level 
                           h
                        . At the root level of the BVH (with 
                           h
                           =
                           0
                        ), the whole curve 
                           C
                           
                              (
                              t
                              )
                           
                           ,
                           
                           0
                           ≤
                           t
                           ≤
                           1
                        , is bounded by two circular arcs determined by 
                           C
                           
                              (
                              0
                              )
                           
                           ,
                           C
                           
                              (
                              1
                              )
                           
                           ,
                           
                              
                                 C
                              
                              
                                 ′
                              
                           
                           
                              (
                              0
                              )
                           
                        , and 
                           
                              
                                 C
                              
                              
                                 ′
                              
                           
                           
                              (
                              1
                              )
                           
                        . At the next level (
                           h
                           =
                           1
                        ), the left half 
                           
                              
                                 C
                              
                              
                                 1
                              
                              
                                 1
                              
                           
                           
                              (
                              t
                              )
                           
                           =
                           C
                           
                              (
                              t
                              )
                           
                           ,
                           
                           0
                           ≤
                           t
                           ≤
                           
                              
                                 1
                              
                              
                                 2
                              
                           
                        , is bounded by two circular arcs determined by 
                           C
                           
                              (
                              0
                              )
                           
                           ,
                           C
                           
                              (
                              
                                 
                                    1
                                 
                                 
                                    2
                                 
                              
                              )
                           
                           ,
                           
                              
                                 C
                              
                              
                                 ′
                              
                           
                           
                              (
                              0
                              )
                           
                        , and 
                           
                              
                                 C
                              
                              
                                 ′
                              
                           
                           
                              (
                              
                                 
                                    1
                                 
                                 
                                    2
                                 
                              
                              )
                           
                        . Similarly, the right half 
                           
                              
                                 C
                              
                              
                                 2
                              
                              
                                 1
                              
                           
                           
                              (
                              t
                              )
                           
                           =
                           C
                           
                              (
                              t
                              )
                           
                           ,
                           
                              
                                 1
                              
                              
                                 2
                              
                           
                           ≤
                           t
                           ≤
                           1
                        , is bounded by two arcs determined by 
                           C
                           
                              (
                              
                                 
                                    1
                                 
                                 
                                    2
                                 
                              
                              )
                           
                           ,
                           C
                           
                              (
                              1
                              )
                           
                           ,
                           
                              
                                 C
                              
                              
                                 ′
                              
                           
                           
                              (
                              
                                 
                                    1
                                 
                                 
                                    2
                                 
                              
                              )
                           
                        , and 
                           
                              
                                 C
                              
                              
                                 ′
                              
                           
                           
                              (
                              1
                              )
                           
                        .

Given a maximum subdivision level 
                           H
                         for 
                           C
                           
                              (
                              t
                              )
                           
                        , we can precompute the values of the Bézier basis functions 
                           
                              
                                 B
                              
                              
                                 l
                              
                              
                                 d
                              
                           
                           
                              (
                              j
                              /
                              
                                 
                                    2
                                 
                                 
                                    H
                                 
                              
                              )
                           
                        , for 
                           l
                           =
                           0
                           ,
                           …
                           ,
                           d
                        , and 
                           j
                           =
                           0
                           ,
                           …
                           ,
                           
                              
                                 2
                              
                              
                                 H
                              
                           
                        , and store these precomputed values in a look-up table. This precomputation greatly accelerates the Bézier curve evaluation as the computation of the basis function values is the most expensive part of the curve evaluation. Moreover, the stored basis function values can be reused for other Bézier curves of the same degree and more importantly for dynamically deforming Bézier curves as well. As the derivative curve 
                           
                              
                                 C
                              
                              
                                 ′
                              
                           
                           
                              (
                              t
                              )
                           
                         is a Bézier curve of degree 
                           d
                           −
                           1
                        , we can apply the same precomputation technique for an efficient evaluation of 
                           
                              
                                 C
                              
                              
                                 ′
                              
                           
                           
                              (
                              
                                 
                                    t
                                 
                                 
                                    j
                                 
                              
                              /
                              
                                 
                                    2
                                 
                                 
                                    H
                                 
                              
                              )
                           
                         at the uniform sample parameters.

Going down from an internal node at a level 
                           h
                         to its child nodes at the next level 
                           h
                           +
                           1
                        , we only need to evaluate the curve location and derivative at the mid-parameter 
                           
                              
                                 C
                              
                              
                                 j
                              
                              
                                 h
                              
                           
                           
                              (
                              
                                 
                                    
                                       
                                          t
                                       
                                       
                                          j
                                          −
                                          1
                                       
                                       
                                          h
                                       
                                    
                                    +
                                    
                                       
                                          t
                                       
                                       
                                          j
                                       
                                       
                                          h
                                       
                                    
                                 
                                 
                                    2
                                 
                              
                              )
                           
                           =
                           
                              
                                 C
                              
                              
                                 2
                                 j
                              
                              
                                 h
                                 +
                                 1
                              
                           
                           
                              (
                              
                                 
                                    t
                                 
                                 
                                    2
                                    j
                                    −
                                    1
                                 
                                 
                                    h
                                    +
                                    1
                                 
                              
                              )
                           
                         and 
                           
                              
                                 d
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                    
                                       h
                                    
                                 
                              
                              
                                 d
                                 t
                              
                           
                           
                              (
                              
                                 
                                    
                                       
                                          t
                                       
                                       
                                          j
                                          −
                                          1
                                       
                                       
                                          h
                                       
                                    
                                    +
                                    
                                       
                                          t
                                       
                                       
                                          j
                                       
                                       
                                          h
                                       
                                    
                                 
                                 
                                    2
                                 
                              
                              )
                           
                           =
                           
                              
                                 d
                                 
                                    
                                       C
                                    
                                    
                                       2
                                       j
                                    
                                    
                                       h
                                       +
                                       1
                                    
                                 
                              
                              
                                 d
                                 t
                              
                           
                           
                              (
                              
                                 
                                    t
                                 
                                 
                                    2
                                    j
                                    −
                                    1
                                 
                                 
                                    h
                                    +
                                    1
                                 
                              
                              )
                           
                        , where 
                           
                              
                                 t
                              
                              
                                 j
                              
                              
                                 h
                              
                           
                           =
                           j
                           /
                           
                              
                                 2
                              
                              
                                 h
                              
                           
                        . The bounding regions for the left and right children are then generated to fit the left and right sub-curve segments more tightly using these additional geometric data at the mid-parameter 
                           
                              
                                 t
                              
                              
                                 2
                                 j
                                 −
                                 1
                              
                              
                                 h
                                 +
                                 1
                              
                           
                        .

Given a two-level hybrid BVH for the deformable planar Bézier curves 
                           C
                           
                              (
                              t
                              )
                           
                           =
                           
                              
                                 ∑
                              
                              
                                 l
                                 =
                                 0
                              
                              
                                 d
                              
                           
                           
                              
                                 
                                    b
                                 
                              
                              
                                 l
                              
                           
                           
                              
                                 B
                              
                              
                                 l
                              
                              
                                 d
                              
                           
                           
                              (
                              t
                              )
                           
                         of degree 
                           d
                        , we consider the construction of a dynamic BVH for the planar offset curves 
                           
                              
                                 O
                              
                              
                                 r
                              
                           
                           
                              (
                              t
                              )
                           
                           ,
                           
                           0
                           ≤
                           t
                           ≤
                           1
                        . For an efficient computation of all intersection points among the offset curves, it is important to construct a simple dynamic BVH for each offset curve 
                           
                              
                                 O
                              
                              
                                 r
                              
                           
                           
                              (
                              t
                              )
                           
                        .

As each spiral Bézier curve 
                           C
                           
                              (
                              t
                              )
                           
                         has no inflection point in the curve interior, the tangent direction changes monotonically. Moreover, as the curve 
                           C
                           
                              (
                              t
                              )
                           
                         is 
                           x
                        - and 
                           y
                        -monotone, the curve tangent directions do not span more than angle 
                           π
                           /
                           2
                        . Consequently, each Bézier curve 
                           C
                           
                              (
                              t
                              )
                           
                         has no self-intersection. The offset curve 
                           
                              
                                 O
                              
                              
                                 r
                              
                           
                           
                              (
                              t
                              )
                           
                           =
                           C
                           
                              (
                              t
                              )
                           
                           +
                           r
                           ⋅
                           N
                           
                              (
                              t
                              )
                           
                        , for 
                           0
                           ≤
                           t
                           ≤
                           1
                        , preserves the monotonicity of 
                           x
                         and 
                           y
                         coordinates and tangent directions as long as the offset radius 
                           r
                         is no larger than the curvature radius 
                           1
                           /
                           κ
                        . Otherwise, the tangent direction of the offset curve flips across the curve parameter 
                           t
                        , where 
                           C
                           
                              (
                              t
                              )
                           
                         has curvature 
                           κ
                           
                              (
                              t
                              )
                           
                           =
                           1
                           /
                           r
                        , and the offset curve moves to the opposite direction. We avoid this flipping part by numerically trimming out the redundant offset curve segment due to the larger curvature. The offset curve segments thus generated are now guaranteed to be 
                           x
                         and 
                           y
                        -monotone and also spiral.

The upper-level AABB tree for the whole scene of offset curves can be constructed in a bottom-up fashion starting with AABBs, each bounding an offset curve segment 
                           
                              
                                 O
                              
                              
                                 r
                              
                           
                           
                              (
                              t
                              )
                           
                         for a spiral Bézier curve 
                           C
                           
                              (
                              t
                              )
                           
                         (with curvature 
                           κ
                           
                              (
                              t
                              )
                           
                           <
                           1
                           /
                           r
                        ). Each leaf node of the AABB tree contains a single offset curve 
                           
                              
                                 O
                              
                              
                                 r
                              
                           
                           
                              (
                              t
                              )
                           
                         which is then represented in a separate dynamic BVH, the construction of which is also based on BCAs.

It is straightforward to generate a dynamic BCA tree for an offset curve 
                           
                              
                                 O
                              
                              
                                 r
                              
                           
                           
                              (
                              t
                              )
                           
                           =
                           C
                           
                              (
                              t
                              )
                           
                           +
                           r
                           ⋅
                           N
                           
                              (
                              t
                              )
                           
                        , as the tangent direction is preserved under the offset operation: 
                           
                              
                                 O
                              
                              
                                 r
                              
                              
                                 ′
                              
                           
                           
                              (
                              t
                              )
                           
                           ∥
                           
                              
                                 C
                              
                              
                                 ′
                              
                           
                           
                              (
                              t
                              )
                           
                        . Differently from the fat-arc-based offset curve approximation such as Kim et al.  [12], where the curve approximation error is preserved to the fat-arc approximation of offset curves, the BCA thickness for an offset curve is different from that for the given curve. This deficiency causes no serious problem to the efficiency of our algorithm as we mostly use the LSC regions for an efficient overlap test among offset curve segments. Note that, even for fat arc offsets, the LSC regions change size mainly depending on the angular span of the fat arc. On the other hand, we need to recompute only the outer bounding circle for the construction of an offset LSC region (see Fig. 2(d)).

For an efficient detection of all self-intersection points of the planar offset curves, we employ the two-level dynamic BVH of the offset curves 
                        
                           
                              O
                           
                           
                              r
                           
                        
                        
                           (
                           t
                           )
                        
                      and start with the overlap test among the AABBs for the offset curve segments, each generated from a spiral Bézier curve segment. The overlap test for the upper-level AABB tree proceeds in the same way as in conventional algorithms. When we reach the leaf level of the AABB tree, we switch to the BCA trees for the offset curve segments, where each node has a dual bounding region of BCA and LSC.

The overlap test between two nodes starts with a simple overlap test between their LSC regions. If there is no overlap between the two LSCs, there is no overlap between the two BCAs and no intersection between the two offset curve segments. Otherwise, if the two LSCs overlap, we test a sufficient condition for the existence and uniqueness of offset curve intersection and immediately switch to an efficient numerical procedure if the condition is met. In this way, we can save a large number of recursive subdivisions. Only when the test fails, we go down to the next level of the BCA tree and repeat the same procedure recursively using smaller BCAs and LSCs more tightly fitting the offset curves. In this recursive procedure, the BCAs and LSCs are generated as needed on the fly. Thus, the BCA trees grow dynamically.

We can test efficiently the existence and uniqueness of offset curve intersection using the special geometric structure of BCA. For this purpose, we check the transversal intersection between two BCAs using a few simple geometric tests. In this paper, we use a sufficient condition that is based on testing: (i) if the two offset curves share no tangent direction in common (i.e., a condition for the uniqueness of solution  [27]), and (ii) if each bounding circular arc has one transversal intersection with each of the bounding circular arcs for the other offset curve (i.e., a condition for the existence of solution).

We may end up reaching the leaf levels (at a predetermined maximum depth 
                           H
                        ) of BCA trees detecting neither separation nor intersection all the way down to the bottom levels. In this case, we should report a self-intersection of the offset curve and switch to a numerical procedure for improving the accuracy of the self-intersection point(s). In this work, we employ the same numerical improvement technique as proposed in Kim et al.  [12] which is based on the osculating circles of the input curve 
                           C
                           
                              (
                              t
                              )
                           
                        . A careful topological analysis is also needed around the self-intersection point(s) thus computed as this may correspond to the degenerate case of tangential intersection. Nevertheless, we have never experienced this special case in all the test examples of our experiments.

In the offset curve trimming for different radii, the trimming result for 
                           
                              
                                 O
                              
                              
                                 
                                    
                                       r
                                    
                                    
                                       1
                                    
                                 
                              
                           
                           
                              (
                              t
                              )
                           
                         can be used for saving computing time in the offset trimming for 
                           
                              
                                 O
                              
                              
                                 
                                    
                                       r
                                    
                                    
                                       2
                                    
                                 
                              
                           
                           
                              (
                              t
                              )
                           
                         with a larger radius 
                           
                              
                                 r
                              
                              
                                 2
                              
                           
                           >
                           
                              
                                 r
                              
                              
                                 1
                              
                           
                        . If the offset point 
                           
                              
                                 O
                              
                              
                                 
                                    
                                       r
                                    
                                    
                                       1
                                    
                                 
                              
                           
                           
                              (
                              t
                              )
                           
                         is redundant, there is some point 
                           C
                           
                              (
                              s
                              )
                           
                         which is closer to 
                           
                              
                                 O
                              
                              
                                 
                                    
                                       r
                                    
                                    
                                       1
                                    
                                 
                              
                           
                           
                              (
                              t
                              )
                           
                         than the offset radius 
                           
                              
                                 r
                              
                              
                                 1
                              
                           
                        . This means that the other offset point 
                           
                              
                                 O
                              
                              
                                 
                                    
                                       r
                                    
                                    
                                       2
                                    
                                 
                              
                           
                           
                              (
                              t
                              )
                           
                         is also closer to 
                           C
                           
                              (
                              s
                              )
                           
                         than the radius 
                           
                              
                                 r
                              
                              
                                 2
                              
                           
                         as we have 
                           
                              
                                 
                                    ‖
                                    
                                       
                                          O
                                       
                                       
                                          
                                             
                                                r
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                    
                                       (
                                       t
                                       )
                                    
                                    −
                                    C
                                    
                                       (
                                       s
                                       )
                                    
                                    ‖
                                 
                                 ≤
                                 
                                    ‖
                                    
                                       
                                          O
                                       
                                       
                                          
                                             
                                                r
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                    
                                       (
                                       t
                                       )
                                    
                                    −
                                    
                                       
                                          O
                                       
                                       
                                          
                                             
                                                r
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    
                                       (
                                       t
                                       )
                                    
                                    ‖
                                 
                                 +
                                 
                                    ‖
                                    
                                       
                                          O
                                       
                                       
                                          
                                             
                                                r
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    
                                       (
                                       t
                                       )
                                    
                                    −
                                    C
                                    
                                       (
                                       s
                                       )
                                    
                                    ‖
                                 
                                 <
                                 
                                    (
                                    
                                       
                                          r
                                       
                                       
                                          2
                                       
                                    
                                    −
                                    
                                       
                                          r
                                       
                                       
                                          1
                                       
                                    
                                    )
                                 
                                 +
                                 
                                    
                                       r
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       r
                                    
                                    
                                       2
                                    
                                 
                                 .
                              
                           
                         This simple observation greatly reduces computing time in the offset trimming for a family of different radii.

At each self-intersection location of the offset curve, at least two branches are redundant from the trimmed offset. For example, at a transversal intersection with four branches, it is easy to detect two redundant branches by checking the relative orientations of the two offset curve segments. Starting from a redundant branch, all consecutive offset segments can be eliminated until we reach a different self-intersection of the offset curve.

In the above elimination procedure, we may also reach a dead-end. This is because, as discussed in Section  3.2, we have numerically trimmed out the flipping part of the offset curve 
                           
                              
                                 O
                              
                              
                                 r
                              
                           
                           
                              (
                              t
                              )
                           
                         when the spiral curve 
                           C
                           
                              (
                              t
                              )
                           
                         has curvature 
                           κ
                           
                              (
                              
                                 
                                    t
                                 
                                 
                                    ∗
                                 
                              
                              )
                           
                           =
                           1
                           /
                           r
                         at an interior point 
                           C
                           
                              (
                              
                                 
                                    t
                                 
                                 
                                    ∗
                                 
                              
                              )
                           
                        . The trimmed offset curve 
                           
                              
                                 O
                              
                              
                                 r
                              
                           
                           
                              (
                              t
                              )
                           
                         has a dangling endpoint trimmed at 
                           
                              
                                 O
                              
                              
                                 r
                              
                           
                           
                              (
                              
                                 
                                    t
                                 
                                 
                                    ∗
                                 
                              
                              )
                           
                        . We can also start the elimination procedure from this endpoint.

At the end of the redundancy removal, we may end up with a set of closed loops forming a superset of the trimmed offset curve. A closed loop is redundant if any point of the loop is closer to the given curve 
                           C
                           
                              (
                              t
                              )
                           
                         than the offset radius 
                           r
                        , which can be tested efficiently using the BCA tree of the input curve 
                           C
                           
                              (
                              t
                              )
                           
                        .

@&#EXPERIMENTAL RESULTS@&#

We have implemented our offset trimming algorithm using the proposed dynamic BVH of BCAs in C++ on an Intel Core i7-4770 3.4 GHz PC with a 16 GB main memory. To demonstrate the effectiveness of our approach, we have tested our algorithm against the biarc-based approach of Kim et al.  [12].

The comparison was made on eight planar 
                        B
                     -spline curves under deformation as shown in the leftmost column of Fig. 5
                     . These are the same as the test examples of Kim et al.  [12], which are uniform cubic 
                        B
                     -spline curves defined in the normalized window of 
                        
                           [
                           −
                           1
                           ,
                           1
                           ]
                        
                        ×
                        
                           [
                           −
                           1
                           ,
                           1
                           ]
                        
                     . In each row, six snapshots are shown from the results of offset trimming for the planar curve under metamorphosis to the curve in the next row.

The curve morphing proceeds by representing each pair of 
                        B
                     -spline curves (to be interpolated) using the same knot sequence and then linearly blending their corresponding control points. Two uniform 
                        B
                     -spline curves defined on different intervals 
                        
                           [
                           0
                           ,
                           m
                           ]
                        
                      and 
                        
                           [
                           0
                           ,
                           n
                           ]
                        
                      can be reparameterized to a common interval 
                        
                           [
                           0
                           ,
                           m
                           n
                           /
                           gcd
                           
                              (
                              m
                              ,
                              n
                              )
                           
                           ]
                        
                      by scaling their knot sequences. The scaled knot sequences are then merged to generate two non-uniform 
                        B
                     -spline curves sharing the same knot sequence. Consequently, the 
                        B
                     -spline curve under metamorphosis is a deformable non-uniform 
                        B
                     -spline curve of 
                        
                           (
                           m
                           +
                           n
                           )
                        
                        /
                        gcd
                        
                           (
                           m
                           ,
                           n
                           )
                        
                      control points. We then convert the non-uniform 
                        B
                     -spline curve into a sequence of 
                        
                           (
                           m
                           +
                           n
                           )
                        
                        /
                        gcd
                        
                           (
                           m
                           ,
                           n
                           )
                        
                      cubic Bézier curves as an input to the offset curve trimming algorithm.

In this experiment, we have considered two-sided curve offsets computed for multiple offset radii. The comparison results (computing time measured in 
                        
                           ms
                        
                     ) are reported using the colored graphs of Figs. 6
                     (a)–(d),  which correspond to the cases of (a) 5, (b) 10, (c) 20, and (d) 50 different offset radii, respectively. The larger number means the denser sampling of offset radii. In the cases of 20 and 50 different radii, the individual offset curves are almost indistinguishable in the rendered image. Thus, in Fig. 5, we have shown the result from the case of 10 different offset radii.

Each graph was plotted with the timing results for 800 test examples taken from a continuous metamorphosis that interpolates the eight planar curves. The red graph shows the performance of the biarc-based approach of Kim et al.  [12], whereas the blue graph demonstrates an improved performance of our BCA-based method. The computing time reported here includes none of the rendering time for the given curve or the trimmed offset curves. As one can notice from the shape similarity in the four different red/blue graphs of Fig. 6, the two implemented offset trimming algorithms under comparison are scalable as well as stable even though the planar curves in the middle of the metamorphosis often include sharp corners and non-trivial self-intersections along almost overlapping curve segments. In the 800 test examples, we have observed that only less than 0.3% of the recursive intersection tests reached the maximum depth level 
                        H
                        =
                        8
                     , where we stop the recursion as the approximation error has already been reduced to far less than 
                        ϵ
                        =
                        1
                        
                           
                              0
                           
                           
                              −
                              6
                           
                        
                     , the tolerance we take for the current experiment.

A color map can be used for visually matching the curve parameters for 
                        C
                        
                           (
                           t
                           )
                        
                      and 
                        
                           
                              O
                           
                           
                              r
                           
                        
                        
                           (
                           t
                           )
                        
                      as shown in the offset examples of Fig. 5. By assigning different colors to disjoint 
                        t
                     -intervals, we may distinguish the regions of closest points to different segments of 
                        C
                        
                           (
                           t
                           )
                        
                     . Fig. 7 shows three snapshots from computing the offset curves for eight planar curves with different color codes. This example demonstrates a potential possibility of employing the offset curve computation in the construction of Voronoi cells for planar freeform curves  [28,29].

The offset computation can also be used in the computation of convex hulls for freeform planar curves as shown in Fig. 8
                     . The offset for the convex hull of a planar curve is the same as the convex hull of the curve offset. When we offset a curve by a sufficiently large radius, two consecutive offset curve segments share a common tangent in their convex hull. Though this indirect approach may not be as efficient as direct algorithms for computing the convex hull  [30], this application shows just one example of the generality of offset operation in geometric computing problems.

@&#CONCLUSIONS@&#

We have presented an efficient and robust algorithm for trimming offset curves when the given planar curves are under deformation. For this purpose, we have developed a special dynamic bounding volume hierarchy, which is based on a recursive uniform sampling and BCA approximation of the planar curve and the offset curves under deformation. Compared with other conventional techniques, the BCA approximation provides an optimal solution to our current needs: an efficient dynamic generation of tightly bounding regions with cubic convergence to planar curves under deformation. An extension of our result to the more general problem of trimming self-intersections in the offset surfaces is considerably more challenging than the current problem, an efficient solution of which is an immediate goal of our future work.

@&#ACKNOWLEDGMENTS@&#

This work was supported in part by the People Programme (Marie Curie Actions) of the European Union’s Seventh Framework Programme FP7/2007–2013/ under REA grant agreement PIAP-GA-2011-286426, in part by the Israel Science Foundation (Grant No. 278/13), and also in part by the Korean MCST and KOCCA in the CT R&D Program 2014 (No. R2014060001), and in part by NRF Research Grants (No. 2013R1A1A2010085).

@&#REFERENCES@&#

