@&#MAIN-TITLE@&#Binormalized data-reusing adaptive filtering algorithm for active control of impulsive sources

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           This paper deals with ANC systems for impulsive sources.


                        
                        
                           
                           The standard FxLMS algorithm is not optimal for such type of noise sources.


                        
                        
                           
                           A bi-normalized data-reusing-based new adaptive ANC algorithm is proposed.


                        
                        
                           
                           Computer simulations demonstrate the effectiveness and robust performance of the proposed algorithm.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Active noise control

Impulsive noise

Binormalized data-reusing

Adaptive algorithm

@&#ABSTRACT@&#


               
               
                  The main objective of active noise control (ANC) is to provide attenuation for the environmental acoustic noise. The adaptive algorithms for ANC systems work well to attenuate the Gaussian noise; however, their performance may degrade for non-Gaussian impulsive noise sources. Recently, we have proposed variants of the most famous ANC algorithm, the filtered-x least mean square (FxLMS) algorithm, where an improved performance has been realized by thresholding the input data or by efficiently normalizing the step-size. In this paper, we propose a modified binormalized data-reusing (BNDR)-based adaptive algorithm for impulsive ANC. The proposed algorithm is derived by minimizing a modified cost function, and is based on reusing the past and present samples of data. The main contribution of the paper is to develop a practical DR-type adaptive algorithm, which incorporates an efficiently normalized step-size, and is well suited for ANC of impulsive noise sources. The computer simulations are carried out to demonstrate the effectiveness of the proposed algorithm. It is shown that an improved performance has been realized with a reasonable increase in the computational complexity.
               
            

@&#INTRODUCTION@&#

Active noise control (ANC) is based on the principle of the destructive interference of acoustic waves. The primary noise generated by the noise source is canceled around some desired location by generating and combing an antiphase canceling noise [1]. The block diagram for a single-channel feedforward ANC system is shown in Fig. 1
                     . As shown, a single-channel ANC system comprises one reference microphone to pick up the reference noise 
                        x
                        (
                        n
                        )
                     , one canceling loudspeaker to propagate the canceling signal 
                        y
                        (
                        n
                        )
                      generated by an adaptive filter 
                        W
                        (
                        z
                        )
                     , and one error microphone to pick up the residual noise 
                        e
                        (
                        n
                        )
                     . The system is called ‘feedforward’ as a reference signal is available before the cancelation point. The definitions for various quantities shown in Fig. 1, together with vector definitions for various signals, are summarized in Table 1
                      for the sake of clarity of presentation. The most famous adaptation algorithm for ANC systems is the filtered-x least mean square (FxLMS) algorithm [1], which is a modified version of the LMS algorithm [2]. The FxLMS algorithm is a popular ANC algorithm due to its robust performance, low computational complexity, and ease of implementation [1]. The FxLMS algorithm [1] is obtained by minimizing the mean-square-error cost function; 
                        J
                        (
                        n
                        )
                        =
                        E
                        {
                        
                           
                              e
                           
                           
                              2
                           
                        
                        (
                        n
                        )
                        }
                        ≈
                        
                           
                              e
                           
                           
                              2
                           
                        
                        (
                        n
                        )
                     , where 
                        E
                        {
                        .
                        }
                      is the expectation operator; and is given as
                        
                           (1)
                           
                              w
                              (
                              n
                              +
                              1
                              )
                              =
                              w
                              (
                              n
                              )
                              +
                              μ
                              e
                              (
                              n
                              )
                              
                                 
                                    x
                                 
                                 
                                    f
                                 
                              
                              (
                              n
                              )
                              ,
                           
                        
                      where μ is the step size parameter. As shown in Fig. 1, we consider the noise source being of impulsive nature. The FxLMS algorithm may become unstable for such type of impulsive noise sources, as rigorously shown in [3, Section 2.1].

In practice, the impulsive noises are often due to the occurrence of noise disturbance with low probability but large amplitude, for example punching and stamping machines in the manufacturing plants, presses, combustion engines, pile drivers, IV pump sounds in the hospitals [4,5]. In this paper, we consider impulsive noise modeled by stable non-Gaussian distribution [7]; essentially, we consider standard symmetric α-stable (SαS) distribution 
                           f
                           (
                           x
                           )
                         having characteristic function of the form 
                           φ
                           (
                           t
                           )
                           =
                           
                              
                                 e
                              
                              
                                 
                                    
                                       |
                                       t
                                       |
                                    
                                    
                                       α
                                    
                                 
                              
                           
                        , where 
                           0
                           <
                           α
                           <
                           2
                         is the shape parameter called as the characteristics exponent. If a stable random variable has a small value for α, then distribution has a very heavy tail. It is Gaussian distribution for 
                           α
                           =
                           2
                         and Cauchy distribution for 
                           α
                           =
                           1
                        . Modeling the impulsive noise as SαS process is fairly a good choice. For example, the road traffic noise or office noise are more accurately represented by SαS processes rather than Gaussian ones [6].

In [3], Sun et al. have proposed a simple variant of the FxLMS algorithm for ANC of impulsive noise. The basic idea here is to ignore the sample of the reference signal 
                           x
                           (
                           n
                           )
                         if its amplitude is above a certain value set by its statistics, and thus the reference signal is modified as
                           
                              (2)
                              
                                 
                                    
                                       x
                                    
                                    
                                       ′
                                    
                                 
                                 (
                                 n
                                 )
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             x
                                             (
                                             n
                                             )
                                             ,
                                             
                                          
                                          
                                             if 
                                             x
                                             (
                                             n
                                             )
                                             ∈
                                             [
                                             
                                                
                                                   c
                                                
                                                
                                                   1
                                                
                                             
                                             ,
                                             
                                                
                                                   c
                                                
                                                
                                                   2
                                                
                                             
                                             ]
                                          
                                       
                                       
                                          
                                             0
                                             ,
                                             
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                         and the update equation is modified as
                           
                              (3)
                              
                                 w
                                 (
                                 n
                                 +
                                 1
                                 )
                                 =
                                 w
                                 (
                                 n
                                 )
                                 +
                                 μ
                                 e
                                 (
                                 n
                                 )
                                 
                                    
                                       x
                                    
                                    
                                       f
                                    
                                    
                                       ′
                                    
                                 
                                 (
                                 n
                                 )
                                 ,
                              
                           
                         where 
                           
                              
                                 x
                              
                              
                                 f
                              
                              
                                 ′
                              
                           
                           (
                           n
                           )
                           =
                           
                              
                                 [
                                 
                                    
                                       x
                                    
                                    
                                       f
                                    
                                    
                                       ′
                                    
                                 
                                 (
                                 n
                                 )
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       f
                                    
                                    
                                       ′
                                    
                                 
                                 (
                                 n
                                 −
                                 1
                                 )
                                 ,
                                 ⋯
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       f
                                    
                                    
                                       ′
                                    
                                 
                                 (
                                 n
                                 −
                                 L
                                 +
                                 1
                                 )
                                 ]
                              
                              
                                 T
                              
                           
                        , and where T denotes transposition and 
                           
                              
                                 x
                              
                              
                                 f
                              
                              
                                 ′
                              
                           
                           (
                           n
                           )
                           =
                           
                              
                                 s
                              
                              
                                 ˆ
                              
                           
                           (
                           n
                           )
                           ⁎
                           
                              
                                 x
                              
                              
                                 ′
                              
                           
                           (
                           n
                           )
                         is the modified-filtered-reference signal where ⁎ represents the convolution. Effectively, Sun's algorithm [3] assumes the same probability density function (PDF) for 
                           
                              
                                 x
                              
                              
                                 ′
                              
                           
                           (
                           n
                           )
                         with in 
                           [
                           
                              
                                 c
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 c
                              
                              
                                 2
                              
                           
                           ]
                         as that of 
                           x
                           (
                           n
                           )
                        , and simply neglects the tail beyond 
                           [
                           
                              
                                 c
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 c
                              
                              
                                 2
                              
                           
                           ]
                        . As compared with the FxLMS algorithm, this algorithm gives stable and robust performance. However, the stability cannot be guaranteed, and algorithm might become unstable particularly when α is small. In [8], we suggested thresholding-based FxLMS (ThFxLMS) algorithm, which gives improved performance as compared with the Sun's algorithm. The main problem is that these algorithms [3,8] require estimation of appropriate thresholding parameters. In [9], we have proposed a normalized-step-size FxLMS (NSS-FxLMS) algorithm that does not use modified reference and/or error signals, and hence does not require choosing the thresholding parameters. The NSS-FxLMS algorithm is summarized below [9]:
                           
                              (4)
                              
                                 
                                    w
                                    (
                                    n
                                    +
                                    1
                                    )
                                    =
                                    w
                                    (
                                    n
                                    )
                                    +
                                    μ
                                    (
                                    n
                                    )
                                    e
                                    (
                                    n
                                    )
                                    
                                       
                                          x
                                       
                                       
                                          f
                                       
                                    
                                    (
                                    n
                                    )
                                    ,
                                 
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    μ
                                    (
                                    n
                                    )
                                    =
                                    
                                       
                                          
                                             μ
                                          
                                          
                                             ˜
                                          
                                       
                                       
                                          
                                             
                                                ‖
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      f
                                                   
                                                
                                                (
                                                n
                                                )
                                                ‖
                                             
                                             
                                                2
                                             
                                          
                                          +
                                          
                                             
                                                E
                                             
                                             
                                                e
                                             
                                          
                                          (
                                          n
                                          )
                                          +
                                          δ
                                       
                                    
                                    ,
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       
                                          E
                                       
                                       
                                          e
                                       
                                    
                                    (
                                    n
                                    )
                                    =
                                    λ
                                    
                                       
                                          E
                                       
                                       
                                          e
                                       
                                    
                                    (
                                    n
                                    −
                                    1
                                    )
                                    +
                                    (
                                    1
                                    −
                                    λ
                                    )
                                    
                                       
                                          e
                                       
                                       
                                          2
                                       
                                    
                                    (
                                    n
                                    )
                                    ,
                                 
                              
                           
                         where 
                           
                              
                                 μ
                              
                              
                                 ˜
                              
                           
                         is the fixed step-size, δ is a small positive constant to avoid division by zero, λ is the forgetting factor, and 
                           ‖
                           ⋅
                           ‖
                         denotes Euclidean norm of the quantity inside.

Many data-reusing (DR) adaptive algorithms have been proposed in the literature [10–13], where the main objective is to improve the convergence of the initial algorithm. In [14], we have attempted to investigate whether DR can be adopted to develop an efficient strategy for ANC of impulsive noise sources. The work in [14] is based on Schnaufer and Jenkins DR-NLMS (SJ-DR-NLMS) algorithm [12], and the step-size in each data-reuse is being normalized using (filtered-) reference as well as error signals. We observe an improved performance; however, relatively a large order of data-reuse is required, which might result in a computational complexity formidable for practical ANC applications. In this paper, we investigate modifying and employing binormalized DR (BNDR) [15] type algorithm for ANC of impulsive noise sources. The main objective is to realize an improved convergence performance while keeping the computational complexity within reasonable limits. This is indeed achieved as BNDR algorithm requires only past and present data samples, and thus the order of data-reuse is only 2.

The rest of the paper is organized as follows. Section 2 describes derivation of the proposed algorithm. A detailed computational complexity analysis is also included in this section. A few remarks on the performance analysis are also provided. Section 3 presents the simulation results and discussion, and the concluding remarks are given in Section 4.

The basic idea in any DR-type adaptive algorithm is to “re-use” the present (and/or past) data samples while updating the coefficients of the adaptive filter [10]. In the case of ANC systems being implemented using FxLMS algorithm (see Fig. 1), the signals 
                        d
                        (
                        n
                        )
                      and 
                        e
                        (
                        n
                        )
                      are generated acoustically with only 
                        e
                        (
                        n
                        )
                      being accessible via error microphone. This problem can be solved by adapting the ANC filter 
                        W
                        (
                        z
                        )
                      using a modified-structure FxLMS algorithm,
                        1
                     
                     
                        1
                        For details on modified FxLMS (MFxLMS) algorithm, see [16] and references there in.
                      where the disturbance signal 
                        d
                        (
                        n
                        )
                      can be indirectly estimated as explained below. Consider the bock diagram for a modified structures single-channel ANC as shown in Fig. 2
                     , which comprises two adaptive ANC filters 
                        W
                        (
                        z
                        )
                      and 
                        
                           
                              W
                           
                           
                              1
                           
                        
                        (
                        z
                        )
                     . The output 
                        y
                        (
                        n
                        )
                      of the ANC filter 
                        W
                        (
                        z
                        )
                     ,
                        
                           (7)
                           
                              y
                              (
                              n
                              )
                              =
                              
                                 
                                    w
                                 
                                 
                                    T
                                 
                              
                              (
                              n
                              )
                              x
                              (
                              n
                              )
                              ,
                           
                        
                      is filtered through the secondary path modeling filter 
                        
                           
                              S
                           
                           
                              ˆ
                           
                        
                        (
                        z
                        )
                      as 
                        
                           
                              
                                 
                                    y
                                 
                                 
                                    ˆ
                                 
                              
                           
                           
                              s
                           
                        
                        (
                        n
                        )
                        =
                        
                           
                              s
                           
                           
                              ˆ
                           
                        
                        (
                        n
                        )
                        ⁎
                        y
                        (
                        n
                        )
                     . By adding 
                        
                           
                              
                                 
                                    y
                                 
                                 
                                    ˆ
                                 
                              
                           
                           
                              s
                           
                        
                        (
                        n
                        )
                      to the error signal 
                        e
                        (
                        n
                        )
                     , we get:
                        
                           (8)
                           
                              
                                 
                                    d
                                 
                                 
                                    1
                                 
                              
                              (
                              n
                              )
                              =
                              e
                              (
                              n
                              )
                              +
                              
                                 
                                    
                                       
                                          y
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    s
                                 
                              
                              (
                              n
                              )
                              =
                              d
                              (
                              n
                              )
                              +
                              (
                              
                                 
                                    
                                       
                                          y
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    s
                                 
                              
                              (
                              n
                              )
                              −
                              
                                 
                                    y
                                 
                                 
                                    s
                                 
                              
                              (
                              n
                              )
                              )
                              .
                           
                        
                      Assuming that the secondary path modeling filter 
                        
                           
                              S
                           
                           
                              ˆ
                           
                        
                        (
                        z
                        )
                      exactly identifies the secondary path 
                        S
                        (
                        z
                        )
                     , i.e., 
                        
                           
                              S
                           
                           
                              ˆ
                           
                        
                        (
                        z
                        )
                        ≈
                        S
                        (
                        z
                        )
                     : 
                        
                           
                              
                                 
                                    y
                                 
                                 
                                    ˆ
                                 
                              
                           
                           
                              s
                           
                        
                        (
                        n
                        )
                        −
                        
                           
                              y
                           
                           
                              s
                           
                        
                        (
                        n
                        )
                        =
                        (
                        
                           
                              s
                           
                           
                              ˆ
                           
                        
                        (
                        n
                        )
                        −
                        s
                        (
                        n
                        )
                        )
                        ⁎
                        y
                        (
                        n
                        )
                        ≈
                        0
                     , and hence 
                        
                           
                              d
                           
                           
                              1
                           
                        
                        (
                        n
                        )
                      gives an estimate of the disturbance signal 
                        d
                        (
                        n
                        )
                     . Now using the filtered-reference signal 
                        
                           
                              x
                           
                           
                              f
                           
                        
                        (
                        n
                        )
                      and the estimated disturbance signal 
                        
                           
                              d
                           
                           
                              1
                           
                        
                        (
                        n
                        )
                     , the DR-type algorithms discussed below can be employed to adapt 
                        
                           
                              W
                           
                           
                              1
                           
                        
                        (
                        z
                        )
                     . Finally, the weights of 
                        
                           
                              W
                           
                           
                              1
                           
                        
                        (
                        z
                        )
                      are copied to the ANC filter 
                        W
                        (
                        z
                        )
                     .

In [14], we have proposed a NSS-DR-based algorithm (hereafter referred as Previous algorithm) to update 
                           
                              
                                 W
                              
                              
                                 1
                              
                           
                           (
                           z
                           )
                        , which in fact combines NSS-FxLMS algorithm [9] with the DR framework of [12], and where N is the order of data-reuse (see Table 2
                         for summary of updating 
                           
                              
                                 W
                              
                              
                                 1
                              
                           
                           (
                           z
                           )
                         in the previous algorithm). We have observed that a relatively large date-reuse order, for example 
                           N
                           =
                           20
                        , is required to achieve good performance for impulsive ANC. As explained later, a large value of N results in a substantial increase in the computational complexity. This sets the motivation for the algorithm derived below.

The BNDR-LMS algorithm combines DR, orthogonal projections of two consecutive gradient directions, and normalization in order to achieve faster convergence when compared with the other LMS-like algorithms. Essentially, the minimization criteria is [15]
                        
                           
                              (9)
                              
                                 
                                    min
                                    
                                       w
                                       (
                                       n
                                       +
                                       1
                                       )
                                    
                                 
                                 ⁡
                                 
                                    
                                       ‖
                                       w
                                       (
                                       n
                                       +
                                       1
                                       )
                                       −
                                       w
                                       (
                                       n
                                       )
                                       ‖
                                    
                                    
                                       2
                                    
                                 
                                 ,
                              
                           
                         subject to
                           
                              (10)
                              
                                 
                                    d
                                    (
                                    n
                                    )
                                    =
                                    
                                       
                                          x
                                       
                                       
                                          T
                                       
                                    
                                    (
                                    n
                                    )
                                    w
                                    (
                                    n
                                    +
                                    1
                                    )
                                    ,
                                 
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    d
                                    (
                                    n
                                    −
                                    1
                                    )
                                    =
                                    
                                       
                                          x
                                       
                                       
                                          T
                                       
                                    
                                    (
                                    n
                                    −
                                    1
                                    )
                                    w
                                    (
                                    n
                                    +
                                    1
                                    )
                                    .
                                 
                              
                           
                         In order to develop an efficient algorithm for ANC of impulsive noise sources, we consider the following minimization criteria
                           
                              (12)
                              
                                 
                                    min
                                    
                                       w
                                       (
                                       n
                                       +
                                       1
                                       )
                                    
                                 
                                 ⁡
                                 
                                    
                                       ‖
                                       w
                                       (
                                       n
                                       +
                                       1
                                       )
                                       −
                                       w
                                       (
                                       n
                                       )
                                       ‖
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 β
                                 
                                    
                                       ‖
                                       w
                                       (
                                       n
                                       +
                                       1
                                       )
                                       −
                                       w
                                       (
                                       n
                                       −
                                       1
                                       )
                                       ‖
                                    
                                    
                                       2
                                    
                                 
                              
                           
                         subject to
                           
                              (13)
                              
                                 
                                    d
                                    (
                                    n
                                    )
                                    =
                                    
                                       
                                          x
                                       
                                       
                                          f
                                       
                                       
                                          T
                                       
                                    
                                    (
                                    n
                                    )
                                    w
                                    (
                                    n
                                    +
                                    1
                                    )
                                    ,
                                 
                              
                           
                        
                        
                           
                              (14)
                              
                                 
                                    d
                                    (
                                    n
                                    −
                                    1
                                    )
                                    =
                                    
                                       
                                          x
                                       
                                       
                                          f
                                       
                                       
                                          T
                                       
                                    
                                    (
                                    n
                                    −
                                    1
                                    )
                                    w
                                    (
                                    n
                                    +
                                    1
                                    )
                                    ,
                                 
                              
                           
                         where 
                           0
                           <
                           β
                           <
                           1
                        . In the proposed criteria (Eqs. (12)–(14)), we may notice two differences as compared with the original formulation (Eqs. (9)–(11)):
                           
                              1.
                              The filtered-reference signal 
                                    
                                       
                                          x
                                       
                                       
                                          f
                                       
                                    
                                    (
                                    n
                                    )
                                  is employed instead of 
                                    x
                                    (
                                    n
                                    )
                                 , which is demanded by the application at hand.

The solution vector 
                                    w
                                    (
                                    n
                                    +
                                    1
                                    )
                                  is aimed at to be minimum distance from 
                                    w
                                    (
                                    n
                                    )
                                  as well as 
                                    w
                                    (
                                    n
                                    −
                                    1
                                    )
                                  (with a scaling factor β).

By using the method of Lagrange multiplier, the cost function to be minimized is therefore
                           
                              (15)
                              
                                 
                                    
                                       
                                          J
                                          (
                                          n
                                          )
                                       
                                       
                                          =
                                          
                                             
                                                ‖
                                                w
                                                (
                                                n
                                                +
                                                1
                                                )
                                                −
                                                w
                                                (
                                                n
                                                )
                                                ‖
                                             
                                             
                                                2
                                             
                                          
                                          +
                                          β
                                          
                                             
                                                ‖
                                                w
                                                (
                                                n
                                                +
                                                1
                                                )
                                                −
                                                w
                                                (
                                                n
                                                −
                                                1
                                                )
                                                ‖
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                          +
                                          
                                             
                                                λ
                                             
                                             
                                                1
                                             
                                          
                                          
                                             (
                                             d
                                             (
                                             n
                                             )
                                             −
                                             
                                                
                                                   x
                                                
                                                
                                                   f
                                                
                                                
                                                   T
                                                
                                             
                                             (
                                             n
                                             )
                                             w
                                             (
                                             n
                                             +
                                             1
                                             )
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                          +
                                          
                                             
                                                λ
                                             
                                             
                                                2
                                             
                                          
                                          
                                             (
                                             d
                                             (
                                             n
                                             −
                                             1
                                             )
                                             −
                                             
                                                
                                                   x
                                                
                                                
                                                   f
                                                
                                                
                                                   T
                                                
                                             
                                             (
                                             n
                                             −
                                             1
                                             )
                                             w
                                             (
                                             n
                                             +
                                             1
                                             )
                                             )
                                          
                                       
                                    
                                 
                              
                           
                         where 
                           
                              
                                 λ
                              
                              
                                 1
                              
                           
                         and 
                           
                              
                                 λ
                              
                              
                                 2
                              
                           
                         are the Lagrange multipliers. Using the relationship 
                           ∂
                           J
                           (
                           n
                           )
                           /
                           ∂
                           w
                           (
                           n
                           +
                           1
                           )
                           =
                           0
                        , we arrive at a solution
                           
                              (16)
                              
                                 w
                                 (
                                 n
                                 +
                                 1
                                 )
                                 =
                                 
                                    
                                       w
                                    
                                    
                                       ˜
                                    
                                 
                                 (
                                 n
                                 )
                                 +
                                 A
                                 
                                    
                                       x
                                    
                                    
                                       f
                                    
                                 
                                 (
                                 n
                                 )
                                 +
                                 B
                                 
                                    
                                       x
                                    
                                    
                                       f
                                    
                                 
                                 (
                                 n
                                 −
                                 1
                                 )
                                 ,
                              
                           
                         where
                           
                              (17)
                              
                                 
                                    
                                       
                                          w
                                       
                                       
                                          ˜
                                       
                                    
                                    (
                                    n
                                    )
                                    =
                                    
                                       1
                                       
                                          1
                                          +
                                          β
                                       
                                    
                                    
                                       (
                                       w
                                       (
                                       n
                                       )
                                       +
                                       β
                                       w
                                       (
                                       n
                                       −
                                       1
                                       )
                                       )
                                    
                                    ,
                                 
                              
                           
                        
                        
                           
                              (18)
                              
                                 
                                    A
                                    =
                                    
                                       
                                          
                                             λ
                                          
                                          
                                             1
                                          
                                       
                                       
                                          2
                                          (
                                          1
                                          +
                                          β
                                          )
                                       
                                    
                                    ,
                                    
                                    and
                                    
                                    B
                                    =
                                    
                                       
                                          
                                             λ
                                          
                                          
                                             2
                                          
                                       
                                       
                                          2
                                          (
                                          1
                                          +
                                          β
                                          )
                                       
                                    
                                    .
                                 
                              
                           
                        
                     

Equation (17) shows that the modified cost function in Eq. (12) for 
                           β
                           >
                           0
                         results in smoothing the filter coefficient vector via first-order moving-average (MA) filtering. This MA filtering in effect controls the dynamic range of the adaptive filter coefficients, and would reduce the fluctuations in the filter coefficients occurring due to, for example, the impulsive nature of the noise source. It is worth mentioning that β close to unity would give equal weight to the present and past values of coefficient vector, and may compromise the tracking performance of the proposed algorithm. Considering (16) in constraints (13) and (14), we get:
                           
                              (19)
                              
                                 
                                    
                                       
                                          ‖
                                          
                                             
                                                x
                                             
                                             
                                                f
                                             
                                          
                                          (
                                          n
                                          )
                                          ‖
                                       
                                       
                                          2
                                       
                                    
                                    A
                                    +
                                    
                                       (
                                       
                                          
                                             x
                                          
                                          
                                             f
                                          
                                          
                                             T
                                          
                                       
                                       (
                                       n
                                       )
                                       
                                          
                                             x
                                          
                                          
                                             f
                                          
                                       
                                       (
                                       n
                                       −
                                       1
                                       )
                                       )
                                    
                                    B
                                    =
                                    
                                       
                                          
                                             
                                                e
                                             
                                             
                                                ˜
                                             
                                          
                                       
                                       
                                          1
                                       
                                    
                                    (
                                    n
                                    )
                                    ,
                                 
                              
                           
                        
                        
                           
                              (20)
                              
                                 
                                    
                                       (
                                       
                                          
                                             x
                                          
                                          
                                             f
                                          
                                          
                                             T
                                          
                                       
                                       (
                                       n
                                       −
                                       1
                                       )
                                       
                                          
                                             x
                                          
                                          
                                             f
                                          
                                       
                                       (
                                       n
                                       )
                                       )
                                    
                                    A
                                    +
                                    
                                       
                                          ‖
                                          
                                             
                                                x
                                             
                                             
                                                f
                                             
                                          
                                          (
                                          n
                                          −
                                          1
                                          )
                                          ‖
                                       
                                       
                                          2
                                       
                                    
                                    B
                                    =
                                    
                                       
                                          
                                             
                                                e
                                             
                                             
                                                ˜
                                             
                                          
                                       
                                       
                                          2
                                       
                                    
                                    (
                                    n
                                    )
                                    ,
                                 
                              
                           
                         where
                           
                              (21)
                              
                                 
                                    
                                       
                                          
                                             
                                                e
                                             
                                             
                                                ˜
                                             
                                          
                                       
                                       
                                          1
                                       
                                    
                                    (
                                    n
                                    )
                                    =
                                    d
                                    (
                                    n
                                    )
                                    −
                                    
                                       
                                          x
                                       
                                       
                                          f
                                       
                                       
                                          T
                                       
                                    
                                    (
                                    n
                                    )
                                    
                                       
                                          w
                                       
                                       
                                          ˜
                                       
                                    
                                    (
                                    n
                                    )
                                    ,
                                 
                              
                           
                        
                        
                           
                              (22)
                              
                                 
                                    
                                       
                                          
                                             
                                                e
                                             
                                             
                                                ˜
                                             
                                          
                                       
                                       
                                          2
                                       
                                    
                                    (
                                    n
                                    )
                                    =
                                    d
                                    (
                                    n
                                    −
                                    1
                                    )
                                    −
                                    
                                       
                                          x
                                       
                                       
                                          f
                                       
                                       
                                          T
                                       
                                    
                                    (
                                    n
                                    −
                                    1
                                    )
                                    
                                       
                                          w
                                       
                                       
                                          ˜
                                       
                                    
                                    (
                                    n
                                    )
                                    ,
                                 
                              
                           
                         are the two (internal) error signals computed using present and past data samples. Solving (19) and (20), we get
                           
                              (23)
                              
                                 
                                    A
                                    =
                                    
                                       
                                          
                                             
                                                ‖
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      f
                                                   
                                                
                                                (
                                                n
                                                −
                                                1
                                                )
                                                ‖
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ˜
                                                   
                                                
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          n
                                          )
                                          −
                                          (
                                          
                                             
                                                x
                                             
                                             
                                                f
                                             
                                             
                                                T
                                             
                                          
                                          (
                                          n
                                          )
                                          
                                             
                                                x
                                             
                                             
                                                f
                                             
                                          
                                          (
                                          n
                                          −
                                          1
                                          )
                                          )
                                          
                                             
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ˜
                                                   
                                                
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          n
                                          )
                                       
                                       
                                          DEN
                                       
                                    
                                    ,
                                 
                              
                           
                        
                        
                           
                              (24)
                              
                                 
                                    B
                                    =
                                    
                                       
                                          −
                                          (
                                          
                                             
                                                x
                                             
                                             
                                                f
                                             
                                             
                                                T
                                             
                                          
                                          (
                                          n
                                          −
                                          1
                                          )
                                          
                                             
                                                x
                                             
                                             
                                                f
                                             
                                          
                                          (
                                          n
                                          )
                                          )
                                          
                                             
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ˜
                                                   
                                                
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          n
                                          )
                                          +
                                          
                                             
                                                ‖
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      f
                                                   
                                                
                                                (
                                                n
                                                )
                                                ‖
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ˜
                                                   
                                                
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          n
                                          )
                                       
                                       
                                          DEN
                                       
                                    
                                    ,
                                 
                              
                           
                         where 
                           
                              DEN
                           
                           =
                           
                              (
                              
                                 
                                    ‖
                                    
                                       
                                          x
                                       
                                       
                                          f
                                       
                                    
                                    (
                                    n
                                    )
                                    ‖
                                 
                                 
                                    2
                                 
                              
                              
                                 
                                    ‖
                                    
                                       
                                          x
                                       
                                       
                                          f
                                       
                                    
                                    (
                                    n
                                    −
                                    1
                                    )
                                    ‖
                                 
                                 
                                    2
                                 
                              
                              )
                           
                           −
                           
                              
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       f
                                    
                                    
                                       T
                                    
                                 
                                 (
                                 n
                                 )
                                 
                                    
                                       x
                                    
                                    
                                       f
                                    
                                 
                                 (
                                 n
                                 −
                                 1
                                 )
                                 )
                              
                              
                                 2
                              
                           
                         is the denominator term, which effectively normalizes the gradient in the update equation.

Summary of the overall ANC system is given in Table 3
                        , where
                           
                              1.
                              
                                 
                                    
                                       
                                          E
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ˜
                                                   
                                                
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                    (
                                    n
                                    )
                                  denotes energy of the error signal 
                                    
                                       
                                          
                                             
                                                e
                                             
                                             
                                                ˜
                                             
                                          
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    n
                                    )
                                  being computed using a lowpass estimator with a forgetting factor λ,

the denominator term DEN is modified to include effect of the error signals, and a positive constant δ is added to avoid division by zero, and

a fixed step-size 
                                    
                                       
                                          μ
                                       
                                       
                                          ˜
                                       
                                    
                                  in included in the final update equation, which provides control over adaptation.

The number of multiplications (×) and additions (+) per iteration for each computation in the previous and proposed algorithms are given in Table 3, where L denotes tap-weight length of the ANC filter 
                           W
                           (
                           z
                           )
                         (and 
                           
                              
                                 W
                              
                              
                                 1
                              
                           
                           (
                           z
                           )
                        ), M denotes the tap-weight length of the secondary path modeling filter 
                           
                              
                                 S
                              
                              
                                 ˆ
                              
                           
                           (
                           z
                           )
                        , and N denotes the data-reuse order in the previous algorithm. The computational complexity comparison between the previous and proposed algorithms for the total number of computations per iteration is given in Table 4
                        . A few numerical examples for various choices of L, M, and N are also given for the sake of clarity of presentation. The numerical Example 3 in Table 4 corresponds to the situation considered in the computer simulations presented in Section 3. In the practical ANC systems, the impulse response of acoustic paths may be very long, which may require long length (adaptive) filters. This situation is considered in the numerical Examples 11–15.

For the data-reuse order 
                           N
                           =
                           2
                        , the proposed algorithm has somewhat higher computational complexity as compared with that of the previous algorithm. This is due to the fact that the proposed algorithm requires computing the MA filtering for the filter coefficients (see computation # 8 in Table 3). For the rest of the cases with higher data-reuse order, the computational complexity of the proposed algorithm is substantially lower as compared with the previous algorithm. Furthermore, the memory requirements for the proposed algorithm are also within reasonable limits as compared with the previous algorithm.

For adaptive filters, when a new algorithm is developed, it is quite important to carry out its performance analysis. Although the FxLMS algorithm has been widely used for implementation of ANC systems, its convergence analysis is still an active area of research [17]. The reason being existence of the secondary path, which complicates the convergence analysis as compared with that of the standard LMS algorithm. The various attempts on derivation of theoretical convergence condition for the FxLMS algorithm have been carried out with many simplifying assumptions, for example, input is tonal or multi-tonal, secondary path is a pure delay or a moving average model, input is stationary and/or purely white, etc. (see [18] and [19] and references there in).

The analysis of BNDR algorithm for the standard adaptive filtering has been presented in [15], which may be extended to perform the theoretical analysis of Fx-version of BNDR algorithm for ANC systems. This paper develops a (modified) BNDR type filtered-x algorithm for ANC of impulsive noise sources being modeled as SαS distributions. For stable distributions, the 2nd order moments do not exist, which makes the theoretical analysis very difficult, if not impossible. We quote from [7, Page 1008]: ‘It has long been recognized that these lower order moments are much harder to work with than the second order moment. Consequently, stable signal processing is in general much more complicated than traditional Gaussian signal processing, as we have demonstrated in the paper.’. This may be the reason that recent works on ANC of impulsive sources (being modeled as stable process) do not include the theoretical analysis, and in fact the simulations have been used as a major tool to demonstrate the effectiveness of the proposal (see for example, [3,6,8]). The interested reader may also look in to the recent works on ANC [20–25], where simulations have been used for performance evaluation. In this paper, we perform extensive computer simulations (as detailed in the next section) that are carefully designed to mimic practical scenarios. Though simulations do not prove, yet do demonstrate the effectiveness, and we observe that the proposed method outperforms the existing approaches.

This section provides the simulation results to verify the effectiveness of the proposed algorithm in comparison with the existing algorithms. We consider the following algorithms for the performance comparison:
                        
                           1.
                           Sun's algorithm [3], which is one of the earlier attempts to improve performance of the FxLMS algorithm for impulsive ANC and is used here as a bench mark.

The NSS-FxLMS algorithm [9], where the step-size parameter is normalized in a manner well suited for ANC of impulsive noise. A similar idea of step-size normalization has been incorporated in the algorithms discussed in this paper.

The previous (DR-based) algorithm [14], which in fact puts the NSS-FxLMS algorithm in a DR framework.

The proposed BNDR-MFxLMS algorithm investigated in this paper.

The acoustic paths are modeled using the data provided in the disk attached with [1]. Using this data, the primary path 
                        P
                        (
                        z
                        )
                      and the secondary path 
                        S
                        (
                        z
                        )
                      are modeled as FIR filter of length 256 and 128, respectively. The magnitude and phase response characteristic of acoustic paths used in computer simulations are shown in Fig. 3
                     . It is assumed that the secondary path modeling filter 
                        
                           
                              S
                           
                           
                              ˆ
                           
                        
                        (
                        z
                        )
                      is exactly identified as 
                        S
                        (
                        z
                        )
                     . The ANC adaptive filters 
                        W
                        (
                        z
                        )
                      and 
                        
                           
                              W
                           
                           
                              1
                           
                        
                        (
                        z
                        )
                      are selected as FIR filters of tap-weight length 192. The thresholding parameters in Sun's algorithm are selected as 
                        [
                        
                           
                              c
                           
                           
                              1
                           
                        
                        ,
                        
                           
                              c
                           
                           
                              2
                           
                        
                        ]
                        =
                        [
                        0.01
                        ,
                        99.99
                        ]
                     , [9]. It is customary to use a small value for the parameter δ (to avoid division by zero), and select the forgetting factor close to but less than unity, therefore, these parameters are selected as 
                        δ
                        =
                        1
                        ×
                        
                           
                              10
                           
                           
                              −
                              4
                           
                        
                     , and 
                        λ
                        =
                        0.99
                     . The reference noise signal 
                        x
                        (
                        n
                        )
                      is modeled by standard SαS process with various values of α, and all the simulation results presented below are averaged over 50 realizations of the process.

In the first experiment, we carried out simulations for standard SαS process with 
                        α
                        =
                        1.4
                     . In real applications, experience as well as a trial-n-error process are definitely needed to find an appropriate value for the step-size parameters [26]. Since each algorithm discussed in this paper has a different strategy (thresholding, normalizing the step-size and/or reusing the data, etc.) for dealing with the impulsive nature of the noise source, the step-size parameters are experimentally tuned for fast-and-stable convergence of the respective algorithm. We start from the basic methods (Sun's algorithm, and NSS-FxLMS algorithm) and perform extensive experiments to study the effect of step-size. These values are used as a guideline to tune the step-size for the rest of the methods. Fig. 4
                      shows the MNR curves obtained with Sun's algorithm and NSS-FxLMS algorithm for various values of step-size parameters. We observe that the convergence speed of the Sun's algorithm is very slow, and in fact allows selection of only a very small value for the step-size. The NSS-FxLMS algorithm allows selection of somewhat large values for the step-size parameter and in fact gives much improved performance (fast convergence speed and good noise reduction) as compared with the Sun's algorithm. From these experiments the step-size parameters are selected as 
                        μ
                        =
                        2
                        ×
                        
                           
                              10
                           
                           
                              −
                              7
                           
                        
                      for Sun's method, and 
                        
                           
                              μ
                           
                           
                              ˜
                           
                        
                        =
                        7
                        ×
                        
                           
                              10
                           
                           
                              −
                              4
                           
                        
                      for NSS-FxLMS algorithm. Since the previous algorithm is equipped with NSS as well as DR-based adaptation, we select the step-size as 
                        
                           
                              μ
                           
                           
                              ˜
                           
                        
                        =
                        7
                        ×
                        
                           
                              10
                           
                           
                              −
                              3
                           
                        
                      (a large value for which the NSS-FxLMS algorithm becomes unstable). Finally, the step-size for the proposed BNDR-MFxLMS algorithm is selected as 
                        
                           
                              μ
                           
                           
                              ˜
                           
                        
                        =
                        7
                        ×
                        
                           
                              10
                           
                           
                              −
                              2
                           
                        
                     .

The effect of data-reuse order N on the performance of previous (NSS-DR-based) algorithm [14] is shown in Fig. 5
                     . We observe that choosing large N does improve the convergence speed of the previous algorithm; however, at a price of too much increase in the computational complexity as detailed in Table 4. Furthermore, there is some degradation in the noise reduction performance at the steady-state,
                        3
                     
                     
                        3
                        See small window in Fig. 5.
                      which is in accordance with the behavior of DR-based adaptive algorithms [15]. In order to keep the computational complexity with in reasonable limits, we choose 
                        N
                        =
                        20
                      for the rest of simulations. Fig. 6
                      shows MNR performance of the proposed algorithm for various values of the parameter β, from which we choose 
                        β
                        =
                        0.025
                      for the rest of simulations. On the basis of the best results for the respective algorithms, the performance comparison is shown in Fig. 7
                     . It is important to note that the previous DR-based algorithm [14] (with data-reuse order of 
                        N
                        =
                        20
                     ) gives similar performance as that of the proposed algorithm; in fact, curves for the two algorithms almost overlap each other. Considering that the proposed algorithm is utilizing data-reuse order of 2, we may conclude that the proposed algorithm outperforms the existing algorithms considered in this paper.

In the second experiment, we consider a less impulsive scenario, and model the reference signal as a standard SαS process with 
                        α
                        =
                        1.7
                     . The impulsive noise with 
                        α
                        =
                        1.7
                      is more close towards Gaussian distribution. The ANC system, therefore, either should give a similar or even better performance than that observed for 
                        α
                        =
                        1.4
                     . In LMS-style adaptive algorithms, it is well known that the step-size parameter is inversely related to power of the excitation signal. Therefore, for a less impulsive scenario the step-size upper-bound would increase to allow selection of a somewhat larger value, and hence achieve a fast convergence speed. For a fair comparison, however, the simulation parameters are selected to the same values as found in the previous experiment for 
                        α
                        =
                        1.4
                     . The main idea behind this choice is to study algorithm sensitivity for simulation parameters. The MNR curves for the performance comparison are shown in Fig. 8
                     . In comparison with results for 
                        α
                        =
                        1.4
                     , we observe that: 1) Sun's algorithm shows slightly better convergence, 2) the convergence speed of NSS-FxLMS algorithms becomes slower (and hence would require further tuning of the step-size to speed-up the convergence speed), and 3) both the previous and proposed algorithms keep the good convergence speed with the proposed method appearing as a better choice due to lower computational cost than the previous algorithm. We see that the performance of DR-based (previous and proposed) algorithms is in fact slightly better than that observed in the previous experiment. This is not explicitly shown in the manuscript, and reader is requested to pay a close look at the thick-black curves in Figs. 7 and 8. Therefore, we may conclude that the proposed as well as the previous algorithms are less sensitive to the choice of parameter values as compared with the non-DR type algorithms considered in this paper. This is further confirmed in the next experiment, where we consider a situation when α is time varying.

In this experiment, we consider a standard SαS process with 
                        α
                        =
                        1.45
                      at the start-up of experiment, 
                        α
                        =
                        1.05
                      in the middle, and finally its value changes to 
                        α
                        =
                        1.65
                     . We have deliberately selected the initial and final segments to be a little different than considered in the previous experiments. Furthermore, in the middle segment the noise characteristics change to a strongly impulsive nature. The simulation parameters are selected to the same values as found in Case 1 for sake of sensitivity of various algorithms. The simulation results are presented in Fig. 9
                     . For the first section of noise source (
                        0
                        ≤
                        n
                        ≤
                        20
                        
                        000
                     ), we find a similar performance comparison as found in previous experiments. In the middle section (
                        20
                        
                        000
                        <
                        n
                        ≤
                        40
                        
                        000
                     ), when the noise source is strongly impulsive, the Sun's algorithm becomes unstable, the performance of NSS-FxLMS is severely degraded, and the DR-based algorithms keep the good performance. Fig. 10
                      shows the corresponding variation of Euclidean norm of the coefficient vector of the ANC filter for the same experiment. In the middle section of strongly impulsive scenario, we observe a smooth convergence in previous and proposed algorithm as compared with the NSS-FxLMS algorithm. In the previous algorithm, this convergence behavior is due to smoothing resulted by DR procedure as summarized in Table 2. In the case of proposed algorithm, the BNDR approach combined with MA filtering of the coefficient vector results in a similar performance as that of the previous method, and at a reduced computational cost. The results presented in Figs. 9 and 10 show that the proposed algorithm is robust enough to possible changes in the characteristics of the reference noise.

In actual practice, significant changes in the acoustic paths may be encountered due to, for example, movement of the noise source. In this experiment, we consider a situation when there is a sudden change in the characteristic of acoustic paths. At the start, the acoustic paths are same as considered in the previous experiments. At the middle of experiment, the acoustic paths are assumed to be suddenly perturbed to a new value. A change in the acoustic primary path 
                        P
                        (
                        z
                        )
                      is simulated by giving 2 sample right-circular shift to the impulse response of the original 
                        P
                        (
                        z
                        )
                     , and a change in the acoustic secondary path 
                        S
                        (
                        z
                        )
                      is simulated by giving a 3 sample right-circular shift to the impulse response of the original 
                        S
                        (
                        z
                        )
                     . The impulse responses of the original and perturbed impulse responses of 
                        P
                        (
                        z
                        )
                      and 
                        S
                        (
                        z
                        )
                      are shown in Fig. 11
                     , where only the first 64 samples are plotted to highlight the strong perturbation in the acoustic paths. The reference signal is modeled as a standard SαS process with 
                        α
                        =
                        1.45
                     , which is same as considered for 
                        0
                        ≤
                        n
                        ≤
                        20
                        
                        000
                      in experimental results shown in Figs. 9 and 10. The simulation parameters are adjusted to the same values as found previously. The simulation results for MNR, as being defined in (25), are shown in Fig. 12
                     , where jump at 
                        n
                        =
                        30
                        
                        000
                      indicates a perturbation in the acoustic paths. We observe that the performance of Sun's algorithm is heavily degraded at the occurrence of perturbation, where as the rest of the methods quickly re-converge to the same performance as before the perturbation. Furthermore, the performance comparison remains the same as before, i.e., the proposed algorithm gives as good convergence speed and noise reduction performance as by previous algorithm, and at a reduced computational cost.

@&#CONCLUSIONS@&#

In this paper, we have investigated a BNDR-based adaptive algorithm for ANC of impulsive noise sources. In the proposed algorithm the adaptation is done at two levels: (BNDR-based) gradient update of ANC filter 
                        W
                        (
                        z
                        )
                      (see Eqs. (19)–(24)), and MA filtering of the tap-weight vector (see Eq. (17)). In future, it would be very interesting to perform a theoretical analysis of the proposed algorithm, especially to find theoretical bounds for the parameter β in Eq. (17). The extensive computer simulations are carried out, which demonstrate that the proposed algorithm is very effective in providing ANC for impulsive noise source. It would be interesting yet very challenging to perform real-time experiments, and is left as a task for future work.

@&#ACKNOWLEDGEMENT@&#

Author would like to acknowledge anonymous reviewers for providing many critical comments and insightful suggestions on the original as wells as revised versions of manuscript. This has greatly improved the contents as well as presentation of the manuscript.

@&#REFERENCES@&#

