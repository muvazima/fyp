@&#MAIN-TITLE@&#The Vehicle Routing Problem with Simultaneous Pick-ups and Deliveries and Two-Dimensional Loading Constraints

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We introduce a problem generalizing previous VRPs with 2-D loading constraints.


                        
                        
                           
                           Memorization strategies are employed for keeping the CPU times in acceptable levels.


                        
                        
                           
                           Extensive computational results on well-known benchmark instances are reported.


                        
                        
                           
                           The proposed model promotes high loading space utilization throughout the routes.


                        
                        
                           
                           Item rearrangements along vehicle routes bring significant routing cost savings.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Logistics

Vehicle routing

Loading constraints

Simultaneous Pick-ups and Deliveries

Heuristics

@&#ABSTRACT@&#


               
               
                  We introduce and solve the Vehicle Routing Problem with Simultaneous Pick-ups and Deliveries and Two-Dimensional Loading Constraints (2L-SPD). The 2L-SPD model covers cases where customers raise delivery and pick-up requests for transporting non-stackable rectangular items. 2L-SPD belongs to the class of composite routing-packing optimization problems. However, it is the first such problem to consider bi-directional material flows dictated in practice by reverse logistics policies. The aspect of simultaneously satisfying deliveries and pick-ups has a major impact on the underlying loading constraints: feasible loading patterns must be identified for every arc traveled in the routing plan. This implies that 2L-SPD generalizes previous routing problem variants with two-dimensional loading constraints which call for one feasible loading per route. From a managerial perspective, the simultaneous service of deliveries and pick-ups may bring substantial cost-savings, but the generalized loading constraints are very hard to tackle in reasonable computational times. To this end, we propose an optimization framework which employs memorization techniques designed for the 2L-SPD model, to accelerate the solution methodology. To assess the performance of our routing and packing algorithmic components, we have solved the Vehicle Routing Problem with Simultaneous Pick-ups and Deliveries (VRPSPD) and the Vehicle Routing Problem with Two-Dimensional Constraints (2L-CVRP). Computational results are also reported on newly constructed 2L-SPD benchmark problems. Apart from the basic 2L-SPD version, we introduce the 2L-SPD with LIFO constraints which prohibit item rearrangements along the routes. Computational experiments are conducted to understand the impact of the LIFO constraints on the routing plans obtained.
               
            

@&#INTRODUCTION@&#

In the last years, advances both in optimization methodologies and computer systems allow researchers and practitioners to examine practical optimization problems which in the past were thought to be too complex to handle. One such research stream that has emerged in the logistics optimization literature is devoted to the analysis of problems which are aimed at effectively dispatching a fleet of vehicles and at the same time, ensuring that the transported items can be feasibly loaded into these vehicles. The problem introduced in the present study belongs to this class of integrated vehicle routing and loading problems. Briefly, the presented model, referred to as the Vehicle Routing Problem with Simultaneous Pick-Ups and Deliveries and Two Dimensional Loading Constraints (2L-SPD) calls for the generation of the optimal routes to fully satisfy the demand raised by a set of customers. The demand of each customer consists of two transportation requests: the first one is associated with a set of items that must be transported from the warehouse to the customer location, whereas the second request is associated with a set of items that must be transported from the customer location to the central warehouse. The items that are transported from and to the warehouse are considered rectangular and not stackable. Thus, 2L-SPD is aimed at generating feasible, two-dimensional, orthogonal loading patterns for the transported items carried by the produced route set.

The main innovative feature of the examined model, compared to previously introduced vehicle routing variants with loading constraints, lies in the fact that vehicles offer simultaneous pick-up and delivery service. This implies that the item sets carried along a route change drastically: delivery items are unloaded and additional pick-up items are loaded onto the vehicle. Thus, the loading feasibility must be examined for every arc traveled by the routes. On the contrary, previously introduced delivery models assume that the size of the item set carried by a vehicle monotonically decreases, so that the loading feasibility has to be tested, only when the corresponding vehicle leaves the warehouse fully loaded. As a result, previously examined delivery models with two-dimensional loading constraints can be regarded as a special case of 2L-SPD, when for all customers, the pick-up requests are set to an empty item set.

Regarding the routing characteristics, 2L-SPD is a generalization of the Vehicle Routing Problem with Simultaneous Pick-ups and Deliveries (VRPSPD) which calls for the optimal routes that simultaneously offer pick-up and delivery service, under one-dimensional loading constraints (Dell'Amico, Righini, & Salani, 2006; Subramanian, Uchoa, Pessoa, & Ochi, 2013a). Analogously, VRPSPD is a generalization of the basic version of the vehicle routing problem (VRP) which is aimed at producing the optimal delivery route set subject to one-dimensional capacity constraints.

As already stated, 2L-SPD belongs to the integrated vehicle routing and multi-dimensional packing problems which jointly call for the optimal route planning and feasible packing structures for the transported goods. The first such problem has been introduced by Iori, Salazar-Gonzãlez, and Vigo (2007) who examine a vehicle routing extension with two-dimensional loading constraints: vehicles are considered to deliver rectangular items (boxes, pallets) which are not stackable. This problem is referred to as the vehicle routing problem with two-dimensional loading constraints (2L-CVRP). Under 2L-CVRP, the minimum cost set of routes must be generated for the vehicle fleet. For each of these routes, a feasible orthogonal two-dimensional packing must be determined for the transported items. The authors present a branch-and-cut method for dealing with small-scale problems (up to 25 customers and 91 boxes). To solve larger-scale instances, researchers have proposed various metaheuristic solution strategies: A tabu search methodology has been developed by Gendreau, Iori, Laporte, and Martello (2008). Zachariadis, Tarantilis, and Kiranoudis (2009) have proposed a tabu search and guided local search hybridization for the routing aspects and a bundle of packing heuristics for the loading requirements. Fuellerer, Doerner, Hartl, and Iori (2009) have developed an ant colony optimization approach. Another tabu search-guided local search hybrid has been proposed by Leung, Zhou, Zhang, and Zheng (2011). Strodl, Doerner, Tricoire, and Hartl (2010) have proposed a 2L-CVRP solution method emphasizing on the development of efficient data structures for storing obtained loading feasibility information. More recently, Duhamel, Lacomme, Quilliot, and Toussaint (2011) have solved the 2L-CVRP by a greedy randomized adaptive search (GRASP) and evolutionary local search (ELS) solution approach, while Zachariadis, Tarantilis, and Kiranoudis (2013) have proposed a simple-structured local search methodology. The most recent works on the 2L-CVRP are due to Dominguez, Juan, and Faulin (2014) and Wei, Zhang, Zhang, and Lim (2015) who introduce a Variable Neighborhood Search method. An additional routing model with two-dimensional loading constraints has been introduced by Malapert, Guéret, Jussien, Langevin, and Rousseau (2008). The authors present a pick-up and delivery model which assumes that non-stackable rectangular items have to be transported between pairs of service locations. An additional class of integrated routing-packing models considers three-dimensional loading constraints. This model category is applicable for logistics applications where the transported boxes can be stacked one on top of the other. The first such study is due to Gendreau, Iori, Laporte, and Martello (2006). Their work introduces the vehicle routing problem with three-dimensional loading constraints (3L-CVRP) which generalizes 2L-CVRP by calling for feasible, three-dimensional loading arrangements. Additional requirements met in practice are examined: fragility constraints, stability rules for the transported cargo and easy unloading operations. Several metaheuristic developments have been proposed for the 3L-CVRP (Bortfeldt, 2012; Fuellerer, Doerner, Hartl, & Iori, 2010; Ruan, Zhang, Miao, & Shen, 2011; Tarantilis, Zachariadis, & Kiranoudis, 2009; Zhu, Qin, Lim, & Wang, 2012). A relevant model is due to Männel and Bortfeldt (2013). The latter work introduces a pickup and delivery problem where three-dimensional and stackable items are transported between customer locations. For a detailed list of vehicle routing models which explicitly deal with loading constraints, the interested reader is referred to the reviews of Iori and Martello (2010), Iori et al. (2013) and Perboli, Gobbato, and Perfetti (2014).

The purpose of the present paper is to formally introduce the 2L-SPD model. An efficient solution approach is developed and presented for the 2L-SPD. The proposed solution approach consists of two algorithmic components: one for the routing and one for the packing aspects. Both components are based on our algorithm presented for the 2L-CVRP (Zachariadis et al., 2013). However, they are extended to provide higher-quality solutions. In addition, we present a new original framework which combines the individual routing and packing components for efficiently dealing with the special requirements of the 2L-SPD model. We also present feasibility memory structures that have been specially designed for the 2L-SPD and drastically accelerate the search process. The overall 2L-SPD solution approach is a robust optimization methodology efficiently dealing with instances of hundreds of customers and items.

In addition to the basic 2L-SPD model, we introduce the 2L-SPD with LIFO constraints. Under the LIFO variant, item rearrangement along the routes is not allowed, so that the loading requirements become much tighter leading to lower area utilization.

To assess the effectiveness of both the routing and packing ingredients of our algorithm, computational results are reported on well studied VRPSPD and 2L-CVRP benchmark instances. Then, computational results are reported on newly constructed 2L-SPD test cases both for the basic 2L-SPD, as well as the LIFO constrained variant.

The remainder of the present paper is as follows: Section 2 presents in detail the examined problem and discusses its applicability for practical logistics operations. Section 3 describes the proposed 2L-SPD local search solution approach. This master local search algorithm makes use of two loading feasibility examination components which are described in Sections 4 and 5. Then, Section 6 provides the necessary methodological modifications for tackling the LIFO version of the 2L-SPD model. In Section 7, extensive computational results are reported for the VRPSPD, 2L-CVRP and 2L-SPD models. In addition, comparisons are made between the obtained results and the ones of previously published methodologies. Finally, Section 8 concludes the paper.

In this section, we present a formal description of the 2L-SPD model, followed by some 2L-SPD practical applications. Then, we introduce the 2L-SPD variant with LIFO constraints which prohibits rearrangement of items along the vehicle trips.

Let G = (V, A) be a complete graph where V = {0, 1,…, n} is the vertex set and A is the set of arcs (i, j) connecting every pair of distinct vertices. Each arc (i, j) ∈ A is associated with a cost cij
                         equal to the distance that must be traveled for moving from vertex i to vertex j. Vertex 0 represents the warehouse which acts as the base station of k homogeneous vehicles. Each vehicle has a maximum carrying weight equal to Q and a loading surface of length and width equal to L and W, respectively. Vertex set N = V\{0} corresponds to the customer set. With each customer i ∈ N, there are two associated item sets, namely Di
                         and Pi
                        . Set Di
                         corresponds to the items that must be delivered from the warehouse to the customer, whereas Pi
                         contains the items that must be picked-up from customer i and transported to the warehouse. All transported items are considered non-stackable. The total weight of item sets Di
                         and Pi
                         are equal to di
                         and pi
                        , respectively. The length and width dimensions of an item j ∈ Di
                         
∪ Pi
                        , (∀ i ∈ N) are denoted by lj
                         and wj
                        , respectively.

The 2L-SPD model calls for the production of the route set that minimizes the total travel distance. The routes are subject to the following constraints:

                           
                              a.
                              The size of the produced route set does not exceed k (at most one route assigned to each vehicle).

Each route starts from the warehouse visits customers and returns back to the warehouse.

Each customer is visited once by exactly one route.

The delivery and pick-up requests of each customer are fully satisfied.

The carrying weight of each vehicle does not exceed the maximum carrying weight Q at any point of the produced routes.

For each of the traveled arcs, there exists a feasible packing pattern for the transported items.

Constraint (e) corresponds to the classic one-dimensional constraint incorporated in most of the vehicle routing variants, whereas constraint (f) introduces the two-dimensional loading requirements of the 2L-SPD model. This constraint is aimed at developing feasible item arrangements under the following limitations:

                           
                              
                                 f.1
                              
                              All items are placed within the loading surface (no item exceeds the loading surface).

There is no pair of items that overlap each other.

All items are packed orthogonally (their length and width edges are parallel to the length and width edges of the vehicle loading surface).

At this point, we would like to distinguish between two distinct configurations of constraint f.3. The first configuration (Oriented) dictates that items must be loaded with fixed orientation, i.e. the length dimension of any item is parallel to the length dimension of the loading surface. The second configuration (Rotations) allows 90 degree rotations of items. Using a similar typology to the one of Fuellerer et al. (2009) for the 2L-CVRP, the Oriented version of 2L-SPD is denoted as 2|O|SPD, whereas the Rotations version is referred to as 2|R|SPD.

To better describe the model, we provide Fig. 1
                        , which illustrates an example solution for a 2L-SPD instance of one vehicle, three customers, five delivery and six pick-up items. Observe that one route has been designed for the single available vehicle. Along the route, the size of the transported item set does not monotonically decrease. Instead, some items are delivered to the customers visited and some items are picked-up to be transported back to the warehouse. Thus, feasible loading patterns must be identified for every arc traveled, to ensure that loading feasibility is guaranteed. This is the crucial difference of the 2L-SPD model compared to the 2L-CVRP one: Under the 2L-CVRP, all pick-up items sets are empty. Thus, the feasibility of the k fully loaded depot-adjacent arcs must be examined. In the case of the instance presented in Fig. 1 (k = 1), the only feasibility investigation would involve arc (0, 1). On the other hand, under the 2L-SPD model which considers non-empty pick-up item sets, feasible item loadings must be determined for each solution arc. This means that in the general case of n customers and k vehicle routes, n + k feasible two-dimensional packing arrangements must be determined for the transported items. For the example case (n = 3, k = 1), four loading patterns are identified, as depicted in Fig. 1.
                     

The 2L-SPD model is applicable in transportation activities, where bi-directional product flows between the warehouse and customers must be made, as dictated by reverse logistics policies. It covers cases where shipments correspond to items of various sizes which are considered non-stackable. This transportation scenario arises in the context of haul-away service offered by furniture and household appliance stores. Under this practice, the store is responsible for dispatching vehicles to deliver the purchased items to customers. In addition, the vehicles must also collect the items which customers require to dispose of. Another 2L-SPD application emerges in grocery store and supermarket networks, where goods must be replenished, while at the same time outdated products, empty pallets and roll cages must be gathered and sent to the warehouse for further processing and reuse. The aforementioned cases do not necessarily involve items of identical sizes: supermarkets may use large pallets for light products, such as paper and plastics, while bottles and food products are packed into smaller pallets, or roll cages to be easily handled when unloaded. Stacks of plastic boxes may also be used for fruits and vegetables. Another case where a mix of different pallet sizes can be used arises when networks consisting of retailers with different storage room characteristics are visited. In this context, small stores located in urban areas may prefer small and easily maneuverable pallets, whereas bigger stores located outside the city centers can use the standard sized pallets. In addition, to increase vehicle space utilization, empty stackable roll cages are folded and grouped together into shapes of various sizes in order to be sent back to the warehouse. Additional examples of 2L-SPD applications may involve cases where a customer requires either delivery or pick-up service, just as in the case of the Vehicle Routing Problem with Mixed Pick-ups and Deliveries (VRPMPD) which incorporates one-dimensional capacity constraints (Berbeglia, Cordeau, Gribkovskaia, & Laporte, 2007). For example, the distribution of products from a production site to a set of retailers and the concurrent collection of raw materials from suppliers located within the same geographic region to replenish the production site can be modeled by 2L-SPD. Depending on the type of the delivery and pick-up materials, the transported products may correspond to box stacks or pallets of various dimensions. In the same context, office and household furniture rental businesses need to dispatch their vehicles to jointly deliver and pick-up (or even replace) pieces of furniture to and from the service locations.

An important characteristic of the basic 2L-SPD model is that no LIFO constraint is considered. This implies that when the vehicle visits a service location, items must be repositioned inside the loading space, in order to complete the necessary loading and unloading operations. This is an analogous assumption with the one made by the Unrestricted version of the 2L-CVRP which allows items (pallets) repositioning when the vehicle visits service locations. The time required for handling such item repositioning is compensated by the simultaneous service of two transportation request types (distribution/collection) which increases the capacity utilization of vehicles and thus reduces unproductive “empty” mileage. The simultaneous delivery and pick-up service characteristic may involve drastic rearrangement of the transported items, thus service locations should offer sufficient resources (space for emptying the carrying load, forklifts or pallet jacks) to facilitate item repositioning. Finally, since radical rearrangements of the transported pallets take place, the 2L-SPD model is best suited for light and medium duty trucks typically used in city logistics operations. It is not practical, for example, to repeatedly unload and reload the 30–40 pallets carried by heavy duty trucks along their service trips.

To tackle the transportation scenario where item repositioning is either prohibited (due to item sensitivity) or should be avoided (fast loading and unloading operations must take place), the basic 2L-SPD model can be extended to incorporate LIFO constraints. These constraints, also referred to as Sequence constraints (Iori et al., 2007), ensure that the loading and unloading of every item is directly performed without being necessary to reposition any other item onboard. Under the LIFO version of the basic 2L-SPD model, in addition to the loading constraints f.1–f.3, two extra constraints are taken into account:

                           
                              
                                 f.4
                              
                              No item is positioned between any delivery item i and the loading door of the vehicle, when item i is unloaded from the vehicle (unloading without rearrangements).

No item is positioned between any pick-up item i and the loading door of the vehicle, when item i is loaded into the vehicle (loading without rearrangements).

Prohibiting item repositioning has the following impact on the underlying loading constraints: contrary to the basic 2L-SPD model, where a feasible loading structure must be determined for every route arc, when the LIFO constraints are taken into account, the decision maker has to determine one loading position for every transported item (delivery or pick-up). From another viewpoint, two feasible packing structures must be defined: the first one for all delivery items and the second one for all pick-up items. Obviously, these two loading structures must ensure that the LIFO requirements are satisfied. The loading structures for intermediate points in the route can be regarded as the union of these two loadings by subtracting all items which have been delivered and all items which have not yet been picked-up. We examine two configurations for the LIFO version of 2L-SPD: 2|O|SPD-L which considers fixed item orientation and 2|R|SPD-L which allows item rotations of 90 degree.

The 2L-SPD model is a very challenging problem which can be regarded as the union of two NP-hard combinatorial optimization models: one for the routing aspects (Vehicle Routing Problem) (Laporte, 2009), and one for the two-dimensional loading requirements (Two-Dimensional Bin Packing Problem) (Lodi, Martello, & Monaci, 2002). To solve the 2L-SPD in reasonable computational times, we make use of a master local search framework described in the present Section. The local search algorithm makes use of the route loading feasibility examination procedures which are thoroughly presented in Section 4.

Our master 2L-SPD approach is a two-stage method. In the first stage, a fast constructive heuristic (Section 3.1) is employed for building an initial 2L-SPD solution. This solution is composed by feasible 2L-SPD routes, however it may be partial or complete, in the sense that it may not serve all customer requests. This initial solution is fed to the algorithm's second stage which constitutes the core of the proposed optimization approach (Section 3.2).

A set of k empty routes is initialized and a randomly chosen radius originating from the warehouse is defined. Customers are sorted in increasing order of the angle formed by the random radius and the customer locations. Then, customers are iteratively selected to be inserted to the routes available. At each iteration, we examine all possible insertion positions. The customer is inserted into the solution point which is both feasible and minimizes the additional routing cost. Note that the loading feasibility of tentative routes is determined with the use of the route loading procedure presented in Section 4, which in turn calls the packing heuristic of Section 5. These calls to the packing heuristic have been designed to be as fast as possible: only one attempt (light packing mode) is applied for building a feasible packing arrangement (this will be clarified in Sections 4 and 5, where the loading feasibility examination is described). If for any customer, no feasible insertion position is identified, this customer remains unserved. The iterative procedure terminates when trial insertions have been examined for all customers.

The proposed solution approach is based on our previous work on the 2L-CVRP (Zachariadis et al., 2013), extended to efficiently deal with the increased number of loading sub-problems that must be solved in order to decide on the feasibility of a vehicle route. It employs a blend of three local search operators for moving between solutions. To diversify the search, a simple-structured scheme based on the aspiration criteria of tabu-search is employed.

A blend of three local search operators is applied, namely the 1-0 exchange, 1-1-exchange and 2-opt.


                           1-0 Exchange (Customer Relocation): A move defined by the 1-0 exchange operator removes a customer from its current service position and reinserts this customer into any other solution position. In the general case, a 1-0 exchange move replaces three solutions arcs of the candidate solution. This operator is employed both within a route and between any route pair.


                           1-1 Exchange (Customer Swap): A move defined by the 1-1 exchange operator swaps the service positions of any pair of customers of the candidate solution. In the general case, four solution arcs are replaced. Moves defined by the 1-1 operator are employed both within a single route, as well as between any route pair.


                           2-opt: A move defined by the 2-opt operator replaces any pair of arcs that is included in the candidate solution. A different solution modification mechanism is followed according to whether the move is applied within a single route or between a route pair: If the 2-opt move is performed within a route, two route customers are selected and the path between these selected customers is reversed. If the 2-opt move is performed between a route pair, both routes are divided into an initial and a terminating segment. The starting segment of the first route is connected to the terminating segment of the second route and vice versa. Any combination of route division points is considered. This inter-route operator is commonly referred to as 2-opt*.

As with most local search implementations, the required computational burden mainly depends on the evaluation of the neighborhood structures defined by the employed local search operators. To accelerate this decisive aspect of the proposed approach, we use the concept of Static Move Descriptors (SMD). The basic principle of the SMD strategy is that every tentative local search move defined by the employed operators is statically encoded into an SMD instance. This SMD instance encodes the structural modification of the corresponding local search move. In addition, it includes the objective function change that this move would cause, if applied to the candidate solution. Each time a move is applied to a candidate solution, a limited subset of the solution characteristics is modified. Thus, only the subset of the SMD instances which are related to this modified solution part needs to be re-evaluated according to the modified solution state. The remaining SMD instances stay valid, so their cost recalculation is redundant. Using the SMD concept, redundant local search cost recalculations are eliminated. For more details, the interested reader is referred to the article of Zachariadis and Kiranoudis (2010) where the SMD strategy was originally introduced.

Except for the objective change information, the SMD instances have been designed to include the loading feasibility status of the encoded local search moves. This allows the algorithm to eliminate any redundant calls to the time consuming loading feasibility procedures of Sections 4 and 5. This aspect will be thoroughly described in Section 4 (Level 1), where the loading feasibility of local search moves is discussed.

The proposed local search exhaustively explores the solution neighborhoods defined by the local search operators and implements the move which incurs the minimal objective function change. This move selection criterion entraps the algorithm in the first local optimum (in respect to the local search operators) encountered. To avoid this situation and induce additional diversification in the search process, we make use of a mechanism which effectively filters out cycling causing local search moves. The proposed scheme is inspired by the aspiration criteria used in tabu-search implementations. It associates a cost tag with each problem arc. Let pi
                            denote the tag of arc i ∈ A. In addition, let Em
                            and Cm
                            denote the solution arcs to be eliminated and created, respectively, if local search move m is applied to the candidate solution. When move m is applied to a candidate solution S of cost z(S), the cost tag of each of the eliminated arcs is set equal to the objective function of solution S (pi
                            = z(S), ∀ i ∈ Em
                           ). During later stages of the search, a move m is allowed to be applied to a solution S for generating S′, if and only if the objective of the tentative solution S′ improves the cost tags of all the arcs to be created (pi
                            > z(S′), ∀i ∈ Cm
                           ). To control the diversification effect caused, the cost tags of the solution arcs are initialized to +∞ every φ main algorithmic iterations (pi
                            = +∞, ∀i ∈ Α). After preliminary experiments, we have set φ = (n/2) for which a satisfactory performance was observed. The employed diversification component can be seen as a variation of the Attribute Based Hill Climber (ABHC) (Whitley & Smith, 2004) with the following two main differences: (a) the threshold tag for each arc is the objective of the last solution using this arc, whereas under the ABHC, the arc threshold tag is set to the score of the best solution using this arc; (b) a move is considered admissible, if all arc thresholds are satisfied, while ABHC allows a move to be performed, if only one arc threshold is met.

The core of the optimization procedure is fed with the initial 2L-SPD solution S
                        0 generated in Section 3.1, and the set of non-served customers U. Obviously, if the initial solution S
                        0 is complete, set U = Ø. The candidate solution S is set to be equal to S
                        0. Then, an iterative procedure is applied for performing structural modifications on the candidate solution. These modifications must satisfy the loading constraints of 2L-SPD. If the set of non-routed customers U is non-empty, each iteration tries to insert any not served customer into the candidate solution.

More specifically, each algorithmic iteration involves the sequential execution of the following steps:

                           
                              1.
                              The solution neighborhoods defined by the employed operators are exhaustively explored. For each operator, the move that respects the diversification scheme of Section 3.2.3, leads to the generation of feasible 2L-SPD routes and minimizes the objective change is identified. This step is performed by examining the SMD instances which encode the local search moves.

If any of the three moves improves the objective function of the candidate solution, the highest-quality of these moves is selected to be applied. If none of these moves is objective improving, one of them is selected randomly to be applied. Let m denote the selected local search move and S′ the solution to be obtained if m is applied.

The cost tags of the eliminated solution arcs are appropriately set (pi
                                  = z(S), ∀i ∈ Em
                                 ).

Move m is applied to the candidate solution. Thus, the candidate solution is set equal to S′.

The costs of the affected SMD instances are recalculated according to the updated solution S.

Any unserved customer contained in U is attempted to be feasibly inserted into any point of S.

Recall that each time φ iterations are executed, the arc cost tags are re-initialized. The overall procedure terminates after the completion of 50,000 iterations by returning the best complete solution generated through the search process.

At this point, we would like to mention that Step 1 is the most demanding regarding the required computational effort: The costs of tentative moves are efficiently retrieved from the corresponding SMD instances and the necessary checks regarding the adopted diversification scheme are straightforwardly performed in constant time. However, the loading feasibility investigation of tentative moves is a very complex task which must be appropriately designed, in order to be as fast as possible. A poor algorithmic design for this task practically makes the algorithm incapable of effectively tackling even small-scale 2L-SPD instances. The proposed procedure for examining the loading constraints for a local search move is analyzed in Section 4, which also presents the memory structures employed for recording obtained loading feasibility through the search process.

The evaluation of the loading feasibility of local search moves is the most time consuming task repeatedly executed through the 2L-SPD solution approach (Step 1 of Section 3.3). In the following, we provide an analytic description of the three employed examination levels for obtaining the loading feasibility status of a local search move. In addition, for each of these levels, the proposed memory components used for recording loading feasibility information and accelerating the search are presented.

We start by introducing the employed data structures and relevant notation:

                        
                           •
                           
                              m: the local search move whose loading feasibility is investigated.


                              z(m): the objective function change that this move incurs if applied to the candidate solution.


                              SMDm
                              : the SMD instance encoding local search move m.
                           


                              Rm
                              : the set of routes to be affected by move m. Note that |Rm
                              | = 1, if m is an intra-route move, whereas |Rm
                              | = 2 if m is an inter-route move.


                              RH: The hashtable used to record “strong” route loading feasibility examinations.


                              RHL: The hashtable used to record “light” route loading feasibility examinations.


                              AH: The hashtable used to record “strong” item packing feasibility examinations.


                              AHL: The hashtable used to record “light” item packing feasibility examinations.

We note that the terms “strong” and “light” are used to characterize the mode of the employed feasibility examination. The strong mode increases the probability of declaring a local search move feasible. It is used for objective improving local search moves. On the other hand, the light mode is considerably faster and it is used for non-cost improving moves. The feature that distinguishes these two modes is related to the maximal packing attempts (parameter μ) used for the calls to the packing heuristic of Section 5. This issue is further discussed when the third feasibility examination level is provided.

The first level of evaluating the feasibility of a local search move was briefly discussed in Section 3.2.2 where the SMD representation is presented. Each SMD instance contains two pieces of information: (a) a binary value representing if the encoded move was found to be feasible or not the last time it was checked, and (b) an integer value equal to the master algorithmic iterator, when this last feasibility check was performed (iterative procedure of Section 3.3). Thus, when a move m has to be examined regarding the loading constraints, the following steps are applied: we examine if the routes involved in Rm
                         have been modified since the last time that the loading feasibility of m was examined. Note that this is straightforwardly implemented by associating a counter with each route corresponding to the algorithmic iterator, when this route was last modified. If the routes of Rm
                         have remained unmodified, then the feasibility status of the examined move is directly retrieved from the binary flag contained in SMDm
                        . Otherwise, the steps of Level 2 are performed.

The second feasibility examination level is associated with the loading feasibility check of complete routes. Before we provide the tasks performed for examining the route loading feasibility, we present hashtable structures RH and RHL.

Each entry of the RH and RHL hashtables corresponds to the loading feasibility status of a route. The key of each entry corresponds to the string representation of a given route. To prepare this representation, the IDs of customers visited by these routes are concatenated and separated by a standard character (i.e. ‘*’). For example, the string representation of the route depicted in Fig. 1 is “1*3*2”. It is important to note that the sequence of customers remains as is. No sorting takes place, as the loading feasibility is determined for a given customer permutation (not combination). This is because each customer permutation defines a unique set of arcs for which the packing feasibility must be examined. The value of each entry corresponds to a binary flag indicating if this route has been found to be feasible or not. RH is responsible for storing the feasibility obtained by employing “strong” loading checks, whereas RHL is used to store feasibility information obtained by “light” loading checks.

Although the RH and RHL hashtables are designed to record feasibility information obtained by different modes of the loading examination procedures, their contents must conform to the following rules:

                           
                              1.
                              If a route is found to be feasible by any examination mode (strong or light), the corresponding information is kept in both RH and RHL.

If a route is found to be infeasible by the strong examination mode, the corresponding information is kept in both RH and RHL.

We point out that if a route is declared infeasible by a light examination, the corresponding entry is recorded in RHL. To be consistent with rule (1), if this route is re-examined via the strong examination mode and is found to be feasible, the corresponding entry is pushed in RH. The relevant entry stored in RHL is updated by changing the binary flag from false to true.

The second level for examining the feasibility of move m starts off by generating the string representation of the routes contained in Rm
                        . Then, two cases are distinguished according to z(m):

If z(m) < 0 (objective improving move), for each Rm
                         route, we check if the corresponding entry is contained in RH. If such entries exist, the loading status of the Rm
                         routes is retrieved directly from the corresponding hashtable values. If any route is found to be infeasible, move m is declared infeasible, whereas if all Rm
                         routes are found to be feasible, move m is declared feasible. If for any Rm
                         route, no relevant entry is contained in RH, then for this route, we have to evaluate the loading feasibility by moving to Level 3 and using the strong mode of loading examination.

If z(m) ≥ 0 (objective augmenting move), for each Rm
                         route, we retrieve the corresponding feasibility values contained in RHL, exactly as described for the RH hashtable. If for any Rm
                         route, no relevant entry is contained in RHL, then for this route, we have to evaluate the loading feasibility by moving to Level 3 and using the light loading examination mode.

The third loading feasibility level is related to the feasibility of the individual arcs contained in a route. Before we provide the tasks performed for examining the loading feasibility of route arcs, we present the hashtable structures AH and AHL.

Each entry of the AH and AHL hashtables corresponds to the loading feasibility status of a given set of items. The key of each entry is a string which indirectly defines an item set. Under the 2L-SPD model, transported item sets are the union of some customers’ delivery items and some customers’ pick-up items. Let us take a closer look at this: whenever a vehicle traverses an arc (i, j), it carries the pick-up items of customer i and all of its predecessors, and the delivery items of customer j and all of its successors. Thus, under the 2L-SPD model, any transported set of items may be fully described by two customer sets: one associated with the pick-up and one associated with the delivery service. This is the basic idea for preparing the string representation of a given item set: Both sets are individually sorted according the customer IDs. Then for each set a string representation is straightforwardly prepared by using a standard separator character (i.e. ‘*’). These two strings are then concatenated (the delivery string is placed first) and separated by another character (i.e. ‘-’). The resulting string fully describes the item set carried along an arc. Under the aforementioned rationale and for the example case of Fig. 1, the string representations of the four item sets are as follows: Arc (0,1): “1*2*3-”, Arc (1,3): “2*1-3”, Arc (3,2): “1-2*3” and Arc (2,0): “-1*2*3”. Regarding the sorting according to the customer IDs, this is applied because we are interested in the item combinations, so that the relative positioning of customers within the strings is irrelevant. The value of each AH and AHL entry corresponds to a binary flag indicating if the corresponding item set has been found to be feasible or not. AH is responsible for storing the feasibility obtained by employing the “strong” packing mode, while AHL is used to store feasibility information obtained by “light” packing checks.

Despite the fact that AH and AHL are designed to record loading feasibility obtained by different modes of the packing heuristic, their contents must conform to the following rules:

                           
                              1.
                              If for an item set, any packing heuristic mode (strong or light) generates a feasible loading pattern, the corresponding information is kept in both AH and AHL.

If for an item set, the strong mode of the packing heuristic cannot generate a feasible packing arrangement, the corresponding information is kept in both AH and AHL.

At this point, we note that if an item set is found infeasible by the light mode of the packing heuristic, the corresponding entry is recorded in AHL. If the same item set is re-examined by the strong examination mode and is found feasible, the corresponding entry is inserted in AH, whereas the corresponding entry in AHL is updated to indicate that the item set is feasible (entry value is set to true), to be consistent with rule (1).

Let r be the route that must be evaluated in terms of the 2L-SPD loading feasibility. In addition, let Ar
                         be the set of arcs traveled by route r. For each arc i ∈ Ar
                        , let Si
                         denote the set of transported items. In addition let 
                           
                              
                                 a
                                 i
                              
                              =
                              
                              
                                 ∑
                                 
                                    j
                                    ∈
                                    
                                       S
                                       i
                                    
                                 
                              
                              
                                 (
                                 
                                    
                                       w
                                       j
                                    
                                    ·
                                    
                                       l
                                       j
                                    
                                 
                                 )
                              
                              
                           
                         denote the total area of the item set Si
                        .

The procedure for evaluating the feasibility of a route r begins by sorting Ar
                         in decreasing order of the total area of the corresponding item sets (ai
                        ). In addition, an empty set H is initialized. Then, arcs are selected one by one and the following sequence of tasks is performed: Let i denote the selected arc. The string representation of the item set Si
                         is generated. If the “weak” examination mode is performed, the procedure checks if the packing feasibility of Si
                         is recorded in AHL. If this is the case, the packing feasibility is directly retrieved from AHL. If item set is found to be infeasible, the whole Level 3 procedure terminates by declaring route r infeasible. If no Si
                         entry exists in AHL, arc i is pushed in the set H. Under the “strong” examination mode, the aforementioned steps are followed, but the loading feasibility information is retrieved from hashtable AH.

If after this first arc pass, the H set is non-empty, this means that there are item sets whose loading feasibility could not been directly retrieved from the hashtable structures. For these arcs, the feasibility must be determined by the packing heuristic of Section 5. To do so, the H arcs are picked one-by-one in the order that they were pushed in H. Let i denote the selected arc. If the “weak” mode is used, then the heuristic of Section 5 is employed for the item set Si
                         using just a single packing attempt (μ = 1). On the contrary, if the “strong” mode is used, the heuristic is applied to the Si
                         items by performing up to 1000 packing attempts (μ = 1000). Note that the aspect of the maximum number of packing attempts is clarified in Section 5, where the packing heuristic is described. Obviously, the obtained packing information is appropriately recorded in hashtables AHL and AH. In addition, if for any arc, no feasible packing arrangement is found, route r is declared infeasible and the loading examination is terminated. Otherwise, if for every H arc, feasible packing arrangements for the corresponding item sets are identified, route r is considered feasible.
                     

The core of the 2L-SPD loading feasibility investigation consists of constructing feasible two dimensional orthogonal packings for given item sets. As already stated, a feasible packing structure must be identified for every solution arc, thus the task of identifying feasible arrangements for given item sets is repeatedly executed within the overall 2L-SPD solution approach. For this reason, the proposed two-dimensional packing procedure (hereafter called packing heuristic) was mainly designed for computational speed. The basic characteristic of our two-dimensional packing heuristic is that a series of attempts for feasibly packing every item is performed. Each attempt successively inserts items in the vehicle loading space. The proposed two-dimensional packing heuristic is based on the procedure employed for the 2L-CVRP (Zachariadis et al., 2013) extended to consider additional loading positions, as will be thoroughly described.

Each item can be inserted into a set of candidate loading positions. To designate these positions, we use a Cartesian coordinate system (w, l) defined by the edges of the loading surfaces. Let the origin of the axes (0, 0) corresponds to the backmost and leftmost position of the loading surface, whereas the vehicle loading door is defined by the linear segment originating at (0, L) and terminating at (W, L).
                     

The loading position set is updated according to the item insertions that take place, similarly to the extreme point procedure of Crainic, Perboli, and Tadei (2008). Specifically, when a packing attempt begins, the vehicle space is empty and the only loading position available is at position (0, 0). Each time an item is loaded into the surface, the corresponding insertion position is removed from the available position set. It is substituted by two loading positions which are generated in the left-front and right-back corners of the inserted item. Some additional positions are generated by employing the four mechanisms depicted in Fig. 2. The first three mechanisms were incorporated in our 2L-CVRP approach (Zachariadis et al., 2013), whereas the fourth mechanism extends this former method by offering additional placement positions. Briefly, the first mechanism applies the following rationale: when an item E is placed in a position, its right side is projected and a new position is created at the intersection of this projection with the nearest item placed behind E (position p3
                        ). Similarly, item's E front edge is projected and a new position (p1
                        ) is created at the intersection of this projection with the nearest item placed on the left side of E. Regarding the second mechanism, when an item C is inserted, we look for already placed items lying on the front side of C whose right side projections intercept the front side of C (item E). New placement positions are created on the intersection of these projections with the front side of C. Similarly, under the third mechanism, we look for already placed items lying on the right side of the inserted item D whose front side projections intercept the right side of D (item E). New placement positions are created on the intersection of these projections with the right side of D. Regarding the fourth mechanism, it is based on the envelope approach (2D-CORNERS) introduced by Martello, Pisinger, and Vigo (2000). It is used to define additional loading positions where the envelope of inserted items changes from vertical to horizontal. For the case depicted in Fig. 2, the new position is located at the intersection of the right edge projection of item D and the front edge projection of item B. This position would be missed by the first three mechanisms. Loading positions generated according to the envelope-based mechanism can be of major importance, especially when few items of significant size (relatively to the L and W dimensions) must be packed into the loading surface. Note that the four mechanisms of creating loading positions may lead to duplicate insertions positions. These duplicate positions are avoided by appropriate checks. In addition, loading positions contained in the areas occupied by inserted items are removed from the set of available insertion positions, as they cannot accommodate subsequent items.

As previously mentioned, the methodology for determining the loading feasibility of an item set performs a series of attempts to successively pack all items into the loading space. In general, these attempts should be aimed at building diverse packing arrangements to maximize the overall probability of obtaining a feasible complete loading pattern. To systematically promote the development of diverse patterns, we employ a memory mechanism for recording the frequency of encountered partial loadings. This memory component is implemented as a hashtable. The key of each hashtable entry encodes a specific packing arrangement, while the entry value gives the number of times that this arrangement has been developed through the packing heuristic. In terms of the hashtable keys, a straightforward procedure for mapping packing structures to strings has been followed. It extends the one presented in Zachariadis et al. (2013) by considering a binary flag to indicate if an item is rotated. Each string uses two standard separator characters: character ‘*’ separates individual item packing information, while character ‘-’ separates two distinct items. The general format of a string that encodes a packing of q items is (ID1
                        *pw1
                        *pl1
                        *r1
                        - … - IDq
                        *pwq
                        *plq
                        *rq
                        ), where IDi
                         (1 ≤ i ≤ q) denotes the unique identifier of the ith inserted object, pwi
                         and pli
                         denote its placement coordinates (back left corner) and binary ri
                         indicates if this item is rotated. The mapping between loadings and their string representation is depicted in Fig. 3. When character ‘R’ is reported next to the item ID, this implies that the item is rotated. Note that Fig. 3 illustrates the first packing attempt. This is why all hashtable values are set to 1. In subsequent packing attempts, if any of these partial packing patterns is re-encountered, the corresponding value will be augmented accordingly.

When the loading feasibility of an item set T has to be evaluated, the adopted packing heuristic performs a series of attempts for feasibly loading all items into the loading surface (Zachariadis et al., 2013). Each attempt is initiated by setting the set of available loading positions to {(0, 0)}. Then, an iterative procedure begins for successively inserting items into the loading surface. Each of these iterations consists of the four following steps:

                           
                              •
                              
                                 Step 1 – Identification of the optimal item insertion.


                                 Step 2 – Insertion of the item in the selected position.


                                 Step 3 – Management of the set of available loading positions.


                                 Step 4 – Update of the memory components used for recording the frequency of partial loadings.

In the following, we provide a brief description of each of these steps. This description makes use of the following notation: U denotes the non-loaded items, whereas P denotes the set of available loading positions. Set R corresponds to the set of rotation indices {0, 1}.


                        Step 1 – Identification of the optimal item insertion:
                     

Regarding the first step of identifying the optimal item-loading position-rotation index placement, it is responsible for deciding which item and where this item is going to be inserted. In addition it determines if the item is going to be inserted rotated or not. For each of the yet non-loaded items i ∈ U, rotation indices j ∈ R and feasible (satisfying all loading constraints) insertion positions k ∈ P, the following utility function is calculated:

                           
                              (1)
                              
                                 
                                    u
                                    
                                       (
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          k
                                       
                                       )
                                    
                                    =
                                    TP
                                    
                                       (
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          k
                                       
                                       )
                                    
                                    −
                                    λ
                                    ·
                                    M
                                    ·
                                    
                                    t
                                    
                                       (
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          k
                                       
                                       )
                                    
                                 
                              
                           
                        where t(i, j, k) denotes the number of times that the partial loading to be generated, if item i is placed according to the rotation index j in position k, has been encountered through all attempts of the packing heuristic. This value is retrieved from the hashtable structure presented in
Section 5.2
. In addition, λ is a binary parameter which controls the diversification of the packing arrangements, as will be discussed in the following and M is a large positive value. TP(i, j, k) denotes the total touching perimeter of item i with either already placed items or surface boundaries, if it is inserted in position k according to the rotation index j.

The insertion triplet item i – rotation index j – position k which maximizes the utility function (1) is selected to be applied. The proposed utility function extends the one presented in our previous study (Zachariadis et al., 2013) by allowing item rotations. It is made up by two terms: The first term is directly associated with the Maximum Perimeter heuristic (Lodi, Martello, & Vigo, 1999). The second term is used to diversify the obtained loading arrangements at each loading attempt. Binary parameter λ is used to control this diversification effect. At each iteration, if λ = 0 (probability d), the item-position-rotation index triplet is decided solely by the touching perimeter criterion. On the other hand, if λ = 1 (probability 1 - d), the item-position-rotation index triplet is decided according to the frequency of partial item arrangements. More specifically, the less frequent packing arrangements are promoted. Ties are broken with the use of the touching perimeter metric. Parameter d was fixed at 0.25, as preliminary experiments indicated that the packing heuristic has better chances of generating feasible loadings when diverse packing arrangements are explored.


                        Step 2 – Insertion of the item in the selected position:
                     

The selected item is removed from the set of non-loaded items U and inserted into the selected insertion position according to the selected rotation index.


                        Step 3 – Management of the set of available loading positions:
                     

Depending on the insertion implemented in the previous step, the set of available loading positions is modified according to the mechanisms presented in Section 5.1.


                        Step 4 – Update of the memory components used for recording the frequency of partial loadings:
                     

The hashtable structure presented in Section 5.2 is updated according to the partial loading pattern obtained after the item has been appropriately placed into the selected loading position.

If during Step 1, for any item no feasible position is identified, this implies that the current packing attempt cannot produce a feasible loading arrangement. Thus, the present packing attempt is aborted, the loading surface is emptied and the next packing attempt is employed from the beginning. Of course, the hashtable structure remains unmodified, as all packing attempts are interconnected by the information stored in the hashtable.

The overall packing heuristic is terminated in two distinct cases: If a complete feasible loading structure is identified, the examined item set T is declared feasible. Otherwise, if a maximum number of μ unproductive loading attempts are performed, the heuristic terminates by declaring the examined item set Τ infeasible. As already stated in Section 4, the light mode of the packing heuristic employs just a single packing attempt (μ = 1), while under the strong heuristic mode, up to 1000 packing attempts are performed (μ = 1000).

To tackle the 2L-SPD model with LIFO constraints, we apply the master algorithmic framework presented in Section 3. Obviously, the altered loading constraints require some relevant modifications on the procedures for examining the feasibility of tentative moves and packing constraints for a given item set, which are presented in Sections 4 and 5, respectively. The basic rationale of the heuristic procedure designed to deal with the LIFO version of the 2L-SPD is that the vehicle space is divided in two separate corridors (compartments): one for the delivery and one for the pick-up items. Within each of these compartments feasible loading structures must be determined taking into account the LIFO requirements of the problem.

The first two levels of feasibility investigation are performed exactly as described for the basic 2L-SPD version. The third level is completely modified as a result of the different loading constraints. More specifically, for a given route rt, we need to determine one feasible loading arrangement for the delivery items and one for the pick-up items of this route. Let Crt
                         denote the set of customers contained in route rt. In addition, let 
                           
                              
                                 D
                                 
                                    r
                                    t
                                 
                              
                              =
                              
                                 ∪
                                 
                                    i
                                    ∈
                                    
                                       C
                                       
                                          r
                                          t
                                       
                                    
                                 
                              
                              
                                 D
                                 i
                              
                           
                         and 
                           
                              
                                 P
                                 
                                    r
                                    t
                                 
                              
                              =
                              
                                 ∪
                                 
                                    i
                                    ∈
                                    
                                       C
                                       
                                          r
                                          t
                                       
                                    
                                 
                              
                              
                                 P
                                 i
                              
                           
                         denote the delivery, and pick-up items carried along this route respectively. In addition, let 
                           
                              D
                              
                                 r
                                 t
                              
                              
                                 ′
                                 ′
                              
                           
                         be the subset of Drt
                         items that are delivered before the first pick-up item is loaded onto the vehicle. Then, 
                           
                              
                                 D
                                 
                                    r
                                    t
                                 
                                 ′
                              
                              =
                              
                                 D
                                 
                                    r
                                    t
                                 
                              
                              
                                 ∖
                              
                              
                                 D
                                 
                                    r
                                    t
                                 
                                 
                                    ′
                                    ′
                                 
                              
                           
                         corresponds to the set of delivery items which will be onboard together with some pick-up items of the route. Analogously, let 
                           
                              P
                              
                                 r
                                 t
                              
                              
                                 ′
                                 ′
                              
                           
                         denote the pick-up items to be collected from the service points after the last delivery item of the route has been unloaded. 
                           
                              
                                 P
                                 
                                    r
                                    t
                                 
                                 ′
                              
                              =
                              
                                 P
                                 
                                    r
                                    t
                                 
                              
                              
                                 ∖
                              
                              
                                 P
                                 
                                    r
                                    t
                                 
                                 
                                    ′
                                    ′
                                 
                              
                           
                         is the set of pick-up items that co-travel with some of the delivery items of 
                           
                              D
                              
                                 r
                                 t
                              
                              ′
                           
                        .

As already stated, the proposed procedure for investigating the loading feasibility for the LIFO 2L-SPD version is aimed at loading the delivery and pick-up items in two distinct corridors of the vehicle loading surface. These corridors are formed by means of a separating line parallel to the L dimension of the loading surface. Precisely, the delivery corridor is defined as the rectangular area embraced by boundary points (0, 0), (WD
                        , 0), (WD, L) and (0, L). Consequently the pick-up corridor corresponds to the remaining loading surface area, defined by points (WD
                        , 0), (W, 0), (W, L) and (WD, L). To calculate WD
                        , or in other words the width of the corridor dedicated for the delivery items, we use the following steps. Firstly, we calculate λD
                         = 
                           
                              
                                 ∑
                                 
                                    j
                                    ∈
                                    
                                       D
                                       
                                          r
                                          t
                                       
                                    
                                 
                              
                              
                                 (
                                 
                                    w
                                    j
                                 
                                 ·
                                 
                                    l
                                    j
                                 
                                 )
                              
                              
                              /
                              
                              
                                 ∑
                                 
                                    j
                                    ∈
                                    
                                       D
                                       
                                          r
                                          t
                                       
                                    
                                    ∪
                                    
                                       P
                                       
                                          r
                                          t
                                       
                                    
                                 
                              
                              
                                 (
                                 
                                    w
                                    j
                                 
                                 ·
                                 
                                    l
                                    j
                                 
                                 )
                              
                           
                        . In addition, we compute 
                           
                              
                                 w
                                 
                                    m
                                    i
                                    n
                                 
                                 D
                              
                              =
                              m
                              a
                              
                                 x
                                 
                                    j
                                    ∈
                                    
                                       D
                                       
                                          r
                                          t
                                       
                                       ′
                                    
                                 
                              
                              
                                 {
                                 
                                    w
                                    j
                                 
                                 }
                              
                           
                         and 
                           
                              
                                 w
                                 
                                    m
                                    i
                                    n
                                 
                                 P
                              
                              =
                              m
                              a
                              
                                 x
                                 
                                    j
                                    ∈
                                    
                                       P
                                       
                                          r
                                          t
                                       
                                       ′
                                    
                                 
                              
                              
                                 {
                                 
                                    w
                                    j
                                 
                                 }
                              
                           
                        . These dimensions correspond to the absolute minimal width required for accommodating the delivery and pick-up items, respectively. Note that if rotations are allowed, these dimensions are obtained as 
                           
                              
                                 w
                                 
                                    m
                                    i
                                    n
                                 
                                 D
                              
                              =
                              m
                              a
                              
                                 x
                                 
                                    j
                                    ∈
                                    
                                       D
                                       
                                          r
                                          t
                                       
                                       ′
                                    
                                 
                              
                              
                                 {
                                 
                                    m
                                    i
                                    n
                                    (
                                    
                                       
                                          w
                                          j
                                       
                                       ,
                                       
                                          l
                                          j
                                       
                                    
                                    )
                                 
                                 }
                              
                           
                         and 
                           
                              
                                 w
                                 
                                    m
                                    i
                                    n
                                 
                                 P
                              
                              =
                              m
                              a
                              
                                 x
                                 
                                    j
                                    ∈
                                    
                                       P
                                       
                                          r
                                          t
                                       
                                       ′
                                    
                                 
                              
                              
                                 {
                                 
                                    m
                                    i
                                    n
                                    (
                                    
                                       
                                          w
                                          j
                                       
                                       ,
                                       
                                          l
                                          j
                                       
                                    
                                    )
                                 
                                 }
                              
                           
                        , respectively. Four cases may arise: if 
                           
                              
                                 w
                                 
                                    m
                                    i
                                    n
                                 
                                 D
                              
                              +
                              
                                 w
                                 
                                    m
                                    i
                                    n
                                 
                                 P
                              
                              >
                              W
                           
                        , the examined route is declared infeasible. If 
                           
                              
                                 λ
                                 D
                              
                              W
                              ≥
                              
                                 w
                                 
                                    m
                                    i
                                    n
                                 
                                 D
                              
                           
                         and 
                           
                              
                                 (
                                 
                                    1
                                    −
                                    
                                       λ
                                       D
                                    
                                 
                                 )
                              
                              W
                              ≥
                              
                                 w
                                 
                                    m
                                    i
                                    n
                                 
                                 P
                              
                           
                        , then WD
                         ← λDW. If 
                           
                              
                                 λ
                                 D
                              
                              W
                              <
                              
                                 w
                                 
                                    m
                                    i
                                    n
                                 
                                 D
                              
                           
                        , then 
                           
                              
                                 W
                                 D
                              
                              ←
                              
                                 w
                                 
                                    m
                                    i
                                    n
                                 
                                 D
                              
                           
                        . Otherwise (if 
                           
                              
                                 (
                                 
                                    1
                                    −
                                    
                                       λ
                                       D
                                    
                                 
                                 )
                              
                              W
                              <
                              
                                 w
                                 
                                    m
                                    i
                                    n
                                 
                                 P
                              
                           
                        ), 
                           
                              
                                 W
                                 D
                              
                              ←
                              W
                              −
                              
                                 w
                                 
                                    m
                                    i
                                    n
                                 
                                 P
                              
                           
                        . After the delivery and pick-up corridors have been defined, the method tries to feasibly load all delivery and pick-up items in the vehicle. More specifically, for the delivery items, the proposed feasibility procedure employs the following tests: The loading feasibility of packing the Drt
                         items in the delivery corridor is examined with the use of the packing heuristic method presented in Section 5. If the Drt
                         items cannot be feasibly placed in the delivery corridor, the method tries to accommodate the 
                           
                              D
                              
                                 r
                                 t
                              
                              ′
                           
                         items in the delivery corridor and the 
                           
                              D
                              
                                 r
                                 t
                              
                              
                                 ′
                                 ′
                              
                           
                         items in the pick-up corridor via the packing heuristic. If no feasible loading arrangement is identified, route rt is declared feasible. If all delivery items are feasibly loaded onto the vehicle, then the method precedes by examining the loading feasibility of the pick-up items. More specifically, the packing heuristic is applied to feasibly load all Prt
                         items onto the pick-up corridor. If no feasible loading structure can be obtained, the method tries to load the items of 
                           
                              P
                              
                                 r
                                 t
                              
                              ′
                           
                         onto the pick-up corridor of the loading surface and the items of 
                           
                              P
                              
                                 r
                                 t
                              
                              
                                 ′
                                 ′
                              
                           
                         onto the delivery corridor. If both items sets are feasibly packed, then route rt is deemed feasible. Otherwise, route rt is considered infeasible. Note that under the LIFO version of 2L-SPD, the employed packing heuristic corresponds to the one presented in Section 5, modified for tackling the LIFO requirements. These methodological modifications are discussed in the next paragraph.

The packing heuristic used for examining the loading feasibility for a given item set employs the same rationale, as presented in Section 5. However, it is slightly modified, in terms of Step 1. More specifically, the heuristic is tuned to ensure that the LIFO constraints are effectively tackled. This means that when the set of delivery items are packed, the items that are unloaded first should be placed near the unloading door, whereas the pick-up items that are collected early on the route should be pushed back onto the loading space. To do so, the utility function (1) employed for selecting the box - placement position – rotation index triplet is modified as follows:

                           
                              (2)
                              
                                 
                                    u
                                    
                                       (
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          k
                                       
                                       )
                                    
                                    =
                                    TP
                                    
                                       (
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          k
                                       
                                       )
                                    
                                    −
                                    λ
                                    ·
                                    
                                       M
                                       1
                                    
                                    ·
                                    t
                                    
                                       (
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          k
                                       
                                       )
                                    
                                    +
                                    
                                       M
                                       2
                                    
                                    ·
                                    
                                    
                                       v
                                       i
                                    
                                    .
                                 
                              
                           
                        
                     

Note that (2) augments (1) by the term Μ2⋅vi
                        , where Μ2 is a large positive value for which Μ1 >> Μ2 and vi
                         is the visit order of item i. If delivery items are packed, vi
                         corresponds to the position of the customer associated with item i in the route involved. On the contrary, if the packing heuristic is applied for pick-up items, vi
                         is set equal to the opposite customer position in the route. This is because, for the delivery items, items unloaded late on the route should be placed first (pushed back in the loading surface). The same applies for pick-up items collected early on the route. Obviously, a combination of placement position and rotation status is considered feasible for an item, only if the LIFO constraints f.4 and f.5 introduced in Section 2.2 are satisfied.

The proposed solution approach was tested on new 2L-SPD instances which were derived from the well-known 2L-CVRP benchmark problems. Due to the fact that this is the first time that an algorithmic solution is applied to 2L-SPD, we have also performed additional experiments on the 2L-CVRP and VRPSPD models. These experiments are aimed at building confidence on the reliability and effectiveness of our revised routing and packing components.

All experiments were executed on a computer system equipped with an Intel Xeon E5-2650 v2 (2.6 gigahertz) processor and 16 gigabytes of RAM. The 2L-SPD methodology, hereafter referred to as LS-2LSPD, was implemented in C# and ran as a single core process. All 2L-SPD test instances and relevant analytic solutions are available at http://users.ntua.gr/ezach/.

The new 2L-SPD instances were derived from the 2L-CVRP test cases introduced by Gendreau et al. (2008). They involve 36 graphs consisting from 15 up to 255 customers. For each of these graphs, four classes (Classes 2–5) of item characteristics are considered. The higher the class index, the more and smaller items are involved in the benchmark instance.

To derive the new 2L-SPD instances the following rationale was used: Each item of the original 2L-CVRP instance was randomly designated as a delivery or a pick-up item. To promote the generation of challenging 2L-SPD instances, we used a 50/50 probability. This implies that comparable pick-up and delivery quantities are transported, so that the utilization of the vehicle space stays high along the vehicle routes which in turn makes more difficult to examine the 2L-SPD solution feasibility. In terms of the one-dimensional delivery and pick-up weight attribute, we used the following rule: let qi
                         denote the original delivery weight attribute for each customer i ∈ N in the original instances. In addition, let 
                           
                              a
                              
                                 d
                                 i
                              
                              =
                              
                                 ∑
                                 
                                    j
                                    ∈
                                    
                                       D
                                       i
                                    
                                 
                              
                              
                                 (
                                 
                                    
                                       w
                                       j
                                    
                                    ·
                                    
                                       l
                                       j
                                    
                                 
                                 )
                              
                           
                         and 
                           
                              
                                 a
                                 i
                              
                              =
                              
                                 ∑
                                 
                                    j
                                    ∈
                                    
                                       D
                                       i
                                    
                                    ∪
                                    
                                       P
                                       i
                                    
                                 
                              
                              
                                 (
                                 
                                    
                                       w
                                       j
                                    
                                    ·
                                    
                                       l
                                       j
                                    
                                 
                                 )
                              
                           
                         denote the total area of the delivery items and the total area of both the pick-up and delivery items of customer i ∈ N, respectively. The original weight attribute qi
                         was translated to a couple of attributes 
                           
                              
                                 d
                                 i
                              
                              =
                              
                                 ∥
                                 
                                    
                                       (
                                       a
                                       
                                          d
                                          i
                                       
                                       /
                                       
                                          a
                                          i
                                       
                                       )
                                    
                                    ·
                                    
                                       q
                                       i
                                    
                                 
                                 ∥
                              
                              
                           
                         and 
                           
                              
                                 p
                                 i
                              
                              =
                              
                                 q
                                 i
                              
                              −
                              
                                 d
                                 i
                              
                           
                        , representing the total weight of the delivery and pick-up items of customer i ∈ N, respectively. Table A.1 provides a summary of the new 2L-SPD instances.

An additional class of new test problems were constructed and solved for the LIFO version of the 2L-SPD model. They are derived from the 2L-SPD instances of Classes 4 and 5 with up to 100 customers. Some necessary changes were made on the item sets, the one-dimensional delivery and pick-up order levels, as well as the characteristics of the available vehicle fleets, to ensure that the resulting test cases are both feasible and not trivial. The complete characteristics of these instances are reported in Table A.2.

As already mentioned, the 2L-CVRP model was solved to gain insight on the effectiveness of our revised routing and packing components. More specifically, we examined: The Oriented configuration (2|UO|L), which considers that items must be placed with their l- and w-dimensions parallel to the L- and W-dimensions of the loading space, the Rotations configuration (2|UR|L), which considers that items may be rotated by 90 degree.

Each of the 144 instances was solved 10 times. The obtained results for each instance are summarized in Table A.3. More specifically, for each instance, we report the average and best solution score over the 10 runs, the average computational time for obtaining the final solutions of the 10 runs and the percent gap between our best and average solution scores. The proposed method exhibits a rather robust performance: the average percent gaps between our best and average scores over the 10 runs are limited to 0.45 percent, 0.36 percent, 0.34 percent and 0.27 percent for Classes 2, 3, 4 and 5, respectively. In general, the larger the scale of the instances, the higher the percent gaps observed. More specifically, the highest gaps for Classes 2, 3, 4 and 5 were observed for instances 33 (1.48 percent), 29 (2.16 percent), 28 (1.42 percent) and 29 (0.92 percent), respectively. Concerning the average CPU time required for obtaining the final solution of each of the 10 runs, they averaged from 316.7 seconds for Class 2 up to 409.8 for Class 5. This is because the higher the Class index, the greater the number of items involved in the test problems and thus the more computational time is spent for running the packing heuristic procedure. The computational times required by the proposed solution approach are deemed acceptable, jointly taking into account the complexity of the examined model, the large scale of the test instances and the high-quality solutions produced. Table A.4 provides the best known solution score (BKS) and the percent gap between our best and the BKS value. We note that the BKS scores are taken by the works of Dominguez et al. (2014), Duhamel et al. (2011), Leung et al. (2011), Zachariadis et al. (2013) and Wei et al. (2015). Our method produced solutions of fine quality. In total, 12 new best solutions were generated (four for Class 2, six for Class 3, two for Class 4). In addition, our method matched the best solution scores for 56 test cases (16 for Class 2, 14 for Class 3, 13 for Class 4 and 13 for Class 5). Note that some minor reported discrepancies (±0.01) on the reported solution scores may be caused by different rounding schemes. On average, our solution scores are just 0.21 percent higher than the BKS scores (0.08 percent for Class 2, 0.12 percent for Class 3, 0.30 percent for Class 4 and 0.36 percent for Class 5).

Our algorithm scores (both best and average solution values) are compared to previously published methodologies in Table 1
                           , where averaged values over Classes 2–5 are reported. The algorithms considered are: (1) the GRASP approach of Duhamel et al. (2011) – AMD Opteron (2.1 gigahertz), (2) the PRMP metaheuristic of Zachariadis et al. (2013) - Intel Core 2 Duo E6600 (2.4 gigahertz), and (3) the VNS method of Wei et al. (2015) - Intel Xeon E5430 (2.66 gigahertz). Note that the results of Dominguez et al. (2014) are not provided, because the authors have only solved a limited subset of the benchmark instances for the 2|UO|L configuration. We observe that our solution method exhibits a very competitive and robust performance. In terms of the average solution scores over 10 runs, LS-2LSPD improves our previous metaheuristic (PRMP) by 0.14 percent, whereas the VNS methodology produces solution values which are on average 0.22 percent better than the LS-2L-SPD ones. Regarding the best solution values obtained over the 10 algorithmic runs, LS-2LSPD improves both the GRASP and PRMP scores by 0.81 percent and 0.21 percent, respectively. The VNS methodology produces slightly better best solutions (by 0.09 percent on average). Concerning the computational times, it is not our intention to perform a detailed comparison because the presented algorithms have been executed on very different conditions (processors, OS, RAM, programming languages, etc.). Briefly and regarding the two most effective algorithms, LS-2LSPD and VNS appear to require comparable computational effort. The LS-2LSPD method generated the final solutions in shorter computational periods than the VNS method (LS-2LSPD: 6.2 minutes, VNS: 14.5 minutes). However, the LS-2LSPD runs were performed on a faster processor (LS-2LSPD: Intel Xeon E5-2650 v2 – 2.6 gigahertz, VNS: Intel Xeon E5430 – 2.66 gigahertz).

Each of the 144 instances was solved 10 times under the 2|UR|L configuration. The results are summarized in Table A.5. Our algorithm exhibits a rather stable performance, as the average gap between the best and average solution scores over the 10 runs is limited to 0.33 percent, 0.39 percent, 0.38 percent and 0.34 percent for Classes 2, 3, 4 and 5, respectively. The computational times required for obtaining the final solution of each run are slightly increased compared to the configuration that does not accept item rotations. On average, the CPU time elapsed when the final solution of each run was generated is equal to 347.0 seconds, 364.2 seconds, 469.5 and 473.7 seconds for Classes 2, 3, 4 and 5, respectively.

The best LS-2LSPD scores are compared against the best known solution values in Table A.6. We observe that LS-2LSPD managed to match or improve the majority of the previously best known 2|UR|L solution scores. More specifically, our method improves 79 and matches 58 BKS scores, respectively. Note that some minor reported discrepancies (±0.01) may be caused by different rounding schemes. The average BKS improvement is equal to 0.75 percent (Class 2: 0.42 percent, Class 3: 0.73 percent, Class 4: 1.11 percent, Class 5: 0.75 percent), ranging up to a significant 4.67 percent for test problem 28 of Class 4.

In addition, to compare our algorithm with previously published methods when item rotations are allowed, we provide Table 2
                           . Our method is compared against the Ant Colony Optimization (ACO) algorithm of Fuellerer et al. (2009) and the multi-start biased-randomized (MS-BR) method of Dominguez et al. (2014). The ACO values are available at http://prolog.univie.ac.at/research/VRPandBPP/. They were obtained by the 3-hour ACO run which was executed on an Intel Pentium IV, 3.2 gigahertz. The MS-BR algorithm was executed on an Intel Core 2 (2.4 gigahertz) processor. The scores are reported in
Dominguez et al. (2014). Regarding the average solution values over the 10 runs, we see that the proposed method improves the ACO and MS-BR ones by 1.42 percent and 0.77 percent, respectively. The same applies for the best solution values obtained after 10 algorithmic runs: our methodology produces solutions which improve the ones generated by ACO and MS-BR by 1.39 percent and 0.80 percent on average, respectively. As far as the computational times are concerned, no secure comparisons among the methods can be conducted, due to the completely different execution conditions. Briefly, the MS-BR appears to be the fastest method. Although MS-BR was executed on a slower processor than the one used for the LS-2LPD algorithm, the average time elapsed for obtaining the final solutions is almost half the time required by LS-2LPD (MS-BR: 3.6 minutes, LS-2LPD: 6.9 minutes). Regarding the ACO method, it was executed on a much slower processor, however on average it appears to require almost 10 times the time required by the MS-BR method (MS-BR: 3.6 minutes, ACO: 37.0 minutes).
                           
                        

To further examine the effectiveness of the employed local-search operators, we have applied LS-2LSPD on the well-studied VRPSPD instances of Tang-Montanè and Galvão (2006). These instances can be regarded as a special case of 2L-SPD instances for which the loading constraints are always satisfied. Specifically, we have solved the instance set involving up to 200 customers. The average and best results after 10 executions of our algorithm are reported in Table 3. Moreover, Table 3 compares our best scores against the best known solutions published for these instances. Our algorithm exhibited a very stable behavior: the percent gaps between the average and best solution scores for each instance ranged up to 0.78 percent. In addition, it managed to match five out of the 12 best known solution scores (taken from Subramanian, Uchoa, Pessoa, and Ochi (2013b)). The average gap between our best and the best known solution scores was limited to 0.18 percent. Bearing in mind that our routing component was mainly designed for speed, in order to efficiently integrate the computationally expensive loading feasibility procedures, the performance of the LS-2LSPD method on the VRPSPD instances is satisfactory.

We deal with two versions of the 2L-SPD model: the first one does not allow item rotations (2|O|SPD), whereas the second one considers that items may be rotated by 90 degree (2|R|SPD).

Each of the 144 2L-SPD benchmark instances reported in Table A.1 was solved 10 times. Items were assumed to be loaded with fixed orientation as dictated by the 2|O|SPD model version. The results obtained are summarized in Table 4. From the results obtained, we see that the proposed methodology was rather stable in terms of the quality of the solutions generated in each run. The percent gaps between the average and highest quality solution were limited to 1.39 percent, 1.17 percent, 1.14 percent and 1.04 percent, for Classes 2, 3, 4 and 5 respectively. Regarding the computational effort required, LS-2LSPD managed to obtain the final solution of each run in reasonable run times, taking into account both the challenging loading constraints of 2L-SPD and the rather large scale of the examined test cases. For Classes 2, 3 4 and 5 the average computational times ranged up to 101.9, 221.8, 196.5 and 259.0 CPU minutes, respectively. As an overall comment, the computational effort strongly depends on the scale of the instance and on the total number of items per travelling arc. Moreover, it depends on the relation between the weight (1-d) and loading (2-d) constraints: the tighter the 1-d constraints (which are examined in constant time), the more routes declared weight infeasible, and thus the fewer routes to be examined by the time consuming loading feasibility procedures. Another factor which has a strong impact on the required computational effort is associated with the tightness of the loading constraints: the tighter the loading constraints, the more unproductive packing attempts are performed by the proposed heuristic (
Section 5.3
).
                        

Table A.7 provides further details on the best solution obtained for each instance. More specifically, it reports the average and maximum loading area utilization of the solution arcs. In addition, another important metric is reported illustrating the tightness of the loading constraints: This is the ratio of the feasible routes to the total number of routes which were examined in terms of the loading constraints. This metric, denoted as T_RHL, has been obtained as the total number of true values contained in the hashtable RHL divided by the total RHL entries (of the run that yielded the best solution score). We see that the average loading area utilization over the solution arcs stays on significant levels: Class 2: 59.1 percent, Class 3: 66.9 percent, Class 4: 67.1 percent, and Class 5: 71.0 percent, whereas the maximum loading space utilization goes up to 89.8 percent, 93.4 percent, 93.8 percent and 96.0 percent, for Classes 2, 3, 4 and 5, respectively. These high utilization levels indicate that our loading examination method is much effective and that the loading constraints of the 2L-SPD test-beds are challenging which in turn implies that they were appropriately designed to act as a performance comparison basis for 2L-SPD algorithms. Finally, the T_RHL ratios are widely distributed within [0, 100]. The T-RHL values ranged between [3.4 percent, 83.5 percent], [2.4 percent, 85.1 percent], [3.0 percent, 86.1 percent] and [4.2 percent, 87.6 percent] for Classes 2, 3, 4 and 5, respectively.
                        

Each of the 144 2L-SPD benchmark problems was solved 10 times under the 2|R|SPD version. The results obtained are summarized in Table 5. The proposed algorithm was again rather stable: the percent gaps between the average and best solution score achieved for each instance averaged at 1.07 percent, 0.94 percent, 0.88 percent and 0.99 percent for Classes 2, 3, 4 and 5, respectively. These gaps are slightly lower than the ones observed for the fixed orientation version (Class 2: 1.39 percent, 1.17 percent, 1.14 percent, Class 5: 1.04 percent). This can be attributed to the fact that the relaxed loading constraints form a smoother solution space. The average computational time for obtaining the final solution of each run ranged up to 105.5, 133.2, 226.5 and 362.8 CPU minutes, for Classes 2, 3, 4 and 5, respectively. On average, the computational times for the 2|R|SPD version were lower than those recorded for the 2|O|SPD problem version. This can be attributed to the fact that the relaxation of the loading constraints reduced the number of unproductive calls to the packing heuristic method (see the increased values of the T-RHL column in Table A.8).

To gain more insight on the solution structures obtained for the 2|R|SPD version of 2L-SPD, we provide Table A.8. It contains the average and maximal loading area utilization in the best solution of every test problem. We can see that the average loading area utilization for Classes 2, 3, 4 and 5 went up to 63.1 percent, 68.8 percent, 69.6 percent and 71.6 percent respectively (for the 2|O|SPD version, the average utilization is: 59.1 percent, 66.9 percent, 67.1 percent, 71.0 percent, for Classes 2, 3, 4 and 5, respectively). The same picture is seen for the maximal loading area utilization: for the 2|R|SPD version, it is equal to 93.2 percent, 96.9 percent, 96.5 percent and 97.7 percent for Classes 2,3, 4 and 5, respectively, while the corresponding values for the 2|O|SPD version are 89.8 percent, 93.4 percent, 93.8 percent and 96.0 percent. We can see that the relaxation of the loading constraint (rotations allowed) has a stronger impact for Class 2 which involves fewer and larger transported items. A final comment is related to the ratio of the routes found to be loading feasible compared to the total routes examined regarding the loading feasibility, denoted as T_RHL: we observe that for the 2|R|SPD model version and for Classes 2, 3, 4 and 5 the T-RHL values go up to 34.5 percent, 32.2 percent, 31.3 percent and 37.2 percent, respectively. For the 2|O|SPD version, the corresponding T_RHL averages are 28.5 percent, 27.4 percent, 28.2 percent and 35.7 percent. Again, we conclude that allowing item rotations plays a more significant role for the test problems of Classes 2 and 3 which involve fewer and larger transported items.

As already stated, we examine two LIFO 2L-SPD model configurations, depending on whether item rotations are allowed: 2|O|SPD-L (fixed orientation) and 2|R|SPD-L (rotations allowed). The benchmark instances introduced in
Section 7.2
 were solved under both the LIFO version of 2L-SPD and the basic 2L-SPD model, in order to gain insight on the impact of the LIFO constraints on the routing objective and the vehicle usage. Our algorithm was applied 10 times on each instance. The analytic solutions for these runs are reported in Tables A.9 and A.10 for the 2L-SPD with and without LIFO constraints, respectively. In Table 6, the best solution scores for each model are provided. We observe that the consideration of LIFO constraints significantly increases the routing costs and the number of vehicles used: on average, the routing objective is augmented by 12.67 percent when items are inserted with fixed orientation. This average gap is 11.04 percent when item rotations are allowed. In terms of the vehicle usage, the 2|O|SPD-L solutions require on average 5.62 routes, while under the 2|O|SPD configuration the average number of routes goes down to 4.62. For the 2|R|SPD-L and 2|R|SPD models, the average vehicle utilization is 5.46 and 4.58, respectively. The obtained results indicate that dropping the LIFO constraints from the basic 2L-SPD model can greatly reduce the routing costs involved. This can compensate for the extra effort required for the necessary item rearrangements.

From Table 6, we observe that the best 2L-SPD solutions were generated in shorter computational times compared to the ones required for obtaining the best solutions for the LIFO version of the model. This observation is contrary to what one would expect: the basic 2L-SPD model requires the determination of feasible item packings for all travelled arcs, whereas under the 2L-SPD with LIFO constraints, only two packings have to be determined for each vehicle route (one for the pick-up and one for the delivery items). Obviously, the computational time required for the two model configurations depend on various parameters, such as the tightness of the constraints (which in turn have an effect on the unproductive packing attempts), the number of customers per route, the cardinality of the routes explored etc. However, to shed light on this unexpected finding, we have performed an experimental procedure to measure some of the crucial aspects that define the computational burden of our methodology. In specific and under both models, we have applied our algorithm for both models and item rotation configurations. The following metrics were recorded:

                           
                              (a)
                              the number of times that the loading feasibility of a move had to be evaluated in terms of the loading constraints Fm
                                 ,

the number of times that the loading feasibility of these moves was retrieved from the SMD instances Fsmd
                                 ,

the number of loading feasibility examinations for complete routes Fr
                                 ,

the number of times that the loading feasibility of complete routes was retrieved from the route hashtable structures Frh
                                 ,

the number of loading feasibility examinations for individual arcs Fa
                                 ,

the number of times that the loading feasibility of individual arcs were retrieved from the arc hashtables Fah
                                 ,

the number of times that the packing heuristic was invoked Fp
                                 ,

the number of times that the packing heuristic was successful on finding a feasible packing Fps
                                 .

Note that for the LIFO version 2L-SPD, when a route is checked in terms of the loading constraints up to two arcs have to be examined (the first route arc for the delivery items and the last route arc for the pick-up items), whereas for each arc up to three packing heuristic calls may be used (see Section 6.1). In addition, the arc hashtables are inapplicable.

The contents of Tables A.11 and A.12 reveal that the basic 2L-SPD model was solved more efficiently compared to the LIFO variant because the LIFO variant has considerably tighter constraints. This fact causes the following: since our local search applies the best feasible move, more tentative moves have to be evaluated regarding the loading aspects (Zachariadis & Kiranoudis, 2010). On average, the 2L-SPD model with LIFO constraints requires the evaluation of 11.3 times more moves compared to the basic 2L-SPD model, for the fixed item orientation. When item rotations are allowed, 9.9 times more moves are investigated. This implies that more routes have to be examined under the LIFO version of 2L-SPD. On average, under 2|O|SPD-L, 6.3 times more routes have to be examined compared to the 2|O|SPD case. When item rotations are allowed, the consideration of LIFO constraints requires the examination of 5.5 times more routes. This picture changes in terms of the necessary checks for the individual arcs: the LIFO version requires 1.1 and 0.9 times the number of checks required for the fixed and non-fixed item orientation version of 2L-SPD, respectively. This is because the LIFO version requires at most two arc checks per route, whereas the basic 2L-SPD model requires that all route arcs are examined. However, the filtering effect of the arc hashtables (strengthened by the fact that no LIFO constraints are imposed which causes each customer pick-up and delivery combination to be associated with only one feasibility status) has a major impact, as 79.6 percent (80.4 percent) of the arc feasibility checks are completed by accessing the corresponding arc hashtables for the fixed orientation (for the rotations configuration). As a result, the calls to the packing heuristic are considerably greater in number under the LIFO version: 9.8 times greater for 2|O|SPD-L and 7.6 times greater for 2|R|SPD-L. Furthermore, due to the tighter nature of the LIFO constraints, the packing heuristic method exhibits a rather low percentage of successful applications. On average, 54.2 percent and 57.5 percent packing heuristic runs are successful for the 2|O|SPD-L and 2|R|SPD-L versions, respectively. These success rates are almost doubled for the non-LIFO model (2|O|SPD: 94.2 percent, 2|R|SPD: 96.2 percent). This implies that for the tighter LIFO version, the overall method applies more packing attempts for identifying feasible loading structures which in practice determines the total computational time required.

@&#CONCLUSIONS@&#

The present paper introduces the Vehicle Routing Problem with Simultaneous Pick-Ups and Deliveries and Two-Dimensional Loading Constraints (2L-SPD). The main characteristic of the examined problem is that customers require both delivery and pick-up transportation service. The transported products/materials correspond to rectangular items which cannot be stacked in the vehicle loading spaces. The 2L-SPD model belongs to the integrated vehicle routing and packing problems which jointly call for the minimization of the routing costs and the determination of feasible loading patterns for the transported products. The characteristic of simultaneous pick-up and delivery service makes the loading feasibility investigation a very challenging task: along their trips, vehicles carry different item sets, so that feasible loading patterns must be identified for each of these item sets, or in other words, for each of the arcs traversed. Thus, the 2L-SPD model generalizes the Vehicle Routing Problem with Two Dimensional Loading Constraints (2L-CVRP) (Gendreau et al., 2008) which calls for the determination of feasible loading patterns only for the fully loaded depot-leaving arcs. Except for the basic 2L-SPD version, we introduce the 2L-SPD with LIFO constraints. Contrary to the basic 2L-SPD model, under the LIFO variant, item re-arrangements along the vehicle trips are not allowed.

To solve both versions of the examined model, we have designed a new 2L-SPD solution approach. The basic algorithmic ingredients are a local search method for optimizing the routing aspects and a two-dimensional packing heuristic for generating feasible loading structures for the transported items. Both algorithmic components are extensions of our previous work on the 2L-CVRP model (Zachariadis et al., 2013). They have been integrated into a 2L-SPD solution framework which makes use of loading feasibility memory strategies specifically designed for the 2L-SPD, in order to drastically reduce the required computational effort.

To test the effectiveness of our solution approach, we have conducted a series of runs on the 2L-CVRP and VRPSPD models. Fine quality results are obtained, improving and matching several best known solution scores. In addition, our algorithm was applied to a series of newly constructed 2L-SPD benchmark instances. The obtained results indicate that our method is stable and capable of achieving very high utilization of the vehicle loading spaces. Moreover, the computational times required by our algorithm can be deemed reasonable, taking into account both the great complexity of the examined problem and the large scale of the benchmark problems used in our experiments.

In terms of further work in the area of composite routing and packing problems, we point out two interesting research directions. The first one is the introduction and examination of routing problems integrated with loading constraints that apart from minimizing the routing costs, will call for the maximization of the transported items. In other words, the loading requirements will not be regarded as a hard constraint of the underlying model, but rather as a soft constraint aimed at maximizing the items loaded onto the vehicle spaces, just like in the case of knapsack problems. Another interesting research direction is the detailed examination of the cargo handling (loading/unloading/rearrangement) activities that must take place at each service location. Models which will associate the packing arrangements of items with the required time for such activities should be developed. Then, a maximum time for handling purposes could be integrated into the underlying model. In addition, this aspect could be incorporated into the objective function which could jointly call for the minimization of the total travel time and the required cargo handling time.

@&#ACKNOWLEDGMENTS@&#

The work presented in this paper was supported by the IKY Fellowships of Excellence for Postgraduate Studies in Greece—Siemens Program.

The authors would like to thank the referees and the editor for their valuable remarks that greatly improved the manuscript.


                     Appendix A containing Tables A.1–A.12 is provided in the online Supplementary material.

Supplementary material associated with this article can be found, in the online version, at doi:10.1016/j.ejor.2015.11.018.


                     
                        
                           Image
                           application 1
                           
                        
                     
                  

@&#REFERENCES@&#

