@&#MAIN-TITLE@&#Wavelet shrinkage using adaptive structured sparsity constraints

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           A wavelet shrinkage method is introduced that exploits structured sparsity from the DTCWT.


                        
                        
                           
                           Structured sparsity is enforced by using a hierarchical regulariser.


                        
                        
                           
                           The regulariser is adapted according to the analysed signal to promote preservation of salient features.


                        
                        
                           
                           Results in denoising experiments show improved performance with respect to non-adaptive approaches.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Structured sparsity

Regularised regression

Denoising

Dual-tree complex wavelet transform

@&#ABSTRACT@&#


               
               
                  Structured sparsity approaches have recently received much attention in the statistics, machine learning, and signal processing communities. A common strategy is to exploit or assume prior information about structural dependencies inherent in the data; the solution is encouraged to behave as such by the inclusion of an appropriate regularisation term which enforces structured sparsity constraints over sub-groups of data. An important variant of this idea considers the tree-like dependency structures often apparent in wavelet decompositions. However, both the constituent groups and their associated weights in the regularisation term are typically defined a priori. We here introduce an adaptive wavelet denoising framework whereby a sparsity-inducing regulariser is modified based on information extracted from the signal itself. In particular, we use the same wavelet decomposition to detect the location of salient features in the signal, such as jumps or sharp bumps. Given these locations, the weights in the regulariser associated to the groups of coefficients that cover these time locations are modified in order to favour retention of those coefficients. Denoising experiments show that, not only does the adaptive method preserve the salient features better than the non-adaptive constraints, but it also delivers significantly better shrinkage over the signal as a whole.
               
            

@&#INTRODUCTION@&#

A key attraction of wavelets is their compressive representation of data. This is fundamental to powerful nonlinear processing methods such as wavelet shrinkage [1–3]. Early approaches often regarded wavelet coefficients as statistically independent. Further developments, however, showed that for many applications involving real-world signals and images, performance improved when the dependencies between coefficients were taken into account [4–9]. Most of such methods typically focussed on the persistency property which is often apparent across wavelet scales. The simplest models account for such statistical dependencies between parent coefficients at a given level of the decomposition and their child coefficients at the following level of finer resolution. Although methods based on these models proved successful in many applications such as denoising, compression, and classification, some concerns remained about the preservation of salient features in the signal, such as jumps or sharp bumps [10]. In applications such as denoising or deconvolution these features are typically over-smoothed which compromises the quality of the estimates. Some attempts to improve performance under these conditions explore total variation filtering [11,12], combined Tikhonov and total variation regularisation [10] and decompositions based on footprints of the discontinuities in the signal [13].

In this work we take advantage of the latest developments in regularised least-squares regression to promote tree-structured sparsity on the denoised estimates. Unlike previous tree-structured estimators [5,8,14–16], the method proposed here uses a lasso-like algorithm with a mixed-norm regulariser that induces structured sparsity over an overcomplete representation. A novel signal-driven approach is introduced to adapt the weights of the regulariser. The ability of shift-invariant complex wavelet transforms to detect salient features in the signal is exploited to design a penalisation term which favours estimated jumps or sharp bumps during the optimisation process. We show that this results in a denoising approach with better preservation of salient features.

The manuscript is organised as follows. In the remainder of the current section we provide motivation and discuss the specific contributions of our work in the context of the current literature. In Section 2 we offer an overview of structured sparsity approaches and the dual-tree complex wavelet transform. The proposed method is introduced in Section 3. This considers both an oracle and a practical approach to account for the occurrence of salient features. In Section 4, results obtained in denoising experiments show the advantage of the proposed adaptive scheme over structured sparsity estimates set a priori. We then close with the main conclusions and a discussion of further work.

@&#MOTIVATION@&#

Sparse representations have been at the core of many signal processing methods in recent years [17,18]. Early algorithms such as basis pursuit [19] and matching pursuit [20] regarded coefficients as mutually independent, meaning that each atom in the decomposition is selected or discarded independently of its neighbours. In the signal processing community, efforts to introduce structured sparsity constraints were spurred by the compressed sensing paradigm [21,22] which used prior knowledge to reconstruct signals with fewer samples than classical sampling theorems allowed. Model-based compressed sensing has showed promise in this context [23–25]. These early attempts, however, were based on non-convex or greedy optimisation approaches. To achieve scalability without compromising consistency, non-greedy convex approaches are often desirable. To this end, regularised approaches using mixed-norms have proven successful in obtaining sparse estimates that retain an assumed dependence structure [26,27].

It is important to note that most of the existing wavelet/structured models deal with the persistency property of the coefficients without taking into account any additional information provided by the specific choice of transformation or dictionary used to obtain the representation [27–29]. Moreover, all of these dependence structures are set a priori, and no further information from the signal is used to adapt them. In denoising applications, features with strong local high frequency content are often over-smoothed by such methods. This is due to the erroneous shrinkage or elimination of coefficients at finer scale levels. On the other hand, when regularisation parameters are set to favour data-fitting much more than sparsity, the resulting estimates often retain too many fine-scale coefficients and remain noisy.

In this work, a new signal processing method is developed that uses additional information, extracted directly from the signal, to reinforce the a priori structured sparsity constraints. To do so, we use the dual-tree complex wavelet transform (DTCWT) as the sparsity inducing transform together with a hierarchical mixed norm regulariser. The weights in the regulariser are adaptively modified in order to help preserve salient features of the analysed signal. This adaptive modification is driven by a detection stage which aggregates information from the different scales of the wavelet decomposition to infer the locations of salient features in the signal. In this way, the mixed norm regulariser, defined a priori, is tailored to the observed signal.

@&#RELATED WORK@&#

Tree-structured estimators have been proposed earlier for wavelet decompositions, both in the signal processing and statistics communities [5,8,14–16]. They often rely on orthonormal transforms and hard-thresholding approaches. Following their success in machine learning and statistics, generalised lasso-type algorithms have received recent and growing attention for signal processing applications. The closest works are [29,30]. In [29], the parent–child dependence of wavelet coefficients is coded into overlapping groups, each of which comprises a parent–child pair. A variable replication approach is taken into account for different instances of a given coefficient appearing in different groups and a regularisation term is added to account for the dissimilarity of the replicates of the same variable. Unlike the present work, their approach uses the standard discrete wavelet transform (DWT) without adding any additional information onto the structure assumed a priori. In [30], a chain structure is assumed to model the spectrogram of audio signals obtained from their short-time Fourier transform representation. This simple structure gives rise to a regularisation term that is bounded above by a quantity which is simpler to compute, allowing for an efficient minimisation–majorisation algorithm. It should be noted, however, that it is suited for signals with emphasised band structures in their spectrogram. On the other hand, edge information has been used to aid image denoising [31] and reconstruction under compressed sensing applications [32]. To the best of our knowledge, however, such information has not been used to adapt a structured regulariser as proposed here.

@&#BACKGROUND@&#

This work builds upon two main ideas: the use of mixed-norm regularisers to obtain structured sparse estimates and the use of the DTCWT as a signal analysis tool to induce sparsity and locate salient features in the signal, while retaining desirable properties such as shift-invariance and low redundancy. We briefly examine these two ingredients in the following sections.

Sparse linear models have become very popular in signal processing, machine learning and statistics. Their purpose is to predict an output by using linear combinations of only a small subset of the potential features that could describe the data. In this context, ℓ1 regularisation has become a widely used tool to obtain estimation and feature selection simultaneously. The strategy can be stated as the solution of the convex optimisation problem
                           
                              (1)
                              
                                 
                                    
                                       θ
                                    
                                    
                                       ^
                                    
                                 
                                 =
                                 arg
                                 
                                 
                                    
                                       min
                                    
                                    
                                       θ
                                    
                                 
                                 
                                    
                                       ‖
                                       y
                                       −
                                       A
                                       θ
                                       ‖
                                    
                                    
                                       2
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 λ
                                 ‖
                                 θ
                                 
                                    
                                       ‖
                                    
                                    
                                       1
                                    
                                 
                                 .
                              
                           
                        In signal processing, the method is known as Basis Pursuit [19], and the aim is to find a sparse representation 
                           
                              
                                 θ
                              
                              
                                 ^
                              
                           
                         of a signal Y in terms of the columns (or atoms) of an overcomplete dictionary A. In statistics, the method is known as the Lasso 
                        [33]. In this case, A is a data matrix comprising more variables than observations and the aim is to get a sparse regression of the observations Y on the measurements A.

The popularity of ℓ1 regularisation is largely due to the existence of efficient algorithms to solve (1) and a large body of supporting theory [33–39]. Nevertheless, in this formulation every variable or feature is regarded independent of the others. In practical situations, however, estimation can benefit from additional a priori knowledge regarding dependencies between sets of variables. Because of this, attention has been given in recent years to regularisation problems that can accommodate such knowledge.

The most simple structure is the case in which we know, a priori, that sets of variables should be considered or discarded jointly from the linear model. Such a set of variables can be regarded as a group. Let 
                           G
                         denote the set of groups, let 
                           
                              
                                 θ
                              
                              
                                 g
                              
                           
                         refer to the subset of variables of 
                           θ
                         in group g and let w
                        
                           g
                         be associated positive scalars acting as weights. The optimisation problem reads [40]
                        
                           
                              (2)
                              
                                 
                                    
                                       θ
                                    
                                    
                                       ^
                                    
                                 
                                 =
                                 arg
                                 
                                 
                                    
                                       min
                                    
                                    
                                       θ
                                    
                                 
                                 
                                    
                                       ‖
                                       y
                                       −
                                       A
                                       θ
                                       ‖
                                    
                                    
                                       2
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 λ
                                 
                                    
                                       ∑
                                    
                                    
                                       g
                                       ∈
                                       G
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       g
                                    
                                 
                                 ‖
                                 
                                    
                                       θ
                                    
                                    
                                       g
                                    
                                 
                                 
                                    
                                       ‖
                                    
                                    
                                       q
                                    
                                 
                                 .
                              
                           
                        Common choices for q are 
                           {
                           2
                           ,
                           ∞
                           }
                        . The regulariser 
                           
                              
                                 Ω
                              
                              
                                 1
                                 ,
                                 q
                              
                           
                           (
                           θ
                           )
                           =
                           
                              
                                 ∑
                              
                              
                                 g
                                 ∈
                                 G
                              
                           
                           
                              
                                 w
                              
                              
                                 g
                              
                           
                           ‖
                           
                              
                                 θ
                              
                              
                                 g
                              
                           
                           
                              
                                 ‖
                              
                              
                                 q
                              
                           
                         is often referred to as a mixed-norm regulariser and it can indeed be verified that it induces sparsity by deleting all the variables within a given group simultaneously. When the collection 
                           G
                         forms a partition of the set of variables, the method is known as group lasso 
                        [40] and it is easy to see that the subset of coefficients shrunks to zero during estimation gives rise to a zero pattern that is the union of some groups in 
                           G
                        .

One way to generalise this formulation is to allow for more flexible grouping schemes whereby groups are allowed to overlap (i.e. such that 
                           G
                         does not need to be a partition of the set of variables) [26–28,41,42]. In this case, the regulariser 
                           
                              
                                 Ω
                              
                              
                                 1
                                 ,
                                 q
                              
                           
                           (
                           θ
                           )
                           =
                           
                              
                                 ∑
                              
                              
                                 g
                                 ∈
                                 G
                              
                           
                           
                              
                                 w
                              
                              
                                 g
                              
                           
                           ‖
                           
                              
                                 θ
                              
                              
                                 g
                              
                           
                           
                              
                                 ‖
                              
                              
                                 q
                              
                           
                         is still a norm, provided all covariates belong to at least one group, and it still induces complete groups of covariates to be set to zero. Moreover, a variable in a group that is set to zero during optimisation will be pushed to zero even if it belongs also to other groups that are not set to zero. More formally, it is shown in [27] that under very mild assumptions, the support of the solution 
                           
                              
                                 θ
                              
                              
                                 ^
                              
                           
                         almost surely is the complement of the union of some groups in 
                           G
                        ; that is,
                           
                              (3)
                              
                                 supp
                                 (
                                 
                                    
                                       θ
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       (
                                       
                                          
                                             
                                                ⋃
                                             
                                             
                                                g
                                                ∈
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      0
                                                   
                                                
                                             
                                          
                                          g
                                       
                                       )
                                    
                                    
                                       c
                                    
                                 
                                 =
                                 
                                    
                                       ⋂
                                    
                                    
                                       g
                                       ∈
                                       
                                          
                                             G
                                          
                                          
                                             0
                                          
                                       
                                    
                                 
                                 
                                    
                                       g
                                    
                                    
                                       c
                                    
                                 
                                 ,
                              
                           
                        for some 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                           ⊂
                           G
                        . This situation is illustrated in Fig. 1
                        . Sets of non-zero patterns that can be represented as in (3) are referred to as intersection-closed. There are some expected structures that cannot be described appropriately by an intersection-closed grouping scheme but which can be modeled by union-closed families of supports [41,42].

Practical solution of the optimisation problem involving overlapping groups is more challenging computationally and dedicated algorithms have been developed to address this task [43–46]. In addition, the selection of weights w
                        
                           g
                         has a greater impact on the estimate in the case of overlapping groups, since they have to mitigate not only the unbalanced size of the groups but also the over-penalisation of variables appearing in a greater number of groups. Currently, principled rules to set the weights optimally for these regularisers are not available.

Despite its widespread use in applications, the standard (real) DWT suffers from some important shortcomings such as a lack of shift-invariance and the substantial aliasing due to critical downsampling that affects perfect reconstruction if some processing is applied to the coefficients. For image analysis, the standard DWT with real wavelets also lacks directionality due to the standard tensor product construction of multidimensional wavelets. The DTCWT provides a better alternative to deal with those problems, while retaining simple computation and low redundancy [47]. It seeks to provide a nearly analytic wavelet transform using two real filter-bank trees, one for the real part and other for the imaginary part of the transform. These two real wavelet transforms use two different sets of filters, each of compact support and satisfying perfect reconstruction. The choice of filters for each tree is not arbitrary, but they are designed to form an approximate Hilbert pair, so that the resulting complex wavelet transform is as close as possible to analytic. Indeed, the design of the pair of filters is the key point to the success of the transform, and several efforts have addressed this topic [48–55]. The resulting transform is near shift-invariant [56] and, of particular importance to structured sparsity approaches, it has also been shown that the magnitude of the coefficients is more strongly dependent in inter-scale and intra-scale neighbourhoods [47,57,58] than those of the DWT. Refer to [47] and references therein for a comprehensive introduction to the DTCWT and its properties.

@&#PROPOSED METHOD@&#

In this section we describe the overlapping-group lasso approach for tree-structured wavelet estimators. We then propose a way to estimate the salient features directly from the signal and show that this affords the opportunity to adaptively choose the weights. We then conclude the section with a treatment of how these ideas can be incorporated into an optimisation framework which solves the structured sparse estimation problem for overlapping groups of variables.

The multiresolution nature of wavelet decompositions allows one to think of parent coefficients at a given scale level and child coefficients at the next finer scale level. Wavelet decompositions possess two properties of great interest to structural sparsity approaches: firstly, they are typically sparse and secondly, coefficients in the same time interval usually show a persistency property across scale [5]. The persistency property means that the magnitude of the child coefficients depends strongly on that of their parent—a large/small parent usually implies a large/small child. Such a dependence can be modelled as a set of trees, each rooted at a wavelet coefficient from the coarsest scale of the decomposition [28,59]. Let I be the set of indexes for the coefficients 
                           θ
                           :
                           I
                           ↦
                           C
                         and let 
                           
                              
                                 I
                              
                              
                                 0
                              
                           
                           ⊂
                           I
                         be the subset of indexes indicating the wavelet coefficients at the coarsest scale. Furthermore, let 
                           g
                           (
                           i
                           )
                         be a subset of indexes of I organised as a tree rooted at some index i, and let 
                           
                              
                                 θ
                              
                              
                                 g
                                 (
                                 i
                                 )
                              
                           
                         be the corresponding subset of coefficients in this tree. Consider the collection of groups
                           
                              (4)
                              
                                 G
                                 ≔
                                 {
                                 g
                                 (
                                 i
                                 )
                                 :
                                 i
                                 ∈
                                 I
                                 }
                                 .
                              
                           
                        We assume that the inter-scale dependence structure between wavelet coefficients determines a forest-like hierarchical structure 
                           M
                           (
                           θ
                           )
                        , so that for all 
                           i
                           ,
                           j
                           ∈
                           I
                        , 
                           g
                           (
                           i
                           )
                           ⊂
                           g
                           (
                           j
                           )
                        , 
                           g
                           (
                           j
                           )
                           ⊂
                           g
                           (
                           i
                           )
                        , or 
                           g
                           (
                           i
                           )
                           ∩
                           g
                           (
                           j
                           )
                           =
                           ∅
                        , and
                           
                              (5)
                              
                                 M
                                 (
                                 θ
                                 )
                                 ≔
                                 
                                    
                                       ⊕
                                    
                                    
                                       i
                                       ∈
                                       
                                          
                                             I
                                          
                                          
                                             0
                                          
                                       
                                    
                                 
                                 
                                    
                                       θ
                                    
                                    
                                       g
                                       (
                                       i
                                       )
                                    
                                 
                                 .
                              
                           
                        
                     

This grouping scheme is illustrated in Fig. 2
                        (a), where circles represent coefficients of the wavelet representation and rectangles represent the groups. For simplicity, only one tree of the forest is shown in the figure. This nested structure can be understood as an example of the composite absolute penalties family and it allows one to obtain estimates whose supports show the desired persistency property. See [60] for a discussion of these types of penalties. An example is shown in Fig. 2(b). Highlighted rectangles show the groups pushed to zero during optimisation and the shaded circles show the variables set to zero as a consequence. The support of the estimate is then represented by the set of white circles, which is the complement of the union of the groups set to zero during the optimisation. This example illustrates that the hierarchical structure defines a intersection-closed set of supports, which can be then obtained solving a regularised regression problem like (2); in particular,
                           
                              (6)
                              
                                 
                                    
                                       θ
                                    
                                    
                                       ^
                                    
                                 
                                 =
                                 arg
                                 
                                 
                                    
                                       min
                                    
                                    
                                       θ
                                    
                                 
                                 
                                    
                                       ‖
                                       y
                                       −
                                       A
                                       θ
                                       ‖
                                    
                                    
                                       2
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 λ
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       ∈
                                       I
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       i
                                    
                                 
                                 ‖
                                 
                                    
                                       θ
                                    
                                    
                                       g
                                       (
                                       i
                                       )
                                    
                                 
                                 
                                    
                                       ‖
                                    
                                    
                                       2
                                    
                                 
                                 .
                              
                           
                        
                     

Whilst the use of this structure and the associated mixed-norm regulariser has already been proposed [28,27], we note that the introduction of this structured regulariser also requires the specification of the weights w
                        
                           i
                        . Indeed, although much less attention has been given to this topic, it is well-known that the values of the weights in fact have an important effect on determining the support of the resulting estimates [26,27].

Motivated by this dependence on the choice of the weights, we propose to adapt them from the a priori specification by taking into account the salient features of the analysed signal. In particular, we modify the weights w
                        
                           g
                         with the aim of achieving a better reconstruction of jumps and bumps, which are often over-smoothed by denoising algorithms.

To formalise the idea, let 
                           k
                           ∈
                           supp
                           (
                           f
                           )
                         be a location of interest, where the signal f presents a salient feature such as a jump or a sharp bump. Let 
                           
                              
                                 
                                    
                                       G
                                    
                                    
                                       ˇ
                                    
                                 
                              
                              
                                 k
                              
                           
                           ⊂
                           G
                         be the set of groups containing coefficients 
                           
                              
                                 θ
                              
                              
                                 j
                                 ,
                                 n
                              
                           
                         related to k and let 
                           
                              
                                 
                                    
                                       w
                                    
                                    
                                       ˇ
                                    
                                 
                              
                              
                                 k
                              
                           
                         be the vector of associated weights. We define a shrinkage operator on the weights 
                           P
                           :
                           w
                           ∈
                           
                              
                                 R
                              
                              
                                 +
                              
                           
                           →
                           
                              
                                 R
                              
                              
                                 +
                              
                           
                         by
                           
                              (7)
                              
                                 P
                                 (
                                 
                                    
                                       w
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 ≡
                                 
                                    
                                       
                                          
                                             w
                                          
                                          
                                             ˜
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 {
                                 
                                    
                                       
                                          
                                             
                                                
                                                   α
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                
                                                   w
                                                
                                                
                                                   i
                                                
                                             
                                          
                                          
                                             if
                                             
                                             g
                                             (
                                             i
                                             )
                                             ∈
                                             
                                                
                                                   
                                                      
                                                         G
                                                      
                                                      
                                                         ˇ
                                                      
                                                   
                                                
                                                
                                                   k
                                                
                                             
                                             ,
                                          
                                       
                                       
                                          
                                             
                                                
                                                   w
                                                
                                                
                                                   i
                                                
                                             
                                          
                                          
                                             otherwise
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 α
                              
                              
                                 i
                              
                           
                           ∈
                           [
                           0
                           ;
                           1
                           ]
                        . For a given group g(i), 
                           
                              
                                 
                                    
                                       w
                                    
                                    
                                       ˜
                                    
                                 
                              
                              
                                 i
                              
                           
                           ≤
                           
                              
                                 w
                              
                              
                                 i
                              
                           
                         and then the shrunk weights allow the respective groups to be penalised more weakly during the optimisation process. In this way, coefficients related to salient features of the signal can be favoured in the regularised estimation process so that they are surely retained in the final estimate.

We now focus on the practicalities of detecting and locating these salient features. It is shown in [61] that analytic complex wavelets (with a non-negative frequency spectrum) can be used to extract edge-like and ridge-like features from noise-free signals. Theoretically, at the limit of the finest resolution, all the coefficients are zero except those corresponding to the location of the features. Moreover, the phase of these limiting coefficients can be used to distinguish between an edge-like or a ridge-like structure at a given position of interest.

In practice, the edges and bumps can be estimated by replacing the limiting process with an average of the normalised complex coefficients over a finite number of scales. This approach, nevertheless, has two important limitations. The first is that an undecimated or interpolated complex wavelet representation is required so that the coefficients included in the average are well localised in time in order for the detected locations of interest to be accurate. The second limitation is perhaps more serious, namely that the approach as stated currently does not take into account noisy conditions. Thus, there is no guarantee on the attainable performance when using it in noisy scenarios.

For 1D signals, it is well-known that jumps and ridges give rise to strong persistency figures in their scalogram when using the continuous wavelet transform [62]. This behaviour is still noticeable when using a discrete wavelet transform. Motivated by this, we propose to average the magnitude of the wavelet coefficients throughout the different scales to get the signatures. Since the DTCWT provides a decimated representation, we interpolate the magnitudes of the wavelet coefficients to match the resolution of the finest scale.

Let 
                              θ
                            be the DTCWT of discrete signal f and let 
                              |
                              
                                 
                                    
                                       
                                          θ
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    j
                                    ,
                                    n
                                 
                              
                              |
                            be the interpolated magnitude of the coefficient corresponding to location n in time at the scale indexed by j. We measure the amount of important information on f at location n by a function 
                              δ
                              :
                              supp
                              (
                              f
                              )
                              →
                              [
                              0
                              ;
                              1
                              ]
                           
                           
                              
                                 (8)
                                 
                                    δ
                                    (
                                    n
                                    )
                                    ≔
                                    
                                       
                                          (
                                          
                                             
                                                
                                                   ∏
                                                
                                                
                                                   j
                                                   =
                                                   
                                                      
                                                         J
                                                      
                                                      
                                                         0
                                                      
                                                   
                                                
                                                
                                                   J
                                                
                                             
                                             γ
                                             (
                                             |
                                             
                                                
                                                   
                                                      
                                                         θ
                                                      
                                                      
                                                         ˜
                                                      
                                                   
                                                
                                                
                                                   j
                                                   ,
                                                   n
                                                
                                             
                                             |
                                             )
                                          
                                          )
                                       
                                       
                                          1
                                          /
                                          (
                                          J
                                          −
                                          
                                             
                                                J
                                             
                                             
                                                0
                                             
                                          
                                          +
                                          1
                                          )
                                       
                                    
                                    ,
                                 
                              
                           with 
                              γ
                              (
                              ·
                              )
                            being a normalisation function given by
                              
                                 (9)
                                 
                                    γ
                                    (
                                    
                                       
                                          θ
                                       
                                       
                                          j
                                          ,
                                          n
                                       
                                    
                                    )
                                    ≔
                                    
                                       
                                          
                                             
                                                θ
                                             
                                             
                                                j
                                                ,
                                                n
                                             
                                          
                                          −
                                          min
                                          
                                          
                                             
                                                θ
                                             
                                             
                                                j
                                                ,
                                                ·
                                             
                                          
                                       
                                       
                                          max
                                          
                                          
                                             
                                                θ
                                             
                                             
                                                j
                                                ,
                                                ·
                                             
                                          
                                          −
                                          min
                                          
                                          
                                             
                                                θ
                                             
                                             
                                                j
                                                ,
                                                ·
                                             
                                          
                                       
                                    
                                    .
                                 
                              
                           At locations where the signal has a jump or a bump, δ is close to 1. For noise-free scenarios, 
                              δ
                              →
                              0
                            at intervals where the signal is smooth. In this case, J
                           0 should be set to 1, in order to include the coefficients at the finest scale of the decomposition. In noisy scenarios, coefficients at the finest scale can be noisy and averaging from scale 
                              
                                 
                                    J
                                 
                                 
                                    0
                                 
                              
                              =
                              2
                            can prove useful. In addition, when the decomposition runs up to a very coarse level, very little information can be extracted from the coarsest scales about the location of salient features. Indeed, for very smooth signals the interpolated coefficients can become nearly constant at the coarsest scales. The geometric mean given by Eq. (8) shows small sensitivity to this effect because it depends mostly on the coefficients whose magnitude is close to zero [63].

Given a threshold 
                              τ
                              ∈
                              (
                              0
                              ;
                              1
                              )
                            and a minimum length of interval r, we define the sets 
                              
                                 
                                    K
                                 
                                 
                                    τ
                                    ,
                                    r
                                 
                              
                              (
                              1
                              )
                              ,
                              
                                 
                                    K
                                 
                                 
                                    τ
                                    ,
                                    r
                                 
                              
                              (
                              2
                              )
                              ,
                              …
                              ,
                              
                                 
                                    K
                                 
                                 
                                    τ
                                    ,
                                    r
                                 
                              
                              (
                              S
                              )
                            to be the collection of non-empty, non-intersecting, and non-neighbouring intervals of length greater than r such that 
                              δ
                              (
                              n
                              )
                              >
                              τ
                            and where each set is simply connected (i.e. for each s, the set 
                              
                                 
                                    K
                                 
                                 
                                    τ
                                    ,
                                    r
                                 
                              
                              (
                              s
                              )
                            does not contain any gaps between elements). Then, the set of S-many locations 
                              
                                 
                                    K
                                 
                                 
                                    τ
                                    ,
                                    r
                                 
                              
                            of the salient features in f is given by the points where 
                              δ
                              (
                              n
                              )
                            attains its maximum value within each interval of 
                              
                                 
                                    K
                                 
                                 
                                    τ
                                    ,
                                    r
                                 
                              
                           ; that is, 
                              
                                 
                                    
                                       
                                          K
                                       
                                       
                                          τ
                                          ,
                                          r
                                       
                                    
                                    ≔
                                    
                                       
                                          {
                                          
                                             
                                                
                                                   max
                                                
                                                
                                                   n
                                                   ∈
                                                   
                                                      
                                                         K
                                                      
                                                      
                                                         τ
                                                         ,
                                                         r
                                                      
                                                   
                                                   (
                                                   s
                                                   )
                                                
                                             
                                             δ
                                             (
                                             n
                                             )
                                          
                                          }
                                       
                                       
                                          s
                                          =
                                          1
                                       
                                       
                                          S
                                       
                                    
                                    .
                                 
                              
                           
                        

The procedure to estimate the set of locations 
                              
                                 
                                    K
                                 
                                 
                                    τ
                                    ,
                                    r
                                 
                              
                            is summarised in Algorithm 1. The detection of points of interest as described above depends on the choice of parameters τ and r. For fixed r, moving τ from 0 to 1 changes the pattern of connected sets 
                              
                                 
                                    K
                                 
                                 
                                    τ
                                    ,
                                    r
                                 
                              
                           . In particular, for 
                              
                                 
                                    τ
                                 
                                 
                                    1
                                 
                              
                              <
                              
                                 
                                    τ
                                 
                                 
                                    2
                                 
                              
                           , 
                              
                                 
                                    K
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    r
                                 
                              
                              ⊃
                              
                                 
                                    K
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    r
                                 
                              
                            but the set of detected locations 
                              
                                 
                                    K
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    r
                                 
                              
                            can add a new element with respect to 
                              
                                 
                                    K
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    r
                                 
                              
                            if a local minimum in δ is passed-through when going from τ
                           1 to τ
                           2. If the new extremum is a local maximum due to noise or an irrelevant fluctuation in δ, it will disappear as τ is increased. On the other hand, if the added extremum represents a location of a salient feature, it will persist over a wide range of 
                              τ
                              >
                              
                                 
                                    τ
                                 
                                 
                                    2
                                 
                              
                           . As such, persistence of detected locations on the sequence 
                              {
                              
                                 
                                    K
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          n
                                       
                                    
                                    ,
                                    r
                                 
                              
                              }
                           , obtained using a sequence of threshold values 
                              {
                              
                                 
                                    τ
                                 
                                 
                                    n
                                 
                              
                              }
                           , is an indicative of a true salient feature in f. For this procedure to be useful in general, we should define the sequence 
                              {
                              
                                 
                                    τ
                                 
                                 
                                    n
                                 
                              
                              }
                            to be adaptive to the data, since the peaks in δ at the locations of interest are less emphasised when the noise increases. To do so, we propose to match 
                              {
                              
                                 
                                    τ
                                 
                                 
                                    n
                                 
                              
                              }
                            to a sequence of quantiles of δ and look for the locations that persist in 
                              {
                              
                                 
                                    K
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          n
                                       
                                    
                                    ,
                                    r
                                 
                              
                              }
                            at least n
                           0 times. 
                              Algorithm 1
                              Detection of points of interest. 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   Inputs: 
                                                   f; 
                                                      r
                                                      ,
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                   .
                                             
                                             
                                                
                                                   Outputs: 
                                                   
                                                      
                                                         
                                                            K
                                                         
                                                         
                                                            r
                                                            ,
                                                            
                                                               
                                                                  n
                                                               
                                                               
                                                                  0
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   procedure 
                                                   DetectPoi 
                                                   
                                                      (
                                                      f
                                                      ;
                                                      r
                                                      ,
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      θ
                                                      ←
                                                      DTCWT
                                                      (
                                                      f
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            |
                                                            θ
                                                            |
                                                         
                                                         
                                                            ˜
                                                         
                                                      
                                                      ←
                                                      Interpolate
                                                      (
                                                      |
                                                      θ
                                                      |
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   for all 
                                                   
                                                      n
                                                      ∈
                                                      supp
                                                      (
                                                      f
                                                      )
                                                    
                                                   do
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      δ
                                                      (
                                                      n
                                                      )
                                                      ←
                                                      Compute
                                                      
                                                      the
                                                      
                                                      geometric
                                                      
                                                      mean
                                                      
                                                      of
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  |
                                                                  θ
                                                                  |
                                                               
                                                               
                                                                  ˜
                                                               
                                                            
                                                         
                                                         
                                                            ·
                                                            ,
                                                            n
                                                         
                                                      
                                                    
                                                   
                                                   
                                                   
                                                   
                                                   
                                                      ▹
                                                    see (8)
                                                
                                             
                                             
                                                
                                                   
                                                   end for
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      {
                                                      
                                                         
                                                            τ
                                                         
                                                         
                                                            q
                                                         
                                                      
                                                      }
                                                      ←
                                                      Compute
                                                      
                                                      quantiles
                                                      
                                                      of
                                                      
                                                      δ
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   for all 
                                                   τ
                                                   q 
                                                   do
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            K
                                                         
                                                         
                                                            
                                                               
                                                                  τ
                                                               
                                                               
                                                                  q
                                                               
                                                            
                                                            ,
                                                            r
                                                         
                                                      
                                                      ←
                                                      {
                                                      n
                                                      :
                                                      δ
                                                      (
                                                      n
                                                      )
                                                      >
                                                      
                                                         
                                                            τ
                                                         
                                                         
                                                            q
                                                         
                                                      
                                                      }
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   for all 
                                                   
                                                      
                                                         
                                                            K
                                                         
                                                         
                                                            r
                                                            ,
                                                            
                                                               
                                                                  τ
                                                               
                                                               
                                                                  q
                                                               
                                                            
                                                         
                                                      
                                                      (
                                                      i
                                                      )
                                                    
                                                   do
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                   
                                                      
                                                         
                                                            K
                                                         
                                                         
                                                            
                                                               
                                                                  τ
                                                               
                                                               
                                                                  q
                                                               
                                                            
                                                            ,
                                                            r
                                                         
                                                      
                                                      (
                                                      i
                                                      )
                                                      ←
                                                      arg
                                                      
                                                      
                                                         
                                                            max
                                                         
                                                         
                                                            n
                                                            ∈
                                                            
                                                               
                                                                  K
                                                               
                                                               
                                                                  
                                                                     
                                                                        τ
                                                                     
                                                                     
                                                                        q
                                                                     
                                                                  
                                                                  ,
                                                                  r
                                                               
                                                            
                                                            (
                                                            i
                                                            )
                                                         
                                                      
                                                      δ
                                                      (
                                                      n
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   end for
                                                
                                             
                                             
                                                
                                                   
                                                   end for
                                                
                                             
                                             
                                                
                                                   
                                                   for all 
                                                   
                                                      {
                                                      
                                                         
                                                            K
                                                         
                                                         
                                                            
                                                               
                                                                  τ
                                                               
                                                               
                                                                  q
                                                               
                                                            
                                                            ,
                                                            r
                                                         
                                                      
                                                      (
                                                      i
                                                      )
                                                      }
                                                    
                                                   do
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            κ
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      ←
                                                      Check
                                                      
                                                      persistence
                                                      
                                                      {
                                                      
                                                         
                                                            K
                                                         
                                                         
                                                            
                                                               
                                                                  τ
                                                               
                                                               
                                                                  q
                                                               
                                                            
                                                            ,
                                                            r
                                                         
                                                      
                                                      (
                                                      i
                                                      )
                                                      }
                                                      ≥
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   end for
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            K
                                                         
                                                         
                                                            r
                                                            ,
                                                            
                                                               
                                                                  n
                                                               
                                                               
                                                                  0
                                                               
                                                            
                                                         
                                                      
                                                      ←
                                                      {
                                                      
                                                         
                                                            κ
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      }
                                                   
                                                
                                             
                                             
                                                
                                                   end procedure
                                                
                                             
                                          
                                       
                                    
                                 
                              

@&#IMPLEMENTATION@&#

In this section we describe an algorithm to solve (6) and a criterion to select the regularisation parameter λ.

Several numerical approaches have been proposed to deal with the 
                              
                                 
                                    ℓ
                                 
                                 
                                    1
                                    ,
                                    2
                                 
                              
                            minimisation problem involving overlapping groups [43–46,59]. In this work we solve (6) using a proximal method based on Mureau–Yosida regularisation [64]. Our presentation follows [64]. Let 
                              
                                 
                                    Ω
                                 
                                 
                                    1
                                    ,
                                    2
                                 
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    I
                                 
                              
                              
                                 
                                    w
                                 
                                 
                                    i
                                 
                              
                              ‖
                              
                                 
                                    θ
                                 
                                 
                                    g
                                    (
                                    i
                                    )
                                 
                              
                              
                                 
                                    ‖
                                 
                                 
                                    2
                                 
                              
                            be the regularisation term in (6). Under the Mureau–Yosida regularisation framework, the regularisation associated with 
                              
                                 
                                    Ω
                                 
                                 
                                    1
                                    ,
                                    2
                                 
                              
                            for a given 
                              v
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    p
                                 
                              
                            is given by
                              
                                 (10)
                                 
                                    
                                       
                                          ϕ
                                       
                                       
                                          λ
                                       
                                    
                                    (
                                    v
                                    )
                                    =
                                    arg
                                    
                                    
                                       
                                          min
                                       
                                       
                                          v
                                       
                                    
                                    {
                                    
                                       
                                          
                                             1
                                          
                                          
                                             2
                                          
                                       
                                       
                                          
                                             ‖
                                             θ
                                             −
                                             v
                                             ‖
                                          
                                          
                                             2
                                          
                                          
                                             2
                                          
                                       
                                       +
                                       λ
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                             ,
                                             2
                                          
                                       
                                    
                                    }
                                    ,
                                 
                              
                           for some 
                              λ
                              >
                              0
                           . Let 
                              
                                 
                                    π
                                 
                                 
                                    λ
                                 
                              
                              (
                              ·
                              )
                            be a minimizer of (10) and let 
                              
                                 
                                    θ
                                 
                                 
                                    ^
                                 
                              
                            be an optimal solution to (6). Then, 
                              
                                 
                                    θ
                                 
                                 
                                    ^
                                 
                              
                            satisfies
                              
                                 (11)
                                 
                                    
                                       
                                          θ
                                       
                                       
                                          ^
                                       
                                    
                                    =
                                    
                                       
                                          π
                                       
                                       
                                          
                                             
                                                λ
                                             
                                             
                                                τ
                                             
                                          
                                       
                                    
                                    (
                                    
                                       
                                          θ
                                       
                                       
                                          ^
                                       
                                    
                                    +
                                    τ
                                    
                                       
                                          A
                                       
                                       
                                          †
                                       
                                    
                                    (
                                    y
                                    −
                                    A
                                    
                                       
                                          θ
                                       
                                       
                                          ^
                                       
                                    
                                    )
                                    )
                                    ,
                                    
                                    ∀
                                    τ
                                    >
                                    0
                                    ,
                                 
                              
                           with 
                              
                                 
                                    A
                                 
                                 
                                    †
                                 
                              
                            and A here denoting the DTCWT and its inverse transformation, respectively. Eq. (11) affords the opportunity to apply an accelerated gradient descent for solving (6). The key point of the algorithm is the solution of (10). It is shown that this minimizer has indeed an analytical solution that can be found with Algorithm 2 (see [64] for details). 
                              Algorithm 2
                              Mureau–Yosida regularisation. 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   Inputs: 
                                                   
                                                      v
                                                      ∈
                                                      
                                                         
                                                            R
                                                         
                                                         
                                                            p
                                                         
                                                      
                                                   ; grouping structure 
                                                      G
                                                   , related weights 
                                                      {
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      }
                                                    and 
                                                      λ
                                                      >
                                                      0
                                                   .
                                             
                                             
                                                
                                                   Outputs: 
                                                   
                                                      
                                                         
                                                            π
                                                         
                                                         
                                                            λ
                                                         
                                                      
                                                      (
                                                      v
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   procedure 
                                                   SolveMYtree 
                                                   
                                                      v
                                                      ,
                                                      λ
                                                   ; 
                                                      G
                                                      ,
                                                      {
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      }
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            λ
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      ←
                                                      λ
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            u
                                                         
                                                         
                                                            
                                                               
                                                                  L
                                                               
                                                               
                                                                  0
                                                               
                                                            
                                                            +
                                                            1
                                                         
                                                      
                                                      ←
                                                      v
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   for 
                                                   
                                                      i
                                                      =
                                                      
                                                         
                                                            L
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                      
                                                      to
                                                      
                                                      1
                                                    
                                                   do 
                                                   
                                                   
                                                      ▹
                                                    Iteration runs from finest to coarsest scale.
                                             
                                             
                                                
                                                   
                                                   for all 
                                                   g(j) at scale i 
                                                   do
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                   
                                                      
                                                         (12)
                                                         
                                                            
                                                               
                                                                  u
                                                               
                                                               
                                                                  g
                                                                  (
                                                                  j
                                                                  )
                                                               
                                                               
                                                                  i
                                                               
                                                            
                                                            ←
                                                            {
                                                            
                                                               
                                                                  
                                                                     
                                                                        0
                                                                     
                                                                     
                                                                        if
                                                                        
                                                                        ‖
                                                                        
                                                                           
                                                                              u
                                                                           
                                                                           
                                                                              g
                                                                              (
                                                                              j
                                                                              )
                                                                           
                                                                           
                                                                              i
                                                                              +
                                                                              1
                                                                           
                                                                        
                                                                        
                                                                           
                                                                              ‖
                                                                           
                                                                           
                                                                              2
                                                                           
                                                                        
                                                                        ≤
                                                                        
                                                                           
                                                                              λ
                                                                           
                                                                           
                                                                              j
                                                                           
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        
                                                                           
                                                                              
                                                                                 ‖
                                                                                 
                                                                                    
                                                                                       u
                                                                                    
                                                                                    
                                                                                       g
                                                                                       (
                                                                                       j
                                                                                       )
                                                                                    
                                                                                    
                                                                                       i
                                                                                       +
                                                                                       1
                                                                                    
                                                                                 
                                                                                 
                                                                                    
                                                                                       ‖
                                                                                    
                                                                                    
                                                                                       2
                                                                                    
                                                                                 
                                                                                 −
                                                                                 
                                                                                    
                                                                                       λ
                                                                                    
                                                                                    
                                                                                       j
                                                                                    
                                                                                 
                                                                              
                                                                              
                                                                                 ‖
                                                                                 
                                                                                    
                                                                                       u
                                                                                    
                                                                                    
                                                                                       g
                                                                                       (
                                                                                       j
                                                                                       )
                                                                                    
                                                                                    
                                                                                       i
                                                                                       +
                                                                                       1
                                                                                    
                                                                                 
                                                                                 
                                                                                    
                                                                                       ‖
                                                                                    
                                                                                    
                                                                                       2
                                                                                    
                                                                                 
                                                                              
                                                                           
                                                                        
                                                                        
                                                                           
                                                                              u
                                                                           
                                                                           
                                                                              g
                                                                              (
                                                                              j
                                                                              )
                                                                              )
                                                                           
                                                                           
                                                                              i
                                                                              +
                                                                              1
                                                                           
                                                                        
                                                                     
                                                                     
                                                                        if
                                                                        
                                                                        ‖
                                                                        
                                                                           
                                                                              u
                                                                           
                                                                           
                                                                              g
                                                                              (
                                                                              j
                                                                              )
                                                                           
                                                                           
                                                                              i
                                                                              +
                                                                              1
                                                                           
                                                                        
                                                                        
                                                                           
                                                                              ‖
                                                                           
                                                                           
                                                                              2
                                                                           
                                                                        
                                                                        >
                                                                        
                                                                           
                                                                              λ
                                                                           
                                                                           
                                                                              j
                                                                           
                                                                        
                                                                        ,
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   forall
                                                
                                             
                                             
                                                
                                                   
                                                   end for
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            π
                                                         
                                                         
                                                            λ
                                                         
                                                      
                                                      (
                                                      v
                                                      )
                                                      ←
                                                      
                                                         
                                                            u
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   end procedure
                                                
                                             
                                          
                                       
                                    
                                 
                              

For practical applications, an important aspect to be specified is the value of the regularisation parameter λ. Although there exist well-established criteria for selecting λ for the standard lasso and related problems when 
                              A
                            is orthonormal, such criteria do not apply for the case of overlapping groups. In recent papers involving structured regularisers with overlapping groups, selection of the regularisation parameter has been done empirically using simulations. For instance, in [30] a numerical study is carried out to relate the value of λ with the expected reduction of noise variance for uncorrelated white Gaussian noise. The offered values depend on the choice of block structure in the regulariser. In [10], a grid of values for a pair of regularisation parameters is evaluated and the best pair is selected graphically.

The approach proposed in this paper is based on theoretical results for regularised M-estimators with decomposable regularisers [65]. It is easy to see that the highly structured regulariser used in (6) is decomposable in the sense defined in [65]. Let 
                              
                                 
                                    
                                       
                                          θ
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    λ
                                 
                              
                            denote the solution to (6) for a given value of λ. It is shown in that paper that theoretical guarantees on 
                              ∥
                              
                                 
                                    
                                       
                                          θ
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    λ
                                 
                              
                              −
                              
                                 
                                    θ
                                 
                                 
                                    o
                                 
                              
                              ∥
                            can be found provided
                              
                                 (13)
                                 
                                    λ
                                    ≥
                                    2
                                    
                                       
                                          Ω
                                       
                                       
                                          1
                                          ,
                                          2
                                       
                                       
                                          ⁎
                                       
                                    
                                    (
                                    ∇
                                    L
                                    (
                                    
                                       
                                          θ
                                       
                                       
                                          o
                                       
                                    
                                    )
                                    )
                                    ,
                                 
                              
                           where 
                              
                                 
                                    Ω
                                 
                                 
                                    1
                                    ,
                                    2
                                 
                                 
                                    ⁎
                                 
                              
                            stands for the dual of the regulariser 
                              
                                 
                                    Ω
                                 
                                 
                                    1
                                    ,
                                    2
                                 
                              
                           , 
                              
                                 
                                    θ
                                 
                                 
                                    o
                                 
                              
                            is the true vector of coefficients under the tree-structured model, and 
                              L
                            is the loss function, which in this paper is the squared-error loss. Following this, we require
                              
                                 (14)
                                 
                                    λ
                                    ≥
                                    2
                                    ‖
                                    
                                       
                                          w
                                       
                                       
                                          i
                                       
                                    
                                    ‖
                                    
                                       
                                          ψ
                                       
                                       
                                          g
                                          (
                                          i
                                          )
                                       
                                    
                                    
                                       
                                          ‖
                                       
                                       
                                          2
                                       
                                    
                                    
                                       
                                          ‖
                                       
                                       
                                          ∞
                                       
                                    
                                    ,
                                 
                              
                           with 
                              ψ
                            the DTCWT of the noise 
                              η
                            in the model 
                              y
                              =
                              A
                              
                                 
                                    θ
                                 
                                 
                                    o
                                 
                              
                              +
                              η
                           .

Expression (14) is impossible to compute, since it involves the DTCWT of the true noise 
                              η
                           . Nevertheless, we can use simulations to find a bound for λ according to (14). The procedure involves generating a noise signal 
                              
                                 
                                    η
                                 
                                 
                                    i
                                 
                              
                            with variance 
                              
                                 
                                    σ
                                 
                                 
                                    η
                                 
                                 
                                    2
                                 
                              
                            and picking the maximum of 
                              S
                              =
                              max
                              {
                              
                                 
                                    w
                                 
                                 
                                    i
                                 
                              
                              ‖
                              
                                 
                                    ψ
                                 
                                 
                                    g
                                    (
                                    i
                                    )
                                 
                              
                              
                                 
                                    ‖
                                 
                                 
                                    2
                                 
                              
                              }
                            using the non-adapted weights 
                              {
                              
                                 
                                    w
                                 
                                 
                                    i
                                 
                              
                              }
                           . After repeating the steps to obtain a large number of replicates of S, the distribution of 
                              
                                 
                                    S
                                 
                                 
                                    ˜
                                 
                              
                              =
                              2
                              S
                              /
                              σ
                            is found to be invariant. Thus, we can use a quantile of the distribution of S to set a bound for λ that holds with high probability. For uncorrelated white Gussian noise and using the 0.95 quantile of the empirical distribution, we set 
                              λ
                              =
                              0.568
                              
                                 
                                    σ
                                 
                                 
                                    ^
                                 
                              
                           , with 
                              
                                 
                                    σ
                                 
                                 
                                    ^
                                 
                              
                            being an estimate of the noise variance.

An overall algorithm to implement the proposed method is shown in Algorithm 3, which joins the optimisation steps and the procedure to detect the point of salient features discussed in the current section. The evolution of the objective function as the number of iterations increases within the main loop in the denosing algorithm is shown in Fig. 3
                           . Shown curve corresponds to the piecewise-polynomial signal from WaveLab [66], corrupted with white Gaussian noise of variance 
                              
                                 
                                    σ
                                 
                                 
                                    η
                                 
                                 
                                    2
                                 
                              
                              =
                              4
                           . Similar evolutions are obtained for other types of signals and noise levels. It can be seen that convergence is monotone and little improvement is gained after 20 iterations. In Appendix A, the performance obtained with λ chosen as explained in the previous section is compared against the best performance obtained with Algorithm 3 using a fine grid of values of λ. The influence of r and n
                           0 on the overall denoisng procedure is analysed in Appendix B. 
                              Algorithm 3
                              Adaptive tree-structured wavelet shrinkage. 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   Inputs: y; grouping structure 
                                                      G
                                                    and related prior weights 
                                                      {
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      }
                                                   .
                                             
                                             
                                                
                                                   Outputs: Denoised signal 
                                                      
                                                         
                                                            z
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   procedure 
                                                   Denoising 
                                                   
                                                      y
                                                      ;
                                                      
                                                      G
                                                      ,
                                                      {
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      }
                                                   , 
                                                      r
                                                      ,
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            K
                                                         
                                                         
                                                            r
                                                            ,
                                                            
                                                               
                                                                  n
                                                               
                                                               
                                                                  0
                                                               
                                                            
                                                         
                                                      
                                                      ←
                                                      
                                                         DetectPoi
                                                      
                                                      (
                                                      y
                                                      ;
                                                      r
                                                      ,
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                      )
                                                    
                                                   
                                                   
                                                      ▹
                                                    see Algorithm 1.
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  G
                                                               
                                                               
                                                                  ˇ
                                                               
                                                            
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      ←
                                                      Find
                                                      
                                                      groups
                                                      
                                                      in
                                                      
                                                      G
                                                      
                                                      related
                                                      
                                                      to
                                                      
                                                      
                                                         
                                                            K
                                                         
                                                         
                                                            r
                                                            ,
                                                            
                                                               
                                                                  n
                                                               
                                                               
                                                                  0
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   Set 
                                                      x
                                                      ←
                                                      Compute
                                                      
                                                      DTCWT
                                                      (
                                                      y
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  σ
                                                               
                                                               
                                                                  ^
                                                               
                                                            
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      ←
                                                      Estimate
                                                      
                                                      noise
                                                      
                                                      variance
                                                      
                                                      from
                                                      
                                                      x
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      α
                                                      ←
                                                      Set
                                                      
                                                      shrinkage
                                                      
                                                      factor
                                                      
                                                      according
                                                      
                                                      to
                                                      
                                                      
                                                         
                                                            σ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      {
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      }
                                                      ←
                                                      Adapt
                                                      
                                                      weights
                                                      {
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      }
                                                      ,
                                                      
                                                      from
                                                      (
                                                      
                                                         
                                                            
                                                               
                                                                  G
                                                               
                                                               
                                                                  ˇ
                                                               
                                                            
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      ,
                                                      α
                                                      )
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                      ▹
                                                    see (7).
                                             
                                             
                                                
                                                   
                                                   
                                                      λ
                                                      ←
                                                      Set
                                                      λ
                                                      
                                                      according
                                                      
                                                      to
                                                      
                                                      
                                                         
                                                            σ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                   
                                                   
                                                   
                                                   
                                                   
                                                      ▹
                                                    see (14) and comments below it.
                                             
                                             
                                                
                                                   Set 
                                                      L
                                                      =
                                                      1
                                                      ,
                                                      
                                                      ζ
                                                      =
                                                      1
                                                      ,
                                                      
                                                      
                                                         
                                                            ζ
                                                         
                                                         
                                                            p
                                                         
                                                      
                                                      =
                                                      0
                                                      ;
                                                      
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            p
                                                         
                                                      
                                                      =
                                                      x
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   repeat
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      β
                                                      ←
                                                      (
                                                      
                                                         
                                                            ζ
                                                         
                                                         
                                                            p
                                                         
                                                      
                                                      −
                                                      1
                                                      )
                                                      /
                                                      ζ
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      s
                                                      ←
                                                      x
                                                      +
                                                      β
                                                      (
                                                      x
                                                      −
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            p
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      G
                                                      ←
                                                      Compute
                                                      
                                                      gradient
                                                      
                                                      from
                                                      
                                                      y
                                                      ,
                                                      s
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   while 
                                                   
                                                      
                                                         
                                                            ‖
                                                            A
                                                            (
                                                            x
                                                            −
                                                            s
                                                            )
                                                            ‖
                                                         
                                                         
                                                            2
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      >
                                                      L
                                                      
                                                         
                                                            ‖
                                                            x
                                                            −
                                                            s
                                                            ‖
                                                         
                                                         
                                                            2
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                   do
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                   
                                                      v
                                                      ←
                                                      s
                                                      −
                                                      G
                                                      /
                                                      L
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                   
                                                      x
                                                      ←
                                                      
                                                         SolveMYtree
                                                      
                                                      (
                                                      v
                                                      ,
                                                      λ
                                                      /
                                                      L
                                                      ;
                                                      G
                                                      ,
                                                      {
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      }
                                                      )
                                                   
                                                   
                                                   
                                                   
                                                   
                                                      ▹
                                                    see Algorithm 3
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                   
                                                      L
                                                      ←
                                                      max
                                                      (
                                                      2
                                                      L
                                                      ,
                                                      
                                                         
                                                            ‖
                                                            (
                                                            x
                                                            −
                                                            s
                                                            )
                                                            ‖
                                                         
                                                         
                                                            2
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      /
                                                      
                                                         
                                                            ‖
                                                            A
                                                            (
                                                            x
                                                            −
                                                            s
                                                            )
                                                            ‖
                                                         
                                                         
                                                            2
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   end while
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      (
                                                      ζ
                                                      ,
                                                      
                                                         
                                                            ζ
                                                         
                                                         
                                                            p
                                                         
                                                      
                                                      )
                                                      ←
                                                      Update
                                                      (
                                                      ζ
                                                      ,
                                                      
                                                         
                                                            ζ
                                                         
                                                         
                                                            p
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   until convergence
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                      ←
                                                      x
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            z
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                      ←
                                                      Compute
                                                      
                                                      IDTCWT
                                                      (
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   end procedure
                                                
                                             
                                          
                                       
                                    
                                 
                              

@&#EXPERIMENTS AND RESULTS@&#

To assess the performance of the proposed method, simulation studies were carried out using synthetic signals from the WaveLab Toolbox [66], which have been used extensively for benchmarking wavelet-based denoising methods. The Blocks, Bumps, Piecewise-Regular (PR) and Piecewise-Polynomial (PP) signals were chosen, since they comprise smooth segments with jumps and bumps and serve to illustrate the kind of signals targeted to by the proposed method. All test signals were generated with N=1024 sample points. Independent and identically distributed white Gaussian noise was added to the signals, at different SNR determined by the variance 
                        
                           
                              σ
                           
                           
                              η
                           
                           
                              2
                           
                        
                      of the noise. Near-symmetric (13,19)-tap filters were used to compute the first stage of the decomposition, while Q-Shift (14,14)-tap filters were used for the rest of the scales. Preliminary experiments with other combinations of filters showed that the effect of this choice on the performance of the proposed method was negligible for most of the tested conditions. Decomposition was carried out up to level 
                        
                           
                              L
                           
                           
                              0
                           
                        
                        =
                        7
                     . Implementation of Algorithm 3 was done in MATLAB. The optimisation code was adapted from [67] to deal with complex variables. For the detection of salient features, interpolation of coefficient magnitudes at each scale was carried out using a cubic interpolator, although the proposed method was not found sensitive to the type of interpolator chosen.

A key characteristic of the proposed method is the use of the DTCWT instead of the DWT. In this subsection we illustrate the benefits of this choice. A simulation was run to assess the performance of the proposed tree-structured estimators for both DTCWT and DWT decompositions, using the same grouping structure for both of them. Both the adaptive methodology exploiting detection of salient features (A-DTCWT and A-DWT) and the alternative methods with the weights of the groups fixed a priori were assessed (F-DTCWT and F-DWT). In addition, for the adaptive structured estimators, results obtained using the oracle locations of salient features (O-DTCWT and O-DWT) were included in order to explore whether the choice of transformation affects the detection of salient features, the denoising process or both of them. The results of 100 experiments were averaged to assess the performance of each method. In each run, all the methods processed the same signal so that noise variability between realisations does not contribute to a difference in performance between the methods. To avoid the influence of the choice of the regularisation parameter for the adaptive methods, a set of 1000 uniformly spaced samples of λ in the interval 
                           [
                           0
                           ,
                           
                              
                                 λ
                              
                              
                                 max
                              
                           
                           ]
                         were tried out for each method at each run. λ
                        
                           max
                         is such that for 
                           λ
                           >
                           
                              
                                 λ
                              
                              
                                 max
                              
                           
                        , the resulting estimate is a zero vector. λ
                        
                           max
                         was estimated in each run using the algorithm proposed in [64]. Only the best estimate across the different values of λ was picked as the result corresponding to the run, both for DTCWT and DWT-based methods.

Obtained results are shown in Fig. 4
                        . Reconstruction errors for 
                           
                              
                                 σ
                              
                              
                                 η
                              
                              
                                 2
                              
                           
                           =
                           4
                         only are reported, since very similar figures are obtained for other signal to noise ratios. It can be seen that methods using the DTCWT significantly outperform alternatives of the same algorithms that use the DWT. Furthermore, it can be seen that the difference in performance between O-DTCWT and A-DTCWT is roughly the same as between O-DWT and A-DWT, albeit the O-DTCWT clearly outperforms O-DWT. Thus, the main benefit of the DTCWT over the DWT lies in the signal denoising step and not in the detection of salient features. These results, together with the fact that the magnitude of the (near shift-invariant) DTCWT coefficients have stronger dependence in inter-scale and intra-scale neighbourhoods than those of the DWT, suggest that the assumed tree-structured models are better suited to DTCWT decompositions than to DWT.

Examples of obtained results are shown in Figs. 5 and 6
                        
                        . The variance of noise increases from left to right in each figure, starting with the noise-free condition in panel (a). In each panel, the upper box shows the analysed signal, the middle-box shows the estimated δ and the box at the bottom shows the detected locations. The choice of the minimum length of interval r and minimum persistence n
                        0 for each signal remained fixed across the different noise level. In particular, values r=4 and 
                           
                              
                                 n
                              
                              
                                 0
                              
                           
                           =
                           7
                         were used for both signals, and fifteen different values of τ were used to assess persistence. It can be seen that for the noise-free conditions and the first noisy conditions, the algorithm achieves perfect detection of the points of interest. For the most severe noisy condition, the algorithm introduces some false positives, two in the case of the PR signal and only one for the PP signal. The rate of false positives can be controlled by modifying the values of r and the minimum persistence n
                        0. An increase in any of them, most notably in n
                        0, reduces the number of detections. As a trade-off, some points of interest will be missed.

ROC curves were constructed to facilitate assessment of the performance of the salient feature detector. For a given noise level, the detection algorithm was run with r taking values in 
                           {
                           1
                           ,
                           3
                           ,
                           5
                           ,
                           7
                           ,
                           9
                           }
                         and n
                        0 taking integer values from 1 to 50. The set of thresholds 
                           {
                           
                              
                                 τ
                              
                              
                                 n
                              
                           
                           }
                         used to evaluate persistence of candidate locations was determined using a regular grid of fifty points in the interval 
                           [
                           
                              
                                 Q
                              
                              
                                 0.50
                              
                           
                           ,
                           
                              
                                 Q
                              
                              
                                 0.95
                              
                           
                           ]
                        . Each point in the ROC curve gives the true positives rate (TPR) and the false positives rate (FPR) for a given value of the persistence parameter n
                        0, averaged over 500 replicates of the experiment. Fig. 7
                         shows the ROC curves obtained for PR and PP signals, for three different noise levels. For both signals, it can be seen that the detection ability degrades with increasing noise levels, as showed by the maximum attained values of TPR. It is important to clarify that these low TPR are in fact due mostly to detection of salient features in locations close to the true ones. Computation of the TPR is sensitive to these displacements of the detected points relative to the true ones. Nevertheless, when plotting such detections like in Figs. 5 and 6, they are usually not noticeable. It can be seen also that the different choices of the parameter r lead to very similar ROC curves. Comparing the figures obtained for both signals shows that better performance is achieved for the PP signal; this suggests that jumps are easier to detect than bumps.

A study of the influence of the choice of parameters r and n
                        0 on the performance of the overall denoising process as proposed in Algorithm 3 is left to Appendix B.

To illustrate the effect of weight adaptation in the mixed-norm regulariser, denoising results were obtained using the following methods: (i) proposed method with locations of salient features given by an oracle (O-DTCWT); (ii) proposed method with locations of salient features estimated by the proposed detection algorithm (A-DTCWT); (iii) regularised method using the same structured prior but with weights fixed in advance (F-DTCWT); and (iv) standard soft-thresholding algorithm as proposed in [2] (ST). Results for ST were included as a baseline, to help appreciate whether the added complexity of the proposed method was worth the gain in efficiency. Performance is measured as both the 
                           ∥
                           ·
                           
                              
                                 ∥
                              
                              
                                 ∞
                              
                           
                         and 
                           ∥
                           ·
                           
                              
                                 ∥
                              
                              
                                 2
                              
                           
                         of the reconstruction errors, averaged over 100 replicates of the experiment. Informed by the ROC analysis in Section 4.1, the parameters that control the detection of salient features were set to r=4 and 
                           
                              
                                 n
                              
                              
                                 0
                              
                           
                           =
                           7
                        , with persistence measured using 15 different values of τ sampled regularly on the interval specified by the quantiles 
                           
                              
                                 Q
                              
                              
                                 0.5
                              
                           
                         and 
                           
                              
                                 Q
                              
                              
                                 0.95
                              
                           
                        . This choice for 
                           
                              
                                 n
                              
                              
                                 0
                              
                           
                           =
                           7
                         proved convenient for all signals and all noise levels, representing a good compromise between TPR and FPR. Other combinations of 
                           (
                           r
                           ,
                           
                              
                                 n
                              
                              
                                 0
                              
                           
                           )
                         are similarly capable, as shown in Appendix B.

For all the methods except ST, initial values of the weights were set according to the cardinality of each group, using
                           1
                        
                        
                           1
                           
                              
                                 |
                                 ·
                                 |
                               here denotes cardinality.
                         
                        
                           
                              
                                 w
                              
                              
                                 g
                              
                           
                           =
                           |
                           
                              
                                 θ
                              
                              
                                 g
                              
                           
                           
                              
                                 |
                              
                              
                                 1
                                 /
                                 4
                              
                           
                        . These weights remained fixed for F-DTCWT but were modified using information from the location of salient features for O-DTCWT and A-DTCWT. For the adaptive methods, given the locations of the salient features, the weights of the corresponding groups in the regulariser were shrunk using 
                           
                              
                                 α
                              
                              
                                 g
                              
                           
                           =
                           min
                           (
                           1
                           ,
                           
                              
                                 σ
                              
                              
                                 ^
                              
                           
                           /
                           
                              
                                 σ
                              
                              
                                 0
                              
                           
                        ), with 
                           
                              
                                 σ
                              
                              
                                 0
                              
                           
                           =
                           4
                        , 
                           
                              
                                 σ
                              
                              
                                 ^
                              
                           
                           =
                           MAD
                           /
                           0.6745
                        , and MAD being the median absolute value of the appropriately normalised wavelet coefficients at the finest resolution, as proposed for the standard ST method [2]. With this choice of α
                        
                           g
                        , in a noise-free scenario the weights w
                        
                           g
                         related to the locations of salient features are set close to zero, while in very noisy scenarios the weights will remain unchanged.
                           2
                        
                        
                           2
                           Note that α
                              
                                 g
                               should be such that it favours retention of involved groups, but not force it. In this sense, for very mild noisy conditions, it might be appropriate to lower bound the value of α
                              
                                 g
                              .
                        
                     

Results are shown in Table 1
                        . For Blocks, Bumps and PP signals, it can be seen that the proposed method involving an adaptive regulariser outperforms the other alternatives for all the tested conditions, both when using 
                           ‖
                           ·
                           
                              
                                 ‖
                              
                              
                                 ∞
                              
                           
                         or 
                           ‖
                           ·
                           
                              
                                 ‖
                              
                              
                                 2
                              
                           
                         as the measure of performance. It is important to note that these conclusions are valid for the adaptive regulariser based on oracle information as well as for the adaptive approach using the proposed algorithm to detect the locations of the salient features of the signal. Indeed, results show that the practical method achieves scores very similar to those for the oracle version and the difference between them is not significant for moderate levels of noise. This can be visualised in Fig. 8
                        , which shows boxplots of the obtained reconstruction errors when the variance of the noise is 
                           
                              
                                 σ
                              
                              
                                 η
                              
                              
                                 2
                              
                           
                           =
                           4
                        . It is clear from the figure that results obtained with the practical implementation are almost identical to those achieved when the locations of the salient features are known. In addition, variance of the obtained errors is similar for the proposed method and standard soft-thresholding for all tested conditions. It is interesting to note that, although experiments have considered Gaussian noise only, neither the overall method nor the strategy to select λ assumes this condition.


                        Fig. 9
                         shows the performance of the proposed method in suppressing noise from a real electromyographic (EMG) signal of a healthy person. The signal was taken from the Physionet data bank.
                           3
                        
                        
                           3
                           
                              http://physionet.org/physiobank/database/emgdb/.
                         Uncorrelated white Gaussian noise of variance 
                           
                              
                                 σ
                              
                              
                                 η
                              
                              
                                 2
                              
                           
                           =
                           4
                         was added to the standardised EMG. To aid visualisation, only a segment cut at random from the whole signal was used in the experiment. It can be seen that ST oversmoothes the signal significantly, thus loosing many details. The estimated signal using F-DTCWT preserves more details than ST but a reduced dynamic range, especially in the peaks and bumps, is still evident. On the contrary, the A-DTCWT estimate better preserves details and dynamic range of the main features of the signal. For this example, the relative ℓ2-norm of the reconstruction error is 0.421 for ST, 0.319 for F-DTCWT and 0.172 for A-DTCWT. For 
                           ‖
                           z
                           −
                           
                              
                                 z
                              
                              
                                 ^
                              
                           
                           
                              
                                 ‖
                              
                              
                                 ∞
                              
                           
                           /
                           ‖
                           z
                           
                              
                                 ‖
                              
                              
                                 ∞
                              
                           
                        , obtained results for the shown example are 0.425 for ST, 0.289 for F-DTCWT and 0.169 for A-DTCWT. Both measures show the superiority of the proposed method for this denoising task. To check that the obtained results are not a consequence of a favourable choice of fragment of the EMG signal, 100 replicates of the experiment were run, each with a segment of length N=1024 cut at random from the whole signal. Averaged results can be seen in Table 2
                        , showing the same trend as for the realisation shown in Fig. 9.

In this work we have introduced an adaptive structured wavelet shrinkage estimator. In the proposed method, the weights in a hierarchical structured regulariser are modified in order to favour the retention of coefficients related to the locations of salient features in the signal. The detection of such locations is carried out using information extracted from the wavelet decomposition. Denoising experiments with synthetic and EMG signals showed that the adaptive scheme outperforms the non-adaptive structured estimators. These results encourage the extension of the adaptive scheme to images, in order to improve preservation of edges in denoising applications. Further extensions could also involve relaxing the hierarchical structure to allow for more general dictionaries to replace the DTCWT used in the present work. Alternatively a union-of-basis-framework could be introduced to catch different features in the signal.

@&#ACKNOWLEDGEMENTS@&#

Authors would like to thank Professor Nick Kingsbury for providing the code to compute the DTCWT. Most of this work was completed during a visit of D.T. to the Department of Statistical Science, University College London. D.T. was also supported by CONICET under Grant no. PIP 11220110100742; ANPCyT under Grant nos. PICT 2012-2590 and 2011-2440; and UNL under Grant no. CAI+D 201101-00062LI.

The goodness of the proposed procedure to select the value of the regularisation parameter λ is assessed. The reconstruction error obtained with the proposed λ is compared to the minimum reconstruction error achieved using a fine grid of values of λ. The rest of the parameters were set as described in Section 4.3. The ℓ2-norm of the error is used for comparison. Results of 50 experiments were averaged to get the reported results. A set of 1000 uniformly spaced samples of λ in the interval 
                        [
                        0
                        ,
                        
                           
                              λ
                           
                           
                              max
                           
                        
                        ]
                      were tried out for each method at each run. λ
                     
                        max
                      is such that for 
                        λ
                        >
                        
                           
                              λ
                           
                           
                              max
                           
                        
                        >
                        0
                     , the resulting estimate is a zero vector. 
                        
                           
                              λ
                           
                           
                              max
                           
                        
                      was estimated in each case using the Algorithm proposed in [64].

Obtained results are shown in Fig. A1
                     . O-best and A-best denote results corresponding to the best choice of the regularisation parameter when using the true location of the salient features or estimated ones, respectively. For methods O-best and A-best, only the best estimate across the different values of λ was picked as the result corresponding to the run. Results for the non-adaptive tree-grouped estimator are also included for comparison. It can be seen that the difference in performance between the best selection of λ and the one proposed here is always significantly smaller than the difference in performance between the non-adaptive alternative F-best and the adaptive one A-DTCWT. This result shows the advantage of adaptation beyond the fine tunning of the regularisation parameter. Furthermore, for methods A-DTCWT and A-best that do not use oracle information about the location of salient features, it can be seen that the difference in performance between them is smaller than for O-best versus O-DTCWT. When noise increases, it can be seen also that the difference in performance between A-best and A-DTCWT is indeed smaller than the difference between O-best and A-best. This suggests that the performance of the denoising method is more sensitive to the correct detection of salient features than to the deviation of the proposed value for λ from its optimal choice. Moreover, the overall performance of the adaptive method due to practical implementation constraints is still significantly better than the performance of tree-structured estimators with the regulariser fixed a priori. These results indicate that, at a very modest cost to simplicity, the suggested procedure for selecting λ is suitable for practical applications.

The effect of the parameters 
                        (
                        r
                        ,
                        
                           
                              n
                           
                           
                              0
                           
                        
                        )
                      on the accuracy of the detection stage of the method was assessed in Section 4.2. Here, the influence of these parameters on the final outcome of Algorithm 3 is addressed. A simulation was run using the synthetic signals considered in Section 4, corrupted with uncorrelated white Gaussian noise. Results of 50 experiments were used to get the reported results. For each run, the regularisation parameter was set as discussed in Section 3.3.2 and a grid of values 
                        (
                        
                           
                              r
                           
                           
                              i
                           
                        
                        ,
                        
                           
                              n
                           
                           
                              j
                           
                        
                        )
                      was evaluated for the detection stage. For each pair of parameter values, the resulting reconstruction error measured in the ℓ2-norm was stored.

Averaged results over the 50 runs are shown in Fig. B1
                     . It can be seen that for all signals and noise levels, denoising performance suffers for large values of the persistence parameter n
                     0 and radius r. These large values account for situations where only large isolated peaks in 
                        δ
                        (
                        n
                        )
                      are detected increasing the number of false negatives. When the noise is weak, there is little effect of the choice of 
                        (
                        r
                        ,
                        
                           
                              n
                           
                           
                              0
                           
                        
                        )
                      on the denoising result; a wide range of values of the parameters, except the largest ones, obtain very similar reconstruction errors. When the signal to noise ratio becomes small, as in the situation in the plots on the right of Fig. B1, small values of n
                     0 and r also affect negatively the denoising performance. This is expected, since this leads to an increase in the false positive rate of the detection stage, meaning that noisy coefficients are forced to be preserved during shrinkage. Nevertheless, figure shows that there is a wide range of values in the middle of the grid so that, for a fixed choice around (r=4, n
                     0=6), the performance is good and near the best one regardless of the signal and noise level.

@&#REFERENCES@&#

