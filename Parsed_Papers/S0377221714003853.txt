@&#MAIN-TITLE@&#Decomposition and local search based methods for the traveling umpire problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose two complementary heuristic methods for the traveling umpire problem.


                        
                        
                           
                           We present a new lower bound methodology for the traveling umpire problem.


                        
                        
                           
                           The heuristic methods improve many best-known objective values known in literature.


                        
                        
                           
                           The lower bound methodology improves all best lower bounds known in literature.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

OR in sports

Traveling umpire problem

Heuristics

Iterated local search

Decomposition

@&#ABSTRACT@&#


               
               
                  The Traveling Umpire Problem (TUP) is a challenging combinatorial optimization problem based on scheduling umpires for Major League Baseball. The TUP aims at assigning umpire crews to the games of a fixed tournament, minimizing the travel distance of the umpires. The present paper introduces two complementary heuristic solution approaches for the TUP. A new method called enhanced iterative deepening search with leaf node improvements (IDLI) generates schedules in several stages by subsequently considering parts of the problem. The second approach is a custom iterated local search algorithm (ILS) with a step counting hill climbing acceptance criterion. IDLI generates new best solutions for many small and medium sized benchmark instances. ILS produces significant improvements for the largest benchmark instances. In addition, the article introduces a new decomposition methodology for generating lower bounds, which improves all known lower bounds for the benchmark instances.
               
            

Sports scheduling enjoys an ever increasing interest of the operations research community. The focus lies mainly on scheduling the games of a competition or tournament. Scheduling tournaments turns out to be a challenging task: a small number of participants and rounds results in a large number of possible combinations, while the fraction of desired solutions is small due to context specific constraints and objectives. To master this complexity, researchers apply a wide range of combinatorial optimization techniques.

Sports scheduling, be it to a lesser extent, also considers assigning officials to the games in a tournament for tennis (Farmer, Smith, & Miller, 2007), football (Alarcón, Durán, & Guajardo, 2014), cricket (Wright, 1991), etc. Duarte, Ribeiro, Urrutia, and Haeusler (2007b, 2007a) introduce the Referee Assignment Problem (RAP), which considers the assignment of a number of referees with different qualifications to the games in a fixed tournament. In an area other than sports, Lamghari and Ferland (2011) consider the assignment of judges for the John Molson International Case Competition. Kendall, Knust, Ribeiro, and Urrutia (2010) give a complete reference of the current state of sports scheduling in operations research.

The present paper focuses on the Traveling Umpire Problem (TUP), which is an academic version of the real world Major League Baseball umpire scheduling problem (MLB-USP). Trick and Yildiz (2007) introduce the TUP and describe it in more detail later (Trick, Yildiz, & Yunes, 2012), comparing the problem to the MLB-USP (Evans, 1988). MLB-USP defines the rules and regulations imposed by the baseball league and umpire union for assigning 17 umpire crews, each consisting of four umpires, to cover all 780 series of an MLB tournament. Each series contains two up to four consecutive games between the same two teams out of all 30 teams. Even though only taking into account the most important constraints, the academic problem retains the most important characteristics of the real world umpire scheduling problem.

The TUP is related to the Traveling Tournament Problem (TTP, Easton, Nemhauser, & Trick (2001)). The latter aims at finding a double round robin schedule for a season of Major League Baseball. Given 
                        
                           2
                           n
                        
                      teams, the tournament consists of 
                        
                           4
                           n
                           -
                           2
                        
                      rounds in which each team plays against exactly one other team in every round. The TUP considers assigning n umpire crews to the games in such a fixed TTP tournament. Its goal is obtaining a schedule which minimizes the travel distance of the umpire crews, while taking into account the following constraints:
                        
                           C1. Every game in the tournament is officiated by exactly one umpire crew.

C2. An umpire crew officiates exactly one game per round.

C3. Every umpire crew should visit the home of every team at least once.

C4. An umpire crew must wait 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          1
                                       
                                    
                                    -
                                    1
                                 
                               rounds before revisiting a team’s home.

C5. An umpire crew must wait 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          2
                                       
                                    
                                    -
                                    1
                                 
                               rounds before officiating the same team again.

With
                        
                           (1)
                           
                              
                                 
                                    q
                                 
                                 
                                    1
                                 
                              
                              =
                              n
                              -
                              
                                 
                                    d
                                 
                                 
                                    1
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              
                                 
                                    q
                                 
                                 
                                    2
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          
                                             n
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                              -
                              
                                 
                                    d
                                 
                                 
                                    2
                                 
                              
                           
                        
                     whereby the values for parameters 
                        
                           
                              
                                 d
                              
                              
                                 1
                              
                           
                        
                      and 
                        
                           
                              
                                 d
                              
                              
                                 2
                              
                           
                        
                      range from 0 to n and 0 to 
                        
                           
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                           
                        
                     , respectively. Higher q values make the problem more constrained and drastically reduce the number of feasible solutions. Yildiz (2008) discusses the effect of different values of parameters 
                        
                           
                              
                                 q
                              
                              
                                 1
                              
                           
                        
                      and 
                        
                           
                              
                                 q
                              
                              
                                 2
                              
                           
                        
                      on the feasibility of the problem.

For simplicity, the above constraints and the remainder of this paper refer to umpire crews as a single umpire since a crew stays together throughout the whole season.

Although the complexity of the TUP is still open at the time of writing, the problem appears to be hard to solve. Minimizing the travel distance puts pressure on constraint C4 and C5 whereas enforcing constraints C4 and C5 increases the travel distance. Moreover, the assignment of one umpire influences the schedule of other umpires due to constraints C1 and C2. In addition, the problem description does not make a distinction between the different umpires. However, symmetrical solutions can be avoided by fixing the umpire assignments within a certain round. Trick et al. (2012) mention that the TUP can be seen as a special case of the vehicle routing problem with time windows.

The present paper presents two complementary heuristic approaches to the Traveling Umpire Problem. Enhanced iterative deepening search with leaf node improvements (IDLI) generates all partial schedules for a window of W rounds. The algorithm then greedily picks the best partial schedules to complete in subsequent stages. The second approach is a custom iterated local search algorithm (ILS) with a step counting hill climbing acceptance criterion. A steepest descent algorithm ensures all solutions are local optima before the ILS invokes the acceptance criterion. Finally, the article introduces a new decomposition methodology for generating tight lower bounds.

The structure of this paper is as follows: Section 2 presents an overview of the existing approaches to the TUP. Section 3 introduces the solution strategies and lower bound methodology. Section 4 reports and discusses computational results for benchmark instances. The last section summarizes conclusions and presents pointers for future research.


                     Trick and Yildiz (2007) introduce TUP and formulate it as an Integer Program (IP) and a Constraint Program (CP). The same paper presents a greedy matching heuristic (GMH) with Bender’s based modifications (GBNS). GBNS constructs a solution one round at a time by matching the umpires to games within the considered round. If the matching heuristic does not obtain a feasible matching at a certain round, GBNS examines the cause of the infeasibility and generates Benders’ cuts. A very large neighborhood search algorithm then uses the Benders’ cuts to resolve the infeasibility. The paper also tests the performance of the IP and CP formulations on benchmark instances and compares the results to those obtained by GBNS. The IP and CP formulation obtain solutions for relaxations of the benchmark instances, with 
                        
                           
                              
                                 q
                              
                              
                                 1
                              
                           
                           <
                           n
                        
                      and/or 
                        
                           
                              
                                 q
                              
                              
                                 2
                              
                           
                           <
                           ⌊
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                           ⌋
                        
                     . GBNS obtains solutions of higher quality in a shorter timespan, even for the most constrained versions of the benchmark instances.


                     Trick et al. (2012) present a simulated annealing algorithm with k-umpire neighborhood to both MLB-USP and TUP. The initial solution is constructed using GMH. The MLB-USP version of the algorithm obtains solutions of much higher quality than those constructed manually in previous years. The TUP version is capable of generating feasible solutions for relaxations of the larger benchmark instances.


                     Trick and Yildiz (2011) re-evaluate the performance of the algorithms presented by Trick and Yildiz (2007) on new benchmark instances. GBNS obtains the best results for a majority of the benchmark instances. New solver settings improve the performance of the CP and IP formulation.


                     Trick and Yildiz (2012) propose a genetic algorithm (GA) with a locally optimized crossover operator. Given two schedules and a round as crossover point, the crossover operator matches the rounds appearing before the crossover point in the first schedule to those appearing after the crossover point in the second schedule. The GA improves several of the best results for the TUP benchmark instances compared to the results obtained by Trick et al. (2012).


                     de Oliveira, de Souza, and Yunes (2014) strengthen the original IP formulation of Trick and Yildiz (2007) by removing one of the variables and some redundant constraints and by adding new valid inequalities. This noteworthy formulation improves all known lower bounds and is the first one capable of obtaining lower bounds for the larger problem instances. A relax-and-fix heuristic then uses this formulation to obtain solutions for the TUP. The relax-and-fix heuristic improves all best known solutions for the benchmark instances.

The following sections present two new approaches to the TUP. Before going into detail, the first section clarifies the choice behind the final approaches. The last section discusses a methodology for generating tight lower bounds for the TUP.

Initial experiments have been conducted using both branch and bound and local search. The branch and bound algorithm assigns umpires round by round to the games of the tournament. It reassigns previous umpires when no feasible assignment for an umpire has been found. The local search algorithm improves a given initial solution by randomly exchanging umpire assignments within a given round. It explores infeasible solutions by adding violations of the hard constraints as a penalty term to the objective function. Fig. 1
                         summarizes the results of initial experiments. It shows the performance of both algorithms as a function of the level of relaxation and the problem size.

Branch and bound performs well on small, non-relaxed benchmark instances (where 
                           
                              
                                 
                                    q
                                 
                                 
                                    1
                                 
                              
                              =
                              n
                           
                         and 
                           
                              
                                 
                                    q
                                 
                                 
                                    2
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          
                                             n
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                           
                        ). It is capable of pruning the search tree efficiently when the parameter values 
                           
                              
                                 
                                    q
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    q
                                 
                                 
                                    2
                                 
                              
                           
                         of constraints C4 and C5 are large, compared to the total number of rounds. However, its ability to obtain solutions within reasonable time decreases rapidly with increasing problem size and when relaxing the problem instances by decreasing the values of 
                           
                              
                                 
                                    q
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    q
                                 
                                 
                                    2
                                 
                              
                           
                        .

The local search algorithm stops in local optima that are infeasible with respect to constraints C4 and C5 when parameter values 
                           
                              
                                 
                                    q
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    q
                                 
                                 
                                    2
                                 
                              
                           
                         are large. When relaxing the problem instances by decreasing the parameter values, the performance of the local search algorithm increases, independently of the problem size.

Section 3.2 proposes a strategy to increase the performance of the initial branch and bound algorithm for larger problem instances, while retaining its performance for highly constrained versions of the instances. Section 3.3 improves the performance of the local search algorithm for more constrained versions of the instances.

The branch and bound algorithm from Section 3 is extended along the lines of iterative deepening search. It is therefore called enhanced iterative deepening search with leaf node improvements (IDLI). Fig. 2
                         shows a trace of the algorithm for a small problem instance. Algorithm 1 lists the pseudo-code.
                           Algorithm 1
                           Pseudocode IDLI 
                                 
                                    
                                 
                              
                           

Instead of assigning an umpire to every game in every round for the entire season of 
                           
                              4
                              n
                              -
                              2
                           
                         rounds, IDLI decomposes the problem into windows of 
                           
                              W
                              ⩽
                              4
                              n
                              -
                              2
                           
                         rounds each. The Solve-Window procedure starts by generating all possible solutions within the first window of rounds using branch and bound. This results in a list of partial feasible schedules, which are consecutively sorted by total travel distance. The partial solutions are feasible if constraints C1, C2, C4 and C5 are satisfied. Constraints C4 and C5 are respected at the window boundaries by limiting the possible assignments in the subsequent window, based on the assignments in the partial solution. If an umpire is assigned to a team (home location) 
                           
                              X
                              <
                              
                                 
                                    q
                                 
                                 
                                    2
                                 
                              
                           
                         (
                           
                              X
                              <
                              
                                 
                                    q
                                 
                                 
                                    1
                                 
                              
                           
                        ) rounds before the end of the window, the umpire cannot be reassigned to that team (home location) in the first 
                           
                              
                                 
                                    q
                                 
                                 
                                    2
                                 
                              
                              -
                              X
                           
                         (
                           
                              
                                 
                                    q
                                 
                                 
                                    1
                                 
                              
                              -
                              X
                           
                        ) rounds of the next window. Constraint C3 is only enforceable once the algorithm obtains a complete schedule.

The next action to be performed depends on the last round of the current window. If the end round of the window is not equal to 
                           
                              4
                              n
                              -
                              2
                           
                        , the schedules in the sorted list are partial schedules. The S best of these partial schedules will be completed recursively by invoking the Solve-Window procedure, whereby S is called the sample size.

The schedules in the sorted list are complete solutions for the given problem instance if the last round of the current window equals 
                           
                              4
                              n
                              -
                              2
                           
                        . The procedure evaluates whether constraint C3 is violated or not. If not, IDLI executes the steepest descent (Section 3.2.1) algorithm. It accepts the resulting solution as new best solution when the total travel distance is smaller than that of the current best solution. Once a solution has been accepted, an improvement procedure (Section 3.2.2) further improves the schedule.

IDLI invokes the same improvement procedure for the best solution out of 
                           
                              
                                 
                                    I
                                 
                                 
                                    i
                                 
                              
                           
                         unaccepted complete and feasible solutions to enlarge the sample set of solutions eligible to improvement. 
                           
                              
                                 
                                    I
                                 
                                 
                                    i
                                 
                              
                           
                         is called the improvement interval.

The steepest descent solves a perfect matching to construct the neighbors of a given solution. The matching is similar to that used in the greedy matching heuristic presented by Trick and Yildiz (2007). It returns the optimal assignment for all the umpires within a single round, while fixing the assignments of the umpires in the other rounds. The cost of assigning an umpire to a game A in the chosen round X is a weighted sum of (1) the travel distances from the umpires’ assignment in round 
                              
                                 X
                                 -
                                 1
                              
                            to the location of A and the travel distance from A to its assignment in round 
                              
                                 X
                                 +
                                 1
                              
                            and (2) the number of violated hard constraints, multiplied by a high value. The matching returns one assignment combination per round, which can be equal to the current assignment combination. Hence, the neighborhood consists of 
                              
                                 max
                                 (
                                 4
                                 n
                                 -
                                 2
                                 )
                              
                            neighbors. Once all possible neighbors have been generated, steepest descent selects the neighbor for which the objective function value of the solution improves most. The algorithm stops and returns the best solution found when no further improvement can be obtained.

The improvement procedure is a composition of two regular branch and bound algorithms. A forward branch and bound algorithm exploits the search space by considering alternative assignments in the last few rounds, keeping the first part of the schedule equal to that of the initial solution. A backward branch and bound algorithm performs the search in the other direction, exploiting the search space in the starting rounds of the schedule.

When IDLI invokes the improvement procedure, the backward branch and bound algorithm improves the solution for time 
                              
                                 
                                    
                                       T
                                    
                                    
                                       i
                                    
                                 
                              
                           , the improvement time. Afterwards, the forward branch and bound algorithm starts improving the resulting solution for time 
                              
                                 
                                    
                                       T
                                    
                                    
                                       i
                                    
                                 
                              
                           . This process is repeated until both the forward and backward branch and bound algorithm are incapable of further improving the resulting solution.

The initial local search algorithm described in Section 3.1 is incapable of obtaining feasible solutions to more constrained problem instance versions. An iterated local search algorithm (ILS, Lourenço, Martin, & Stützle (2003)) has been developed to cope with this characteristic. ILS is a hybrid single-solution based metaheuristic in which inner local search algorithms improve the current solution before applying the acceptance criterion of an outer metaheuristic.
                           Algorithm 2
                           Pseudocode ILS 
                                 
                                    
                                 
                              
                           

The proposed ILS uses a step counting hill climbing (SCHC, Bykov & Petrovic (2013)) outer metaheuristic, nested with the steepest descent algorithm described in Section 3.2. Algorithm 2 presents a high level structure of the ILS discussed in this section.

SCHC starts with a threshold equal to that of the objective value of an initial, randomly constructed, solution. It accepts every solution with an objective function value of higher quality than that of the current threshold. After a step of S iterations, SCHC updates the threshold with the objective function value of the current solution. The acceptance criterion is easily applicable because it consists of only a single parameter, the step size S.

To leave the local optimum in which the current solution resides, the Perturb procedure of the ILS sometimes performs fairly large perturbations of the schedule using an exchange move operator. The exchange move operator chooses a number of random rounds in the schedule. In every round, two umpires are chosen at random and their assignments are swapped. After applying the exchange move, the ILS improves the solution using the steepest descent algorithm. It ascertains that the result is a local optimum with respect to the assignment neighborhood before invoking the acceptance criterion of the SCHC.

The running time of the steepest descent algorithm increases with the number of rounds considered by the perturbation procedure. The Perturb procedure limits the number of rounds in a single perturbation to 12 in order to restrict the computational time. Moreover, the probability of considering i rounds in a single perturbation is given by the formula: 
                           
                              p
                              (
                              i
                              )
                              =
                              
                                 
                                    12
                                    -
                                    (
                                    i
                                    -
                                    1
                                    )
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          12
                                       
                                    
                                    (
                                    12
                                    -
                                    (
                                    j
                                    -
                                    1
                                    )
                                    )
                                 
                              
                           
                        .

The neighborhood structures are not too complex. Therefore, the evaluation of solutions is the most time consuming part of the ILS. A full evaluation of a schedule takes time 
                              
                                 O
                                 (
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                                 max
                                 (
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       q
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 )
                                 )
                              
                            because the evaluation function needs to iterate over n umpires for 
                              
                                 4
                                 n
                                 -
                                 2
                              
                            rounds, looking 
                              
                                 max
                                 (
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       q
                                    
                                    
                                       2
                                    
                                 
                                 )
                              
                            rounds ahead due to constraints C4 and C5. The ILS applies delta evaluation rather than evaluating the complete schedule after performing a move (Talbi, 2009). Delta evaluation takes advantage of two facts: (1) every move can be decomposed into a set of individual umpires for which the assignment changes and (2) provided the original move does not violate constraint C1 and C2, an assignment change for a single umpire does not affect other umpires. Only the parts of the schedule that are affected by a move operation need to be re-evaluated.

To be able to benefit from delta evaluation, the ILS stores a state of the current schedule. The state of the schedule consists of (1) the distance traveled by each umpire throughout the complete tournament, (2) the number violations for C3, C4 and C5, (3) the number of times every umpire has visited each team and (4) the number of times each umpire has visited a certain location (team) in the 
                              
                                 q
                                 1
                              
                            (
                              
                                 q
                                 2
                              
                           ) rounds previous to every round. Every change in assignment removes the previous assignment from this state and adds the new one. If, for instance, the assignment of an umpire U in round X changes from game A to game B, the evaluation function first subtracts the assignment of U to A from the state in the following manner:
                              
                                 •
                                 it subtracts the distance from the location of U in round 
                                       
                                          X
                                          -
                                          1
                                       
                                     to the location of game A together with the distance from the location of game A to the location of U in round 
                                       
                                          X
                                          +
                                          1
                                       
                                     from the travel distance of U.

it decrements the number of times U has visited the location at which game A is held. A resulting value equal to zero means that U does not visit this location in any of the rounds of the tournament anymore. If this is the case, the number of violations corresponding to constraint C3 is incremented.

it decrements the number of times U has visited the location at which game A is held for round X up to round 
                                       
                                          X
                                          +
                                          
                                             
                                                q
                                             
                                             
                                                1
                                             
                                          
                                       
                                    . A resulting value equal to one for all rounds means that U does not violate constraint C4 for that location and round anymore. When this happens, the number of violations corresponding to constraint C4 is decremented.

it decrements the number of times U has officiated the teams playing game A for round X up to round 
                                       
                                          X
                                          +
                                          
                                             
                                                q
                                             
                                             
                                                2
                                             
                                          
                                       
                                    . A resulting value equal to one for all rounds means that U does not violate constraint C5 for that round anymore. If this is the case, the number of violations corresponding to constraint C5 is decremented.

Afterwards, game B is added to the state in the opposite manner. Finally, the state contains new values for the travel distance and the number of violated constraints.

The evaluation function now takes into account one umpire at a time, for maximum 
                              
                                 max
                                 (
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       q
                                    
                                    
                                       2
                                    
                                 
                                 )
                              
                            rounds due to constraints C4 and C5. This results in an evaluation time of 
                              
                                 O
                                 (
                                 max
                                 (
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       q
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 )
                              
                            per modified assignment. Delta evaluation results in a significant decrease in evaluation time as most moves result in only a few assignment modifications compared to the 
                              
                                 O
                                 (
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                                 )
                              
                            variables considered previously.

Neither the ILS nor IDLI provide optimality gap information for the obtained solutions. In addition, the approaches reported in the literature do not obtain tight lower bounds for problem instances with large values of n. The current section presents a methodology for generating tight lower bounds, based on the decomposition of the problem into sub-problems. Algorithm 3 shows the generic structure of this lower bound methodology.
                           Algorithm 3
                           Generic structure for the lower bound methodology 
                                 
                                    
                                 
                              
                           

Every sub-problem consists of a window of 
                           
                              W
                              ⩽
                              4
                              n
                              -
                              2
                           
                         rounds. The Calculate-Optimal method subsequently solves the resulting windows to optimality, without considering constraint C3. The Calculate-Optimal procedure represents any method capable of solving sub-problems to optimality. A modified version of the formulation presented by de Oliveira et al. (2014) is used to solve the windows to optimality. It only takes into account variables within the considered rounds of the window while the middle round of the sub-problem is used as symmetry breaking round.

The first round of every window, apart from the initial window, is the same as the last round of the previous window, ensuring that the resulting lower bound includes the travel distance between windows. The requirement that the assignments in this overlapping round have to be equal is relaxed, making the procedure parallelizable. This relaxation does not influence the validity of the lower bound.

The sum of the travel distance within the windows is a valid lower bound for the TUP because (1) the optimality of the sub-problems solutions ensures that no smaller distance is obtainable within the window, (2) the procedure relaxes constraints C4 and C5 at the start of a new window and (3) the methodology does not consider constraint C3.

The current section reports the performance of the algorithms on benchmark instances for the TUP. Trick and Yildiz (2013) provide a data set consisting of several problem instances, with size ranging from 2 to 16 umpires. The instances contain a TTP tournament and a distance matrix. The tournament specifies the competing teams and locations of the games in every round. The distance matrix provides the distance between these locations. For each problem size, the data set contains several instances with equal tournaments while providing a permutation of the original distance matrix. The instances names contain the number of teams followed by a letter if the distance matrix is a permutation of the original one.

In what follows, benchmark instances with 
                        
                           n
                           ⩽
                           5
                        
                      are referred to as “small”, instances with 
                        
                           5
                           <
                           n
                           ⩽
                           10
                        
                      are denoted as “medium sized” and those with 
                        
                           n
                           >
                           10
                        
                      are called “large”. Variations of the problem instances can be constructed by changing the values of 
                        
                           
                              
                                 q
                              
                              
                                 1
                              
                           
                        
                      and 
                        
                           
                              
                                 q
                              
                              
                                 2
                              
                           
                        
                     . Opting for smaller values for 
                        
                           
                              
                                 q
                              
                              
                                 1
                              
                           
                        
                      (
                        
                           
                              
                                 q
                              
                              
                                 2
                              
                           
                        
                     ) means that an umpire has to wait a smaller number of rounds in between revisiting the same location (team).

All procedures have been implemented using the Java™ programming language version 1.7. The results of the heuristics are generated using a single Intel Xeon E5-2670 CPU thread running at 2.6gigahertz.


                        Table 1
                         shows the results obtained by the lower bound methodology for small problem instances with at most 10 teams. The decomposition methodology obtains lower bounds equal to the optimal values for every instance with at most 8 teams, apart from instance 8A.

Larger window sizes do not necessarily result in better lower bounds. A possible explanation for this phenomenon is that for some window sizes, the decomposition method is incapable of dividing the rounds equally among the windows. The last window ends up with the remainder of the rounds. At a certain point, the last window becomes too small for constraints C4 and C5 to have much influence on the travel distance, resulting in a smaller total travel distance.


                        Table 2
                         shows the results obtained by the lower bound methodology for instances with more than 10 teams, for which no optimal values are available in the literature. The table compares the results with the current best lower bounds obtained by de Oliveira et al. (2014) (
                           
                              F
                           
                         Best) and those originally obtained by Trick and Yildiz (2013) (TYi). The 14-team instances are solved up to window size 
                           
                              W
                              =
                              15
                           
                         and the 16-team instances up to window size 
                           
                              W
                              =
                              12
                           
                         or until the computation time exceeded the available time. The 
                           
                              LB
                              3
                           
                         column lists the lower bounds obtained by the decomposition method within three hours of calculation time. The 
                           
                              LB
                              +
                           
                         column shows the best bounds obtained in more than three hours of calculation time. The WS-MAX column lists the maximum considered window size.

The decomposition method improves all known lower bounds for the larger problem instances. The last column shows that the bound improves with increasing window sizes. The window size solvable within the given timespan decreases for more constrained versions of the same problem instance.

The table lists all lower bounds next to the problem instance version for which the respective methods obtained them. The following conjecture states that a lower bound for a relaxed versions of a problem instance is also a lower bound for more constrained versions of the instance.
                           Conjecture 4.1
                           A valid lower bound for an instance with values 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          1
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          2
                                       
                                    
                                 
                               is also valid for the same instance with values 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                    ⩾
                                    
                                       
                                          q
                                       
                                       
                                          1
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          2
                                       
                                       
                                          ′
                                       
                                    
                                    ⩾
                                    
                                       
                                          q
                                       
                                       
                                          2
                                       
                                    
                                 
                              .

As a result, the lower bound for instance 14 with 
                           
                              
                                 
                                    q
                                 
                                 
                                    1
                                 
                              
                              =
                              6
                           
                         and 
                           
                              
                                 
                                    q
                                 
                                 
                                    2
                                 
                              
                              =
                              3
                           
                         can replace the lower bound for instance 14 with 
                           
                              
                                 
                                    q
                                 
                                 
                                    1
                                 
                              
                              =
                              7
                           
                         and 
                           
                              
                                 
                                    q
                                 
                                 
                                    2
                                 
                              
                              =
                              3
                           
                         in the 
                           
                              LB
                              3
                           
                         column, resulting in a better bound.

In what follows, the performance of the IDLI approach is assessed on the benchmark instances. Instead of generating all possible solutions for each window, the branch and bound algorithm stores sample size S solutions and prunes the search tree when the distance of the current schedule is larger than the distance of the worst solution in the list. The schedule’s distance contains a lower bound that corresponds to the shortest path for all umpires to travel from their current assignment to any game in the last round of the window.

The IDLI procedure consists of several parameters: the window and sample size and the improvement interval and time. IDLI obtains optimal solutions for every problem instance with at most 10 teams using a window size of 6, a sample size of n, an improvement interval of 1000 and an improvement time of 1seconds. Table 3
                         shows the values and calculation times. For larger instances, the final parameter settings result from initial experiments discussed in the following section.

The IDLI parameters for the larger benchmark instance have been chosen based on the result of a full factorial experiment for a selection of problem instances. Table 4
                            lists the levels of the factors that have been considered in the model, next to the corresponding problem instance.

A multi-way ANOVA test on the results of the full factorial experiment shows that only three parameters have significant influence on the final result. These parameters are the sample size, the window size and the improvement interval. The improvement time has no significant influence on the end result.


                           Fig. 3
                           a and c shows which parameter values should be considered for the final benchmark on all instances. IDLI performs best when considering a large window size, sample size equal to n and a large improvement interval. A result similar to that of 14 has been obtained for the full factorial test on instance 14A.

The test has also been conducted on more relaxed versions of the same problem instances. The improvement time is fixed to 1000 because the previous experiments show that the improvement time has no significant influence on the final result. Fig. 3b shows the result for problem instance 14 with 
                              
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 5
                              
                            and 
                              
                                 
                                    
                                       q
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 3
                              
                           . Fig. 3d shows the result for instance 16 with parameter values 
                              
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 7
                              
                            and 
                              
                                 
                                    
                                       q
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 2
                              
                           . The results are similar to those for the more constrained versions. However, IDLI was incapable of obtaining a feasible solution for the relaxation of the 16 instance with several parameter settings. For these parameter settings, the results have been substituted with an objective value larger than any of the obtained objective values to generate Fig. 3d.

IDLI is executed on the larger problem instances with an improvement time equal to 1seconds, the improvement interval fixed to 1000 and n is used as sample size. The window size is fixed to 8 for the 14-team instances and 5 for the 16-team instances.


                           Table 5
                            shows the results obtained by IDLI within 3hours of computation time, as well as the best known lower bound for different versions of each problem instance. The last column shows the optimality gap. IDLI obtains results which are close to the best known lower bounds with less than 11% optimality gap for all 14-team instances. In addition, IDLI obtains objective function values for the relaxations of the 16-team instances that are also close to the best known lower bounds. However, IDLI does not reach a solution to the most constrained version of the 16-team instances and the 30-team instance.

The table lists the objective function values next to the problem instance for which they are obtained. The following theorem, with proof, states that results for a relaxation of a problem instance can be substituted with the results for more constrained versions of the same problem instance.
                              Theorem 4.1
                              
                                 A feasible solution to an instance with parameter value 
                                 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                       
                                    
                                  
                                 for constraint C4 is also feasible for the same instance with parameter value 
                                 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ⩽
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                       
                                    
                                 
                                 .
                              

By contradiction. Let S be a feasible solution to a problem with parameter value 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                       
                                    
                                  for constraint C4. Consider, ceteris paribus, a constraint value 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ⩽
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                       
                                    
                                 . Assume S is infeasible with respect to constraint C4 for constraint value 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 . This means that there exists an umpire in S who visits the same location more than once within 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                    
                                  consecutive rounds. Since 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ⩽
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                       
                                    
                                  the same umpire also violates constraint C4 with parameter value 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                       
                                    
                                 , making S infeasible for parameter value 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                       
                                    
                                 .□

The theorem is also applicable to constraint C5 with parameter values 
                              
                                 
                                    
                                       q
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                                 ⩽
                                 
                                    
                                       q
                                    
                                    
                                       2
                                    
                                 
                              
                            and the combination of constraints C4 and C5 with parameter values 
                              
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                                 ⩽
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       q
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                                 ⩽
                                 
                                    
                                       q
                                    
                                    
                                       2
                                    
                                 
                              
                           . As a result, the objective function value for a relaxation of instance 14C with parameter values 
                              
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 5
                              
                            and 
                              
                                 
                                    
                                       q
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 3
                              
                            can be substituted with the results of the relaxation of instance 14C with parameter values 
                              
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 6
                              
                            and 
                              
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 3
                              
                           , resulting in a better objective function value.

The ILS contains only a single parameter: the step size which is used by the acceptance criterion of SCHC. The initial experiments reveal the best step size settings for instances with at least 14 teams. The ILS obtains good solutions using any reasonable step size for instances with at most 10 teams. Table 6
                         shows the best, average and worst results obtained by ILS using a step size of 5000 on the strict versions of the small problem instances. The table reports the results for 6 runs of 10min on each problem instance.

The ILS always obtains optimal objective function values for all instances up to the 8-team instances. It obtains the optimal objective function value at least once for all 10-team problem instances. The average objective function value for the 10-team instances is also close to the optimal value.

Experiments in this section provide information concerning good step sizes for problem instances with at least 14 teams. Tables 7, 8
                           
                            show the average result for different window sizes obtained by ILS for 5 runs of 3hours each per problem instance. The table indicates the average solution as infeasible when one of the results is infeasible. The step size has to be at least 15,000 to obtain feasible solutions for the most constrained 14-team instances. The best step size appears to be instance specific for the 14-team instances. However, a step size of 20,000 seems to yield the most promising results. A step size of 10,000 yields good results for the 16-team instances.


                           Fig. 4
                            shows the best, average and worst results obtained by ILS for the 30-team instance with 
                              
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 5
                              
                            and 
                              
                                 
                                    
                                       q
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 5
                              
                            over 6 runs. Contrary to the results for smaller instances, the figure clearly shows that step size 2000 yields the most promising results. This step size is used in benchmark experiments for instances with more than 16 teams.

The ILS is executed 10 times on the large problem instances. Each run takes 3hours. The step size is set equal to 20,000 for the 14-team instances and 10,000 for the 16-team instance. Table 9
                            shows the best, average and worst results obtained by IDLI for several versions of the 14-team and 16-team instances. The worst column contains ‘inf’ followed by the number of infeasible solutions when one or more solutions are infeasible.

The algorithm shows good performance for relaxations of the 14 and 16-team problem instances by obtaining similar and sometimes better results than IDLI. It does not obtain a feasible solution for four of the most constrained problem instance versions in at most two out of ten runs.


                           Table 10
                            shows the best, average and worst results obtained during 10 runs of 5hours by the ILS for relaxations of problem instances with at least 26 teams. The step size is set equal to 2000. The 
                              
                                 LB
                                 +
                              
                            column lists the lower bounds obtained by the decomposition methodology for the 26-team, 28-team and 32-team instances with a window size equal to 9.

The table indicates that the main contribution of the ILS approach is its ability to obtain high quality solutions for relaxations of problem instances with at least 26 teams. The optimality gap between the average result and the best known lower bound for the 30-team instance is smaller than 10%.


                        Table 11
                         summarizes the results obtained by the new heuristics (IDLI, ILS) and compares them to the initial results reported by Trick and Yildiz (2013) (TYi) and the results obtained by de Oliveira et al. (2014) (RF 4,6,7). The results were obtained within 3hours of computation time for instances with at most 16 teams and 5hours for larger problem instances. The best bounds column lists all bounds generated by the decomposition method.

IDLI improves all initial objective function values and improves 14 out of 24 solutions compared with RF 4,6,7. ILS also improves most initial objective function values for problem instances with at most 16 teams. ILS improves the best known result for the realistic problem instance with 30 teams.

The last two columns compare the best results obtained by the new heuristics over all different parameter settings to the overall best objective function values obtained by the relax-and-fix heuristic of de Oliveira et al. (2014). The table shows that both methods are very competitive. Both generate state of the art results for a similar number of problem instances.

Two new and complementary approaches for the Traveling Umpire Problem were introduced. An enhanced iterative deepening search approach (IDLI) divides the problem into windows that are solved recursively. IDLI generates new best results for 14-team and 16-team benchmark instances. The second approach is a custom iterated local search (ILS) approach in which a steepest descent algorithm improves the current solutions of a step counting hill climbing metaheuristic. The ILS obtains good solutions for relaxations of the small and medium sized problem instances and generates high quality results for relaxations of problem instances with more than 16 teams as well.

In addition, a methodology has been proposed to obtain lower bounds for the Traveling Umpire Problem by decomposing the problem into sub-problems. The IP formulation of de Oliveira et al. (2014) has been used to solve the sub-problems. The proposed methodology improves all known lower bounds for benchmark instances.

Future research can be conducted to improve either one of the solution approaches. IDLI could benefit from a change in objective of the sorting procedure. Instead of completing only schedules with the smallest travel distance, other objectives can be incorporated. Such objectives could take into account the likelihood of the final solution being feasible. Replacing the branch and bound implementation with a more efficient method, capable of generating all solutions for a window, has the potential to yield good results for the larger problem instances. The ILS and other local search methods for the TUP will benefit from exploiting the characteristics of more sophisticated neighborhoods, which are generated based on the currently violated constraints.

@&#REFERENCES@&#

