@&#MAIN-TITLE@&#Identification of gene knockout strategies using a hybrid of an ant colony optimization algorithm and flux balance analysis to optimize microbial strains

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We proposed a hybrid algorithm to increase metabolites production.


                        
                        
                           
                           The hybrid algorithm select best combination of gene knockout.


                        
                        
                           
                           Using 2 microorganisms shows increment in metabolites production.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Ant colony optimization algorithm

Flux balance analysis

Metabolic engineering

Optimization algorithm

Gene knockout strategy

Microbial strains

@&#ABSTRACT@&#


               
               
                  Reconstructions of genome-scale metabolic networks from different organisms have become popular in recent years. Metabolic engineering can simulate the reconstruction process to obtain desirable phenotypes. In previous studies, optimization algorithms have been implemented to identify the near-optimal sets of knockout genes for improving metabolite production. However, previous works contained premature convergence and the stop criteria were not clear for each case. Therefore, this study proposes an algorithm that is a hybrid of the ant colony optimization algorithm and flux balance analysis (ACOFBA) to predict near optimal sets of gene knockouts in an effort to maximize growth rates and the production of certain metabolites. Here, we present a case study that uses Baker’s yeast, also known as Saccharomyces cerevisiae, as the model organism and target the rate of vanillin production for optimization. The results of this study are the growth rate of the model organism after gene deletion and a list of knockout genes. The ACOFBA algorithm was found to improve the yield of vanillin in terms of growth rate and production compared with the previous algorithms.
               
            

@&#INTRODUCTION@&#

Microbial strains are microorganisms that are widely used to produce biochemical products, antibiotics, drug targets, therapeutic proteins, food ingredients, vitamins, fuels, and other chemicals. In recent years, there has been increasing demand to replace chemical synthesis processes with more sustainable and environmentally friendly biotechnology methods based on microbial fermentation (Patil et al., 2005; Rocha et al., 2008). However, this means that microorganism metabolism needs to be retrofitted to comply with industrial purposes. This process is also known as genome-scale model reconstruction in general. These genome-scale models have been used to design strains that produce lactate (Fong et al., 2005), succinate (Wang et al., 2006), lycopene (Alper et al., 2005), l-threonine (Lee et al., 2007), l-valine (Park et al., 2007), and 1–3, propanediol (Wang et al., 2006). Traditionally, these genome-scale model reconstructions were made through the manipulation of genes by genetic engineering processes, such as random mutagenesis and screening. However, in recent years, this genetic engineering was coupled with metabolic engineering, which facilitated the simulation of a genome-scale model reconstruction in silico.

In metabolic engineering, a number of mathematical or computational tools have been developed and targeted to perform in silico gene manipulations that lead to the overproduction of desired compounds. There have been several successful attempts using metabolic engineering that are mainly based on qualitative and intuitive principles. However, many attempts have failed due to a lack of rational strategies that are based on predictive analysis tools that can precisely predict microorganism behavior. Nevertheless, the prediction of cellular metabolism is possible under steady state conditions, which enforces constraints throughout the reaction rates. One of the most widely used approaches is flux balance analysis (Kauffman et al., 2003), which is used to calculate the flux distribution within a metabolic network using linear programming. Several related works have also predicted and analyzed the microorganism behavior, both in wild-type or mutant strains (Segre et al., 2002; Shlomi et al., 2005). All of these approaches provide a basis for analyzing microbial strain metabolic networks to predict possible phenotypes.

The first rational modelling algorithm developed to perform in silico gene manipulations, which was scarcely based on the gene knockout strategy to optimize microbial strains, is the OptKnock algorithm introduced by Burgard et al. 2003; this uses mixed integer linear programming (MILP) to reach the optimum solution. Several extensions to OptKnock have been described in the literature. The goal of OptStrain (Pharkya et al., 2004), which was proposed in 2005, was to perform pathway modification, through pathway additions and deletions from the microbial strain, leading to overproduction of the desired compounds. OptReg (Pharkya and Maranas, 2005) was then proposed in 2006 to perform reaction modifications by considering overexpression and down-regulation to overproduce a target metabolite in microbial strains. OptGene (Patil et al., 2005) is an extension of OptKnock, which formulated problems using the genetic algorithm (GA) to search for a global optimal solution. It is the first algorithm that has employed an evolutionary search to solve combinatorial problems in the gene knockout strategy. However, it also has the tendency to fail in local optimum solutions because it does not exhaustively search for the complete solution. Additionally, it does not show clear stop criteria for every problem and may cause premature convergence.

Since GA does not solve problems efficiently, this study proposes an algorithm that is a hybrid of the ant colony optimization algorithm and flux balance analysis (ACOFBA) to address these limitations. In addition, the Saccharomyces cerevisiae model was used to predict the production of vanillin as a case study in this paper. The ACOFBA algorithm was applied to predict sets of gene knockouts for biomass and production optimization. The ACO algorithm was chosen to solve the limitations of previous works because it has been proven to be efficient for solving combinatorial optimization problems (Sivanandam and Deepa, 2008; Xue et al., 2010; Yang and Zhuang, 2010; Tavares Neto and GodinhoFilho, 2011). Additionally, it also promotes the exhaustive search for a complete solution since every possible solution is evaluated, and the search process stops when a near optimal solution is found. Thus, it guarantees the generation of an optimal solution. Furthermore, the ant colony algorithm avoids premature convergence of the solution search because it performs global and local searches simultaneously. An ACO-based technique was first introduced to solve the problems associated with gene knockout strategies. An ACO-based gene knockout algorithm was developed by modification of the original ACO algorithm. This paper is organized as follows: Section 2 briefly describes the conventional version of the ACO and ACOFBA algorithms; Section 3 describes the experimental setup and results; and Section 4 summarizes this paper by providing the main conclusions and addresses future developments.

@&#METHODS@&#

The ACO algorithm is a meta-heuristic optimization approach that was introduced in the early 1990s (Colorni et al., 1991; Mo et al., 2009). The search process used by the ACO algorithm was inspired by real ant intelligent behavior, in which they explore the shortest path from a food source to the nest. In the ACO algorithm, a number of artificial ants build a solution to the corresponding optimization problem and exchange the quality of these solutions by using a pheromone that allows artificial ants to communicate. The original ACO algorithm is known as the Ant System (Colorni et al., 1991) and was implemented to solve the travelling salesman problem (TSP). It performs a parallel search over constructive computational threads, based on local problem data and on a dynamic memory structure, which contain solution quality information. The goal is to minimize the total travel distance. In this method, a set of artificial ants is placed on a graph that represents a set of cities and they are forced to move. The ACO algorithm generates solutions by using a construction mechanism, in which the selection of the solution component to be added at each step is probabilistically influenced by deposited pheromones and heuristic information. This means that the construction process probabilistically builds the problem solutions step by step, and the probabilistic model has feedback for its modification based on the solutions found. The steps of the ACO algorithm were designed as proposed by Colorni et al. (1991) and are shown in Fig. 1
                        .

A gene knockout strategy is a combinatorial problem regarding a large solution space (a large number of reactions taking place in cellular metabolism) of a genome-scale model. In particular, the size of the problem, which is defined by the number of deletions and number of enzymes, and the corresponding search space (combinations of enzymes to be deleted) are huge. A gene knockout strategy is different from a TSP problem, for which the concept of a directed graph does not exist. In this study, a partial solution does not define any order among the individuals, and the next individual selected is not necessarily affected by the last individual added to the partial solution. To apply the ACO algorithm to solve the gene knockout problem, it is necessary to represent the problem as a graph.

The gene knockout problem may be redeveloped into an ACO-suitable problem. Each node denotes an individual that is made up of a set of reactions and the edges connecting the nodes represent the path for the next choice of individual. An ant traverses the graph to search for individuals that produce optimal solution. Fig. 2
                            illustrates the setup of nodes and edges. Nodes are connected to each other to allow any individual to be selected next. The ants move according to transition rules and pheromone update rules. In this case, each individual has its own pheromone value and heuristic values, which are different from the pheromone and heuristic values in the TSP problem, which is associated with links.

Heuristic information is one of the bases for probabilistically constructing solutions. In this study, the suitable heuristic desirability refers to a metabolic network evaluation function, which is a flux balance analysis (FBA). This heuristic information is combined with the pheromone value of each node to form a probabilistic transition rule. This defines the probability that ant k will include individual i in its solution at time t:
                              
                                 (1)
                                 
                                    
                                       
                                          
                                             P
                                          
                                          
                                             i
                                          
                                          
                                             k
                                          
                                       
                                       (
                                       t
                                       )
                                       =
                                       
                                          {
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               (
                                                               
                                                                  
                                                                     τ
                                                                  
                                                                  
                                                                     i
                                                                  
                                                               
                                                               (
                                                               t
                                                               )
                                                               )
                                                            
                                                            
                                                               α
                                                            
                                                         
                                                         ·
                                                         
                                                            
                                                               (
                                                               
                                                                  
                                                                     n
                                                                  
                                                                  
                                                                     i
                                                                  
                                                               
                                                               )
                                                            
                                                            
                                                               β
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     ∑
                                                                  
                                                                  
                                                                     u
                                                                     ϵ
                                                                     N
                                                                  
                                                               
                                                               
                                                                  
                                                                     (
                                                                     
                                                                        
                                                                           τ
                                                                        
                                                                        
                                                                           i
                                                                        
                                                                     
                                                                     (
                                                                     t
                                                                     )
                                                                     )
                                                                  
                                                                  
                                                                     α
                                                                  
                                                               
                                                               ·
                                                               
                                                                  
                                                                     (
                                                                     
                                                                        
                                                                           n
                                                                        
                                                                        
                                                                           i
                                                                        
                                                                     
                                                                     )
                                                                  
                                                                  
                                                                     β
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   if
                                                   ⁡
                                                   iϵ
                                                   N
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where N refers to the individual that can be added to the solution, while the pheromone and heuristic values are τi
                            and ni
                           , respectively, and α and β are parameters that determine the importance of the pheromone and heuristic values. If α
                           =0, no pheromone information is used. The search then degrades to a stochastic greedy search. If β
                           =0, the attractiveness of moves is neglected.

After all of the solutions are constructed, the pheromone update rules apply to all of the nodes. These rules are pheromone evaporation and the addition of a new pheromone by ants. The pheromone update rule is implemented by using the following equations:
                              
                                 (2)
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             i
                                          
                                       
                                       
                                          (
                                          t
                                          +
                                          n
                                          )
                                          =
                                          
                                             (
                                             1
                                             −
                                             ρ
                                             )
                                          
                                       
                                       ·
                                       
                                          
                                             τ
                                          
                                          
                                             i
                                          
                                       
                                       
                                          (
                                          t
                                          )
                                          +
                                       
                                       
                                          
                                             Δ
                                             τ
                                          
                                          
                                             i
                                          
                                       
                                       
                                          (
                                          t
                                          )
                                       
                                    
                                 
                              
                           
                           
                              
                                 (3)
                                 
                                    
                                       
                                          
                                             Δ
                                             τ
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       t
                                       )
                                       =
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   k
                                                   =
                                                   1
                                                
                                                
                                                   m
                                                
                                             
                                             
                                                
                                                   Δ
                                                   τ
                                                
                                                
                                                   i
                                                
                                                
                                                   k
                                                
                                             
                                          
                                       
                                       (
                                       t
                                       )
                                    
                                 
                              
                           All ants can update the pheromone according to Eq. (2), while the best ant that finds the best solution deposits an additional pheromone on nodes, updated according to Eq. (3). This contributes to the exploration of the ants around the optimal solution in the next iterations. In this equation, m is the number of ants at each iteration, ρ shows the volatility coefficient of the pheromone, and 1−
                           ρ indicates the information remaining. The value of ρ is ρϵ (0,1) to avoid the unlimited accumulation of information. Δτi
                           (t) is the increment of the pheromone on individual i.

In this section, the detailed processes of the proposed ACOFBA algorithm are described. From model pre-processing, initialization, solution construction, fitness evaluation to pheromone update are described in details. This algorithm is divided into two parts: (i) searching for an optimal set of knockout genes, and (ii) calculating the fitness after gene deletion. In the first part, the optimization ACO algorithm is implemented to guide the selection of genes to be deleted. The ACO algorithm implements a heuristic search based on heuristic information, as in Section 2.2.2. In the second part, the metabolic network analysis approach of FBA was used to evaluate the fitness of the model after genes are deleted. The fitness of the constructed microbial strain was adopted as the heuristic information for the ACO-based gene knockout algorithm in this study. The limitation of FBA is that it cannot identify sets of knockout genes that suit the gene knockout strategy, but can only analyze the fitness of the model. Hence, the ACO algorithm is commonly implemented to solve this problem. Therefore, a hybrid of them is crucial for determining a gene knockout strategy. For easy understanding of the algorithm, Fig. 3
                         shows the overall process of the ACOFBA algorithm. The hybridization of FBA is indicated in the dotted box in Fig. 3. The prediction process starts by initializing the population and pheromone. Each ant is then placed randomly on the individual nodes on the graph. From these initial positions, they travel to other individual nodes probabilistically until the stopping criteria are satisfied.

In order to obtain a near optimal solution, model pre-processing is carried out to remove duplicate and dead-end reactions. In addition, it also helps to find the minimal bounds for the flux through each reaction and return the result of the flux variability analysis. These two steps are important in order to reduce the computational time required to perform the ACOFBA algorithm, thereby reducing the problem size or dimension of the solution search space. These indirectly improve the performance of the proposed algorithm. After these two steps, the reduced model undergoes a single gene deletion function. This step is to ensure that the genes found to be lethal in vivo, but not in silico, will not be included as possible targets to be knocked out in the ACOFBA algorithm. Furthermore, model pre-processing also helps to avoid falling into local minima (Xue et al., 2010). However, this pre-processing step was not carried out in the previous works and is therefore not comparable.

A population is initialized beforehand by using a predefined number of individuals. These individuals are initialized by assigning a present or absent status to each gene randomly. The matrix is initially generated with values of ‘0’, and then values of ‘1’ are randomly distributed among them. The ‘0’ represents reactions that are chosen to be deleted, while the ‘1’ represents reactions that are not deleted and maintained. Each row that contains the list of reactions is known as an individual. The purpose of assigning the value into a binary representation of either 0 or 1 is to select the best set of genes that results in the increment of metabolite production after the genes are deleted. This is achieved due to the combinatorial problem, to choose the best combination of genes to be knocked out, because a single gene deletion will affect the next gene to be knocked out in the biological network. This initialization step was performed based on the work by Patil et al., (2005). The representation of an individual is shown in Fig. 4
                           , which also shows the relation between genes and reactions. Generally, one gene is responsible for a single enzyme used in a reaction. Based on the figure, since one of the genes for Reaction 2 is not deleted, Reaction 2 is assumed to be present, whereas the deletion of Gene 4 caused both Reaction 3 and 4 to be absent. In addition, all pheromone variables are initialized at τ
                           0.

Solution construction involves the fitness evaluation of each individual. The ants find the next individual to be evaluated by using a probabilistic calculation that has been described in the heuristic information in Section 2. The fitness scoring of individuals is then carried out using a metabolic network analysis approach of FBA. The fitness scoring process continues until all of the individuals have been given a fitness value.

The fitness evaluation is carried out using FBA. FBA is one of the methods used in predicting cellular metabolism. FBA uses linear programming to optimize the flux over a particular reaction, resulting in a value for the fluxes of all reactions in the cell. FBA is capable of predicting the behavior of a microorganism, both in its wild-type and mutant form under certain number of environmental conditions. In the study, FBA performs calculations on the individual with selected knockout reactions based on a steady state approximation of the concentration of the internal metabolites, which reduces the corresponding mass balances to a set of linear homogeneous equations. When a list of reactions has been selected to be deleted at a steady state, FBA is used to examine the model after knockouts are included by the linear objective function, shown below, to determine the optimal flux distribution:
                              
                                 (4)
                                 
                                    
                                       
                                          
                                             
                                                Maximize
                                                Z
                                             
                                             
                                                Subject
                                                to
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            J
                                                            =
                                                            1
                                                         
                                                         
                                                            N
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               S
                                                            
                                                            
                                                               i
                                                               j
                                                            
                                                         
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       =
                                       0
                                       ,
                                       i
                                       =
                                       1.....
                                       M
                                    
                                 
                              
                           
                           
                              
                                 (5)
                                 
                                    
                                       
                                          
                                             α
                                          
                                          
                                             j
                                          
                                       
                                       <
                                       
                                          
                                             v
                                          
                                          
                                             j
                                          
                                       
                                       <
                                       
                                          
                                             β
                                          
                                          
                                             j
                                          
                                       
                                       ,
                                       i
                                       =
                                       1.....
                                       M
                                    
                                 
                              
                           where S
                              ij
                            represents the stoichiometric coefficient of metabolite i in reaction j, while v
                              j
                            refers to the jth stoichiometric coefficient and metabolic flux or the rate of reaction j. M is subjected to metabolites and N is subjected to reactions. Eq. (5) represents the thermodynamic and capacity constraints that can be added as inequalities in addition to the stoichiometric constraints. In this study, the Z linear objective function maximized the biomass production in S. cerevisiae. Fig. 5
                            shows the steps involved in FBA.

The goal of the pheromone update is to find a better solution that is more suitable for ants to work in the following iteration. Basically, two essential mechanisms are implemented to reach the target. The first one is pheromone trail evaporation, which is a mechanism that decreases the amount of pheromone deposited by previous ants over time. This step is needed because it helps to prevent premature convergence of the algorithm toward a suboptimal region, causing a local minima solution. The second is pheromone deposit, which increases the density of the pheromone of a good solution. Detailed information about the deposited pheromone is provided in the previous section, while Section 2 includes the pheromone update rules.

@&#EXPERIMENTS@&#

In this study, S. cerevisiae, also known as Baker’s yeast, was used as the microbial strain from which to obtain vanillin. An updated genome-scale metabolic network model of S. cerevisiae, iMM904 (Mo et al., 2009) was used in this research. All of the pathways in the S. cerevisiae datasets were included in this raw model. Due to the abundance of the pathways included in the dataset, several pathways were excluded or removed to reduce unrelated pathways and minimize the computational time, as mentioned in Section 3.1. Table 1
                         shows the total number of reactions and metabolites of the raw and pre-processed models.


                        Table 2
                         shows the parameter values for the ACOFBA algorithm. These values were chosen based on the results of preliminary runs. The number of ants was set equal to the number of sites that it would have to visit. Therefore, in this work, the number of ants was set equal to the length of the list of reactions, which was 1133. The number of iterations to reach a good solution was problem-dependent. If the number was large, the ACOFBA algorithm would require more time to complete its process. Otherwise, if the numbers were small, the ACOFBA algorithm would take a shorter time to run, but it would not be able to find a good solution. Therefore, an intermediate number (30) of iterations was chosen, while the three ant parameters, alpha (α), beta (β), and rho (ρ), were tested by trial and error. These values were set to 1, 5, and 0.65, respectively. The maximum number of knockouts was set to 3. The computer system requirements to run this study included an Intel Core 2 Duo 2.40GHz processor and 4GB of random access memory (RAM) system type or higher. The research was conducted on a Windows-based platform with MATLAB installed. In addition, libsbml-2.3.4-win-xerces was used to read the SBML dataset format and the Cobra Toolbox_2.0.3 in MATLAB in order to run ACOFBA.

Here, the results are shown based on the in silico simulation conducted on the S. cerevisiae model. In silico simulation is required prior to the laboratory experiments to aid in designing the near optimal design of the organism to increase the production of the target metabolite. Therefore, we need to validate that our proposed algorithm can produce desirable and plausible results. To show the effectiveness of our proposed algorithm, the results obtained were validated using comparative analysis with the in silico results from previous works in terms of the growth rates obtained while each of the candidate genes chosen for knockout was validated from experimental results in the literature. Nevertheless the results shown here are considered theoretical until they are validated with real laboratory experiments that may be conducted in the future.

In this study, the target reaction and substrate reaction needed to be identified in order to produce vanillin using S. cerevisiae as the model and the ACOFBA algorithm. Prephenate dehydratase and glucose were selected as the target reaction and substrate reaction, respectively. Prephenate dehydratase was chosen because it can affect the production of l-phenylalanine, which is a precursor to vanillin production via the biotransformation of aromatic acids and biosynthesis of alkaloids derived from the shikimate pathway.

The core substrate l-phenylalanine contributes to vanillin production (Priefert et al., 2001). Therefore, the production of l-phenylalanine would directly affect the production of vanillin. The production of vanillin increased when the production of l-phenylalanine increased. In the key reaction, phenylalanine underwent a chain reaction to form vanillin. In addition, l-phenylalanine was also used as a precursor in the biosynthesis of alkaloids to form vanillin derived from the shikimate pathway. Fig. 6
                            shows the biosynthesis of alkaloids derived from the shikimate pathway to form vanillin. This figure clearly shows the contribution of prephenate and l-phenylalanine to the production of vanillin. Prephenate was transformed into l-phenylalanine, which is involved in the synthesis of caffeoyl-CoA. The enzyme involved in this conversion was caffeoyl-CoA O-methyltransferase.


                           Brochado et al., (2010) reported that 3-dehydroshikimate (3-DHS) is the native metabolic precursor for the de novo vanillin production pathway. It is an intermediate metabolite involved in the shikimate pathway for the biosynthesis of aromatic amino acids from glucose. Therefore, glucose was selected as a substrate in this study. The in silico experiment was performed using glucose minimal media of 10mmolg DW−1
                           h−1. This growth media was chosen to test whether the organism was still able to survive in a very limited nutrient environment after the gene knockout was performed. If the simulation results showed that the mutant organism was still alive, there was a higher chance that this mutant could survive and have a higher growth rate if nutrient-rich media was used in laboratory experiments. The value of 10mmolg DW−1
                           h−1 is chosen after conducting a small number of trials with the range of 1–15mmolg DW−1
                           h−1. The value obtained from the trials is possible to test in wet-lab experiment. In this paper, only the best results are shown in the table.

Cell growth rate is highly coordinated and consists of a complex collection of reactions that convert biosynthetic precursor metabolites to specific biochemical products. In a gene knockout strategy, predictions are based on assumptions that microbial strains would evolve higher growth rates and biochemical production. In this study, growth rate was used as a selective pressure due to the forced coupling between the biomass and biochemical production of mutant strains. Basically, the biochemical production would increase along with the cellular growth rate (Kim and Reed, 2010). In addition, growth rate is the key point for the survival of the microorganisms. Unlike previous studies (Patil et al., 2005; Burgard et al., 2003), in this study, growth rate was used as the objective function for maximization to ensure the survival of the microorganisms and in hope that to increase the production of desired products. Hence, due to the aim and scope of this study, only the growth rate was used. However, the biomass product coupled yield (BPCY) can be calculated in future works.

In this study, the growth rates of the microbial strain S. cerevisiae were calculated based on the combination of genes that was knocked out. Fig. 7
                            presents the growth rate of 50 predicted results using the ACOFBA algorithm. The highest growth rate obtained from the simulation of the data was 1.7023mmolh−1, while the minimum growth rate was −5.00e-45mmolh−1. Fig. 8
                            shows the total numbers of positive and negative growth rate predictions in this study. In the 50 experiments, 86% of the simulations or predictions suggested that a positive growth rate would be the result. In addition, the standard deviation was also computed in order to evaluate the accuracy of the result obtained from ACOFBA. The lower the standard deviation, the closer the data points were to the mean, and the higher the accuracy. The standard deviation obtained in this study was 0.7681.

Based on the result, the negative growth rate experiments that resulted in a set of gene knockouts were eliminated. This was because the experiments suggested the deletion of lethal genes that decreased cell survival. Therefore, no biochemicals were produced in dead cells. In contrast, the positive growth rate indicated that the cell was able to survive and evolve in the knockout mutant strain. The set of genes that resulted in a higher growth rate when knocked out was selected for further analysis to identify a suitable set of gene knockouts that could lead to the overproduction of vanillin.

After obtaining the predictions using the ACOFBA algorithm, a combination of three genes was obtained. Table 3
                            summarizes three of the identified gene knockout strategies for producing vanillin using l-phenylalanine as a target (knockout A, B, and C). The maximum yield from these three knockouts obtained from the ACOFBA algorithm was 0.1947mmolg DW−1
                           h−1. The knockout A and B suggested that the deletion of genes that were important were in the Ehrlich pathway. Knockout C suggested the deletion of genes that encoded a nicotinamide adenine dinucleotide (NAD+)-dependent malate dehydrogenase, which is involved in malate metabolism, and is important in vanillin production.

The Ehrlich pathway consists of pathways and chemical reactions involved in the catabolism of amino acids to produce fusel alcohols. Amino acids that are synthesised from the Ehrlich pathway are valine, isoleucine, leucine, phenylalanine, and methionine. These amino acids will be taken up slowly throughout fermentation (Hazelwood et al., 2008). Therefore, the removal of the Ehrlich pathway can prevent the biosynthesis of valine and phenylalanine and improve the production yield of vanillin. Knockout A suggested that deletion of the BAT1 gene was involved in the transamination of amino acids into α-keto acids. The deletion of the BAT1 gene removed the initial transamination reaction in the Ehrlich pathway and, consequently, prevented the valine and phenylalanine biosynthesis reaction in S. cerevisiae.

Knockout B suggested that the deleted gene was ARO10. This gene is involved in the decarboxylation reaction in Ehrlich pathway. After transamination, the resulting α-keto acids underwent irreversible decarboxylation. The removal of ARO10, which was an alternative candidate gene for the Ehrlich pathway decarboxylases, led to elimination of the Ehrlich pathway in S. cerevisiae. Additionally, under aerobic glucose-limited chemostat, phenylalanine, as the sole nitrogen source, was converted predominantly to fusel acids instead of fusel alcohols; thus, a very low concentration of fusel alcohols was formed (Hazelwood et al., 2008). In contrast, without glucose-limited chemostat, phenylalanine as the sole nitrogen source was converted into a mixture of phenylacetate and phenylethanol. This further proves that the deletion of ARO10 was expected to increase the yield of phenylalanine. Fig. 9
                            shows an overview of the Ehrlich pathway intermediates and products. Targeted knockout genes A and B are highlighted in boxes.

ACOFBA results suggested the deletion of the MDH1 gene (knockoutC), which encodes malate dehydrogenase, is involved in tricarboxylic acid cycle (TCA) aerobic respiration, a central hub of metabolism (Patil et al., 2005). This enzyme catalysed the formation of oxaloacetate from malate. It is an 
                              
                                 NA
                                 
                                    D
                                    +
                                 
                              
                            -dependent coenzyme involved in the TCA cycle. The engineered strains were reported as having an increased availability of the reduced nicotinamide adenine dinucleotide (NADH) pool. This is a kinetic thermodynamic feature that favours the conversion of protocathechuic acid (PAC) into protocatechuic aldehyde (PAL) by aryl carboxylic acid reductase (ACAR) in the de novo biosynthesis of vanillin in S. cerevisiae (Varges et al., 2011). Fig. 10
                            shows an overview of the Central Carbon Metabolism of S. cerevisiae. Knockout C is shown in the box.

Genes identified for deletion by the proposed algorithm for knockout A and B were involved in the formation of l-phenylalanine, a precursor for the biotransformation of aromatic amino acids to produce vanillin. The gene deletion increased the yield of phenylalanine by removing the competing pathways. For knockout C, the gene deletion increased the availability of the NADH pool and facilitated the de novo biosynthesis of vanillin, instead of removing the competing pathway. In conclusion, all 3 of the knockouts identified are related to the production of vanillin in S. cerevisiae and the deletion of these 3 genes has shown an increase in the growth rate of the organism.

The results from the proposed ACOFBA algorithm were compared to the existing OptGene algorithm (Patil et al., 2005) and another algorithm, namely CBAFBA, which utilizes the continuous bees algorithm and FBA (Yin et al., 2013) to test the effectiveness of our proposed algorithm. Although there are several other methods that utilise the same principle of hybridising optimization algorithms and FBA, such as BAFBA (Choon et al., 2014) and DEFBA (Rashid et al., 2013), which employ the bees algorithm and differential evolution, only CBAFBA was chosen because it utilizes the same dataset and target metabolites similar to our research goal; in this case, this was the production of vanillin in S. cerevisiae. Table 4
                            shows the comparison between the simulated growth rate of vanillin using the existing and proposed algorithms.

The results show that the proposed algorithm achieved a significantly higher growth rate than OptGene but showed a similar result to CBAFBA. This shows that the proposed method was able to outperform OptGene, which was consistent with the results obtained by CBAFBA. Generally, the biochemical production increased along with the cellular growth rate. Due to this, we expected the production rate of the engineered strain obtained from ACOFBA to be higher than that obtained using OptGene. Furthermore, the fact that the obtained growth rates were able to achieve a higher value indicates that the organism is able to survive within the growth media and shows the plausibility of being engineered in the real environment. The computational time is not used as a comparison in this study because our focus is to show the increment in terms of the growth rate. However, the average computational time for ACOFBA to predict the knockout genes is around 2000 seconds for 100 iterations in each individual run. Furthermore, the experiment was performed using different platforms and machines; also, the previous works did not mention their computational time. Nevertheless, further wet lab experiments are required to validate the results in real life applications.

@&#CONCLUSIONS@&#

The proposed ACOFBA algorithm, which was used to predict the optimal set of knockout genes through in silico gene modification in this study, performed better in terms of growth rates. The ACOFBA algorithm maximized the growth rates, as well as the desired products, in a single run in a reasonable computational time. This algorithm, which is based on the ACO algorithm that exhaustively searches for a complete solution, avoids the premature convergence and local minima problem. The strategies applied with the ACOFBA algorithm could lead to improved vanillin production in S. cerevisiae. However, in this study, the experiment dealt with the reactions involved in S. cerevisiae metabolism, which contributes to production yield. Target genes associated with specific reactions were identified and performed deletions based on functionality identification of these reactions. Due to the possibility that there were some gene deletions that involve branched pathways, the suggested gene deletion strategies must be interpreted very carefully. Therefore, it is suggested that wet lab experiments should be carried out to further validate the deletions suggested by the ACOFBA algorithm by the in silico simulation. For this particular research, we are only focusing on the production of vanillin in S. cerevisiae to test the ability of the proposed algorithm to identify the combination of genes to be knocked out. In the future, the production of other significant industrial metabolites such as ethanol, succinate and lactate is planned to be used as a case study.

@&#ACKNOWLEDGEMENTS@&#

We would like to thank the S1476-9271(14)00111-XMalaysian Ministry of Science, Technology and Innovation for supporting this research by e-science research grants (Grant numbers: 06-01-06-SF1029 and 01-01-06-SF1234). We would also like to thank Universiti Teknologi Malaysia for funding this research by the Research University Grant (GUP) (grant number: Q.J130000.2507.05H50).

@&#REFERENCES@&#

