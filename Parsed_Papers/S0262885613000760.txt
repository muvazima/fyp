@&#MAIN-TITLE@&#Geometric particle swarm optimization for robust visual ego-motion estimation via particle filtering

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Novel particle filtering based visual ego-motion estimation algorithm robust to abrupt camera motion.


                        
                        
                           
                           Multi-layered importance sampling via particle swarm optimization (PSO)


                        
                        
                           
                           Reformulation of the conventional vector space PSO algorithm by geometric special Euclidean group SE(3)


                        
                        
                           
                           Efficient convergence of PSO and real-time visual ego-motion estimation performance


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Visual ego-motion estimation

Visual odometry

Visual SLAM

Particle filtering

Particle swarm optimization

Special Euclidean group

@&#ABSTRACT@&#


               
               
                  Conventional particle filtering-based visual ego-motion estimation or visual odometry often suffers from large local linearization errors in the case of abrupt camera motion. The main contribution of this paper is to present a novel particle filtering-based visual ego-motion estimation algorithm that is especially robust to the abrupt camera motion. The robustness to the abrupt camera motion is achieved by multi-layered importance sampling via particle swarm optimization (PSO), which iteratively moves particles to higher likelihood region without local linearization of the measurement equation. Furthermore, we make the proposed visual ego-motion estimation algorithm in real-time by reformulating the conventional vector space PSO algorithm in consideration of the geometry of the special Euclidean group SE(3), which is a Lie group representing the space of 3-D camera poses. The performance of our proposed algorithm is experimentally evaluated and compared with the local linearization and unscented particle filter-based visual ego-motion estimation algorithms on both simulated and real data sets.
               
            

@&#INTRODUCTION@&#

Visual ego-motion estimation or visual odometry is the process to continuously estimate the 3-D camera pose based on 2-D image sequences captured by a camera. Visual ego-motion estimation plays an important role in various computer vision and robotics applications such as visual simultaneous localization and mapping (SLAM) and augmented reality [1–6].

Visual ego-motion estimation can be formulated as a state estimation problem and effectively solved by Bayesian filtering methods [7–9]. Particle filtering also known as sequential Monte Carlo [10,11] is one of the popular Bayesian filtering methods for visual ego-motion estimation because of its inherent ability to deal with nonlinearity present in camera projection [12–14].

How to choose the importance function is one of crucial factors for the performance of particle filtering [10]. The most simple choice is to use the state transition density determined by the state equation as the importance function. The well-known problem of the sampling from the state transition density is the waste of particles due to the fact that the recent measurement is not considered in particle sampling.

To improve the sampling efficiency and overall performance of particle filtering-based visual ego-motion estimation, we should utilize the optimal importance function that minimizes the variance of particle weights by explicitly considering the recent measurement [10]. Since the closed form of optimal importance function is not available for general nonlinear systems, its adequate approximation is required. In practice, the most feasible way is to approximate the optimal importance function as Gaussian distribution based on the local linearization of a measurement function [10].

However, there is an inherent problem in the local linearization-based approximation of the optimal importance function: there always exists a local linearization error for nonlinear measurement functions. When the state predicted by the state equation is fairly close to the true state, the linearization error is negligible and the optimal importance function can be approximated accurately. However, if the predicted state is far from the true state, the optimal importance function cannot be approximated accurately because of a large local linearization error. Fig. 1
                      graphically illustrates this local linearization error arising in approximating the optimal importance function.

To overcome the limitation of local linearization-based approximation, the unscented particle filter (UPF) [15] was proposed. The UPF employs a deterministic sampling approach called the unscented transformation (UT) [16,17] to estimate the mean and covariance of optimal importance function using a small number of samples called sigma points. Whereas the local linearization relies on the first order approximation, the unscented transformation can estimate the covariance accurately up to the third order [18] and thus approximate the optimal importance function more accurately. However, it cannot be a perfect solution because it still depends on the Gaussian approximation.

In this paper, we focus on abrupt camera motion that can result in large error in approximating the optimal importance function for visual ego-motion estimation. We define the abrupt camera motion as the motion that cannot be well predicted by the state equation. The most probable case is to perform visual ego-motion estimation using a hand-held camera without additional motion sensors (e.g., web-cams). Since there is no available motion estimate, it is usual to use smooth motion models such as constant velocity for the motion dynamics. In this case, the sudden and sharp camera motion especially in orientation between adjacent frames shall not be predicted well by the smooth motion model and result in large error in the optimal importance function approximation. Even with additional motion sensors such as gyros and actuator information of mobile robots, the state can be predicted poorly. One of examples of such cases is to perform visual ego-motion estimation using cameras mounted on mobile robots moving on quite uneven terrain.

The first contribution of this paper is to present a novel particle filtering-based visual ego-motion estimation algorithm especially robust to abrupt camera motion. To obtain particles distributed consistently with the recent measurement even for the case of abrupt camera motion, we propose to use multi-layered importance sampling via particle swarm optimization (PSO), which is a meta-heuristic optimization algorithm to effectively find the global optimum using particles sharing information between themselves [19,20]. In our proposed multi-layered importance sampling, the particles sampled from a motion model are moved to higher likelihood region iteratively via PSO. The particles are made to be more consistent with the recent measurement by PSO and can be considered to be similar to those sampled from the optimal importance function. Since our proposed approach does not require the measurement equation approximation and the Gaussian assumption, we can obtain superior visual ego-motion estimation results in the case of abrupt camera motion compared with the local linearization and UT-based approximation methods.

Since we employ PSO which is an iterative method, efficient convergence is an important issue toward a real-time visual ego-motion estimation system. The second contribution of this paper is to reformulate the conventional vector space PSO algorithm in terms of the geometry of the special Euclidean group SE(3), which is a Lie group corresponding to the space of camera poses. By employing the proposed geometric PSO on SE(3), less iterations are needed for particle convergence than the vector space PSO, and it results in a real-time implementation of our proposed visual ego-motion estimation algorithm.

PSO has been already applied to various vision problems such as visual tracking [21,22] and visual SLAM [23,24]. Here, we concentrate on PSO for visual ego-motion estimation-related problems. Ref. [23] proposed PSO-FastSLAM, where PSO is used to enhance the resampling performance of the ordinary FastSLAM method used for visual SLAM. Hence, PSO-FastSLAM cannot properly deal with the abrupt camera motion. In Ref. [24], PSO is used to cope with the linearization error problem and overcome the ambiguity of repeated ceiling patterns by adopting the concept of multi-swarms. Ref. [24] can be considered to be similar to ours as Ref. [24] employs PSO to reduce the linearization error in approximating the optimal importance function. However, Ref. [24] is much more restricted than ours because it relies on the odometry information. Furthermore, both Ref. [23] and Ref. [24] only deal with 3-DOF ego-motion estimation problems, i.e., the state space is confined to a 2-D plane. Unlike Ref. [23] and Ref. [24], we deal with general 6-DOF ego-motion estimation problems without odometry information. To the best of our knowledge, our proposed algorithm is the first one that employs PSO in a 6-DOF visual ego-motion estimation system, where the unavailable odometry information brings much more difficulties.

We demonstrate the robustness of the proposed visual ego-motion estimation algorithm to abrupt camera motion via various experiments with simulated and real sequences. We first show that our proposed algorithm yields superior performance in the presence of abrupt camera motion to the local linearization and UT-based importance functions via simulated experiments. We also verify that the proposed geometric PSO is more efficient than the conventional vector space PSO. Via experiments with the real sequences where abrupt camera motion is prominent, we show that our proposed visual ego-motion estimation algorithm can yield quite accurate results in real-time despite abrupt camera motion.

Our visual ego-motion estimation algorithm is quite similar to particle filtering-based SLAM systems [25,26,12–14] because we build a map of landmarks and update it via extended Kalman filter (EKF) based on the estimated camera pose. The important difference between our algorithm and complete SLAM algorithms is that there is no loop closing in our algorithm. Our visual ego-motion algorithm can be equipped with a loop closing algorithm to be used for visual SLAM problems. Alternatively, our proposed multi-layered importance sampling via geometric PSO on SE(3) can be easily plugged into any existing particle filtering-based visual SLAM system to enhance the robustness to the abrupt camera motion.

The paper is organized as follows. In Section II, we first briefly review the conventional PSO on a vector space and then present our geometric PSO on SE(3). In Section III, we present our visual ego-motion estimation framework including multi-layered importance sampling using our geometric PSO. In Section IV, we verify the feasibility of the proposed visual ego-motion estimation algorithm via various experiments with the simulated and real sequences, while Section V concludes with a summary.

In this section, we present our geometric PSO algorithm formulated in consideration of the geometry of SE(3). We begin with a brief review of conventional PSO on a vector space. The more thorough review of PSO can be found in Ref. [20].

The principal idea of PSO is to use interactions between particles sharing information between themselves to find the global optimum efficiently. Consider a set of particles x≙{x
                        1,⋯,x
                        
                           M
                        } randomly distributed on the solution space. Each particle 
                           
                              
                                 x
                                 i
                              
                              ∈
                              
                                 R
                                 N
                              
                           
                         explores the solution space to find the global optimum based on two relative position vectors p
                        gb
                        −
                        x
                        
                           i
                         and p
                        
                           ib
                        
                        
                           i
                        
                        −
                        x
                        
                           i
                        , where p
                        gb is a globally best particle and p
                        
                           ib
                        
                        
                           i
                         is the best record of each particle x
                        
                           i
                        .

Each particle computes its velocity 
                           
                              
                                 v
                                 i
                              
                              ∈
                              
                                 R
                                 N
                              
                           
                        , which indicates where to go, by summing the two relative position vectors as
                           
                              (1)
                              
                                 
                                    
                                       v
                                       i
                                    
                                    ←
                                    w
                                    ⋅
                                    
                                       
                                          
                                             v
                                             i
                                          
                                          +
                                          
                                             c
                                             1
                                          
                                          ⋅
                                          
                                             r
                                             1
                                          
                                          ⊗
                                          
                                             
                                                
                                                   p
                                                   ib
                                                   i
                                                
                                                −
                                                
                                                   x
                                                   i
                                                
                                             
                                          
                                          +
                                          
                                             c
                                             2
                                          
                                          ⋅
                                          
                                             r
                                             2
                                          
                                          ⊗
                                          
                                             
                                                
                                                   p
                                                   gb
                                                
                                                −
                                                
                                                   x
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    ,
                                 
                              
                           
                        where w is the inertia, c
                        1 and c
                        2 are the weighting coefficients for the two relative position vectors, and ⊗ represents the component-wise multiplication. r
                        1 and 
                           
                              
                                 r
                                 2
                              
                              ∈
                              
                                 R
                                 N
                              
                           
                         are random vectors drawn from a uniform distribution on the interval between 0 and 1, which give stochasticity in optimization. Then each particle x
                        
                           i
                         moves to a new position using v
                        
                           i
                         as
                           
                              (2)
                              
                                 
                                    
                                       x
                                       i
                                    
                                    ←
                                    
                                       x
                                       i
                                    
                                    +
                                    
                                       v
                                       i
                                    
                                    .
                                 
                              
                           
                        
                     

Finally, p
                        gb and p
                        
                           ib
                        
                        
                           i
                         are newly updated as
                           
                              (3)
                              
                                 
                                    
                                       
                                          
                                             p
                                             ib
                                             i
                                          
                                          ←
                                          
                                             x
                                             i
                                          
                                       
                                       
                                          if
                                       
                                       
                                          f
                                          
                                             
                                                x
                                                i
                                             
                                          
                                          >
                                          f
                                          
                                             
                                                p
                                                ib
                                                i
                                             
                                          
                                          ,
                                       
                                    
                                    
                                       
                                          
                                             p
                                             gb
                                          
                                          ←
                                          
                                             x
                                             i
                                          
                                       
                                       
                                          if
                                       
                                       
                                          f
                                          
                                             
                                                x
                                                i
                                             
                                          
                                          >
                                          f
                                          
                                             
                                                p
                                                gb
                                             
                                          
                                          ,
                                       
                                    
                                 
                              
                           
                        where f is a fitness function, i.e., an objective function.

By repeating Eqs. (1), (2), and (3) for a number of times, particles can explore the solution space efficiently and convergence can be guaranteed. In order to avoid convergence to local optima, anti-converging particles called quantum particles are employed. At the end of a single PSO iteration, quantum particles 
                           
                              
                                 x
                                 q
                              
                              ∈
                              
                                 R
                                 N
                              
                           
                         are randomly generated as
                           
                              (4)
                              
                                 
                                    
                                       x
                                       q
                                    
                                    ∈
                                    B
                                    
                                       
                                          p
                                          gb
                                       
                                       
                                          r
                                          cloud
                                       
                                    
                                    ,
                                 
                              
                           
                        where B(p
                        gb,r
                        cloud) represents the particle cloud centered at p
                        gb within radius r
                        cloud. Newly generated quantum particles are also evaluated by a fitness function and can be selected as the global best particle p
                        gb according to its fitness value. If any of quantum particles finds the better position and selected as p
                        gb, the other particles x
                        
                           i
                         can escape the local optima and converge to the global optimum consequently. It is usual to call normal particles neutral particles when quantum particles are employed. An example of optimization using PSO with quantum particles is shown in Fig. 2
                        .

A camera pose can be represented by a rigid body transformation matrix of the form 
                           
                              
                                 
                                    
                                       R
                                    
                                    
                                       t
                                    
                                 
                                 
                                    
                                       0
                                    
                                    
                                       1
                                    
                                 
                              
                           
                         in the homogeneous coordinates, where R is a 3×3 rotation matrix and t is a 
                           
                              R
                              3
                           
                         vector. The rigid body transformation matrices and the rotation matrices can be identified with matrix Lie groups, i.e., the special Euclidean group SE(3) and the special orthogonal group SO(3), respectively. SO(3) and SE(3) can be formally defined as
                           
                              (5)
                              
                                 
                                    SO
                                    
                                       3
                                    
                                    =
                                    
                                       
                                          R
                                          ∈
                                          
                                             R
                                             
                                                3
                                                ×
                                                3
                                             
                                          
                                          |
                                          
                                             R
                                             ⊤
                                          
                                          R
                                          =
                                          R
                                          
                                             R
                                             ⊤
                                          
                                          =
                                          I
                                          ,
                                          det
                                          
                                             R
                                          
                                          =
                                          +
                                          1
                                       
                                    
                                 
                              
                           
                        and
                           
                              (6)
                              
                                 
                                    SE
                                    
                                       3
                                    
                                    =
                                    
                                       
                                          
                                             
                                                R
                                             
                                             
                                                t
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    ,
                                 
                              
                           
                        where R
                        ∈SO(3) and 
                           
                              t
                              ∈
                              
                                 R
                                 3
                              
                           
                        .

A Lie group is a differentiable manifold possessing group structure with smooth product and inverse operations. The Lie algebra associated with a Lie group is defined as a tangent vector space at the identity of a Lie group. The Lie algebras associated with SE(3) and SO(3) are denoted by SE(3) and SO(3), respectively. A Lie group and its Lie algebra can be related via the exponential map, i.e., exp:so(3)→SO(3) and exp:se(3)→SE(3). The log map is defined as the inverse of the exponential map. For matrix Lie groups, the matrix exponential and log give the exponential and log maps. SO(3) is a set of 3×3 skew symmetric matrices of the form 
                           
                              ω
                              =
                              
                                 
                                    
                                       
                                          0
                                       
                                       
                                          −
                                          
                                             ω
                                             3
                                          
                                       
                                       
                                          
                                             ω
                                             2
                                          
                                       
                                    
                                    
                                       
                                          
                                             ω
                                             3
                                          
                                       
                                       
                                          0
                                       
                                       
                                          −
                                          
                                             ω
                                             1
                                          
                                       
                                    
                                    
                                       
                                          −
                                          
                                             ω
                                             2
                                          
                                       
                                       
                                          
                                             ω
                                             1
                                          
                                       
                                       
                                          0
                                       
                                    
                                 
                              
                           
                        , and se(3) is given by 
                           
                              
                                 
                                    
                                       ω
                                    
                                    
                                       v
                                    
                                 
                                 
                                    
                                       0
                                    
                                    
                                       0
                                    
                                 
                              
                           
                         with ω
                        ∈so(3) and 
                           
                              v
                              ∈
                              
                                 R
                                 3
                              
                           
                        .

In this paper, we represent the camera pose as SE(3) itself not employing vector parametrization of rotation matrices such as Euler angles. By SE(3) representation, we do not suffer from a singularity problem inherent in any kind of 
                           
                              R
                              3
                           
                         vector parametrization of rotation matrices. However, since SE(3) is a curved space not a flat vector space, we should reformulate PSO in consideration of the geometry of SE(3) for better optimization behavior.

In order to formulate a geometric PSO algorithm on SE(3), we first consider a general Riemannian manifold case. What we have to consider when formulating PSO on a Riemannian manifold is that the difference between particles should be calculated as the minimal geodesic distance on a manifold. Since the Riemannian log and exponential maps are derived from the minimal geodesics on the Riemannian manifold, we can represent the difference between the elements on the Riemannian manifold as the one on its tangent vector space obtained via the Riemannian log map. In this manner, a particle can be considered to be a point X
                        
                           i
                         on a manifold, and its velocity V
                        
                           i
                         can be defined as the one on the tangent vector space of X
                        
                           i
                        .

The difference between X
                        
                           i
                         and the individual best P
                        
                           ib
                        
                        
                           i
                         can be identified as a vector on the tangent space at X
                        
                           i
                         obtained via 
                           
                              log
                              
                                 X
                                 i
                              
                           
                        , the Riemannian log map at X
                        
                           i
                        , and can be represented as 
                           
                              
                                 log
                                 
                                    X
                                    i
                                 
                              
                              
                                 
                                    P
                                    ib
                                    i
                                 
                              
                           
                        . The difference between X
                        
                           i
                         and the global best P
                        gb also can be represented as 
                           
                              
                                 log
                                 
                                    X
                                    i
                                 
                              
                              
                                 
                                    P
                                    gb
                                 
                              
                           
                        . Then the velocity V
                        
                           i
                         is obtained by 
                           
                              
                                 log
                                 
                                    X
                                    i
                                 
                              
                              
                                 
                                    P
                                    ib
                                    i
                                 
                              
                           
                         and 
                           
                              
                                 log
                                 
                                    X
                                    i
                                 
                              
                              
                                 
                                    P
                                    gb
                                 
                              
                           
                         similarly to Eq. (1) and the particle update with V
                        
                           i
                         is realized via 
                           
                              exp
                              
                                 X
                                 i
                              
                           
                        , the Riemannian exponential map at X
                        
                           i
                        , as 
                           
                              
                                 exp
                                 
                                    X
                                    i
                                 
                              
                              
                                 
                                    V
                                    i
                                 
                              
                           
                        . Fig. 3
                         depicts this geometric PSO procedure on a general Riemannian manifold. The procedure of PSO on manifolds has some similarity to the nonlinear mean shift on manifolds of Ref. [27] since the required operations are done on the tangent vector space of a manifold.

However, it is not straightforward to directly apply this geometric PSO on a general Riemannian manifold to SE(3). The first requirement of geometric PSO is to obtain the Riemannian exponential and log maps on a specific manifold. Since the minimal geodesics on SE(3) is given by the union of the respective geodesics on SO(3) and 
                           
                              R
                              3
                           
                         
                        [28], it is hard to obtain a single expression of the Riemannian exponential and log maps for SE(3). Fortunately, the Riemannian exponential and log maps for SO(3) are simply given by the left and right translations of exp and log, which are the matrix exponential and log. Thus, we can perform geometric PSO on SE(3) appropriately by splitting X
                        
                           i
                        
                        ∈SE(3) into R
                        
                           i
                        
                        ∈SO(3) and 
                           
                              
                                 t
                                 i
                              
                              ∈
                              
                                 R
                                 3
                              
                           
                        .

The calculations of particle velocity V
                        
                           R
                        
                        
                           i
                        
                        ∈so(3) and particle update for R
                        
                           i
                         are given by
                           
                              (7)
                              
                                 
                                    
                                       
                                          
                                             V
                                             R
                                             i
                                          
                                          ←
                                          w
                                          ⋅
                                          
                                             
                                                
                                                   V
                                                   R
                                                   i
                                                
                                                +
                                                
                                                   c
                                                   1
                                                
                                                ⋅
                                                
                                                   r
                                                   1
                                                   R
                                                
                                                ⊗
                                                log
                                                
                                                   
                                                      
                                                         
                                                            
                                                               R
                                                               i
                                                            
                                                         
                                                         ⊤
                                                      
                                                      
                                                         R
                                                         ib
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                          
                                             
                                                +
                                                
                                                   c
                                                   2
                                                
                                                ⋅
                                                
                                                   r
                                                   2
                                                   R
                                                
                                                ⊗
                                                log
                                                
                                                   
                                                      
                                                         
                                                            
                                                               R
                                                               i
                                                            
                                                         
                                                         ⊤
                                                      
                                                      
                                                         R
                                                         gb
                                                      
                                                   
                                                
                                             
                                          
                                          ,
                                       
                                    
                                    
                                       
                                          
                                             R
                                             i
                                          
                                          ←
                                          
                                             R
                                             i
                                          
                                          ⋅
                                          exp
                                          
                                             
                                                V
                                                R
                                                i
                                             
                                          
                                          ,
                                       
                                    
                                 
                              
                           
                        where R
                        
                           ib
                        
                        
                           i
                         and R
                        gb are the rotation parts of the individual and global best particles, respectively. Note that the differences are calculated by log after multiplying R
                        
                           i⊤ to R
                        
                           ib
                        
                        
                           i
                         and R
                        gb. Then the exponential of the resulting vector on the tangent vector space is multiplied by R
                        
                           i
                        . This is to apply the exact Riemannian exponential and log maps of SO(3). In Eq. (7), r
                        1
                        
                           R
                         and r
                        2
                        
                           R
                         represent 
                           
                              R
                              3
                           
                         uniform random vectors, and ⊗ represents the component-wise multiplication with SO(3) elements represented in 
                           
                              R
                              3
                           
                         column vectors with respect to basis elements of SO(3). The velocity calculation and particle update equations for t
                        
                           i
                         can be represented by the ordinary PSO algorithm as
                           
                              (8)
                              
                                 
                                    
                                       
                                          
                                             V
                                             t
                                             i
                                          
                                          ←
                                          w
                                          ⋅
                                          
                                             
                                                
                                                   V
                                                   t
                                                   i
                                                
                                                +
                                                
                                                   c
                                                   1
                                                
                                                ⋅
                                                
                                                   r
                                                   1
                                                   t
                                                
                                                ⊗
                                                
                                                   
                                                      
                                                         t
                                                         ib
                                                         i
                                                      
                                                      −
                                                      
                                                         t
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                +
                                                
                                                   c
                                                   2
                                                
                                                ⋅
                                                
                                                   r
                                                   2
                                                   t
                                                
                                                ⊗
                                                
                                                   
                                                      
                                                         t
                                                         gb
                                                      
                                                      −
                                                      
                                                         t
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                          ,
                                       
                                    
                                    
                                       
                                          
                                             t
                                             i
                                          
                                          ←
                                          
                                             t
                                             i
                                          
                                          +
                                          
                                             V
                                             t
                                             i
                                          
                                          ,
                                       
                                    
                                 
                              
                           
                        where t
                        
                           ib
                        
                        
                           i
                         and t
                        gb are the translation parts of the individual and global best particles, respectively. r
                        1
                        
                           t
                         and r
                        2
                        
                           t
                         represent uniform random vectors on 
                           
                              R
                              3
                           
                        .

The quantum particles around R
                        gb are generated by R
                        gb
                        ⋅exp(e), where e
                        ∈so(3) is composed of a uniform random vector on 
                           
                              R
                              3
                           
                         with the zero mean. Similarly, those for t
                        gb are generated from the uniform distribution with the mean t
                        gb. After particle update, the fitness function evaluation is performed at the new position determined by merging the newly updated R
                        
                           i
                         and t
                        
                           i
                         into X
                        
                           i
                        .

We now present our proposed visual ego-motion estimation framework based on particle filtering and PSO. The distinct feature of our framework is the multi-layered importance sampling via our geometric PSO on SE(3), which gives robustness to abrupt camera motion. Our system uses only images from hand-held cameras as sensor input. We consider both monocular and binocular cases with known intrinsic camera parameters. The overall procedure of the proposed framework is summarized in Algorithm 1.
                        Algorithm 1
                        Overall algorithm


                        
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             
                                                
                                                   1.
                                                   Initialization
                                                         
                                                            a.
                                                            Set the number of particles as N and k
                                                               =0.
                                                         
                                                         
                                                            b.
                                                            Set the number of PSO iteration as M.
                                                         
                                                         
                                                            c.
                                                            For i
                                                               =1,…,N, set X
                                                               0
                                                               
                                                                  i
                                                               
                                                               =
                                                               I, and A
                                                               0
                                                               
                                                                  i
                                                               
                                                               =0.
                                                         
                                                         
                                                            d.
                                                            Initialize landmarks with the detected FAST corners.
                                                         
                                                      
                                                   
                                                
                                                
                                                   2.
                                                   Multi-layered importance sampling via PSO on SE(3)
                                                         
                                                            a.
                                                            Set k
                                                               =
                                                               k
                                                               +1.
                                                         
                                                         
                                                            b.
                                                            Perform FAST corner detection and data association.
                                                         
                                                         
                                                            c.
                                                            For i
                                                               =1,…,N, draw X
                                                               
                                                                  k
                                                               
                                                               
                                                                  i
                                                               
                                                               ∼
                                                               p(X
                                                               
                                                                  k
                                                               |X
                                                               
                                                                  k
                                                                  −1
                                                               
                                                                  i
                                                               ).
                                                         
                                                         
                                                            d.
                                                            Perform geometric PSO on SE(3) with M iterations.
                                                                  
                                                                     -
                                                                     Update the particles via Eqs. (7) and (8).
                                                                  
                                                                  
                                                                     -
                                                                     Evaluate f(X
                                                                        
                                                                           k
                                                                        
                                                                        
                                                                           i
                                                                        ) and update P
                                                                        gb and P
                                                                        
                                                                           ib
                                                                        
                                                                        
                                                                           i
                                                                        .
                                                                  
                                                                  
                                                                     -
                                                                     Draw the quantum particles X
                                                                        
                                                                           q
                                                                        .
                                                                  
                                                                  
                                                                     -
                                                                     Evaluate f(X
                                                                        
                                                                           q
                                                                        ) and update P
                                                                        gb.
                                                                  
                                                                  
                                                                     -
                                                                     If Eq. (15) is satisfied, finish the iteration.
                                                                  
                                                               
                                                            
                                                         
                                                         
                                                            e.
                                                            For i
                                                               =1,…,N, compute A
                                                               
                                                                  k
                                                               
                                                               
                                                                  i
                                                                with Eq. (10).
                                                         
                                                      
                                                   
                                                
                                                
                                                   3.
                                                   Landmark update
                                                
                                                
                                                   a.
                                                   For i
                                                      =1,…,N, landmarks are updated via EKF and the weights w
                                                      
                                                         k
                                                      
                                                      
                                                         i
                                                       are computed via Eq. (16)
                                                   
                                                
                                                
                                                   4.
                                                   Resampling
                                                
                                                
                                                   a.
                                                   Resample X
                                                      
                                                         k
                                                      
                                                      
                                                         i
                                                      , A
                                                      
                                                         k
                                                      
                                                      
                                                         i
                                                      , and the associated landmarks according to the normalized w
                                                      
                                                         k
                                                      
                                                      
                                                         i
                                                       and set 
                                                         
                                                            
                                                               w
                                                               k
                                                               i
                                                            
                                                            =
                                                            
                                                               
                                                                  1
                                                                  N
                                                               
                                                            
                                                         
                                                      .
                                                
                                                
                                                   5.
                                                   Landmark initialization
                                                         
                                                            a.
                                                            Initialize landmarks from new FAST corners.
                                                         
                                                      
                                                   
                                                
                                                
                                                   6.
                                                   Go to Step 2.
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

To represent the camera pose as SE(3), we need a state equation properly defined on SE(3). The discretized stochastic differential equation on SE(3) previously employed in Ref. [29] is suitable for our purpose. Since we assume hand-held cameras whose odometry information is not available, we employ the auto-regressive (AR) process on SE(3) as the state dynamics, which is similar to the smooth motion models used in other previous work [8,14]. Though the smooth motion model is employed, our framework can work well even with abrupt camera motion by multi-layered importance sampling via geometric PSO on SE(3) that will be detailed in Section III-D. Our state equation on SE(3) is expressed as
                           
                              (9)
                              
                                 
                                    
                                       X
                                       k
                                    
                                    =
                                    
                                       X
                                       
                                          k
                                          −
                                          1
                                       
                                    
                                    ⋅
                                    exp
                                    
                                       
                                          
                                             A
                                             
                                                k
                                                −
                                                1
                                             
                                          
                                          +
                                          d
                                          
                                             W
                                             k
                                          
                                          
                                             
                                                Δ
                                                t
                                             
                                          
                                       
                                    
                                    ,
                                 
                              
                           
                        where X
                        
                           k
                        
                        ∈SE(3), dW
                        
                           k
                         is the Wiener process noise on SE(3) with a covariance 
                           
                              
                                 Σ
                                 W
                              
                              ∈
                              
                                 R
                                 
                                    6
                                    ×
                                    6
                                 
                              
                           
                        , and A
                        
                           k
                           −1 is the AR state dynamics term calculated as
                           
                              (10)
                              
                                 
                                    
                                       A
                                       
                                          k
                                          −
                                          1
                                       
                                    
                                    =
                                    a
                                    log
                                    
                                       
                                          
                                             X
                                             
                                                k
                                                −
                                                2
                                             
                                             
                                                −
                                                1
                                             
                                          
                                          
                                             X
                                             
                                                k
                                                −
                                                1
                                             
                                          
                                       
                                    
                                 
                              
                           
                        with the scalar AR process parameter a usually set to be smaller than 1.

In our framework, we regard a landmark as a 3-D point and represent it as a 6-D vector using the inverse-depth parametrization since it allows us to deal with 3-D points at infinity and initialize landmarks using a single image from a monocular camera [30].

With the inverse-depth parametrization, a landmark L is represented as a 6-D vector, which is composed of an initial 3-D point 
                           
                              t
                              ^
                           
                        , orientation 
                           
                              
                                 θ
                                 ^
                              
                              
                                 ϕ
                                 ^
                              
                           
                        , and inverse depth 
                           
                              ρ
                              ^
                           
                        , with a covariance 
                           
                              
                                 Σ
                                 L
                              
                              ∈
                              
                                 R
                                 
                                    6
                                    ×
                                    6
                                 
                              
                           
                         representing its uncertainty. Then measurement y
                        
                           k
                         from X
                        
                           k
                         is the 2-D image coordinates of the camera projection of a landmark, which is represented as
                           
                              (11)
                              
                                 
                                    
                                       y
                                       k
                                    
                                    =
                                    g
                                    
                                       
                                          
                                             X
                                             k
                                             
                                                −
                                                1
                                             
                                          
                                          ⋅
                                          h
                                          
                                             L
                                          
                                       
                                    
                                    +
                                    
                                       n
                                       k
                                    
                                    ,
                                 
                              
                           
                        where h is a function transforming a 6-D L into a 3-D position in homogeneous coordinates, g is a camera projection function with the known internal parameters, and n
                        
                           k
                         is Gaussian measurement noise with a covariance 
                           
                              Q
                              ∈
                              
                                 R
                                 
                                    2
                                    ×
                                    2
                                 
                              
                           
                        . Then the likelihood distribution is given as
                           
                              (12)
                              
                                 
                                    p
                                    
                                       
                                          
                                             y
                                             k
                                          
                                          |
                                          
                                             X
                                             k
                                          
                                       
                                    
                                    =
                                    N
                                    
                                       
                                          y
                                          k
                                       
                                       
                                          
                                             
                                                y
                                                ^
                                             
                                          
                                          k
                                       
                                       Q
                                    
                                    ,
                                 
                              
                           
                        where y
                        
                           k
                         is an observed measurement and 
                           
                              
                                 
                                    y
                                    ^
                                 
                              
                              k
                           
                         is the predicted measurement from X
                        
                           k
                        . Note that if there are N landmarks in a scene, y
                        
                           k
                         becomes a 
                           
                              R
                              
                                 2
                                 N
                              
                           
                         vector in the monocular case.

In the binocular camera case, it is possible to use depth information which is computed by stereo triangulation as Ref. [13]. Such depth information, however, is sensitive to noise, especially when a landmark is far from the camera. Thus, we use horizontal differences of stereo pair points as measurement directly without triangulation. Accordingly, we still represent a landmark using the inverse-depth parametrization even in the binocular camera case. In this case, we set a value of a diagonal term of Σ
                        
                           L
                         related to the inverse depth 
                           
                              ρ
                              ^
                           
                         in inverse proportion to the disparity of L at initialization because a possible error for a landmark with smaller disparity will be greater than for one with larger disparity. Note that this over-parametrization in the binocular case is intended not to rely on triangulation and the uncertainty of 
                           
                              ρ
                              ^
                           
                         is usually much smaller than the monocular case.

In the binocular camera case, we use the same projection function g for both left and right cameras with the assumption of the rectified binocular camera. Therefore, the measurement 
                           
                              
                                 
                                    y
                                    ¯
                                 
                              
                              k
                           
                         from X
                        
                           k
                         in the binocular case becomes a 
                           
                              R
                              4
                           
                         vector composed of projections of a landmark L and can be expressed as
                           
                              (13)
                              
                                 
                                    
                                       
                                          
                                             y
                                             ¯
                                          
                                       
                                       k
                                    
                                    =
                                    
                                       
                                          
                                             
                                                g
                                                
                                                   
                                                      
                                                         X
                                                         k
                                                         
                                                            −
                                                            1
                                                         
                                                      
                                                      ⋅
                                                      h
                                                      
                                                         L
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                g
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  X
                                                                  k
                                                               
                                                               ⋅
                                                               
                                                                  T
                                                                  LR
                                                               
                                                            
                                                         
                                                         
                                                            −
                                                            1
                                                         
                                                      
                                                      ⋅
                                                      h
                                                      
                                                         L
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    +
                                    
                                       
                                          
                                             n
                                             ¯
                                          
                                       
                                       k
                                    
                                    ,
                                 
                              
                           
                        where T
                        LR
                        ∈
                        SE(3) represents coordinate transformation from a left camera to a right one, and 
                           
                              
                                 
                                    n
                                    ¯
                                 
                              
                              k
                           
                         is Gaussian measurement noise with a covariance 
                           
                              
                                 Q
                                 ¯
                              
                              ∈
                              
                                 R
                                 
                                    4
                                    ×
                                    4
                                 
                              
                           
                        . Since we rectify the stereo images to have epipolar lines parallel to the horizontal axis, we set the values of 
                           
                              Q
                              ¯
                           
                         related to the vertical coordinates of a right camera image as nearly 0. It means that the degrees of freedom of 
                           
                              
                                 
                                    y
                                    ¯
                                 
                              
                              k
                           
                         is actually 3. Note that the state X
                        
                           k
                         represents the left camera pose. If there are N landmarks in a scene, 
                           
                              
                                 
                                    y
                                    ¯
                                 
                              
                              k
                           
                         becomes a 
                           
                              R
                              
                                 4
                                 N
                              
                           
                         vector. Fig. 4
                         depicts the measurement and the state transition model in the binocular camera case.

At the initial frame, we first detect the FAST corners [31] above a certain threshold from an image. A 31×31 patch centered at the selected corner on the image is extracted with landmark initialization and used in data association in future frames. At the future frames, the extracted landmark images are transformed up to the scale and rotation according to the predicted camera pose, and then landmarks are associated with the detected FAST corners on new input images by a normalized cross correlation (NCC) value. To minimize the boundary effect caused by image transformation, only a smaller 21×21 patch of the transformed image is considered in calculating NCC. We newly initialize landmarks based on the remaining corners. We maintain only the most recent 500 landmarks in a built map for computational efficiency.

In the binocular camera case, we detect the FAST corners for both images and perform stereo matching based on the corners on the reference camera (a left camera in our implementation). We apply a simple template matching method based on the sum of absolute difference (SAD), and use rectified images to reduce the search range to horizontal lines. Then the so called LR check follows to assure the matching consistency, which enhances the performance of data association. The overall procedure of the data association is briefly shown in Fig. 5
                        .

In our multi-layered importance sampling, the state transition density p(X
                        
                           k
                        |X
                        
                           k
                           −1) is used as the initial importance function. At time k, we first sample particles X
                        
                           k
                        
                        
                           i
                         via Eq. (9). Then we perform our geometric PSO on SE(3) to move the initially sampled particles X
                        
                           k
                        
                        
                           i
                         to a higher likelihood region. A single iteration of PSO can be regarded as a single layer of multi-layered importance sampling.

In the PSO iteration, we first set P
                        gb and P
                        
                           ib
                        
                        
                           i
                         according to the fitness function f(X
                        
                           k
                        ), which is defined as
                           
                              (14)
                              
                                 
                                    f
                                    
                                       
                                          X
                                          k
                                       
                                    
                                    =
                                    −
                                    
                                       1
                                       
                                          N
                                          s
                                       
                                    
                                    ∥
                                    
                                       y
                                       k
                                    
                                    −
                                    
                                       y
                                       k
                                    
                                    
                                       ∥
                                       2
                                    
                                    ,
                                 
                              
                           
                        where N
                        
                           s
                         is the number of matched landmarks. By maximizing the fitness value f(X
                        
                           k
                        ) via geometric PSO on SE(3), we can obtain the particles distributed consistently with the recent measurement y
                        
                           k
                        .

It is important for PSO performance how to appropriately set the values for w, c
                        1, and c
                        2 in Eqs. (7) and (8). c
                        1 and c
                        2 control the relative attraction to the P
                        gb and P
                        
                           ib
                        
                        
                           i
                        , respectively, and it is general to set c
                        1
                        =
                        c
                        2. The convergence speed is mainly affected by w which has a similar role to the temperature in the simulated annealing. Although smaller values of w assure faster convergence, the exploring ability is diminished and it can lead to convergence to local optima. On the other hand, too large values of w slow down the convergence speed. Fig. 6
                         shows an example that how the fitness values change in accordance with different values of the inertia parameter w. We empirically set w
                        =0.5 and 
                           
                              
                                 c
                                 1
                              
                              =
                              
                                 c
                                 2
                              
                              =
                              
                                 
                                    1
                                    w
                                 
                              
                           
                         to yield the best performance in our experiments.

The geometric PSO iteration is terminated when the following condition is satisfied:
                           
                              (15)
                              
                                 
                                    f
                                    
                                       
                                          P
                                          gb
                                       
                                    
                                    −
                                    f
                                    
                                       
                                          P
                                          wst
                                       
                                    
                                    <
                                    τ
                                    ,
                                 
                              
                           
                        where P
                        wst denotes the global worst particle at each iteration. We empirically set τ
                        =1. We also limit the maximum number of iteration to 15 in order to ensure real-time performance of the proposed algorithm.

After the particle update, we generate quantum particles as many as 20% of ordinary neutral particles with a radius r
                        cloud around P
                        gb. Here, we set r
                        cloud to be equal to the diagonal terms of the state covariance Σ
                        
                           W
                        . The quantum particles generated at each iteration play the important role to find the global optimum even in the case of abrupt camera motion. When the multi-layered importance sampling via geometric PSO is finished, A
                        
                           k
                        
                        
                           i
                         are updated with the finally obtained particles 
                           
                              
                                 
                                    X
                                    ^
                                 
                              
                              k
                              i
                           
                         via Eq. (10).

After the multi-layered importance sampling via geometric PSO on SE(3), the landmarks are updated by EKF based on the finally obtained camera pose 
                           
                              
                                 
                                    X
                                    ^
                                 
                              
                              k
                              i
                           
                         and the measurement y
                        
                           k
                        . Although we adopt the notion of multi-layered importance sampling, the weights should be calculated differently from generic multi-layered importance sampling of Ref. [32]. In Ref. [32], it is assumed that different measurements are available for each layer. However, in our framework, each geometric PSO iteration is performed with the same measurement y
                        
                           k
                        .

The simplest way to deal with this problem is to assume that we actually have another state equation which propagates particles from X
                        
                           k
                           −1
                        
                           i
                         to the finally obtained 
                           
                              
                                 
                                    X
                                    ^
                                 
                              
                              k
                              i
                           
                         via geometric PSO and we sample particles from such state transition density. In this case, the particle weight calculation is simply given by
                           
                              (16)
                              
                                 
                                    
                                       w
                                       k
                                       i
                                    
                                    =
                                    
                                       w
                                       
                                          k
                                          −
                                          1
                                       
                                       i
                                    
                                    ⋅
                                    p
                                    
                                       
                                          
                                             y
                                             k
                                          
                                          |
                                          
                                             
                                                
                                                   X
                                                   ^
                                                
                                             
                                             k
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        as in the usual case of state transition density-based importance functions. Finally, the optimal state estimation 
                           
                              
                                 
                                    X
                                    ¯
                                 
                              
                              k
                           
                         is computed by the sample mean of SE(3) particles following the formula given in, e.g., Ref. [33].

@&#EXPERIMENTS@&#

In this section, we verify the feasibility and robustness of our proposed visual ego-motion estimation algorithm via various experiments with simulated and real sequences. The experiments were performed on an Intel Core-2 Quad 2.4GHz processor with C++ implementation.

We demonstrate the superior performance of our visual ego-motion estimation algorithm (PSO-VE) to other algorithms for the simulated data set containing abrupt camera motions. The algorithms compared with ours are particle filtering-based visual ego-motion estimation ones employing different importance functions based on the state transition density (PF-VE), local linearization (LIN-VE), and unscented transformation (UPF-VE). For all the compared algorithms, instead of conventional vector space state equations, we use the same state equations on SE(3) as ours for fair performance comparison. We also show that our geometric PSO on SE(3) yields better optimization performance than the conventional vector space PSO.

We first performed visual ego-motion estimation with exactly known landmarks in order to better quantify ego-motion estimation accuracy of the proposed algorithm. A binocular stereo camera is placed on the sphere and takes the images of nine landmarks as depicted in Fig. 7
                           . The camera viewing direction is always fixed to the sphere center. In this case, we can represent various camera pose changes including both translation and orientation by adjusting only 2 angle parameters, θ and ϕ, as shown in Fig. 7. By varying these two parameters, we can quantify the influence of a local linearization error to the ego-motion estimation accuracy.

Supposing the camera suddenly moves between the two adjacent frames from its initial position to another place on the sphere, we compared the ego-motion estimation performance of LIN-VE, UPF-VE, and PSO-VE. We assumed that the landmark positions are exactly known and the data association is perfect. In order to make the computation time of each algorithm comparable, we used 800, 400, and 400 particles for LIN-VE, UPF-VE, and PSO-VE, respectively.


                           Fig. 8
                            shows the errors of ego-motion estimation by each algorithm. The errors were averaged over 10 independent runs for each algorithm. From Fig. 8, we can see that all algorithms yielded quite small errors for small θ and ϕ, which can be regarded as smooth camera pose change. However, as θ and ϕ increased, the errors of LIN-VE and UPF-VE also gradually increased. It is clear that this increasing error is due to the increasing approximation error for the relatively large camera pose change. Note that the errors of PSO-VE are consistently small despite the large camera pose change. From these results, we can conclude that PSO-VE can provide much more robust ego-motion estimation performance than LIN-VE and UPF-VE in the case of abrupt camera motion.

We now demonstrate the overall performance of our proposed visual ego-motion estimation algorithm, PSO-VE, for simulated sequences without the prior knowledge of landmarks. We again compare our ego-motion estimation performance with PF-VE, LIN-VE and UPF-VE.

Assuming a 9m by 8m rectangular room where landmarks are placed near the walls, we generated binocular stereo camera trajectories and corresponding measurement sequences with known camera parameters. For measurement noise n
                           
                              k
                           , we used the identity matrix as the covariance, i.e., the standard deviation for each image coordinates is 1pixel. As aforementioned, the measurement noise for the vertical coordinates of a right camera was set to nearly 0. We assumed that data association is always successful. We used two different camera trajectories: one is a smooth elliptic trajectory within predefined rectangular room and the other contains temporary abrupt camera motion with the same elliptic trajectory.

For the smooth camera motion trajectory, we set the same state covariances for all algorithms. To take into account different computational complexities of algorithms, we used various numbers of particles for each algorithm as shown in Table 1
                              . Note that we additionally included the algorithm employing the state transition density-based importance function, PF-VE.


                              Fig. 9
                               shows the results for the smooth camera motion. The errors were averaged over 30 independent runs for each algorithm and corresponding error bars are shown together. We can clearly see that LIN-VE, UPF-VE, and PSO-VE yielded quite accurate ego-motion estimation results for the smooth camera motion except for PF-VE.

Ego-motion estimation results for the abrupt camera motion trajectory by each algorithm with the same state covariance are shown in Fig. 10
                              . In order to make the computation time for each algorithm similar, we used 800 particles for LIN-VE and 400 particles for UPF-VE and PSO-VE. When a binocular camera made abrupt camera motion suddenly, LIN-VE failed to yield accurate ego-motion estimation results because of a large local linearization error as shown in Fig. 10(a). However, as shown in Fig. 10(c), PSO-VE was able to yield accurate ego-motion estimation results owing to the multi-layered importance sampling via geometric PSO despite the sudden abrupt camera motion. The ego-motion estimation result by UPF-VPE shown in Fig. 10(b) is better than LIN-VE, but its accuracy is still worse than that of PSO-VE.

One can claim that such sudden abrupt camera motion can be properly dealt with by using more particles with larger state covariances. However, it cannot be a perfect solution because there always exists a large local linearization error caused by an inaccurate state dynamic model without odometry information in the case of sudden abrupt camera motion. This can be verified from the results shown in Fig. 11
                              . As shown in Fig. 11 (see also Extension 1), the estimated position errors by LIN-VE with more particles and larger state covariances (case II and III) are still greater than that of PSO-VE. It is worth to note that the error by LIN-VE with larger state covariance (case III) is worse than that by LIN-VE with smaller state covariance (case II). This phenomenon is also inevitable for UPF-VE except PSO-VE that does not rely on approximation.

We also compare the performance of our geometric PSO with that of the conventional vector space PSO. For a vector space PSO, we use a 6-D vector representation of SE(3), which is composed of a 3-D translational vector and a 3-D rotation vector corresponding to the three independent values of a skew symmetric matrix obtained by taking matrix log of a rotation matrix. We analyzed the results of both geometric PSO and vector space PSO for the simulated smooth motion sequence by setting the maximum number of iteration to 100.

The analysis result is summarized in Table 2
                           . As shown in Table 2, the computation time required to perform a single geometric PSO iteration is greater than the vector space PSO because of required matrix exponential and log operations. However, our geometric PSO requires less iterations until convergence than the vector space PSO, and it results in faster processing time per frame than the vector space PSO case. Although the means of f(P
                           gb), the fitness value of the best particle, over the entire frames for both cases are quite similar, the mean of f(P
                           wst), the fitness value of the worst particle, for the vector space is much worse than that for our geometric PSO. From these results, it can be confirmed that our geometric PSO shows the better optimization behavior for our visual ego-motion estimation purpose than the vector space PSO in terms of both overall computational efficiency and optimization ability.

We now demonstrate the overall performance of the proposed visual ego-motion estimation framework especially robust to abrupt camera motion. We use our own “Lab”, “Office”, “Campus I” and “Campus II” obtained by a Point Grey's Bumblebee binocular stereo camera (BB-HICOL-60) and the publicly available “New College” data set [34]. Our C++ implementation can run in 20–30fps with 200 particles yielding satisfactory results for these real sequences.

We first test the overall performance of PSO-VE using “Lab” where the camera motion is relatively smooth. The number of particles used is 200 for both monocular and binocular stereo cases. From the results shown in Fig. 12
                           , we can regard that PSO-VE with only 200 particles yields successful ego-motion estimation results for both monocular and binocular cases because the reconstructed landmarks clearly show the rectangular shape of the lab environment. PSO-VE can run in real time with 200 particles and 25 landmarks in an image frame as shown in Table 3
                           . The results for “Lab” can be seen in Extension 1.

We also test the robustness of PSO-VE to the abrupt camera motion using “Office” where the abrupt camera motion occurs several times. We use 200, 400 and 200 particles for PSO-VE, LIN-VE and UPF-VE, respectively. The results are shown in Fig. 13
                           . In spite of the abrupt camera motion, we can see that PSO-VE can accurately estimate the ego-motion as shown in the bottom row of Fig. 13, owing to the multi-layered importance sampling via the proposed geometric PSO on SE(3). Contrarily, the ego-motion estimation of LIN-VE is quite erroneous as shown in the second row because of the large linearization error for the abrupt camera motion. The results for “Office” also can be seen in Extension 1.


                           Fig. 14
                            shows our ego-motion estimation results for “Campus I” (Extension 1), where the abrupt camera motion caused by fast walking with holding a binocular camera by hand is present. Observing the estimated trajectory overlaid on the aerial photo, it seems that PSO-VE yielded reasonably accurate ego-motion estimation results owing to the proposed multi-layered importance sampling via geometric PSO despite the abrupt camera motion.

There also exists abrupt camera motion mainly caused by many speed bumps in “Campus II”, which was captured during a 2km long car ride. Since we drove a car along the beltway, we can precisely obtain the ground truth camera trajectory from the aerial photo. The estimated camera trajectory by PSO-VE for “Campus II” is shown in Fig. 15
                           . Comparing the estimated camera trajectory with the ground truth, we can see that PSO-VE yielded accurate ego-motion estimation results for a quite long camera trajectory with a small error at the latter part despite the severe abrupt camera motion. A result for “Campus II” can be seen in Extension 1.

We finally test our proposed framework on “New College” whose camera trajectory length is approximately 2.2km. In “New College”, a binocular camera moves smoothly along a circulating trajectory. The estimated camera trajectory for “New College” by PSO-VE is shown in Fig. 16
                           . We can compare the accuracy of the estimated camera trajectory with the result of R-SLAM [35], which is a state-of-the-art bundle adjustment-based large scale SLAM method using a binocular stereo camera. Fig. 17
                            shows the results for “New College” by PSO-VE, UPF-VE, and R-SLAM. From Fig. 17, we can clearly see that the accuracy of PSO-VE is comparable to that of R-SLAM for “New College” and much better than the visual odometry given in Ref. [35]. Note that our result for “New College” is also clearly better than that of UPF-VE. A result for “New College” can be seen in Extension 1.

We additionally test the robustness of PSO-VE to abrupt camera motion by downsampling the original “New College” data set. Fig. 18
                            shows the results for “New College” by PSO-VE and UPF-VE with 2× and 3× downsampling, which means that we use only every other and third images of the original data set. We can see that the result by PSO-VE with 2× downsampling is still acceptable while UPF-VE failed to yield satisfactory results with 2× downsampling. Although the result by PSO-VE with 3× downsampling is somewhat erroneous, it is far better even than the result by UPF-VE with 2× downsampling. This robustness of PSO-VE superior to UPF-VE stems from our multi-layered importance sampling via geometric PSO.

To verify the effectiveness of quantum particles for the performance of PSO-VE, we checked the results for “New College” by PSO-VE with and without quantum particles. Table 4
                            summarizes the comparison results. From Table 4, we can see that global best particle update is rarely done by quantum particles for the normal speed sequence and there is no noticeable performance difference between with and without quantum particles. However, for the 2× and 3× downsampled sequences, the role of quantum particles is much clearer. As shown in Table 4, the number of global best particle update by quantum particles increased and all the other indicators to represent the optimization performance such as the fitness values of best and worst particles and required number of iterations also improved as a result.

In this subsection, we summarize how much each real test sequence contains the abrupt camera motion. As there is no ground truth for the real test sequences, we instead use our estimated ego-motion results as the ground truth. Since our AR process-based state dynamics assumes smooth camera velocities, i.e., small accelerations, a camera motion with a high acceleration can be considered as the abrupt motion. Therefore, we calculate accelerations for each frame and determine frames whose L
                           2 norm of accelerations are above the thresholds as the abrupt camera motion frames. We set the thresholds as 0.1m/frame2 and 0.1rad/frame2 for position and orientation, respectively.


                           Table 5
                            shows the ratio of the abrupt camera motion frames to the total number of frames for each test sequence. In the table, “Mean” and “Var.” represent the mean and variance of L
                           2 norm of accelerations of the abrupt camera motion frames. For “New College”, we can verify from the increasing ratio of the abrupt camera motion frames that the camera motion abruptness increases with the down sampling rate.

@&#CONCLUSIONS@&#

In this paper, we have proposed a new particle filtering-based visual ego-motion estimation framework especially robust to abrupt camera motion. We achieved the robustness to abrupt camera motion via multi-layered importance sampling based on our geometric PSO on SE(3). We experimentally demonstrated that our proposed framework yielded superior ego-motion estimation performance to the local linearization and UT-based importance functions in the case of abrupt motion. We also verified that the optimization performance of our geometric PSO was better than that of conventional vector space PSO. Moreover, we finally showed that our framework could run in real time to yield successful results for real sequences where severe abrupt camera motion is present.

@&#REFERENCES@&#

