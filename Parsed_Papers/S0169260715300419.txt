@&#MAIN-TITLE@&#Design of a novel biomedical signal processing and analysis tool for functional neuroimaging

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Design of a MATLAB-based GUI tool for general biomedical signal processing and analysis.


                        
                        
                           
                           EEG and ECG signals can be processed and analyzed by the designed tool.


                        
                        
                           
                           The easy-to-use and easy-to-learn, intuitive tool provides non-linear chaos analysis.


                        
                        
                           
                           The tool provides entropy, multivariate analysis with PCA and ICA, pattern classification.


                        
                        
                           
                           The tool can also be utilized for training in biomedical engineering education.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Biomedical signal processing and analysis

EEG

ECG

Graphical user interface

Non-linear time-series analysis

Multivariate analysis

@&#ABSTRACT@&#


               
               
                  In this paper, a MATLAB-based graphical user interface (GUI) software tool for general biomedical signal processing and analysis of functional neuroimaging data is introduced. Specifically, electroencephalography (EEG) and electrocardiography (ECG) signals can be processed and analyzed by the developed tool, which incorporates commonly used temporal and frequency analysis methods. In addition to common methods, the tool also provides non-linear chaos analysis with Lyapunov exponents and entropies; multivariate analysis with principal and independent component analyses; and pattern classification with discriminant analysis. This tool can also be utilized for training in biomedical engineering education. This easy-to-use and easy-to-learn, intuitive tool is described in detail in this paper.
               
            

@&#INTRODUCTION@&#

Biomedical signals are used by engineers for designing bio-electrical and bio-mechanical systems, and by physicians and healthcare specialists for diagnosing health problems. Biomedical signals must be processed before using them for any analysis, design or diagnosis. Majority of the engineers/scientists working on biomedical applications can easily process the biomedical signals according to their purposes using existing signal processing tools/programs or by developing in-house programs. Even though many tools for processing and analyses exist, they are usually sophisticated, need significant amount of time to learn, and there is still the need for programming to use those tools. On the other hand, physicians and healthcare specialists do not have as good programming background as the engineers and programmers do. For this reason, a comprehensive, easy-to-learn/use, intuitive graphical user interface (GUI) tool is needed for biomedical signal processing and analysis. Such a GUI tool can be used without any programming knowledge. Additionally, it can be used as an educational and demonstration tool for biomedical engineering students.

There are many GUI software/tools for processing/analysis and educational purposes in biomedical signal processing field. In 2003, a C++-based GUI software, Biosignal Laboratory, was designed for biomedical signal processing and analysis by a group of scientists [1]. This software allows to process data in different file formats and it includes features such as basic functions, preprocessing, transforms, segmentation, feature selection and extraction, pattern matching and clustering. Another visual tool named BioLab has been developed as an educational tool for training of biomedical signal processing [2]. This MATLAB-based GUI tool provides signal processing functions such as preprocessing, independent component analysis (ICA), signal averaging and spectral estimation functions. In addition, LabVIEW has been also used for creating biomedical signal acquisition and processing tool [3]. This LabVIEW-based tool is very effective for signal acquisition and processing, but the users of the tool need LabVIEW experience. Another educational and analysis tool in biomedical signal processing field is called UW Digiscope 3.0 [4]. This tool, which dates back to early 1990s and MS-DOS operating system, has been updated using MATLAB functions and it now features a GUI. The GUI enables digital filtering and visualization of the time and frequency results of the biomedical signals.

There are also detailed and complicated GUI tools for processing and analysis of specific biomedical signals such as electrocardiogram (ECG), electromyogram (EMG), electroencephalogram (EEG). One of the graphical tools designed for ECG signal analysis has been designed by Potse et al. in 2002 [5]. The tool is a MATLAB based GUI for multichannel ECG signals analysis. An online system based on MATLAB Web Server has also been developed for remote clinical diagnosis support from ECG signals [6]. By using this system, ECG data files can be analyzed and the results can be received via internet with only a web browser. Niskanen et al. [7], have developed software for advanced heart rate variability (HRV) analysis from ECG signals. Statistical, geometric, nonlinear and spectral measures have been obtained by this MATLAB/C-based software with time-domain, frequency-domain and non-linear methods. There are varieties of MATLAB-based GUI tools which range from simple/basic to detailed/complex for ECG signal analysis [8,9]. In the biomedical signal processing literature, there are also studies about processing and analysis of EMG signals. For example, Elcano et al. [10], have designed an interactive visual tool for EMG signal analysis. This C++-based tool enables basic computation, editing and manual correction of the EMG signals. EEG signals processing is also a popular part of biomedical signal processing and various tools have been developed for advanced EEG signals processing [11]. One of the most widely used EEG signal analysis tools, EEGLAB, has been developed as a MATLAB-based GUI tool with an advanced technical background [11,12]. EEGLAB has been improved and it now encompasses many different signal processing and analysis methods. It can be said that EEGLAB is currently the most sophisticated open source biomedical signal processing tool. Another advanced GUI tool, ELAN, can analyze EEG, magnetoencephalography (MEG), intracranial EEG (iEEG) and local field potentials (LFPs) [13]. With this C-based GUI tool, one can visualize topographical activation maps and time-frequency analysis based on the signals.

In this paper, a comprehensive, general-purpose, user-friendly, GUI biomedical signal processing tool, which is easy to learn and use has been developed based on advanced signal processing and analysis methods some of which have not been applied in any other biomedical signal processing tool before. The features provided by the developed tool are: (a) preprocessing: rectification, normalization, filtering; (b) statistical analysis: minimum, maximum, mean, and standard deviation; (c) time-domain analyses: integral, correlation analysis; (d) frequency-domain analysis: Fourier transform; (e) non-linear analysis methods: Lyapunov exponents analysis, entropy/information analysis; (f) multivariate analysis: principal and independent component analysis; (g) pattern classification: discriminant analysis. An additional important feature of this MATLAB-based GUI tool is that it provides users an easy way to import the biomedical datasets, select desired portions of the imported datasets, select desired processing and analysis methods, and save all the results by clicking a few buttons. It lets the user visualize the desired results using plots.

The paper is organized as follows: in Section 2, the technical background regarding the methods implemented in the tool has been described; in Section 3, the details of the designed GUI have been presented; discussions and conclusions are in Section 4.

Biomedical signals are continuous-time, highly variable, complex and generally noisy quantities measured from biological systems, especially from humans for obtaining information [14]. These quantities can be physical (such as temperature, pressure), electrical (such as potential, current) and biochemical (such as hormones, neurotransmitters). The most important examples of the biomedical signals are counted as action potential, electroneurogram (ENG), electromyogram (EMG), electrocardiogram (ECG), electroencephalogram (EEG), event-related potentials (ERPs), electrogastrogram (EGG), phonocardiogram (PCG), carotid pulse (CP), signals from catheter-tip sensors, speech signal, vibromyogram (VMG), vibroarthrogram VAG, oto-acoustic emission signal [15]. There can be many different type biomedical signals which can be measured by specific sensors. Functional magnetic resonance imaging (fMRI) data also provide functional data with high spatial resolution and relatively low temporal resolution, and fMRI data have been mostly used to study functioning of healthy and diseased brain, under various task conditions and under rest [16–24]. It can be said that all of the functional biomedical signals are time series and they are processed by similar signal processing and analysis techniques. Certain types of analysis methods for certain types of imaging techniques including EEG, MEG and ECG have been also used for diagnosis, which has been incorporated into therapy [15]. The process of obtaining useful information and deducing a diagnosis from various biomedical signals using computers and using it for therapy is called computer-aided diagnosis (CAD) and therapy 
                        [15]. Fig. 1
                         shows the computer-aided diagnosis and therapy based on biomedical signal analysis.

As seen from Fig. 1, CAD process consists of three stages. The first stage of the CAD process, signal data acquisition, is not the subject of this paper. The second stage, which is the signal processing, has two main steps: (i) filtering to remove artifacts and (ii) detection of events and components. These two steps can be named as biomedical signal processing. The third stage, biomedical signal analysis, has also two steps such as (i) feature extraction and (ii) pattern classification. The visual tool presented in this paper includes all biomedical signal processing and analysis steps in the CAD process, as seen in Fig. 1.

There are many techniques which are used for biomedical signal processing and analysis. They are mentioned and classified differently in different sources [14,15,25–30]. For example, it can be said that preprocessing methods, basic statistical analysis, time-domain methods, frequency-domain methods, spectral analysis methods, multivariate analysis methods, nonlinear or chaos and complexity analysis methods, classification methods are the main classes of biomedical signal processing and analysis. There are various specific methods under these categories. Including all of the techniques under every class in a biomedical signal processing and analysis tool makes the tool very complicated and hard to use. The tool we designed and described here proposes a user-friendly graphical interface. Commonly used methods are implemented in this tool, with the addition of largest Lyapunov exponents as a novelty for nonlinear analysis. Fig. 2
                         summarizes the methods included in our tool with a simple diagram.

Preprocessing involves “cleaning up” the data before the subsequent processing and analysis technique. The designed tool has three preprocessing methods: filtering, normalization, rectification. The most commonly used preprocessing technique is filtering which is used to remove artifacts and noise in biomedical signals [15]. The Butterworth filter type is used in the developed tool for filtering. Low-pass, high-pass, band-pass and band-stop filtering can be chosen as different options. Desired frequency bands to remove from the signal can be specified. Normalization module of the tool can transform the dynamic range of the signal between 0 and 1 or −1 and 1. The signals can be formed as single polarity (positive in general) half-wave or full-wave signals by using the rectification module. Normalization and rectification steps may be necessary for some biomedical signal processing and analysis techniques.

With the statistics module of the developed tool, the basic statistical parameters such as minimum, maximum, mean values and standard deviation can be calculated. These basic statistics provide useful summary information about biomedical signals [14]. Simple subsequent analyses can be performed by using these parameters in the designed tool.

The time-domain methods module of the tool can be used for time-domain analysis of the signals, which are already converted to discrete-time, but can still have continuous or discrete values [25,28]. Integration and correlation are two fundamental time-domain methods which are implemented in the developed tool. Integration can be used, for example, in calculating the power of the biomedical signal after full-wave rectification, or, to convert the signal to another unit (e.g. current to voltage). Correlation is used to characterize the relationship between the two signals and it can convey the information that whether two signals are similar, or dissimilar, and it can provide a clue about whether the signals are dependent on one another [29,30].

Frequency-domain signals are defined as a specific set of frequencies and these type signals are processed by the frequency-domain methods [26,28]. The developed tool implements the Fourier transform since it is the most commonly used frequency-domain analysis method. The Fourier transform module of the tool shows the amplitudes and frequencies of sinusoidal components or basis functions which make up the analyzed signal [29].

Multivariate analysis describes the analysis techniques that are used to analyze multiple signals measured concurrently from different parts of a system. Multivariate analysis techniques are used to transform a multivariate dataset to a smaller and more understandable form [29]. Principle component analysis (PCA) and independent component analysis (ICA) are the multivariate analysis techniques implemented in the multivariate analysis module of the developed tool. The signal can be decomposed linearly and without loss by PCA into components by using the first- and second-order statistics [29,30]. The principle components which constitute the majority of the information in the signal can be selected by using the PCA functionality in the module. Therefore, the “noisy” components, i.e. the components which do not contribute to the information in the signal much can be thrown out and thus the data size can be reduced. The purpose of ICA, on the other hand, is to convert the signals into number of components which are statistically independent, i.e. mutual information between different components is minimal. ICA is more useful if one thinks that the signals acquired are a linear mix of different independently acting sources, and it can identify these sources. ICA can also find artifact sources, and these components can be subtracted from the signal. ICA does not reduce the dimensions of the data set as PCA, but it can help identifying and throwing the artifact sources [29,30].

Many analyses methods have been implemented and incorporated in analysis tools for different functional neuroimaging data obtained such as the ones obtained by functional magnetic resonance imaging (fMRI) techniques (i.e. AFNI) [31] and near infrared spectroscopy (NIRS) techniques [32]. Some other analysis tools have also been developed to handle many different techniques of functional neuroimaging, including fMRI, PET, EEG and MEG; such as the Statistical Parametric Mapping toolbox [33]. All of these tools implement important analysis algorithms and methods which are useful to analyze different kinds of properties of neuroimaging data in an efficient manner. However, these tools lack nonlinear chaos analyses and pattern recognition/classification (machine learning) analyses, which are very useful analyses that are desired by many researchers in the functional neuroimaging field. There are codes and snippets which can do these kinds of analyses, but not specifically for neuroimaging data; therefore it takes an extra effort by researchers to modify their datasets into a suitable format for analyses by these tools, or to modify the programs/codes extensively in order to be able to analyze their datasets.

Nonlinear analysis of biomedical signals provides understanding of nonlinear and dynamic behaviors of the system that the signals are obtained from, e.g. whether the signals are chaotic or not [14]. In the nonlinear chaos and complexity analysis module of the developed tool, entropy and largest Lyapunov exponents (LLE) methods are implemented in order to determine the nonlinear behavior of the signals [33–36]. LLE is similar to entropy, which is a measure used to determine the irregularity of the time-series [37]. The greater the entropy value of a time series, the greater the irregularity of the signal. Likewise, the LLE shows that the analyzed signal is chaotic or not. The more the LLE value is greater than zero, the more chaotic the signal or the time-series; if the LLE is zero, the signal is not chaotic [33,38].

There exist some programs which implement LLE calculation algorithms. One of them is the Chaos Data Analyzer program, developed by JC Sprott [38,39]. This program is a tool for research and teaching which contains LLE calculation, among other tests for detecting hidden determinism and the underlying behavior in time-series data. In this work, we have utilized the LLE calculation program developed by Mohammadi [40] based on the LLE calculation algorithm proposed by Rosenstein et al. [41]. This implementation allows both manual and automatic initialization of embedding lag and embedding dimension parameters. We have used automatic selection of these parameters in our GUI. For the automatic initialization of embedding lag, autocorrelation and minimum mutual information is used. For the automatic initialization of the embedding dimension, false nearest neighbors and symplectic geometry methods are used.

Pattern recognition and classification involves identifying to which of a set of categories a new observation belongs to, on the basis of a training set of data. Determining or identifying categories are usually done by using the extracted data features from the signals, and feature creation and selection is thus crucial. For this reason, preprocessing and extraction of features which are performed before classification are very important steps for a good classification [15]. There are many techniques for classification. In the developed tool, mathematical functions which are called as linear discrimination functions are implemented in the classification module for separating the biomedical signals into different categories. This basic classification method is defined as discrimination analysis. The mean, std, min, max, integral value and a combination of these can be selected as features into the classification module of the tool, classification into multiple categories can be performed by the module.

The purpose of this section is to present the user-friendly and simple GUI tool which was designed based on MATLAB for analysis of biomedical signals [42]. Here, the modules, their functionality and usage are described. The flow chart in Fig. 3
                      simply summarizes the usage of the designed GUI tool.

The designed tool consists of four main parts and it has been controlled with five buttons (Fig. 4
                     ). The first part is “Dataset” part and the data import and selection process is performed in this part of the tool.

At the start of application, the first step is to import the dataset from a data file. When the user clicks the “Import Data From File” button, the browsing window in Fig. 5
                      appears. The user can browse the files and select single or multiple dataset files (such as .txt, .mat, etc.) using this window. The datasets must be in two dimensional row-and-column format where different columns should correspond to different signal source or attribute (such as an EEG channel or contact) and different rows should correspond to different instances/samples or time-points. The first line of the file can include header information and the program can recognize whether there is a header line at the beginning of the file.

After file selection process, the dataset is imported and the file path (or paths if multiple files are selected), and the row numbers are shown as in Fig. 6
                     . The tool saves automatically the imported dataset to “dataset.mat” file in cell array form in the MATLAB working directory. Every selected file is kept as a cell array in memory. The sampling rate or frequency has to be entered to the appropriate edit boxes for processing and analysis.

Users may want to study with whole dataset or a part of the dataset. So, there is a part for data selection from the dataset as seen in Fig. 6. Users can select the whole dataset by selecting the “Select All” check box or they can enter the desired file numbers, row and column number ranges in the “Files”, “Rows” and “Columns” boxes, respectively. “Select Data” button should be clicked for finishing the selection process. The selected rows and columns of the first cell (file) of the selected data are updated and shown in the table in “Dataset” part. The cell array corresponding to the selected file is shown at the top of the table in the “Shown Cell in Table” box. If the user wants to change the cell corresponding to any desired file, the desired file number should be entered in the edit box “Shown Cell in Table”. In Fig. 6, one cell (file) has been selected from two cells, first 200 rows and 4 columns of the cell have been selected, and rows 191 through 200 and columns 1 through 4 are shown.

The second part in the designed tool is “Preprocessing” module which consists of rectification, normalization, filtering and graph selection functionalities (Fig. 7
                     ). All functionalities are shown in Fig. 7. The snapshot at bottom right of Fig. 7 shows several options of filtering functionality. Every functionality has an option for “No” as in Fig. 7. If users do not want to preprocess data with a particular functionality, they can select the “No” option (the default option).

In the developed tool, a very convenient feature for helping the users also exists. If the user waits the cursor over a task/module/functionality of the tool for more than a second, a brief pop-up explanation appears about that task/module/functionality as seen in the snapshot at top right of Fig. 7.

For the selected data in Fig. 6, a preprocessing has been performed in Fig. 7. The data has been rectified to a full wave (i.e. absolute value is taken), normalized between 0 and 1, and filtered with a second-order band-pass Butterworth filter between 1Hz and 60Hz frequencies. Also, graph selection is entered for plotting rows 1–200 and columns 1–2 of the first cell of the preprocessed data. If “All” option is selected or multiple cells are entered to graph selection, the data in every separated cell is shown in a separated figure and graph. The cell numbers are written in the title at top of the graphs to distinguish between data files conveniently.

After all necessary entries, the “RUN” button needs to be clicked and all selected preprocessing steps will be performed. When the preprocessing is finished, the selected graphs are created and the preprocessing results are saved automatically to “dataprepro.mat” file in the working directory. The plot of the preprocessing in Fig. 7 can be seen in Fig. 8
                     .

The third part of the tool is “Signal Features” part, which include the statistics, the time-domain, and the nonlinear methods described in the previous section. Basic statistical parameters such as minimum, maximum, mean and standard deviation values; integral values, entropy values and largest Lyapunov exponents are included in this part of the tool. After preprocessing of the data, the desired features can be selected by the user and the selected features are computed and saved automatically to “features.mat” file by clicking the “RUN” button. For example, all features has been selected and computed in Fig. 9
                      for the example dataset being analyzed.

As seen in Fig. 10
                     , the last main part is “Analysis” part with which users can perform ICA, PCA, Fourier Transform and correlation analysis. ICA and PCA are called the “Primary analysis”; Fourier transform and correlation are called “Secondary analysis” in this part of the tool. This separation allows users to carry out two analyses successively for a dataset. For example, Fourier transform can be done for PCA components of a dataset as in Fig. 11
                     . Additionally, the graph of Fourier transform of third component is shown in Fig. 11.

The analysis options can be seen at top left of Fig. 10. After appropriate selections, users can click on “RUN” button to perform the selected analysis. In Fig. 10, independent components of the preprocessed data in Fig. 7 have also been shown. The results which are shown in table in the figure belong to the cell in the edit text box named “Cell in Table” (Fig. 10). User can write the number of the cells to the edit box that they want to see in the table.


                     Fig. 12
                      shows the PCA results of the preprocessed data in Fig. 7 by the module. Fig. 13
                      illustrates the graph selection for comparing two components of PCA results. The graph selection in “Analysis” part is achieved by the same way of the graph selection in “Pre-processing” part.


                     Figs. 14 and 15
                     
                      show Fourier transform and correlation results for the preprocessed data in Fig. 7. Also, in Fig. 14, maximum valued components in Fourier transform can be seen after performing the Fourier transform. After performing the analyses, the results are saved automatically to “analysis.mat” file into the working directory.

The last main part, “Classification”, is shown in Fig. 16
                     . Users can perform basic classification based on discriminant analysis for a selected data set in “Dataset” part. “Classification” part can classify the data which is selected and shown in the table in “Dataset” part as in Fig. 6. This means that users firstly import and select the data than they classify the data by using “Classification” part. Linear, diagonal linear, quadratic, diagonal quadratic and Mahalanobis discriminant functions of MATLAB are implemented for classification.

The classification process in the GUI needs four parameters for discriminant analysis: a training set, training category/class labels, a test set and a discriminant function. As in Fig. 16, category/class names of training set and training classes can be entered in the edit boxes at the top. Data belonging to a particular category can be selected with their indexes, which can be seen in the table in “Selected Data” part. For every class, “ADD” button is clicked after the category name and data entries are selected. Once the training set and classes are created, the number of entered classes/categories and corresponding data entries can be seen under the edit boxes. If there is a problem with the entries, “Clear” button can be used for a new training set entry. Another requirement is selection of a test set for classification. Test set is created by using the edit box which is labeled as “Selection of test set” as seen in Fig. 16. If the check box is selected, all data set except training elements will be used as test set. The last parameter is the discriminant function which is selected by using the drop down list in Fig. 16. There are five functions for discrimination of the classes in the list as seen on the left side of Fig. 16.

After all parameters are entered, the classification process is performed by clicking the “RUN” button. As seen in Fig. 16, the classes of the test set elements are shown in the table and the estimated success rate of the classification is shown in the edit box at the bottom. All results and input parameters are saved to “classification.mat” file. Fig. 17
                      shows all files of the saved dataset and results after all processes in the designed tool.

@&#CONCLUSIONS@&#

In this work, a MATLAB-based graphical user interface has been designed as a biomedical signal processing and analysis tool. The purpose was to develop a tool that the users can perform the most commonly used processing and analysis easily by using this uncomplicated, user-friendly, intuitive and flexible tool. By using the tool, the users can easily perform the following: importing and forming dataset in single file or multiple files, selecting methods, visualization dataset and results numerically and graphically, comparing the signals in dataset. Also, the tool saves the imported datasets, parameters and the results automatically. Additionally, the tool provides basically all the required steps (except data acquisition) for biomedical signal processing and analysis by implementing most commonly used methods, and the largest Lyapunov exponents method for measuring the nonlinearity and chaos in the signal. One scientist who is familiar with MATLAB and the processing/analysis methods was trained on the developed tool and it took him just 45min to fully understand it and run the processing/analysis on then dataset shown above.

The tool can also be utilized as an educational tool in biomedical engineering field. All of the properties mentioned above shows that this, easy-to-use, easy-to-learn, intuitive and flexible yet comprehensive tool makes an important contribution to the literature of biomedical field, when compared with the other similar tools.

Addition of different methods, features and functionalities to all parts/modules is planned for the future version of the tool while keeping the user-friendly and uncomplicated form. Also we are currently planning on implementing our graphical user interface software on other scientific computing software platforms such as Octave and R, as part of our future work. The tool will be tested on various datasets. The tool will then be shared in a website prepared by the authors for greater use and evaluation by the biomedical research community.

@&#REFERENCES@&#

