@&#MAIN-TITLE@&#Formal simulation model to optimize building sustainability

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Defining formally building life cycle.


                        
                        
                           
                           Automatic simulation of the formal model.


                        
                        
                           
                           Co-simulation techniques use to improve the energy calculus.


                        
                        
                           
                           Test of the model and methodology with a real case.


                        
                        
                           
                           Obtaining an optimal solution for the proposed case study.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

NZEB

SDL

Simulation

Sustainability

Optimization

Energy demand

@&#ABSTRACT@&#


               
               
                  In this work, we present a simulation model that makes it possible to find optimal values for various building parameters and the associated impacts that reduce the energy demand or consumption of the building. In the study, we consider several situations with different levels of thermal insulation. To define and to integrate the different models, a formal language (Specification and Description Language, SDL) is used. The main reason for using this formal language is that it makes it possible to define simulation models from graphical diagrams in an unambiguous and standard way. This simplifies the multidisciplinary interaction between team members. Additionally, the fact that SDL is an ISO standard simplifies its implementation because several tools understand this language. This simplification of the model makes it possible to increase the model credibility and simplify the validation and verification processes. In the present project, the simulation tools used were SDLPS (to rule the main simulation process) and Energy+ (as a calculus engine for energy demand). The interactions between all these tools are detailed and specified in the model, allowing a deeper comprehension of the process that define the life of a building from the point of view of its sustainability.
               
            

@&#INTRODUCTION@&#

In response to the new European directive 2010/31/CE [1] related to the energy efficiency of buildings and the data published by the International Energy Agency [2], which predicts a consumption increase of greater than 40% over the next 2 decades, we propose the use of a simulator that addresses the problem comprehensively from the initial concept design of the building to its eventual demolition for the development of a Net Zero Energy Building (NZEB), see [3] or [4]. During the modeling process, we will consider the energy cost optimization environmental impacts (energy, CO2, NOx, etc.) and the economic and social impacts. We can analyze the model year after year to observe how it changes over time. This makes it possible to introduce changes to the environmental model (climate data, the built environment, base model data, etc.).

For the model development, we define 4 basic modules:
                        
                           1.
                           Climatic and environmental module.

Sustainability optimization of the building.

Waste produced by the model

Energy compensation.

In this project, we analyze the process related to the energy optimization model. The energy needs of a specific building depend on the phase the building is in. We can categorize the building phases as follows:
                        
                           1.
                           The initial design (envelope development). In this phase, the use of parametric architecture [5] to define the shape of the building can be useful. In that sense, the use of a simulation model helps in the definition of some different alternatives that can be considered to analyze, among other parameters, the wind, the temperature, the maximum use of the climate zone, the sun, and the vegetation (using the existing local resources).

The construction process, which considers the rehabilitation process, the demolition process (in a rehabilitation case), environmental impacts, CO2 consumption, the economic cost (the reuse of the demolition materials), and so on.

The life of the building, a process that optimizes the energy demand and consumption of the building by the standards for indoor comfort.

The deconstruction process and the reuse of the materials.

In this paper, we focus on the simulation model related to the life of the building, which facilitates the development of multiple scenarios automatically to determine a feasible solution. For each scenario, we determine a typology based on the shape of the envelope, the climatic zone and altitude, and the best insulation to use in response to the need for minimum energy demand, minimum cost and minimum production of CO2 (taking into account the materials used). This makes it possible to obtain an optimum level of insulation for a specific building to minimize the energy demand.

Conceptually, NZEB “It is a building with a high level of efficiency, where the little amount of required energy should come from renewable sources, so that the energy balance is zero” [6]. Hence, the NZEB are connected to networks and import (or buy) energy to be consumed and export all or part of the energy produced. The expression that defines a NZEB [6] is
                        
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                    
                                 
                              
                              
                                 
                                    e
                                 
                                 
                                    1
                                 
                              
                              ·
                              
                                 
                                    w
                                 
                                 
                                    s
                                    ,
                                    i
                                 
                              
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                    
                                 
                              
                              
                                 
                                    s
                                 
                                 
                                    i
                                 
                              
                              ·
                              
                                 
                                    w
                                 
                                 
                                    s
                                    ,
                                    i
                                 
                              
                              =
                              E
                              -
                              S
                              ⩾
                              0
                           
                        
                     where e
                     =exported energy; S
                     =energy supplied; w
                     =conversion factors that are applied to each power source (i); E
                     =weighted energy exported; S
                     =weighted energy supplied.

The EU directive 2010/31/CE, with the initiative to incorporate concepts of reduction in the impact on the environment, regulates, in article 9, which on December 31, 2020 the new buildings need to be energy consumption almost null – nNZEB, nearly NZEB – [7].

To know more related to NZEB some interesting works are [3,4,8] or [9].

Today, every building is connected to energy and social networking, which has changed the rules of the game. We now have to address these concepts to complete the cycle (an idea already introduced in Cradle to Cradle [10] and in which we face a new paradigm of design (see Fig. 1
                     )).

We examine the building energy performance using numerous resources for modeling the prototype. The designer spends a significant amount of time designing the virtual model. Only after studying several iterations of the design can a good solution be identified. Without analyzing all possibilities, the designer cannot ensure that the solution adopted is the best, or at least one of the best, solution. Most commercial simulation software packages allow us to calculate the annual energy analysis of the building but do not optimize the process. Neither the results nor the previous steps, such as the design, construction or final demolition processes, are optimized.

Currently, efforts have been made to develop approaches and methods for assessing buildings [11], methods to integrate daylight and thermal efficiency [12–14], photovoltaic systems [15] and systems of multiobjective optimization for urban design [16] that take various aspects into account when we create an energy optimization system. Some systems address parts of the optimization problem posed above, such as GenOpt [17], an optimization program for minimizing a cost function that is evaluated by an external simulation program, or OptEPLus [18], an application focused on the tertiary sector. In line with these applications, BEopt [19] uses a sequential search technique to automate the process of identifying an optimal design regarding energy use, and Dakota [20], Design Analysis Kit for Optimization and Terascale Applications, is a toolkit that is intended to perform an optimization of the design in a multilevel C++ object-oriented framework.

Commonly used languages for programming simulators or optimization tools are Java, Fortran, C++ and Delphi, among others. The use of different languages can cause problems of integration, model definition and understanding among the researchers who come from different disciplines. One of the proposals of this work is the use of a formal language to simplify the model definition and its use.

Using formal languages, such as Discrete Event System Specification (DEVS) [21], Specification and Description Language (SDL) [22] or Petri Nets [23], is without a doubt the best solution to easily integrate and communicate ideas about the model with the other members of the team, improve interoperability with other models (Co-simulation) and encourage collaboration. An example of a recent work that explores the use of formal languages in this area is [24], or [25], that explores the uses of Co-simulation approach to calculate the HVAC (heating, ventilation and air-conditioning) systems in a building.

In this paper, we use SDL as a formalism to define the model behavior and structure. SDL [26] is a visual and easy-to-understand language. It can detail the processes and the procedures that define the model behavior, which allows engineers, architects and researchers to integrate and understand the models easily without learning a specific and more time-consuming programming language.

Defining the model is not enough; it is necessary to perform several calculations. To do this, we identified different calculation engines capable of analyzing the building from an energy standpoint [27], such as DOE-2.1, BLAST, TRNSYS and IES 〈VE〉. The use of EnergyPlus [28] with DOE-2.1 and the BLAST calculation engine (a combination that has passed the BESTEST –Building Energy Simulation TEST) [29] gives us the computing power to analyze many factors that influence the energy required by a building. Thus, DOE-2.1 has become one of the most widely used and internationally recognized calculation engines and has been adopted as the base engine in many commercial software interfaces and eQuest [30].

One of the aims of this research is to be able to describe, as formally as possible, the structure and the behavior of the lifecycle of a building. This goal is crucial in this project because the people involved are diverse and come from many different backgrounds. To address this issue, we use SDL [22] to formally define the model.

The use of SDL language gives us maximum flexibility to integrate new processes and procedures to the system. Using a formal language is an advantage for programming and for enabling nonspecialized technicians to access programming to design their own models and integrate them directly into the simulator much more easily. In addition, the explanation of the model itself is more intuitive, simple and direct than using a programming language such as C. We will teach the programming model to the group so that it will be much easier to understand and detect errors.

SDL Language is an object-oriented formal language defined by the International Telecommunications Union–Telecommunications Standardization Sector (ITU–T) (the Comité Consultatif International Telegraphique et Telephonique [CCITT]) on the Z. 100 recommendation. The language was designed for the specification of event-oriented, real-time and interactive complex systems. These systems might involve different concurrent activities that use signals to communicate. SDL is based on the definition of four levels to describe the structure and the behavior of the models: system, blocks, processes and procedures. In SDL, blocks and processes are named agents. The outermost block, the system block, is an agent itself. Fig. 2
                         shows this hierarchy of levels.

The different concepts that the SDL language covers are as follows:
                           
                              •
                              
                                 System structure: from the blocks to the processes and their related hierarchy.


                                 Communication: signals, communication paths or channels, parameters that can be carried out by the signals, etc.


                                 Behavior: defined by different processes.


                                 Data: based on Abstract Data Types (ADT).


                                 Inheritance: useful for describing the relationships between objects and their properties.

Although a textual SDL representation is possible (SDL/PR), this paper uses the graphical representation of the language (named SDL/GR). More details about the Specification and Description Language can be found in the recommendation Z.100 [22] or on the website [31].

The model structure is mainly described by the SYSTEM diagram and the BLOCKS diagrams. In the SYSTEM diagram, we are focused on describing the main elements of our model and the main interactions between the main components (see Fig. 3
                        ).

It is remarkable that this diagram defines in a graphical manner the hypotheses that will be considered. In this study, we are following the taxonomy of the hypotheses presented in [32].

The B1_Environment block encapsulates all of the processes related to the environment. As an example, it represents the amount of radiation that the building receives, the hydrologic conditions, and so on. All of the information that is calculated in this BLOCK is sent to the B1_building block through a file that represents all of the required weather information. This file, “epw,” depends on the climatic zone.


                        B1_Building is the main BLOCK of the model because it represents the main processes that govern the behavior and the structure of the building. We see this in detail in the following figures.


                        B1_compensation encapsulates the processes necessary to deliver the energy consumed by the building and to neutralize the environmental impacts (through the process of energy generation for example with solar photovoltaic or CO2 gas absorption systems).


                        B1_WasteTreatment represents the processes related to waste disposal. Each of the different blocks of the model is divided into a single process. In Fig. 4
                        , we can see the decomposition of the B1_Building BLOCK into a single process that defines the behavior of the building (P1_Building process).

Following the construction of the SDL structure, we can now define the behavior of the model by detailing its processes.

In this section, we focus on the processes that define the behavior of the building.

The main variables that the model uses are detailed in Table 1
                        .

For the environmental impact variable we are using the categories recommended by the Standars prEN 15643-2 [34], see Table 2
                        , for the social impact we use the categories recommended by the Standars prEN 15643-3 [35], see Table 3
                        .

All of these variables can be taken into account in the model; however, in this paper, we describe only the Energy Impact variable. We are focused only in this variable because in this paper we want to explain how the model behaves, and show by an example how we can use this model in a real case. Fig. 6
                        
                         details this behavior for the BUILD state of the P1_Building PROCESS. This is the process responsible for the representation of the entire life of the building, from the design phase to the destruction and recycling phases. Like any other SDL process, it has one or more states. In this case, the building starts in the DESIGNED state, representing the fact that a specific design has been selected for the building and that the building process can start. The BUILD state represents the fact that the building has been constructed and can be used. The USED state represents the fact that the useful life of the building is over and that it needs to be demolished. Finally, the DESTROYED state represents the fact that the building has been demolished. Every one of these states has its own calculations and logistics.

Focusing on the state that defines the construction process (from the DESIGNED state to the BUILD state) and the behavior of the building while it is used (BUILD state), we obtain the diagrams shown in Figs. 5 and 6.

In these diagrams, we use auxiliary variables defined in the DCL sections and PROCEDURES that are declared in the diagram to complete the needed calculus for the model. The entire model is represented in the diagrams, which are complete.

The second part, which can optionally be skipped, calculates the building energy consumed (this part of the model can analyze and optimize different HVAC systems according to the COP and the performance of each active climate machine so that we know the kWh/m2 energy consumption required to reach thermal comfort for each situation studied).

We can then more deeply analyze the behavior of the PROCEDURES that use a database to calculate the environmental, social and economic aspects of the materials used and the systems applied to build the model. The S1_ACV-Materials PROCEDURE analyzes environmental impacts and the economic and social costs related to materials. The S1_ConstructionProcess PROCEDURE analyzes the construction process (see Fig. 7
                        ).

In Fig. 8
                        , we see the S1_Demand PROCEDURE, which takes two input parameters (.idf file and .epw file paths) and produces 4 outputs: the energy and the different demands of the building for one year (ImpactAmbiental, ImpactEconomic and ImpactSocial). These calculations are made by an external simulator (Energy+), the results of which are incorporated into the model. In this case, the PROCEDURE named Execute acts as a link between the SDL model and the external tool Energy+. This procedure is part of the API of the SDLPS simulator.

The (e)CO project (see Fig. 9
                     ) is a prototype of self-sufficient housing designed by the School of Architecture of the Vallès of the Polytechnic University of Catalonia [36] that was been submitted to the prestigious Solar Decathlon Europe competition, SET-2012. The project was being developed by students in collaboration with interdisciplinary research groups, private companies, public administration bodies and other agencies.

It draws on the vast experience gained in the previous contest—Solar Decathlon Europe 2010—in which the project LOW3 (Low Impact, Low Energy, Low cost), submitted by the same research group, (e)CO, won the 1st prize for Architecture [37].

The words “(e) + co” together encompass the current social context. The (e) or “erroba” reinterprets the symbol of our decade. It symbolizes the balance between systems and self-sufficiency. “-Co” involves putting together, incorporating new areas of research, and development and dissemination based on cooperation. As a result, the term “(e)CO” is intended to describe an alternative way to relate to technology, resources and users in the pursuit of low environmental impact solutions in the field of sustainable architecture.

The goal is to develop a self-sufficient housing model based on the principle of zero economic and ecologic footprints. The mechanism to achieve this zero footprint goal is to offer more efficiency, more performance and more comfort using less material, less energy and less money by designing a home in which the organization of the building systems is in keeping with the life cycle.

The implementation of the model is based on software named SDLPS that was developed in the inLab FIB of the [38] Polytechnic University of Catalonia [39,40]. This tool understands SDL-RT (the code for tasks is defined using ANSI C language) and a set of proposed extensions that will be part of the future release of the SDL standard that simplifies the time management [41–43]. Regarding the infrastructure used, it is remarkable that SDLPS has been built using C++ and C languages. The code related to the model (represented using the C language for tasks and SDL blocks for procedures) is used in the model through a DLL, and the generation of the SDL-XML model is performed through a plug-in in Microsoft Visio®. As a result, the Validation and Verification of the model can be performed mainly by reviewing graphic diagrams in Microsoft Visio®. This dramatically simplifies the interaction between the different parts involved in the project.

As we can see in Fig. 10
                     , the simulator shows the SDL diagrams of the model that are going to be simulated. The system uses an XML representation of the SDL model obtained from Microsoft Visio® working with the SanDriLa© plug-in.

Because we are using this infrastructure, no specific implementation for this project is performed. This simplifies the verification process needed in every simulation project, see [44]. In Fig. 11
                      is presented the modeling process [45], the simplified steps required in a simulation project are represented in red as a result of using this methodology.

The validation of the model is performed through the SDL representation of the model. As a result of the modular and graphical structure of the language, all of the actors involved in the project can participate in this validation, despite their expertise using any given programming language. The verification is assured because the tool understands SDL diagrams. This methodology assures the complete and unambiguous formal definition of all the elements involved in the simulation model. Thanks to the modular structure of the language the model can be completed with other simulation models that can be used to improve the solutions obtained by the simulator. As an example the model can include the representation of the distribution and the treatments of the garbage generated during the building process, including a model that specifically details this. This holistic representation of the model leads to a complete solution for the problem we want to solve. Other interesting feature of using a formal language is that the model is not tool dependent. In the case of SDL this is especially interesting because is an ISO language. This means that several tools can be used to implement the final model. This makes that the selection of the tool depends on the project requirements and not on the model definition. Finally, due to the completeness and unambiguity of SDL an automatic implementation of the simulator is allowed. Several commercial tools, like PragmaDev [46] or Ciderella [47], support this interesting feature that simplifies the verification (assure that the implementation of the model is correct). Also some techniques exists in order transform SDL to C++ like [48]. In our case we use SDLPS because allows a distributed execution of the model and the reuse of legacy simulation models and the integration of other simulation engines in a single tool [49].

To define several scenarios that we will compare, SDLPS makes it possible to define the experiments. For each one of these experiments, a native SDLPS plug-in generates an idf (with the data needed according the experiment number) and puts this file in a directory that contains all of the other data needed to execute the experimental scenario.

The conceptual structure of the architecture is represented in Fig. 12
                     .

To ensure that the model is validated, we must ensure that the hypotheses used are correct. Several techniques exists to validate a simulation model [50], however only few can be applied in a simulation project due to the inherent limitations of the project or the time constrains. We use two techniques to perform the validation. First, we perform a comparison of our model with other models. The underline idea is that if other models work fine, the outputs must be similar when analyzing the same scenario [51].

The system that we are using to perform the comparisons is Low3 [37] because we have the complete data set for this building and we can compare the results obtained from our methodology with the real data. The problems we want to detect here are related to the generation of the scenarios, the communication mechanisms of the different elements and the use of the energy+ engine. In addition, we compare our model output using SDLPS with Design Builder commercial software [52], which also uses energy+, but in a different way and with the energy+ engine being used directly. This allows us to validate some of the hypotheses made about our model. The complete analysis done here can be reviewed on [53].

With these validations, we ensure that the assumptions of the model related to the structure and the simplification used are correct. This is not enough, however, because we need to validate whether the data that we plan to use in the (e)CO model is correct. To do this, we perform a Face validation [54,55] which is based on the following idea: “Individuals knowledgeable about the system are asked whether the model and/or its behavior are reasonable. For example, is the logic in the conceptual model correct and are the model’s input–output relationships reasonable” [56]. To perform the face validation the formal representation of the model was a valuable tool, since the experts do not need to understand the programming language used to implement the simulator. Based on the unambiguous and complete graphical representation of the model, the experts on the system can validate the model, assuring that the relations and the communications existing between the different model elements are correct and coherent with his understanding of the system. Also the experts analyze the outputs of the model understanding his coherence based on his knowledge of the system.

The experimental variable that we take into account in this simulation of the (e)CO prototype is the insulation thickness. To conduct the experiment, we define a factorial 2K experiment. The response value is the energy demand, and we are focused on minimizing this value. The factors we can modify are the different walls of the building, and the levels are two insulation values we can define for each one of the walls. For each of the different walls that exist in the building we categorize them in tree modules (north, south and east), see Fig. 13
                     .

The structure of the experimental design is summarized in the next table. The initial value is 0.212, and the new value (improved insulation) is 0.174.
                        
                           
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                                 
                                    
                                       U (W/m2
                                       K)
                                    North MODULE
                                    South MODULE
                                    East MODULE
                                 
                                 
                                    North wall
                                    West wall
                                    South wall
                                    East wall
                                    North wall
                                    West wall
                                    South wall
                                    East wall
                                    North wall
                                    West wall
                                    South wall
                                    East wall
                                 
                              
                              
                                 
                                    s1
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                 
                                 
                                    s2
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.174
                                 
                                 
                                    s3
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.174
                                    0.212
                                 
                                 
                                    s4
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.212
                                    0.174
                                    0.212
                                    0.212
                                 
                                 
                                    ...
                                    ...
                                    ...
                                    ...
                                    ...
                                    ...
                                    ...
                                    ...
                                    ...
                                    ...
                                    ...
                                    ...
                                    ...
                                 
                                 
                                    S4096
                                    0.174
                                    0.174
                                    0.174
                                    0.174
                                    0.174
                                    0.174
                                    0.174
                                    0.174
                                    0.174
                                    0.174
                                    0.174
                                    0.174
                                 
                              
                           
                        
                     
                  

Each of the different experiments requires approximately 2min to be completed on a quad core i5 computer, and because we have 4096 experiments, we need approximately 6days when using a single computer.

SDLPS helps us by facilitating the implementation of a very simple distributed scenario. In our approach, we split all of the experiments into different submodels that can be executed on different machines. Each one of these machines is connected to a single SDLPSEye that receives all the information from all the engines. The instruction that makes it possible to receive this information is the Report procedure call. This procedure belongs to the SDLPS API.

@&#RESULTS@&#

The main output of the model is the Natural gas consumption (kW/h). The main problem in this model is the amount of data we obtain from the simulator. To analyze all of this data, because a 2k factorial design was chosen, we use the Yates algorithm to detect the interactions of the different factors and the main factors of the model.

In Fig. 14
                     , a diagram that shows the Natural gas consumption (kW/h) for each of the different simulations is shown. The pattern presented by the model clearly shows a regular structure in the emissions. To execute the model we divide the different scenarios in four main blocks (scenario 1–1000, 1001–2000 and so on). This pattern is represented in the figure because in the x axis is shown the identifier of the experiment.

In Fig. 15
                     , the relation between the cost and consumption for each of the 4096 simulations is shown. It is possible to detect a set of scenarios that we can consider as optimal or near optimal solutions, which relates a low consumption with low cost.

As it could be difficult to assure what is the best alternative, taking into account the inherent variability of a simulation solution, it is need to use a methodology to analyze the data. For that we use the Yates algorithm, the mathematical details of the Yates analysis are given in chapter 10 of [57]. The main purpose is to identify the factors (that lead to the different experimental alternatives) that have the most effect on the answer.

These two graphics are obtained automatically from the model execution thanks to the graphical capabilities of the tool and his integration with R language.

Thanks to Yates algorithm we obtain the effects of the factors of the model and have obtained a clear picture of these effects, which are represented in Table 4
                     .

Now, we can clearly analyze which parameters are the most influential regarding the potential for energy savings and the walls we must pay attention. As you can see in Table 4, the effects that maximizes the energy demand savings are those who have bigger values on Effects column, hence depending on the amount of resources we have is interesting to invest first on North Wall of North module, then on South Wall of North module, and then in East Wall of East module, and so on.

This work presents a novel approach that uses co-simulation to analyze the energy demands of a building. The complete, graphical and unambiguous definition of the model thanks to a formal complete and standard language such as SDL, simplifies the interaction and the participation of all the actors involved in the development of the model. Nonexperts in simulation can understand the dynamic behavior of the model as a result of the graphical nature of SDL. The team can evaluate the model and propose modifications using common tools such as Microsoft Visio®. This approach simplifies the involvement of the specialists in the model definition, a key element to success in a complex simulation project [54]. The formal representation of the model used to perform its validation, allows to detect errors of interpretation before any implementation.

This is an structured model that allows to increase, thanks to the modularity of the approach, the complexity of the model, and interact with other models and systems (like those defined formally with DEVS or Petri Nets as an example).

The model using open source calculus engines, allows the optimization of the analyzed system following the European normative CEN/TC 350 (UNE-EN 15643-2, UNE-EN 15643-3, UNE-EN 15643-4).

Also, the automatic mechanisms existing to execute the model, without the need of implement it, simplifies the verification process. Co-simulation approach allows the combination, in our case using SDLPS, of several sub-models and calculus engines that simplifies the definition of the dynamic behavior of the building. Specifically, the use of energy+ makes it possible to precisely calculate the energy demand as is shown on [53].

From the point of view of the infrastructure used to implement the model, it is interesting to remark that it could be executed on a cloud infrastructure, allowing to interact with the model with a common web browser that shows the basic parameterization elements of the model. Also thanks to the parallel structure of SDL it is easy to parallelize the execution of the model on SDLPS.

Regarding the results obtained on the case study analyzed, it is notable that not all of the walls of the building react the same way to the modification of the parameters. This clearly implies that it is not necessary to invest in all of the constructive elements of the building to achieve an optimal solution. We detect where to invest, the more interesting walls to consider and the actuations that must be done, in order to reduce the energy consumption; the use of a 2K factorial design with the help of a posterior Yates algorithm, helps in an easy interpretation of the data.

As a result of using a formal language like SDL to define the proposed integral sustainability model, it will be possible in the future to optimize the studied model throughout the four phases of the construction process of a building by taking into consideration the environmental, economic and social impacts. In addition, it is possible to define the process needed to compensate for the demanded and the consumed energy.

The methodology and the tools proposed are currently used successfully in a real project to improve the behavior of a new architectural design comparing several alternatives.

@&#ACKNOWLEDGEMENTS@&#

We appreciate the support of the inLab FIB of the Polytechnics University of Catalonia.

We acknowledge the LivingLab Low3 project directed by Torsten Masseck.

We appreciate the (e)CO team—equilibrium through cooperation—the group that designed the prototype building for the Solar Decathlon 2012 competition.

@&#REFERENCES@&#

