@&#MAIN-TITLE@&#BIM perspective definition metadata for interworking facility management data

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We analyzed the FM activities and identified the BIM-based FM system usability.


                        
                        
                           
                           We suggested BPD considering variability related to BIM-based FM system development.


                        
                        
                           
                           We developed the pilot system of BIM-based FM with BPD about the FM case study.


                        
                        
                           
                           We proved BPD efficiency by conducting the statistics analysis.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

BIM

FM

BPD

Variability

Perspective

Metadata

@&#ABSTRACT@&#


               
               
                  The purpose of this research is to suggest and develop a building information modeling (BIM) database based on BIM perspective definition metadata for connecting external facility management (FM) and BIM data, which considers variability and expandability from the user’s perspective. The BIM-based FM system must be able to support different use cases per user role and effectively extract information required by the use cases from various heterogeneous data sources. If the FM system’s user perspective becomes structurally fixed when developing the system, the lack of expandability can cause problems for maintenance and reusability. BIM perspective definition (BPD) metadata helps increase expandability and system reusability because it supports system variability, which allows adding or changing the user perspective even after the system has been developed. The information to be dealt with differs according to the user’s role, which also means that the data model, data conversion rules, and expression methods change per perspective. The perspective should be able to extract only the user-requested data from the heterogeneous system’s data source and format it in the style demanded by the user. In order to solve such issues, we analyzed the practice of FM and the benefits of using BIM-based FM, and we proposed a BPD that supports data extraction and conversion and created a prototype.
               
            

@&#INTRODUCTION@&#

Research and prototype systems for facility management based on BIM are currently being developed with emerging issues of interoperability between heterogeneous data sources that considers expandability and convenience from the user’s perspective. The buildingSMART Association and others are working to develop and standardize the Industry Foundation Classes (IFC) and reflect demands of the industry for smooth interoperation of data in the construction field because loss and alteration of information when exchanging data between modelers are being reported from the field [1]. Efforts are underway to solve problems such as ambiguity in expressing construction information through the recently announced IFC4; linkage plans between the solutions, however, are still lacking. Especially, as the viewpoint of FM, to integrate the facility dataset into BIM object database such as IFC, the formal methodology to support the function such as data extraction, object binding with FM dataset, data transformation including formatting considering FM use-case perspective is needed.

The purpose of this research is to propose and develop a BPD metadata structure for connecting heterogeneous FM system data and BIM while considering variability and expandability from the FM system user perspective through analyzing the practice of FM and the benefits using BIM-based FM. If the FM system user perspective is fixed without variability when developing the system, expansion becomes impossible and may cause problems for maintenance and reusability. By using the metadata which can define the data view, object binding rule, data transform logic depending on the user perspective, the issues can be solved. The BPD metadata must be able to extract only the data required by the user from the heterogeneous data source and display it in the user’s preferred style; thus, it can comprise a data model that defines which data to extract, a conversion logic that defines how to convert the extracted data, and a view which defines how to display the converted data.

In order to prove the usefulness of this architecture, we first propose a BPD metadata structure that supports a variable user viewpoint. Then the perspective of a BPD is defined through the development of a prototype, and lastly, the possibility of effective extraction of external system data is shown.

To consider variability from the viewpoint of an FM system user, the required data needs to be extracted and processed for the relevant use case. As part of the data extraction process, the system uses a concept known as extract, transform, and load (ETL) [10], which is mostly used in management engineering. Further, the StyleView in metadata form is used to express the processed information. For this, the structure of BPD metadata is developed, and a simple facility management use case is demonstrated. The FM use case is extracted using ETL, and a process from BIM facility management data of the Korean Constructive Technology Research Center can also be checked using BIM based on defined BPD metadata for each user role.

To consider variability from the FM system user’s perspective, the required data for the relevant use case needs to be extracted from the heterogeneous data and processed. The ETL concept was used for extracting data, and StyleView, in the form of metadata, was used to express the processed information. A BPD metadata structure was developed, and a simple facility management use case was demonstrated. ETL was used to extract and process the required data for the FM use case from the BIM facility management data [2] of the Korea Institute of Construction Technology (KICT), and information could be verified through the BIM model according to the BPD metadata defined per user role.

The research method is as follows (Fig. 1
                     ). First, in Section 3 we observed the research trend related to the research. In Section 4, in order to develop a BPD metadata structure for connecting the BIM and facility data, related utilization scenarios and the benefits of the BIM-based FM through FM practice were defined and analyzed, and a BPD structure was designed for processing the scenarios. The BPD metadata and framework were designed to support the proposed use case. A simple prototype program was demonstrated to use the proposed use case effectively. The last section discusses the conclusion and further research.

Because the purpose of this research is to propose a metadata structure that considers variability and expandability of the user’s perspective, the binding method between data expression, processing and the heterogeneous system data is essential. This shall be an examination mainly of design pattern and Webservice, ETL and data warehouse (DW), neutral file format, information delivery manual (IDM), and model view definition (MVD) research content in order to examine research related to the method.

Design patterns originate from an object-oriented design concept and are an amalgam of the parts that compose the system architecture. When designing the system architecture, suitable use of design patterns improves the usability, reusability, and expandability of the system. Among studies related to the expression and processing of information per user viewpoint using BIM technology are the studies that used model view control (MVC) patterns in the software architecture design pattern developed in the engineering field. The design pattern was invented to solve system design problems in a specific area by patterning the design expertise discovered when solving frequently occurring problems. It was defined by Eric Gamma et al. [24] who, after grouping their names and the rules of use, were called the Gang of Four. The MVC pattern separates the data model, the controller that processes the data, and the view that expresses the data, and it is designed so that even when the view is altered, the alteration does not affect the other components. Thus, various perspectives on views can be derived and defined from the basic view class, which allows the user easily to expand the information expression perspective. Furthermore, because the model is independent of the business logic, maintainability is improved because the model is not affected when the logic is altered.

A study done by BIM of design pattern languages [3] compiled the benefits of BIM of design pattern technology and also the types of design patterns that can be applied. A case of design pattern application to BIM was when Umit Isikdag focused on the cooperation process of project stakeholders in a BIM-based process and suggested using design patterns for synchronizing the information required for the view per perspective of the information generated during cooperation. Isikdag also explained how to apply MVC patterns to a domain and how MVC-related components synchronized information by processing events when a change in the model occurs, and suggested a relevant method [4].

Another related study was on design patterns to support a service-oriented architecture (SOA) for sharing BIM information on the Web, and an SOA with three design patterns for effective Web-based BIM information exchange and sharing were suggested [5]. SOA and simple object access protocol (SOAP) are among these software architecture design patterns, and they offer service-oriented protocols that provide necessary information to users. Usually Web-service methods, including SOAP and others, are used for the protocol.

The BIM-based service-oriented platform study [6] offered a method of extracting IFC-based data for building energy simulations and a platform architecture through a Web service for the exchange and integration of data with a heterogeneous system. A study regarding SOA4BIM [7] proposed SOA as a method for exchanging and integrating BIM data from the perspective of interested parties, and it explained the advantages that can be obtained from a SOA4BIM framework. A study about Web service for information visualization of the 3D BIM information [8] proposed a method for extracting BIM by mapping the IFC as XML using a Web service for visualizing the BIM information.

The MVC design pattern and Web-service architecture including SOA support information expression per perspective. However, the perspective becomes fixed during development and thus has no variability or expandability after development.

ETL is a method of automatically generating a DW by extracting information from particular perspectives from a variety of heterogeneous systems. The geographic information system (GIS) field, which uses configuration data, like BIM, uses DW to make effective decisions. In the GIS field, spatial data is included in the DW and expanded into a spatial data warehouse (SDW), and studies have been conducted on using it to support decision making and analysis by storing nonvolatile data, which is integrated and temporal, of mostly spatial and non-spatial information [9]. An SDW can be generated and renewed centrally through ETL. Studies related to BIM have revealed that spatial data extracted and stored through the ETL process from heterogeneous system data must have a structure that supports data analysis requests to the DW [10]. In another study by Ufuk Gökçe and Umut Gökçe, a system was implemented using ETL to extract, convert, and store data from an energy management system [11].

A study regarding the framework that supports multiple perspectives in BIM [12] discusses ETL, one of the various parts composing the framework, and reveals that ETL methods can be used effectively for necessary data extraction and integration to support multiple standpoints.

A study about acquiring and integrating building performance information [13] used ETL methods to extract heterogeneous data which can construct a DW to make decisions in particular cases of usage. A study regarding multi-dimensional building energy monitoring [14] used ETL as a necessary method for monitoring building energy consumption and supporting decision-making from a multi-dimensional standpoint. It constructed a DW for decision-making using ETL, and it implemented methods proposed through case research using test-bed buildings and described their effects.

These studies related to ETL and DW pointed out the usage difficulty of a single integrated information model when project stakeholders use the database differently. In order to avoid these problems, they suggested an architecture that extracts building information from the data source and from sensor data including multidimensional data.

However, methods of data extraction and generation and decision-making from a multi-dimensional standpoint through ETL and DW are problematic because they are unable to increase or improve the data schemas of DW without going through redevelopment following system development. These methods are difficult to apply unless the facilities manager or employees completely understand the programming languages or development tools. To improve functions after effort and expense are invested in the initial development of a system, system maintenance, including outsourcing to system integration and development companies, is necessary.

Many studies have been carried out regarding the benefits and limitations of BIM-neutral file formats such as IFC and construction-to-operations building information exchange (COBie). Although IFC is the only plan for BIM data exchange based on neutral file formats, IFC only supports a generalized BIM data structure in which data usage from the standpoint of interested parties in the project is not supported.

In studies on BIM-based facility management using a neutral file format such as IFC, Ko [15] pointed out the excessive cost of developing BIM-based computer-aided facilities management (CAFM), and suggested a way to use the BIM data from the FM phase based on IFC and COBie. COBie, when used from a facilities management standpoint, is a neutral file format defined by the Model View Definition (MVD) of IFC. This, however, ended only as a suggestion, and no demonstrations for usability verification were presented. Ref. [16] examined the requirements data based on COBie; divided information into essential, recommended, and optional information; and suggested data worth referencing when establishing a facility maintenance management system. A study about BIM management for asset management owners [17] explains the advantages of BIM-based asset management and proposes a BIM-based asset management framework using COBie.

Research and development related to IFC and COBie requires separate system import/export function development processes in order to express data views according to user roles when managing all facilities. These methods entail increased initial development expenses and maintenance and conversation fees during facilities management system development. Furthermore, data input/output functions must be developed after separately implementing IDM and MVD methodologies in order to express the data view from a particular perspective using these BIM-neutral files.

The majority of research about IFC criticizes the ambiguity of BIM data expression when using IFC. This ambiguity gives rise to problems related to compatibility and reuse during data exchanges between applications. This ambiguity is the result of schemas that have been developed to enable IFC to express information in a very generalized manner. The methodologies that define this from the particular standpoint of interested parties are IDM and MVD. The actual MVD is completed through development of an import/export function for application data used from a particular standpoint. The research studies regarding IDM and MVD are as follows.

The IDM and MVD being proposed in building SMART describe the MVD specification process from a documentation-standard level in order to define the standpoint of an interested party or application data usage [18].

A study regarding the semantics of model views for information exchanges proposes a method of extracting needed information from IFC using MVD. This study reveals the difficulty of resolving semantic issues to extract data necessary for case studies through IFC on its own, and it proposes the development of a modular and logical framework that can formally specify IFC concepts [19]. In a study regarding the exchange of BIM information through the ontological approach [20], the authors propose an MVD-based method for exchanging precast/pre-stressed concrete model information. A study of BIM-based generation of multi-model views [21] proposed a concept which would make it possible to obtain quality results from the model view using a generalized model subset definition (GMSD).A study on the expansion of the product modeling process expansion using IDM and MVD [22] proposed an extended process to product modeling (xPPM) method which could document specifications to enable tracing and reuse of each part of the existing processes implemented through separate exchange requirement (ER), functional part (FP), and MVD specifications. XPPM proposes tools for generating ER, FP, and MVD specifications using business process modeling notation (BPMN). An ontologically-based BIM study [23] reveals that IFC formats put boundaries on interoperability, and the authors propose an ontologically-based approach to the BIM database in order to promote information exchange between other information domain applications. They also propose using a rules-based language such as the Semantic Web Rule Language (SWRL) as a method of querying and extracting data necessary for particular application domains.

The majority of studies regarding IDM and MVD consist of case studies which have implemented methods and methodologies that define which information is extracted and exchanged from the standpoint of an IFC-based particular application. Because IDM and MVD are specifications methodologies to define necessary information in the applications, they do not provide rule-based automated data extraction or generation methods. It is necessary for the BIM-based facility management to extract and manage the necessary data comprehensively from the databases of heterogeneous systems such as CMMS and CAFM which have long been in use within the structures. The majority of the existing systems do not support IFC. Therefore, an IFC-based IDM and MVD method is limited for extracting and expressing data in accordance with the perspective of a particular application from the two-model database.

The research examined in the foregoing has the following characteristics in Table 1
                        .

The present study proposes a BPD for extracting and expressing data that is necessary from the perspective of FM, unlike these other studies. A BPD must effectively support the variability and expandability of the FM system, and it must also be able to define the data expression methods or expression regulations of the data that is necessary from the viewpoint of particular users in a convenient way. It can support improvement and expansion from the perspective of expressing facilities management data during management of the facilities management system through this, and it can automate data view generation from this perspective in accordance with the data generation regulations defined in the BPD. It defines a BIM-based FM scenario in order to implement the proposed methods and designs of the BPD’s detailed structure.

A relevant FM application scenario was deduced to develop a BPD metadata structure. FM has a very complicated work flow, and various project stakeholders are included. In addition, when a defect occurs, the maintenance company or method changes according to the type of facility, and in most cases a great amount of time is consumed in gathering related data and finding the cause when performing maintenance.

In order to deduce an FM scenario, FM staff members from the Korea Institute of Construction Technology (KICT) and engineers from three FM engineering companies were interviewed over 3days about detailed work flow analysis. In addition, the KICT manages 23 buildings including various facilities and the engineers have the experience in FM engineering domain over 15years. The staff’s opinions pointed out that the analyzed scenario was a general scenario of FM tasks that most public institutions perform, but that it may be different from that of other public institutions because it was not a compilation of the common points between the various FM scenarios for public institutions.

An actor who performs specific tasks, an object that manages or processes information, and the tasks composing the scenario were analyzed along with the task request direction for scenario analysis. Repetitive tasks were marked separately specifically for gathering information. Fig. 2
                         shows the FM task analysis scenario.


                        Table 2
                         is a detailed explanation of Fig. 2.

The scenario analysis results show that because data and site information such as blueprints, historical records, and related documents are scattered, duplication occurs because one must continually visit the archives or the site, and the process of verifying the historical records or facility-related blueprints is complicated. If, on checking the historical records, the facility guarantee period of the company has expired and a new contract must be negotiated, the process of delivering the new company’s requested maintenance data by visiting the archives, the MIS, or the site is repeated. In the facility management scenario study case in this research, facility information and historical records were managed via Microsoft Word documents or Excel spreadsheet files; floor plans were stored as PDF files or partially electronic blueprints. Some historical records of construction and maintenance were managed on the MIS. Consequently, the facility manager used too much time searching the MIS for historical records, site location, maintenance company information, and documents connected to the facility when a defect occurs, and this was the same for FM companies. This was one of the main causes of work inefficiency.

These problems indicate that if the dispersed process of verifying and collecting data can be integrated centered on the facility object, the efficiency of requesting, searching, verifying, and gathering facility management data can be improved. If the facility is modeled as a BIM object, with consideration for convenience of managing, searching, and verifying data, and related information is searched through connections centered on the BIM object, this problem can be mitigated. The utilization perspective of the gathered data differs according to the actor appearing in the scenario, and this must be considered.


                        Fig. 3
                         is the related improved maintenance scenario diagram. It gathers the dispersed data through the FM BIM system in the center that manages the FM database (DB) and has it act as a hub for all requests. The underlined tasks in the scenario shown in Fig. 3 below indicate places where the BIM-based FM system can be utilized, and we believe that out of these 25 tasks, 6 tasks of requesting, searching, verifying, and gathering information related to facility management can be improved.

The minimum repetitive work to create the documents including the FM information process activities except the four approval activities related to MIS system in this scenario can be reduced as shown in Table 3
                        .

The perspective of information which utilizes the BIM-based FM system in the improved scenario is different for every user and is as shown the Table 3 shown below. For instance, when the facility manager has logged into the FM BIM server, the manager may want to check the facility status. Management companies may want to check the structural information or maintenance history. Therefore, the data required for each user perspective needs to be extracted beforehand and the formatted data shown to the user. To develop a metadata structure that extracts and expresses information per perspective, this research reused the facility management data index of KICT from a random user perspective as in Table 4
                        .

The information required by the project stakeholders can be queried by developing a data schema for interrogation centered on the facility management BIM object by referring to the previous table.

In order to develop a BPD that supports the variability of data expression from the FM user perspective, the factors which define, extract, convert, and express the required data must be “customizable,” and the system manager should be able to set the developed BPD. Because the BPD can be defined from outside the system, such as with XML files, it can also be used as a library. Fig. 4
                         is a concept map expressing the BPD’s variability structure. BPD metadata structure consists of three parts to separate the data extraction, view and styling method for reusing them as the reason which is similar to the purpose of MVC design pattern.

DataView defines and converts the data that was converted in the ETL process and stored in the DB into a standardized form for ease of viewing. LogicView defines data extraction and conversion and assigns it to the defined ETL module. Inter-heterogeneous data extraction is processed through the ETL which can handle business logic processing because it includes logic that converts the data. The data expression in viewpoint takes charge in ViewStyle which processes the style to make the converted data easier to read for users. Perspective is defined and reused as LogicView, DataView, and ViewStyle because the extraction and conversion of heterogeneous data is set according to the user’s information acquisition perspective. To define and normalize these definitions, BPD grammar is needed as Table 5
                        .

To define and use a BPD conveniently, a description language such as XML is needed. Foran XML representation of BPD grammar, a BPD XML tag mapping table is defined as shown in Table 6
                        .


                        Fig. 5
                         shows the BPD structure that expresses this in the BPD analysis engine shown in Fig. 4.

The views have been divided into stages of information processing such as DataView according to perspective, LogicView for information conversion, and StyleView for information expression in order to acquire information view per perspective.
                           
                              1.
                              Perspective-oriented conversion LogicView: Because this is the part that extracts and converts data, it is applied using ETL. To process BIM-based FM, the aggregated FM data in the dispersed DB must be extracted, converted, and stored in a form that can be easily used. This process is carried out in the ETL. Through extracting and refining data from various geospatial sources, converting data, and storing it in the DB, the extracted property data can be used to extract or analyze information that supports perspectives per project stakeholder. The open-source ETL called Talend was used for the ETL engine. Files, databases, and Open API are all possible data sources. Data must have a defined OBJECT_GUID to be combined with BIM objects.

Perspective-oriented DataView: Defines DataView which expresses the extracted data as BIM object properties. Properties are combined with BIM objects defined with OBJECT_GUID. Properties are expressed by category, name, value, and type. The property to be extracted is formalized into category, property name, property value, and property type using metadata and scripts. Types are defined as integer, real, and character string. 
                                    
                                       
                                          Property
                                          =
                                          {
                                          Category,Name,Value,Type
                                          }
                                       
                                    
                                 
                              

Perspective-oriented SyleView: StyleView defines the format in which the data is displayed on screen. Formatting is expressed in the XML form shown below.


                        Fig. 6
                         can be expressed as metadata in XML form as the following example. In metadata form, LogicView maps the defined data from various data sources into destinations and schemas. DataView defines how to formalize the data to express the BIM object property. The final information expression method is defined by StyleView, and it processes expression form, unit conversion, etc.
                           
                              
                                 
                                 
                                    
                                       
                                          <BPD role=“Manager”>
                                    
                                    
                                       
                                          
                                          <LogicView><
                                             
                                                !
                                             
                                          -- ETL module -->
                                    
                                    
                                       
                                          
                                          
                                          C:∖ETL∖ExtractAndTransform.jar
                                    
                                    
                                       
                                          
                                          </LogicView>
                                    
                                    
                                       
                                          
                                          <DataView ConnectString=“Address=localhost:1521?UserId=Admin?Password=∗∗∗∗?ServiceName=orcl”>
                                    
                                    
                                       
                                          
                                          
                                          <Category name=“General information”>
                                    
                                    
                                       
                                          
                                          
                                          
                                          <Object Table=“General_Information” ObjectKey=“OBJECT_GUID”>
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          <
                                             
                                                !
                                             
                                          -- Definition part to link the object between BIM model and the external facility dataset -->
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          <Property field=“Classification_code” name=“Classification”></Property>
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          <Property field=“Object_name” name=“Name”></Property>
                                    
                                    
                                       
                                          
                                          
                                          
                                          </Object >
                                    
                                    
                                       
                                          
                                          
                                          </Category>
                                    
                                    
                                       
                                          
                                          
                                          <Category name=“Space maintenance”>
                                    
                                    
                                       
                                          
                                          
                                          
                                          <Object Table=“Space_Maintenance” ObjectKey=“OBJECT_GUID”>
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          <Group name=“Maintenance date”>
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          
                                          <Property field=“Date” name=“Date”></Property>
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          
                                          <Property field=“Area” name=“Area”></Property>
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          
                                          <Property field=“Perimeter” name=“Perimeter”></Property>
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          
                                          <Property field=“Volume” name=“Volume”></Property>
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          
                                          <Property field=“Height” name=“Height”></Property>
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          </Group>
                                    
                                    
                                       
                                          
                                          
                                          
                                          </Object>
                                    
                                    
                                       
                                          
                                          
                                          </Category>
                                    
                                    
                                       
                                          
                                          </DataView>
                                    
                                    
                                       
                                          
                                          <StyleView>
                                    
                                    
                                       
                                          
                                          
                                          <Property Category=“General information” name=“Name” format=“%s”></Property>
                                    
                                    
                                       
                                          
                                          
                                          <Property Category=“Space maintenance” name=“Area” format=“%.3finch”>
                                    
                                    
                                       
                                          
                                          
                                          
                                          value = ConverMeterToInch(value)
                                    
                                    
                                       
                                          
                                          
                                          </Property>
                                    
                                    
                                       
                                          
                                          </StyleView>
                                    
                                    
                                       
                                          </BPD>
                                    
                                 
                              
                           
                        
                     

This research defines the structure in three parts so that a user can process properties of specific objects using a BPD that supports variability.

Of the three views, LogicView is processed in the server and before DataView and StyleView, which means a DB needs to be developed by acquiring data of the heterogeneous system. The latter two are used in the client program of the user. Programs allow users to see data per perspective using DataView and StyleView. Fig. 7
                         is a diagram of the BPD processing algorithm.

A prototype system was developed using the BPD metadata structure designed in Section 4, which considers the variability of the user’s perspective and data processing methods. A file modeled by Revit- and Excel-based data built recently for FM of the first complex of the main building of KICT was used interoperate with the proposed system. Existing documents were used to set up the database (see Fig. 8
                     ).

The Construction Information Classification System released by the Ministry of Construction in 2006 was referenced for the facility object information classification coding system. A simple prototype program that expresses the FM data by extracting and processing information with the proposed BPD was developed. Viewpoint was chosen on log in (see Fig. 9
                     ).

After logging in, when the user selects the BIM object from among the various objects displayed on the 3D screen, the properties of the object from each view are displayed in the property screen as shown in Table 7
                      below. Using the proposed BPD allows variable definition and expansion of data expression per perspective, and related data can be extracted and processed from various heterogeneous system data.

@&#DISCUSSION@&#

To find the benefit of a BPD metadata structure that supports variant functions, we interviewed the 4 KICT FM team staff members about the presented BIM-based FM prototype. The interview questions included the expected outcome, the consideration, and the existing FM cases survey in KICT FM. The results of the interview are shown Tables 8 and 9
                     
                     .

To identify the benefits of the BIM-based FM system considering a BPD, the existing FM activity cost was analyzed through the staff interviews as shown in Tables 10 and 11
                     
                     .

We mentioned that 25% of the cost related to the facility management activity can be saved as shown Table 3 based on the assumption that the average monthly salary of the FM staff was $ 2,600, and the data process activity factor of the FM activities was 0.3.

If a BIM-based FM with a BPD is used, $93,600 can be saved annually in this case owing to FM data process improvement such as documentation, reporting, and data searching needed for decision making. We can estimate the investment cost related to this using Table 12
                     .

From the results of the cost analysis, we can estimate that the redemption period considering the return on investment is about 1.56year. Particularly, the variability support using a BPD can save the cost related to Cost Item #2 in Table 12.

To analyze the quantitative effect of the BPD variability, we separated it into five items: Data Accessibility (DA), Multiple Perspective Support (MPS), Data View Customization (DVC), Data Validation (DV), and Data Integration and conducted interviews using the questions listed in Table 13
                     . The interview was scored on a five-step Likert scale.

In the interview to determine BPD effects such as DA, MPS, DVC, DV, and DI, data from 33 of 40 respondents (those with missing data were eliminated) were analyzed. Jobs were divided into two categories: facility owner/management, facility design/engineering groups.

To determine the differences of the effects between the pre group using an Excel-based FM system and the post group using a BPD-based FM system, paired sample t-tests for analysis of the pre and post groups were conducted. The results showed a significant difference between pre and post groups in p-values of 0.05 as shown in Fig. 10
                     .

The items which have the largest difference between pre and post group are DI, MPS, DA, DVC in order as Fig. 11
                     . In the results we found that the BPD helps to reduce FM database development cost effectively as it relates to data integration and data view considering multiple user roles and customization considering the variability of the FM system.

@&#CONCLUSIONS@&#

This research suggested a BPD metadata structure that supports variability of user perspectives and demonstrated a prototype by analyzing the FM process and the benefits of using BIM-based FM. Through this, we confirmed that effectively extracting external system data and defining perspective with a BPD is possible. We also showed that by using the proposed BPD metadata through variability which allows defining and expanding user perspectives, connection to or expansion of heterogeneous facility management data is possible after development. The results of the annual cost saving considering BIM-based FM with BPD (Table 11) show that $93,600 can be saved annually in our case because of FM data process improvement such as documentation, reporting, and data searching needed for decision making. From the results of the cost analysis, we estimated that the redemption period considering the return on investment was about 1.56year. The interview results related to BPD benefits showed a significant difference between pre and post groups in p-values of 0.05 and the benefit items which have the largest difference between them were DI, MPS, DA, DVC in order.

Research plans hereafter are aimed at effectively generating information needed for decision making by realizing BIM-based mining of data extracted per perspective and connect it to more various heterogeneous systems based on the proposed architecture.

@&#ACKNOWLEDGMENTS@&#

This research was performed through a research subsidy from the 2015 Main Business (Development of Integrated Operation Technology on Construction Information & Spatial Information based on BIM/GIS Interoperation Platform) of the KICT.

@&#REFERENCES@&#

