@&#MAIN-TITLE@&#Design optimization of real world steel space frames using artificial bee colony algorithm with Levy flight distribution


@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           An efficient algorithm is proposed for optimum design of steel space frames under LRFD-AISC provisions.


                        
                        
                           
                           Geometric nonlinear behavior of steel frames is considered during the optimization process.


                        
                        
                           
                           In the proposed algorithm artificial bee colony algorithm is used with Levy flight distribution.


                        
                        
                           
                           The proposed algorithm finds lightweight structures compared with other algorithms.


                        
                        
                           
                           The proposed algorithm has faster convergence rate compared with other algorithms.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Steel space frames

Real world structures

Optimum structural design

Load and resistance factor design

Meta-heuristic search techniques

Artificial bee colony algorithm

Swarm intelligence

Levy flight distribution

@&#ABSTRACT@&#


               
               
                  Optimum design of real world steel space frames under design code provisions is a complicated optimization problem due to the presence of large numbers of highly nonlinear constraints and discrete design variables. The use of gradient based optimization techniques in finding the optimum solution of such large design problems is cumbersome due to the selection of initial design points and convergence difficulties while metaheuristic algorithms do not suffer such problems. Artificial bee colony (ABC) algorithm is one of the recent additions to the swarm intelligence based meta-heuristic search techniques that mimic natural foraging behavior of honey bees. In this study optimum design problem of steel space frames is formulated according to the provisions of LRFD-AISC and its solution is obtained by using enhanced artificial bee colony algorithm. The performance of artificial bee colony algorithm is improved by adding Levy flight distribution in the search of scout bees. Real world steel space frames are designed with the new algorithm developed in this study to demonstrate its robustness and efficiency.
               
            

@&#INTRODUCTION@&#

The use of swarm intelligence in the development of new metaheuristic optimization techniques has resulted large number of algorithms that are robust and efficient in finding the solutions of complex optimization problems [1,2]. Swarm intelligence is the collective behavior of decentralized and self-organized natural systems which solves complex problems that cannot be solved by the individual member of the swarm. Metaheuristic optimization techniques simulate numerically what swarm does in achieving the solution of a problem such as foraging. There are several swarm intelligence based algorithms such as ant colony optimizer, particle swarm optimizer, artificial bee colony algorithm and hunting search algorithm [2]. These methods differ from mathematical programming algorithms in the fact that they do not utilize gradient descent procedure. Instead they follow certain strategies which guide the search process. The goal of this strategy is to efficiently explore the search space in order to find near-optimal solutions if not global optimum. They may incorporate mechanisms in order to avoid getting trapped in confined areas of the search space. They are not problem specific and can be utilized to determine the optimum solution of complex, large size, discrete and mixed continuous-discrete programming problems. Metaheuristic techniques are widely used in obtaining optimum design of steel structures [3-7].

The artificial bee colony (ABC) algorithm is one of the swarm intelligence based metaheuristic algorithm which mimics the intelligent foraging behavior of a honey bee colony [8-14]. ABC algorithm is employed to develop structural optimization procedures to attain the optimum designs of truss structures and steel plane frames in [15-18]. However, the design examples considered in these studies are small and design formulation requires small number of design variables. It is known that the performance of metaheuristic algorithms differ significantly when the size of design problem is large [19,20]. This study aims at investigating the performance of ABC algorithm in the optimum design of large size space frames where the design constraints are implemented from LRFD-AISC [21] and the steel sections are selected from available steel profile list which yields a large, complex and discrete optimization problem.

Although ABC algorithm performs well in small engineering design optimization problems, it faces difficulty in solving highly nonlinear problems. This difficulty arises in finding new solutions in exploitation part. Some enhancements are suggested to overcome exploitation capability of the algorithm. In [22], Gbest-guided artificial bee colony algorithm (GABC) is suggested in order to strengthen local search. Another improvement to ABC is proposed in [23]. Chaotic maps are employed for parameter adaptation to improve the convergence characteristics of ABC to avoid getting trapped in a local minimum. In [24], it is stated that the solution search equation of ABC is good at exploration but poor at exploitation. Inspired by differential evolution (DE), a modification is proposed to ABC algorithm (denoted as ABC/best), which is based on that each bee searches only around the best solution of the previous iteration in order to improve the exploitation. New search equations are derived and used for employed and onlooker bees in [25]. It is reported that this improvement has provided faster convergence and better search ability compared with other relevant methods for almost all the functions considered in the study. In [26], an efficient and robust artificial bee colony (ERABC) algorithm is proposed. Efficiency and robustness are achieved by preventing the algorithm being trapped in local minima by making use of chaotic search technique on scout bee phase. Meanwhile, to reach a kind of sustainable evolutionary ability, reverse selection based on roulette wheel is applied to keep the population diversity. In addition, to enhance the global convergence, chaotic initialization is used to produce initial population.

A Levy flight is a random walk in which the step-lengths have a heavy-tailed probability distribution and is named for French mathematician Paul Levy. The steps are taken in isotropic random directions when the space of dimension is greater than one. This theory has been successfully applied to swarm intelligence techniques recently [27-30]. In this study, optimum design technique based on improved artificial bee colony algorithm is presented for real world steel space frames. The artificial bee colony algorithm is enhanced by using Levy flight distribution in the search of scout bees [31]. The abbreviation of LFABC is used for the new algorithm in the rest of the text. The algorithm treats the sequence numbers of W steel section listed in steel profile table as design variables. Design constraints are implemented according to the provisions of LRFD-AISC (Load and Resistance Factor Design, American Institution Of Steel Corporation) [21] which include the displacement limitations, inter-story drift restrictions, ultimate strength requirements and geometric constraints. The performance of the enhanced artificial bee colony algorithm is compared with other metaheuristic techniques in the optimum design of three real world steel space frames.

Optimum design of steel space frames requires selecting member sections from the available list of steel sections such that serviceability and strength limitations specified by the code of practice are satisfied. The objective of the optimum design problem is generally considered to be the minimization of overall or material cost of the steel frame. If the goal is to minimize the weight of the space frame, then the objective function can be expressed as:

                        
                           (1)
                           
                              
                                 Minimize
                                 
                                 W
                                 
                                    (
                                    I
                                    )
                                 
                                 =
                                 
                                    ∑
                                    
                                       r
                                       =
                                       1
                                    
                                    
                                       N
                                       G
                                    
                                 
                                 
                                    m
                                    r
                                 
                                 ·
                                 
                                    ∑
                                    
                                       s
                                       =
                                       1
                                    
                                    
                                       t
                                       r
                                    
                                 
                                 
                                    l
                                    s
                                 
                              
                           
                        
                     where: W(
                        I
                     ) is the weight of the frame, 
                        I
                      is the vector of the sequence number of W-sections selected for space frame member groups from the standard W-sections table [21], mr
                      is the unit weight of the steel section adopted for group r, tr
                      is the total number of members in group r and NG is the total number of groups in the frame, ls
                      is the length of member which belongs to group r. The design constraints implemented from LRFD-AISC respectively are as follows.

The strength constraints for each member of the steel space frame are expressed as inequalities given in Eqs. (2 and
3) as described in Chapter H of LRFD-AISC:

                        
                           (2)
                           
                              
                                 
                                    g
                                    s
                                 
                                 
                                    (
                                    I
                                    )
                                 
                                 =
                                 
                                    
                                       P
                                       u
                                    
                                    
                                       ∅
                                       
                                          P
                                          n
                                       
                                    
                                 
                                 +
                                 
                                    8
                                    9
                                 
                                 
                                    (
                                    
                                       
                                          
                                             M
                                             
                                                u
                                                x
                                             
                                          
                                          
                                             
                                                ∅
                                                b
                                             
                                             
                                                M
                                                
                                                   n
                                                   x
                                                
                                             
                                          
                                       
                                       +
                                       
                                          
                                             M
                                             
                                                u
                                                y
                                             
                                          
                                          
                                             
                                                ∅
                                                b
                                             
                                             
                                                M
                                                
                                                   n
                                                   y
                                                
                                             
                                          
                                       
                                    
                                    )
                                 
                                 
                                 −
                                 1.0
                                 ≤
                                 0
                                 
                                 f
                                 o
                                 r
                                 
                                 
                                    
                                       P
                                       u
                                    
                                    
                                       ∅
                                       
                                          P
                                          n
                                       
                                    
                                 
                                 ≥
                                 0.2
                              
                           
                        
                     
                     
                        
                           (3)
                           
                              
                                 
                                    g
                                    s
                                 
                                 
                                    (
                                    I
                                    )
                                 
                                 =
                                 
                                    
                                       P
                                       u
                                    
                                    
                                       2
                                       ∅
                                       
                                          P
                                          n
                                       
                                    
                                 
                                 +
                                 
                                    (
                                    
                                       
                                          
                                             M
                                             
                                                u
                                                x
                                             
                                          
                                          
                                             
                                                ∅
                                                b
                                             
                                             
                                                M
                                                
                                                   n
                                                   x
                                                
                                             
                                          
                                       
                                       +
                                       
                                          
                                             M
                                             
                                                u
                                                y
                                             
                                          
                                          
                                             
                                                ∅
                                                b
                                             
                                             
                                                M
                                                
                                                   n
                                                   y
                                                
                                             
                                          
                                       
                                    
                                    )
                                 
                                 −
                                 1.0
                                 ≤
                                 0
                                 
                                 f
                                 o
                                 r
                                 
                                 
                                    
                                       P
                                       u
                                    
                                    
                                       ∅
                                       
                                          P
                                          n
                                       
                                    
                                 
                                 <
                                 0.2
                              
                           
                        
                     where: Mnx
                      is the nominal flexural strength at strong axis (x axis), Mny
                      is the nominal flexural strength at weak axis (y axis), Mux
                      is the required flexural strength at strong axis (x axis), Muy
                      is the required flexural strength at weak axis (y axis), Pn
                      is the nominal axial strength (Tension or compression) and Pu
                      is the required axial strength (Tension or compression) for member i. The values of Mux
                      and Muy
                      are to be obtained by carrying out analysis of the steel frame. This iterative process is computationally expensive. In Chapter C of LRFD-AISC an alternative way is suggested for computing of Muy
                      and Mux
                      values. This alternative way requires two first order elastic analyses to be carried out. In the first, frame is analyzed under the gravity loads only where the sway of the frame is prevented to obtain Mnt
                      values. In the second, the frame is analyzed only under the lateral loads to find Mlt
                      values. These moment values are combined as given in the following.

                        
                           (4)
                           
                              
                                 
                                    M
                                    u
                                 
                                 =
                                 
                                    B
                                    1
                                 
                                 
                                    M
                                    
                                       n
                                       t
                                    
                                 
                                 +
                                 
                                    B
                                    2
                                 
                                 
                                    M
                                    
                                       l
                                       t
                                    
                                 
                                 
                              
                           
                        
                     where B
                     1 is the moment magnifier coefficient and B
                     2 is the sway moment amplification factor. The details of how these coefficients are calculated are given in Chapter C of LRFD-AISC [21].

Deflection, top story drift and inter story drift constraint functions are expressed as [32]:

                        
                           (5)
                           
                              
                                 
                                    g
                                    d
                                 
                                 
                                    (
                                    I
                                    )
                                 
                                 =
                                 
                                    
                                       δ
                                       
                                          j
                                          l
                                       
                                    
                                    
                                       L
                                       /
                                       R
                                       a
                                       t
                                       i
                                       o
                                    
                                 
                                 −
                                 1.0
                                 ≤
                                 0
                                 
                                 
                                 
                                 
                                 j
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 
                                    n
                                    
                                       s
                                       m
                                    
                                 
                                 
                                 
                                 
                                 l
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 
                                    n
                                    
                                       l
                                       c
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    g
                                    
                                       t
                                       d
                                    
                                 
                                 =
                                 
                                    
                                       Δ
                                       
                                          j
                                          l
                                       
                                       
                                          t
                                          o
                                          p
                                       
                                    
                                    
                                       H
                                       /
                                       R
                                       a
                                       t
                                       i
                                       o
                                    
                                 
                                 −
                                 1.0
                                 ≤
                                 0
                                 
                                 
                                 
                                 
                                 j
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 
                                    n
                                    
                                       j
                                       t
                                       o
                                       p
                                    
                                 
                                 
                                 
                                 
                                 l
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 
                                    n
                                    
                                       l
                                       c
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    g
                                    
                                       i
                                       d
                                    
                                 
                                 =
                                 
                                    
                                       ∇
                                       
                                          j
                                          l
                                       
                                       
                                          o
                                          h
                                       
                                    
                                    
                                       
                                          h
                                          
                                             s
                                             x
                                          
                                       
                                       /
                                       R
                                       a
                                       t
                                       i
                                       o
                                    
                                 
                                 −
                                 1.0
                                 ≤
                                 0
                                 
                                 
                                 j
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 
                                    n
                                    
                                       s
                                       t
                                    
                                 
                                 
                                 
                                 
                                 l
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 
                                    n
                                    
                                       l
                                       c
                                    
                                 
                              
                           
                        
                     where: δjl
                      is the maximum deflection of jth
                        th
                      member under the lth
                        th
                      load case, L is the length of member,  nsm
                      is the total number of members where deflections limitations are to be imposed, nlc
                      is the number of load cases, H is the height of the frame, njtop
                      is the number of joints on the top story, 
                        
                           Δ
                           
                              j
                              l
                           
                           
                              t
                              o
                              p
                           
                        
                      is the top story displacement of the jth
                        th
                      joint under lth
                        th
                      load case, nst
                      is the number of story, 
                        
                           Δ
                           
                              j
                              l
                           
                           
                              o
                              h
                           
                        
                      is the story drift of the jth
                        th
                      story under lth
                        th
                      load case, hsx
                      is the story height and Ratio is limitation ratio for lateral displacements described in ASCE Ad Hoc Committee report [30]. According to in the ASCE Ad Hoc Committee report, the accepted range of drift limits by first-order analysis is 1/750 to 1/250 times the building height H with a recommended value of H/400. The typical limits on the inter-story drift are 1/500 to 1/200 times the story height. Based on this report the deflection limitations recommended for general use are summarized in Table 1.
                     
                  

Geometric limitations are included in the design problem as explained in detail in [20,35,36]. That is:

                        
                           (8)
                           
                              
                                 
                                    g
                                    
                                       c
                                       c
                                    
                                 
                                 
                                    (
                                    I
                                    )
                                 
                                 =
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       n
                                       
                                          c
                                          c
                                          j
                                       
                                    
                                 
                                 
                                    (
                                    
                                       
                                          
                                             D
                                             i
                                             a
                                          
                                          
                                             D
                                             i
                                             b
                                          
                                       
                                       −
                                       1.0
                                    
                                    )
                                 
                                 +
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       n
                                       
                                          c
                                          c
                                          j
                                       
                                    
                                 
                                 
                                    (
                                    
                                       
                                          
                                             m
                                             i
                                             a
                                          
                                          
                                             m
                                             i
                                             b
                                          
                                       
                                       −
                                       1.0
                                    
                                    )
                                 
                                 ≤
                                 0
                              
                           
                        
                     
                     
                        
                           (9)
                           
                              
                                 
                                    g
                                    
                                       b
                                       c
                                    
                                 
                                 
                                    (
                                    I
                                    )
                                 
                                 =
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       n
                                       
                                          j
                                          1
                                       
                                    
                                 
                                 
                                    (
                                    
                                       
                                          
                                             B
                                             f
                                             
                                                b
                                                i
                                             
                                          
                                          
                                             
                                                D
                                                
                                                   c
                                                   i
                                                
                                             
                                             −
                                             2
                                             
                                                t
                                                b
                                                
                                                   c
                                                   i
                                                
                                             
                                          
                                       
                                       −
                                       1.0
                                    
                                    )
                                 
                                 ≤
                                 0
                                 
                                 o
                                 r
                                 
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       n
                                       
                                          j
                                          2
                                       
                                    
                                 
                                 
                                    (
                                    
                                       
                                          
                                             B
                                             f
                                             
                                                b
                                                i
                                             
                                          
                                          
                                             B
                                             f
                                             
                                                c
                                                i
                                             
                                          
                                       
                                       −
                                       1.0
                                    
                                    )
                                 
                                 ≤
                                 0
                                 
                              
                           
                        
                     where: nccj
                      is the number of column-to-column geometric constraints defined in the problem, 
                        
                           m
                           i
                           a
                        
                      is the unit weight of W section selected for above story, 
                        
                           m
                           i
                           b
                        
                      is the unit weight of W section selected for below story, 
                        
                           D
                           i
                           a
                        
                      is the depth of W section selected for above story, 
                        
                           D
                           i
                           b
                        
                      is the depth of W section selected for below story, n
                     
                        j1 is the number of joints where beams are connected to the web of a column, n
                     
                        j2 is the number of joints where beams connected to the flange of a column, Dci
                      is the depth of W section selected for the column at joint  i, 
                        
                           
                           
                              t
                              b
                              
                                 c
                                 i
                              
                           
                        
                      is the flange thickness of W section selected for the column at joint i, 
                        
                           B
                           f
                           
                              c
                              i
                           
                        
                      is the flange width of W section selected for the column at joint i and 
                        
                           B
                           f
                           
                              b
                              i
                           
                        
                      is the flange width of W section selected for the beam at joint i as shown in Fig. 1.
                     
                  

The artificial bee colony algorithm is a metaheuristic optimization method recently developed by Karaboga and Basturk [8–14]. This algorithm is based on characteristic foraging behavior of honey bee swarms. The optimization process starts by considering an initial population of artificial bees. All bees in the population are categorized in three main groups to execute different tasks. The first group of bees is the employed bees that locate food source, evaluate its amount of nectar and keep the location of better sources in their memory. These bees when fly back to hive share this information to other bees in the dancing area by dancing. The dancing time represents the amount of nectar in the food source. The second group is the onlooker bees who observe the dance and may decide to fly to the food source if they find it is worthwhile to visit the food source. Therefore food sources rich in the amount of nectar attract more onlooker bees. The third group is scout bees that explore new food sources in the vicinity of the hive randomly. The employed bee whose food source has been consumed becomes a scout bee. Each employed bee in the colony travels to one food source and this food source is selected by only one employed bee. Therefore, the number of employed bees in the artificial bee colony algorithm is equal to number of food sources. By the time the food source is exhausted, onlooker and employed bees of this food source are replaced by scout bees. Then, these bees start finding new food sources by making random search. Each food source is considered as a possible solution for the optimization problem and the nectar amount of a food source represents the quality of the solution which is identified by its fitness value.

The artificial bee colony algorithm consists of four stages. These stages are initialization phase, employed bees phase, onlooker bees phase and scout bees phase. These stages are summarized below for the optimization problem of 
                        
                           M
                           i
                           n
                           .
                           
                           z
                           =
                           f
                           (
                           x
                           )
                        
                      where x is vector of n design variables:

                        
                           1.
                           
                              
                                 Initialization phase
                              : initialize all the vectors of the population of food sources, 
                                 
                                    
                                       x
                                       p
                                    
                                    ,
                                    
                                    p
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    
                                    
                                    n
                                    p
                                 
                               using random Generation (10) where np is the population size (total number of artificial bees). Each food source is a solution vector consisting of n variables 
                                 
                                    (
                                    
                                       x
                                       
                                          p
                                          i
                                       
                                    
                                    
                                    ,
                                    
                                    i
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    n
                                    )
                                 
                               and is a potential solution of the optimization problem.
                                 
                                    (10)
                                    
                                       
                                          
                                             x
                                             
                                                p
                                                i
                                             
                                          
                                          =
                                          
                                             x
                                             
                                                l
                                                i
                                             
                                          
                                          +
                                          r
                                          
                                          a
                                          n
                                          d
                                          
                                             (
                                             
                                                0
                                                ,
                                                1
                                             
                                             )
                                          
                                          
                                             (
                                             
                                                
                                                   x
                                                   
                                                      u
                                                      i
                                                   
                                                
                                                −
                                                
                                                   x
                                                   
                                                      l
                                                      i
                                                   
                                                
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           


                              
                                 Employed bees phase:
                               employed bees search new food sources as follows:
                                 
                                    (11)
                                    
                                       
                                          
                                             x
                                             
                                                p
                                                i
                                             
                                          
                                          =
                                          
                                             x
                                             
                                                p
                                                i
                                             
                                          
                                          +
                                          
                                             φ
                                             
                                                p
                                                i
                                             
                                          
                                          
                                             (
                                             
                                                
                                                   x
                                                   
                                                      p
                                                      i
                                                   
                                                
                                                −
                                                
                                                   x
                                                   
                                                      k
                                                      i
                                                   
                                                
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           


                              
                                 Onlooker bees phase:
                               unemployed bees consist of two groups: onlooker bees and scouts. Employed bees share their food source information with onlooker bees. Onlooker bees choose their food source depending on the probability value Pp
                               which is calculated using the fitness values of each food source in the population:

                                 
                                    (13)
                                    
                                       
                                          
                                             P
                                             p
                                          
                                          =
                                          
                                             
                                                f
                                                i
                                                t
                                                n
                                                e
                                                s
                                                s
                                                (
                                                
                                                   x
                                                   p
                                                
                                                )
                                             
                                             
                                                
                                                   ∑
                                                   
                                                      p
                                                      =
                                                      1
                                                   
                                                   
                                                      n
                                                      p
                                                   
                                                
                                                
                                                   f
                                                   i
                                                   t
                                                   n
                                                   e
                                                   s
                                                   s
                                                   (
                                                   
                                                      x
                                                      p
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

After a food source xpi
                      for an onlooker bee is probabilistically chosen, a neighborhood source is determined by using Eq. (11) and its fitness value is computed with Eq. (12).

                        
                           4.
                           
                              
                                 Scout bees phase:
                               the unemployed bees who choose their food sources randomly are called scouts. Employed bees whose solutions cannot be improved after predetermined number of trials become scouts and their solutions are abandoned. These scouts start to search for new solutions by using random search.

The main steps of the artificial bee colony algorithm are schematized by the flow chart in Fig. 2.
                     
                  

The solution of the discrete optimum design problem given in Eqs. (1–9) is obtained using the artificial bee colony algorithm described above. The optimum design technique based on artificial bee colony technique treats the sequence number of the steel W-sections in the standard list as a design variable. For that purpose, the complete set of 272 W-sections starting from W100×19.3 to W1100×499 mm as given in LRFD–AISC [21] is considered as a design pool from which the ABC algorithm selects W-sections for frame members. Once a sequence number is selected, then the cross sectional properties of that section become available from the section table for the algorithm. The steps of the optimization process are now summarized:


                     Step 1: search parameters of artificial bee colony algorithm are initialized in this step. These parameters are the number of employed bees (NEB), the number of onlooker bees (NOB), maximum iteration number and control parameter adjusting the food source (limit). In this study, number of onlooker bees is considered as equal to number of employed bees.


                     Step 2: after defining search parameters, all foragers in the colony start the search food sources randomly. This means at the end of the search NEB + NOB frame designs are randomly generated with Eq. (10) where np = NEB + NOB. Each frame design is analyzed under the external loading and design constraints (2) to (9) are checked. If a candidate design does not satisfy design constraints, its weight is penalized in accordance with constraint violation using the following function.

                        
                           (14)
                           
                              
                                 
                                    W
                                    p
                                 
                                 =
                                 W
                                 ·
                                 
                                    
                                       (
                                       
                                          1
                                          +
                                          C
                                       
                                       )
                                    
                                    
                                       ɛ
                                    
                                 
                              
                           
                        
                     where: W is the objective function values given by Eq. (1), Wp
                      is the penalty function, C is the total constraint violation calculated with Eq. (15), ɛ is penalty coefficient which is taken as 2.

                        
                           (15)
                           
                              
                                 C
                                 =
                                 ∑
                                 
                                    C
                                    s
                                 
                                 +
                                 ∑
                                 
                                    
                                       C
                                       d
                                    
                                    +
                                 
                                 ∑
                                 
                                    
                                       C
                                       
                                          i
                                          d
                                       
                                    
                                    +
                                 
                                 ∑
                                 
                                    
                                       C
                                       
                                          t
                                          d
                                       
                                    
                                    +
                                 
                                 ∑
                                 
                                    
                                       C
                                       
                                          c
                                          d
                                       
                                    
                                    +
                                 
                                 ∑
                                 
                                    
                                       C
                                       
                                          c
                                          c
                                       
                                    
                                    +
                                 
                                 ∑
                                 
                                    C
                                    
                                       b
                                       c
                                    
                                 
                              
                           
                        
                     where, Cs, Cd, Cid, Ctd, Ccc
                      and Cbc
                     , respectively, are the constraint violation functions for strength, deflection, inter-story drift, top story drift, column-to-column geometric and beam-to-column geometric constraints stated by Eq. (2) through Eq. (9). In general form, constraint violations are calculated as:

                        
                           (16)
                           
                              
                                 
                                    C
                                    i
                                 
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             
                                                0
                                             
                                             
                                                
                                                   i
                                                   f
                                                   
                                                   
                                                      g
                                                      i
                                                   
                                                   
                                                      (
                                                      
                                                         x
                                                         j
                                                      
                                                      )
                                                   
                                                   ≤
                                                   0
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      g
                                                      i
                                                   
                                                   
                                                      (
                                                      
                                                         x
                                                         j
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   i
                                                   f
                                                   
                                                   
                                                      g
                                                      i
                                                   
                                                   
                                                      (
                                                      
                                                         x
                                                         j
                                                      
                                                      )
                                                   
                                                   >
                                                   0
                                                
                                             
                                          
                                       
                                       
                                       
                                          
                                             
                                                
                                                   i
                                                   =
                                                   1
                                                   ,
                                                   …
                                                   N
                                                   C
                                                
                                             
                                          
                                          
                                             
                                                
                                                   j
                                                   =
                                                   1
                                                   ,
                                                   …
                                                   N
                                                   G
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     where, gi
                     (x) is the ith constraint function, x is the vector of design variables defined for the space frame, NC is the number of constraint functions and NG is the total number of member groups in the optimum design problem.


                     Step 3 (Employed bees phase): after evaluation process, the bees corresponding to the best frame designs become employed bees. Employed bees then start generating new candidate designs by perturbing the former designs:

                        
                           (17)
                           
                              
                                 
                                    v
                                    
                                       i
                                       j
                                    
                                 
                                 =
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                 
                                 +
                                 
                                    ∅
                                    
                                       i
                                       j
                                    
                                 
                                 ·
                                 
                                    (
                                    
                                       
                                          x
                                          
                                             i
                                             j
                                          
                                       
                                       −
                                       
                                          x
                                          
                                             k
                                             j
                                          
                                       
                                    
                                    )
                                 
                                 
                                 ;
                                 
                                 
                                 
                                 i
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 N
                                 E
                                 B
                                 ,
                                 
                                 
                                 j
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 N
                                 G
                              
                           
                        
                     where: i represents employed bee number index, k and j are randomly chosen indexes. Although k is generated randomly, it is not equal to j. ∅
                        ij
                      is a uniformly distributed random number between [–1, 1]. This parameter adjusts size of neighborhood frame design region. Candidate frame designs generated by employed bees are evaluated as described in Step 2. After evaluation process, penalized weights of candidate frame designs and old frame designs are compared. If penalized weight of the candidate frame design is better than the old one, the old frame design is replaced with the candidate frame design. If this replacement cannot be performed trial number of the frame is increased by one. This process is called greedy selection. All employed bees in the colony apply the procedures including generation of candidate design, evaluation of candidate design and greedy selection, and then employed bee phase is completed.


                     Step 4 (Onlooker Bee phase): after employed bee phase, all employed bees return their hive and start their waggle dance. Waggle dance of employed bees provides information on frame designs. The onlooker bees watch the waggle dance and make a decision about selection of frame design. This decision process of each onlooker bee depends on its probability value associated with frame design. Probability of ith frame design is calculated according to ith onlooker bee as:

                        
                           (18)
                           
                              
                                 
                                    P
                                    i
                                 
                                 =
                                 
                                    
                                       
                                          (
                                          
                                             W
                                             p
                                          
                                          )
                                       
                                       i
                                    
                                    
                                       
                                          ∑
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             N
                                             O
                                             B
                                          
                                       
                                       
                                          
                                             (
                                             
                                                W
                                                p
                                             
                                             )
                                          
                                          i
                                       
                                    
                                 
                                 ;
                                 
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 ,
                                 N
                                 O
                                 B
                              
                           
                        
                     
                  

If the frame design is selected, the onlooker bees generate candidate frame designs with Eq. (17) and apply the procedures in the same way of employed bees.


                     Step 5 (Scout Bee Phase): as mentioned in Step 3, if candidate frame design cannot be replaced with the old frame design, the trial number of the frame design is increased by one. If the trial number of the frame design exceeds food source limit, the frame design is abandoned and the employed bee associated with that fame design becomes a scout bee. The scout bee generates new frame design by using random selection process as described in Step 2.


                     Step 6: Steps 3 to 5 are repeated until a pre-assigned maximum number of iterations are completed.

Detailed pseudo code of the artificial bee colony algorithm is given in Fig. 3
                     . Total number of design cycles required by the algorithm is equal to (NEB+NOB) where NEB represents number of employed bees and NOB represents number of onlooker bees. Both of these parameters are user selected as explained in Step 1. It is appropriate to notice that in each design cycle three structural analyses are required in order to consider the nonlinear behavior of steel frame as necessitated by LRFD-AISC. Therefore the total number of structure analysis carried out by ABC algorithm in each design cycle is 3(NEB+NOB) provided that maximum trial value does not exceed food source limit values. In this case scout bees are not considered. However, if maximum trial values does exceed the food source limit value, scout bees step is required to be considered and total number of structural analysis carried out in each design cycle becomes 3(NEB+NOB+1).

The standard artificial bee colony algorithm has deficiency in exploitation part. This deficiency occurs due to the fact that a new candidate design randomly generated in the scout bees part is unlikely to be better than the global best design or current design. This causes convergence problems in the algorithm. In order to solve this problem, in this study the Levy flight distribution is used for scout bee part. The new candidate design is generated from a design region between the global best design and the current design using Levy flight distribution. This increases the probability of the candidate design to be better than the current or the best design.  Levy flight term can be defined as random walk in which the step sizes have a heavy-tailed probability distribution. In Levy flight distribution, the new candidate design is obtained as follows:

                        
                           (19)
                           
                              
                                 
                                    x
                                    j
                                    
                                       n
                                       e
                                       w
                                    
                                 
                                 =
                                 
                                    x
                                    j
                                 
                                 +
                                 α
                                 ⊕
                                 l
                                 e
                                 v
                                 y
                                 
                                    (
                                    β
                                    )
                                 
                                 
                                 
                                 
                                 j
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 N
                                 G
                              
                           
                        
                      where: α is random step size parameter, β is Levy flight distribution parameter and ⊕ is entry wise multiplication. Mantegna [33] algorithm is one of the fast and accurate algorithms which generate a stochastic variable whose probability density is close to Levy stable distribution characterized by arbitrary chosen control parameter α (0.3 ≤ α ≤ 1.99). In Eq. (19), step size (α⊕levy(β)) is calculated as follows:

                        
                           (20)
                           
                              
                                 α
                                 ⊕
                                 l
                                 e
                                 v
                                 y
                                 
                                    (
                                    β
                                    )
                                 
                                 ∼
                                 0.01
                                 
                                    u
                                    
                                       v
                                       
                                          1
                                          β
                                       
                                    
                                 
                                 
                                    (
                                    
                                       
                                          x
                                          j
                                       
                                       −
                                       
                                          x
                                          j
                                          
                                             b
                                             e
                                             s
                                             t
                                          
                                       
                                    
                                    )
                                 
                              
                           
                        
                     where u and v values are obtained from normal distributions;

                        
                           (21)
                           
                              
                                 u
                                 ∼
                                 N
                                 
                                    (
                                    
                                       0
                                       ,
                                       
                                       
                                          σ
                                          u
                                          2
                                       
                                    
                                    )
                                 
                                 ,
                                 
                                 
                                 v
                                 ∼
                                 N
                                 
                                    (
                                    
                                       0
                                       ,
                                       
                                       
                                          σ
                                          v
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                        
                     with

                        
                           (22)
                           
                              
                                 
                                    σ
                                    u
                                 
                                 =
                                 
                                    
                                       [
                                       
                                          
                                             Γ
                                             
                                                (
                                                
                                                   1
                                                   +
                                                   β
                                                
                                                )
                                             
                                             sin
                                             
                                                (
                                                
                                                   
                                                      π
                                                      β
                                                   
                                                   2
                                                
                                                )
                                             
                                          
                                          
                                             Γ
                                             
                                                (
                                                
                                                   
                                                      1
                                                      +
                                                      β
                                                   
                                                   2
                                                
                                                )
                                             
                                             β
                                             
                                             
                                                2
                                                
                                                   
                                                      β
                                                      −
                                                      1
                                                   
                                                   2
                                                
                                             
                                          
                                       
                                       ]
                                    
                                    
                                       1
                                       /
                                       β
                                    
                                 
                                 
                                    σ
                                    V
                                 
                                 =
                                 1
                              
                           
                        
                     where Γ is the gamma function 
                        
                           Γ
                           
                              (
                              z
                              )
                           
                           =
                           
                              ∫
                              0
                              ∞
                           
                           
                              
                                 t
                                 
                                    z
                                    −
                                    1
                                 
                              
                              
                                 e
                                 
                                    −
                                    z
                                 
                              
                              d
                              t
                           
                        
                      that is the extension of the factorial function with its argument shifted down by 1 to real and complex numbers. That is, if k is a positive integer 
                        
                           Γ
                           (
                           k
                           )
                           =
                           (
                           k
                           −
                           1
                           )
                           !
                        
                     
                  

Three real world space frames are designed with the proposed ABC algorithm including the Levy flight strategy. These are four story 132 member steel space frame, 428 member steel space frame and eight story 1024 member steel space frame. The optimum designs obtained are compared with those attained by using standard artificial bee colony algorithm (SABC), Ant Colony Algorithm (ACO) [36] and Dynamic Harmony Search method (DHS) [35]. The same initial populations were used in the independent runs carried out for SABC and LABC as well as for DSH and ACO. In each design example, different SABC and LFABC algorithms’ internal parameters are used as determined from sensitivity analysis described in Section 7. These internal parameters are shown in Table 2
                     . Maximum iteration number is taken as 50,000 for first two test problems and 75,000 for the last design example. In each iteration structure is analyzed three times in order to consider P-delta effect. First analysis 1 is carried out for elastic case, second analysis is performed for non-sway case and third analysis is carried out for sway case. Analyses 2 and 3 are required for P-Delta effect as described in LRFD-AISC. On the other hand, only one objective function evaluation and one structural design is performed in each iteration. In all design examples, the discrete set from which the design algorithm selects the sectional designations for the members of steel space frames is considered to be the complete set of 272 W-sections starting from W100 × 19.3 to W1100 × 499 mm as given in LRFD-AISC.

A three-dimensional irregular steel frame taken from [34, 36] is selected as the first test Problem. 3-D, plan and side views of this frame are shown in Figs. 4–6
                        
                        
                        , respectively. The space frame consists of 70 joints and 132 members that are grouped into 30 independent member groups. The frame is subjected to gravity and lateral loads are computed as per given in ASCE 7-05 [37]. The design dead load is 2.88 kN/m2, the design live load is 2.39 kN/m2, and the ground snow load is 0.755 kN/m2. For wind load calculation the basic wind speed is considered as 85 mph (38 m/s) [35]. The factored distributed gravity loads on the beams of the roof and floors are tabulated in Table 3
                         and the unfactored earthquake loads are given in Table 4
                        . The load and combination factors are applied according to code specifications [35] as; Load Case 1: 1.4D, Load Case 2: 1.2D + 1.6L + 0.5S; Load Case 3: 1.2D + 0.5L + 1.6S; Load Case 4: 1.2D + 1.0EX + 0.5L + 0.2S; Load Case 5: 1.2D + 1.0EZ + 0.5L + 0.2S; Load Case 6 1.2D + 1.6WX + L + 0.5S and Load Case 7 : 1.2D + 1.6WZ + L + 0.5S, where D represents dead load, L is live load, S is snow load, EX and EZ represent earthquakes loads applied on X and Z global directions respectively and WX and WZ are the wind loads applied on X and Z global direction respectively. The top story drift constraints in x and y directions must be less than 3.9 cm. Inter-story drift is limited to 1.14 cm for the first story and 0.915 for the other stories. Maximum deflection of beams must be less than 2.03 cm.

The 132 member space frame is designed by SABC and LFABC algorithms 30 times using different seed values. Average weights of 30 best design are 611.45 kN for SABC algorithm and 581.73 kN for LFABC algorithm. Standard deviations are 15.12 kN for SABC algorithm and 12.09 kN for LFABC algorithm. Weights of best designs among 30 optimized solutions are 594.0 kN for SABC algorithm and 571.24 kN for LFABC algorithm. These results are also compared with those obtained by ACO and DHS algorithms taken from literature [35,36] as given in Table 6. It can be seen that the optimum design found by LFABC corresponds to the lightest weight (571.24 kN). This value is 4% lighter than weight of best design found by SABC algorithm (594.0 kN), 14% lighter than the optimum design of DHS algorithm and 24% lighter than the optimum design of ACO algorithm. W sections of the optimum designs are listed in Table 5
                         and the corresponding maximum constraints evaluated at the optimum design for each algorithm are shown in Table 6
                        . Design histories of these solutions are shown in Fig. 7
                        . It is clear from the Fig. 7 that both standard artificial bee colony algorithm and artificial bee colony algorithm with Levy flights perform better that dynamic harmony search method and ant colony algorithm.

A 428-member space frame is selected as the second design problem. The three-dimensional, side and plan views of the frame are shown in Figs. 8–10
                        
                        
                        , respectively. The frame has 172 joints and 428 members which are collected in 20 independent design variables. The member grouping is given in Table 7
                        . The frame is subjected to gravity loads as well as lateral loads that are computed according to ASCE 7-05 [37]. The design dead and live loads are taken as 2.88 kN/m2 and 2.39 kN/m2, respectively. Basic wind speed is considered as 85mph (38 m/s). The following load combinations are considered in the design of the frame according to the code specification [35]: 1.2D + 1.6L + 0.5S, 1.2D + 0.5L + 1.6S, 1.2D + 1.6WX + L + 0.5S and 1.2D + 1.6WX + L + 0.5S where D is the dead load, L represents the live load, S is the snow load and WX, WZ are the wind loads in the global X and Z axis, respectively. Drift ratio limits are taken as 0.875 cm for inter story drift and 3.5 cm for top story drift. Maximum deflection of beam members must be less than 2 cm.

The 428 member space frame is designed by each algorithm 30 times using different seed values in each independent optimization run. For SABC algorithm, the average weight and corresponding standard deviation on optimized weight are 1510.14 kN and 9.21 kN, respectively. The average weight is 1509.6 kN and standard deviation is 23.86 kN for LFABC algorithm. The best designs having the smallest weight among the 30 runs are 1503.91 kN for SABC algorithm and 1481.74 kN for LFABC algorithm. The same frame is also designed by using ACO and DHS algorithms. W-section designations of the optimum designs for LFABC and SABC are listed in Table 8
                         while maximum constraint values for each algorithm are given in Table 9
                        . It can be seen that LFABC algorithm attains the lightest optimum design (1481.74 kN) which is 2.05% lighter than the optimum design found by SABC algorithm (1512.11 kN), 3% lighter than the optimum design found by DHS algorithm (1526 kN) and 6.2% lighter than optimum design found by ACO algorithm (1573.21 kN). Design histories of these solutions are shown in Fig. 11.
                        
                     

The 1024 member space frame is selected as the third test problem. The three dimensional, plan and side views of the structure are shown in Figs. 12–14
                        
                        
                        , respectively. The frame has 384 joints and 1024 members which are collected in 40 independent design variables. The member grouping of the frame members is listed in Table 10
                        . The frame is subjected to gravity loads as well as lateral loads that are computed according to ASCE 7-05 [37]. The design dead and live loads are taken as 2.88 kN/m2 and 2.39 kN/m2, respectively. Basic wind speed is considered as 85 mph (38 m/s) for the wind load computations. The following load combinations are considered in the design of the frame according to the code specification [37]; 1.2D + 1.6L + 0.5S, 1.2D + 0.5L + 1.6S, 1.2D + 1.6WX + L + 0.5S and 1.2D + 1.6WX + L + 0.5S, where D is the dead load, L represents the live load, S is the snow load and WX, WZ are the wind loads in the global X and Z axis, respectively. Drift ratio limits are taken as 0.875 cm for inter story drift and 7 cm for top story drift. Maximum deflection of beam members must be less than 2 cm.

The optimum design problem of 1024-member space frame is solved 15 times by SABC and LFABC algorithms using different seed values. At the end of 15 runs, average weight and standard deviation of optimum weights are obtained as 6776.31 kN and 38.14 kN for the SABC algorithm, 6287.6 kN and 45.07 kN for the LFABC algorithm, respectively. These results are also compared with those obtained from ACO and DHS algorithms. The minimum weights, the maximum constraint values and the W-section designations of the optimum designs obtained for all algorithms are listed in Tables 11
                         and 12
                        . It appears that LFABC is overall the most efficient algorithm: in particular, the optimum design of LFABC (6143.52 kN) is 10.05% lighter than that of SABC, 17.4% lighter than that found by DHS and 25.2% lighter than that found by ACO. Design histories of each algorithm are shown in Fig. 15.
                        
                     

The results obtained from the optimum design of three steel space frames clearly indicate that proposed ABC algorithm including the Levy flight strategy outperforms the other three algorithms; namely standard ABC algorithm, ant colony algorithm and dynamic harmony search algorithm. Inspection of Figs. 6, 10 and 14 shows that LFABC has faster convergence rate and finds lighter optimum designs. Addition of Levy flight strategy certainly improves the local search (exploitation) capability of artificial bee colony algorithm. This is clear from the search histories graphs of algorithms shown in Figs. 10 and 14. While LFABC keeps on finding new solutions until it reaches to maximum number of iterations, the other algorithms fail to come up with new solutions and show stagnation. The exploitation capability of dynamic harmony search method is not weak. Depending on the value of harmony memory consideration rate, it is checked whether the value of design variable should be pitch-adjusted or not. In pitch adjustment the value of a design variable is altered to very upper or lower neighboring values which provides very small domain for local search. This fact is very clear from the search histories graphs of harmony search method shown in Figs. 6, 10 and 14. Ant colony algorithm searches for global optimum by forming the solutions in a semi-sequential way which gives a chance for the ants to be trapped in local optimum. This is also clear from the search histories graphs of the same figures. One interesting results is that even standard ABC algorithm performs better than both DHS and ACO. It determines lighter optimum designs than DHS and ACO as listed in Tables 6, 9 and 12. The unemployed bees in ABC who choose their food sources randomly are called scouts. Employed bees whose solutions cannot be improved after predetermined number of trials become scouts and their solutions are abandoned. These scouts start to search for new solutions by using random search. It is apparent that this strategy clearly provides better local search.

The values selected for the internal parameters of SABC and LFABC algorithms have a vital effect on the performance of the algorithms. Hence, it is crucial that the appropriate values are selected for these variables so that the algorithms find near global optimum results if not the global optimum. For this reason, sensitivity analysis is carried out with respect to each aforementioned parameters in order to determine suitable values for these parameters.

The colony size and the food source limit parameters are interdependent parameters. Best values of these parameters depend on the size of search space. Therefore, the effect of these parameters are studied in all design examples for both SABC and LFABC algorithms. Each example is designed 42 times by considering different values for colony size (5, 10, 20, 30, 50, 75, and 100) and food source limit (50, 100, 150, 200, 300, and 500). In total, 6 × 42 = 252 different runs are performed. All solutions of these runs are illustrated in Figs. 16–18
                        
                        
                        . After sensitivity analysis is completed, optimum internal parameters are determined in Table 2.
                     

Based on the results obtained from the sensitivity analysis, the following conclusions can be drawn regarding the colony size and the food source limit parameters.

Colony size parameter must be selected with consideration for the size of the design space. Although larger values for colony size parameter seem more suitable when used in conjunction with a larger design space, it may produce divergence in the problem. Since the first and second design examples have smaller design spaces than the third design example, better results are obtained for the smaller colony size values. This is why, colony size values are selected as 30 for the first two examples and 50 for the third example.

Food source limit parameter is associated with the randomness of the algorithms. Selection of small values for the food source limit may again cause divergence problems whereas selection of very large values for the food source limit may yield a local optimum. This is certainly related with the complexity of the design problem under consideration. It can be noticed that the second design example has more members which leads to more constraint functions in the optimum design problem than the first design example. Therefore, better results are obtained by selecting larger food source limit values in the second design example. It is apparent from the results that utilization of the Levy flight strategy in the ABC algorithm produces faster convergence rates. As a result, it becomes sufficient to use smaller food source limit parameter values. This is clear from the values of food source limit values that are selected as 150, 200 and 300 in the SABC algorithm and 50, 100 and 200 in the LFABC algorithms for Examples 1–3, respectively.

The stability index which is defined within the interval of [0, 2], has considerable effect on the simplified form of Levy flight distribution. A wide distribution is obtained for small values of the stability index. Conversely, the distribution sharpens for increasing values of the β parameter. The effect of stability index on LFABC convergence behavior is studied for the first test problem. Optimization runs are carried out for different values of the β parameter while the values of other parameters are set equal to those listed in Table 2. The minimum weights obtained from each run are shown in Fig. 19
                        . After sensitivity analysis is completed, β parameter is set to 1.5 in this study.

@&#CONCLUSIONS@&#

The paper presented a novel algorithm for optimum design of real size steel space frames. Optimum W-sections are selected from a discrete list of available sections such that LRFD-AISC design code provisions are satisfied and structural weight is minimized. The design procedure implements an improved formulation of the artificial bee colony algorithm including a Levy flight distribution to drive the scout bees' search. The new algorithm is used to design three real world steel space frames with 132 members, 428 members and 1024 members, respectively. It is shown that artificial bee colony algorithm is robust and efficient metaheuristic technique which successfully obtained the optimum designs of each structure under multiple loading conditions. The comparison of the optimum designs with those obtained by standard artificial bee colony algorithm, dynamic harmony search algorithm and ant colony optimization techniques artificial bee colony algorithm with Levy flights yields the lightest optimum designs among all. Remarkably, in the largest test problem of the 1024 member frame, the optimum design found by LFABC was 25.2% lighter than the optimum design found by ant colony. Furthermore the inspection of the design histories of each design example reveals the fact that the artificial bee colony algorithm with Levy flights has the fastest convergence rate. Therefore it can be concluded that artificial bee colony algorithm with Levy flights is a reliable and efficient structural optimization tool able to find the optimum W-section designations for practical steel frames under the real design code provisions and multiple load combinations.

@&#REFERENCES@&#

