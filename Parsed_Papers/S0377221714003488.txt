@&#MAIN-TITLE@&#Robust competence assessment for job assignment

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           An original fuzzy model for modelling human competences is suggested.


                        
                        
                           
                           Interactions between competences required are described using a Choquet integral.


                        
                        
                           
                           A robust approach is suggested for allocation of candidates to jobs.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Competence assessment

Choquet integral

Possibility theory

Uncertainty

Human workforce assignment

@&#ABSTRACT@&#


               
               
                  Allocating the right person to a task or job is a key issue for improving quality and performance of achievements, usually addressed using the concept of “competences”. Nevertheless, providing an accurate assessment of the competences of an individual may be in practice a difficult task. We suggest in this paper to model the uncertainty on the competences possessed by a person using a possibility distribution, and the imprecision on the competences required for a task using a fuzzy constraint, taking into account the possible interactions between competences using a Choquet integral. As a difference with comparable approaches, we then suggest to perform the allocation of persons to jobs using a robust optimisation approach, allowing to minimise the risk taken by the decision maker. We first apply this framework to the problem of selecting a candidate within n for a job, then extend the method to the problem of selecting c candidates for j jobs (c
                     ⩾
                     j) using the leximin criterion.
               
            

@&#INTRODUCTION@&#

Human factor is now considered as a key point for industrial performance (Pépiot, Cheikhrouhou, Fürbringer, & Glardon, 2008). The link between a person and a task (or role, job, position, etc.) is usually made through the concept of “competence”, now quite universally understood as the “ability” or “potential” to act effectively in a given working situation (Rozewski & Malachowski, 2009). As a consequence, the ISO 9000 standard version 2005 (ISO, 2005) requires the organisations to justify the competences of the human resources involved in the processes, defined as their “demonstrated ability to apply knowledge and skills”. An efficient management of the operational performance of human resources therefore requires being able to allocate the right person to a task or role within a business process. This necessitates to address two problems:
                        
                           -
                           how to model and assess the competences (competences required by a process and competences possessed by an individual),

how to allocate tasks or roles to actors according to their competences.

Two of the authors have developed a Competence Management software which has been implemented in several companies of different industrial sectors: railway industry (1 company), aeronautic (2 companies), petroleum (2 companies), construction (8 companies) and paper industry (1 company). In each case, the competences attached to a considered position or role have been identified and grouped in “types of competences”. The number of levels of the competences has been defined, and the competences possessed by the actors have been assessed (self assessment plus evaluation by the supervisor). Tools have then been provided for comparing required and possessed competences, and to address the detected gaps using trainings.

The longest implementation of this framework has taken more than two years. Some lessons learnt from these experiments have been detailed in Grabot and Houé (2009), concluding on the following requirements which would in our opinion allow to better address the present industrial needs concerning the allocation of persons to tasks or positions:
                        
                           -
                           like many human characteristics, the competences required by a process, so that those possessed by an individual, can hardly be precisely assessed. Defining required competences is a matter of preferences, and could benefit from a flexible model, while there may be some uncertainty on the validity of the assessment of the level of a possessed competence. Therefore, a framework allowing to model the possible imprecision and uncertainty on the required and possessed competences would allow to cope with partial ignorance, often realistic in this domain;

in real situations, the combination of competences required for performing a job may have to be modelled more subtly than using a classical “and” (e.g. “Competences X and Y and Z are required for performing job J”). Models denoting alternatives (“X or Y”), but also synergies or oppositions between competences may be useful for describing some real situations;

allocating persons to jobs according to their competences may be done in different ways. The most classical one is to try to maximise the consistence between required and possessed competences. Nevertheless, if competences are imprecisely known, minimising the risk taken by an allocation, i.e. a “robust optimisation” approach, would express a more natural attitude of the decision maker (Kahneman & Tversky, 1979).

The first point has been addressed in several studies, especially using fuzzy logic for modelling imprecisely known competences. The state of the art provided in Section 2 shows that the two other points have not yet been fully considered in the literature. In order to address these requirements, we suggest to use the possibility theory for taking into account the imprecision on the competences, by defining the satisfaction level of the competences required for a job using fuzzy constraints. We suggest to assess as a second step the global level of satisfaction provided by the allocation of a person to a job using the Choquet integral, which allows to take into account interactions between competences (Section 3). In the context of resource allocation under the uncertainty modelled by possibility theory, “robust optimisation” consists in maximising the minimal expected value for each allocation. In that purpose, we maximise the necessity of satisfaction of each allocation, again using a Choquet integral. As an illustration, we first apply this framework to the problem of selecting a candidate within n for a job described in Barbera and Jackson (1988)), using the leximin criterion as a robust criterion (Section 4). We then address the problem of c candidates for j jobs (c
                     ⩾
                     j) in Section 5.

The capacity of a person to perform an activity has first been considered using the qualification framework (Zarifian, 1994, chap. 6), which denotes the recognition of an aptitude. Nevertheless, listing all the activities that a person may perform in a given job is unrealistic; therefore the more generic concept of “competence” has been introduced. Competences are for instance defined in Peters and Zelewski (2007) as the ability of an employee to use his knowledge to achieve a predefined goal at a given level of performance. As pointed out in Boucher, Bonjour, and Grabot (2007), this concept may be covered by different words in the literature, especially “skills” (de Korvin, Shipley, & Kleyle, 2002; Otero, Centeno, Ruiz-Torres, & Otero, 2009; Valls, Perez, & Quintanilla, 2009), or to a lower extent “abilities” (Huang, Chiu, Yeh, & Chang, 2009) or even “suitability” (Yaakob & Kawate, 1999). Nevertheless, “skills” seem to be usually considered as close to “know-how”, denoting a technical aptitude to perform some tasks, while “competences” are more generic: for most of the authors, competences are a fluid mix of knowledge, skills (possibly given by experience) and attitudes (Léné, 1999; Tobias & Dietrich, 2003). A close distinction is made in Warhurst, Keep, and Grugulis (2004), in which “skills” are distinguished from “generic skills”, also called “competences”. In what follows, we shall combine the previous definitions, by defining competences as “knowledge, know-how and attitudes used to achieve a goal at a required level of performance”, this goal being associated to a role or activity of the actor.

Since companies have now the necessity to justify the competence of the human resources involved in their business processes, many Competence Management tools have recently been developed by software editors, as standalone applications, included in Human Resource Management modules, or as part of ERP (Enterprise Resource Planning) systems. Such tools usually allow to compare the competences required by a position and those possessed by a person. The competence levels are sometimes described using linguistic expressions (e.g. poor, adequate, average, good, very good and excellent) but they are always associated to integers for building graphics on which required and possessed competences are compared one by one, through radars or bar graphs. No aggregated score summarising the adaptation of a person to an activity or position is usually provided.

Industrial applications of such “crisp” competence models are for instance described in Grabot and Houé (2009), with the conclusion that defining precisely the level of a competence required by a process may be difficult in real cases. Similarly, assessing the precise level of competence of an individual is still more complex. A solution is to describe the available knowledge on required and possessed competences with its intrinsic ambiguity. This is for instance possible using fuzzy logic, allowing to describe categories with imprecise boundaries: fuzzy logic is known as providing an easy-to-use framework for expressing subjective knowledge, which is the case of required and possessed competence.

This idea has already been applied in the literature on skill/competence modelling: even if the term “competence” is not used, an early work dealing with fuzzy competence modelling is (Liang & Wang, 1992), in which decision-makers’ fuzzy assessments about “personnel suitability ratings relative to various evaluation criteria” are aggregated using fuzzy arithmetic. In Wang and Wang (1998), competences modelled by fuzzy sets are used for finding an optimal process to expand a worker’s competence set. Triangular fuzzy numbers are also used in Yaakob and Kawate (1999) to assess the “suitability” of workers for performing given jobs. In Huang et al. (2009), required and available competences are again modelled by trapezoidal fuzzy sets, and compared using a degree equal to the maximum of the intersection of the two sets: both over-competence and lack of competence are in that case penalised.

Other works are more precisely oriented on the process of evaluating competences: (Cannavacciulo, Capaldo, Ventre, Volpe, & Zollo, 1996) uses fuzzy logic for modelling the activity of competence evaluation. Pépiot et al. (2008) focus on the modelling of elementary competences, then on their aggregation in order to define a “global” competence on a given domain using fuzzy inference, while in Rozewski and Malachowski (2009), a fuzzy competence model is used for providing a detailed, behavioural description of the employee’s characteristics required to effectively perform a task. In Suleman and Suleman (2012), a fuzzy approach is suggested to rank workers according to their competences, while in Zemkova (2008), a comparison between the fuzzy competences possessed by individuals and those requested by a “role” is suggested. Weights are often associated to elementary competences in order to express their relative importance. Korkmaz, Gokcen, and Cetinyoku (2008) and Huang et al. (2009) suggest to use AHP (Analytic Hierarchy Process; Saaty, 1980) for capturing the expertise on these weights. Aggregation may also be performed using more complex operators, like Hurwicz and OWA (Ordered Weighted Average) operators (Nasibov, 2007), both allowing to express a compromise between optimistic (the global index is the maximum of the elementary ones) and pessimistic (the global index is the minimum of the elementary ones) attitudes.

All these approaches provide a more robust and flexible framework than “crisp” models for describing required and possessed competences. It his shown in next section how these frameworks have been used for employees’ allocation.

The literature on workforce scheduling is very rich, but competences and skills are only taken into account in some studies, usually through simple models (list of required and possessed competences, often assessed on a binary scale); a survey can for instance be found in Boucher et al. (2007). Some studies go further and address the problem of task allocation under constraints of competences, for instance in the fields of maintenance (Marmier, Varnier, & Zerhouni, 2009a), line balancing (Sabar, Montreuil, & Frayret, 2005), call centre (Valls, Perez, & Quintanilla, 2009), project management (Hlaoittinum, Bonjour, & Dulmet, 2008), software development (Gonsalves & Itoh, 2010; Otero et al., 2009) or military personnel assignment (Korkmaz, Gokcen & Cetinyoku, 2008). In these studies, competence levels are assessed through a number, weights are associated to the competences, and a compound index, usually calculated using a weighted sum, shows the global adequacy between a person and a position (see for instance Otero et al., 2009), allowing to rank candidates according to their adequacy with the task or position.

Some studies address the allocation problem in a fuzzy framework. Marmier, Varnier, and Zerhouni (2009b) suggest for instance to allocate workers to maintenance activities on the base of a competence expressing their ability to perform a task. Only one aggregated competence is considered for each task. Heuristics are for instance suggested in de Korvin et al. (2002) for allocating workers to tasks, based on possessed and required levels of competences: a “goal” is defined as a required level for each considered competence, and a compatibility measure between the goal and an individual is suggested. For similar purposes, (Liang & Wang, 1992) suggests to aggregate decision maker’s fuzzy assessment on criteria weights and personal suitability ratings. A polynomial algorithm for personnel placement under fuzziness is suggested by combining fuzzy set theory and a weighted bipartite graph. Recent studies often use metaheuristics for performing the allocation: simulated annealing is used in Baykasoglu, Dereli, and Das (2007) for solving a model using a “suitability objective” (linked to the satisfaction of the required competences) and constraints aiming at minimising the team size, and respecting the budget of the project. Genetic algorithms are used in Nasibov (2007) for solving an allocation problem where persons and tasks are linked by fuzzy relations: the objective is to maximise the degree of competence of the entire allocation and the degree of the overall level of employment of standard executives. In Malachoswki (2011), fuzzy required and possessed competences are compared, the cost and time possibly required for expanding the competence set being considered for building an allocation of persons to projects.

In Yaakob and Kawate (1999), a fuzzy suitability ranking of each worker for a given job is calculated thanks to fuzzy arithmetic. The types of relationships between workers are then considered for defining the final allocation, aiming at matching workers to jobs. Nevertheless, the method mainly uses the average values of the fuzzy sets, and the interest to imprecisely define the competences is not clear in that case. In Karsak (2000), a fuzzy multiple objectives Boolean linear programming model is suggested for solving the problem using undominated solutions.

How these various references address the requirements listed in the introduction is shown in Table 1
                        . If most of these studies aim at allocating people to tasks, jobs or positions, others have a different goal, like the evaluation of the employees (Cannavacciulo et al., 1996; Zemkova, 2008), Competence Management (Pépiot et al., 2008) or performance prediction (Poveda & Fayek, 2009). Only few studies (Cannavacciulo et al., 1996; Huang et al., 2009) address the (minor) requirement concerning the possibility to modify a linguistic label using a fuzzy operator. The comparison between required and possessed competences is not always explicitly addressed: a “suitability” between what is required and what is available is sometimes an input of the method (Liang & Wang, 1992; Nasibov, 2007) whereas in other works, the required competences are defined as binary (Zemkova, 2008), or are not considered, as in studies aiming at listing available competences (Marmier et al., 2009a).

In some cases in which a fuzzy inference is used for aggregating the elementary degrees of “suitability” of the competences, the required competences are implicitly present in the rule base (e.g. in Poveda & Fayek, 2009). Most of the time, weighted sums are used for aggregating elementary degrees of matching between required and possessed competences, weights being either crisp or fuzzy, sometimes defined using AHP or its variants (Huang et al., 2009; Malachoswki, 2011). “Ad hoc” operators are sometimes defined for the aggregation, like the “compound competence” of Wang and Wang (1998) or the “fuzzy compatibility” in de Korvin et al. (2002). Possible interactions between competences are never taken into account.

The only study suggesting a way to take into account different attitudes of the decision maker regarding the uncertainty of the data is (Nasibov, 2007). Using the Hurwicz criterion or the OWA operator for aggregation, this study allows to depict a full range of decision maker’s behaviours, from optimism to pessimism. The later case can be interpreted as the “robust” assessment present in our requirements. Nevertheless, the work does not consider the aggregation of elementary competences: the suitability between a person and a task is assessed through a single parameter (competence of an executive to perform a task). In this study, the aggregation aims at assessing the entire allocation of persons to tasks. Obtaining such a “compatibility matrix”, which is an input in Nasibov (2007), is one of the objectives of the method suggested in the present article.

Since none of the analysed references addresses all the targeted requirements (especially, providing a modelling framework allowing to take into account the possible interactions between competences, which is never considered), we suggest in next sections a comprehensive framework addressing all these points.

As shown in Dubois, Prade, and Testemale (1988), the comparison between a required and an available “object” may lead to two different modelling problems:
                        
                           -
                           the requirement may be imprecise. Fuzzy logic may be used in that case if the boundaries between categories are not crisp, as suggested in previous studies;

the assessment of the competences of the available “candidates” may be uncertain. In that case, a distribution of possibilities is more adapted than a fuzzy set for representing the knowledge on the “object”.

In Dubois et al. (1988) is shown how the comparison between a requirement (denoted by a fuzzy linguistic label) and a property of a candidate element (denoted by a distribution of possibilities) can be done through two degrees: a necessity degree expressing to what extend it is necessary that the candidate fits the requirement, and a possibility degree expressing to what extend it is possible. Even if their interpretation may be difficult, these two degrees allow a richer comparison between requirement and object than simple membership degrees. Within this framework, fuzzy required competences and possibilistic possessed ones will denote uncertainty leading to risk in the allocation process. With this point of view, we suggest in the following an approach based on robust optimisation, i.e. aiming at minimising risk, which is in our opinion consistent with industrial needs. In that purpose, a framework for fuzzy competence modelling will firstly be defined in next section.

Let us consider the following definition of a fuzzy constraint:
                           Definition 1
                           
                              Dubois et al., 1994
                           


                           A fuzzy constraint is defined by a constraint C and a fuzzy relation 
                                 
                                    
                                       
                                          R
                                       
                                       
                                          ∼
                                       
                                    
                                 
                               such that the degree of satisfaction of a solution 
                                 
                                    
                                       
                                          d
                                       
                                       
                                          ¯
                                       
                                    
                                    ∈
                                    Ω
                                 
                               (with Ω the set of possible solutions) is described by the function 
                                 
                                    
                                       
                                          λ
                                       
                                       
                                          
                                             
                                                R
                                             
                                             
                                                ∼
                                             
                                          
                                       
                                    
                                    (
                                    
                                       
                                          d
                                       
                                       
                                          ¯
                                       
                                    
                                    )
                                 
                               of Ω in L such as:


                              
                                 
                                    •
                                    
                                       
                                          
                                             
                                                
                                                   λ
                                                
                                                
                                                   
                                                      
                                                         R
                                                      
                                                      
                                                         ∼
                                                      
                                                   
                                                
                                             
                                             :
                                             Ω
                                             →
                                             [
                                             0
                                             ,
                                             1
                                             ]
                                          
                                       ;


                                       
                                          
                                             
                                                
                                                   λ
                                                
                                                
                                                   
                                                      
                                                         R
                                                      
                                                      
                                                         ∼
                                                      
                                                   
                                                
                                             
                                             (
                                             
                                                
                                                   d
                                                
                                                
                                                   ¯
                                                
                                             
                                             )
                                             =
                                             1
                                          
                                        means that 
                                          
                                             
                                                
                                                   d
                                                
                                                
                                                   ¯
                                                
                                             
                                          
                                        totally satisfies the constraint C;


                                       
                                          
                                             
                                                
                                                   λ
                                                
                                                
                                                   
                                                      
                                                         R
                                                      
                                                      
                                                         ∼
                                                      
                                                   
                                                
                                             
                                             (
                                             
                                                
                                                   d
                                                
                                                
                                                   ¯
                                                
                                             
                                             )
                                             =
                                             0
                                          
                                        means that 
                                          
                                             
                                                
                                                   d
                                                
                                                
                                                   ¯
                                                
                                             
                                          
                                        totally violates the constraint C;


                                       
                                          
                                             
                                                
                                                   λ
                                                
                                                
                                                   
                                                      
                                                         R
                                                      
                                                      
                                                         ∼
                                                      
                                                   
                                                
                                             
                                             (
                                             
                                                
                                                   d
                                                
                                                
                                                   ¯
                                                
                                             
                                             )
                                             in
                                             [
                                             0
                                             ,
                                             1
                                             ]
                                          
                                       means that 
                                          
                                             
                                                
                                                   d
                                                
                                                
                                                   ¯
                                                
                                             
                                          
                                        partially satisfies the constraint C.

As already suggested (see Section 2.2), the levels of competence required by a task or position can be described by fuzzy constraints (Definition 1), but unlike most of previous studies, it has been chosen here to keep some flexibility for defining the requirement on a given competence. In Fig. 1
                         are for instance shown classical fuzzy constraints corresponding to competence levels which may be associated with linguistic labels like “beginner, basic, average, good, expert”, but also others like “at least average” or “average to good” which may be useful in some cases (this possibility was already used in Cannavacciulo et al. (1996) and Huang et al. (2009)). The scale of the competence level can be chosen (0–4 has been taken as an example in Fig. 1), so that the number of fuzzy sets and their degree of overlapping, which should be consistent with the accuracy of the available data.

The “at least” modifier has an important interest: if only triangular fuzzy sets are used, a competence with a higher level than required will be considered as different from what is required. This is consistent if the goal of the allocation is to find a person having exactly the expected competence (for instance because people with higher competence may have a higher cost). If no penalty is expected for allocating a person with a higher competence, an easy solution is to modify all the triangular membership functions using the “at least” modifier (see the case of “average” and “at least average” in Fig. 1): in this case, “good” or “expert” are μ(X)=1 for instance fully consistent with “at least average”.

Let us consider the two following definitions:
                           Definition 2
                           
                              Sugeno, 1974
                           


                           A capacity μ is a function μ:2
                                 X
                              
                              →[0,1], satisfying the following axioms:


                              
                                 
                                    i.
                                    
                                       μ(∅)=0.


                                       A
                                       ⊂
                                       B
                                       ⊂
                                       X => μ(A)⩽
                                       μ(B).

Weighted sums have often been used in the literature for performing multi-criteria aggregation (including in Competence Management, see Table 1) because of their simplicity. Nevertheless, it does not allow to describe interactions between elementary criteria. The Choquet integral is a possible way to address this problem (Grabisch & Roubens, 2000), since it allows to define the aggregation of elementary criteria using (i) a linear part similar to a weighted sum, and (ii) another part taking into account the interactions between elementary criteria. These interactions may decrease the Global satisfaction, or increase it, according to the choice of the parameters. More formally:
                           Definition 3
                           
                              Choquet, 1953
                           


                           Let us consider a capacity μ on 2
                                 X
                              , which elements are denoted x
                              1,…,
                              xn
                               here and 
                                 
                                    f
                                    :
                                    X
                                    →
                                    
                                       
                                          R
                                       
                                       
                                          +
                                       
                                    
                                 
                               a function representing the scores of an object on n criteria (satisfaction level of the fuzzy constraints 
                                 
                                    
                                       
                                          λ
                                       
                                       
                                          
                                             
                                                R
                                             
                                             
                                                ∼
                                             
                                          
                                       
                                    
                                    )
                                 
                              . The discrete Choquet integral of function f with respect to μ (global score of the objet) is defined by:
                                 
                                    (1)
                                    
                                       
                                          
                                             C
                                          
                                          
                                             μ
                                          
                                       
                                       (
                                       f
                                       )
                                       ≔
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                n
                                             
                                          
                                       
                                       [
                                       f
                                       (
                                       
                                          
                                             x
                                          
                                          
                                             (
                                             i
                                             )
                                          
                                       
                                       )
                                       -
                                       f
                                       (
                                       
                                          
                                             x
                                          
                                          
                                             (
                                             i
                                             -
                                             1
                                             )
                                          
                                       
                                       )
                                       ]
                                       μ
                                       (
                                       
                                          
                                             A
                                          
                                          
                                             i
                                          
                                       
                                       )
                                    
                                 
                              With Ai
                              :={x
                              (
                              
                                 i
                              
                              ),…,
                              x
                              (
                              
                                 n
                              
                              )}, f(x
                              (0))=0, and x
                              (
                              
                                 i
                              
                              ) is a permutation of xi
                               so that 0⩽
                              f(x
                              (1))⩽
                              f(x
                              (2))⩽…⩽
                              f(x
                              (
                              
                                 n
                              
                              )).

In multi-criteria decision making, the capacities (Definition 2) and the Choquet integral (Definition 3) are powerful tools for modelling the global preferences of the decision maker, since they allow the introduction of weights not only on each criterion, but also on each subset of criteria (thanks to the permutation x
                        (
                        
                           i
                        
                        )). As a consequence, all the possible combinations of the n criteria can be considered. In this way, a capacity, which is a non-additive monotonic measure, is able to express human subjectivity in multi-criteria aggregation, taking into account that human reasoning does not always use additive frameworks (Marichal, 2009). In practice, this framework may allow to describe the synergy between two criteria (i.e. they become more important when they are both at a high level) or, on the opposite, their redundancy (being both satisfied does not bring much to the global index). This is very consistent with the requirements expressed in the introduction. Nevertheless, the “importance” of a criterion cannot be represented by its capacity alone, since this importance also depends on the interactions with other criteria. For addressing this problem, it has been suggested to define an importance index ϕ as follows (Grabisch, 2006):

Let us consider a group of criteria in interaction A with a
                        =card(A), n being the total number of criteria and μ a capacity denoting a weight on a criterion or on a set of criteria.
                           
                              (2)
                              
                                 ϕ
                                 (
                                 i
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          A
                                          ⊑
                                          X
                                          ⧹
                                          i
                                       
                                    
                                 
                                 
                                    
                                       (
                                       n
                                       -
                                       a
                                       -
                                       1
                                       )
                                       !
                                       a
                                       !
                                    
                                    
                                       n
                                       !
                                    
                                 
                                 [
                                 μ
                                 (
                                 A
                                 
                                    ⋃
                                 
                                 {
                                 i
                                 }
                                 )
                                 -
                                 μ
                                 (
                                 A
                                 )
                                 ]
                              
                           
                        With this definition, ∑
                        
                           iϕ(i)=
                        μ(X) (Grabisch & Roubens, 2000). It is considered in studies like (Grabisch, 2006) that this sum has to be equal to 1, but in others (Grabisch & Roubens, 2000), this sum can be superior to 1.

This importance index allows to calculate the final weight of a criterion, according to its elementary weights and to its interactions. Conversely (see Section 4), it is possible to choose the global importance of a criterion, then to check that it is consistent with its interactions.

As an additional problem, it can be seen in formula (1) that the flexibility provided by the capacity model has a cost (Grabisch, 2006): for n criteria, the model is composed of 2
                           n
                        
                        −2 parameters expressing the weights on the groups of criteria, which makes the identification of all the required parameters difficult. Fortunately, it has been experimentally shown that using a n-additive capacity, i.e. a capacity that takes into accounts all the possible combinations of the n criteria, does not increase significantly the precision of the results when compared to a 2-additive capacity measure, i.e. a capacity only taking into account the combinations of two criteria among the n possible (Grabisch, Duchêne, Lino, & Perny, 2002). Therefore, we have chosen to use a 2-additive capacity measure in this article, which means that interactions between more than two criteria are considered as null.

In the case of 2-additive capacity, the Choquet integral can be written as follows (Grabisch, 1997):
                           
                              (3)
                              
                                 
                                    
                                       C
                                    
                                    
                                       μ
                                    
                                 
                                 (
                                 f
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ,
                                          j
                                          |
                                          
                                             
                                                I
                                             
                                             
                                                ij
                                             
                                          
                                          >
                                          0
                                       
                                    
                                 
                                 (
                                 f
                                 (
                                 i
                                 )
                                 ∧
                                 f
                                 (
                                 j
                                 )
                                 )
                                 
                                    
                                       I
                                    
                                    
                                       ij
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ,
                                          j
                                          |
                                          
                                             
                                                I
                                             
                                             
                                                ij
                                             
                                          
                                          <
                                          0
                                       
                                    
                                 
                                 (
                                 f
                                 (
                                 i
                                 )
                                 ∨
                                 f
                                 (
                                 j
                                 )
                                 )
                                 |
                                 
                                    
                                       I
                                    
                                    
                                       ij
                                    
                                 
                                 |
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          N
                                       
                                    
                                 
                                 f
                                 (
                                 i
                                 )
                                 
                                    
                                       
                                          ϕ
                                          (
                                          i
                                          )
                                          -
                                          
                                             
                                                1
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   ≠
                                                   i
                                                
                                             
                                          
                                          |
                                          
                                             
                                                I
                                             
                                             
                                                ij
                                             
                                          
                                          |
                                       
                                    
                                 
                              
                           
                        With 
                           
                              ϕ
                              (
                              i
                              )
                              -
                              
                                 
                                    1
                                 
                                 
                                    2
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    j
                                    ≠
                                    i
                                 
                              
                              |
                              
                                 
                                    I
                                 
                                 
                                    ij
                                 
                              
                              |
                              ⩾
                              0
                           
                         being the condition of consistence between the importance of a criterion and its interactions, Iij
                         denoting the interaction between criteria i and j. It can be seen that the interactions and importances are needed, but not the elementary weights, already present in the importances.

This equation is composed of three terms (Grabisch, 2006):
                           
                              -
                              the first term (active when Iij
                                 
                                 >0) aggregates the pairs of criteria that are in positive interaction using a “min” operator (i.e., obtaining a good global index requires that both elementary criteria are satisfied),

the second term (active when Iij
                                 
                                 <0)aggregates the terms that are in negative interaction using a “max” operator (i.e. the result will be good as soon as one of the criteria is satisfied),

the third one is a weighted sum which weights are the indices of importance decreased by the sum of the interactions related to the considered criterion (the ϕ(i) represent the linear part of Choquet integral).

In the next section, we propose a model for computing the local satisfaction level of fuzzy constraints (
                           
                              
                                 
                                    λ
                                 
                                 
                                    
                                       
                                          R
                                       
                                       
                                          ∼
                                       
                                    
                                 
                              
                           
                        ) and show how to compute a Global satisfaction level taking into account the subjectivity intrinsic to our problem (competences allocation), taking into account the interactions between competences that can be expressed using a Choquet integral.

While required competences are described by fuzzy sets expressing loose constraints, the semantic of the possessed competences is different: on the scale given by the considered levels of competences (e.g. 0–4 in Fig. 1), a possessed competence can be described by a distribution of possibilities πv
                         (Definition 4) expressing the uncertainty on the knowledge on the real level of competence of the person.

Let us consider an information v
                        ∊
                        A where A is a subset of S which contains more than one element.
                           Definition 4
                           A possibility distribution πv
                              of v quantifies the plausibility of the information v. πv
                               is a function of S in L such as ∀s
                              ∊
                              S,
                              πv
                              (s)∊
                              L, and ∃s,
                              πv
                              (s)=1 with v denoting an ill-known value in S, and L the scale of plausibility ([0,1] for the theory of possibility).

Using a possibility distribution, we can evaluate the plausibility and the certainty that v belongs to an interval g, the plausibility being defined as the possibility degree Π(v
                        ∊
                        g)=sup
                           s
                        
                        ∊
                        
                           g
                        
                        
                        πv
                        (s) and the certainty as the necessity degree N(v
                        ∊
                        g)=1−sup
                           s
                        
                        ∉
                        
                           g
                        
                        
                        πv
                        (s). The necessity and possibility measures that v belongs to an interval g are respectively the lower and upper bound of the probability: N(v
                        ∊
                        g)⩽
                        P(v
                        ∊
                        g)⩽
                        Π(v
                        ∊
                        g).

The degree of necessity is used as the criterion to maximise in robust optimisation, since it represents the certainty to have a satisfaction level (Dubois et al., 1988).

The possibility and the necessity measures are non-additive capacity measures. So, the Choquet integral can be adapted to the case where μ is a possibility measure: CΠ
                        (f) (Eq. (4)) and to the case where μ is a necessity measure: CN
                        (f) (Eq. (5)). The possibility and the necessity measures are respectively the upper and lower bound of the set of probabilities defined by the possibility distribution. These two values are then the upper and the lower bounds of the possible expected values of the global comparison between the objects and the criteria, so that 
                           
                              
                                 
                                    C
                                 
                                 
                                    N
                                 
                              
                              (
                              f
                              )
                              =
                              
                                 
                                    E
                                 
                                 
                                    ̲
                                 
                              
                              (
                              f
                              )
                              ⩽
                              E
                              (
                              f
                              )
                              ⩽
                              
                                 
                                    C
                                 
                                 
                                    Π
                                 
                              
                              (
                              f
                              )
                              =
                              
                                 
                                    E
                                 
                                 
                                    ‾
                                 
                              
                              (
                              f
                              )
                           
                        , E(f) being the expected value of f. So, a robust decision is a decision that maximises the minimal expected value CN
                        (f).
                           
                              (4)
                              
                                 
                                    
                                       C
                                    
                                    
                                       Π
                                    
                                 
                                 (
                                 f
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          n
                                       
                                    
                                 
                                 [
                                 f
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       (
                                       i
                                       )
                                    
                                 
                                 )
                                 -
                                 f
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       (
                                       i
                                       -
                                       1
                                       )
                                    
                                 
                                 )
                                 ]
                                 Π
                                 (
                                 
                                    
                                       A
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    
                                       C
                                    
                                    
                                       N
                                    
                                 
                                 (
                                 f
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          n
                                       
                                    
                                 
                                 [
                                 f
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       (
                                       i
                                       )
                                    
                                 
                                 )
                                 -
                                 f
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       (
                                       i
                                       -
                                       1
                                       )
                                    
                                 
                                 )
                                 ]
                                 N
                                 (
                                 
                                    
                                       A
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                           
                        With 
                           
                              f
                              :
                              X
                              →
                              
                                 
                                    R
                                 
                                 
                                    +
                                 
                              
                           
                         a function representing the scores, Ai
                        
                        :={x
                        (
                        
                           i
                        
                        ),…,
                        x
                        (
                        
                           n
                        
                        )}, f(x
                        (0))=0, and is a permutation of xi
                         so that 0⩽
                        f(x
                        (1))⩽
                        f(x
                        (2))⩽…⩽
                        f(x
                        (
                        
                           n
                        
                        )).

The steps of the method are represented in Fig. 2
                     . The first one is to evaluate the satisfaction degree provided by each (uncertain) competence possessed by a candidate in relation with the (possibly imprecise) required competence. The global satisfaction provided by each candidate can then be assessed, once the interactions between competences have been modelled. As a final step, it is possible to take into account the uncertainty denoted in the possibility distributions by computing the worst satisfaction provided by each candidate. In this “robust” approach, the chosen candidate is the one who maximises the worst satisfaction.

The Choquet integral will be used twice in this method:
                        
                           -
                           firstly, to deal with the multi-criteria dimension of our problem (computation of the global satisfaction provided by each candidate according to all his competences).

secondly, if the possessed competences are uncertain, for computing a global satisfaction degree taking into account the uncertainty on the data. Indeed, when the possessed competences are uncertain, the aggregated preference is uncertain too. To deal with this uncertainty in a “robust” way, we propose to compute the lower bound of the expected value, defined by a possibility distribution of the aggregated preference, using a second Choquet integral.

The possibility distribution of a possessed competence c,
                        c
                        =1,…,
                        C noted 
                           
                              
                                 
                                    π
                                 
                                 
                                    
                                       
                                          
                                             
                                                L
                                             
                                             
                                                ∼
                                             
                                          
                                       
                                       
                                          c
                                       
                                    
                                 
                              
                           
                         is a trapezoidal fuzzy interval represented by a quadruplet 
                           
                              
                                 
                                    
                                       
                                          L
                                       
                                       
                                          ∼
                                       
                                    
                                 
                                 
                                    c
                                 
                              
                              =
                              (
                              a
                              ;
                              b
                              ;
                              c
                              ;
                              d
                              )
                           
                         (see Fig. 3
                        ). The possibility distributions associated with the competences induce a possibility distribution π(s) with s
                        =(s
                        1,…,
                        sC
                        ) (Eq. (6)) where lc
                        
                        =
                        sc
                        , for c
                        =1,…,
                        C (it is assumed that the competences are independent from each other) (see Dubois et al., 2003):
                           
                              (6)
                              
                                 π
                                 (
                                 s
                                 )
                                 =
                                 Π
                                 (
                                 (
                                 
                                    
                                       l
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       s
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 ∧
                                 …
                                 ∧
                                 (
                                 
                                    
                                       l
                                    
                                    
                                       C
                                    
                                 
                                 =
                                 
                                    
                                       s
                                    
                                    
                                       C
                                    
                                 
                                 )
                                 )
                                 =
                                 
                                    
                                       
                                          min
                                       
                                       
                                          c
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          C
                                       
                                    
                                 
                                 Π
                                 (
                                 
                                    
                                       l
                                    
                                    
                                       c
                                    
                                 
                                 =
                                 
                                    
                                       s
                                    
                                    
                                       c
                                    
                                 
                                 )
                              
                           
                        Since the Choquet integral is non-linear, it is not possible to compute analytically the matching of a person to a job using the fuzzy sets of the required competences and the possibility distributions of the possessed competences. Therefore, the aggregation should be constructed “point by point” using α-cuts (Definition 5), until the minimum value of satisfaction is found (since we are in a “robust” approach, we look for the individual who maximises the minimum satisfaction).
                           Definition 5
                           The α-cuts of π(s) are the sub-sets of s defined by the elements of π(s) that have a possibility greater or equal than α (Eq. (7) and Fig. 3).
                                 
                                    (7)
                                    
                                       {
                                       s
                                       :
                                       π
                                       (
                                       s
                                       )
                                       ⩾
                                       α
                                       }
                                       =
                                       [
                                       
                                          
                                             l
                                          
                                          
                                             1
                                          
                                          
                                             -
                                             [
                                             α
                                             ]
                                          
                                       
                                       ;
                                       
                                          
                                             l
                                          
                                          
                                             1
                                          
                                          
                                             +
                                             [
                                             α
                                             ]
                                          
                                       
                                       ]
                                       ×
                                       …
                                       ×
                                       [
                                       
                                          
                                             l
                                          
                                          
                                             C
                                          
                                          
                                             -
                                             [
                                             α
                                             ]
                                          
                                       
                                       ;
                                       
                                          
                                             l
                                          
                                          
                                             C
                                          
                                          
                                             +
                                             [
                                             α
                                             ]
                                          
                                       
                                       ]
                                    
                                 
                              To compute the lower bound of the possibility distribution of the global satisfaction, we first have to compute the minimal satisfaction for each competence with regards to the possibility degree (α). This minimal satisfaction (noted 
                                 
                                    
                                       
                                          
                                             
                                                λ
                                             
                                             
                                                c
                                                ,
                                                α
                                             
                                          
                                       
                                       
                                          ̲
                                       
                                    
                                    )
                                 
                               is computed using Eq. (8) where 
                                 
                                    
                                       
                                          λ
                                       
                                       
                                          c
                                       
                                    
                                    (
                                    
                                       
                                          l
                                       
                                       
                                          c
                                       
                                    
                                    )
                                 
                               denotes the degree of satisfaction of the trapezoidal fuzzy constraints on competence c (see Definition. 1, Section 3.1).
                                 
                                    (8)
                                    
                                       
                                          
                                             
                                                
                                                   λ
                                                
                                                
                                                   c
                                                   ,
                                                   α
                                                
                                             
                                          
                                          
                                             ̲
                                          
                                       
                                       =
                                       
                                          
                                             
                                                min
                                             
                                             
                                                
                                                   
                                                      l
                                                   
                                                   
                                                      c
                                                   
                                                
                                                ∈
                                                [
                                                
                                                   
                                                      l
                                                   
                                                   
                                                      c
                                                   
                                                   
                                                      -
                                                      [
                                                      α
                                                      ]
                                                   
                                                
                                                ;
                                                
                                                   
                                                      l
                                                   
                                                   
                                                      c
                                                   
                                                   
                                                      +
                                                      [
                                                      α
                                                      ]
                                                   
                                                
                                                ]
                                             
                                          
                                       
                                       
                                          
                                             λ
                                          
                                          
                                             c
                                          
                                       
                                       (
                                       
                                          
                                             l
                                          
                                          
                                             c
                                          
                                       
                                       )
                                       ,
                                       
                                       for
                                       
                                       c
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       C
                                    
                                 
                              From 
                                 
                                    
                                       
                                          
                                             
                                                λ
                                             
                                             
                                                c
                                                ,
                                                α
                                             
                                          
                                       
                                       
                                          ̲
                                       
                                    
                                 
                               we can build the lower bound of the satisfaction degree for a competence c. To find the solution of Eq. (8), we use Proposition 1 (see hereafter).


                              The minimal possible satisfaction degree of competence c is 
                              
                                 
                                    
                                       
                                          
                                             
                                                λ
                                             
                                             
                                                c
                                                ,
                                                α
                                             
                                          
                                       
                                       
                                          ̲
                                       
                                    
                                    =
                                    min
                                    (
                                    
                                       
                                          λ
                                       
                                       
                                          c
                                          ,
                                          α
                                       
                                    
                                    (
                                    
                                       
                                          l
                                       
                                       
                                          c
                                       
                                       
                                          -
                                          [
                                          α
                                          ]
                                       
                                    
                                    )
                                    ;
                                    
                                       
                                          λ
                                       
                                       
                                          c
                                          ,
                                          α
                                       
                                    
                                    (
                                    
                                       
                                          l
                                       
                                       
                                          c
                                       
                                       
                                          +
                                          [
                                          α
                                          ]
                                       
                                    
                                    )
                                    )
                                 
                              .


                              
                                 
                                    
                                       
                                          λ
                                       
                                       
                                          c
                                          ,
                                          α
                                       
                                    
                                    (
                                    
                                       
                                          l
                                       
                                       
                                          c
                                       
                                    
                                    )
                                 
                               is a trapezoidal membership function on 
                                 
                                    
                                       
                                          l
                                       
                                       
                                          c
                                       
                                    
                                    ∈
                                    [
                                    
                                       
                                          l
                                       
                                       
                                          c
                                       
                                       
                                          -
                                          [
                                          α
                                          ]
                                       
                                    
                                    ;
                                    
                                       
                                          l
                                       
                                       
                                          c
                                       
                                       
                                          +
                                          [
                                          α
                                          ]
                                       
                                    
                                    ]
                                 
                               so its minimal value is on the bound 
                                 
                                    
                                       
                                          l
                                       
                                       
                                          c
                                       
                                       
                                          -
                                          [
                                          α
                                          ]
                                       
                                    
                                 
                               or 
                                 
                                    
                                       
                                          l
                                       
                                       
                                          c
                                       
                                       
                                          +
                                          [
                                          α
                                          ]
                                       
                                    
                                 
                              .□

From the minimal satisfaction level, we compute the lower bound of the Global satisfaction noted Cμ
                        
                        ,
                        
                           α
                        , Definition 6 using a Choquet integral with a 2-additive capacity measure (see Eq. (3) Section 3.2), i.e. a capacity measure only considering elementary criteria and combinations of two criteria (see Section 3.2).
                           Definition 6
                           The lower bound of the global satisfaction (noted Cμ
                              
                              ,
                              
                                 α
                              ) is the lower value for a given degree of possibility α
                              ∊[0,1] of the multi-criteria aggregation using the Choquet integral with capacity μ.

From Proposition 2 and Eq. (3) (Section 3.2), the equation of the lower bound of the global satisfaction, i.e., formally 
                           
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          μ
                                          ,
                                          α
                                       
                                    
                                 
                                 
                                    ̲
                                 
                              
                              (
                              λ
                              )
                           
                         for a given capacity measure μ, possibility degree α and a vector of satisfaction degree 
                           
                              λ
                              =
                              (
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              
                                 
                                    λ
                                 
                                 
                                    c
                                 
                              
                              )
                           
                         is given in Eq. (9) (with ∧=
                        min,∨=
                        max):
                           
                              (9)
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   C
                                                
                                                
                                                   μ
                                                   ,
                                                   α
                                                
                                             
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       (
                                    
                                 
                                 λ
                                 )
                                 =
                                 
                                    
                                       
                                          min
                                       
                                       
                                          λ
                                          ∈
                                          [
                                          
                                             
                                                
                                                   
                                                      λ
                                                   
                                                   
                                                      ̲
                                                   
                                                
                                             
                                             
                                                α
                                             
                                          
                                          ;
                                          
                                             
                                                
                                                   
                                                      λ
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                             
                                                α
                                             
                                          
                                          ]
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   ,
                                                   j
                                                   |
                                                   
                                                      
                                                         I
                                                      
                                                      
                                                         ij
                                                      
                                                   
                                                   >
                                                   0
                                                
                                             
                                          
                                          (
                                          
                                             
                                                λ
                                             
                                             
                                                i
                                             
                                          
                                          ∧
                                          
                                             
                                                λ
                                             
                                             
                                                j
                                             
                                          
                                          )
                                          
                                             
                                                I
                                             
                                             
                                                ij
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   ,
                                                   j
                                                   |
                                                   
                                                      
                                                         I
                                                      
                                                      
                                                         ij
                                                      
                                                   
                                                   <
                                                   0
                                                
                                             
                                          
                                          (
                                          
                                             
                                                λ
                                             
                                             
                                                i
                                             
                                          
                                          ∨
                                          
                                             
                                                λ
                                             
                                             
                                                j
                                             
                                          
                                          )
                                          |
                                          
                                             
                                                I
                                             
                                             
                                                ij
                                             
                                          
                                          |
                                          +
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   ∈
                                                   N
                                                
                                             
                                          
                                          
                                             
                                                λ
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                
                                                   ϕ
                                                   (
                                                   i
                                                   )
                                                   -
                                                   
                                                      
                                                         1
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            j
                                                            ≠
                                                            i
                                                         
                                                      
                                                   
                                                   |
                                                   
                                                      
                                                         I
                                                      
                                                      
                                                         ij
                                                      
                                                   
                                                   |
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              [
                              
                                 
                                    
                                       
                                          λ
                                       
                                       
                                          ̲
                                       
                                    
                                 
                                 
                                    α
                                 
                              
                              ;
                              
                                 
                                    
                                       
                                          λ
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    α
                                 
                              
                              ]
                           
                         is the interval of satisfaction degree for a possibility degree α.
                           Proposition 2
                           
                              The minimal global satisfaction degree using a Choquet integral with a 2-additive capacity measure for possibility degree α is obtained for the minimal satisfaction degree of each competence 
                              
                                 
                                    f
                                    (
                                    i
                                    )
                                    =
                                    
                                       
                                          
                                             
                                                λ
                                             
                                             
                                                i
                                                ,
                                                α
                                             
                                          
                                       
                                       
                                          ̲
                                       
                                    
                                    ∀
                                    i
                                    ∈
                                    {
                                    1
                                    ,
                                    …
                                    ,
                                    C
                                    }
                                 
                              .

The Choquet integral with a 2-additive capacity measure is an increasing function on f(i),∀i
                              ∊{1,…,
                              C} so the minimal value of Cμ
                              
                              ,
                              
                                 α
                              (f) noted Cμ
                              
                              ,
                              
                                 α
                              (f) is for f(i),∀i
                              ∊{1,…,
                              C}.□

From Proposition 2, we know that the lower bound appears when the satisfaction function is 
                           
                              
                                 
                                    
                                       
                                          λ
                                       
                                       
                                          c
                                       
                                    
                                 
                                 
                                    ̲
                                 
                              
                           
                         so the lower bound of the global satisfaction can be easily computed using Eq. (10) (with ∧=
                        min,∨=
                        max).
                           
                              (10)
                              
                                 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             μ
                                             ,
                                             α
                                          
                                       
                                    
                                    
                                       ̲
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ,
                                          j
                                          |
                                          
                                             
                                                I
                                             
                                             
                                                ij
                                             
                                          
                                          >
                                          0
                                       
                                    
                                 
                                 (
                                 
                                    
                                       
                                          
                                             λ
                                          
                                          
                                             i
                                             ,
                                             α
                                          
                                       
                                    
                                    
                                       ̲
                                    
                                 
                                 ∧
                                 
                                    
                                       
                                          
                                             λ
                                          
                                          
                                             j
                                             ,
                                             α
                                          
                                       
                                    
                                    
                                       ̲
                                    
                                 
                                 )
                                 
                                    
                                       I
                                    
                                    
                                       ij
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ,
                                          j
                                          |
                                          
                                             
                                                I
                                             
                                             
                                                ij
                                             
                                          
                                          <
                                          0
                                       
                                    
                                 
                                 (
                                 
                                    
                                       
                                          
                                             λ
                                          
                                          
                                             i
                                             ,
                                             α
                                          
                                       
                                    
                                    
                                       ̲
                                    
                                 
                                 ∨
                                 
                                    
                                       
                                          
                                             λ
                                          
                                          
                                             j
                                             ,
                                             α
                                          
                                       
                                    
                                    
                                       ̲
                                    
                                 
                                 )
                                 |
                                 
                                    
                                       I
                                    
                                    
                                       ij
                                    
                                 
                                 |
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          N
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             λ
                                          
                                          
                                             i
                                             ,
                                             α
                                          
                                       
                                    
                                    
                                       ̲
                                    
                                 
                                 
                                    
                                       
                                          ϕ
                                          (
                                          i
                                          )
                                          -
                                          
                                             
                                                1
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   ≠
                                                   i
                                                
                                             
                                          
                                          |
                                          
                                             
                                                I
                                             
                                             
                                                ij
                                             
                                          
                                          |
                                       
                                    
                                 
                              
                           
                        To build the lower bound of possibility distribution of the global satisfaction, we compute for each α -cut the lower bound of the global satisfaction degree (
                           
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          μ
                                          ,
                                          α
                                       
                                    
                                 
                                 
                                    ̲
                                 
                              
                           
                        ) using (Eq. (10) and Fig. 4
                        ).

From Section 4.2, we get a lower bound of the possibility distribution of the global satisfaction. For evaluating the candidate in a pessimistic manner, we choose to use the minimal expected utility of the possibility distribution of the global satisfaction. This bound is the Choquet integral of the global satisfaction using the necessity measure, i.e., formally, 
                           
                              
                                 
                                    C
                                 
                                 
                                    N
                                 
                              
                              (
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          μ
                                          ,
                                          α
                                       
                                    
                                 
                                 
                                    ̲
                                 
                              
                              )
                           
                        , where α is the variable ranging from 0 to 1, since 
                           
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          μ
                                          ,
                                          α
                                       
                                    
                                 
                                 
                                    ̲
                                 
                              
                              ⩽
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          μ
                                          ,
                                          α
                                          +
                                          δ
                                       
                                    
                                 
                                 
                                    ̲
                                 
                              
                              ∀
                              α
                              ∈
                              [
                              0
                              ;
                              1
                              -
                              δ
                              ]
                           
                         (with δ the step between two α-cuts).

We have 
                           
                              
                                 
                                    A
                                 
                                 
                                    α
                                 
                              
                              =
                              [
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          μ
                                          ,
                                          α
                                       
                                    
                                 
                                 
                                    ̲
                                 
                              
                              ;
                              +
                              ∞
                              [
                              so
                              
                              
                                 
                                    C
                                 
                                 
                                    N
                                 
                              
                              (
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          μ
                                          ,
                                          α
                                       
                                    
                                 
                                 
                                    ̲
                                 
                              
                              )
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    α
                                    =
                                    {
                                    0
                                    ,
                                    0
                                    +
                                    δ
                                    ,
                                    …
                                    ,
                                    1
                                    }
                                 
                              
                              [
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          μ
                                          ,
                                          α
                                       
                                    
                                 
                                 
                                    ̲
                                 
                              
                              -
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          μ
                                          ,
                                          α
                                          -
                                          δ
                                       
                                    
                                 
                                 
                                    ̲
                                 
                              
                              ]
                              N
                              (
                              s
                              ∈
                              [
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          μ
                                          ,
                                          α
                                       
                                    
                                 
                                 
                                    ̲
                                 
                              
                              ;
                              +
                              ∞
                              [
                              )
                           
                         with Cμ
                        
                        ,−
                        
                           δ
                        
                        =0. Moreover, N(Aα
                        )=1−
                        Π(Aα
                        )=1−
                        α. So CN
                         is computed using Eq. (11).
                           
                              (11)
                              
                                 
                                    
                                       C
                                    
                                    
                                       N
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          α
                                          =
                                          {
                                          0
                                          ,
                                          0
                                          +
                                          δ
                                          ,
                                          …
                                          ,
                                          1
                                          }
                                       
                                    
                                 
                                 (
                                 [
                                 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             μ
                                             ,
                                             α
                                          
                                       
                                    
                                    
                                       ̲
                                    
                                 
                                 -
                                 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             μ
                                             ,
                                             α
                                             -
                                             δ
                                          
                                       
                                    
                                    
                                       ̲
                                    
                                 
                                 ]
                                 (
                                 1
                                 -
                                 α
                                 )
                                 )
                              
                           
                        With 
                           
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          μ
                                          ,
                                          -
                                          δ
                                       
                                    
                                 
                                 
                                    ̲
                                 
                              
                              =
                              0
                           
                        .

The optimal candidate (ca
                        *
                        ∊
                        CA) is the candidate who maximises the minimum expected value of the Global satisfaction (CN
                        (ca)) (Eq. (12)).
                           
                              (12)
                              
                                 
                                    
                                       ca
                                    
                                    
                                       ∗
                                    
                                 
                                 =
                                 
                                    
                                       
                                          arg
                                          
                                          min
                                       
                                       
                                          ca
                                          ∈
                                          CA
                                       
                                    
                                 
                                 
                                    
                                       C
                                    
                                    
                                       N
                                    
                                 
                                 (
                                 ca
                                 )
                              
                           
                        
                     

In this section, we illustrate the method on an example with four candidates (ca
                        ∊{1,2,3,4}) for one job and five competences.

Even if competences are usually defined in relation with working activities, the literature on competence based assignment also considers the assignment of people to positions (see Table 1): positions and roles can indeed be considered as sets of types of activities. Let us consider that a leader is needed for a project related to software development, to be achieved in a limited amount of time. The considered “competences” (understood here in a broad sense) are the followings:
                              
                                 -
                                 Education level
                                       1
                                       An education level is not stricto sensu a competence, but it is clearly linked to “knowledge” and can be easily assessed, for instance through a diploma. It is therefore often considered both in industrial and academic works on the subject (see for instance Suleman and Suleman, 2012; Korkmaz, Gokcen & Cetinyoku, 2008 or Zemkova, 2008).
                                    
                                    
                                       1
                                     (denoted hereafter as “education”).

Know-how.

Leadership.

Ability for Risk assessment.

Ability for Quick decision-making.

The links between these competences (which will we described through interactions in the Choquet integral) can be qualitatively expressed as follows:
                              
                                 1.
                                 Education is only taken into account if the candidate has a low know-how (brought by experience).

Quick decision-making is needed, but Risk assessment becomes more critical if this competence is possessed at a high level, in order to prevent too impulsive decisions.

Leadership is not critical, and can be compensated by Know-how, which is considered as leading to recognition by the other members of team. On the other hand, a minimum level of Leadership is required from an inexperienced person.

A high Leadership may lead to arbitrary decisions, therefore the requirement on Risk assessment will be reinforced by a high Leadership.

The qualitative weights of the competences for the assessment of the candidates are as follows:
                              
                                 -
                                 high importance: Education/Know how,

average importance: Quick decision, Risk assessment,

secondary importance: Leadership.

The required and possessed competences are supposed to be assessed using the basic framework described in Fig. 5
                           , the functions being fuzzy constraints for the required competences and possibility distributions for the possessed ones, on a scale between 0 and 5. The functions are defined by trapezoidal fuzzy sets with linguistic labels “weak, low, average, good, very good, high”.

Some flexibility for describing the required or possessed competences are allowed by linguistic modifiers such as:
                              
                                 -
                                 “at least x”, expressed by a fuzzy set (x
                                    −1; x; x; 5) (see “at least 3” and “at least 4” on Fig. 5).

“x or more”, defined here as an interval [x,5], i.e. a trapeze (x; x; 5; 5) (see “4 or more” in Fig. 5).

“nearly x” (x
                                    −0.5; x; x; x).

According to these labels, the levels of the required competences have been chosen as:
                              
                                 -
                                 Education: “at least 4”=(3; 4; 5; 5).

Know-how: “3 or more”=(3; 3; 5; 5).

Leadership: “good”=(2; 3; 3; 4).

Risk assessment: “at least 3”=(2; 3; 5; 5).

Quick decision making: “3 to 4”=(2; 3; 4; 5).

It can be noticed that possessing Leadership and Quick decision-making competences at a higher level than required will be penalised (otherwise, it would have been possible to use constraints like “at least x” or “x or more”).

Choosing weights of criteria in multi-criteria decision-making is a subject which has often been addressed in the literature. In that purpose, a very successful approach is for instance AHP (Analytic Hierarchy Process, (Saaty, 1980)): pairwise comparison matrices are built by the user, resulting in a hierarchy of criteria and sub criteria. Once this hierarchy has been built, the method allows to identify consistent elementary weights for each criterion. This method has for instance been used in the field of competence-based assignment in Korkmaz et al. (2008) and Huang et al. (2009)). When using the Choquet integral, how to choose weights and interactions according to the decision maker’s preferences is for instance explained in details in Grabisch and Roubens (2000). Two methods are suggested, based on examples given to a decision maker, like in AHP. The first one uses the minimisation of the squared error: it is supposed that on l experiences, the decision maker can give a numerical score to each criterion and to his Global satisfaction. A fuzzy measure is then computed, which minimises the total squared error of the model. Nevertheless, the solution is not unique when there is too few data, and on the contrary, the dimensions of the vectors and matrices grow exponentially when many examples are considered. Heuristic methods have so been investigated: in Grabisch and Roubens (2000) is described the HLMS algorithm (Heuristic Least Mean Squares), based on the principle that in absence of any information, the most non-arbitrary (least specific) way of aggregation is the arithmetic mean, thus a Choquet integral with respect to an additive equidistributed fuzzy measure.

Since the focus is here on robust allocation, and not on weights identification, already addressed by the listed references, we suppose that the following importances have been identified: (Education)=0.15, ϕ (Know how)=0.3, ϕ (Leadership)=0.1, (Risk assessment)=0.25, ϕ (Quick decision)=0.2.

The condition 
                              
                                 ϕ
                                 (
                                 i
                                 )
                                 -
                                 
                                    
                                       1
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       ≠
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       I
                                    
                                    
                                       ij
                                    
                                 
                                 |
                                 ⩾
                                 0
                              
                            (see Eq. (9)) means that the influence of a criterion alone in the final aggregation (not taking into account its interactions) is its importance decreased by the half-sum of its interactions. This means that choosing its interactions as twice the importance of a criterion will make that it has no influence alone. The following interaction indexes have been defined in our example:
                              
                                 -
                                 
                                    I
                                    Education,Know-how
                                    =−0.3.


                                    I
                                    Know how, Leadership
                                    =−0.1.


                                    I
                                    Leadership, Risk Assessment
                                    =0.1.


                                    I
                                    Risk Assessment, Quick Decision
                                    =0.2.

Using these data, it is possible to calculate the weights of the linear part of the Choquet integral 
                              
                                 ϕ
                                 (
                                 i
                                 )
                                 -
                                 
                                    
                                       1
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       ≠
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       I
                                    
                                    
                                       ij
                                    
                                 
                                 |
                              
                            (see Eq. (9)).

Imp(Education)=0, Imp(Know-how)=0.1, Imp(Leadership)=0, Imp(Risk Assessment)=0.1, Imp(Quick Decision)=0.1.

This modelling framework can be interpreted as follows:
                              
                                 -
                                 Know-how alone has a weight (importance) of 0.1 in the final result, while Education alone is not taken into account.

Education and Know-how: the best satisfaction between Education and Know-how is considered with a weight 0.3 (I
                                    Ed,Ex
                                    =−0.3). It leads to take into account Education only if it is better satisfied than Know-how.

These two statements provide a possible model for requirement 1 (see Section 4.4.1).
                              
                                 -
                                 Risk assessment and Quick decision making benefit from a strong reinforcement: their weight as standalone criteria is high (0.1) but their common satisfaction has also a weight of 0.2 through their positive interaction (requirement 2).

Leadership is not important alone (Importance: 0) but the best satisfied between Leadership and Know-how is considered with an importance of 0.1 (requirement 3).

Risk assessment has a high standalone influence (importance=0.1) and the conjunction between Risk assessment and Leadership is favoured by a high interaction index (0.2) (requirement 4).

Other possible choices of the parameters could address different requirements. Examples dealing with Education and Know-how are suggested in Table 1, in order to illustrate the capacity of this modelling framework to express quite subtle considerations.

All the interactions not mentioned in Table 2
                            are here set to 0.

In case 1, Education and Know-how are considered separately, therefore a candidate has to satisfy the two constraints for getting a good global assessment: the candidate needs a good diploma and a great know-how.

In case 2, the best satisfied of the two criteria has a great influence on the result (weight 0.3) whereas the two elementary criteria have similar impacts alone (0.15). Know-how or Education is required.

In case 3, Know-how is only taken into account if it is better satisfied than the Education criterion, since its impact as a standalone criterion is null.

In case 4, the Education is only taken into account if it is greater than Know-how.

In case 5, Know-how and Education are in positive interaction: if both the Education and Know-how are high, these criteria have a very strong influence on the result, through their elementary weights of 0.15 plus their strong interaction (weight 0.3). A good candidate must so have both the required education and required know-how.

@&#RESULTS@&#

Let us remind the considered weights and interactions (see previous section):

Imp(Edu)=0, Imp(KnowHow)=0.1, Imp(Lead)=0, Imp(RiskAss)=0.1, Imp(Quick Dec)=0.1.


                           I
                           Edu,KnowHow
                           =−0.3, I
                           KnowHow,Lead
                           =−0.1, I
                           Lead,RiskAss
                           =0.1, I
                           RiskAss,QuickDec
                           =0.2.

Within the possibilistic framework, in spite of what may suggest “good sense”, a candidate who would possess competences similar to the required ones does not provide maximum satisfaction. In our example, such candidate would have a global satisfaction of 0.6875. The reason is that the possessed competences are known through possibility distributions: if the possibility distribution of a possessed competence is denoted by the same fuzzy set than the fuzzy constraint expressing the required competence (for instance a triangle like “good” (see Fig. 5)), the “real” (ignored) value of the competence lc
                            may for instance be in the ascending front of the triangle. So, there is a (low) possibility that the fuzzy constraint has a poor satisfaction.

The maximum satisfaction (i.e. 1) would be provided by a candidate whose possessed competences are necessarily fully consistent with the fuzzy constraints, i.e. the possibility distributions of the possessed competences are included in the kernel of the fuzzy sets denoting the requirements.

Let us consider four candidates whose possessed competences, together with the requirements, are given in Table 3
                            and graphically illustrated in Fig. 6
                           . One of the interests of fuzzy logic and possibility theory is illustrated here: it is possible to mix fuzzy sets (e.g. “Good”), intervals (“3 or more”) and crisp data (“4”) in the same model. Five α-cuts have been performed for computing the degrees of satisfaction, with α
                           =0, 0.25, 0.5, 0.75, 1. More accurate results can sometimes be obtained with a more precise discretisation.

The global satisfaction of each candidate (results of Eq. (10), Section 4.3) is shown in Table 4
                            for several cases illustrating the influence of interactions on the results (see Fig. 7
                            for a graphical representation):
                              
                                 -
                                 no interaction (only the importances are considered),

all interactions listed in the beginning of Section 4.4.3 are considered,

strong interactions (only I
                                    Edu,KnowHow and, I
                                    RiskAss, QuickDec are considered).

Without any interactions, Eq. (9) becomes comparable to a weighted sum, often used in comparable studies (see Section 2.3). In that case, the weights of the elementary criteria are equal to their importance Φ(i). The ranking is 2, 1, 3, 4, the two first ones and the two last ones being quite close (left bars in Fig. 7): candidate 2 has the worst satisfaction on Leadership, but all the other candidates have a possibility of null satisfaction for this competence, so it does not work against him (only the minimum value is considered). He has the maximum satisfaction for Education, Know-how and Quick decision. Only candidate 3 is better for Risk assessment, but candidate 3 has a null satisfaction concerning Education. Like candidate 3, candidate 1 has a null satisfaction for three competences, but the degrees of satisfaction of the two others are better. Candidate 4 is close to candidate 3: he has a null possibility of satisfaction for three competences, but has better minimum satisfaction degrees than 3 for the two remaining ones.

If all the interactions are taken into account, the ranking is modified: 2 and 3 are the best candidates, followed by 1 then 4. The appreciation on candidate 3 is improved since his poor satisfaction concerning Education is compensated by his Know-how (there is now an “or” between Education and Know-how). Candidates 2 and 3 have inversed satisfactions for “Risk assessment” and “Quick decision”: the result is the same since, according to the considered interactions, the weights of “Risk assessment” and “Quick decision making” being both 0.1 (let us remind that the weight of criterion i in presence of interactions is 
                              
                                 
                                    
                                       Imp
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 ϕ
                                 (
                                 i
                                 )
                                 -
                                 
                                    
                                       1
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       ≠
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       I
                                    
                                    
                                       ij
                                    
                                 
                                 |
                              
                           ).

If only the “strong” interactions are taken into account (I
                           Edu,KnowHow and I
                           RiskAss, QuickDec), the ranking is again different with 3, 2, 1 and 4. The context is globally the same than in previous paragraph, but taking into account only the “strong” interactions, the weight of Risk assessment is now 0.15 while the weight of Quick decision making is 0.1. Since Cand. 3 is better than Cand. 2 for Risk assessment, he gets a slightly higher evaluation and becomes the best candidate.

This example illustrates that quite different results may be obtained when interactions between criteria are taken into account, especially because a “robust” approach has been chosen: the degrees mentioned in Table 3 denote the minimum satisfaction provided by the candidates, depending on the uncertainty on the evaluation of their possessed competences.

In this section is shown how to complement the method for being able to address the problem of allocating a set of candidate to a set of jobs. This problem was for instance considered in Herrera, Lopez, Mendana, and Rodriguez (1999) or Korkmaz, Gokcen & Cetinyoku (2008) with classical optimisation approaches. We apply here the aggregation method presented in Section 4 to each couple (job, candidate), then solve a Mixed-Integer Programming model in which the objective function is to maximise, from the worst to the best, the global competence of a candidate allocated to a job (in order to provide the required robustness). We illustrate hereafter what may bring a robust-optimisation approach, and how interactions may again allow to improve the expressivity of the models. In consistence with the method used for solving the previous problem, we suggest in that purpose to use the leximin criterion to find a robust allocation of candidates.

Let us consider as a starting point that the compatibility of C candidates has been assessed for J jobs using the method explained in Section 4. How to describe then optimise the allocation of the candidates to the jobs is shown in next sections.

Let us denote as:
                           
                              •
                              
                                 xc,j
                                 : a binary variable which takes the value 1 if candidate c is allocated to the job j;


                                 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             Nc
                                             ,
                                             j
                                          
                                       
                                    
                                 : the considered utility (benefice) function which is the crisp evaluation CN
                                  (Section 4.3) of a candidate c for a job j;


                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             c
                                          
                                       
                                       (
                                       x
                                       )
                                       =
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             1
                                          
                                          
                                             J
                                          
                                       
                                       
                                          
                                             x
                                          
                                          
                                             c
                                             ,
                                             j
                                          
                                       
                                       ×
                                       
                                          
                                             C
                                          
                                          
                                             
                                                
                                                   N
                                                
                                                
                                                   c
                                                   ,
                                                   j
                                                
                                             
                                          
                                       
                                    
                                 : the utility of the candidate c for the given allocation (xc,1
                                 ,
                                 xc,2
                                 ,…,
                                 xc,J
                                 ).

The problem is to find the allocation of c candidates to j jobs that minimises the utility function, i.e. 
                           
                              
                                 
                                    max
                                 
                                 
                                    x
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    c
                                    =
                                    1
                                 
                                 
                                    C
                                 
                              
                              
                                 
                                    F
                                 
                                 
                                    c
                                 
                              
                              (
                              x
                              )
                              =
                              
                                 
                                    max
                                 
                                 
                                    x
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    c
                                    =
                                    1
                                 
                                 
                                    C
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    j
                                    =
                                    1
                                 
                                 
                                    J
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    c
                                    ,
                                    j
                                 
                              
                              ×
                              
                                 
                                    C
                                 
                                 
                                    
                                       
                                          N
                                       
                                       
                                          c
                                          ,
                                          j
                                       
                                    
                                 
                              
                           
                         under the following constraints:
                           
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                    
                                       
                                          
                                             
                                                
                                                   (
                                                   1
                                                   )
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            c
                                                            =
                                                            1
                                                         
                                                         
                                                            C
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         c
                                                         ,
                                                         j
                                                      
                                                   
                                                   ⩽
                                                   1
                                                   ∀
                                                   j
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   J
                                                   }
                                                
                                             
                                             
                                                
                                                   (
                                                   2
                                                   )
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            j
                                                            =
                                                            1
                                                         
                                                         
                                                            J
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         c
                                                         ,
                                                         j
                                                      
                                                   
                                                   =
                                                   1
                                                   ∀
                                                   c
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   C
                                                   }
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         c
                                                         ,
                                                         j
                                                      
                                                   
                                                   ∈
                                                   {
                                                   0
                                                   ,
                                                   1
                                                   }
                                                   ∀
                                                   c
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   C
                                                   }
                                                   ,
                                                   j
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   J
                                                   }
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        Constraint (1) means that one and only one candidate c can be allocated to a job j. Constraint (2) means that a job j is allocated to only one candidate c.

From the evaluation of the satisfaction provided by each candidate for each job, as described in previous sections, we propose an optimisation model addressing the allocation of c candidates to j jobs using the leximin ranking criteria (see Definition 7). This criterion has been chosen because it maximises the minimal satisfaction for each job, i.e. no compensation between two jobs is accepted, and each job has to be necessarily satisfied. This problem (
                           LexAlloc
                        ) can be written as follows:
                           
                              
                                 LexAlloc
                                 :
                                 
                                    
                                       max
                                    
                                    
                                       x
                                    
                                 
                                 
                                 Leximin
                                 (
                                 Fc
                                 (
                                 x
                                 )
                                 )
                              
                           
                        
                        
                           
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                    
                                       
                                          
                                             
                                                
                                                   (
                                                   1
                                                   )
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            c
                                                            =
                                                            1
                                                         
                                                         
                                                            C
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         c
                                                         ,
                                                         j
                                                      
                                                   
                                                   ⩽
                                                   1
                                                   
                                                   ∀
                                                   j
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   J
                                                   }
                                                
                                             
                                             
                                                
                                                   (
                                                   2
                                                   )
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            j
                                                            =
                                                            1
                                                         
                                                         
                                                            J
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         c
                                                         ,
                                                         j
                                                      
                                                   
                                                   =
                                                   1
                                                   
                                                   ∀
                                                   c
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   C
                                                   }
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         c
                                                         ,
                                                         j
                                                      
                                                   
                                                   ∈
                                                   {
                                                   0
                                                   ,
                                                   1
                                                   }
                                                   
                                                   ∀
                                                   c
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   C
                                                   }
                                                   ,
                                                   j
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   J
                                                   }
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           Definition 7
                           
                              Barbera & Jackson, 1988
                           


                           Let 
                                 
                                    
                                       
                                          u
                                       
                                       
                                          j
                                       
                                    
                                    (
                                    
                                       
                                          d
                                       
                                       
                                          ¯
                                       
                                    
                                    )
                                 
                               be the satisfaction of decision 
                                 
                                    
                                       
                                          d
                                       
                                       
                                          ¯
                                       
                                    
                                 
                               for criterion 
                                 
                                    j
                                    ∈
                                    {
                                    1
                                    ,
                                    …
                                    ,
                                    m
                                    }
                                 
                               and 
                                 
                                    a
                                    ∈
                                    [
                                    0
                                    ,
                                    1
                                    ]
                                 
                              . We define 
                                 
                                    J
                                    (
                                    a
                                    ,
                                    
                                       
                                          d
                                       
                                       
                                          ¯
                                       
                                    
                                    )
                                    =
                                    {
                                    j
                                    |
                                    
                                       
                                          u
                                       
                                       
                                          j
                                       
                                    
                                    (
                                    
                                       
                                          d
                                       
                                       
                                          ¯
                                       
                                    
                                    )
                                    ⩽
                                    a
                                    }
                                 
                               and 
                                 
                                    |
                                    J
                                    (
                                    a
                                    ,
                                    
                                       
                                          d
                                       
                                       
                                          ¯
                                       
                                    
                                    )
                                    |
                                 
                               the cardinality of 
                                 
                                    J
                                    (
                                    a
                                    ,
                                    
                                       
                                          d
                                       
                                       
                                          ¯
                                       
                                    
                                    )
                                 
                              . We write 
                                 
                                    
                                       
                                          u
                                       
                                       
                                          ¯
                                       
                                    
                                    
                                       
                                          ≻
                                       
                                       
                                          Lm
                                       
                                    
                                    
                                       
                                          v
                                       
                                       
                                          ¯
                                       
                                    
                                 
                               if decision 
                                 
                                    
                                       
                                          u
                                       
                                       
                                          ¯
                                       
                                    
                                 
                               is preferred to decision 
                                 
                                    
                                       
                                          v
                                       
                                       
                                          ¯
                                       
                                    
                                 
                               using the leximin criterion defined as follows:
                                 
                                    
                                       
                                          
                                             u
                                          
                                          
                                             ¯
                                          
                                       
                                       
                                          
                                             ≻
                                          
                                          
                                             Lm
                                          
                                       
                                       
                                          
                                             v
                                          
                                          
                                             ¯
                                          
                                       
                                       ↔
                                       ∃
                                       
                                       a
                                       
                                       such
                                       
                                       that
                                       
                                       |
                                       J
                                       (
                                       a
                                       ,
                                       
                                          
                                             u
                                          
                                          
                                             ¯
                                          
                                       
                                       )
                                       |
                                       <
                                       |
                                       J
                                       (
                                       a
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             ¯
                                          
                                       
                                       )
                                       |
                                       &
                                       
                                       ∀
                                       b
                                       <
                                       a
                                       |
                                       J
                                       (
                                       b
                                       ,
                                       
                                          
                                             u
                                          
                                          
                                             ¯
                                          
                                       
                                       )
                                       |
                                       =
                                       |
                                       J
                                       (
                                       b
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             ¯
                                          
                                       
                                       )
                                       |
                                    
                                 
                              To solve this problem, we first formulate the criterion leximin as an aggregation function. In that purpose, we use the fact that the OWA aggregator can model the leximin by giving non-increasing weights with large step: wi
                              
                              =
                              δwi
                              
                              +1∀i
                              ∊{1,…,
                              m
                              −1} and wi
                              
                              >0∀i
                              ∊{1,…,
                              m}, with δ a large number (Ogryczak & Sliwinski, 2003). In our problem, the objective function can be rewritten as follows:
                                 
                                    
                                       
                                          
                                             
                                                max
                                             
                                             
                                                x
                                             
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                C
                                             
                                          
                                       
                                       
                                          
                                             W
                                          
                                          
                                             i
                                          
                                       
                                       
                                          
                                             F
                                          
                                          
                                             (
                                             c
                                             )
                                          
                                       
                                       (
                                       x
                                       )
                                    
                                 
                              with (c) a permutation of c so that 0⩽
                              F
                              (1)(x)⩽
                              F
                              (2)(x)⩽…⩽
                              F
                              (
                              
                                 C
                              
                              )(x).

Then, we need to linearise the objective function. A clever linearisation has been proposed in Ogryczak and Sliwinski (2003)) under the assumption that the weights in OWA are non-increasing. Using this assumption, we need for linearising our problem “
                           LexAlloc”
                         to add three new decision variables rk
                        , di,k and Ci
                        , and to transform the OWA in a new objective function and two constraints (1) and (2) (with Wk
                        
                        =
                        wk
                        
                        −
                        wk
                        
                        +1):
                           
                              
                                 max
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          K
                                       
                                    
                                 
                                 (
                                 
                                    
                                       kW
                                    
                                    
                                       k
                                    
                                 
                                 
                                    
                                       r
                                    
                                    
                                       k
                                    
                                 
                                 )
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          K
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          I
                                       
                                    
                                 
                                 (
                                 
                                    
                                       W
                                    
                                    
                                       k
                                    
                                 
                                 
                                    
                                       d
                                    
                                    
                                       i
                                       ,
                                       k
                                    
                                 
                                 )
                              
                           
                        
                        
                           
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                    
                                       
                                          
                                             
                                                
                                                   (
                                                   1
                                                   )
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         i
                                                         ,
                                                         k
                                                      
                                                   
                                                   ⩾
                                                   
                                                      
                                                         r
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                   
                                                      
                                                         -
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   
                                                   ∀
                                                   i
                                                   ,
                                                   k
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   m
                                                   }
                                                
                                             
                                             
                                                
                                                   (
                                                   2
                                                   )
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            j
                                                            =
                                                            1
                                                         
                                                         
                                                            J
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         ij
                                                      
                                                   
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         ij
                                                      
                                                   
                                                   =
                                                   0
                                                   ,
                                                   
                                                   ∀
                                                   i
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   C
                                                   }
                                                
                                             
                                             
                                                
                                                   (
                                                   3
                                                   )
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            i
                                                            =
                                                            1
                                                         
                                                         
                                                            C
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         i
                                                         ,
                                                         j
                                                      
                                                   
                                                   ⩽
                                                   1
                                                   ,
                                                   
                                                   ∀
                                                   j
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   J
                                                   }
                                                
                                             
                                             
                                                
                                                   (
                                                   4
                                                   )
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            j
                                                            =
                                                            1
                                                         
                                                         
                                                            J
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         i
                                                         ,
                                                         j
                                                      
                                                   
                                                   =
                                                   1
                                                   ,
                                                   
                                                   ∀
                                                   i
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   C
                                                   }
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         i
                                                         ,
                                                         j
                                                      
                                                   
                                                   ∈
                                                   {
                                                   0
                                                   ,
                                                   1
                                                   }
                                                   
                                                   ∀
                                                   i
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   C
                                                   }
                                                   ,
                                                   j
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   J
                                                   }
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         j
                                                         ,
                                                         i
                                                      
                                                   
                                                   ⩾
                                                   
                                                   ∀
                                                   i
                                                   ,
                                                   j
                                                   ∈
                                                   {
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   m
                                                   }
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        The result of this linearisation makes that the problem can be efficiently solved using a MIP (Mixed Integer Programming) solver for small sizes (in this paper we use the solver GLPK
                           2
                           
                              http://www.gnu.org/software/glpk/.
                        
                        
                           2
                        ). For larger problems, it is for instance possible to use the algorithm proposed by Dubois and Fortemps (1999) for solving flexible constraints satisfaction problems.

The example is based on the one suggested in Herrera et al. (1999). Let us first point out the main differences between the two approaches: Herrera et al. suggest linguistic labels for describing the possessed competences, but no clear distinction is made between the levels of the required competences and the weights of the competences in the aggregation. On the other hand, relationships between jobs, used to know which job should get the best candidate in case of conflict, are considered, which are not taken into account in the present study. As a consequence, the comparison between required and possessed competences takes into account imprecision (the compatibility between two fuzzy sets is assessed), and not uncertainty like in our approach, where the required level of a competence for a job is an utility function, whereas the level of competence of a candidate is known through a distribution of possibility. Therefore, a strict comparison of the results of the two studies has no sense.

The competence levels are modelled by nine triangular fuzzy sets on a scale between 0 and 1. This choice makes that a fuzzy set is for instance denoted (0.625, 0.75, 0.875) (“Fairly high” in Herrera et al. (1999)). In order to simplify the notation, let us consider these levels of competences on a different scale, as suggested in Fig. 8
                        .

A consequence of Herrera’s model is that over-competences are penalised (see Section 3.2). Since this is seldom the case in real situations, we have chosen to modify these levels by using the “at least” operator, as described in Section 3.2. For instance, “moderate” denoted by (3, 4, 4, 5) becomes using our notation “at least moderate” (3, 4, 8, 8).

Eight candidates and five jobs are considered in the original example. For simplification, we have only kept here c
                        =4 candidates and j
                        =4 jobs although the method described in previous section can be applied whatever c and j. Similarly, we have only kept five competences per job whereas Herrera et al. describe one of the jobs with six competences.

The competences required by the jobs are listed in Table 5
                         (all of them being modified by the operator “at least”) together with the weight of each competence for a given job.

In order to illustrate that taking into account interactions between competences may make some difference in the final assignment, we have introduced the following interactions, which are of course not in Herrera’s example:

Manager:
                           
                              -
                              Directing-Authorising/delegating: −0.3, expressing that authority or delegation are two possible solutions for managing a team.

Fixing objectives-strategic vision: 0.3: expressing the synergy between being able to have a strategic vision and a good aptitude in fixing objectives.

Administrative officer:
                           
                              -
                              Multitasking-flexibility: −0.2. The idea is here that being able to switch from one activity to another is a way to perform several tasks at the same time.

Teamwork-flexibility: 0.2, showing that flexibility allows to be better in team working.

Administrative clerk:
                           
                              -
                              Personal charm-customer orientation: −0.3: personal charm is considered here as an alternative to customer orientation for performing administrative tasks in a teamwork context.

The set of possessed competences suggested in (Herrera et al., 1999) and listed in Table 6
                         has been considered in this illustrative example.

We have considered here the two cases (with/without interactions) and have compared on both cases the “robust” allocation we suggest to the optimisation of the average level of satisfaction provided by the allocation.

In Table 7
                         is shown the lower bound of the global possibility distribution of satisfaction (result of Eq. (10)) for each candidate and for each -cut, regarding the position of Branch Manager, without interaction. It can be seen in Table 7 that all the candidates have a null satisfaction for “Directing”. All candidates have a minimum satisfaction equal to 0 for Authorising/delegating (even if it is only for =1 for C1). C1, C3 and C4 have a full satisfaction for Integrity and Fixing objectives while only C4 has a full satisfaction for Strategic vision; among the others, only C1 has satisfaction levels different from 0 for the same competence. The difference between C1 and C3 comes from a better satisfaction of Authorising/delegating and Strategic vision by C1.

The matching between each individual and each job, without interactions, is provided in Table 8
                        .

The problem is then to find the best allocation of candidates to positions. Using the optimisation of the average satisfaction, the optimal assignment provided by a solver is:
                           
                              •
                              Branch manager: C4 (satisfaction: 0.7).

Supervisor: C3 (satisfaction: 0.737).

Admin. Officer: C2 (satisfaction: 0.312).

Admin. Clerk: C1 (satisfaction: 0.5).

The robust assignment provided by the suggested method (see 5.2) is:
                           
                              •
                              Branch manager: C3 (satisfaction: 0.4).

Supervisor: C2 (satisfaction: 0.4).

Admin. Officer: C4 (satisfaction: 0.537).

Admin. Clerk: C1 (satisfaction: 0.5).

The first criterion gives an average satisfaction of 0.487 (0.459 for the robust optimisation) but the worst satisfaction is 0.312 in the first case, and 0.4 for the robust optimisation: the satisfaction provided by the worst case has indeed been maximised.

Let us now consider the case when the interactions are taken into account. The minimum of the utility function for each competence is the same than in the case without interaction (see Table 8). In Table 9
                         is shown the result of the application of Eq. (9) (calculation of the satisfaction of each competence and interaction, then calculation of the lower bound of the global possibility distribution of satisfaction, through the value of the Choquet integral (Eqs. (9) and (10)) (calculation of the worst possible satisfaction under uncertainty).

In comparison with the case without interaction, it can be seen that the main difference comes from C3 who is now less compatible with the work of Branch Manager, since the weight of Fixing objectives alone has considerably decreased (from 0.2 to 0.05) because of a high interaction with Strategic vision. The matching between the candidates and all the jobs, with interactions between competences, is shown in Table 10
                        .

Using the optimisation of the average satisfaction, the optimal assignment provided by the solver GLPK is:
                           
                              •
                              Branch manager: C4 (satisfaction: 0.7).

Supervisor: C3 (satisfaction: 0.737).

Admin. Officer: C2 (satisfaction: 0.325).

Admin. Clerk: C1 (satisfaction: 0.65).

The robust assignment provided by the method is:
                           
                              •
                              Branch manager: C4 (satisfaction: 0.7).

Supervisor: C2 (satisfaction: 0.4).

Admin. Officer: C1 (satisfaction: 0.575).

Admin. Clerk: C3 (satisfaction: 0.518).

The first criterion gives an average satisfaction of 0.603 (0.548 for the robust optimisation) but the worst satisfaction is 0.325 while it is 0.4 for the robust optimisation: again, the satisfaction provided by the worst case has been maximised.

@&#CONCLUSION@&#

Job assignment using competences is an optimisation problem that heavily depends on subjective knowledge concerning the required competences (nature and level) but also on knowledge pervaded by uncertainty, like the assessment of the competences possessed by an actor. In that context, two main original proposals have been made in this article, for taking into account (i) the possible interactions between competences, and (ii) the uncertainty on the evaluation of competence levels.

Modelling the competences required by a job is indeed a complex task, becoming rapidly impossible if the user tries to be exhaustive instead of focusing on critical competences, i.e. those being at the same time important for performing the job and rare. Additionally, building a referential of competences may have negative side effects: indeed, the person who defines the framework models his own beliefs on the qualities required for performing a task. This may result in a “standardised” view of competences, which is always dangerous in the field of Human Resource Management. In reality, different competences may lead to similar results, especially in management tasks. In order to address this problem, we have suggested the use of the Choquet integral as a mean to model alternatives between competences using negative interactions. An additional interest is that positive interactions also allow to model “synergies” between competences, which are certainly more rare but deserve to be better studied and modelled. It has been shown in this article that realistic interactions may significantly influence the result of an allocation. Nevertheless, we only provide here a tool for modelling interactions: identifying relevant interactions in a real context remains a complex problem, which deserves attention. Especially, it has been shown that choosing the interactions requires a good understanding of their mathematical processing (e.g. because of the influence between interactions and weight of each competence). This is certainly a difficulty in real applications. Therefore, a method allowing an end-user to empirically define interactions on the base of observations on the field is certainly required, similar to AHP for choosing weights between criteria (Saaty, 1980).

The point linked to the uncertainty of the assessments is seldom taken into account in previous studies, and has brought us to suggest a “robust optimisation” approach aiming at optimising the worst satisfaction provided by the assignment, in order to minimise the risk taken. In real applications, we think that classical and robust optimisation could be combined for providing a more relevant decision support to the decision maker: the results of robust optimisation could be used as a measure of the risk taken if the “optimal” allocation is adopted. In that purpose, it would be interesting to provide not only the minimum satisfaction but also a distribution of possibility attached to each level of satisfaction.

Another perspective is in the transposition of this framework to other domains, like supplier selection in the context of supply chain management: in that case, various types of collective competences should be formalised, e.g. competences linked to the manufacturing of the products but also to the service to the customer or to flow management capabilities. This induces new problems both at the modelling level and on the type of “optimisation” needed.

@&#REFERENCES@&#

