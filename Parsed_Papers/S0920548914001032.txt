@&#MAIN-TITLE@&#Service-oriented implementation model for smart transducers network

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Implementation model for service-oriented smart transducers network is developed.


                        
                        
                           
                           IEEE 1451 Web services are implemented on embedded platform.


                        
                        
                           
                           Data processing applications are presented in form of Web service providers.


                        
                        
                           
                           Central server support for network configuration and data exchange is provided.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Service Oriented Architecture

Smart Transducer Web Services

Virtual Transducer

IEEE 1451 Smart Transducer

Web Service

@&#ABSTRACT@&#


               
               
                  This paper describes a new implementation model for the service-oriented smart transducers network based on the IEEE 1451 Web Services. The model enables simple service dislocation and addition of new functionalities in Service Oriented Architecture (SOA) network. Presented architectural organization supports new service-oriented network entities in addition to standard IEEE 1451 smart transducers. The entities such as particular transducer services and functionalities, processing applications and algorithms, and set of I/O devices are supported in the form of service providers managed by a central server. The entities are modeled as virtual transducers incorporated in the service-oriented network, and analysis on how this architectural change affects the smart transducer design constraints is given. The case study of a smart transducer network design in form of automated configuration and data exchange between ARM-based smart transducer interface module, central server and dislocated virtual transducer is presented.
               
            

@&#INTRODUCTION@&#

Transducers play an important role in applications in science and industry as they can be used for monitoring and controlling physical phenomena. In general, transducer may be either a sensor or an actuator; where sensor is used to transform a parameter being measured to an electrical signal, while actuator takes a physical action based on a received electrical signal. Reading sensors (or writing to actuators) is made easier to some extent with introduction of digital interfaces in a way that it is possible to establish an efficient system communication using standard wireless transceivers or wired serial interfaces. Device that integrates sensors/actuators, signal conditioning and amplification circuits, AD/DA converters, a processing unit,and a communication interface is known as smart transducer [1]. It is considered to be a small, compact hardware/software unit where processing application can be implemented using a microcontroller with associated software. Also, computer networking has been used in transducer systems for more than ten years, resulting in a common platform for flexible installation and maintenance of smart transducers. Contemporary microcontrollers with network support are able to integrate the majority of smart transducer building blocks, as will be explained later in this work.

In order to make the smart transducer manufacturing more consistent, regulatory bodies made a joint effort with industry to propose the IEEE 1451 family of standards [2]. Specification marked as IEEE 1451.0 describes the common features of smart transducers: common functions, communication protocols, and Transducer Electronic Data Sheets (TEDS). Smart transducer networking is also supported by the standard, but in particular, proposed interfaces do not address the network interoperability problem. An example of support for the IEEE 1451 devices is presented in [3], as a hardware/software co-design platform based on FPGA. However, presented solution does not provide a support for the efficient network data exchange. Interoperability can be improved using the Service Oriented Architecture (SOA) inside the smart transducers network. SOA can be implemented by means of Web service technology where each service is wrapped around particular IEEE 1451.0 smart transducer function, as described in [4]. This way, client application communicates with smart transducer by querying its services over the network. Message format specification is written in XML using Web Service Description Language (WSDL). Using Web services in real time scenarios such as environmental monitoring or intelligent transportation systems (ITS) represents an emerging trend [5,6]. This way, application component can publish its operations and be easilyintegrated in a distributed environment. Applying Web services to smart transducers represents a new paradigm known as Smart Transducer Web Services (STWS) [7].

As a part of the Open Geospatial Consortium-Sensor Web Enablement (OGC-SWE) initiative, set of standard interfaces are defined for accessing sensor data in a network. Study [8] proposes architectural design of a real-time environmental sensor network based on OGC-SWE standards. In this case data are easily accessible at the network level, but problem of getting data from physical devices and their efficient injection into the network is not solved.

STWS services can be used for efficient sensor data access and data transfer towards OGC-SWE applications as shown in prototype [4]. The prototype does not solve a problem of embedded Web services implementation. Embedded smart transducer that integrates Web services is able to communicate directly with its service client over the network, without intermediary implementation.

Ice detection system for road monitoring is described in [9]. Innovative ice sensor and salinity sensor are designed, and ice forecasting methods are presented together with experimental results. Interoperability between sensor devices and forecasting algorithms is not particularly taken into account.

This paper proposes new architectural changes for improving interoperability of the entities in smart transducers network and simplifying its implementation. Presented concept of the IEEE 1451 services implementation and data exchange in smart transducer network enables smart transducer design on small-memory embedded platform with limited processing resources through migration of services from embedded to general purpose platform. Virtual transducers provide a flexible platform for implementationof the dislocated processing application, including both IEEE 1451 and application specific functionalities. This way, it is possible to reduce hardware requirements of embedded system and optimize its power consumption.

In this paper, we build on the STWS interoperability potential [7], which offers a uniform way of accessing data as interface is once established by WSDL. We go one step further and introduce a new entity behind the already defined Web services. To achieve symmetry between transducers and their applications, we introduce a concept of virtual transducers, similar as in [10]. Hence, virtual smart transducer is a data processing application equipped with STWS interface, but rather acts as a STWS service producer instead of a common consumer. This setup requires a central authority with STWS client interface for a complete communication model, to keep track of attached devices and coordinate data exchange. Virtual smart transducer from [10] is presented in terms of implementing the customized TEDS formats and additional Web services for purpose of reading/writing these TEDS. In that case, realization is limited to configuration of an output device (e.g. display) through the user-defined TEDS. On contrary, this paper describes the architectural benefits of virtual smart transducers in terms of service migration from embedded to the general purpose platform.

Concept of virtual smart transducers and network data exchange via centralized server are illustrated on Fig. 1
                        . Three types of devices are described:
                           
                              a)
                              Smart transducer is a monolithic module that integrates both: Network Capable Application Processor (NCAP) which acts as its network gateway, and Transducer Interface Module (TIM) which holds actual transducers and their TEDS.

NCAP and TIMs are separated and they communicate over additional IEEE 1451.X layer, where X depends on particular interface (e.g. X=2 for serial interface, and X=5 for wireless interface) [2].

From server’s point of view, device appears as any other smart transducer, but it implements processing application behind the STWS interface instead of physical sensors/actuators. Each processing application (or algorithm) on device is placed to a separate logical entity named Virtual TIM (VTIM).

Central server acts as a data dispatcher between physical transducers and virtual transducers (i.e. processing applications). All devices registered in the network confirm to the same WSDL contract, hence, we attain a perfect symmetry between transducers and processing applications. During STWS Service calls, server exchanges the platform-neutral SOAP/XML messages with devices. IP for each device is obtained dynamically over DHCP protocol, which changes the common Web service usage. Web service is normally run and published on a fixed IP, while we use it as a dynamic component in the smart transducer network.

In this section, we take a closer look at architectural benefits through VTIM example described on Fig. 2
                     . VTIM accepts data via channel denoted as Channel x (virtual actuator) and produces result that it writes out to Channel x’ (virtual sensor). TIMand VTIM channels that share the same name are connected by operator through a Web Manager available on the central server. Before establishing connection, operator must be sure that source and destination channels are compatible. Each device has itscopy of TEDS on the server, so that operator can have enough information about available channels.

Server incorporates a scheduler that iterates over the list of time distributed jobs. Therefore, STWS Read Service is called periodically on TIM side and data are transferred toward VTIM by calling STWS Write Service. VTIM algorithm is triggered by writing to its Channel x. At this point, we want to emphasize that data processing is migrated from smart sensor to virtual smart sensor (indicated by blue gear on Fig. 2). This makes implementation of an embedded smart sensor less demanding, since TEDS holding auto-correction and conversion parameters are moved to VTIM, together with related processing. Smart sensor now holds minimal set of TEDS, so that its channels can be discovered and accessed. Once connection between channels is established, TIM provides raw data to be processed by dislocated VTIM. VTIM algorithm processing is performed on a general purpose platform, implemented in arbitrary programming language.

In this section we describe an implementation of the two most challenging parts of the network: smart transducer and central server.

Mostly, Web service skeleton and stub components can be generated automatically by importing existing WSDL into a working project. On contrary, for embedded platform case it is necessary to take into account limited hardware resources, which represents a particular design challenge. Even so, using new types of microcontrollers with network support makes this task possible to accomplish. Furthermore, NCAP and TIM integration is possible as on Fig. 1(a), which improves typical IEEE 1451.0 implementation model (Fig. 1(b)). Next, we describemplementation of such embedded smart sensor.

In this work, we use gSOAP as the Web service source code generator [11]. Based on the WSDL specification, C/C++ source code is generated, compiled, and tested on a Linux general-purpose platform. Set of operations and message formats are defined according to the IEEE 1451.0 specification as in [4]. With this set, it is possible to discover sensors, read their meta-data and read sensor measurement data over STWS. After that, STWS source code is ported from Linux to ARM platform by eliminating OS dependencies produced by gSOAP. Resulting code implements the top layer of a service stack, without transport layers (TCP/IP and HTTP), which are necessary for a complete and fully functional solution. Our code is successfully merged together with the Ethernet and HTTP libraries [12], already developed for the ARM-based LPC1768 microcontroller manufactured by NXP [13]. With described software/hardware setup, our embedded smart transducer is capable of connecting to Internet and obtaining dynamic IP to be used as its STWS target address. After moving services from general-purpose to the embedded platform, network services can be used to directly control the IEEE 1451.0 smart transducer operations. Service call is done by Remote Procedure Call (RPC) programming model and some of the IEEE 1451.0 features are also simplified. Explicit trigger signal that NCAP sends to TIM module to initiate sensor data sampling and read operation is not necessary anymore, since NCAP and TIM are implemented as a joint module on a single microcontroller. Reading sensors is triggered implicitly, by sending particular SOAP/XML request message directly towards Read service. Also, IEEE 1451.X hardware communication layer is excluded from the implementation model, together with some of the software interfaces (e.g. IEEE 1451.X coder/encoder).

In particular, integration of NCAP and TIM modules requires also the integration of network functionalities and protocol stack on embedded platform, which increases hardware/software requirements. Implemented together, protocol stack and IEEE 1451 stack introduce element of instability and problem of memory resources requirements, which motivated us to dislocate one part of required services and TEDS from embedded platform in a form of independent software modules that are compatible with SOA architecture. This is done by introducing VTIM modules and by building central server to coordinate the sensor network.

Application layer of the central server is implemented in Java. All server operations are organized through job entities processed by the time aware scheduler. Scheduler inserts jobs in the time-sorted list and executes them sequentially. Job creation is triggered by appropriate actions in a system. For instance, when a device is attached, it registers itself on the server and job for writing its IP to a database is created (Fig. 3(a)). During execution of this job, initial STWS jobs are created and scheduled for TIM and transducer discovery phase and for getting smart transducer’s TEDS description.

After populating database with necessary data, operator uses Web manager over HTTP to configure the network. Network configuration page of Web manager lists all discovered transducers and their meta-data. Next, connections are established and data exchange is started between connected transducers (Fig. 3(b)). Fig. 3(c) illustrates the job execution and insertion process. Scheduler does not care about nature of particular job, which is achieved using polymorphism provided by Java. Server’s tickperiod is a parameter set to 100ms in our example and it can be used to control time granularity.

Presented design leads to a more stable system with sequential processing on the server as the single entity that initiates communication (device initiates communication only to register itself). Hence, its stability does not depend on VTIM and sensor programmable requests that could be generated to often and be able of breaking the server.

Here we demonstrate communication and show results on an ice detection example, using smart transducers network shown on Fig. 4(a). Our processing algorithm estimates conditions for ice formation by processing input data sets from air temperature and surface temperature sensors [14], humidity sensor [15], and calculated dew point; and provides warning information at output. Dew point is a temperature at which air becomes saturated with water vapor and it can be approximated using air temperature and air relative humidity. We use well known Magnus formula as a dew point calculation algorithm. Temperature sensors and relative humidity sensor (TIM 1: Channel x (111), on Fig. 4(a)) are connected to the embedded platform described in subsection 4.1; while VTIM with processing algorithm input (VTIM 1: Channel x (211)) and processing algorithm output (VTIM 2: Channel x’ (222)), and VTIM web display (Display 0 (000)) for data presentation are placed on general-purpose platform. Display resides on the server and is registered as a custom VTIM module. Fig. 4(b) shows the configuration page content after the initial phase described on Fig. 3(a) is finished. Upper table shows the fraction of TEDS data, so that operator can have description of available devices. Based on these data, operator chooses how to connect them. In our case data channels from physical sensors are connected to VTIM input channels appearing as a virtual actuator channels for processing algorithm.

On Submit event, database buffer per connection is created and data exchange is started. That makes Submit event a trigger for scheduling read/write jobs on the server. Smart sensors hold minimal TEDS description necessary to establish connection through configuration page, as well as Geo-location TEDS. Also, temperature-based compensation for calculating relative humidity can be done on VTIM side. Converting relative humidity and temperature to a dew point can be also placed in TEDS within VTIM that executes the algorithm.

Thus, dew point temperature can be observed as an individual channel that takes form of a virtual sensor. Display connected to this channel recording data during summer time is shown on Fig. 5(a). Geo-location information for this channel is related tothe physical sensor’s location. Fig. 5(b) shows recorded data from VTIM output channel during winter time (red: air temperature; blue: dew point; black: surface temperature). This example represents a proof of concept described by Fig. 2, since a lot of processing procedures is successful migrated from the embedded platform in the form of VTIM, leading to the more stable and more efficient implementation.

@&#CONCLUSION@&#

This work describes implementation of the IEEE 1451 Web services for embedded devices. Microcontroller with network support is used to provide direct network access to smart transducer operations. Virtual transducer concept enables migration of sensor operations from embedded device towards general purpose platform, which simplifies hardware constraints and enables power consumption optimization. Also, virtual transducer represents a flexible platform that can be expanded with additional functionalities, not only IEEE 1451 supported. Dislocation of standard/customized services and applications between independent network platforms provides simplified addition of new operations to individual transducers and services in the system. Presented architecture is applicable to scalable, real-time networks with a uniform integration of smart transducers and their service client applications.

@&#REFERENCES@&#

