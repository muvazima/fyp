@&#MAIN-TITLE@&#A graph based approach to hierarchical image over-segmentation

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A new approach to segment partitioning for superpixel segmentation is proposed.


                        
                        
                           
                           A new objective function optimized with graph cuts is proposed.


                        
                        
                           
                           The algorithm produces compact and regular superpixels of high quality.


                        
                        
                           
                           Comparable results with contemporary algorithms are achieved.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Segmentation

Superpixels

Graph cuts

@&#ABSTRACT@&#


               
               
                  The problem of image segmentation is formulated in terms of recursive partitioning of segments into subsegments by optimizing the proposed objective function via graph cuts. Our approach uses a special normalization of the objective function, which enables the production of a hierarchy of regular superpixels that adhere to image boundaries. To enforce compactness and visual homogeneity of segments a regularization strategy is proposed. Experiments on the Berkeley dataset show that the proposed algorithm is comparable in its performance to the state-of-the-art superpixel methods.
               
            

@&#INTRODUCTION@&#

The goal of image segmentation is to assign to each pixel a label that corresponds to a class of potential objects. It helps to find a convenient representation for further analysis by localizing image objects and boundaries. There are two common approaches to image segmentation. The first aims at extracting regions belonging to a given set of possible objects. The second aims at extracting segments of unknown object classes by grouping pixels that are similar in color, texture, etc.

The first approach maximizes the probability that each pixel receives the correct label. The simplest method is to use a sliding window classifier that estimates the label of each pixel based on its local neighborhood. More advanced approaches take into account the coherence (neighboring pixels tend to have similar labels) [1,2] and semantic context [3]. They often use probabilistic graphical models, e.g. CRF [4]. In this case, their structure is represented by a graph, where image pixels are the vertices, and the edges define the dependencies between pixels. Efficient segmentation is then possible when the edges help to assign similar labels to the vertices.

The second approach aims at extracting the most likely image objects with as few segments as possible. Superpixel algorithms have become popular for solving this kind of problems. They partition images into many relatively small segments. Superpixel segmentation helps to reduce image dimensionality with minimal loss of information and offers an easy way to leverage long-range pixels interdependencies. Regularity and ability to adhere to image boundaries make superpixels a convenient tool for calculating local image descriptors.

Common requirements to superpixel algorithms are:
                        
                           1.
                           
                              Performance. Superpixel segmentation is often used as a preprocessing tool. It, therefore, should take less time than is required for further processing.


                              Consistency. Superpixels boundaries should be consistent with image objects boundaries.


                              Compactness and regularity. For many applications superpixels should be of similar size and more or less convex shape. Such superpixels help to extract better local descriptors and have fewer neighbors.

@&#RELATED WORKS@&#

Superpixel algorithms can be divided into three main groups: divisive, agglomerative and discriminative.

The first group [5–7] implements a top-down strategy. Initially, the whole image is viewed as a single large segment. Then it is recursively partitioned into subsegments until a stopping criterion is met. The algorithms of this group usually have more complex optimality criteria that make them slower, but less sensitive to noise. For example, the graph cuts and normalized cuts objective functions depend on the sum of the cut edges. Therefore, there is no immediate dependency on the values of individual edges. Many algorithms of this group do not use regional information, such as pixel color, directly, but instead use information about the similarity of pixels, e. g. probabilities of borders. Another advantage is their ability to produce a hierarchy of nested segments in one pass. The superpixel algorithm of Ren and Malik [6] uses spectral graph partitioning to yield compact and regular superpixels. Two more approaches [5,7] use the minimum graph cut algorithm and dynamic programming to obtain superpixel lattices.

The second group of algorithms [8,9] implements a bottom-up strategy. Initially, each pixel belongs to a separate segment. Then the segments are merged until a certain stopping criterion is met. Image is often represented as a graph where the vertices denote the segments connected to each other by the graph edges representing their similarity. Algorithms of this group are less time consuming thanks to the greedy optimization strategies: at each stage a pair of segments to be merged is the one connected by an edge with the highest similarity value. However, when the segments are small, it is hard to estimate their similarity precisely. Moreover, greedy merging strategies are highly dependent on the values of individual edges. As a result, at the earlier stages dissimilar segments may be merged, causing errors. Therefore, such algorithms are more sensitive to noise. Like algorithms of the first group, they allow to produce a hierarchy of superpixels. The algorithm of Felzenszwalb and Huttenlocher (FH) [8] uses the above ideas to produce segments that adhere to image boundaries. However, they are often of irregular size and shape. Entropy Rate Superpixels (ERS) [9] solves this by introducing an additional balancing term into the optimized energy.

The algorithms from the third group [10–15] first roughly assign pixels to clusters, and then iteratively refine them. Unlike the algorithms of the first two groups they use regional information, such as pixel color and intensity, directly. The mean shift [11] and watershed [14] follow this strategy. However, they do not produce compact and regular superpixels. SLIC [10] is a more efficient algorithm based on k-means clustering. TurboPixels [13] is a geometric-flow based algorithm, and the approach of Veksler and Boykov [12] is based on graph cuts.

The three groups of algorithms have distinct properties and are applied in different scenarios. Divisive and agglomerative algorithms produce a hierarchy of segments and can use information about pixel similarity in the form of probabilities of boundaries more efficiently. Conversely, the algorithms from the discriminative group are more efficient in using regional information. It is important to note, that divisive and discriminative algorithms are less sensitive to noise, while agglomerative and discriminative algorithms are faster.

In this work we propose a new superpixel algorithm from the divisive group that uses the ideas similar to [7,16]. Image is represented by a graph where edges connect neighboring pixels and determine their similarity. Each image segment is recursively partitioned into two subsegments by computing the minimum graph cut. The graph edges are normalized to make the superpixels adhere to image boundaries. Additionally, regularization is applied to make them compact and homogeneous. The algorithm provides direct control over the number of segments and produces compact superpixels of regular size and shape.

At every step the largest 4-connected input segment (a segment is 4-connected, if for each of its pixels there is a pixel at the top, bottom, right or left, which is part of the segment) is partitioned into two 4-connected output segments. The proposed algorithm creates several competing partitions and selects the best of them. Each partition is produced in two stages: terminal placement and segment partitioning by optimization of the objective function.

Let 
                        
                           I
                        
                      be the image vector, and 
                        
                           L
                        
                      – the corresponding vector of pixel labels. The image is represented by a graph 
                        
                           G
                           =
                           (
                           V
                           ,
                           E
                           )
                        
                     , with vertices V denoting the pixels and the edge weights denoting their pairwise similarity. The graph defines a global energy function, which is minimized with respect to the labels 
                        
                           L
                        
                     :
                        
                           (1)
                           
                              E
                              (
                              L
                              )
                              =
                              λ
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                       
                                       ∈
                                       V
                                    
                                 
                              
                              Φ
                              (
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                              |
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              )
                              +
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       (
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             j
                                          
                                       
                                       )
                                       ∈
                                       E
                                    
                                 
                              
                              Ψ
                              (
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    l
                                 
                                 
                                    j
                                 
                              
                              |
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    v
                                 
                                 
                                    j
                                 
                              
                              )
                              ,
                           
                        
                     where 
                        
                           λ
                        
                      is a constant, and 
                        
                           Φ
                        
                      and 
                        
                           Ψ
                        
                      can be defined as follows:
                        
                           (2)
                           
                              Φ
                              (
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                              |
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              )
                              =
                              -
                              log
                              p
                              (
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                              |
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              ,
                              I
                              )
                              ,
                           
                        
                     
                     
                        
                           (3)
                           
                              Ψ
                              (
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    l
                                 
                                 
                                    j
                                 
                              
                              |
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    v
                                 
                                 
                                    j
                                 
                              
                              )
                              =
                              -
                              log
                              p
                              (
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                              
                              ≠
                              
                              
                                 
                                    l
                                 
                                 
                                    j
                                 
                              
                              |
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    v
                                 
                                 
                                    j
                                 
                              
                              ,
                              I
                              )
                              [
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                              
                              ≠
                              
                              
                                 
                                    l
                                 
                                 
                                    j
                                 
                              
                              ]
                              .
                           
                        
                     
                     
                        
                           p
                           (
                           
                              
                                 l
                              
                              
                                 i
                              
                           
                           |
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                           ,
                           I
                           )
                        
                      is the probability of label 
                        
                           
                              
                                 l
                              
                              
                                 i
                              
                           
                        
                      for pixel 
                        
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                        
                     , 
                        
                           p
                           (
                           
                              
                                 l
                              
                              
                                 i
                              
                           
                           
                           ≠
                           
                           
                              
                                 l
                              
                              
                                 j
                              
                           
                           |
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 v
                              
                              
                                 j
                              
                           
                           ,
                           I
                           )
                        
                      – probability that pixels 
                        
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                        
                      and 
                        
                           
                              
                                 v
                              
                              
                                 j
                              
                           
                        
                      have different labels. The choice of 
                        
                           Ψ
                        
                      is limited to some extent by the available optimization algorithms.

In the following discussion we will focus on the case when there are two different types of labels (0,1) corresponding to the two subsegments produced during segment partitioning.

Our approach is based on the following ideas:
                        
                           1.
                           In [7] only a group of segments can be partitioned in one step due to the lattice structure requirement. We developed a new approach that can split the segments individually. It is based on a new strategy for choosing the terminal connections that does not have the limitations of [7].

We find the optimal segment partitions using the minimum graph cut algorithm. A special normalization of graph edges is used to move the superpixel boundaries closer to the boundaries of the objects in the image.

The optimized energy includes a regularization term that helps to control the trade-off between the segment compactness and the cut optimality.

To provide for the homogeneity of segments, the optimized energy includes a term that uses pixel color and intensity.

To find 
                                 
                                    Ψ
                                    (
                                    
                                       
                                          l
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          l
                                       
                                       
                                          j
                                       
                                    
                                    |
                                    
                                       
                                          v
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          j
                                       
                                    
                                    )
                                 
                               using (3) we use a simple classifier (a neural network) that estimates the probabilities of borders between pixels.

At the terminal placement stage we select several source-sink pairs. They are used at the second stage to produce several competing segment partitions. We select the best one of them using the following optimality measure:
                           
                              (4)
                              
                                 mean
                                 _
                                 cut
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             
                                                
                                                   v
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                                
                                                   v
                                                
                                                
                                                   j
                                                
                                             
                                             ∈
                                             E
                                          
                                       
                                       Ψ
                                       (
                                       
                                          
                                             l
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             l
                                          
                                          
                                             j
                                          
                                       
                                       |
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             j
                                          
                                       
                                       )
                                       [
                                       
                                          
                                             l
                                          
                                          
                                             i
                                          
                                       
                                       
                                       ≠
                                       
                                       
                                          
                                             l
                                          
                                          
                                             j
                                          
                                       
                                       ]
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             
                                                
                                                   v
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                                
                                                   v
                                                
                                                
                                                   j
                                                
                                             
                                             ∈
                                             E
                                          
                                       
                                       [
                                       
                                          
                                             l
                                          
                                          
                                             i
                                          
                                       
                                       
                                       ≠
                                       
                                       
                                          
                                             l
                                          
                                          
                                             j
                                          
                                       
                                       ]
                                    
                                 
                                 .
                              
                           
                        The best partition has the lowest mean_cut.

For each pair, each terminal (the source and the sink) is connected by an infinite capacity edge to a single pixel vertex. In the following discussion we also refer to these pixels as terminals. To generate the first pair of terminals, we select the two farthest pixels on the segment (Fig. 1
                        a). For the remaining pairs both terminals are chosen uniformly at random from the pixels lying on the contour. Thus, the positions of the terminals are selected using the segment shape only, and are independent of the pixel values.

At this stage we split segments using the terminals found on the previous stage. To improve boundary adherence, edge values are normalized by the width of the segment at the corresponding locations. That is, the two selected terminals (
                           
                              
                                 
                                    t
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    t
                                 
                                 
                                    2
                                 
                              
                           
                        ) divide the contour in two groups of vertices 
                           
                              
                                 
                                    C
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    C
                                 
                                 
                                    2
                                 
                              
                           
                         (Fig. 1b). The segment width in vertex 
                           
                              v
                              ∈
                              V
                           
                         is defined as follows:
                           
                              (5)
                              
                                 W
                                 (
                                 v
                                 )
                                 =
                                 
                                    
                                       N
                                    
                                    
                                       edges
                                    
                                 
                                 (
                                 
                                    
                                       C
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 v
                                 )
                                 +
                                 
                                    
                                       N
                                    
                                    
                                       edges
                                    
                                 
                                 (
                                 
                                    
                                       C
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 v
                                 )
                                 +
                                 1
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    N
                                 
                                 
                                    edges
                                 
                              
                              (
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              ,
                              v
                              )
                           
                         is the number of edges on the shortest path from 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                           
                         to v on the unweighted 4-connected segment graph. Similarly, we define the width at edge 
                           
                              e
                              ∈
                              E
                           
                         as
                           
                              (6)
                              
                                 W
                                 (
                                 e
                                 )
                                 =
                                 
                                    
                                       W
                                       (
                                       
                                          
                                             e
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       +
                                       W
                                       (
                                       
                                          
                                             e
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    
                                    
                                       2
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    e
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    e
                                 
                                 
                                    2
                                 
                              
                           
                         are the vertices connected by edge e.

The segment is split into two subsegments by optimizing the following energy:
                           
                              (7)
                              
                                 E
                                 (
                                 L
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                v
                                             
                                             
                                                i
                                             
                                          
                                          ∈
                                          V
                                       
                                    
                                 
                                 
                                    
                                       Φ
                                    
                                    
                                       t
                                    
                                 
                                 (
                                 
                                    
                                       l
                                    
                                    
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          E
                                       
                                    
                                 
                                 
                                    
                                       Ψ
                                       (
                                       
                                          
                                             l
                                          
                                          
                                             
                                                
                                                   e
                                                
                                                
                                                   1
                                                
                                             
                                          
                                       
                                       ,
                                       
                                          
                                             l
                                          
                                          
                                             
                                                
                                                   e
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       |
                                       
                                          
                                             e
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    
                                    
                                       W
                                       (
                                       e
                                       )
                                    
                                 
                                 ,
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       Φ
                                    
                                    
                                       t
                                    
                                 
                                 (
                                 
                                    
                                       l
                                    
                                    
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∞
                                                
                                                
                                                   if
                                                   
                                                   
                                                      
                                                         l
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   =
                                                   1
                                                   ,
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   =
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   ∞
                                                
                                                
                                                   if
                                                   
                                                   
                                                      
                                                         l
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   =
                                                   0
                                                   ,
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   =
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        
                     

In many cases extraction of too small segments is undesirable. This is prevented by adding a regularizing term to (7) (Fig. 1c) that penalizes undesirable pixel labels. The size and shape of the segments change during the recursive partitioning. The regularization approach must be invariant to such changes. For example, for large segments the per pixel penalty must be lower than for the small ones. To meet these requirements, we normalize the penalty depending on the size and shape of the segment:
                           
                              (9)
                              
                                 
                                    
                                       Φ
                                    
                                    
                                       ‾
                                    
                                 
                                 (
                                 
                                    
                                       l
                                    
                                    
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       2
                                    
                                    
                                       
                                          
                                             D
                                          
                                          
                                             t
                                          
                                       
                                       (
                                       
                                          
                                             t
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    
                                 
                                 ·
                                 
                                    
                                       1
                                    
                                    
                                       W
                                       (
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                       
                                       )
                                    
                                 
                                 ·
                                 Φ
                                 (
                                 
                                    
                                       l
                                    
                                    
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    D
                                 
                                 
                                    t
                                 
                              
                              (
                              
                                 
                                    t
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    t
                                 
                                 
                                    2
                                 
                              
                              )
                           
                         is the Euclidean distance between the terminals. The first multiplier makes the distance between the terminals equal to 2. The second removes the effects of the segment shape using the estimated width in each pixel. After the normalization, we define 
                           
                              Φ
                           
                         so as to assign the penalty nonlinearly, depending on the distance to the terminals:
                           
                              (10)
                              
                                 Φ
                                 (
                                 
                                    
                                       l
                                    
                                    
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         1
                                                      
                                                      
                                                         2
                                                         
                                                            
                                                               D
                                                               (
                                                               
                                                                  
                                                                     t
                                                                  
                                                                  
                                                                     1
                                                                  
                                                               
                                                               ,
                                                               
                                                                  
                                                                     v
                                                                  
                                                                  
                                                                     i
                                                                  
                                                               
                                                               )
                                                            
                                                            
                                                               D
                                                               (
                                                               
                                                                  
                                                                     t
                                                                  
                                                                  
                                                                     1
                                                                  
                                                               
                                                               ,
                                                               
                                                                  
                                                                     t
                                                                  
                                                                  
                                                                     2
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   if
                                                   
                                                   
                                                      
                                                         l
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   =
                                                   0
                                                   ,
                                                   D
                                                   (
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                   ⩽
                                                   D
                                                   (
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   )
                                                   ,
                                                   D
                                                   (
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                   ⩾
                                                   0
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         1
                                                      
                                                      
                                                         2
                                                         
                                                            
                                                               D
                                                               (
                                                               
                                                                  
                                                                     v
                                                                  
                                                                  
                                                                     i
                                                                  
                                                               
                                                               ,
                                                               
                                                                  
                                                                     t
                                                                  
                                                                  
                                                                     2
                                                                  
                                                               
                                                               )
                                                            
                                                            
                                                               D
                                                               (
                                                               
                                                                  
                                                                     t
                                                                  
                                                                  
                                                                     1
                                                                  
                                                               
                                                               ,
                                                               
                                                                  
                                                                     t
                                                                  
                                                                  
                                                                     2
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   if
                                                   
                                                   
                                                      
                                                         l
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   =
                                                   1
                                                   ,
                                                   D
                                                   (
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   )
                                                   ⩽
                                                   D
                                                   (
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                   ,
                                                   D
                                                   (
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   )
                                                   ⩾
                                                   0
                                                   .
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              D
                              (
                              
                                 
                                    x
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    x
                                 
                                 
                                    2
                                 
                              
                              )
                           
                         is a distance, we use the length of the vector projection of 
                           
                              
                                 
                                    x
                                 
                                 
                                    1
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    2
                                 
                              
                           
                         on the vector 
                           
                              
                                 
                                    t
                                 
                                 
                                    1
                                 
                              
                              
                                 
                                    t
                                 
                                 
                                    2
                                 
                              
                           
                        . It can be negative when the vectors point in the opposite directions.

Putting (8)–(10) together, the optimized energy is
                           
                              (11)
                              
                                 E
                                 (
                                 L
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                v
                                             
                                             
                                                i
                                             
                                          
                                          ∈
                                          V
                                       
                                    
                                 
                                 
                                    
                                       Φ
                                    
                                    
                                       t
                                    
                                 
                                 (
                                 
                                    
                                       l
                                    
                                    
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 +
                                 λ
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                v
                                             
                                             
                                                i
                                             
                                          
                                          ∈
                                          V
                                       
                                    
                                 
                                 
                                    
                                       2
                                       Φ
                                       (
                                       
                                          
                                             l
                                          
                                          
                                             i
                                          
                                       
                                       |
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                       
                                       )
                                    
                                    
                                       
                                          
                                             D
                                          
                                          
                                             t
                                          
                                       
                                       (
                                       
                                          
                                             t
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                       )
                                       
                                          
                                             N
                                          
                                          
                                             edges
                                          
                                       
                                       (
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                       
                                       )
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          E
                                       
                                    
                                 
                                 
                                    
                                       Ψ
                                       (
                                       
                                          
                                             l
                                          
                                          
                                             
                                                
                                                   e
                                                
                                                
                                                   1
                                                
                                             
                                          
                                       
                                       ,
                                       
                                          
                                             l
                                          
                                          
                                             
                                                
                                                   e
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       |
                                       
                                          
                                             e
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    
                                    
                                       
                                          
                                             N
                                          
                                          
                                             edges
                                          
                                       
                                       (
                                       e
                                       )
                                    
                                 
                                 .
                              
                           
                        Segment partitioning may produce more than two 4-connected segments. For example, a single pixel segment may appear near the subsegment boundary, if there is a high probability of border between this pixel and each of its neighbors. In this case, the regularization penalty 
                           
                              Φ
                           
                         may outweigh the smoothing effect of 
                           
                              Ψ
                           
                         and make the pixel get a label inconsistent with the label of its neighbors. This problem is solved by merging the small segments with the large ones.
                           1
                           We use the following procedure: extract connected source and sink components; choose the largest source component; assign the remaining source components to the sink; extract connected source and sink components; choose the largest sink component; assign the remaining sink components to the source.
                        
                        
                           1
                        
                     

The size of the subsegments may still vary greatly, when 
                           
                              λ
                           
                         is small. We define the zone of influence of a terminal as a set of vertices connected to it by an edge with nonzero capacity according to (8) and (10) We restart partitioning, if one of the terminals loses more than 80% of the pixels in its zone of influence, and multiply 
                           
                              λ
                           
                         by 4.

Until now, the color of the pixels was used only indirectly, via the probabilities of edges between them. It is possible to further modify energy (11) to include this information directly. Let 
                           
                              
                                 
                                    T
                                 
                                 
                                    0
                                 
                              
                           
                         be the set of pixels having smaller Euclidean distance to the first terminal than to the second, and 
                           
                              
                                 
                                    T
                                 
                                 
                                    1
                                 
                              
                           
                         – the remaining pixels of the segment. We model the RGB colors with a Gaussian distribution. Let 
                           
                              
                                 
                                    μ
                                 
                                 
                                    0
                                 
                              
                              ,
                              
                                 
                                    C
                                 
                                 
                                    0
                                 
                              
                           
                         be the mean and covariance for pixels from 
                           
                              
                                 
                                    T
                                 
                                 
                                    0
                                 
                              
                           
                        , and 
                           
                              
                                 
                                    μ
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    C
                                 
                                 
                                    1
                                 
                              
                           
                         – from 
                           
                              
                                 
                                    T
                                 
                                 
                                    1
                                 
                              
                           
                        . Then (11) is changed as follows:
                           
                              (12)
                              
                                 E
                                 (
                                 L
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                v
                                             
                                             
                                                i
                                             
                                          
                                          ∈
                                          V
                                       
                                    
                                 
                                 (
                                 
                                    
                                       Φ
                                    
                                    
                                       t
                                    
                                 
                                 (
                                 
                                    
                                       l
                                    
                                    
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 +
                                 
                                    
                                       λ
                                    
                                    
                                       c
                                    
                                 
                                 
                                    
                                       2
                                       
                                          
                                             Φ
                                          
                                          
                                             c
                                          
                                       
                                       (
                                       
                                          
                                             l
                                          
                                          
                                             i
                                          
                                       
                                       |
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                       
                                       )
                                    
                                    
                                       
                                          
                                             D
                                          
                                          
                                             t
                                          
                                       
                                       (
                                       
                                          
                                             t
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                       )
                                       W
                                       (
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                       
                                       )
                                    
                                 
                                 +
                                 λ
                                 
                                    
                                       2
                                       Φ
                                       (
                                       
                                          
                                             l
                                          
                                          
                                             i
                                          
                                       
                                       |
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                       
                                       )
                                    
                                    
                                       
                                          
                                             D
                                          
                                          
                                             t
                                          
                                       
                                       (
                                       
                                          
                                             t
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                       )
                                       W
                                       (
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                       
                                       )
                                    
                                 
                                 )
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          E
                                       
                                    
                                 
                                 
                                    
                                       Ψ
                                       (
                                       
                                          
                                             l
                                          
                                          
                                             
                                                
                                                   e
                                                
                                                
                                                   1
                                                
                                             
                                          
                                       
                                       ,
                                       
                                          
                                             l
                                          
                                          
                                             
                                                
                                                   e
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       |
                                       
                                          
                                             e
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    
                                    
                                       
                                          
                                             N
                                          
                                          
                                             edges
                                          
                                       
                                       (
                                       e
                                       )
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    λ
                                 
                                 
                                    c
                                 
                              
                           
                         is a predefined constant, and 
                           
                              
                                 
                                    Φ
                                 
                                 
                                    c
                                 
                              
                              (
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                              |
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              )
                           
                         specifies the consistency of pixel i with label 
                           
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                           
                        :
                           
                              (13)
                              
                                 
                                    
                                       Φ
                                    
                                    
                                       c
                                    
                                 
                                 (
                                 
                                    
                                       l
                                    
                                    
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 -
                                 log
                                 
                                    
                                       p
                                    
                                    
                                       N
                                    
                                 
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       μ
                                    
                                    
                                       
                                          
                                             l
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       C
                                    
                                    
                                       
                                          
                                             l
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                                 )
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    p
                                 
                                 
                                    N
                                 
                              
                              (
                              x
                              |
                              μ
                              ,
                              C
                              )
                           
                         is the value of the normal probability density function in vertex x.

The pseudocode of the proposed approach is given in Algorithm 1.
                           Algorithm 1
                           The proposed superpixel algorithm 
                                 
                                    
                                       
                                       
                                          
                                             
                                                Input: image, 
                                                   
                                                      
                                                         
                                                            λ
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            λ
                                                         
                                                         
                                                            c
                                                         
                                                      
                                                   
                                                , num_segments
                                          
                                          
                                             Estimate probabilities of edges between pixels;
                                          
                                          
                                             segments={image};
                                          
                                          
                                             
                                                while size(segments)<num_segments do
                                             
                                          
                                          
                                             
                                                segment=extract the largest segment from segments;
                                          
                                          
                                             
                                                segment_contour=extract_contour(segment);
                                          
                                          
                                             
                                                terminal_pairs=choose_terminal_pairs(segment_contour);
                                          
                                          
                                             
                                                initialize segment_graph with color and edge information;
                                          
                                          
                                             
                                                best_score=infinity;
                                          
                                          
                                             
                                                
                                                for each terminal_pair in terminal_pairs do
                                             
                                          
                                          
                                             
                                                
                                                Estimate segment width for each vertex in segment_graph;
                                          
                                          
                                             
                                                
                                                prior_source=find vertices in segment_graph
                                          
                                          
                                             
                                                
                                                
                                                that should be connected to source (using (8) and (10))
                                          
                                          
                                             
                                                
                                                
                                                with edges having nonzero capacity;
                                          
                                          
                                             
                                                
                                                prior_sink=find vertices in segment_graph
                                          
                                          
                                             
                                                
                                                
                                                that should be connected to sink (using (8) and (10))
                                          
                                          
                                             
                                                
                                                
                                                with edges having nonzero capacity;
                                          
                                          
                                             
                                                
                                                Compute mean and covariance for source and sink vertices;
                                          
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      c
                                                      =
                                                      1
                                                   
                                                ;
                                          
                                          
                                             
                                                
                                                
                                                repeat
                                             
                                          
                                          
                                             
                                                
                                                
                                                Reconnect each vertex in segment_graph to source and
                                          
                                          
                                             
                                                
                                                
                                                
                                                sink as specified in (12) using 
                                                   
                                                      λ
                                                      =
                                                      c
                                                      
                                                         
                                                            λ
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            λ
                                                         
                                                         
                                                            c
                                                         
                                                      
                                                   
                                                ;
                                          
                                          
                                             
                                                
                                                
                                                source_vertices, sink_vertices=optimize (12) using
                                          
                                          
                                             
                                                
                                                
                                                
                                                a max flow/ min cut solver;
                                          
                                          
                                             
                                                
                                                
                                                Post-process source_vertices, sink_vertices
                                          
                                          
                                             
                                                
                                                
                                                
                                                (merge disconnected segments);
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                   
                                                      c
                                                      =
                                                      4
                                                      c
                                                   
                                                ;
                                          
                                          
                                             
                                                
                                                
                                                until size(source_vertices 
                                                   
                                                      ∩
                                                   
                                                 prior_source)/size(prior_source)<0.2
                                          
                                          
                                             
                                                
                                                
                                                
                                                or size(sink_vertices 
                                                   
                                                      ∩
                                                   
                                                 prior_sink)/size(prior_sink)<0.2
                                          
                                          
                                             
                                                
                                                mean_cut=compute mean cut using (4);
                                          
                                          
                                             
                                                
                                                
                                                if mean_cut<best_score then
                                             
                                          
                                          
                                             
                                                
                                                
                                                subsegments={source_vertices, sink_vertices)};
                                          
                                          
                                             
                                                
                                                
                                                
                                                end if
                                             
                                          
                                          
                                             
                                                
                                                
                                                end for
                                             
                                          
                                          
                                             
                                                
                                                add subsegments to segments;
                                          
                                          
                                             
                                                end while
                                             
                                          
                                       
                                    
                                 
                              
                           

@&#EXPERIMENTS@&#

To assess the performance of the proposed algorithm, we have conducted a series of experiments using the Berkeley dataset [17] containing 500 images, 100 of which are used for validation, 200 for testing.

For performance evaluation two standard measures for boundary adherence (evaluated using [18]) are used: boundary recall and undersegmentation error.

Boundary recall measures what fraction of the ground truth edges fall within a distance of 2 pixels from the superpixel boundaries. Usually, it is plotted against the number of superpixels. This approach, however, has a drawback: the longer the boundaries of the superpixels are, the higher is the probability that the image boundaries are found by chance, because more image pixels lie near the superpixel boundaries. This implies that for the same number of segments the algorithms producing superpixels with longer boundaries can achieve higher boundary recall without improving the quality. In our studies this problem proved to be important, and we, therefore, suggest to plot the dependency of boundary recall on coverage. By analogy with boundary recall, coverage is defined as the fraction of image pixels falling within the distance of two pixels from the superpixel boundaries for a given number of superpixels, and measures the probability for an image pixel to be near a superpixel boundary.

Undersegmentation error measures the tendency of image segments to leak through the boundaries of the ground truth segments. There are various ways to compute this metric [10,13,18]. In the experiments we use the approach suggested in [18]. Each ground truth segment S partitions superpixel P into two parts: the inner part 
                           
                              
                                 
                                    P
                                 
                                 
                                    in
                                 
                              
                           
                         and the outer part 
                           
                              
                                 
                                    P
                                 
                                 
                                    out
                                 
                              
                           
                        . The metric is computed as
                           
                              
                                 Undersegmentation
                                 
                                 error
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       N
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          S
                                          ∈
                                          GT
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          P
                                          ∈
                                          Ω
                                          :
                                          P
                                          ∩
                                          S
                                          ≠
                                          ∅
                                       
                                    
                                 
                                 min
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       in
                                    
                                 
                                 ,
                                 
                                    
                                       P
                                    
                                    
                                       out
                                    
                                 
                                 )
                              
                           
                        where N is the number of pixels in the image, GT are the ground truth segments, and 
                           
                              Ω
                           
                         are the superpixels produced by the algorithm. This measure is plotted against the number of superpixels as it seems to be unaffected by the problem described above.

The probabilities of boundaries between the pairs of pixels are estimated with a simple feedforward neural network. It has two hidden layers with 10 rectifier units [19] in each layer, and a sigmoid in the output layer. 6 values are used as the input: 3 rgb values for the first pixel and 3 rgb values for the second pixel. The classifier is trained on the training image set of the Berkeley dataset using the cross-entropy loss function. However, the ground truth labels are not used. Instead, for half of the pairs, the pixels are randomly sampled from different images. Each of the remaining pairs comprise neighboring pixels falling within a random 5×5 window on a randomly selected image. The network is trained to predict the probability that the pixels were sampled from different images.

The probability of a border between pixels is calculated as follows:
                           
                              
                                 p
                                 (
                                 
                                    
                                       l
                                    
                                    
                                       i
                                    
                                 
                                 
                                 ≠
                                 
                                 
                                    
                                       l
                                    
                                    
                                       j
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             p
                                          
                                          
                                             0
                                          
                                       
                                       
                                          
                                             p
                                          
                                          
                                             nn
                                          
                                       
                                       (
                                       
                                          
                                             l
                                          
                                          
                                             i
                                          
                                       
                                       
                                       ≠
                                       
                                       
                                          
                                             l
                                          
                                          
                                             j
                                          
                                       
                                       )
                                    
                                    
                                       
                                          
                                             p
                                          
                                          
                                             0
                                          
                                       
                                       
                                          
                                             p
                                          
                                          
                                             nn
                                          
                                       
                                       (
                                       
                                          
                                             l
                                          
                                          
                                             i
                                          
                                       
                                       
                                       ≠
                                       
                                       
                                          
                                             l
                                          
                                          
                                             j
                                          
                                       
                                       )
                                       -
                                       (
                                       1
                                       -
                                       
                                          
                                             p
                                          
                                          
                                             0
                                          
                                       
                                       )
                                       (
                                       1
                                       -
                                       
                                          
                                             p
                                          
                                          
                                             nn
                                          
                                       
                                       (
                                       
                                          
                                             l
                                          
                                          
                                             i
                                          
                                       
                                       
                                       ≠
                                       
                                       
                                          
                                             l
                                          
                                          
                                             j
                                          
                                       
                                       )
                                       )
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    p
                                 
                                 
                                    nn
                                 
                              
                              (
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                              
                              ≠
                              
                              
                                 
                                    l
                                 
                                 
                                    j
                                 
                              
                              )
                           
                         is the probability assigned by the network; 
                           
                              
                                 
                                    p
                                 
                                 
                                    0
                                 
                              
                           
                         is a constant. By cross-validation we found that 
                           
                              
                                 
                                    p
                                 
                                 
                                    0
                                 
                              
                              =
                              0.95
                           
                         yields the best superpixels. The boundary maps produced by our border detector are given in Fig. 4. They were obtained by taking the maximum probability among the values associated with each pixel.

Each pixel is connected to several neighbors on the segment graph. We compared 3 connection systems: the standard 4-neighbors system and square connection systems (each pixel is connected to all the pixels falling within a square centered at it) of size 3×3 and 5×5. The performance of the connection systems is shown in Fig. 2
                        . Examples of superpixels produced by each connection system are given in Fig. 4. Although the 5×5 square connection system shows consistently better performance, it results in a 2×–3× slowdown as shown in Fig. 3
                        . Regarding the choice of 
                           
                              λ
                           
                         and 
                           
                              
                                 
                                    λ
                                 
                                 
                                    c
                                 
                              
                           
                        , we found that when 
                           
                              λ
                           
                         is small enough, it has a noticeable impact only on the runtime of the algorithm. For the 5×5 connection system the results for 
                           
                              
                                 
                                    λ
                                 
                                 
                                    c
                                 
                              
                              =
                              0
                           
                         are also given in Fig. 2. It appears, that setting nonzero 
                           
                              
                                 
                                    λ
                                 
                                 
                                    c
                                 
                              
                           
                         helps to improve both undersegmentation error and boundary recall. In addition, higher 
                           
                              
                                 
                                    λ
                                 
                                 
                                    c
                                 
                              
                           
                         helps to reduce the runtime of the algorithm because the underlying max flow/min cut solver takes less time. However, when 
                           
                              
                                 
                                    λ
                                 
                                 
                                    c
                                 
                              
                           
                         is too large, the boundaries of superpixels become highly irregular. This slightly increases undersegmentation error and considerably boosts boundary recall, when it is plotted against the number of segments. By plotting boundary recall against coverage, we can see that in this case the quality does not improve.


                        Fig. 2 also demonstrates that superior performance can be obtained when using several competing pairs of terminals. It is worth noting, though, that this results in a proportional slowdown.

The difference in performance between the analyzed connection systems could be better understood by comparing the appearances of their superpixels (Fig. 4
                        ). Connection systems that use 5×5 and 3×3 window produce smooth superpixel boundaries. Cuts produced by the 4-neighbors connection system are mostly horizontal and vertical, and less precise in following object boundaries.

On average, it takes 8s to segment one image (482×321, 2500 superpixels, 3×3 square connection system, one pair of terminals, 
                           
                              λ
                              =
                              1
                              ,
                              
                                 
                                    λ
                                 
                                 
                                    c
                                 
                              
                              =
                              100
                           
                        ) in a single threaded mode on an Intel Core i7 4702MQ processor using the max flow/min cut solver of [20].
                           2
                           Source code is available at https://sites.google.com/a/sc.vsu.ru/tozi_eng/sotrudniki-kafedry/aspiranty-kafedry-tozi/kalinin-pavel.
                        
                        
                           2
                         More details about the run time of the algorithm for different connection systems are given in Fig. 3.

Using [18] the proposed approach was compared to SLIC [10], ERS [9], Turbopixels [13], and FH [8]. For ERS the 4-neighbors system was used, as with 8 neighbors disconnected segments may appear. Examples of segmented images produced by each method are given in Fig. 5
                        . The comparison is the more interesting because the proposed algorithm belongs to the divisive, ERS and FH to the agglomerative, SLIC and Turbopixels to the discriminative groups. The results are given in Fig. 6
                        . In the comparison we use two versions of our algorithm. The fast version uses the 3×3 connection system, 1 pair of terminals, 
                           
                              λ
                              =
                              1
                              ,
                              
                                 
                                    λ
                                 
                                 
                                    c
                                 
                              
                              =
                              100
                           
                        , and on average takes 8s. The slow version uses the 5×5 connection system, 10 pairs of terminals, 
                           
                              λ
                              =
                              5
                              ,
                              
                                 
                                    λ
                                 
                                 
                                    c
                                 
                              
                              =
                              100
                           
                        , and on average takes 170s. For consistency with other works, we also show the boundary recall vs number of segments plot. The proposed approach has the best undersegmentation error, and is behind FH according to boundary recall. It is worth noting that although FH has a huge advantage over the other approaches according to boundary recall, it cannot produce compact superpixels as seen in Fig. 5.

@&#DISCUSSION@&#

In the overview we considered three groups of superpixel algorithms: divisive, agglomerative, and discriminative. The algorithms from the three groups are not exactly equivalent, as the requirements to segmentation speed and quality of the segments are not the same for different applications. Thus, FH has the highest boundary recall, and good undersegmentation error when segmenting into a large number of segments. However, it produces superpixels that are not compact and may have a lot of neighbors. On the other hand, while Turbopixels shows the worst performance among the approaches considered, it creates the most regular and compact superpixels. As to the segmentation speed, SLIC, FH, and ERS are the best. While the proposed approach is the slowest among considered, the experiments have shown that it is behind FH for boundary recall, and gives the best undersegmentation error.

The optimization algorithms and the recursive partitioning strategy that we use considerably increase the run time of our approach, as compared to other approaches. The proposed algorithm has two main hyperparameters: 
                        
                           λ
                        
                      and 
                        
                           
                              
                                 λ
                              
                              
                                 c
                              
                           
                        
                     . 
                        
                           λ
                        
                      ensures that each segment is split into equally sized subsegments. When the sizes of subsegments are too different we increase 
                        
                           λ
                        
                      and repartition the segment. Thus, too low values of 
                        
                           λ
                        
                      affect only the run time of the algorithm. Large values, however, may produce a too strong regularizing effect, and lower the quality of segmentation. 
                        
                           
                              
                                 λ
                              
                              
                                 c
                              
                           
                        
                      may be set to 0 to produce border-based segmentations that are not considering the pixel color. However, our experiments suggest that this increases the run time of the algorithm and reduces the segmentation quality. The mean_cut optimality criterion that we use when choosing the best segment partitioning is rather simple. However, the experiments have demonstrated that it can bring substantial improvements.

Some algorithms look equivalent when boundary recall is plotted against the number of segments. However, there is a clear difference between them when the dependency of boundary recall on coverage is considered. Thus, the use of coverage helps to better understand the differences between the algorithms.

@&#CONCLUSION@&#

The paper proposes a new approach to superpixel segmentation that recursively partitions segments into subsegments based on the new objective function optimized with graph cuts. The suggested procedures help to produce a hierarchy of high quality superpixels that are compact, homogeneous, and well-adhering to image boundaries.

@&#REFERENCES@&#

