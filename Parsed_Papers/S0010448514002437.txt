@&#MAIN-TITLE@&#An attribute-based and object-oriented approach with system implementation for change impact analysis in variant product design

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           An integrated product model for identifying contextual impacts of design changes.


                        
                        
                           
                           An OO mechanism for handling dynamic and recursive change propagation processes.


                        
                        
                           
                           A tool to handle multiple change attempts and show the collective impact result.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Variant product design

Multiple change attempts

Change impact analysis

Integrated product content

Object-oriented change propagation

@&#ABSTRACT@&#


               
               
                  Variant product design is critical to the continued survival of a product in the demand-changing market. As variant product design involves numerous and concurrent attempts at requirement and product modification, a change impact analysis (CIA) becomes essential in order to capture both the potential and contextual impacts of a change proposal, and thereby ensure the consistency of the product’s integrated content throughout the process of carrying out any changes. In this regard, this paper presents an attribute-based, object-oriented approach for effectively and comprehensively performing the CIA tasks in variant product design. This approach models the integrated content of a product by characterizing its components and associated requirements with attributes and linkages. It then features an object-oriented change propagation design in order to handle the dynamic and recursive CIA loops. This approach is also able to show the collective impact when multiple changes are attempted. A computerized prototype, EPCII_EC, is implemented in order to realize the approach, and an illustrative product case with a comparative evaluation is provided in order to validate the work. Issues and limitations of this study are also discussed and suggestions are provided for future studies.
               
            

@&#INTRODUCTION@&#

In today’s highly competitive and fast-paced market, variant product design plays a key role in effectively and efficiently responding to customers’ changing needs. Variant product design is an important process that handles engineering changes (EC) and identifies the impacts of these changes on the rest of the product content  [1,2]. When ECs occur, items impacted as a result of ECs are identified and changed correspondingly. Any other inconsistencies, also referred to as side effects  [3] caused by the resultant changes also need to be identified in order to understand all potential reactions to the change. Such loop-like, dynamic and recursive change propagation processes continue until all of the inconsistencies are identified. Thus stakeholders need a technique to determine how a design change may affect the rest of the product, and to evaluate what needs to be modified accordingly. The task and technique for determining the potential effects of ECs is called change impact analysis (CIA).

As product redesign often involves multiple and concurrent attempts at product modifications, CIA has become more challenging. For example, in developing a jet engine, as many as 3000 change attempts may occur between the first prototype and the launch  [4,5]. An analyst has to seek ways to ensure the consistency and integrity of the product’s contents throughout these changes  [6–9]. Many proposals of CIA in the literature aim to give a clear representation of product structures with which designers can oversee the interdependencies and consequences of an EC on product components  [10–12,6,7]. From the concurrent engineering aspect, however, existing CIA works deal mainly with information related to a product’s implemented content, without extending the analysis to the impact on other artifacts in various phases of product deployment. Since requirements are a critical source in defining the success of a product, it becomes useful if an EC is able to deal with questions like “What requirements will be affected when modifying the product?” and “What components will be affected if a customer updates certain requirements?” In other words, an initiated change may not only potentially cause direct and indirect influences on other product components, but could also contextually affect the requirements; these heterogeneous (functional requirements and components) impacts should be taken into account comprehensively, in order to ensure the consistency of a product’s integrated content and reduce the bullwhip effect in product redesign  [13].

Hence, with the focus on CIA in variant product design, the motivation of this study is to develop a method for efficiently identifying the impact of ECs on product components and requirements, and to effectively maintain the consistency of product content through times of change. In this regard, the motivation of this paper is further specified as follows:
                        
                           (1)
                           To efficiently perform the dynamic and recursive CIA loops, and to comprehensively identify the potential and contextual impacts of a change.

To offer an automated system with flexibility in order to effectively handle multiple or concurrent changes during product redesign.

In order to address these issues, this paper proposes an attribute-based, object-oriented CIA approach. This approach defines the integrated content of a product by characterizing and relating product components and functional requirements with attributes and attribute-based linkages. It then features an object-oriented change propagation mechanism for handling the dynamic and recursive CIA loops. A computerized prototype, EPCII_EC, is implemented in order to realize the approach and facilitate the CIA task. Significantly, its capacity to handle multiple changes provides a collective, comprehensive and contextual view of any impact in concurrent engineering when multiple changes are applied. To demonstrate this approach and tool, this paper presents a product case, and conducts comparative evaluations based on this case in order to assess the benefits of the proposed work. Issues and limitations of the study are also discussed, offering an outline for future research. The remainder of this paper is organized as follows: Section  2 surveys the literature on related work; Section  3 introduces the proposed approach; Section  4 demonstrates the system implementation with a technical walk-through; Section  5 presents the case and associated evaluations; Section  6 discusses the issues and limitations of the current development, and Section  7 concludes the paper.

@&#LITERATURE REVIEW@&#

In today’s world, as the competitive market becomes more and more customer-orientated, determining how to respond effectively to changes in customer needs has become an important question for those involved in variant product design  [14,15]. In practice, variant product design involves a number of attempts to modify an existing product, where these attempts are known as engineering changes (EC)  [5,9,16,17]. The causes of ECs in product redesign may include customer requests for product improvement, and the adoption of new technology to enhance the features of a product or the replacement of certain parts for better functionality or safety  [18]. With a focus on the functional design of a product, EC is a behavior that causes some adaptations or changes to the product itself and to the materials or components that compose the product  [19].

Typically, ECs in variant product design involve technically the variation of the parameters of certain aspects of an existing product in order to develop a new design  [6,7,5,20]. The parameters of a product refer to the physical, spatial or logical dimensions and variables that characterize the content of a product. With regard to variant product design, two important issues need to be addressed. First, the physical components of current products need to be modified based on the customers’ new perceptions. Second, the original demand list needs to be revised due to product modification  [21]. Engineering changes involved in product modification cannot be ignored by enterprises since they help a product to better serve customers’ needs, and thereby enable enterprises to survive in an ever-changing world market.

However, EC also poses inherent risks in terms of product redesign  [2]. Such risks may be due to the multiple combinations of raw materials or to inconsistency in the supply chain. If these risks are not appropriately controlled, higher costs could be incurred and the process of product redesign would be propelled into a state of chaos. As contemporary products become more complex, engineering changes become more challenging when numerous and concurrent change attempts are made in variant product design; this means that more effort is required to process ECs effectively and efficiently  [9]. Furthermore, Huang et al.  [9] also explored the state of the EC problem and empirically examined the practice in managing ECs. Among the four companies interviewed in the study, three companies expressed that they were quite unsatisfied with the analytical activities for the effects/impacts incurred from the ECs and the ineffectiveness of ECs, which suggested the importance of developing methodologies and techniques for these analytical activities and motivated our study.

As mentioned earlier, a change to certain parts of a product may trigger a series of changes to other parts, bringing about the potential risk of jeopardizing the integrity of the whole product. In order to properly predict the risks of change propagation in terms of the impacts of the change, researchers have proposed various product models as a foundation for performing a change analysis. Yang and Duan  [20] classified the proposed product models into two categories: models of component linkages and models of parameter linkages. Components refer to all levels of nodes in product structures, including sub-systems, assemblies and parts. Parameters, or attributes, are those properties possessed by components or tied to customer demands. Parameter linkages refer to the relationships between parameters, while component linkages signify the relationships between components. Component linkages can be seen as the generalization of parameter linkages between two components  [20]. After clarifying the definitions of the core terminology, the following discussions introduce the CIA methods based on the two kinds of product models.

In order to display the relationships among the components of a system in a compact, visual and analytically advantageous format, the current literature has applied the Design Structure Matrix (DSM) to represent architectural decomposition and specify the relationships among the parts of a product  [22,23]. A DSM is a square matrix with identical row and column labels, with the labels denoting a product’s components. The entries in a DSM are usually used to indicate the dependency relations between parts of a product, for example, the materials interaction perspective  [23], or the likelihood of change to one part given that another part has been changed  [24]. A similar approach can also be seen in the establishment of EXPRESS  [25], which defines objects/entities in a domain of interest with attributes. For example, a rectangular entity in a mathematical application can be described by three attributes: length, width and center point. It has an implicit relationship with another entity, a circle that has the identical values of the center point, although the two entities are not linked via the center point. Not only tables but networks have appeared in the literature to represent the relations between product components  [26–28]. To assess the propensity of change propagation, for example, Cheng and Chu  [27] defines a product network as a collection of product components, the relations between the components, and their coupling strengths. In addition, Pasqual and Weck  [28] also offers a similar definition in their product layer.

Although component-linkages models do serve the purpose of modeling product structures well, they offer little or no mechanism to further characterize the linkages of product components  [29]. Scholars have proposed various methods to deal with this shortcoming. For example, Cohen et al.  [29] proposed “C-FAR matrixes” to explicitly represent the relations between two components the matrix elements being linkage values; from the aspect of a comprehensive CIA, their work focuses solely on product components. Rouibah and Caskey  [6,7] extended CIA to a multi-organizational scope under a distributed and simultaneous environment, which mirrors our concern that CIA should be designed for concurrent engineering. Although their CIA method, based on DSM, is able to describe the relationships among design parameters, the linkages between product components are not considered. Eckert et al.  [24] presented change processes in a product case; in spite of a conceptual study without system implementation, the three types of parameters (geometric, functional and behavioral) introduced in their report can be adopted in this study in order to characterize the integrated content of a product model. Reddi and Moon  [12] also presented a framework to automate the identification of affected parts due to ECs. In their work, the attribute–component and component–component relationships are captured during the design phase, and used to identify the affected parts. Yet from the aspect of a comprehensive CIA, their work also focuses solely on product components, without considering bidirectional and contextual impact between components and requirements.

Change management aims to ensure a systematic development process in which the system is in a well-defined state with accurate specifications and verifiable quality attributes  [30]. A product model for change impact analysis can be comprehensive and integrated if it covers the impacted artifacts emerging in different stages of the product development life cycle. The importance of complete coverage has been emphasized in the literature. Chen and Hsiao  [31] suggest that, for concurrent product and process development, the ability to establish associativity between requirements and product contents is important, not only because product requirements are a key input in the product design process, but also for ensuring the correctness of the manufacturing process  [32]. Mohan et al.  [30] also stress that knowledge about the evolution in product development (e.g., requirements and design specifications) must be maintained so as to comprehensively understand the existing artifacts and relationships among them. More specifically, Sudarsan et al.  [33] argued for the importance of recording the linkages between engineering models and associated knowledge, including customer requirements, functional requirements, design features or engineering specifications.

Accordingly, our review leads to the following proposition: a CIA offers a more comprehensive and integrated solution if the analysis is able to take into consideration the bidirectional and contextual impact between product components and requirements. An analysis method that satisfies the premise of this proposition will facilitate product redesign and decrease the likelihood of data inconsistency. However, (except for Wang et al.  [34]; Lee et al.  [35]; Fenves et al.  [36]; and Ouertani and Gzara,  [37]), most existing product models were found to be limited in terms of the comprehensiveness aspect, even though they are able to soundly express component linkages and parameter linkages. For example, Fenves et al.  [36] and Wang et al.  [34] include requirements in the proposed Core Product Models (CPM/CPM2). In their models, requirements are encapsulated in the specification of a component. Their works inspire us to extend requirements as independent entities. In our view, a functional requirement refers to a functional task that is performed by a product component or multiple components collaboratively, and a requirement is deemed as an independent entity for the sake of ease of maintenance and reusability in requirements engineering, and is linked to the component entities that collaboratively perform the function. Ouertani and Gzara  [37] propose the notion of specification dependency networks in order to indicate the ‘dependency’ relations between the product components’ specifications and the design process. Although it is limited to searching specification conflicts between parts within the design process, their work inspires us to extend the tracking mechanism to consider a situation where a proposed change (e.g. a requirement change) is made when the design dependencies of the related product components are not known or do not need to be known.

In addition to the methodological proposals discussed above, the current literature has also proposed computerized tools to support and facilitate engineering change processes. Jarratt et al.  [5] classify these tools into workflow support systems, which help to manage the workflow or documentation of the process, and decision support systems, which aid engineers in making decisions at a particular point in the engineering change process. For example, in order to support the integration of collaborative activities and knowledge management throughout the life-cycle of engineering, Lee et al.  [35] propose a process model illustrated with Unified Modeling Language (UML) and a prototype system called CECM (Collaborative environment for engineering change management) to demonstrate practical feasibility in engineering change management. As an example of decision support systems, Reddi and Moon  [12] present an object-oriented framework to automate the identification of affected attribute–component and component–component relationships resulting from ECs. This framework includes a propagation class for modeling individual changes and capturing the relationships between the various components and attributes of the product during the design phase.

To summarize, the aforementioned review suggests that two branches of critical references exist in the current literature. One branch aims to enhance product modeling with flexible granularity, while the other informs the importance of an integrated and comprehensive consideration between product requirements and the entities in a product model. In order to fill a gap in the current literature, this study proposes a CIA method that combines the merits of both of these two branches. Our design is presented with UML in the next section and a prototype system and an illustrative case are provided respectively in Sections  4 and 5.

In software engineering domain, Chen and Chen  [38] proposed an attribute-based and object-oriented CIA for handling software change impact analysis. The approach suggests that the impact of a software change should include not only soft codes, but also other artifacts such as the associated databases and requirements.

Specifically, the approach suggests that a software model can be characterized by using attributes and linkages, and develops mapping mechanisms to relate heterogeneous items of the software system. The approach also includes an object-oriented mechanism to perform the dynamic looping of change propagation. The structural design of a software system, including the idea of using attributes to characterize an artifact, seems to be applicable to the product design domain. Moreover, the object-oriented program design seems to be able to address the needs in a highly and frequently customized design environment  [39,40] where the capability of handling contextual change impacts and multiple change attempts is a concern. Therefore, in this study, we attempt to extend the work and apply it to variant product design.

Although the model, in terms of our interpretation, can be seen as a comprehensive solution with flexible granularity, some improvements are still needed. First, the association between Item and Linkage (i.e. the relationship from Item to Linkage) needs revision in the product modeling domain, as it may be rare that a linkage exists between one physical item and itself (i.e., reflexive relationships). Second, although requirements are highlighted in their work, there is no explicit representation of the important concept in their proposed structural framework. Third, the semantics conveyed in the propagation process seem unclear as no algorithm is presented to address the infinite looping situation. One limitation of the previous work is that, to avoid an infinite propagation loop, manual inspection for checking any closed loop is required when creating a software model. Fourth, in variant product design that often involves the design of product families, the computerized solution of the approach should be extended to have the capability of importing existing product items and attributes in defining a product model.

@&#METHODOLOGY@&#

In this section, the proposed approach is presented. The approach defines a product by integrating functional requirements and product components into the product model, and characterizes and relates the integrated contents via attributes and linkages. It also features an object-oriented change propagation mechanism for handling multiple or concurrent changes and dynamic and recursive loops in searching for the impacts of a change. Before going into design detail, several important concepts of this approach are defined.


                        Items: Typically, product items are the physical entities that comprise a product. Since requirements represent another major artifact in product redesign  [32,31], in this approach, there are two types of items: product components and requirements. From the integrated process aspect, an EC not only has an influence on product components but also has contextual impacts on functional requirements, and vice versa. The approach is designed to cover both the product components and the associated functional requirements by first defining them as two item sub types.


                        Linkages: A linkage denotes the change relationships of two items. It is created between two items if the two items have: (1) physical or structural influences, e.g. weight, shape, position, material constraints, etc., (2) logical influences, e.g. color or layout consistency or (3) contextual influences, e.g. requirement items and component items. For example, two items are related by color and is considered as a logical relationship, although the two items are not physically or structurally connected. A linkage characterized by “color” is created to capture such a relationship for the two “remote” items. A linkage may contain physical or logical attributes for denoting a physical or logical relationship of the two items. Moreover, a contextual relationship is formed between a component and a requirement item if they are connected with a linkage.


                        Attributes: Attributes are often called parameters. However, unlike parameters, which are defined in existing studies to describe the dimensional or spatial values of a certain part or assembly, in this study, attributes characterize (1) single items of a product and (2) the linkage between two homogeneous or heterogeneous items, for the proposed CIA to have a holistic identification scope. Besides, attributes are used to establish the potential changes of items. Color, shape, material, weight, etc. can be the change attributes of an item or a linkage. Attributes may be further specialized by a sub-attribute grouping according to the geometric, functional or behavioral features described by Eckert et al.  [24].


                        Product model: A product model in this paper refers to the change model of a product that describes the traceability of product items for CIA. When a change is proposed, such a model provides the paths of influence due to the change. It has an integrated content that composes of product items and associations (linkages). Because a design change of a product may be physical or logical, in this paper, a product’s change model is not limited to the conventional hierarchical structure, e.g., BOM (bill of materials) or MRP (material requirements planning); it may consist of not only physical and spatial relationships but also logical relationships (e.g. a “color” change association of product components) and the contextual relationships of the items (e.g. components and the associated requirements) due to the color design requirement.


                        Fig. 1
                         shows the structural design in a UML class diagram for describing an integrated product model in the proposed approach. The contents of an integrated product model refer to entities of (1) the two item sub types (i.e. product requirements and components), (2) attributes and (3) linkages. The two item types in the integrated product model represent the information of a product in two major developmental stages. With inheritance, the common features, such as certain administrative properties and the search function, of Component and Requirement can be defined in Item. For each item, it has a number of characterization attributes (refer to the diamond-shaped composition association in the figure) of potential changes defined by the product stakeholders (e.g. design engineers). The definition of attributes may differ, depending on the various domains of the products.

In addition to items, a product model also has linkages (composition associations) for interconnecting items of the same or heterogeneous types. As defined earlier, a linkage is created when there is a relationship or association between two items. The type of the linkage does not affect the performance of CIA, since the propagation is performed by checking the attributes in a linkage, be it a physical or logical or contextual. As a linkage is characterized by a number of attributes, which are deemed shared attributes of the two connecting items. For example, if two items are related in terms of texture, the linkage object of the two items should contain a “texture” attribute, which also exists in both items’ attribute list. Moreover, in this design, a requirement and a product component can also be related via linkages, as long as they have the same characterization (in terms of attributes). For example, a requirement PR1 describes the coloring feature regarding a set of components, including C1 (component). In this case, the requirement item is related to the component by creating a linkage PR1-C1 and assigning an attribute “color” to the linkage. The two item types and the linkage together represent the contextual information of the product development, as well as the interconnection of product data in different developmental stages.

Based on the aforementioned product model, the approach further objectifies “change” and “impact”, and Fig. 2
                         elaborates the structural model of a changed object and its impacts. In this approach, changes are also characterized by attributes. When a change is proposed (instantiated), it is characterized by means of “firing” certain attributes of the changing item (items) that are influenced due to this change. In other words, a change must be further interpreted with defined characteristics before going to the proposed work, thus designers need to scrutinize a change proposal in terms of characterizing it with attributes. As a simple example, a change of color in item A will fire the color attribute of the item. In this case, item A is called the changing item and the color attribute is called a firing attribute. If linkages of the changing item to other items contain the firing attributes, the items that are connected by these linkages are “impacted”, and are highlighted. The first level of impact items (called the direct impact set due to a change) is thus rendered. Meanwhile, the direct impact sets are also propagated to other items via their linkages as a secondary impact set, and so on (called the indirect impact set).

An algorithm is presented below to further illustrate how changes are propagated through the linkages between item attributes. The algorithm begins with a specific change 
                           C
                        . After obtaining all the attributes influenced by the change, each attribute is processed in an iterative manner. Given an attribute, the algorithm traverses its descendants in a depth-first method until no more attributes can be traversed. In this case, a change propagation change is found and recorded. Until all the descendants of the attributes directly influenced by the change, are traversed, the algorithm outputs all the paths found. Please note that the algorithm utilizes two stacks (i.e., 
                           
                              
                                 S
                              
                              
                                 
                                    Unvisited
                                 
                              
                           
                        : and 
                           
                              
                                 S
                              
                              
                                 
                                    Path
                                 
                              
                           
                        ) to facilitate the traversal process.


                        
                           
                              
                           
                        
                     

The propagation stops on condition that all of the impacted items have been identified. However, an infinite loop may incur during the propagation process if the linkages of the impacted items form a closed loop and when all of the linkages contain the same firing attributes. To handle the situation of closed looping, the algorithm features a runtime termination mechanism. More precisely, the algorithm tests two conditions for the termination criteria to avoid infinite loops. First, by using two stacks (i.e., 
                           
                              
                                 S
                              
                              
                                 
                                    Unvisited
                                 
                              
                           
                         and 
                           
                              
                                 S
                              
                              
                                 
                                    Path
                                 
                              
                           
                        ), the algorithm can correctly stop as long as all of the impacted items have been traversed, as shown in the first comment of the algorithm. Second, in cases that the algorithm detects an attribute that has been processed in previous iterations, it will be skipped and the algorithm proceeds to deal with an unprocessed one, as illustrated in the second comment. Integrating these two conditions, the propagation algorithm can correctly traverse all the paths impacted by a particular change while avoiding infinite loops.

The procedure of change propagation is elaborated in Fig. 3
                        , in which an example process is used for the sake of explanation. Suppose that there are four item objects (item1, item2, item3 and item4) and three linkage objects (link1–2, link1–3 and link3–4) connecting the four items, e.g. link1-2 connects item1 and item2, and so forth. In this example, an EC request, change1, proposes a change on item1. Some of the attributes of item1 are affected by change1. An impact, impactOfItem1 is generated in the system in order to save the affected attributes on item1. Subsequently, such an impact is propagated to item3, which is connected by link1–3. When impactOfItem1 propagates to item3, it generates propagatedImpact1–3, which states the impacted attributes of item3, and propagatedImpact1–3 continues to propagate to affect item4 through link3–4. The impact propagation process terminates on condition that all of the potential items and attributes are identified.

Specifically, such impact identification processes terminate when all of the change propagations no longer impact any unaffected attributes. A closer look at the change propagation between two heterogeneous items: Com1 (a component) and FR2 (a functional requirement) is presented in Fig. 4
                        . Suppose that each of Com1 and FR2 includes the same characterization attributes: attb1, attb2 and attb3, and the two items are linked in terms of attb1 and attb2. In this case, the relationship is established by creating a linkage link1–2 that contains and binds attb1 and attb2. Given this, any effect that involves attb1 and attb2 on Com1 will propagate to FR2, while affecting attb3 or attb4 will not propagate because the linkage does not bind that attributes. Furthermore, linkages presented in the model are bidirectional. This means that an effect involving attb1 and attb2 on the functional requirement (FR2) also propagates through the linkage and impacts on the component (Com1). This change propagation process is the key mechanism to determine homogeneous or heterogeneous impacts of Com1 and FR2 on the object changes in this framework.

In searching the potential impacted items, the proposed work also contains a data structure for dynamically handling and storing identified impact items of various subtypes (i.e. Component or Requirement). The following algorithm illustrates the design.


                        
                           
                              
                           
                        
                     

Specifically, the algorithm uses ArrayList, a dynamic sizing object structure, to store the impacted items. The super type declaration (Item currentImpactItem) in the algorithm applies the polymorphism design, for the purpose of being able to dynamically accept various subtypes of Items when identifying an impacted item that is of Component or Requirement type. Besides, as stated earlier, the attributed-based relationships among multiple items may form a closed loop, resulting in an infinite execution of reinserting identical items into the impact set. To address this in the implemented data structure, for simplicity, the program uses an automatic stopping rule encoded in the “for loop” to search for an identical item based on the currently identified impacted item in order to prevent from inserting it into the list.

Based on the proposed approach, we developed a system, named Entire-Phases Change Impact Identifier for Engineering Changes (abbreviated EPCII_EC hereafter). EPCII_EC is a java-based application that uses an open source called JGraph to facilitate the aforementioned object-oriented design. Besides, the portability feature of Java allows the system to run on any Java Virtual Machine (JVM) installed platforms or environments. Table 1
                         displays the development and runtime environment specifications of the system.

As far as this study is concerned, there are two function modules in the system: (1) Model Builder and (2) Impact Identifier. Model Builder provides a graphical user interface for users to establish the base product model for the variant design of a product. Impact Identifier allows users to apply changes on items and identify the impact results. Fig. 5
                         is an activity diagram showing a major use case that involves two functional modules of the system. Note that the decision loop in the diagram indicates that the system allows new changes to be applied to existing change results. This function provides stakeholders with a comprehensive view on multiple changes, whether or not they arrive concurrently.


                        
                           
                              •
                              
                                 Model Builder
                              

In an object-oriented design environment, a new product may have existing parts that are shared with other product designs. Given this, at the stage of defining items for a product, EPCII_EC allows users to import existing items from the database (refer to the illustration of an item and product model example in Fig. 10) to the product design. When an existing item is imported, the attributes that come with the item are also available to the product model. In spite of this, users may add new attributes to the item, depending on the design requirements of the product.

Besides adding items to a product model, users can create linkages to relate and interconnect the items. During the creation of a linkage, the user defines the attributes bound by this linkage, as Fig. 7
                         shows. In addition, EPCII_EC provides some supportive functions. For instance, users can remove items, attributes and linkages from the model, zoom in or zoom out of the graph and show the details of a specific item or linkage. EPCII_EC also provides the load and save functions to open or export existing product models.


                        
                           
                              •
                              
                                 Impact Identifier
                              

After the changing items are selected, an impact analysis can be performed by clicking the “Run Analysis” button on the toolbar. Then EPCII_EC automatically propagates the change and finds all of the impacted items. As the right screen of Fig. 8 shows, the impacted items are marked in purple, and a reporting window is displayed. For the readability, the impacted items are also highlighted using a bold-line box. As mentioned earlier, in practice, designers may encounter many ECs during the redesign phase. In this case, they can use EPCII_EC to simulate the holistic effects of changes and to compare the cost (in terms of change scope and the costs of different impacted items in different change cases) before they determine the change proposals.

In addition to searching for impacts of a change, the system also allows users to apply changes based on existing impact results. As mentioned earlier, in practice, change actions may arrive continually and often cause multiple changes to the same items. From the perspective of concurrent engineering, design engineers need a means to help them holistically and cumulatively comprehend the impact on product content from multiple change actions, especially for those items that are impacted by different change proposals. With the function in Impact Identifier, design engineers are able to reduce the duplicated effort of modifying the same items.

This section uses a product case to demonstrate the proposed work. Due to copyright and business security reasons, it is difficult to present the contents of commercial products. Hence we use a domestic product case where the product configuration information is freely available for this academic demonstration. Also, in the example, because the purpose is to demonstrate the mechanism of how items are connected and how they are identified due to a change, so we show only part of the product content and the parameters that are related to the demonstration.

In Taiwan, bicycles have been, and continue to be, an important means of transportation for people for both work and leisure. The manufacturing of bicycles (e.g. Giant, Merida) is an important industry serving not only Taiwan’s massive domestic needs but also the needs of worldwide markets. Due to the varieties of usage and the changing tastes of customers, the design of bicycles has to be frequently reviewed and changed. This study uses this product example to demonstrate the proposed work in variant product design. Fig. 9
                         illustrates the components of a bicycle. This study uses this information in the following demonstration.

Based on the model building process stated in Section  4, the items, items’ change attributes, linkages and associated attributes of the bicycle are defined via Model Builder. Fig. 10
                         shows a partial view of the product model. For reasons of business security, the contents of the product are only partially presented, and the attributes and the requirements in the example product are simplified for the ease of demonstration, since the real attributes are encoded and technically termed, based on the specific industrial domain. In this regard, there are over 50 items created. Each item is characterized by a number of change attributes that describe the physical and logical change of a product item. For example, the item Rim in the example has ‘material’ (physical) and ‘color’ (logical) attribute to characterize two change options on the item. Also, as Fig. 10 shows, the model does not have a conventional hierarchical product structure like BOM. This is because the linkages in the model not only describe the physical relationships but also capture the logical relationships of the items even they are not physically connected. For example, suppose that the sport version of this product model has a design requirement that the rim should have the same color with the body of the bicycle. Such a semantic or logical relationship is defined in the linkage between items Rim and Front Fork End, which connects to the main body (i.e. tubes, forks, etc.) with linkages that also contain the color attribute.

In a product model, multiple levels of linkages may occur when two assemblies have a linkage and their composing items have linkages too. If an assembly (an aggregate item) can be decomposed into items for CIA, the proposed work creates linkages at the item level, not the assembly level, for ensuring a better resolution and finer result of CIA (i.e. not stopping searching the impact at the assembly level). However, linkage is created at the assembly level if the assembly is regarded as an item and does not need to be decomposed. For example, in this product case, the Head Set is considered as an item, although it is an assembly. This is because the set is a ‘buy’ component from an external source and is less possible to further change the parts of the set. Therefore, it is regarded as an item in the example.

In the following demonstration, we present the scenario of a batch change to the product model. Fig. 11
                         is the screenshot of applying multiple changes to the model, for showing the capability of the system for handling multiple change attempts at once and providing an integrated and holistic impact scope of the entire product content due to these changes. Note that in the figure, the items in a dash-line box (e.g. SeatTube, ForkCrown and Rim in the diagram) are the initial changing items of the multiple changes, and the items in a bold-line box are the impacted items due to the changes.

Based on the results, this section further extends to some parts in order to verify how the changes will propagate among the components. As shown in Table 2, five product components, TopTube, SeatTube, DownTube, ChainWheelCrank and HeadTube, in the product model are selected, and they are connected by the linkages: TopTube-SeatTube, SeatTube-DownTube, DownTube-ChainWheelCrank, TopTube-HeadTube and DownTube-HeadTube. For example, the linkage TopTube-SeatTube has a bound attribute ‘diameter’ between components TopTube and SeatTube.

Suppose that we apply a ‘material’ change on component SeatTube. According to Table 2
                        , SeatTube has two related linkages (i.e. TopTube-SeatTube and SeatTube-DownTube) and the bound attributes are: 
                           
                              {
                              
                                 diameter
                              
                              ;
                              
                                 material
                              
                              ;
                              
                                 color
                              
                              ;
                              
                                 length
                              
                              ;
                              
                                 diameter
                              
                              }
                           
                        . The change of ‘material’ on SeatTube propagates to DownTube through linkage SeatTube-DownTube since it contains the ‘material’ attribute. When the change reaches the component DownTube, the propagation continues and searches the connecting linkages of DownTube. In this case, DownTube has three linkages (i.e. SeatTube-DownTube, DownTube-ChainWheelCrank and DownTube-HeadTube) and the bound attributes are: 
                           
                              {
                              
                                 material
                              
                              ;
                              
                                 color
                              
                              ;
                              
                                 length
                              
                              ;
                              
                                 diameter
                              
                              }
                           
                           ,
                           
                              {
                              
                                 material
                              
                              }
                           
                         and 
                           
                              {
                              
                                 diameter
                              
                              }
                           
                         respectively. Therefore, the change propagates to the component ChainWheelCrank by the linkage DownTube-ChainWheelCrank because of the material attribute. The change then stops since all of the linkages of the impacted items do not contain the attribute. Fig. 12
                         shows the result after having completed the CIA with system EPCII_EC.

In this section we comparatively evaluate the performance of the proposed work with manual CIA, since there are no existing computer-aided tools that have the capability of handling heterogeneous CIA and multiple change proposals to our knowledge. Apart from considering the general requirement of usability and user friendliness, which may not be suitable for research prototypes like the proposed one, we consider the efficiency (in terms of time performance) and effectiveness (in terms of costs) of the CIA, as they are the major performance concerns in CIA tasks. Hence, the comparisons focus on the value, in terms of transactional performance efficiency and accumulative cost effectiveness, of the proposed work.

The performance analysis covers a variety of aspects, for example, time spent on identifying the impacts of the change, accumulated time for performing a number of changes, and the increase in time as the scale of changes enlarges. Table 3
                         summarizes the comparison results. As the table shows, the measurement of change impact identification for the proposed work includes (1) the time performance 
                           
                              (
                              
                                 
                                    
                                       CT
                                    
                                 
                                 
                                    
                                       EPCII
                                    
                                    _
                                    
                                       EC
                                    
                                 
                              
                              )
                           
                         of the impact identifier function of the system and (2) the effort 
                           
                              (
                              
                                 
                                    
                                       INSP
                                    
                                 
                                 
                                    
                                       M
                                    
                                 
                              
                              )
                           
                         of the manual inspection that is employed in this evaluation to check the quality of the produced result. The manual inspection work also refers to the quality assurance task in Section  6.3. This study includes both tasks for a complete coverage of the entire CIA in the performance comparison.

The scale of change in the table refers to the number of initiated change items. For example, a value 5 in the scale of ECs means that 5 items in the product model are initially affected due to a single or batch change attempt. It is important to note again that the system allows for multiple concurrent entries of change attempts and generates the impact results collectively for the batch change attempts. Two output variable sets: 
                           
                              {
                              
                                 
                                    
                                       CT
                                    
                                 
                                 
                                    
                                       Manual
                                    
                                 
                              
                              ,
                              
                                 Δ
                              
                              
                                 
                                    
                                       CT
                                    
                                 
                                 
                                    
                                       Manual
                                    
                                 
                              
                              ,
                              
                                 
                                    
                                       AVG
                                    
                                 
                                 
                                    
                                       Manual
                                    
                                 
                              
                              }
                           
                         and 
                           
                              {
                              
                                 (
                                 
                                    
                                       
                                          CT
                                       
                                    
                                    
                                       
                                          EPCII
                                       
                                       _
                                       
                                          EC
                                       
                                    
                                 
                                 +
                                 
                                    
                                       
                                          INSP
                                       
                                    
                                    
                                       
                                          M
                                       
                                    
                                 
                                 )
                              
                              ,
                              
                                 Δ
                              
                              
                                 
                                    
                                       CT
                                    
                                 
                                 
                                    
                                       EPCII
                                    
                                    _
                                    
                                       EC
                                    
                                 
                              
                              ,
                              
                                 
                                    
                                       AVG
                                    
                                 
                                 
                                    
                                       EPCII
                                    
                                    _
                                    
                                       EC
                                    
                                 
                              
                              }
                           
                         denote the results of the execution time, the increased amount of time and the average time of manual CIA and the proposed tool based on the scale of changes. As the results show, there is a significant increase in the time taken (refer to the cycle time, i.e. CT in the table), in performing a CIA task in both cases, namely, 
                           
                              
                                 
                                    CT
                                 
                              
                              
                                 
                                    Manual
                                 
                              
                           
                         and 
                           
                              (
                              
                                 
                                    
                                       CT
                                    
                                 
                                 
                                    
                                       EPCII
                                    
                                    _
                                    
                                       EC
                                    
                                 
                              
                              +
                              
                                 
                                    
                                       INSP
                                    
                                 
                                 
                                    
                                       M
                                    
                                 
                              
                              )
                           
                        , as the scale of change increases. This is reasonable, since a larger scale of change often involves more affected items, resulting in an increase in the complexity of the impact analysis. In EPCII_EC, time performance shows a significant difference as the scale of the changes increase. The marginal analysis (
                           
                              Δ
                           
                           
                              
                                 
                                    CT
                                 
                              
                              
                                 
                                    Manual
                                 
                              
                           
                         vs. 
                           
                              Δ
                           
                           
                              
                                 
                                    CT
                                 
                              
                              
                                 
                                    EPCII
                                 
                                 _
                                 
                                    EC
                                 
                              
                           
                        ) also shows an increased benefit in terms of time saving (
                           
                              
                                 
                                    AVG
                                 
                              
                              
                                 
                                    Manual
                                 
                              
                           
                           −
                           
                              
                                 
                                    AVG
                                 
                              
                              
                                 
                                    EPCII
                                 
                                 _
                                 
                                    EC
                                 
                              
                           
                        ) as the scale of changes increases.

Because the outputs produced by a computing tool often have the intrinsic machine reliability problem, we also test the reliability performance of EPCII_EC. In this study, the reliability of the tool refers to the completeness check of the produced impact set. Type-I (error of redundancy) and Type-II (error of omission) errors [41,42] can be applied to see if EPCII_EC identifies an item as impacted on when it is actually not (false alarm) or when an impact item is omitted by the tool. The results of Type I and Type II errors are displayed as 
                           
                              
                                 
                                    ERR
                                 
                              
                              
                                 
                                    I
                                 
                              
                           
                         and 
                           
                              
                                 
                                    ERR
                                 
                              
                              
                                 
                                    II
                                 
                              
                           
                         respectively Table 3. In the analysis, the two types of errors are identified and corrected by the manual inspection (
                           
                              
                                 
                                    INSP
                                 
                              
                              
                                 
                                    M
                                 
                              
                           
                        ), therefore, the impact caused by the errors is reflected on the performance of 
                           
                              
                                 
                                    INSP
                                 
                              
                              
                                 
                                    M
                                 
                              
                           
                        . According to the aforementioned time-performance analysis, the work of 
                           
                              
                                 
                                    INSP
                                 
                              
                              
                                 
                                    M
                                 
                              
                           
                         shows acceptable results, suggesting that the errors do not cause a significant impact on the system performance of EPCII_EC.

The above performance evaluation shows that the proposed work is efficient. However, because the evaluation focuses on the transactional efficiency of a CIA task, it does not consider the time spent in constructing the product model in EPCII_EC. This refers to the setup cost of the product model, and is discussed in the following cost-effectiveness analysis.

This section evaluates the cost effectiveness of the proposed EPCII_EC tool. In order to yield a holistic result, the evaluation runs the CIA task 120 times and analyzes the cost savings collectively based on the 120 simulations. For each run of CIA, the starting items (initiated change items) and the associated firing attributes are randomly selected. In order to consider the following situations: (1) multiple or batch change attempts in a run and (2) a change that may apply to multiple items, each run involves a number of initiated change items ranging from one to six. Therefore, a random seed numbered from 1 to 6, depending on the number of initiated change items, is assigned to each run of the CIA. For example, two change proposals, changing the texture of Item A and the color of Item B are multiple change attempts with two initiated change items. In this case, the designer clicks on the “texture” and “color” attributes on the two items respectively and runs the CIA function. Once the initiated change items and number of change attempts for per CIA are set for the proposed work, the manual CIA is then assumed to run with the same setting. This random setting of changing items and firing attributes results in an uncontrolled impact scope, and is desired for the simulation purpose. This results in a dynamic complexity of each CIA task. The results, in terms of incurred efforts and costs, of the simulations are illustrated in Fig. 13
                        .

As Fig. 13(a) shows, two lines, i.e. manual CIA and EPCII_EC, represent the incurred accumulative costs in terms of the accumulated effort spent over the 120 runs. The distance between these two lines indicates the cost differences between the two cases. In this analysis, the manual CIA case does not necessarily require a product model. Therefore, in the figure, the cost of manual CIA refers to the effort of performing CIA; while the cost of the EPCII_EC case includes the effort for establishing (via the Model Builder function in the system) the product model and the effort for the manual inspection of the produced results. The establishment of a product change model is considered substantial because it requires human knowledge and effort to justify the attributes and linkages of product items of the model. The model is established once, and the cost for the setup in the case is 6300 NTD (3 man-hours times 2100 NTD per hour in Taiwan dollars). The manual inspection takes a random function that follows the range of the values measured from the previous performance analysis. After the 120 runs, the result indicates a positive difference (distance between the two lines), and the difference gradually increases as more CIA tasks are performed.

Besides the aforementioned direct measure of effort and cost for the CIA task, this study also analyzes two complexity factors, i.e. the complexity of changes and the complexity of the product model itself, in evaluating model effectiveness. For the complexity of the product model, it may affect the effectiveness of CIA in both cases. To handle this complexity, the evaluation has two treatments. First, both manual CIA and EPCII_EC operate on the same product. Second, once the initiated change items and number of change attempts are set for EPCII_EC, the manual CIA also takes the same setting to perform CIA. Based on the treatment on model complexity, we further look into the complexity of changes and analyze its relationship with the effectiveness of the proposed work. For the complexity of the 
                           i
                        th change (
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                        ), called impact complexity 
                           
                              
                                 
                                    IC
                                 
                              
                              
                                 i
                              
                           
                         in this study, is defined as: 
                           
                              
                                 
                                    IC
                                 
                              
                              
                                 i
                              
                           
                           =
                           
                              
                                 
                                    CI
                                 
                              
                              
                                 i
                              
                           
                           ×
                           
                              
                                 
                                    IM
                                 
                              
                              
                                 i
                              
                           
                        , where 
                           
                              
                                 
                                    CI
                                 
                              
                              
                                 i
                              
                           
                         is the number of initiated change items and 
                           
                              
                                 
                                    IM
                                 
                              
                              
                                 i
                              
                           
                         refers to the resulting impacted items due to 
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                        . The relationship between the complexity of change and the cost saving can be expressed as: 
                           
                              Δ
                           
                           
                              Eff
                           
                           
                              (
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              )
                           
                           =
                           
                              Δ
                           
                           
                              Eff
                           
                           
                              (
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                                 
                                    
                                       manual
                                    
                                 
                              
                              )
                           
                           −
                           
                              Δ
                           
                           
                              Eff
                           
                           
                              (
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                                 
                                    
                                       
                                          
                                             EPCII
                                          
                                       
                                       
                                          
                                             EC
                                          
                                       
                                    
                                 
                              
                              )
                           
                        , and is examined via the 120 runs of CIA. The results are illustrated in Fig. 13(b), in which the 
                           X
                         axis is 
                           
                              
                                 
                                    IC
                                 
                              
                              
                                 i
                              
                           
                         an 
                           Y
                         axis is 
                           
                              Δ
                           
                           
                              Eff
                           
                           
                              (
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              )
                           
                        . As the result suggests, the proposed work is effective in terms of efforts saving when the complexity of changes increases and becomes more significant as the number of runs of CIA accumulates.

In this section, the proposed work is compared with related works to discuss its value and contribution to the research of CIA in variant product design. The comparison focuses specifically on existing works that have the similar research purposes, i.e. to identify the contextual impacts of a change and to effectively handle multiple or concurrent changes during product redesign.

In the area of product redesign, several works  [39,40] have pointed out the need for the ability to handle contextual change impacts, as customization is highly demanded in today’s individualized market environments, and such customized designs often involve the amendment of both requirements and product components. Specifically, to identify the contextual impacts of a change, Koh et al.  [39] propose a similar work to assess the effects of engineering changes on both components and requirements. To enable the change propagation on components and requirements, the work utilizes DSM. The DSM approach was proposed for predicting sequential influences in engineering design by establishing the binary relationships of product items  [22]. Clarkson et al.  [40] improved the binary notation in DSM with numbers to denote the degree of relationship between two product items. In their study, the change propagation implicitly includes the traceability between product components and requirements. Then, Koh et al.  [39] extended the approach to explicitly include the contextual relationship between requirements and product components. In contrast, our proposed work contributes to providing semantic information, in terms of attributes, to describe the relationships between items in a product’s integrated content (requirements and components in this study), and therefore is able to further specify the semantics of an impact with finer granularity. Moreover, the proposed work is further implemented into a computerized tool, for being able to handle multiple change attempts (i.e. to make different changes at once).

In this section, the previous work is also revisited, for addressing the improvements (refer to Section  2.4) realized in the current interdisciplinary application. First, in terms of structural design, the self-reflective relationship situation is addressed in current design by revising the cardinality of relationships from Item to Linkage. Moreover, the polymorphism design is newly applied in the proposed work, for more flexibly and dynamically accepting and referring various subtypes of items and linkages. Second, in terms of behavioral design, the current work newly includes two algorithms for a better propagation termination and loop prevention, and has implemented them into the system. Third, the current work has a new capability to define generic attributes and then replicate them to the components that have the same feature. In the situation when many product components have the same attributes, this design feature helps increase the efficiency in building up a product model. This is done by the “predefined attributes” function in the system (refer to Fig. 10, for example). The attributes can be imported and be further overridden. Lastly, the proposed work allows users to record the CIA results, thus enabling designers to establish and reuse change patterns, for the purpose of a more effective propagation in similar changes. Change patterns, including the propagation pattern, may help in improving the bottleneck of CIA in this regard.

@&#DISCUSSION@&#


                        
                           
                              •
                              
                                 Completeness of the impact set
                              

For the proposed work, the attributes of product models play a critical role in minimizing the errors. In the work, the design rationale that the attributes of a product model are defined by users leads to the attributes in various levels of granularity. In this study, the attributes presented in the product case tend to be simpler and more abstract, for the purpose of ease of demonstration. As a result, redundancy errors are more likely to occur. To minimize such errors, attributes can be further refined and decomposed into to more specific ones (refer to “sub-attributes” stated in the definition of attributes in Section  3). However, the refinement of the attributes may also cause additional efforts in establishing the product model. Such a tradeoff should be considered when users apply the proposed work.


                        
                           
                              •
                              
                                 Completeness of item types in a product model: total quality concern
                              

Although this study focuses on requirements and product components, the proposed approach and the tool should extend to accommodate more customized usage and comprehensive coverage, such as including the aforementioned document impact. In the approach, the object-oriented design should allow users to add new types of items for a specific product model. In the case of including document types in the product model, users may use EPCII_EC to add a new item type for documents, to characterize the documents by using attributes as well, and then to specify the attributes for connecting the documents to product components and requirements. In future research, we would continue to develop EPCII_EC to include this extended functional feature.


                        
                           
                              •
                              
                                 Knowledge transfer issues
                              

Knowledge related to product structures and changes must be transferred into the system before it can assist users in analyzing and planning changes. Overall, change knowledge is represented in two parts of the proposed product model. As described in many related works, our linkages between attributes are the building blocks of static change knowledge, as a collection of linkages reflects how a change propagates within the product components. However, some kinds of change may be interacted with external factors (e.g., customer requirements). To capture such changes, the proposed model establishes a Change class that has associations with a set of linkages (and attributes) that are influenced by a specific type of change. This enables our system to deal with changing customer demands that static relationships between components cannot address.

However, building up all the linkages and the relations between Changes and Linkages often costs time and efforts from the users. The proposed system attempts to alleviate such burden with a convenient graphical user interface and an import function. If a user needs to represent products with a similar product structure or change pattern, our system provides the import function to load saved product data, in which the user does not need to begin from scratch. For the future works, we believe adopting a knowledge-based approach (e.g., ontology) will help reduce the human efforts. To further reduce the cognitive load of users, it is suggested that a similarity calculation function should be helpful to assist a user to find similar product components or change patterns.


                        
                           
                              •
                              
                                 Other research limitations and future work
                              

The third limitation relates to the flexibility of the establishment of product models. In contemporary manufacturing, a new product is often designed to share some parts or components with existing products  [43]. Therefore, the establishment of a new product model may involve reusing existing parts and assemblies, and it needs advanced functions for reusing and customizing existing contents in the CIA system. Specifically, when a product model is being composed, designers may seek suitable alternatives from existing parts of other products for a particular component in the product model. In this study, EPCII_EC allows designers to import an entire product model, not just particular parts or components. In the future, a knowledge-based design decision support system [44,45] could be further researched and incorporated into EPCII_EC, for better supporting the efficiency of the process in creating and ensuring the quality of product models. Finally, this study only presents a single product case. Although the evaluation of the case has considered the setup cost for the model establishment, the cost differences for establishing different product models was not analyzed. This is a limitation of current study. In general, the cost for establishing product model would increase as the model complexity increases. In the future we would conduct an empirical study for extending the analysis to see how the cost for establishing the product model varies according to the model complexity.

@&#CONCLUSION@&#

This research has proposed an attribute-based, object-oriented approach with a computerized implementation for efficiently and effectively performing CIA in variant product design. The approach has contributed to an integrated product model that comprises not only product components but also the requirements that relate the heterogeneous contents with linkages and attributes. It has also contributed to an object-oriented impact propagation mechanism that has addressed the issue of complicated and recursive processes in searching both the structural and contextual impacts. This paper has provided a product case and comparative analyses to show how users can perform the dynamic looping of change propagation effectively and efficiently. The computerized CIA prototype has also demonstrated the capability of handling multiple change attempts.

As an academic study with a research prototype, current development of the proposed work is unable to satisfy all needs, and future research is necessitated to continually improve the work. For example, owing to its limited research scope, the integrated product model presented in this paper demonstrates only components and requirements. In the future, the work would be extended to include more heterogeneous items, such as documents. Moreover, the refinement of the tool, such as the ability to add new item types, usability improvement and a Web version, will be further evolved. The proposed approach and its continued development would have one ultimate goal, to better support CIA in the integrated product development environments.

@&#ACKNOWLEDGMENT@&#

The authors thank the Taiwan’s Ministry of Science and Technology for financially supporting this study. We also thank the anonymous reviewers for their contributive comments.

@&#REFERENCES@&#

