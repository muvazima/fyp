@&#MAIN-TITLE@&#Distributed consolidation of virtual machines for power efficiency in heterogeneous cloud data centers

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose a game for reducing power consumption in data centers.


                        
                        
                           
                           We show that the game always converges to a pure Nash equilibrium.


                        
                        
                           
                           We establish upper bounds on the convergence time of the game.


                        
                        
                           
                           We prove that PoA
                              =1.23.


                        
                        
                           
                           We show that PoS
                              >1.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Green computing

Virtualization

Game theory

Cloud computing

Data center

@&#ABSTRACT@&#


               
               
                  Data centers use dynamic virtual machine consolidation to reduce power consumption. Existing consolidation mechanisms are not efficient in cloud data centers, which have heterogeneous hardware infrastructure, huge scale, and highly variable non-stationary workloads. We use game theory to develop a novel distributed mechanism for both heterogeneous and homogeneous data centers of cloud computing. Our mathematical analysis shows that our mechanism converges after a finite number of migrations. In addition, we show that our worst case power consumption is only 23% more than the theoretical minimum. In order to validate our claim, we preform simulation in CloudSim with real workload traces from Google data centers.
               
            

@&#INTRODUCTION@&#

Power consumption in data centers has recently increased due to Cloud Computing era and greater demand for Big Data applications. Reducing power consumption has become a commitment for preserving the environment. Virtualization technology enables us to cut power consumption considerably. In this technology, multiple instances of operating systems share a server. The server is called physical machine (PM) and each operating system is called virtual machine (VM). Live migration is used to move running VMs between different PMs without disconnecting applications. The data centers can benefit form live migration to reduce the number of running PMs and turning off the idle ones.

In the past, different consolidation methods have been deployed by transforming the consolidation problem to the well-known bin packing problem. They use centralized algorithms, developed based on bin packing solutions, to assign VMs to PMs [1–4]. Some researchers have recently argued against the centralized algorithms and raised questions about their elasticity and scalability [5–8]. They have proposed distributed and self-organized approaches to tackle this issue. Unfortunately, simulation and lab-scale experiments are usually used to validate the proposed methods.

Several attempts have been made in order to use mathematics to design a more efficient distributed mechanism for this problem. Mastroianni et al. used mathematical analysis to tune their mechanism but they did not give any analysis about its performance [9]. Ye and Chen took a step forward and used mathematical analysis to establish a bound on the efficiency of their distributed algorithm [10]. However, they assumed that all PMs are identical. As the data center scale increases, the amount of heterogeneity in the data center also increases [11–13]. The assumption that all PMs have the same capacity is obviously questionable [12,13]. Here, we develop a mathematical model for the dynamic consolidation problem in a data center equipped with heterogeneous servers.

We model a data center which consists of VMs hosted on PMs with different capacities. The PMs consume power proportionally to their loads. Our objective is to find the optimum mapping of VMs onto PMs that minimizes the social cost, i.e. the total power consumption of the whole data center. In order to meet agility and scalability, we assume that each VM can make decisions individually. In other words, there is no centralized decision maker.

Game theory has been used as a powerful tool to design and analyze some distributed systems and we believe that a cloud data center is not an exception. In our game model, we assume that each VM is the player that can choose any PM as a strategy. The chosen PM must certainly have sufficient residual capacity to host the VM. The player pays a cost depending on its strategy and the strategies of the others. The cost is the portion of power consumption of the chosen PM. Formally, when a VM with demand d is hosted on a PM with power consumption w and total demand 
                           
                              ς
                           
                        , its cost will be 
                           
                              w
                              
                                 
                                    d
                                 
                                 
                                    ς
                                 
                              
                           
                        . Since all the players (VM) prefer to pay less; they favors PMs with the least residual capacity. This allows us to turn off unloaded PMs. Generally speaking, this is in line with our objective (minimum total power consumption), but needs more assessment since selfish behavior of VMs may keep final mapping away from the optimum.

In game theory, the first issue is whether the game converges to a stable point (Nash equilibrium). The game reaches a Nash equilibrium when no VM can benefit from changing its strategy unilaterally. The other issue is the inefficiency of power consumption in an equilibrium with respect to the optimum. We use the price of anarchy (PoA) and the price of stability (PoS) concepts to measure this inefficiency. The PoA is defined as the ratio between the social cost in the worst equilibrium and the optimum. Similarly, the PoS is the ratio between the social cost in the best equilibrium and the optimum. The PoA establishes an upper bound on the worst case result. The PoS has a more delicate interpretation. If 
                           
                              PoS
                              =
                              1
                           
                         and we begin from an optimum mapping, then we can conclude that the selfish behavior of VMs cannot degrade that optimal mapping. Another important thing about the agility and applicability of the game in cloud computing is the convergence time. The convergences time is directly related to the number of migrations rquired to reach a Nash equilibrium.

The main contributions of this paper are:
                           
                              •
                              We propose a non-cooperative game for reducing power consumption in data centers with heterogeneous PMs.

We show that the game always converges to a pure Nash equilibrium.

We establish upper bounds on the convergence time of the game.

We prove that 
                                    
                                       PoA
                                       =
                                       1.23
                                    
                                 . This means that a data center, using our method, consumes at most 23% more than its minimum required power.

We show that 
                                    
                                       PoS
                                       >
                                       1
                                    
                                 . This means that the game sometimes degrades an optimal mapping and increases the total power consumption of the data center.

We evaluated our results by simulations using real-world workload traces from more than 6000VMs running on a Google data center [14]. For our power model, we use the latest published results of the standard benchmarks [15]. Experimental results support the above findings and, more interestingly, our method reaches the optimal mapping significantly closer than indicated by the theoretical upper bound. In addition, the convergence time is many orders of magnitude shorter.

The rest of the paper is organized as follows. In the next section, we review the related work. In Section 3, first, we define our problem formally, and then present our mathematical analysis in depth. Section 4 is devoted to simulation results. We conclude in Section 5.

@&#RELATED WORK@&#

Dynamic virtual machine consolidation mechanisms can be broadly categorized as the follows:
                        
                           •
                           Heuristics based on algorithms for bin packing.

Hierarchical solutions.

Mathematical optimization approaches.

Distributed and self-organized mechanisms.

Of course, each class has its merits and drawbacks. In the first category, the problem is transformed into a bin packing problem. The bin packing problem maps a given set of items of variable sizes onto the minimum number of unit-size bins. Despite the fact that the bin packing problem is NP-hard, near optimal solutions can be produced with approximation algorithms, for instance, Best Fit Decreasing (BDF) and First Fit Decreasing (FFD). Many heuristics have been developed based on approximation algorithms for dynamic virtual machine consolidation problem in the literature [1–4]. For example, Gao et al. [16], studied dynamic power management to achieve energy efficiency while ensuring compliance with service level agreement in cloud data centers. They used a heuristic, which is derived from BFD, to produce high quality mapping of virtual machines onto physical ones. While these works indicate important progress in energy efficiency of data centers, they share a major drawback. They are all based on centralized algorithms whose efficiency degrades as the size of the data center grows. In addition, they do not show any concrete proof about the quality of solutions and rely on experiments to support proposed solutions.

Hierarchical schemes have been used in some resource management systems, particularly in industry [17,18]. In this scheme, resource management systems are built on top of each other to solve the scale issue. One of the main issues with the hierarchical scheme is the lack of a good cluster level metric. The existing systems use physical machine level metrics such as CPU utilization. This metric does not seem to aggregate well for clusters. For example, a cluster consisting of 32 physical machines, with 2GHz CPU, will have a total of 64GHz CPU but this cluster cannot host a virtual machine with 4GHz CPU demand. In a nutshell, the resource management system could not benefit considerably from the hierarchical approach if the problem is not decomposed easily in a hierarchical manner. For instance, this is the case for entitlement computation in VMWare DRS [12].

On the other hand, dynamic virtual machine consolidation has been formulated as an optimization problem [19,20]. This approach assists researchers to incorporate a wide variety of factors such as migration cost and Service Level Agreement. The execution of a complex optimization algorithm may raise questions about the scalability of the approach. Therefore, some authors took some initial steps to mitigate this issue. For example, Sun et al. [21] proposed an Integer Linear Programming (ILP) approach to map large applications, modeled by Directed Acyclic Graphs (DAG), to heterogeneous clusters with minimal power consumption. To handle large scale problems, the size of ILP is reduced first. This work sounds promising but needs more assessment, since it still needs the whole status of a data center to be concentrated in one point.

Self-organized mechanism and protocols, for example gossip protocols and bio-inspired algorithms, are emerging as a powerful tool to manage resources in distributed systems and of course in cloud computing. V-MAN method has been developed based on gossip protocol used by physical machines to inform their loads to each other and transfer virtual machines from machines with lower loads to higher ones [6]. The author assumed that both physical machines and virtual machines are homogeneous. The second assumption is quite questionable and rare in the literature. Assuming that virtual machines are homogeneous, the consolidation problem is no longer NP-hard. We completely remove the homogeneity assumption in our work. Ant colony optimization is an example of bio-inspired algorithms. In this approach, some ants act like a probabilistic procedure to map virtual machines onto physical machines [9,7,8]. Unfortunately, due to the sequence of random decisions, the theoretical analysis is extremely complicated. Thus, researchers retreated to experimental results from mathematical analyses. In addition, although the convergence is guaranteed, the convergence time is uncertain.

As discussed previously, the common drawback of the prior distributed mechanisms is the lack of a concrete mathematical analysis on the quality of their results and some uncertainty about the convergence time. In this paper, we extend selfish bin packing game of Bilò [22] to propose a new approach to the problem of dynamic virtual machine consolidation. Inspired by the variable sized bin packing problem, we assume that physical machines have different capacities. In our game, the virtual machines, as players, try to reduce their share in the total power consumption by migrating to a more loaded physical machine without violating capacity constraints. We show that the game converges to a Nash equilibrium after a certain number of migrations. In fact, we find an upper bound for the number of migrations. Despite selfishness, we prove that the total power consumption could not be above 23% of the optimum. We support the efficiency and the scalability of our method not only by simulation but also by mathematical analysis.

In our consolidation problem, there are a set of VMs V which must be run on a set of heterogeneous PMs P. Our objective is to map V on a subset of P with the minimum power consumption. We assume that the PMs have different capacities to fulfill resource demand of the VMs. Let k denotes the number of distinct PM capacities available. Note that k equals one for homogeneous data centers. We normalize VM demands and PM capacities so that the largest PM has a capacity of one. We assume that the demand of VMs is not divisible so the demand of the largest VM cannot exceed one.

Let us define some functions formally before giving our mathematical analysis.
                        Definition 1
                        Let 
                              
                                 d
                                 :
                                 V
                                 
                                 ↦
                                 
                                 
                                    
                                       
                                          0
                                          ,
                                          1
                                       
                                    
                                 
                              
                            be defined as the demand of VM 
                              
                                 v
                                 ∈
                                 V
                              
                           
                        

Let 
                              
                                 q
                                 :
                                 P
                                 
                                 ↦
                                 
                                 
                                    
                                       
                                          0
                                          ,
                                          1
                                       
                                    
                                 
                              
                            be defined as the capacity of PM 
                              
                                 p
                                 ∈
                                 P
                              
                           
                        

Then we extend the definition of function d to operate on the subsets of VMs and PMs.
                        Definition 3
                        Assume that 
                              
                                 d
                                 (
                                 
                                    
                                       V
                                    
                                    
                                       ́
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       ∑
                                    
                                    
                                       v
                                       ∈
                                       
                                          
                                             V
                                          
                                          
                                             ́
                                          
                                       
                                    
                                 
                                 d
                                 (
                                 v
                                 )
                              
                            where 
                              
                                 
                                    
                                       V
                                    
                                    
                                       ́
                                    
                                 
                                 ⊆
                                 V
                              
                           
                        

Assume that 
                              
                                 d
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       ́
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       ∑
                                    
                                    
                                       v
                                       ∈
                                       
                                          
                                             V
                                          
                                          
                                             ́
                                          
                                       
                                    
                                 
                                 d
                                 (
                                 v
                                 )
                              
                            where 
                              
                                 
                                    
                                       V
                                    
                                    
                                       ́
                                    
                                 
                                 =
                                 {
                                 v
                                 ∈
                                 V
                                 |
                                 v
                              
                            is running on 
                              
                                 p
                                 ∈
                                 
                                    
                                       P
                                    
                                    
                                       ́
                                    
                                 
                                 }
                              
                           
                        

Assume that 
                              
                                 q
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       ́
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       ∑
                                    
                                    
                                       p
                                       ∈
                                       
                                          
                                             P
                                          
                                          
                                             ́
                                          
                                       
                                    
                                 
                                 q
                                 (
                                 p
                                 )
                              
                            where 
                              
                                 
                                    
                                       P
                                    
                                    
                                       ́
                                    
                                 
                                 ⊆
                                 P
                              
                           
                        

The utilization of PM p is
                              
                                 (1)
                                 
                                    u
                                    (
                                    
                                       
                                          p
                                       
                                       
                                          j
                                       
                                    
                                    )
                                    
                                    ≜
                                    
                                    
                                       
                                          d
                                          (
                                          
                                             
                                                p
                                             
                                             
                                                j
                                             
                                          
                                          )
                                       
                                       
                                          q
                                          (
                                          
                                             
                                                p
                                             
                                             
                                                j
                                             
                                          
                                          )
                                       
                                    
                                 
                              
                           
                        

We assume that the power consumption of a PM 
                        
                           w
                           (
                           
                              
                                 p
                              
                              
                                 j
                              
                           
                           )
                        
                      is a linear function of utilization [23–25]. When a PM is not used, we turn it off. Thus the following definition can be given:
                        Definition 7
                        The power consumption of PM p is
                              
                                 
                                    w
                                    (
                                    
                                       
                                          p
                                       
                                       
                                          j
                                       
                                    
                                    )
                                    
                                    ≜
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            a
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            b
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      u
                                                      (
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      u
                                                      (
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      )
                                                      >
                                                      0
                                                   
                                                
                                                
                                                   
                                                      0
                                                   
                                                   
                                                      u
                                                      (
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      )
                                                      =
                                                      0
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

A power aware game is defined as a consolidation problem with selfish VMs as players. The players prefer a PM with less cost. The cost of the VM v that chooses the PM p is 
                        
                           
                              
                                 d
                                 (
                                 v
                                 )
                              
                              
                                 d
                                 (
                                 p
                                 )
                              
                           
                           w
                           (
                           p
                           )
                        
                     . The Motivation behind this definition is to minimize the share of each VM in total power consumption. The cost can be rewritten as follows:
                        
                           (8)
                           
                              c
                              (
                              v
                              ,
                              p
                              )
                              =
                              
                              
                                 
                                    d
                                    (
                                    v
                                    )
                                 
                                 
                                    d
                                    (
                                    p
                                    )
                                 
                              
                              w
                              (
                              p
                              )
                           
                        
                     
                     
                        
                           (9)
                           
                              =
                              
                              
                                 
                                    d
                                    (
                                    v
                                    )
                                 
                                 
                                    d
                                    (
                                    p
                                    )
                                 
                              
                              [
                              a
                              ·
                              q
                              (
                              p
                              )
                              +
                              b
                              ·
                              d
                              (
                              p
                              )
                              ]
                           
                        
                     
                     
                        
                           (10)
                           
                              =
                              
                              a
                              ·
                              q
                              (
                              p
                              )
                              
                                 
                                    d
                                    (
                                    v
                                    )
                                 
                                 
                                    d
                                    (
                                    p
                                    )
                                 
                              
                              +
                              b
                              ·
                              d
                              (
                              v
                              )
                           
                        
                     
                  

Obviously, the choice of the PM by the VM only changes the first product in (10), thereby we can ignore the second one for simplicity. Also, we ignore the constant coefficient a.
                        Definition 8
                        The cost of v when it runs on p is
                              
                                 (11)
                                 
                                    c
                                    (
                                    v
                                    ,
                                    p
                                    )
                                    
                                    ≜
                                    
                                    q
                                    (
                                    p
                                    )
                                    
                                       
                                          d
                                          (
                                          v
                                          )
                                       
                                       
                                          d
                                          (
                                          p
                                          )
                                       
                                    
                                 
                              
                           
                        


                           The heterogeneous power aware game always converges to a Nash equilibrium.
                        

First let us define the inverse of utilization for each active PM (
                              
                                 d
                                 (
                                 
                                    
                                       p
                                    
                                    
                                       j
                                    
                                 
                                 )
                                 >
                                 0
                              
                           ).
                              
                                 (12)
                                 
                                    
                                       
                                          γ
                                       
                                       
                                          j
                                       
                                    
                                    
                                    ≜
                                    
                                    
                                       
                                          q
                                          (
                                          
                                             
                                                p
                                             
                                             
                                                j
                                             
                                          
                                          )
                                       
                                       
                                          d
                                          (
                                          
                                             
                                                p
                                             
                                             
                                                j
                                             
                                          
                                          )
                                       
                                    
                                 
                              
                           
                        

Consider a desired mapping of VMs onto PMs. Sort the PMs based on 
                              
                                 γ
                              
                            starting from the smallest 
                              
                                 γ
                              
                            and generate an ordered list M. If it is not an equilibrium then we have two PMs 
                              
                                 
                                    
                                       p
                                    
                                    
                                       x
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       p
                                    
                                    
                                       y
                                    
                                 
                              
                            and a VM v located on 
                              
                                 
                                    
                                       p
                                    
                                    
                                       x
                                    
                                 
                              
                            such that v fits into 
                              
                                 
                                    
                                       p
                                    
                                    
                                       y
                                    
                                 
                              
                            and 
                              
                                 c
                                 (
                                 v
                                 ,
                                 
                                    
                                       p
                                    
                                    
                                       y
                                    
                                 
                                 )
                                 <
                                 c
                                 (
                                 v
                                 ,
                                 
                                    
                                       p
                                    
                                    
                                       x
                                    
                                 
                                 )
                              
                           . After migration reorder the PMs based on 
                              
                                 γ
                              
                            again and call it 
                              
                                 
                                    
                                       M
                                    
                                    
                                       ′
                                    
                                 
                              
                           , in which only 
                              
                                 
                                    
                                       γ
                                    
                                    
                                       x
                                    
                                 
                              
                            of 
                              
                                 
                                    
                                       p
                                    
                                    
                                       x
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       γ
                                    
                                    
                                       y
                                    
                                 
                              
                            of 
                              
                                 
                                    
                                       p
                                    
                                    
                                       y
                                    
                                 
                              
                            change to new values 
                              
                                 
                                    
                                       γ
                                    
                                    
                                       x
                                    
                                    
                                       ′
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       γ
                                    
                                    
                                       y
                                    
                                    
                                       ′
                                    
                                 
                              
                            respectively. Since 
                              
                                 c
                                 (
                                 v
                                 ,
                                 
                                    
                                       p
                                    
                                    
                                       y
                                    
                                 
                                 )
                                 <
                                 c
                                 (
                                 v
                                 ,
                                 
                                    
                                       p
                                    
                                    
                                       x
                                    
                                 
                                 )
                              
                            we have
                              
                                 (13)
                                 
                                    q
                                    (
                                    
                                       
                                          p
                                       
                                       
                                          y
                                       
                                    
                                    )
                                    
                                       
                                          d
                                          (
                                          v
                                          )
                                       
                                       
                                          
                                             
                                                d
                                             
                                             
                                                ′
                                             
                                          
                                          (
                                          
                                             
                                                p
                                             
                                             
                                                y
                                             
                                          
                                          )
                                       
                                    
                                    <
                                    q
                                    (
                                    
                                       
                                          p
                                       
                                       
                                          x
                                       
                                    
                                    )
                                    
                                       
                                          d
                                          (
                                          v
                                          )
                                       
                                       
                                          d
                                          (
                                          
                                             
                                                p
                                             
                                             
                                                x
                                             
                                          
                                          )
                                       
                                    
                                 
                              
                           and then 
                              
                                 
                                    
                                       γ
                                    
                                    
                                       y
                                    
                                    
                                       ′
                                    
                                 
                                 <
                                 
                                    
                                       γ
                                    
                                    
                                       x
                                    
                                 
                              
                           . It is strightforward to verify that 
                              
                                 
                                    
                                       γ
                                    
                                    
                                       x
                                    
                                 
                                 <
                                 
                                    
                                       γ
                                    
                                    
                                       x
                                    
                                    
                                       ′
                                    
                                 
                              
                           . Therefore, 
                              
                                 
                                    
                                       p
                                    
                                    
                                       y
                                    
                                 
                              
                            will be placed in a position before 
                              
                                 
                                    
                                       p
                                    
                                    
                                       x
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       M
                                    
                                    
                                       ′
                                    
                                 
                              
                            will be lexicographically less than M. The set of possible mapping is finite; hence sequence of migrations converges to a local minimum after a finite number of migrations. □

Let 
                        
                           n
                           =
                           |
                           V
                           |
                        
                      denotes the number of VMs in a data center. We prove the following theorem for the number of migrations to reach an equilibrium.
                        Theorem 2
                        
                           The heterogeneous power aware game converges to a Nash equilibrium after at most 
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       m
                                       =
                                       d
                                       (
                                       V
                                       )
                                    
                                    
                                       n
                                    
                                 
                                 
                                    
                                       k
                                    
                                    
                                       m
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   n
                                                
                                             
                                             
                                                
                                                   m
                                                
                                             
                                          
                                       
                                    
                                 
                              
                            
                           migrations.
                        

It is obvious that the number of different ordered lists (sorted PMs based on 
                              
                                 γ
                              
                           ) is bounded by the number of different mappings of VMs onto PMs. Hence, it is sufficient to find an upper bound for the number of mappings.

We have 
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   n
                                                
                                             
                                             
                                                
                                                   m
                                                
                                             
                                          
                                       
                                    
                                 
                              
                            ways to divide the set of n VMs into m disjoint subsets in which 
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   n
                                                
                                             
                                             
                                                
                                                   m
                                                
                                             
                                          
                                       
                                    
                                 
                              
                            is the Stirling number of the second kind. Each subset can be hosted by one PM. Assume that we have k types of PMs. PMs of the same type have the same capacity and are not distinguishable. Thus, each subset has k different choices and we have 
                              
                                 
                                    
                                       k
                                    
                                    
                                       m
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   n
                                                
                                             
                                             
                                                
                                                   m
                                                
                                             
                                          
                                       
                                    
                                 
                              
                            mappings of n VMs on m PMs, provided that each PM must host at least one VM. In other words, we must have exactly m PMs. But this is not always the case.

In the worst case, n VMs scatter on n PMs so 
                              
                                 
                                    
                                       m
                                    
                                    
                                       max
                                    
                                 
                                 =
                                 n
                              
                           . In the best case, all VMs are mapped on 
                              
                                 
                                    
                                       m
                                    
                                    
                                       min
                                    
                                 
                                 =
                                 
                                    
                                       
                                          d
                                          (
                                          V
                                          )
                                          /
                                          
                                             
                                                q
                                             
                                             
                                                max
                                             
                                          
                                       
                                    
                                 
                              
                            where 
                              
                                 d
                                 (
                                 V
                                 )
                                 =
                                 
                                    
                                       ∑
                                    
                                    
                                       v
                                       ∈
                                       V
                                    
                                 
                                 d
                                 (
                                 v
                                 )
                              
                            and 
                              
                                 
                                    
                                       q
                                    
                                    
                                       max
                                    
                                 
                              
                            is the capacity of the largest PM. Due to the normalized capacity assumption (
                              
                                 
                                    
                                       q
                                    
                                    
                                       max
                                    
                                 
                                 =
                                 1
                              
                           ), we obtain 
                              
                                 
                                    
                                       m
                                    
                                    
                                       min
                                    
                                 
                                 =
                                 
                                    
                                       
                                          d
                                          (
                                          V
                                          )
                                       
                                    
                                 
                              
                           . Thus the number of mappings will be [26]
                           
                              
                                 (14)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             =
                                             d
                                             (
                                             V
                                             )
                                          
                                          
                                             n
                                          
                                       
                                    
                                    
                                       
                                          k
                                       
                                       
                                          m
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      n
                                                   
                                                
                                                
                                                   
                                                      m
                                                   
                                                
                                             
                                          
                                       
                                    
                                    ⩽
                                    
                                       
                                          
                                             
                                                k
                                                
                                                   
                                                      0.792
                                                      n
                                                   
                                                   
                                                      ln
                                                      (
                                                      n
                                                      +
                                                      1
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                       
                                          n
                                       
                                    
                                    
                                    □
                                 
                              
                           
                        

In large data centers, we observe large number of VMs with the same amount of demand [14]. These VMs could not be distinguished easily. It is obvious that more indistinguishable VMs equals less permutations and shorter convergence time. We can derive a smaller upper bound for the convergence time in a discrete demand setting where the number of different VMs demand is not infinite and is equal to h.
                        Theorem 3
                        
                           A heterogeneous power aware game under discrete demand setting reaches a Nash equilibrium in at most 
                           
                              
                                 O
                                 
                                    
                                       
                                          
                                             
                                                ∏
                                             
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                h
                                             
                                          
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      j
                                                      =
                                                      1
                                                   
                                                   
                                                      k
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     q
                                                                  
                                                                  
                                                                     j
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  
                                                                     d
                                                                  
                                                                  
                                                                     i
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                                -
                                                k
                                             
                                          
                                       
                                    
                                 
                              
                            
                           migrations.
                        

We know that the number of partitions of n objects into elements of 
                              
                                 A
                                 =
                                 {
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 
                                    
                                       
                                          A
                                       
                                    
                                 
                                 }
                              
                            will be
                              
                                 (15)
                                 
                                    
                                       
                                          φ
                                       
                                       
                                          A
                                       
                                    
                                    (
                                    n
                                    )
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∏
                                                   
                                                   
                                                      α
                                                      ∈
                                                      A
                                                   
                                                
                                             
                                             
                                                
                                                   α
                                                
                                                
                                                   -
                                                   1
                                                
                                             
                                          
                                       
                                    
                                    ·
                                    
                                       
                                          
                                             
                                                n
                                             
                                             
                                                
                                                   
                                                      A
                                                   
                                                
                                                -
                                                1
                                             
                                          
                                       
                                       
                                          (
                                          
                                             
                                                
                                                   A
                                                
                                             
                                          
                                          -
                                          1
                                          )
                                          !
                                       
                                    
                                    +
                                    O
                                    (
                                    
                                       
                                          n
                                       
                                       
                                          
                                             
                                                A
                                             
                                          
                                          -
                                          2
                                       
                                    
                                    )
                                 
                              
                           where A has 
                              
                                 
                                    
                                       
                                          A
                                       
                                    
                                 
                              
                            elements [27]. Let 
                              
                                 
                                    
                                       V
                                    
                                    
                                       i
                                    
                                 
                              
                            (
                              
                                 1
                                 ⩽
                                 i
                                 ⩽
                                 h
                              
                           ) be the subset of VMs with demand 
                              
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                              
                           , and 
                              
                                 
                                    
                                       P
                                    
                                    
                                       j
                                    
                                 
                              
                            (
                              
                                 1
                                 ⩽
                                 j
                                 ⩽
                                 k
                              
                           ) be the subset of PMs with capacity 
                              
                                 
                                    
                                       q
                                    
                                    
                                       j
                                    
                                 
                              
                           . Since at most 
                              
                                 
                                    
                                       α
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      q
                                                   
                                                   
                                                      j
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                            of 
                              
                                 v
                                 ∈
                                 
                                    
                                       V
                                    
                                    
                                       i
                                    
                                 
                              
                            could be hosted in 
                              
                                 p
                                 ∈
                                 
                                    
                                       P
                                    
                                    
                                       j
                                    
                                 
                              
                           , the number of mapping of 
                              
                                 v
                                 ∈
                                 
                                    
                                       V
                                    
                                    
                                       i
                                    
                                 
                              
                            onto 
                              
                                 p
                                 ∈
                                 
                                    
                                       P
                                    
                                    
                                       j
                                    
                                 
                              
                            will be
                              
                                 (16)
                                 
                                    
                                       
                                          φ
                                       
                                       
                                          
                                             
                                                A
                                             
                                             
                                                i
                                                ,
                                                j
                                             
                                          
                                       
                                    
                                    (
                                    
                                       
                                          n
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∏
                                                   
                                                   
                                                      α
                                                      ∈
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            i
                                                            ,
                                                            j
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   α
                                                
                                                
                                                   -
                                                   1
                                                
                                             
                                          
                                       
                                    
                                    ·
                                    
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                             
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      i
                                                      ,
                                                      j
                                                   
                                                
                                                -
                                                1
                                             
                                          
                                       
                                       
                                          (
                                          
                                             
                                                α
                                             
                                             
                                                i
                                                ,
                                                j
                                             
                                          
                                          -
                                          1
                                          )
                                          !
                                       
                                    
                                    +
                                    O
                                    (
                                    
                                       
                                          n
                                       
                                       
                                          i
                                       
                                       
                                          
                                             
                                                α
                                             
                                             
                                                i
                                                ,
                                                j
                                             
                                          
                                          -
                                          2
                                       
                                    
                                    )
                                 
                              
                           where 
                              
                                 
                                    
                                       A
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       
                                          1
                                          ,
                                          2
                                          ,
                                          …
                                          
                                             
                                                α
                                             
                                             
                                                i
                                                ,
                                                j
                                             
                                          
                                       
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                V
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                              
                           . When these VMs could run on all PMs 
                              
                                 p
                                 ∈
                                 P
                              
                            (not only 
                              
                                 p
                                 ∈
                                 
                                    
                                       P
                                    
                                    
                                       j
                                    
                                 
                              
                           ), the number of mappings will be upper bounded by 
                              
                                 
                                    
                                       ∏
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       k
                                    
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       
                                          
                                             A
                                          
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                    
                                 
                                 (
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                           . Multiplying this number (for all h distinct VM demand) gives us an upper bound for all mappings of VMs onto PMs
                              
                                 (17)
                                 
                                    
                                       
                                          
                                             ∏
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             h
                                          
                                       
                                    
                                    
                                    
                                       
                                          
                                             ∏
                                          
                                          
                                             j
                                             =
                                             1
                                          
                                          
                                             k
                                          
                                       
                                    
                                    
                                       
                                          φ
                                       
                                       
                                          
                                             
                                                A
                                             
                                             
                                                i
                                                ,
                                                j
                                             
                                          
                                       
                                    
                                    (
                                    
                                       
                                          n
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    ∼
                                    O
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∏
                                                   
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   
                                                      h
                                                   
                                                
                                             
                                             
                                                
                                                   n
                                                
                                                
                                                   i
                                                
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            j
                                                            =
                                                            1
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        q
                                                                     
                                                                     
                                                                        j
                                                                     
                                                                  
                                                               
                                                               
                                                                  
                                                                     
                                                                        d
                                                                     
                                                                     
                                                                        i
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   -
                                                   k
                                                
                                             
                                          
                                       
                                    
                                    
                                    □
                                 
                              
                           
                        

In large data center, the number of PMs is too large. In comparison, the number of PM types is rather small 
                        
                           k
                           ≪
                           |
                           P
                           |
                        
                     . This led us to develop the following.
                        Theorem 4
                        
                           Total used capacity of PMs in a Nash equilibrium is asymptotically bounded by twice the optimum capacity.
                        

Let 
                              
                                 
                                    
                                       P
                                    
                                    
                                       N
                                    
                                 
                              
                            denotes the subset of PMs used in a Nash equilibrium. We use 
                              
                                 
                                    
                                       B
                                    
                                    
                                       i
                                    
                                 
                              
                            to denote the subset of PMs of capacity 
                              
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                              
                            in 
                              
                                 
                                    
                                       P
                                    
                                    
                                       N
                                    
                                 
                              
                           . It is impossible for two PMs of 
                              
                                 
                                    
                                       B
                                    
                                    
                                       i
                                    
                                 
                              
                            to be at most half full because such possibility contradicts the Nash equilibrium. Assume that you have two such PMs 
                              
                                 
                                    
                                       p
                                    
                                    
                                       1
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       p
                                    
                                    
                                       2
                                    
                                 
                              
                            and also 
                              
                                 d
                                 (
                                 
                                    
                                       p
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 ⩽
                                 d
                                 (
                                 
                                    
                                       p
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 <
                                 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       2
                                    
                                 
                              
                           . The content of 
                              
                                 
                                    
                                       p
                                    
                                    
                                       1
                                    
                                 
                              
                            can move to 
                              
                                 
                                    
                                       p
                                    
                                    
                                       2
                                    
                                 
                              
                            and enjoy less cost. Thus all 
                              
                                 p
                                 ∈
                                 
                                    
                                       B
                                    
                                    
                                       i
                                    
                                 
                              
                            PMs except one of them are more than half full. We can neglect this exception and write
                              
                                 (18)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             p
                                             ∈
                                             
                                                
                                                   B
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          q
                                          (
                                          p
                                          )
                                       
                                       
                                          2
                                       
                                    
                                    ⩽
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             p
                                             ∈
                                             
                                                
                                                   B
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    d
                                    (
                                    p
                                    )
                                    =
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             v
                                             ∈
                                             
                                                
                                                   V
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    d
                                    (
                                    v
                                    )
                                 
                              
                           where 
                              
                                 
                                    
                                       V
                                    
                                    
                                       i
                                    
                                 
                              
                            is subset of VMs hosted by 
                              
                                 
                                    
                                       B
                                    
                                    
                                       i
                                    
                                 
                              
                           . Certainly, this holds for every 
                              
                                 i
                                 ∈
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 k
                                 }
                              
                           . Therefore,
                              
                                 (19)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             p
                                             ∈
                                             
                                                
                                                   P
                                                
                                                
                                                   N
                                                
                                             
                                          
                                       
                                    
                                    q
                                    (
                                    p
                                    )
                                    ⩽
                                    2
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             v
                                             ∈
                                             V
                                          
                                       
                                    
                                    d
                                    (
                                    v
                                    )
                                 
                              
                           Note that the optimum capacity could not be less than the total demand 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       v
                                       ∈
                                       V
                                    
                                 
                                 d
                                 (
                                 v
                                 )
                              
                            and this proves the theorem.□


                           The price of anarchy of heterogeneous power aware game is 
                           
                              
                                 1
                                 +
                                 
                                    
                                       a
                                    
                                    
                                       a
                                       +
                                       b
                                    
                                 
                              
                           
                           .
                        

According to the definition (
                              
                                 PoA
                                 =
                                 
                                    
                                       max
                                       
                                       
                                          
                                             w
                                          
                                          
                                             N
                                          
                                       
                                    
                                    
                                       
                                          
                                             w
                                          
                                          
                                             ∗
                                          
                                       
                                    
                                 
                              
                           ) is the ratio between the worst equilibrium 
                              
                                 (
                                 max
                                 
                                 
                                    
                                       w
                                    
                                    
                                       N
                                    
                                 
                                 )
                              
                            and the minimum power consumption 
                              
                                 (
                                 
                                    
                                       w
                                    
                                    
                                       ∗
                                    
                                 
                                 )
                              
                           . From (7), 
                              
                                 w
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                            the total power consumption of a set of VMs running on a subset of 
                              
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                                 ⊆
                                 P
                              
                            PMs will be
                              
                                 (20)
                                 
                                    w
                                    (
                                    
                                       
                                          P
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    =
                                    
                                    a
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             p
                                             ∈
                                             
                                                
                                                   P
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                    q
                                    (
                                    p
                                    )
                                    +
                                    b
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             p
                                             ∈
                                             
                                                
                                                   P
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                    d
                                    (
                                    p
                                    )
                                 
                              
                           
                           
                              
                                 (21)
                                 
                                    =
                                    
                                    a
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             p
                                             ∈
                                             
                                                
                                                   P
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                    q
                                    (
                                    p
                                    )
                                    +
                                    b
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             v
                                             ∈
                                             V
                                          
                                       
                                    
                                    d
                                    (
                                    v
                                    )
                                 
                              
                           
                           
                              
                                 (22)
                                 
                                    =
                                    
                                    a
                                    ·
                                    q
                                    (
                                    
                                       
                                          P
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    +
                                    b
                                    ·
                                    d
                                    (
                                    V
                                    )
                                 
                              
                           Let 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       ∗
                                    
                                 
                              
                            denotes the optimum capacity to host the total demand
                              
                                 (23)
                                 
                                    PoA
                                    =
                                    
                                       
                                          a
                                          ·
                                          
                                             max
                                          
                                          
                                          {
                                          q
                                          (
                                          
                                             
                                                P
                                             
                                             
                                                N
                                             
                                          
                                          )
                                          }
                                          +
                                          b
                                          ·
                                          d
                                          (
                                          V
                                          )
                                       
                                       
                                          a
                                          ·
                                          
                                             
                                                Q
                                             
                                             
                                                ∗
                                             
                                          
                                          +
                                          b
                                          ·
                                          d
                                          (
                                          V
                                          )
                                       
                                    
                                 
                              
                           From Theorem 4, we know that 
                              
                                 max
                                 
                                 {
                                 q
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       N
                                    
                                 
                                 )
                                 }
                                 ⩽
                                 2
                                 d
                                 (
                                 v
                                 )
                              
                           . In addition, it is obvious that 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       ∗
                                    
                                 
                                 ⩾
                                 d
                                 (
                                 V
                                 )
                              
                           . Just replace 
                              
                                 max
                                 
                                 {
                                 q
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       N
                                    
                                 
                                 )
                                 }
                              
                            and 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       ∗
                                    
                                 
                              
                            in (23) and rewrite
                              
                                 (24)
                                 
                                    PoA
                                    ⩽
                                    
                                       
                                          2
                                          a
                                          ·
                                          d
                                          (
                                          V
                                          )
                                          +
                                          b
                                          ·
                                          d
                                          (
                                          V
                                          )
                                       
                                       
                                          a
                                          ·
                                          d
                                          (
                                          V
                                          )
                                          +
                                          b
                                          ·
                                          d
                                          (
                                          V
                                          )
                                       
                                    
                                    =
                                    1
                                    +
                                    
                                       
                                          a
                                       
                                       
                                          a
                                          .
                                          +
                                          b
                                       
                                    
                                    
                                    □
                                 
                              
                           
                        

In a heterogeneous power aware game, selfishness sometimes degrades the final result. For instance, in Fig. 1
                     , the mapping on the left side is an optimum mapping but not a Nash equilibrium; in contrast to the right one that is a Nash equilibrium but not an optimum mapping. There is no reason for the VMs in the larger PM to stay there; one of them can migrate to the smaller PM in order to pay less (reducing its cost from 1/2 to 1/3). However, this selfish migration costs the whole system 1/3 (increasing the social cost from 1 to 4/3). Therefore, we establish the following.
                        Corollary 1
                        
                           The PoS of the heterogeneous power aware game is greater than one.
                        

@&#RESULTS@&#

We integrated our mechanism in CloudSim environment [28]. We simulated the proposed game on homogeneous and heterogeneous environments by using cases generated randomly from uniform distribution and real data extracted from the Google trace [14]. We compared our results with some high quality centralized solutions such as Best Fit Decreasing (BFD), min Power Priority (mPP), (mPP-iFFD) [1], Modified Best Fit Decreasing (MBFD) [2] and F4G-CG 
                     [16]. The result of simulation shows that our game converges to a mapping with comparable power consumption in an acceptable time.

We repeated each experiment 1000 times and changed the initial profile for each scenario on occasions that might change outcomes. We looked into three characteristics of the game results; Price of Anarchy (PoA): ratio of the worst equilibrium to the social optimum, Price of Stability (PoS): ratio of the best equilibrium to the social optimum, and the ratio of the average equilibrium to the social optimum (AVG).

The cost of equilibrium is calculated as aggregate power of active machines 
                        
                           C
                           =
                           
                              
                                 ∑
                              
                              
                                 j
                                 =
                                 1
                              
                              
                                 |
                                 P
                                 |
                              
                           
                           w
                           (
                           
                              
                                 p
                              
                              
                                 j
                              
                           
                           )
                        
                     . As discussed, 
                        
                           w
                           (
                           
                              
                                 p
                              
                              
                                 j
                              
                           
                           )
                        
                      function uses PM dependent variables 
                        
                           
                              
                                 a
                              
                              
                                 j
                              
                           
                        
                      and 
                        
                           
                              
                                 b
                              
                              
                                 j
                              
                           
                        
                     . Table 1
                      illustrates the specification of PM types which is inspired by Google trace. Google trace does not determine the exact specification of PMs used in the data center. It only reports relative capacity of PMs. For simulation, we assume that PM types are equipped with Intel Xeon E5 v2 family processors with 10, 20 and 40 cores to hold the reported relative capacity. We approximated 
                        
                           
                              
                                 a
                              
                              
                                 j
                              
                           
                        
                      and 
                        
                           
                              
                                 b
                              
                              
                                 j
                              
                           
                        
                      based on results of industry benchmark [15].

In fact, finding the actual social optimum, i.e. the minimum total power consumption, is NP-hard [1]. Thereby, we choose the most cost effective PM type in respect to power consumption (type 3) and consider all VMs run only on machines of type 3. Assuming that the number of active machines is equal to aggregate of VM demands divided by capacity of type 3,
                        1
                        The capacity of type 3 is 1.
                     
                     
                        1
                      the social optimum will be:
                        
                           (25)
                           
                              
                                 
                                    SO
                                 
                                 
                                    power
                                 
                              
                              =
                              286
                              ×
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       v
                                       ∈
                                       V
                                    
                                 
                              
                              u
                              (
                              v
                              )
                              +
                              88
                              ×
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       v
                                       ∈
                                       V
                                    
                                 
                              
                              u
                              (
                              v
                              )
                           
                        
                     
                  

Note that the number of machines is not rounded up. Obviously, the aggregate of VM demands is not essentially multiple of PM capacity but we hold this unrealistic assumption to calculate the lower bound of the minimum total power consumption.

In our experiments, random values are drawn from uniform distribution and real values are Google trace data from TraceVersion2 [14], both normalized to be in range (0,1]. Google trace data is a record of about 12,500 machines of Google over 29days and comprises information of both PMs and VMs in the fields of CPU, memory and disk usage. Among them, only CPU supports active low power modes, whereas others could only be completely or partially switched off. Server CPUs can consume less than 25% of their peak power in low activity modes leading to a dynamic power range of more than 75% of the peak power [15].

Therefore, like most studies, we are only concerned about the CPU field as capacity of PMs and demand of VMs. The capacity of Google PMs is exploited to obtain the capacity distribution of real world PMs in heterogeneous section. However, Google VM demands are used in another manner. In fact, Google trace includes 500 instances of task-event traces related to VMs and each one has hundreds of thousands of demand records. Thereby, we only focus on subset of one instance with 201,491 records of VM demands. The subset consists of 6000 records chosen randomly from these 201,491 records in order to preserve their statistical characteristics as shown in Table 2
                     .

For each instance of simulation, initially VMs are evenly distributed among PMs. In this way, when the number of PMs (
                        
                           |
                           P
                           |
                        
                     ) is greater than the number of VMs (
                        
                           |
                           V
                           |
                        
                     ), each PM hosts at most one VM. In other cases when 
                        
                           |
                           P
                           |
                        
                      is less than (
                        
                           |
                           V
                           |
                        
                     ), all PMs host almost the same number of VMs. This approach of initial assignment is helpful in obtaining the migration count upper bound and consequently evaluating the game convergence speed efficiency. Next, simulation starts by the first step of the game and a random sequence of VMs as players is built. It imposes a requirement of a global arbitration mechanism. They play the game one after another according to this sequence. At each player’s turn, it tries to find the best PM as the new host and migrate to that if this migration minimizes the cost of the player. After all the players played, one step of game is finished. The game continues by repeating this step till the last iteration in which no migration occurs. No migration means all the players have been unsuccessful in finding a better host and further repetition of the game will not cause any change. In the following, we discuss experimental results in two parts of homogeneous PMs and heterogeneous PMs.

Here, we examine the quality of equilibrium and the speed of convergence of our game by conducting simulations with homogeneous PMs of unit capacity. In order to study the effect of scale on the performance of our method, we simulate different sizes of data centers (ranging from 1000 to 6000VMs). In the first case, the demands of VMs are drawn randomly from a uniform distribution i.e. from range (0,1]. Fig. 2
                         shows the ratio power. In general, as the number of VMs increases PoA, PoS and AVG decrease, which can be explained by more opportunity to exploit the residual capacity of PMs, since each VM as a player will have more chance to find a better host. Our method produces results quite close to the social optimum (the minimum social cost). It also outweighs most of centralized methods. Moreover, the PoA is far better than the value we obtained by analysis, i.e. 
                           
                              1
                              +
                              
                                 
                                    a
                                 
                                 
                                    a
                                    +
                                    b
                                 
                              
                              =
                              1.23
                           
                        .

We also evaluate the convergence speed (or agility) by showing the Migration per VM in Fig. 3
                        . As you can see, there is a gradual decline in number of migrations and the worst and best results converge together. Interestingly, the number of migrations in practice is many order of magnitude fewer than the upper bound we obtained analytically in Theorems 2 and 3. Our method has less migration than the centralized methods except F4G-CG and mPP-iFFD. These two methods are basically designed to have less migrations but their efficiency in terms of power consumption is not excellent. Indeed, F4G-CG does not take into account the fullness of migrating VM’s destination.

Next, we repeat the same scenario by using Google trace data instead of randomly generated ones for demands of VMs. Figs. 4 and 5
                        
                         illustrate aggregate power ratios and migration per VM for this examination, respectively. Compared to the previous scenario with uniform VM demands, ratios of aggregate power have smaller values under Google trace demands. It can be explained by the smaller size of Google trace demands compared to uniformly generated random numbers. Table 2 represents the 1st quartile, the median, and the 3rd quartile of the Google trace demands. They are less than the corresponding statistics of uniform demands that are very close to 0.25, 0.5, and 0.75, respectively. As depicted in Fig. 4, in respect to BFD, mPP and MBFD methods, our method does not outweigh them in this scenario. Actually, we feel that the small size of Google trace demands is responsible for this difference again. This feeling is inspired by the fact that mPP and MBFD algorithms work highly similar to the original BFD. For BFD algorithm, the worst case results are generated by items of size bigger than 0.5 [29]. If we look at the problem as a one dimension bin packing problem, such kind of items are not found in this scenario on the contrary to the previous ones. Furthermore, small sized VMs permits F4G-CG method to work better in this scenario. However, this method and mPP-iFFD have worse performance than our method.

The same scenarios of Section 4.1 were simulated by replacing homogeneous PMs with heterogeneous ones. The last column in Table 1 illustrates the normalized relative frequencies of different PM types, which are based on the normalized relative frequencies of different server (PM) types in Google data centers. Indeed, only less than 6% of PMs have the ability to accommodate only one VM having a demand greater than 0.5. Therefore, we used uniform distribution of range (0,0.5] instead of (0,1] for VM demands.


                        Figs. 6 and 7
                        
                         present ratios of aggregate power and migration per VM, respectively and both show convergence in ratios as the number of VMs grows. In average, the power consumption of our method is not worse than any centralized solutions. Furthermore, the interesting point is that our migration is not much higher than migration aware mPP-iFFD algorithm while our power consumption is much lower.

Using Google trace VM demands results in power ratios and migration per VM as demonstrated in Figs. 8 and 9
                        
                        , respectively. Again, our method is competitive against any centralized solution in average. We observe that the number of migrations divergs more in comparison to the homogeneous case (see Fig. 7). Having different capacities increase the effect of initial mapping on the behavior and the final outcome of our game. This justifies more divergence in the results of the hetrogenous case. The average of migrations per VM is only 0.94. This supports the agility of our method.

@&#DISCUSSION@&#

We have simulated our proposed game for two cases of homogeneous and heterogeneous PMs in respect to their capacity. Each scenario of experiments were repeated 1000 times with random initial profile in each repetition and the efficiency of equilibrium was evaluated based on the power consumption ratio (to a theoretical lower bound) and the speed of convergence (in terms of migration per VM). In respect to power, the best equilibrium (PoS), the average of equilibrium and the worst equilibrium (PoA) have been reported and all of them are well below the upper bound obtained by the analysis. Also we proved by mathematical analysis that the game reaches a local minimum power consumption after a finite number of migrations. The simulation results present the minimum, the average and the maximum number of migrations to reach equilibrium which are many orders of magnitude fewer than the theoretical upper bounds.

The power consumption ratios of heterogeneous cases are a bit more than the power consumption ratios of homogeneous cases. The experiments visibly demonstrated that our method is comparable with the qualitative centralized ones in terms of power consumption. In respect to the number of migrations, there are migration aware centralized solutions, which have less migrations, although their power consumption are too high.

We proposed a distributed mechanism for dynamic consolidation of virtual machines in heterogeneous data centers of big cloud providers. We also provided analysis of our mechanism using game theory. To the best of our knowledge, this is the first work on games for heterogeneous physical machines. We showed that the game converges to a Nash equilibrium after a finite number of migrations, so the convergence time is bounded. In addition, we found an upper bound for the price of anarchy and studied the price of stability. These observations were also validated by simulations using CloudSim. We simulated different size data centers with homogeneous and heterogeneous physical machines running uniform and real world workload traces. The experimental results show that the real power efficiency is comparable to centralized solutions. In addition, the convergence time and migration count is many orders of magnitude fewer than the theoretical numbers.

There are subjects that need further studies. Firstly, we may easily extend our work for multidimensional resource management environments where other resources like memory, storage and, network should be considered. Secondly, we should reduce the convergence time by modeling and analyzing a parallel version of the game instead of the current sequential one. The parallel version also reduces the requirement for global arbitration mechanism and our solution would work in a more distributed manner. Finally, there are some concerns about the implementation of our method in practice. All virtual machines have to know the state of all the physical machines. This implies that there might be overwhelming message passing in the system. We envision popular protocol in peer-to-peer systems as a remedy for this issue. For instance, Dissemination protocols might spread information about the state of all physical machines throughout data center with fewer number of messages.

@&#REFERENCES@&#

