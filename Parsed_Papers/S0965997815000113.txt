@&#MAIN-TITLE@&#The Ant Lion Optimizer

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The Ant Lion Optimizer inspired by the hunting mechanism of antlions is proposed.


                        
                        
                           
                           The ALO algorithm is benchmarked on 29 well-known test functions.


                        
                        
                           
                           The results on the unimodal functions show the superior exploitation of ALO.


                        
                        
                           
                           The exploratory ability of ALO is confirmed by the results on multimodal functions.


                        
                        
                           
                           The results on real problems confirm the performance of ALO in practice.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Optimization

Benchmark

Constrained optimization

Particle swarm optimization

Algorithm

Heuristic algorithm

Genetic algorithm

@&#ABSTRACT@&#


               
               
                  This paper proposes a novel nature-inspired algorithm called Ant Lion Optimizer (ALO). The ALO algorithm mimics the hunting mechanism of antlions in nature. Five main steps of hunting prey such as the random walk of ants, building traps, entrapment of ants in traps, catching preys, and re-building traps are implemented. The proposed algorithm is benchmarked in three phases. Firstly, a set of 19 mathematical functions is employed to test different characteristics of ALO. Secondly, three classical engineering problems (three-bar truss design, cantilever beam design, and gear train design) are solved by ALO. Finally, the shapes of two ship propellers are optimized by ALO as challenging constrained real problems. In the first two test phases, the ALO algorithm is compared with a variety of algorithms in the literature. The results of the test functions prove that the proposed algorithm is able to provide very competitive results in terms of improved exploration, local optima avoidance, exploitation, and convergence. The ALO algorithm also finds superior optimal designs for the majority of classical engineering problems employed, showing that this algorithm has merits in solving constrained problems with diverse search spaces. The optimal shapes obtained for the ship propellers demonstrate the applicability of the proposed algorithm in solving real problems with unknown search spaces as well. Note that the source codes of the proposed ALO algorithm are publicly available at http://www.alimirjalili.com/ALO.html.
               
            

@&#INTRODUCTION@&#

In recent years metaheuristic algorithms have been used as primary techniques for obtaining the optimal solutions of real engineering design optimization problems [1–3]. Such algorithms mostly benefit from stochastic operators [4] that make them distinct from deterministic approaches. A deterministic algorithm [5–7] reliably determines the same answer for a given problem with a similar initial starting point. However, this behaviour results in local optima entrapment, which can be considered as a disadvantage for deterministic optimization techniques [8]. Local optima stagnation refers to the entrapment of an algorithm in local solutions and consequently failure in finding the true global optimum. Since real problems have extremely large numbers of local solutions, deterministic algorithms lose their reliability in finding the global optimum.

Stochastic optimization (metaheuristic) algorithms [9] refer to the family of algorithms with stochastic operators including evolutionary algorithms [10]. Randomness is the main characteristic of stochastic algorithms [11]. This means that they utilize random operators when seeking for global optima in search spaces. Although the randomised nature of such techniques might make them unreliable in obtaining a similar solution in each run, they are able to avoid local solutions much easier than deterministic algorithms. The stochastic behaviour also results in obtaining different solutions for a given problem in each run [12].

Evolutionary algorithms search for the global optimum in a search space by creating one or more random solutions for a given problem [13]. This set is called the set of candidate solutions. The set of candidates is then improved iteratively until the satisfaction of a terminating condition. The improvement can be considered as finding a more accurate approximation of the global optimum than the initial random guesses. This mechanism brings evolutionary algorithms several intrinsic advantages: problem independency, derivation independency, local optima avoidance, and simplicity.

Problem and derivation independencies originate from the consideration of problems as a black box. Evolutionary algorithms only utilize the problem formulation for evaluating the set of candidate solutions. The main process of optimization is done completely independent from the problem and based on the provided inputs and received outputs. Therefore, the nature of the problem is not a concern, yet the representation is the key step when utilizing evolutionary algorithms. This is the same reason why evolutionary algorithms do not need to derivate the problem for obtaining its global optimum.

As another advantage, local optima avoidance is high due the stochastic nature of evolutionary algorithms. If an evolutionary algorithm is trapped in a local optimum, stochastic operator lead to random changes in the solution and eventually escaping from the local optimum. Although there is no guarantee for resolving this issue completely, stochastic algorithms have much higher probability to escape from local optima compared to deterministic methods. A very accurate approximation of the global optimum is not guaranteed as well, but with running an evolutionary algorithm several times the probability of obtaining a better solution is increased.

Last but not least, the simplicity is another characteristic of evolutionary algorithms. Natural evolutionary concepts or collective behaviours are the main inspirations for the majority of algorithms in this field where they are so simple. In addition, evolutionary algorithms follow a general and common framework, in which a set of randomly created solutions is enhanced or evolved iteratively. What makes algorithms different in this field is the method of improving this set.

Some of the most popular algorithms in this field are: Genetic Algorithms (GA) [14,15], Particle Swarm Optimization (PSO) [16], Ant Colony Optimization (ACO) [17], Differential Evolution (DE) [18], Evolutionary Programming (EP) [19] 
                     [20]. Although these algorithms are able to solve many real and challenging problems, the so-called No Free Lunch theorem [21] allows researchers to propose new algorithms. According to this theorem, all algorithms perform equal when solving all optimization problems. Therefore, one algorithm can be very effective in solving one set of problems but in effective on a different set of problems. This is the foundation of many works in this field. Some of the recent algorithms are: Grey Wolf Optimizer (GWO) [22], Artificial Bee Colony (ABC) algorithm [23], Firefly Algorithm (FA) [24,25], Cuckoo Search (CS) algorithm [26,27], Cuckoo Optimization Algorithm (COA) [28], Gravitational Search Algorithm (GSA) [29], Charged System Search (CSS) [30–33], Magnetic Charged System Search [34,35], Ray Optimization (RO) [36–38] algorithm, Colliding Bodies Optimization (CBO) [39–44] algorithm, Hybrid Particle Swallow Swarm Optimization (HPSSO) [45], Democratic Particle Swarm Optimization (DPSO) [46,47], Dolphin Echolocation (DE) [48,49], and Chaotic Swarming of Particles (CSP) [50].

This paper also proposes a new algorithm called Ant Lion Optimizer (ALO) as an alternative approach for solving optimization problems. As its name implies, the ALO algorithm mimics the intelligent behaviour of antlions in hunting ants in nature. The rest of the paper is organized as follows:

Section 2 presents the main inspiration of this paper and proposes the ALO algorithm. Experimental results of the test functions are provided in Section 3. Sections 4 and 5 solve several real problems to demonstrate the applicability of the proposed algorithm. Finally, Section 6 concludes the work and discusses possible future research.

In this section the inspiration of the ALO algorithm is first presented. The mathematical model and the ALO algorithm are then discussed in details.

Antlions (doodlebugs) belong to the Myrmeleontidae family and Neuroptera order (net-winged insects). The lifecycle of antlions includes two main phases: larvae and adult. A natural total lifespan can take up to 3years, which mostly occurs in larvae (only 3–5weeks for adulthood). Antlions undergo metamorphosis in a cocoon to become adult. They mostly hunt in larvae and the adulthood period is for reproduction.

Their names originate from their unique hunting behaviour and their favourite prey. An antlion larvae digs a cone-shaped pit in sand by moving along a circular path and throwing out sands with its massive jaw [51,52]. Fig. 1
                        (a) shows several cone-shaped pits with different sizes. After digging the trap, the larvae hides underneath the bottom of the cone (as a sit-and-wait predator [53]) and waits for insects (preferably ant) to be trapped in the pit [53] as illustrated in Fig. 1(b). The edge of the cone is sharp enough for insects to fall to the bottom of the trap easily. Once the antlion realizes that a prey is in the trap, it tries to catch it. However, insects usually are not caught immediately and try to escape from the trap. In this case, antlions intelligently throw sands towards to edge of the pit to slide the prey into the bottom of the pit. When a prey is caught into the jaw, it is pulled under the soil and consumed. After consuming the prey, antlions throw the leftovers outside the pit and amend the pit for the next hunt.

Another interesting behaviour that has been observed in life style of antlions is the relevancy of the size of the trap and two things: level of hunger and shape of the moon. Antlions tend to dig out larger traps as they become more hungry [54] and/or when the moon is full [55]. They have been evolved and adapted this way to improve their chance of survival. It also has been discovered that an antlion does not directly observe the shape of the moon to decide about the size of the trap, but it has an internal lunar clock to make such decisions [55].

The main inspiration of the ALO algorithm comes from the foraging behaviour of antlion’s larvae. In the next subsection the behaviour of antlions and their prey in nature is first modelled mathematically. An optimization algorithm is then proposed based on the mathematical model.

The ALO algorithm mimics interaction between antlions and ants in the trap. To model such interactions, ants are required to move over the search space, and antlions are allowed to hunt them and become fitter using traps. Since ants move stochastically in nature when searching for food, a random walk is chosen for modelling ants’ movement as follows:
                           
                              (2.1)
                              
                                 X
                                 (
                                 t
                                 )
                                 =
                                 [
                                 0
                                 ,
                                 
                                 cumsum
                                 (
                                 2
                                 r
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 -
                                 1
                                 )
                                 ,
                                 
                                 cumsum
                                 (
                                 2
                                 r
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 -
                                 1
                                 )
                                 ,
                                 …
                                 ,
                                 
                                 cumsum
                                 (
                                 2
                                 r
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       n
                                    
                                 
                                 )
                                 -
                                 1
                                 )
                                 ]
                              
                           
                        where cumsum calculates the cumulative sum, n is the maximum number of iteration, t shows the step of random walk (iteration in this study), and r(t) is a stochastic function defined as follows:
                           
                              (2.2)
                              
                                 r
                                 (
                                 t
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   1
                                                
                                                
                                                   if
                                                   
                                                   rand
                                                   >
                                                   0.5
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   if
                                                   
                                                   rand
                                                   ⩽
                                                   0.5
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where t shows the step of random walk (iteration in this study) and rand is a random number generated with uniform distribution in the interval of [0,1].

To have an image of this random walk, Fig. 2
                         is provided that illustrates three random walks over 500 iterations. This figure shows that the random walk utilized may fluctuate dramatically around the origin (red
                           1
                           For interpretation of color in Fig. 2, the reader is referred to the web version of this article.
                        
                        
                           1
                         curve), have increasing trend (black curve), or have descending behaviour (blue curve).

The position of ants are saved and utilized during optimization in the following matrix:
                           
                              (2.3)
                              
                                 
                                    
                                       M
                                    
                                    
                                       Ant
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         1
                                                         ,
                                                         1
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         1
                                                         ,
                                                         2
                                                      
                                                   
                                                
                                                
                                                   …
                                                
                                                
                                                   …
                                                
                                                
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         1
                                                         ,
                                                         d
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         2
                                                         ,
                                                         1
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         2
                                                         ,
                                                         2
                                                      
                                                   
                                                
                                                
                                                   …
                                                
                                                
                                                   …
                                                
                                                
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         2
                                                         ,
                                                         d
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                             
                                             
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         n
                                                         ,
                                                         1
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         n
                                                         ,
                                                         2
                                                      
                                                   
                                                
                                                
                                                   …
                                                
                                                
                                                   …
                                                
                                                
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         n
                                                         ,
                                                         d
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where MAnt
                         is the matrix for saving the position of each ant, Ai
                        
                        ,
                        
                           j
                         shows the value of the j-th variable (dimension) of i-th ant, n is the number of ants, and d is the number of variables.

It should be noted that ants are similar to particles in PSO or individuals in GA. The position of an ant refers the parameters for a particular solution. Matrix MAnt
                         has been considered to save the position of all ants (variables of all solutions) during optimization.

For evaluating each ant, a fitness (objective) function is utilized during optimization and the following matrix stores the fitness value of all ants:
                           
                              (2.4)
                              
                                 
                                    
                                       M
                                    
                                    
                                       OA
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   f
                                                   
                                                      
                                                         
                                                            [
                                                            
                                                               
                                                                  A
                                                               
                                                               
                                                                  1
                                                                  ,
                                                                  1
                                                                  ,
                                                               
                                                            
                                                            
                                                               
                                                                  A
                                                               
                                                               
                                                                  1
                                                                  ,
                                                                  2
                                                               
                                                            
                                                            ,
                                                            …
                                                            ,
                                                            
                                                               
                                                                  A
                                                               
                                                               
                                                                  1
                                                                  ,
                                                                  d
                                                               
                                                            
                                                            ]
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   f
                                                   
                                                      
                                                         
                                                            [
                                                            
                                                               
                                                                  A
                                                               
                                                               
                                                                  2
                                                                  ,
                                                                  1
                                                               
                                                            
                                                            ,
                                                            
                                                               
                                                                  A
                                                               
                                                               
                                                                  2
                                                                  ,
                                                                  2
                                                               
                                                            
                                                            ,
                                                            …
                                                            ,
                                                            
                                                               
                                                                  A
                                                               
                                                               
                                                                  2
                                                                  ,
                                                                  d
                                                               
                                                            
                                                            ]
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   :
                                                
                                             
                                             
                                                
                                                   :
                                                
                                             
                                             
                                                
                                                   f
                                                   
                                                      
                                                         
                                                            [
                                                            
                                                               
                                                                  A
                                                               
                                                               
                                                                  n
                                                                  ,
                                                                  1
                                                               
                                                            
                                                            ,
                                                            
                                                               
                                                                  A
                                                               
                                                               
                                                                  n
                                                                  ,
                                                                  2
                                                               
                                                            
                                                            ,
                                                            …
                                                            ,
                                                            
                                                               
                                                                  A
                                                               
                                                               
                                                                  n
                                                                  ,
                                                                  d
                                                               
                                                            
                                                            ]
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where MOA
                         is the matrix for saving the fitness of each ant, Ai
                        
                        ,
                        
                           j
                         shows the value of j-th dimension of i-th ant, n is the number of ants, and f is the objective function.

In addition to ants, we assume the antlions are also hiding somewhere in the search space. In order save their positions and fitness values, the following matrices are utilized: 
                           
                              (2.5)
                              
                                 
                                    
                                       M
                                    
                                    
                                       Antlion
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         1
                                                         ,
                                                         1
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         1
                                                         ,
                                                         2
                                                      
                                                   
                                                
                                                
                                                   …
                                                
                                                
                                                   …
                                                
                                                
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         1
                                                         ,
                                                         d
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         2
                                                         ,
                                                         1
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         2
                                                         ,
                                                         2
                                                      
                                                   
                                                
                                                
                                                   …
                                                
                                                
                                                   …
                                                
                                                
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         2
                                                         ,
                                                         d
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                             
                                             
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                                
                                                   :
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         n
                                                         ,
                                                         1
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         n
                                                         ,
                                                         2
                                                      
                                                   
                                                
                                                
                                                   …
                                                
                                                
                                                   …
                                                
                                                
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         n
                                                         ,
                                                         d
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where MAntlion
                         is the matrix for saving the position of each antlion, ALi
                        
                        ,
                        
                           j
                         shows the j-th dimension’s value of i-th antlion, n is the number of antlions, and d is the number of variables (dimension).
                           
                              (2.6)
                              
                                 
                                    
                                       M
                                    
                                    
                                       OAL
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   f
                                                   (
                                                   [
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         1
                                                         ,
                                                         1
                                                         ,
                                                      
                                                   
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         1
                                                         ,
                                                         2
                                                      
                                                   
                                                   ,
                                                   …
                                                   ,
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         1
                                                         ,
                                                         d
                                                      
                                                   
                                                   ]
                                                   )
                                                
                                             
                                             
                                                
                                                   f
                                                   (
                                                   [
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         2
                                                         ,
                                                         1
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         2
                                                         ,
                                                         2
                                                      
                                                   
                                                   ,
                                                   …
                                                   ,
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         2
                                                         ,
                                                         d
                                                      
                                                   
                                                   ]
                                                   )
                                                
                                             
                                             
                                                
                                                   :
                                                
                                             
                                             
                                                
                                                   :
                                                
                                             
                                             
                                                
                                                   f
                                                   (
                                                   [
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         n
                                                         ,
                                                         1
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         n
                                                         ,
                                                         2
                                                      
                                                   
                                                   ,
                                                   …
                                                   ,
                                                   
                                                      
                                                         AL
                                                      
                                                      
                                                         n
                                                         ,
                                                         d
                                                      
                                                   
                                                   ]
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where MOAL
                         is the matrix for saving the fitness of each antlion, ALi
                        
                        ,
                        
                           j
                         shows the j-th dimension’s value of i-th antlion, n is the number of antlions, and f is the objective function.

During optimization, the following conditions are applied:
                           
                              •
                              Ants move around the search space using different random walks.

Random walks are applied to all the dimension of ants.

Random walks are affected by the traps of antlions.

Antlions can build pits proportional to their fitness (the higher fitness, the larger pit).

Antlions with larger pits have the higher probability to catch ants.

Each ant can be caught by an antlion in each iteration and the elite (fittest antlion).

The range of random walk is decreased adaptively to simulate sliding ants towards antlions.

If an ant becomes fitter than an antlion, this means that it is caught and pulled under the sand by the antlion.

An antlion repositions itself to the latest caught prey and builds a pit to improve its change of catching another prey after each hunt.

Random walks are all based on the Eq. (2.1). Ants update their positions with random walk at every step of optimization. Since every search space has a boundary (range of variable), however, Eq. (2.1) cannot be directly used for updating position of ants. In order to keep the random walks inside the search space, they are normalized using the following equation (min–max normalization): 
                              
                                 (2.7)
                                 
                                    
                                       
                                          X
                                       
                                       
                                          i
                                       
                                       
                                          t
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         t
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         a
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                          ×
                                          
                                             
                                                
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         t
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         t
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         a
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    +
                                    
                                       
                                          c
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                           where ai
                            is the minimum of random walk of i-th variable, bi
                            is the maximum of random walk in i-th variable, 
                              
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                    
                                       t
                                    
                                 
                              
                            is the minimum of i-th variable at t-th iteration, and 
                              
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                    
                                       t
                                    
                                 
                              
                            indicates the maximum of i-th variable at t-th iteration.

Eq. (2.7) should be applied in each iteration to guarantee the occurrence of random walks inside the search space.

As discussed above, random walks of ants are affected by antlions’ traps. In order to mathematically model this assumption, the following equations are proposed:
                              
                                 (2.8)
                                 
                                    
                                       
                                          c
                                       
                                       
                                          i
                                       
                                       
                                          t
                                       
                                    
                                    =
                                    
                                       
                                          Antlion
                                       
                                       
                                          j
                                       
                                       
                                          t
                                       
                                    
                                    +
                                    
                                       
                                          c
                                       
                                       
                                          t
                                       
                                    
                                 
                              
                           
                           
                              
                                 (2.9)
                                 
                                    
                                       
                                          d
                                       
                                       
                                          i
                                       
                                       
                                          t
                                       
                                    
                                    =
                                    
                                       
                                          Antlion
                                       
                                       
                                          j
                                       
                                       
                                          t
                                       
                                    
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          t
                                       
                                    
                                 
                              
                           where ct
                            is the minimum of all variables at t-th iteration, dt
                            indicates the vector including the maximum of all variables at t-th iteration, 
                              
                                 
                                    
                                       c
                                    
                                    
                                       j
                                    
                                    
                                       t
                                    
                                 
                              
                            is the minimum of all variables for i-th ant, 
                              
                                 
                                    
                                       d
                                    
                                    
                                       j
                                    
                                    
                                       t
                                    
                                 
                              
                            is the maximum of all variables for i-th ant, and 
                              
                                 
                                    
                                       Antlion
                                    
                                    
                                       j
                                    
                                    
                                       t
                                    
                                 
                              
                            shows the position of the selected j-th antlion at t-th iteration.

Eqs. (2.8) and (2.9) show that ants randomly walk in a hyper sphere defined by the vectors c and d around a selected antlion. A conceptual model of this behaviour is illustrated in Fig. 3
                           .


                           Fig. 3 shows a two-dimensional search space. It may be observed that ants are required to move within a hypersphere around a selected antlion.

In order to model the antlions’s hunting capability, a roulette wheel is employed. As Fig. 3 show ants are assumed to be trapped in only one selected antlion. The ALO algorithm is required to utilize a roulette wheel operator for selecting antlions based of their fitness during optimization. This mechanism gives high chances to the fitter antlions for catching ants.

With the mechanisms proposed so far, antlions are able to build traps proportional to their fitness and ants are required to move randomly. However, antlions shoot sands outwards the center of the pit once they realize that an ant is in the trap. This behaviour slides down the trapped ant that is trying to escape. For mathematically modelling this behaviour, the radius of ants’s random walks hyper-sphere is decreased adaptively. The following equations are proposed in this regard:
                              
                                 (2.10)
                                 
                                    
                                       
                                          c
                                       
                                       
                                          t
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                t
                                             
                                          
                                       
                                       
                                          I
                                       
                                    
                                 
                              
                           
                           
                              
                                 (2.11)
                                 
                                    
                                       
                                          d
                                       
                                       
                                          t
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                d
                                             
                                             
                                                t
                                             
                                          
                                       
                                       
                                          I
                                       
                                    
                                 
                              
                           where I is a ratio, ct
                            is the minimum of all variables at t-th iteration, and dt
                            indicates the vector including the maximum of all variables at t-th iteration.

In Eqs. (2.10) and (2.11), 
                              
                                 I
                                 =
                                 
                                    
                                       10
                                    
                                    
                                       w
                                    
                                 
                                 
                                    
                                       t
                                    
                                    
                                       T
                                    
                                 
                              
                            where t is the current iteration, T is the maximum number of iterations, and w is a constant defined based on the current iteration (w
                           =2 when t
                           >0.1T, w
                           =3 when t
                           >0.5T, w
                           =4 when t
                           >0.75T, w
                           =5 when t
                           >0.9T, and w
                           =6 when t
                           >0.95T). Basically, the constant w can adjust the accuracy level of exploitation.


                           Fig. 4
                            also shows the decreasing behaviour using Eqs. (2.10) and (2.11). These equations shrink the radius of updating ant’s positions and mimics sliding process of ant inside the pits. This guarantees exploitation of search space.

The final stage of hunt is when an ant reaches the bottom of the pit and is caught in the antlion’s jaw. After this stage, the antlion pulls the ant inside the sand and consumes its body. For mimicking this process, it is assumed that catching prey occur when ants becomes fitter (goes inside sand) than its corresponding antlion. An antlion is then required to update its position to the latest position of the hunted ant to enhance its chance of catching new prey. The following equation is proposed in this regard:
                              
                                 (2.12)
                                 
                                    
                                       
                                          Antlion
                                       
                                       
                                          j
                                       
                                       
                                          t
                                       
                                    
                                    =
                                    
                                       
                                          Ant
                                       
                                       
                                          i
                                       
                                       
                                          t
                                       
                                    
                                    
                                    if
                                    
                                    f
                                    (
                                    
                                       
                                          Ant
                                       
                                       
                                          i
                                       
                                       
                                          t
                                       
                                    
                                    )
                                    >
                                    f
                                    
                                       
                                          
                                             
                                                
                                                   Antlion
                                                
                                                
                                                   j
                                                
                                                
                                                   t
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where t shows the current iteration, 
                              
                                 
                                    
                                       Antlion
                                    
                                    
                                       j
                                    
                                    
                                       t
                                    
                                 
                              
                            shows the position of selected j-th antlion at t-th iteration, and 
                              
                                 
                                    
                                       Ant
                                    
                                    
                                       i
                                    
                                    
                                       t
                                    
                                 
                              
                            indicates the position of i-th ant at t-th iteration.

Elitism is an important characteristic of evolutionary algorithms that allows them to maintain the best solution(s) obtained at any stage of optimization process. In this study the best antlion obtained so far in each iteration is saved and considered as an elite. Since the elite is the fittest antlion, it should be able to affect the movements of all the ants during iterations. Therefore, it is assumed that every ant randomly walks around a selected antlion by the roulette wheel and the elite simultaneously as follows:
                              
                                 (2.13)
                                 
                                    
                                       
                                          Ant
                                       
                                       
                                          i
                                       
                                       
                                          t
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                R
                                             
                                             
                                                A
                                             
                                             
                                                t
                                             
                                          
                                          +
                                          
                                             
                                                R
                                             
                                             
                                                E
                                             
                                             
                                                t
                                             
                                          
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                           where 
                              
                                 
                                    
                                       R
                                    
                                    
                                       A
                                    
                                    
                                       t
                                    
                                 
                              
                            is the random walk around the antlion selected by the roulette wheel at t-th iteration, 
                              
                                 
                                    
                                       R
                                    
                                    
                                       E
                                    
                                    
                                       t
                                    
                                 
                              
                            is the random walk around the elite at t-th iteration, and 
                              
                                 
                                    
                                       Ant
                                    
                                    
                                       i
                                    
                                    
                                       t
                                    
                                 
                              
                            indicates the position of i-th ant at t-th iteration.

With the proposed operators in the preceding subsections, the ALO optimization algorithm can now be defined. The ALO algorithm is defined as a three-tuple function that approximates the global optimum for optimization problems as follows:
                           
                              (2.14)
                              
                                 ALO
                                 (
                                 A
                                 ,
                                 B
                                 ,
                                 C
                                 )
                              
                           
                        where A is a function that generates the random initial solutions, B manipulates the initial population provided by the function A, and C returns true when the end criterion is satisfied. The functions A, B, and C are defined as follows:
                           
                              (2.15)
                              
                                 ∅
                                 
                                    
                                       →
                                    
                                    
                                       A
                                    
                                 
                                 {
                                 
                                    
                                       M
                                    
                                    
                                       Ant
                                    
                                 
                                 ,
                                 
                                    
                                       M
                                    
                                    
                                       OA
                                    
                                 
                                 ,
                                 
                                    
                                       M
                                    
                                    
                                       Antlion
                                    
                                 
                                 ,
                                 
                                    
                                       M
                                    
                                    
                                       OAL
                                    
                                 
                                 }
                              
                           
                        
                        
                           
                              (2.16)
                              
                                 {
                                 
                                    
                                       M
                                    
                                    
                                       Ant
                                    
                                 
                                 ,
                                 
                                    
                                       M
                                    
                                    
                                       Antlion
                                    
                                 
                                 }
                                 
                                    
                                       →
                                    
                                    
                                       B
                                    
                                 
                                 {
                                 
                                    
                                       M
                                    
                                    
                                       Ant
                                    
                                 
                                 ,
                                 
                                    
                                       M
                                    
                                    
                                       Antlion
                                    
                                 
                                 }
                              
                           
                        
                        
                           
                              (2.17)
                              
                                 {
                                 
                                    
                                       M
                                    
                                    
                                       Ant
                                    
                                 
                                 ,
                                 
                                    
                                       M
                                    
                                    
                                       Antlion
                                    
                                 
                                 }
                                 
                                    
                                       →
                                    
                                    
                                       C
                                    
                                 
                                 {
                                 true
                                 ,
                                 false
                                 }
                              
                           
                        where MAnt
                         is the matrix of the position of ants, MAntlion
                         includes the position of antlions, MOA
                         contains the corresponding fitness of ants, and MOAL
                         has the fitness of antlions.

The pseudo codes the ALO algorithm are defined as follows:
                           
                              
                                 
                                 
                                    
                                       
                                          Initialize the first population of ants and antlions randomly
                                       
                                    
                                    
                                       
                                          Calculate the fitness of ants and antlions
                                       
                                    
                                    
                                       
                                          Find the best antlions and assume it as the elite (determined optimum)
                                       
                                    
                                    
                                       
                                          
                                             while
                                           
                                          the end criterion is not satisfied
                                       
                                    
                                    
                                       
                                          
                                          
                                             for
                                           
                                          every ant
                                       
                                    
                                    
                                       
                                          
                                          
                                          Select an antlion using Roulette wheel
                                       
                                    
                                    
                                       
                                          
                                          
                                          Update c and d using equations Eqs. 
                                          (2.10) and (2.11)
                                       
                                    
                                    
                                       
                                          
                                          
                                          Create a random walk and normalize it using Eqs. 
                                          (2.1) and (2.7)
                                       
                                    
                                    
                                       
                                          
                                          
                                          Update the position of ant using 
                                          (2.13)
                                       
                                    
                                    
                                       
                                          
                                          
                                             end for
                                          
                                       
                                    
                                    
                                       
                                          
                                          Calculate the fitness of all ants
                                       
                                    
                                    
                                       
                                          
                                          Replace an antlion with its corresponding ant it if becomes fitter (Eq. (2.12))
                                    
                                    
                                       
                                          
                                          Update elite if an antlion becomes fitter than the elite
                                       
                                    
                                    
                                       
                                          
                                             end while
                                          
                                       
                                    
                                    
                                       
                                          
                                             Return
                                           
                                          elite
                                       
                                    
                                 
                              
                           
                        
                     

The Matlab codes for the overall framework of the ALO algorithm as well as the functions A and B are provided in Appendix A.1–A.3.

In the ALO algorithm, the antlion and ant matrices are initialized randomly using the function A. In every iteration, the function B updates the position of each ant with respect to an antlion selected by the roulette wheel operator and the elite. The boundary of position updating is first defined proportional to the current number of iteration. The updating position is then accomplished by two random walks around the selected antlion and elite. When all the ants randomly walk, they are evaluated by the fitness function. If any of the ants become fitter than any other antlions, their positions are considered as the new positions for the antlions in the next iteration. The best antlion is compared to the best antlion found during optimization (elite) and substituted if it is necessary. These steps iterative until the function C returns false.

The ALO algorithm is developed in Matlab and offered as an open-source optimization toolbox. The main user interface of this toolbox is illustrated in Fig. 5
                        . The software designed allows users to define the number of search agents, maximum number of iterations, number of variables, upper bounds of variables, lower bounds of variables, and the name of the objective function easily. As shown in Fig. 5, these variables can be defined in the “parameters” section of the software. After defining the parameters, the problem starts to be optimized as soon as the user clicks on the “start optimization” button. The software then interactively draws the convergence curve (and history if chosen) and updates the obtained best optimum so far in the convergence curve section. Eventually, the information of the best obtained optimum is shown in the “final results” section. Note that the source codes of the ALO algorithm and the toolbox can be downloaded from http://www.alimirjalili.com/ALO.html or http://www.mathworks.com/matlabcentral/profile/authors/2943818-seyedali-mirjalili.

Theoretically speaking, the proposed ALO algorithm is able to approximate the global optimum of optimization problems due to the following reasons:
                           
                              •
                              Exploration of the search space is guaranteed by the random selection of antlions and random walks of ants around them.

Exploitation of search space is guaranteed by the adaptive shrinking boundaries of antlions’ traps.

There is high probability of resolving local optima stagnation due to the use of random walks and the roulette wheel.

ALO is a population-based algorithm, so local optima avoidance is intrinsically high.

Intensity of ants’ movement is adaptively decreased over the course of iterations, which guarantees convergence of the ALO algorithm.

Calculating random walks for every ant and every dimension promotes diversity in the population.

Antlions relocate to the position of best ants during optimization, so promising areas of search spaces are saved.

Antlions guide ants towards promising regions of the search space.

The best antlion in each iteration is saved and compared to the best antlion obtained so far (elite).

The ALO algorithm has very few parameters to adjust.

The ALO algorithm is a gradient-free algorithm and considers problem as a black box.

In the next sections several test beds and real problems are employed to benchmark and confirm the performance of the ALO algorithm in solving optimization problems.

@&#RESULTS AND DISCUSSION@&#

In this section a number of test problems are selected to benchmark the performance of the proposed ALO algorithm. Three groups of test functions are employed with different characteristics to test the performance of the ALO algorithm from different perspectives. The test functions are divided the three groups: unimodal (Table 1
                     ), multi-modal (Table 2
                     ), and composite functions (Table 3
                     ) [20,56–58]. As their names imply, unimodal test functions have single optimum so they can benchmark the exploitation and convergence of an algorithm. In contrast, multi-modal test functions have more than one optimum, making them more challenging than unimodal functions. One of the optima is called global optimum and the rest are called local optima. An algorithm should avoid all the local optima to approach and determine the global optimum. Therefore, exploration and local optima avoidance of algorithms can be tested by the multi-modal test functions. Note that the minima of all the unimodal and multi-modal test functions are equal to 0 except the function F
                     8 where the minimum is changed based of the number of variables (Dim).

The last group of test functions, composite functions, are mostly the combined, rotated, shifted, and biased version of other unimodal and multi-modal test functions [59,60]. As shown in Fig. 6
                     , they mimic the difficulties of real search spaces by providing a massive number of local optima and different shapes for different regions of the search space. An algorithm should properly balance exploration and exploitation to approximate the global optima of such test functions. Therefore, exploration and exploitation combined can be benchmarked by this group of test functions.

For verification of the results of ALO, two well-known algorithms are employed: PSO [61] as the best algorithm among swarm-based technique and GA [62] as the best evolutionary algorithm. In addition the ALO algorithm is compared with several recent algorithms such as the States of Matter Search (SMS) algorithm [63,64], Bat Algorithm (BA) [65], Flower Pollination Algorithm [66] , Cuckoo Search (CS) algorithm [26,27], and Firefly Algorithm (FA) [24,25]. In order to collect quantitative results, each algorithm is run on the test functions 30 times and the average and standard deviation of the best approximated solution in the last iteration is reported. These two metrics show us which algorithm behaves more stable when solving the test functions. Due to the stochastic nature of the algorithms, however, statistical test should also be conducted [67]. The averages and standard deviation only compare the overall performance of the algorithms, while a statistical test consider each run’s results and prove that the results are statistically significant. The Wilcoxon rank-sum test [67,68] is conducted in this work.

The Wilcoxon rank-sum test is a non-parametric test in statics that can be used to determine/verify if two sets of solutions (population) are different statistically significant or not. In this method, each set of pairs in both populations are compared to calculate and analyse their differences. It also tests the null hypothesis as to whether both populations are of the same distribution. Technically speaking, this statistical test returns a parameter called p-vales. A p-value determines the significance level of two algorithms. In this work an algorithm is statistically significant if and only if it results in a p-value less than 0.05.

After all, each of the test functions is solved using 30 candidate solutions (antlions) over 1000 iterations and the results in Tables 4–9
                     
                     
                     
                     
                     
                     . Note that the average value of the minimums (ave) and their standard deviations (std) in 30 runs are provided in the table of results.

According to the results of the algorithms on the unimodal test functions in Table 4, it is evident that the ALO algorithm outperforms other algorithms on the majority of the test cases. The p-values in Table 5 also show that this superiority is statistically significant since the p-values are much less than 0.05. Considering the characteristic of unimodal test functions, it can be stated that the ALO algorithm benefits from high exploitation. High exploitation assists the ALO algorithm to rapidly converge towards the optimum and exploit it accurately as can also be inferred from the convergence curves in Fig. 7
                        .

The results of the algorithms on multi-modal test functions are presented in Tables 6 and 7. Table 6 shows that again the ALO algorithm provides the best results on four of the test functions. The second best results belong the PSO and CS algorithms. The p-values reported in Table 7 also show that the ALO algorithm shows significantly better results. Considering the characteristics of multi-modal test functions and these results, it may be stated that the ALO algorithm has a high level of exploration which assists it to explore the promising regions of the search space. In addition, the local optima avoidance of this algorithm in satisfactory since it is able to avoid all of the local optima and approach the global optima on the majority of the multi-modal test functions. The convergence curves of the algorithms on some of the multi-modal test functions are illustrated in Fig. 8
                        . This figure shows that the ALO shows the fastest convergence on multi-modal test functions as well.


                        Tables 8 and 9 include the results of composite test functions. As per the results presented in Table 8, the ALO algorithm outperforms others in all of the composite test functions. The p-values reported in Table 9 show that this superiority is statistically significant on five of them (F15 to F19). The discrepancy of the results is high, which is due to the difficulty of the composite test functions that make them challenging for algorithms employed in this work. The convergence curves of the algorithms on some of the composite test functions are illustrated in Fig. 9
                        . This figure shows that the ALO shows the fastest convergence on the composite test functions as well.

Composite test functions benchmark the exploration and exploitation combined. Therefore, these results prove that the operators of the ALO algorithm appropriately balance exploration and exploitation to handle diverse difficulties in a challenging search space. Since the composite search spaces are highly similar to the real search spaces, these results make the ALO algorithm potentially able to solve challenging optimization problems.

For further observing the performance of the proposed ALO algorithm, five new metrics are employed in this subsection. In fact, this subsection aims for identifying and confirming the convergence and potential behaviour of the ALO algorithm when solving real problems. The employed quantitative metrics are as follows:
                           
                              •
                              The position of antlions from the first to the last iteration (search history).

The interval of random walks.

The position of antlions from the first to the last iteration (trajectory).

The average fitness of antlions from the first to the last iterations.

The fitness of the elite from the first to the last iteration (convergence).

Tracking the position of antlions during optimization allows observing how the ALO algorithm explores and exploits the search space. The interval of random walks shows how the ALO algorithm adaptively adjusts the boundary of random walks towards the optimum during optimization. The position of the antlions during optimization assists observing the movement of candidate solutions. There should be abrupt changes in the movements of candidate solutions in the exploration phase and gradual changes in the exploitation phase. The average fitness of antlions during optimization also shows the improvement in the fitness of the whole population during optimization. Finally, the fitness of the elite shows the improvement of the obtained global optimum during optimization.

Some of the functions are selected and solved by four search agents over 200 iterations. The results are illustrated in Fig. 10
                        . The second column in Fig. 10 shows the history of antlion’s position during optimization. It may be observed that the ALO algorithm tends to search the promising regions of the search space extensively on all of the test functions. The behaviour of ALO when solving composite test functions is interesting, in which the coverage of search space seems to be high. In F17, for instance, two of the most promising areas close to the boundaries of the search space were explored, yet one of them was exploited eventually. This shows that the ALO’s search agents are able to search the search space effectively.

The intervals of random walks in the third column in Fig. 10 show that the boundaries of random walks are adjusted towards the optimum over the course of iterations. It also may be observed that the boundaries are wide in the initial steps of iterations, while they are very narrow in the final steps of iterations. Another behaviour is the adaptive shrinking trend of boundaries which allows more accurate exploitation of the optimum as iteration increases.

The fourth column in Fig. 10 illustrates the trajectory of the first variable of the first antlion over 200 iterations. It can be observed that there are abrupt changes in the initial iterations. These changes are decreased gradually over the course of iterations. According to Berg et al. [69], this behaviour can guarantee that an algorithm eventually convergences to a point and searches locally in a search space.

The last two columns of Fig. 10 show the average fitness of all antlions and the elite, respectively. The average fitness of antlions shows a descending behaviour on all of the test functions. This proves that the ALO algorithm improves the overall fitness of the initial random population. A similar behaviour can be observed in the convergence curves. This also evidences that the approximation of the global optimum becomes more accurate as iteration increases. Another fact that can be seen is the accelerated trend in the convergence curves. This is due to the emphasis on local search and exploitation as iteration increases, which highly accelerate the convergence towards the optimum in the final steps of iterations.

To further prove the merits of the proposed ALO algorithm, this subsection solves the 200-dimensional versions of the unimodal and multimodal test functions investigated in the preceding subsections. Hundred search agents (candidate solutions) are employed to solve these test problems over 5000 iterations to generate the results for this subsection. After all, the results are presented in Tables 10 and 11
                        
                        .

As per the results shown in Table 10, the ALO algorithm outperforms all the other algorithms on four of the unimodal test functions (F1, F3, F5, and F6). In addition, Table 11 shows that this algorithm provides the best results on half of the multi-modal test functions (F10, F12, and F13). For the rest of the unimodal and multi-modal test functions, the ALO is ranked as the second best after CS, FA, or PSO. Poor performances of the majority of algorithms in Tables 10 and 11 show that such large-scale test functions can be very challenging. These results highly evidence that the ALO algorithm can be very effective for solving large-scale problems as well.

As summary, the results of this section proves that the proposed ALO algorithm shows high exploration and exploitation. For one, the proposed random walk mechanism and random selection of antlions promote exploration, assist the ALO algorithm to avoid local optima, and resolve local optima stagnation when solving challenging problems. For another, adaptive shrinking boundaries of antlions’ traps and elitism emphasize exploitation as iteration increases, which leads to a very accurate approximation of the global optimum.

All these characteristics require the ALO algorithm to solve real optimization problems potentially. However, all of the problems solved so far have known search spaces. To prove whether the ALO algorithm is able to solve real problems with unknown search spaces as well, four real engineering problems are solved in the following sections. The first three problems are classical engineering design problems called: cantilever beam design, two-bar truss design, and gear design problems. These three problems are chosen deliberately because of their diverse characteristics. The cantilever beam design problem is chosen due to its medium number of parameter. The three-bar truss problem is selected due to its high number of constraints. Finally, the gear train design problem is chosen because of its discrete variables. These three problems can benchmark the ALO algorithm in solving real problems with diverse characteristics.

The last case study is a problem in the field of ship propeller design. This problem is a real Computational Fluid Dynamics (CFD) problem that has 20 variables and a large number of constraints. Therefore, the performance of the ALO algorithm can be benchmarked effectively in solving a super challenging problem.

Real systems (problems) are mostly constrained. There are two types of constraints involved in defining the feasibly of solutions during the design process: inequality and equality constraints. For optimizing constrained problems, a constraint handling method should be integrated to the optimizer. There are several methods of constraints handling in the literature: penalty functions, special operators, repair algorithms, separation of objectives and constraints, and hybrid methods [70]. Since finding a good constraints handling method for the proposed ALO algorithm is out of the scope of this work, the simplest method called death penalty is employed. In this method, search agents that violate any of the constraints with any level are treated as the same and penalized by assigning a large fitness value (small objective value in case of maximization). This method is very cheap and readily applicable for the ALO algorithm without algorithm modifications.

In the following subsections this method is used to solve the constrained engineering problems. It should be noted that the statistical results are not provided anymore since it was already proved that the ALO algorithm is able to outperform other algorithm in a statistically significant manner. In addition, the main objective of solving a real problem is to achieve the global optimum with the least possible computational cost. Therefore, this section only presents the best obtained design and the required maximum number of function evaluations to determine it during 10 runs as the results of the ALO and other algorithms.

A cantilever beam includes five hollow elements with square-shaped cross-section. Fig. 11
                         shows that each element is defined by one variable while the thickness is constant, so there is a total of 5 structural parameters. It may be see in Fig. 11 that there is also a vertical load applied to the free end of the beam (node 6) and the right side of the beam (node 1) is rigidly supported [71]. The objective is to minimize the weight of the beam. There is also one vertical displacement constraint that should not be violated by the final optimal design. The problem formulation is as follows:
                           
                              
                                 
                                 
                                 
                                    
                                       Consider
                                       
                                          
                                             
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      →
                                                   
                                                
                                                =
                                                [
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      2
                                                   
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      3
                                                   
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      4
                                                   
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      5
                                                   
                                                
                                                ]
                                                ,
                                             
                                          
                                       
                                    
                                    
                                       Minimize
                                       
                                          
                                             
                                                f
                                                (
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      →
                                                   
                                                
                                                )
                                                =
                                                0.6224
                                                (
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      1
                                                   
                                                
                                                +
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      2
                                                   
                                                
                                                +
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      3
                                                   
                                                
                                                +
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      4
                                                   
                                                
                                                +
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      5
                                                   
                                                
                                                )
                                                ,
                                             
                                          
                                       
                                    
                                    
                                       Subject to
                                       
                                          
                                             
                                                g
                                                (
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      →
                                                   
                                                
                                                )
                                                =
                                                
                                                   
                                                      61
                                                   
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            3
                                                         
                                                      
                                                   
                                                
                                                +
                                                
                                                   
                                                      37
                                                   
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            2
                                                         
                                                         
                                                            3
                                                         
                                                      
                                                   
                                                
                                                +
                                                
                                                   
                                                      19
                                                   
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            3
                                                         
                                                         
                                                            3
                                                         
                                                      
                                                   
                                                
                                                +
                                                
                                                   
                                                      7
                                                   
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            4
                                                         
                                                         
                                                            3
                                                         
                                                      
                                                   
                                                
                                                +
                                                
                                                   
                                                      1
                                                   
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            5
                                                         
                                                         
                                                            3
                                                         
                                                      
                                                   
                                                
                                                ⩽
                                                1
                                                ,
                                             
                                          
                                       
                                    
                                    
                                       Variable range
                                       
                                          
                                             
                                                0.01
                                                ⩽
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ,
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ,
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      3
                                                   
                                                
                                                ,
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      4
                                                   
                                                
                                                ,
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      5
                                                   
                                                
                                                ⩽
                                                100
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

This problem has been solved by ALO and compared with the literature in Table 12
                        . It may be seen that the comparison is made between Method of Moving Asymptotes (MMA) [71], Generalized Convex Approximation (GCA_I) [71], GCA_II [71], CS [72], and Symbiotic Organisms Search (SOS) [72].


                        Table 12 shows that the ALO algorithm outperforms other algorithms. This shows the high performance of the ALO algorithm in approximating the global optimum for this problem. The maximum number of function evaluations in Table 12 also shows that the ALO algorithm determines the global optimum for this problem with less number of function evaluations than the SOS algorithm. In addition, it is observed the ALO algorithm is able to find a design with the optimal weight identical to that of CS with a lower number of function evaluation. However, this algorithm needs 14,000 function evaluations to outperform both SOS and CS algorithms.

The second problem is to design a three-bar truss to minimize its weight [72,74]. The objective function is very simple, yet the problem is highly constrained. The structural design problems usually have a large number of constraints. The constraints here are stress, deflection, and buckling constraints. The mathematical formulation of this problem is as follows:
                           
                              
                                 
                                 
                                 
                                    
                                       Consider
                                       
                                          
                                             
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      →
                                                   
                                                
                                                =
                                                [
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ]
                                                =
                                                [
                                                
                                                   
                                                      A
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                   
                                                      A
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ]
                                                ,
                                             
                                          
                                       
                                    
                                    
                                       Minimize
                                       
                                          
                                             
                                                f
                                                (
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      →
                                                   
                                                
                                                )
                                                =
                                                (
                                                2
                                                
                                                   
                                                      2
                                                   
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      1
                                                   
                                                
                                                +
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      2
                                                   
                                                
                                                )
                                                ∗
                                                l
                                                ,
                                             
                                          
                                       
                                    
                                    
                                       Subject to
                                       
                                          
                                             
                                                
                                                   
                                                      g
                                                   
                                                   
                                                      1
                                                   
                                                
                                                (
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      →
                                                   
                                                
                                                )
                                                =
                                                
                                                   
                                                      
                                                         
                                                            2
                                                         
                                                      
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            2
                                                         
                                                      
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      +
                                                      2
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                
                                                P
                                                -
                                                σ
                                                ⩽
                                                0
                                                ,
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      g
                                                   
                                                   
                                                      2
                                                   
                                                
                                                (
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      →
                                                   
                                                
                                                )
                                                =
                                                
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            2
                                                         
                                                      
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      +
                                                      2
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                
                                                P
                                                -
                                                σ
                                                ⩽
                                                0
                                                ,
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      g
                                                   
                                                   
                                                      3
                                                   
                                                
                                                (
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      →
                                                   
                                                
                                                )
                                                =
                                                
                                                   
                                                      1
                                                   
                                                   
                                                      
                                                         
                                                            2
                                                         
                                                      
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                   
                                                
                                                P
                                                -
                                                σ
                                                ⩽
                                                0
                                                ,
                                             
                                          
                                       
                                    
                                    
                                       Variable range
                                       
                                          
                                             
                                                0
                                                ⩽
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ,
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ⩽
                                                1
                                                ,
                                             
                                          
                                       
                                    
                                    
                                       where
                                       
                                          
                                             
                                                l
                                                =
                                                100
                                                
                                                cm,
                                                
                                                P
                                                =
                                                2
                                                
                                                kN
                                                /
                                                
                                                   
                                                      cm
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ,
                                                
                                                σ
                                                =
                                                2
                                                
                                                kN
                                                /
                                                
                                                   
                                                      cm
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The overall structure of the truss is illustrated in Fig. 12
                        .

The algorithms that are chosen for comparison are: Differential Evolution with Dynamic Stochastic selection (DEDS) [75], Hybrid Particle Swarm Optimization with Differential Evolution (PSO-DE) [76], Mine Blast Algorithm (MBA) [74], Tsa [77], and CS [72]. The comparison results are provided in Table 13
                        .


                        Table 13 shows that the ALO algorithm provides very competitive results and its best solution obtained is ranked as the second best solution after that of PSO-DE. It also provides very close results compared to PSO-DE (discrepancy is equal to 0.0000001). This again shows that the ALO algorithm is able to solve real constrained problems effectively. It should be noted that the optimal weight of the design obtained by Tsa violates one of the constraints [72]. As per the maximum number of function evaluations reported in Table 13, the ALO algorithm needs only 14,000 function evaluation to find a design with the optimal weight of 263.8958434, which is less than other algorithms.

As shown in Fig. 13
                        , this problem is a discrete case study with four parameters. The objective is to find the optimal number of tooth for four gears of a train for minimizing the gear ratio [79,80]. To handle discrete parameters, each search agent was rounded to the nearest integer number before the fitness evaluation.

The mathematical formulation of this problem is as follows:
                           
                              
                                 
                                 
                                 
                                    
                                       Consider
                                       
                                          
                                             
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      →
                                                   
                                                
                                                =
                                                [
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      2
                                                   
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      3
                                                   
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      4
                                                   
                                                
                                                ]
                                                =
                                                [
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      A
                                                   
                                                
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      B
                                                   
                                                
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      C
                                                   
                                                
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      D
                                                   
                                                
                                                ]
                                                ,
                                             
                                          
                                       
                                    
                                    
                                       Minimize
                                       
                                          
                                             
                                                f
                                                (
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      →
                                                   
                                                
                                                )
                                                =
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  1
                                                               
                                                               
                                                                  6.931
                                                               
                                                            
                                                            -
                                                            
                                                               
                                                                  
                                                                     
                                                                        x
                                                                     
                                                                     
                                                                        3
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        x
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                               
                                                               
                                                                  
                                                                     
                                                                        x
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        x
                                                                     
                                                                     
                                                                        4
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ,
                                             
                                          
                                       
                                    
                                    
                                       Subject to
                                       
                                          
                                             
                                                12
                                                ⩽
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ,
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ,
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      3
                                                   
                                                
                                                ,
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      4
                                                   
                                                
                                                ⩽
                                                60
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The best optimal design obtained by the ALO and other algorithms in the literature are presented in Table 14
                        .

This table shows that the proposed ALO algorithm finds a design with the optimal value identical to those of Artificial Bee Colony (ABC) algorithm [74], MBA [74], CS [72], and Interior Search Algorithm (ISA) [79]. However, the optimal values for variables obtained are different. Therefore, this design can be considered as a new design with a similar optimal gear ratio. However, the maximum numbers of function evaluations presented in Table 14 show that the ALO requires much less computational cost to determine the global optimum. Once more, these results prove that the proposed ALO algorithm can solve discrete real problems efficiently with low computational cost.

The results of these three engineering problems strongly evidence the merits of the ALO algorithm in solving problems with unknown search spaces. The results also show that the proposed algorithm is suitable for constrained and discrete problems. This is due to the employed mechanism of saving the best feasible solutions obtained as the elite and antlions, in which the ants are guided towards promising feasible regions of the search space. This leads to boosting the exploration of the feasible areas of a search space.

To further confirm and demonstrate these statements, two ship propellers are optimized by the proposed ALO algorithm in the next section.

Propellers provide thrust for moving marine and aero vehicles. Due to the high density of water, efficiency of a propeller becomes very important. The propellers that are going to be optimized by the ALO algorithm as case studies have 2m diameter and 4 or 5 blades. The 3D model of the five-blade propeller is illustrated in Fig. 14
                     .

Achieving the highest efficiency is the main goal of propeller design which is defined as follows [85]: 
                        
                           (5.1)
                           
                              η
                              =
                              
                                 
                                    
                                       
                                          V
                                       
                                       
                                          a
                                       
                                    
                                 
                                 
                                    2
                                    π
                                    nD
                                 
                              
                              ×
                              
                                 
                                    
                                       
                                          K
                                       
                                       
                                          T
                                       
                                    
                                    (
                                    x
                                    )
                                 
                                 
                                    
                                       
                                          K
                                       
                                       
                                          Q
                                       
                                    
                                    (
                                    x
                                    )
                                 
                              
                           
                        
                     where V is axial velocity, D is the diameter of the propeller, n is the rotation speed of the propeller, KT
                      indicates the thrust coefficient, and KQ
                      shows that torque coefficient.


                     KT
                      is calculated as follows:
                        
                           (5.2)
                           
                              
                                 
                                    K
                                 
                                 
                                    T
                                 
                              
                              (
                              x
                              )
                              =
                              
                                 
                                    T
                                 
                                 
                                    ρ
                                    
                                       
                                          n
                                       
                                       
                                          2
                                       
                                    
                                    
                                       
                                          D
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                           
                        
                     where ρ shows the fluid density, T is the thrust, n indicates the rotation speed of the propeller, and D is the diameter length.

The structural parameters of a propeller are defined based on the representation method of the shape of the blades. A popular method for representing and modelling the shape of a propeller’s blade is called Bézier curves. This method utilizes a set of controlling parameter to define the curvature of the airfoils along the blade. Another simple method is to define standard airfoils as the cross sections of a propeller’s blade and adjust their special parameters. In this study, the second method is chosen due to its simplicity. Fig. 15
                      shows the structural parameters when using standard airfois.

We consider 10 airfoils along the blade, so the total number of parameters to be optimized by the ALO algorithm is 20. The parameters are as follows:
                        
                           •
                           
                              x
                              1
                              −
                              x
                              2: the chord length and maximum thickness of the first airfoil


                              x
                              3
                              −
                              x
                              4: the chord length and maximum thickness of the second airfoil

…


                              x
                              19
                              −
                              x
                              20: the chord length and maximum thickness of the tenth (last) airfoil

The objective is also the maximization of efficiency. Therefore, this problem can be formulated as a maximization problem as follows: 
                        
                           (5.3)
                           
                              Suppose
                              :
                              
                              
                                 
                                    
                                       
                                          X
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    →
                                 
                              
                              =
                              (
                              
                                 
                                    x
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    x
                                 
                                 
                                    2
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    x
                                 
                                 
                                    n
                                 
                              
                              )
                              ,
                           
                        
                     
                     
                        
                           (5.4)
                           
                              Maximize
                              :
                              
                              η
                              (
                              x
                              )
                           
                        
                     
                     
                        
                           (5.5)
                           
                              Subject to
                              :
                              
                              wake friction and thrust deduction
                           
                        
                     
                     
                        
                           (5.6)
                           
                              Parameter range
                              :
                              
                              0
                              <
                              
                                 
                                    x
                                 
                                 
                                    1
                                 
                              
                              -
                              
                                 
                                    x
                                 
                                 
                                    10
                                 
                              
                              ⩽
                              1
                           
                        
                     
                  

It should be noted that the full list of all constrains is not reported due the large number and complexity of their mathematical formulations. The large number of constraints makes this problem very challenging and expensive, in which each function evaluation can take up to 5min for each design. As the simulator, an open source software called Openprop [87] is utilized. The initial parameters, constant structural parameters, and operating conditions of the propeller are listed in Table 15
                     .

To approximate the global optimum of this problem using the ALO algorithm, 40 search agents and 500 iterations are employed. Due to the expensive computational cost of the objective function, the algorithm was run only twice, which took around a week. The best optimal design parameters obtained are provided in Tables 16–18
                     
                     
                     . Note that two different propellers with four and five blades are considered.

The optimal efficiencies obtained for both propellers are 0.68551 and 0.68647. Other performance indicators of the optimal design obtained are presented in Table 18.

The fitness history of the elite when optimizing the shape of propeller is illustrated in Fig. 16
                     , which show the improvements of the initial random shape during optimization.

For further observation of the impacts of ALO in improving the initial random shapes for the propellers, Fig. 17
                      is provided. This figure shows how the ALO algorithm finds a very smooth shape for the blades in order to maximize efficiency for both propellers.

Once more, all these results prove the merits of the proposed algorithm in solving challenging problems with unknown search spaces. Therefore, this powerful optimization technique is offered as a tool for finding the optimal designs of optimization problems in different fields of study.

@&#CONCLUSION@&#

This work proposed a novel nature-inspired algorithm called ALO. The hunting behaviour of antlions and entrapment of ants in antlions’ traps were the main inspirations for this algorithm. Several operators were proposed and mathematically modelled for equipping the ALO algorithm with high exploration and exploitation. The performance of the proposed algorithm was benchmarked on 19 test functions in terms of exploration, exploitation, local optima avoidance, fitness improvement of the population, search history, trajectory of antlions, and convergence rate. As per the superior results of the ALO on the majority of the unimodal test functions and convergence curves, it can be concluded that the proposed algorithm benefits from high exploitation and convergence rate. The main reason for the high exploitation and convergence speed is due to the proposed adaptive boundary shrinking mechanism and elitism. High exploration of ALO can be concluded from the results of multimodal and composite test functions, which is due the employed random walk and roulette wheel selection mechanisms.

From the average fitness of all antlions during optimization, it is evidently concluded that the ALO algorithm successfully improves the overall fitness of random initial solutions on optimization problems. In addition, the convergence curves and search histories proved that the ALO algorithm effectively searches and converges towards the most promising regions of the search space. Therefore, the proposed algorithm has the potential to discover different regions of a given problem. Finally, the trajectories evidenced that the ALO algorithm requires antlions to move abruptly in the initial steps of optimizing and locally in the final steps of optimization, which leads to a smooth balance and transition between exploration and exploitation.

The ALO algorithm was compared to seven well-known and recent algorithms in the literature: PSO and GA, SMS, BA, FPA, CS, and FA. Wilcoxon statistical tests were also conducted when comparing the algorithms. The results showed that the proposed algorithm provides very competitive results and outperforms other algorithms in the majority of test functions. The statistical test also proved that the results were statistically significant for the ALO algorithm. Therefore, it may be concluded from the comparative results that the proposed ALO algorithm is able to be employed as an alternative optimizers for optimizing different problems.

The paper also considered solving three classical engineering problems and one challenging CFD problem using the ALO algorithm. The results of the ALO algorithm on these real problems were compared to a wide range of other algorithms in the literature. The comparative results demonstrated that the ALO algorithm is able to solve real problems with unknown search spaces as well. With these findings, another conclusion is that the proposed ALO algorithm is able to solve real problems with unknown search spaces as well. Other conclusion remarks that can be made from the results of this study are as follows:
                        
                           •
                           Random selection of antlions using a roulette wheel guarantees exploration of the search space.

Random walks of ants around the antlions also emphasize exploration of the search space around the antlions.

The use of random walk and roulette wheel assist the ALO algorithm to resolve local optima stagnations.

Local optima avoidance is very high since the ALO algorithm employs a population of search agents to approximate the global optimum.

Calculating random walks for every ant and every dimension causes diverse movement behaviours for ants inside the antlions’ traps and maintains the diversity of position explored around antlions.

Adaptive shrinking mechanism for defining the boundaries of random walks promotes exploitation as the iteration counter increases.

Intensity of ants’ movement is adaptively decreased over the course of iterations, which guarantee convergence of the ALO algorithm.

Promising areas of search spaces are saved since antlions relocate to the position of the best ants during optimization.

The best antlion in each iteration is saved and considered as the elite, so all ants tend towards the best solution obtained so far as well.

The ALO algorithm has very few parameters to adjust of which some of them are adaptive, so it is a flexible algorithm for solving diverse problems.

The ALO algorithm is a gradient-free algorithm and considers problems as a black box, so it is readily applicable for solving real problems.

Several research directions can be recommended for future studies with the proposed algorithm. Solving different optimization problems in different fields can be done. In addition, extending this algorithm to solve multi- and many-objective problems can be considered as a good contribution. Another research direction is to investigate the effectiveness of other random walks such as lévy flight in improving the performance of the ALO algorithm.


                        
                           
                              
                                 
                                 
                                    
                                       
                                          
                                             
                                                {
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      Ant
                                                   
                                                
                                                ,
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      Antlion
                                                   
                                                
                                                }
                                                =
                                                A
                                                (
                                                )
                                                ;
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             while
                                           
                                          
                                             
                                                C
                                                (
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      Ant
                                                   
                                                
                                                ,
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      Antlion
                                                   
                                                
                                                )
                                                
                                                ≠
                                                
                                                true
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                          
                                          
                                             
                                                {
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      Ant
                                                   
                                                
                                                ,
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      Antlion
                                                   
                                                
                                                }
                                                =
                                                B
                                                (
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      Ant
                                                   
                                                
                                                ,
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      Antlion
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             end while
                                          
                                       
                                    
                                 
                              
                           
                        
                     


                        
                           
                              
                                 
                                 
                                    
                                       
                                          
                                             for
                                           
                                          i=1: n
                                       
                                    
                                    
                                       
                                          
                                          
                                             for
                                           
                                          j=1: d
                                       
                                    
                                    
                                       
                                          
                                          
                                          MAnt (i,j)
                                          =
                                          (d(i)−c(i))
                                          ∗
                                          rand()+c(i);
                                       
                                    
                                    
                                       
                                          
                                          
                                          MAntlion (i,j)
                                          =
                                          (d(i)−c(i))
                                          ∗
                                          rand()+c(i);
                                       
                                    
                                    
                                       
                                          
                                          
                                             end
                                          
                                       
                                    
                                    
                                       
                                          
                                             end
                                          
                                       
                                    
                                    
                                       
                                          MOA
                                          
                                          =
                                          FitnessFunction(MAnt
                                          );
                                    
                                    
                                       
                                          MOAL
                                          
                                          =
                                          FitnessFunction(MAntlion
                                          );
                                    
                                    
                                       
                                          MAntlion
                                          
                                          =
                                          sort(MAntlion
                                          );
                                    
                                    
                                       
                                          MOAL
                                          
                                          =
                                          sort(MOAL
                                          );
                                    
                                    
                                       
                                          Optimum
                                          =
                                          MAntlion
                                          (1,:);
                                       
                                    
                                 
                              
                           
                        where c(i) and d(i) are the lower and upper bounds of the i-th parameter, respectively.


                        
                           
                              
                                 
                                 
                                    
                                       
                                          Update 
                                          
                                             
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      →
                                                   
                                                
                                             
                                           
                                          and 
                                          
                                             
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      →
                                                   
                                                
                                             
                                           
                                          using Eqs. (2.10) and (2.11)
                                       
                                    
                                    
                                       
                                          
                                             for
                                           
                                          i=1: n
                                       
                                    
                                    
                                       
                                          
                                          Antlion=RouletteWheelSelection (MAntlion
                                          ,1/MOAL
                                          )
                                    
                                    
                                       
                                          
                                          Update c and d using Eqs. (2.10) and (2.11)
                                       
                                    
                                    
                                       
                                          
                                          c
                                          =
                                          Antlion
                                          +
                                          c
                                       
                                    
                                    
                                       
                                          
                                          d
                                          =
                                          Antlion
                                          +
                                          d
                                       
                                    
                                    
                                       
                                          
                                          celite
                                          
                                          =
                                          Elite
                                          +
                                          c
                                       
                                    
                                    
                                       
                                          
                                          delite
                                          
                                          =
                                          Elite
                                          +
                                          d
                                       
                                    
                                    
                                       
                                          
                                          
                                             for
                                           
                                          j=1 : d
                                       
                                    
                                    
                                       
                                          
                                          
                                          RA
                                          
                                          =
                                          X(t) in Eq. (2.1)
                                       
                                    
                                    
                                       
                                          
                                          
                                          RA
                                          
                                          =
                                          normalize(RA
                                          , c, d) in Eq. (2.7)
                                       
                                    
                                    
                                       
                                          
                                          
                                          RE
                                          
                                          =
                                          X(t) in Eq. (2.1)
                                       
                                    
                                    
                                       
                                          
                                          
                                          RE
                                          
                                          =
                                          normalize(RE
                                          , celite
                                           ,delite
                                          ) in Eq. (2.7)
                                       
                                    
                                    
                                       
                                          
                                          
                                          MAnt
                                           (i,j)=(RA
                                          
                                          +
                                          RE
                                          )/2
                                    
                                    
                                       
                                          
                                          
                                             end
                                          
                                       
                                    
                                    
                                       
                                          
                                             end
                                          
                                       
                                    
                                    
                                       
                                          MOA
                                          
                                          =
                                          FitnessFunction(MAnt
                                          )
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      combined
                                                   
                                                
                                                =
                                                concanenation
                                                
                                                of
                                                
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      Ant
                                                   
                                                
                                                
                                                and
                                                
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      Antlion
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          Mcombined
                                          
                                          =
                                          sort(Mcombined
                                          )
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      Antlion
                                                   
                                                
                                                =
                                                the
                                                
                                                first
                                                
                                                n
                                                
                                                rows
                                                
                                                of
                                                
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      combined
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             If
                                           
                                          fintessfunction(MAntlion
                                          (1,:))<
                                          f(Elite)
                                       
                                    
                                    
                                       
                                          
                                          Elite
                                          =
                                          MAntlion
                                          (1,:)
                                    
                                    
                                       
                                          
                                             End
                                          
                                       
                                    
                                 
                              
                           
                        
                     

See Table 19
                        .

Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.advengsoft.2015.01.010. Note that in the videos, the red triangles represent antlions and the blue circles show ants.


                     
                        
                           Supplementary video 1
                           
                        
                     
                     
                        
                           Supplementary video 2
                           
                        
                     
                     
                        
                           Supplementary video 3
                           
                        
                     
                  

@&#REFERENCES@&#

