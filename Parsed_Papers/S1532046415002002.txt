@&#MAIN-TITLE@&#The cost of quality: Implementing generalization and suppression for anonymizing biomedical data with minimal information loss

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We study a frequently recommended transformation model for health data anonymization.


                        
                        
                           
                           We prove that common assumptions about privacy models do not hold in this context.


                        
                        
                           
                           As a consequence, existing approaches provide only sub-optimal data quality.


                        
                        
                           
                           We show that a simple alternative method is inefficient in terms of execution times.


                        
                        
                           
                           We propose a novel approach to overcome these limitations.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Security

Privacy

De-identification

Anonymization

Statistical disclosure control

Optimization

@&#ABSTRACT@&#


               
               
                  Objective
                  With the ARX data anonymization tool structured biomedical data can be de-identified using syntactic privacy models, such as k-anonymity. Data is transformed with two methods: (a) generalization of attribute values, followed by (b) suppression of data records. The former method results in data that is well suited for analyses by epidemiologists, while the latter method significantly reduces loss of information. Our tool uses an optimal anonymization algorithm that maximizes output utility according to a given measure. To achieve scalability, existing optimal anonymization algorithms exclude parts of the search space by predicting the outcome of data transformations regarding privacy and utility without explicitly applying them to the input dataset. These optimizations cannot be used if data is transformed with generalization and suppression. As optimal data utility and scalability are important for anonymizing biomedical data, we had to develop a novel method.
               
               
                  Methods
                  In this article, we first confirm experimentally that combining generalization with suppression significantly increases data utility. Next, we proof that, within this coding model, the outcome of data transformations regarding privacy and utility cannot be predicted. As a consequence, existing algorithms fail to deliver optimal data utility. We confirm this finding experimentally. The limitation of previous work can be overcome at the cost of increased computational complexity. However, scalability is important for anonymizing data with user feedback. Consequently, we identify properties of datasets that may be predicted in our context and propose a novel and efficient algorithm. Finally, we evaluate our solution with multiple datasets and privacy models.
               
               
                  Results
                  This work presents the first thorough investigation of which properties of datasets can be predicted when data is anonymized with generalization and suppression. Our novel approach adopts existing optimization strategies to our context and combines different search methods. The experiments show that our method is able to efficiently solve a broad spectrum of anonymization problems.
               
               
                  Conclusion
                  Our work shows that implementing syntactic privacy models is challenging and that existing algorithms are not well suited for anonymizing data with transformation models which are more complex than generalization alone. As such models have been recommended for use in the biomedical domain, our results are of general relevance for de-identifying structured biomedical data.
               
            

@&#INTRODUCTION@&#

Collaborative collection and sharing of sensitive personal data have become an important element of biomedical research. To protect patient privacy in complex research environments, a broad spectrum of safeguards must be implemented, including legal, contractual as well as technical methods. Data anonymization is a central building block in this context. It aims at sanitizing datasets in ways that prevent attackers from breaching the subjects’ privacy. A number of incidents have shown that simply removing all directly identifying information (e.g. names) is not sufficient [1–3]. As a consequence, different definitions of privacy and techniques for sanitizing datasets have been proposed [4–7]. As sanitization inevitably leads to loss of information and thus a decrease in data utility, a balance has to be sought between privacy risks on one side and suitability for a specific use case on the other.

According to national laws, such as the US Health Insurance Portability and Accountability Act (HIPAA) [8], and international regulations, such as the European Directive on Data Protection [9], different methods may be used. In particular, the HIPAA Privacy Rule defines two basic methods for de-identifying datasets [10]. The first method requires the removal or the modification of a pre-defined set of attributes and attribute values. The second method, which is called “expert determination” requires that a professional “determines that the risk is very small that the information could be used […] to identify an individual” 
                     [10]. For this purpose, methods of statistical disclosure control may be used.

In this work, we will focus on statistical disclosure control for structured data, which can be represented in a tabular form with each row corresponding to the data about one individual [6]. Specifically, we will describe methods implemented in ARX, a data anonymization tool that we have developed for the biomedical domain [11,12]. A typical use case is the de-identification of research data prior to sharing. To our knowledge, ARX offers the most comprehensive support of methods for anonymizing structured data to date. Its highlights include methods for risk analyses, risk-based anonymization, syntactic privacy models and methods for automated and manual analysis of data utility. Moreover, the tool implements an intuitive coding model, is highly scalable and provides a sophisticated graphical user interface with several wizards and visualizations that guide users through different aspects of the anonymization process.

@&#BACKGROUND@&#

ARX implements methods that offer dynamic means for balancing privacy risks with data utility. Privacy requirements are expressed in the form of syntactic privacy criteria. Data is transformed with coding models, in particular generalization and suppression of attribute values, to ensure that they fulfill the specified privacy requirements. Risk models are used to estimate risks of re-identification, which are an inherent aspect of many privacy models. Finally, utility measures are used to estimate the suitability of the resulting datasets for specific usage scenarios. A balancing of privacy and utility is achieved through user feedback: by choosing different privacy models, risk estimates, transformation methods, and utility measures as well as by varying the parameters which regulate the different steps.

When anonymizing structured data, the general attack vector assumed is linkage of a sensitive dataset with an identified dataset (or similar background knowledge about individuals). The attributes that may be used for linkage are termed quasi-identifiers (or indirect identifiers, or keys). Such attributes are not identifiers per se but may in combination be used for linkage. Moreover, it is assumed that they cannot simply be removed from the dataset as they may be required for analyses and that they are likely to be available to an attacker. Furthermore, it is assumed that directly identifying information (such as names) has already been removed from the dataset. An example dataset with different types of attributes is shown in Table 1
                        . The semantics of sensitive attributes will be explained in Section 2.1.

Datasets are often protected against identity disclosure (or re-identification), which means that an individual can be linked to a specific data entry [3]. This is a very important type of attack, as it has legal consequences for data owners according to many laws and regulations worldwide. Protection may be implemented with the k-anonymity privacy model [3]. A dataset is k-anonymous if, regarding the quasi-identifiers, each data item cannot be distinguished from at least 
                           
                              k
                              -
                              1
                           
                         other data items. This property can be used to define equivalence classes of indistinguishable entries [13,13a]. The output dataset from Table 1 fulfills 2-anonymity.

When data is anonymized, values of quasi-identifiers are transformed to ensure that the data fulfills privacy requirements. In ARX this data recoding is primarily performed with generalization hierarchies. Examples are shown in Fig. 1
                        . Here, values of the attribute age are first transformed into age groups and then suppressed, while values of the attribute gender can only be suppressed. Diagnoses can be grouped by anatomy, nosology or etiology. Anatomy has been used in the example. Generalization hierarchies are well suited for categorical attributes. They can also be used for continuous attributes by performing categorization. In the example from Table 1, the attribute age is generalized to the first level of the according hierarchy.

To create anonymized datasets of high quality, ARX combines attribute generalization with the suppression of data records. This means that entries from equivalence classes that violate the privacy model (i.e. outliers) are automatically replaced with semantic-free placeholders, while the percentage of suppressed records is kept under a given threshold. With a threshold 
                           
                              0
                              ⩽
                              s
                              <
                              1
                           
                        , which is the so called suppression limit, a dataset with m entries is considered anonymized even if 
                           
                              ⌊
                              s
                              ∗
                              m
                              ⌋
                           
                         entries needed to be suppressed to fulfill the given privacy requirements [14]. Alternatively, ARX is able to automatically balance the application of both coding models to achieve optimal utility. As a result of tuple suppression, less generalization is required to ensure that the remaining records fulfill the privacy model which increases the utility of anonymized datasets [14]. In the output from Table 1 the last two records have been suppressed.

Our tool implements a globally-optimal anonymization algorithm that uses utility measures to ensure that a data transformation results in minimal loss of information. We support several well-known methods. Some calculate data utility (also termed quality or precision) of transformed datasets, while others calculate information loss. As the ARX system uses utility measures only to compare the results of different data transformations to each other, both types of measures can be used interchangeably by defining information loss to be the opposite of utility. A simple measure for information loss is the Average Equivalence Class Size (AECS) [15]. It is defined as the number of records in the dataset divided by the number of equivalence classes. In terms of AECS, the generalized dataset from Table 1 results in an information loss of 
                           
                              
                                 
                                    8
                                 
                                 
                                    4
                                 
                              
                              =
                              2
                           
                        .

Globally-optimal data anonymization algorithms construct a solution space which is then searched for a data transformation fulfilling a given privacy model while resulting in maximal utility according to a given measure. To achieve scalability in this process, they typically exclude parts of the solution space by predicting the outcome of data transformations regarding privacy and utility without explicitly applying them to the input dataset. These optimizations are based on two well-known concepts, monotonicity of privacy models and monotonicity of utility measures, which will be explained in more detail in the following section. In this article, we will show that both concepts are not directly applicable if data is transformed with generalization and suppression. As a consequence, existing algorithms fail to deliver optimal data utility. Optimality of results can be guaranteed if the described optimizations are not implemented, but this significantly reduces performance. As performance is important for anonymizing data with user feedback, we had to develop a novel method to achieve scalability.

In summary, we will present the following scientific contributions: (1) extensive experiments that clearly show that combining generalization with tuple suppression leads to a significant increase in data utility, (2) the first comprehensive study of monotonicity of common privacy criteria and utility measures within a coding model that uses generalization and suppression, (3) an experimental evaluation that shows that existing anonymization methods do not produce optimal results when data is anonymized with generalization and tuple suppression, (4) a novel algorithm which overcomes this limitation while ensuring scalability by adopting existing optimization strategies to our context and by combining different search methods, (5) a comprehensive evaluation showing the efficiency and effectiveness of our approach.

@&#MATERIAL AND METHODS@&#

In this section, we will first quickly review basic concepts that are central to our work. In particular, we will shortly describe common privacy threats, privacy models and utility measures. We will then describe the transformation model investigated in this article. Next, we will introduce the monotonicity property for privacy models and utility measures and describe common optimization strategies. We will then study these concepts within a transformation model that combines generalization and suppression. Finally, we will propose a novel approach and describe the experimental setup used in our evaluation.

In addition to identity disclosure, which we have already explained in the previous section, two types of privacy threats are commonly considered in statistical disclosure control [16]. First, membership disclosure means that linkage allows to determine whether or not data about an individual is contained in a dataset [17]. Second, attribute disclosure means that an individual can be linked with a sensitive attribute. An attribute is considered sensitive if individuals do not want to be linked with it. This may be achieved even without linking an individual to a specific item in a dataset [18]. As an example, linkage to a set of data entries allows inferring information if all items share a certain sensitive attribute value.

To prevent such privacy breaches, ARX implements privacy models that apply syntactic privacy criteria on a dataset. The tool supports arbitrary combinations of four well-known privacy models. (1) k-Anonymity, which we have already defined in the previous section. (2) ℓ-Diversity 
                        [18] and (3) t-closeness 
                        [19], which aim at protecting datasets against disclosure of sensitive attribute values. The former, requires that each sensitive attribute must have at least 
                           
                              ℓ
                           
                         
                        “well represented” values in each equivalence class. ARX implements three variants, which use different notions of diversity: distinct-ℓ-diversity, which requires 
                           
                              ℓ
                           
                         different sensitive values per class, as well as recursive-(c, ℓ)-diversity and entropy-ℓ-diversity. The output dataset from Table 1 fulfills distinct-2-diversity. t-Closeness requires that the distance between the distribution of sensitive values in each equivalence class and their overall distribution in the dataset must be lower than a given threshold. (4) δ-Presence, which aims at protecting datasets against membership disclosure [17]. For overviews of further models the interested reader is referred to [4,6,20].

In data anonymization, utility measures are used to automatically compare data transformations to determine an optimal solution. In this article, we focus on the following four utility measures. (1) Discernibility, which was introduced by Bayardo et al. [14]. It is based on the sizes of the equivalence classes and introduces a penalty for suppressed entries. (2) The Average Equivalence Class Size measure, which was proposed by LeFevre et al. [21]. (3) The Precision measure, which was proposed by Latanya Sweeney [22]. It summarizes the degree of generalization applied to all attribute values. (4) Non-Uniform Entropy, which was proposed by Gionis and Tassa [23]. It computes a distance between the distribution of attribute values in an anonymized dataset and the distribution of attribute values in the original dataset. Discernibility and AECS are computed based on the sizes of the equivalence classes. In the remainder of this article, we will therefore refer to them as class-based measures. In contrast, Precision and Non-Uniform Entropy are computed individually for each attribute and then compiled into a global measure. We will therefore refer to them as attribute-based measures. An overview of further utility measures can be found in [20].

ARX and its search algorithm Flash utilize a coding model that comprises global recoding with full-domain generalization followed by local recoding with tuple suppression 
                        [24]. For the purpose of this article, we will resort to a slightly simplified classification of coding models; more details can be found in [20]. In the context of this article, global recoding means that the same transformation rule is applied to all entries in the dataset, while local recoding means that different transformations can be applied to different entries. Full-domain generalization means that all values of an attribute are generalized to the same level of the associated hierarchy. Tuple suppression means that a complete record is replaced with a semantic-free place-holder.

When global recoding with full-domain generalization is used as a coding model, it is possible to model the search space as a generalization lattice, which is a partially ordered set of all possible combinations of generalization levels of each attribute. In this article, we will use the short term transformation to describe a combination of generalization levels for all quasi-identifiers. Lattices can be visualized with Hasse diagrams, which in our context means to draw the transitive reduction of a set of transformations in an acyclic graph where each node is connected to all of its direct successors and predecessors [25]. An example utilizing the hierarchies for age and gender from Fig. 1 is shown in Fig. 2
                        . Each node represents one transformation. An arrow indicates that a transformation is a direct generalization of a more specialized transformation that can be created by incrementing one of the generalization levels defined by its predecessor. The original dataset is at the bottom (0, 0), whereas the transformation with maximal generalization (2, 1) is at the top. The output dataset from Table 1 can be produced by applying the transformation (1, 0) to the input data followed by suppressing the last two entries. When a transformation from the solution space is analyzed by the algorithm, the coding model is applied as follows:
                           
                              •
                              
                                 Step 1: Generalize the dataset according to the given transformation.


                                 Step 2: Suppress all entries in all equivalence classes that do not fulfill the privacy model.


                                 Step 3: If the number of suppressed entries is lower than the given threshold, the transformation is a solution candidate.


                                 Step 4: If the transformation is a solution candidate, compute the utility of the transformed dataset.

In the remainder of this article, we will call a data representation, a transformation or an equivalence class that do or do not fulfill a given set of privacy criteria anonymous or non-anonymous, respectively.


                        Monotonicity is an important concept for increasing the scalability of globally-optimal anonymization algorithms. It is closely tied to generalization and it also applies to the specific type of generalization used in our work [26]. Monotonicity can be a property of utility measures as well as a property of privacy models.

A privacy criterion is monotonic, if the fact that a dataset fulfills the criterion implies that any generalization of the dataset fulfills the criterion as well [14,15]. It follows that in the type of solution spaces investigated in this work, all (direct and indirect) generalizations of a transformation that fulfills a privacy criterion also fulfill the privacy criterion [26]. It is easy to see that this implies the reverse as well: all (direct and indirect) specializations of a transformation that does not fulfill a privacy criterion will not fulfill the criterion either. An example is shown in Fig. 3
                        . Here, the fact that the transformation (1, 1) is non-anonymous implies that the transformations (1, 0), (0, 1) and (0, 0) are also non-anonymous. Moreover, as the transformation (2, 0) is anonymous, the transformation (2, 1) must be anonymous as well.

A utility measure is monotonic if it is guaranteed that data utility will either decrease or remain the same when a dataset is generalized [23,26]. It follows that in the type of solution spaces covered in this article, all (direct and indirect) generalizations of a transformation will have lower or the same utility. Again, it is easy to see that this also implies the reverse: all (direct and indirect) specializations of a transformation will have greater or equal utility. As is shown in Fig. 3, this means that data utility decreases monotonically on every path from the transformation with minimal generalization (0, 0) to the transformation with maximal generalization (2, 1). Such paths have been called generalization strategies by Emam et al. [26].

Monotonicity of privacy models and utility measures is frequently used to increase the efficiency of globally-optimal anonymization algorithms [15,26,24]. Firstly, the monotonicity of privacy models allows to exclude predecessors of non-anonymous transformations from the process of checking for anonymity, as these are guaranteed to be non-anonymous as well. Analogously, monotonicity of utility metrics allows to exclude successors of anonymous transformations from the process of checking for anonymity (as well as from the process of computing data utility), as these can never result in better data utility. In the example from Fig. 3, the transformation (2, 0) must therefore be the global optimum.

In the remainder of this article, we will use the short term privacy problem to describe a combination of privacy criteria for which an optimal solution is to be found under a utility measure. Moreover, we will call a privacy problem monotonic if it only consists of monotonic criteria and a monotonic utility measure. Analogously, we will call a privacy problem that only consists of non-monotonic criteria and a non-monotonic utility measure a non-monotonic privacy problem.

All privacy criteria introduced previously (k-anonymity, 
                           
                              ℓ
                           
                        -diversity, t-closeness and 
                           
                              δ
                           
                        -presence) are monotonic when data is transformed with generalization only [3,18,19,17]. A central building block of the according proofs is the fact that generalizing a dataset will lead to the merging of equivalence classes. The property that generalizations of anonymous datasets are also anonymous therefore follows directly from the fact that merging two anonymous equivalence classes also results in an anonymous equivalence class. It is easy to see that this holds for k-anonymity and distinct-
                           
                              ℓ
                           
                        -diversity. Merging two classes with at least k entries will of course also result in a class with at least k entries. Distinct-
                           
                              ℓ
                           
                        -diversity requires each class to have at least 
                           
                              ℓ
                           
                         distinct values of the sensitive attribute. Again it is easy to see that merging two classes with at least 
                           
                              ℓ
                           
                         sensitive values will also result in a class with at least 
                           
                              ℓ
                           
                         sensitive values. Hence, both privacy models are monotonic when data is transformed with generalization only. For proofs regarding the other privacy criteria, the reader is referred to the respective publications.

Many privacy problems that are monotonic when data is only transformed with generalization become non-monotonic if the coding model combines generalization with (subsequent) tuple suppression with a suppression limit. Regarding privacy criteria, the general problem is that generalization may lead to the merging of a previously suppressed non-anonymous equivalence class with an anonymous equivalence class. The result of this merging may be a non-anonymous class that cannot be suppressed because of the suppression limit, rendering the overall dataset non-anonymous.

To give an overview of our methodology, we will in this section sketch a proof for the non-monotonicity of an abstract privacy criterion. Fig. 4
                         shows two generalizations of a dataset in which the attribute age is a quasi-identifier and diagnosis is a sensitive attribute. The suppression limit is assumed to be 10 records. In the table on the left, the first two equivalence classes (entries 0–2 and 3–4) fulfill the privacy model, whereas the third class (entries 5–14) does not. The latter class can be suppressed, however, as it consists of exactly 10 data entries. In the generalized dataset, which is shown on the right, age is transformed into the interval [20–79], which creates one equivalence class containing all entries. This class is not anonymous and, as it contains more than 10 entries, it cannot be suppressed. The table on the right therefore represents a non-anonymous generalization of an anonymous dataset.

It is easy to see that the simple privacy models which we have analyzed in the previous section are monotonic even with tuple suppression. Merging a class with at least k entries with a class that contains less than k entries, of course, also results in a class that contains at least k entries. As a consequence, k-anonymity is monotonic within the coding model investigated in this article [3]. The same is true for distinct-
                           
                              ℓ
                           
                        -diversity, as merging a class with at least 
                           
                              ℓ
                           
                         sensitive values with a class that contains less than 
                           
                              ℓ
                           
                         sensitive values also results in a class that contains at least 
                           
                              ℓ
                           
                         sensitive values [19].

More complex privacy models are not monotonic within the coding model discussed here. This includes entropy-
                           
                              ℓ
                           
                        -diversity, recursive-(c, 
                           
                              ℓ
                           
                        )-diversity, t-closeness (with equal, hierarchical and numerical ground distance) and 
                           
                              δ
                           
                        -presence. Detailed proofs can be found in Appendix A.

Analogously to privacy models, well-known utility measures are also not monotonic when the coding model consists of generalization followed by tuple suppression. The reason is that an increase of generalization may reduce the required amount of suppression, effectively increasing overall data utility.

To provide an overview of our methodology, we will in this section present a proof for the non-monotonicity of the AECS utility measure. Fig. 5
                         shows three different representations of a dataset with one quasi-identifier (age). As a privacy model we use 2-anonymity. As a coding model we use generalization with a hierarchy consisting of two levels: level 0 contains the original attribute values and level 1 defines of intervals of size ten. Moreover, we use tuple suppression with a limit of four records. Both transformations from Fig. 5 fulfill the privacy model.

The AECS measure is defined as the number of tuples in the dataset divided by the number of equivalence classes [21]. It is easy to see that for the first generalization the information loss in terms of AECS is 
                           
                              
                                 
                                    6
                                 
                                 
                                    2
                                 
                              
                              =
                              3
                           
                         and for the second generalization the information loss is 
                           
                              
                                 
                                    6
                                 
                                 
                                    3
                                 
                              
                              =
                              2
                           
                        . This means that information loss decreases when the dataset is generalized and thus the utility measure is not monotonic within the given coding model. The same is true for all other utility measures described previously, i.e. Discernibility, Precision and Non-Uniform Entropy. Detailed proofs can be found in Appendix B.

In the literature, three algorithms have been described for efficient globally-optimal data anonymization with full-domain generalization: Flash [24], OLA [26] and Incognito [15]. All three approaches heavily exploit monotonicity and they were evaluated for monotonic privacy problems only. In previous work, we have shown that our own algorithm, Flash, outperforms the other approaches when integrating them into ARX [24,27]. The main reason for this is that Flash has been designed to make effective use of our runtime environment by implementing a greedy depth-first strategy. Additionally, Flash employs pruning in both directions via binary movements [24]. OLA implements a divide-and-conquer strategy, also combined with a binary component [26]. In contrast, Incognito’s approach is oriented towards dynamic programming without a binary component [15].

We have also experimentally compared the three domain-specific algorithms with a generic depth-first search (DFS) [27]. Our experiments showed that, within our runtime environment, this very simple strategy offers competitive performance. Again, this is due to its vertical search direction, which enables an efficient execution of the algorithm by ARX. In contrast to the other approaches, DFS can be used to perform an exhaustive search through a complete solution space. The basic properties of these four algorithms are summarized in Table 2
                        .

While Flash, OLA and Incognito have not been designed to handle non-monotonic privacy problems, they can be used for this purpose as well. The reason for this is that they will always return a transformation, which has explicitly been checked for privacy [24]. As a consequence, the returned solution is guaranteed to fulfill the privacy model. They will, however, use information about explicitly checked transformations to predictively classify other transformations. This may lead to incorrect and inconsistent classifications. As a result, some transformations in the solution space may be classified as being privacy-preserving while they are actually not. Moreover, the final solution may not be the global optimum. DFS, on the other hand, will correctly classify any solution space and return the global optimum, as it will explicitly check all transformations. It is obvious, however, that this comes at the cost of a significant performance penalty.

To overcome the limitations of existing methods, which means to guarantee optimality of results while providing scalability, we combined two approaches into a generic algorithm. Our approach, which we call Two-Phase Flash or 
                           
                              
                                 
                                    Flash
                                 
                                 
                                    2
                                    P
                                 
                              
                           
                        , consists of two phases, one for monotonic privacy problems and one for non-monotonic privacy problems. Depending on the exact configuration it either executes one of the two phases, or combines both of them. Fig. 6
                         summarizes the strategy implemented by 
                           
                              
                                 
                                    Flash
                                 
                                 
                                    2
                                    P
                                 
                              
                           
                        . If the coding model only consists of generalization, ARX needs to solve a monotonic privacy problem. This is the case when the suppression limit is set to 0%. For such privacy problems ARX uses the Flash algorithm, which is able to prune successors of anonymous transformations (because of the monotonicity of utility measures) and predecessors of non-anonymous transformations (because of the monotonicity of privacy models).

A non-monotonic privacy problem is given if the privacy model only consists of a set of instances of t-closeness or 
                           
                              δ
                           
                        -presence combined with a coding model that is parameterized with a suppression limit of more than 0%. We have shown in the previous sections that neither the privacy model nor the utility measure is monotonic in such configurations. Therefore the complete solution space must be searched. In this case ARX uses the DFS algorithm, as it is the most efficient exhaustive search strategy according to our experiments [27].

Finally, we combine both approaches into a strategy for partially-monotonic privacy problems. We define these as privacy problems with a non-monotonic utility measure (this applies to all utility measures considered in this article under the given coding model, cf. Section 2.5) in which the set of privacy criteria either explicitly contains a monotonic privacy criterion or implicitly defines a monotonic privacy criterion. Regarding the methods covered in this article, this means that the privacy problem either contains an instance of k-anonymity or an instance of 
                           
                              ℓ
                           
                        -diversity combined with a coding model that is parameterized with a suppression limit of more than 0%. In this case, the privacy model implies a minimal equivalence class size of m, with either 
                           
                              m
                              =
                              k
                              ,
                              m
                              =
                              ℓ
                           
                         or 
                           
                              m
                              =
                              max
                              (
                              k
                              ,
                              ℓ
                              )
                           
                         
                        [20]. The property of a transformation not resulting in a minimal class size m is equal to the property of not fulfilling m-anonymity, which is monotonic even with tuple suppression (see Section 2.4). As a consequence, specializations of transformations that do not fulfill m-anonymity can be pruned from the search process. To exploit this property, we utilize two-phases in which we first use the Flash algorithm to find all transformations that fulfill m-anonymity and then the DFS algorithm to check the remaining transformations for validity regarding potentially existing additional privacy criteria and to compute their utility.

@&#EXPERIMENTAL DESIGN@&#

In this section, we will describe how we have performed an experimental evaluation of our approach and existing methods with several real-world datasets and a variety of different privacy models. For our experiments we used the AnonBench benchmarking environment for globally-optimal data anonymization algorithms [27]. All datasets, generalization hierarchies and implementations are available online [12].

Required parameters and outcomes of de-identification processes depend on the input data, the research that is to be performed with the resulting de-identified data, the recipients as well as legal and regulatory environments. To cover a broad spectrum of data, we used five real-world datasets, most of which have already been utilized for evaluating previous work on data anonymization. The datasets included an excerpt of the 1994 US census database (ADULT), data from the 1998 KDD Cup (CUP), NHTSA crash statistics (FARS), data from the American Time Use Survey (ATUS) and data from the Integrated Health Interview Series (IHIS). The ADULT dataset serves as a de facto standard for the evaluation of anonymization algorithms.

An overview of basic properties of the datasets is shown in Table 3
                           . The datasets contained between 30k and 1.2M records, resulting in file sizes of between 2.52MB and 107.56MB. When selecting quasi-identifiers, we considered lists of attributes that have been associated with high risks of re-identification [5]. Moreover, we defined one sensitive attribute per dataset. As a sensitive attribute, we always selected the attribute with the highest number of distinct values from the attributes which are not typical quasi-identifiers. An exact specification of the quasi-identifiers and the sensitive attributes is shown in Table 4
                           . The generalization hierarchies consisted of between 2 and 6 generalization levels. The number of transformations in the search space, which is defined by the product of the heights of the generalization hierarchies, ranged from 4,320 for the ADULT dataset to 12,960 for the IHIS dataset.

Previous evaluations of anonymization algorithms focused on a limited number of privacy models with varying parameters (i.e. 
                              
                                 k
                                 ,
                                 c
                                 ,
                                 ℓ
                                 ,
                                 t
                              
                            and 
                              
                                 δ
                              
                           ) as well as varying numbers of quasi-identifiers. These parameters influence the number of anonymous transformations in the search space which in turn influences execution times. In contrast, we changed the characteristics of the solution space by combining privacy criteria and by using different datasets. This allowed us to cover a large number of potentially relevant privacy requirements, including a broad spectrum of monotonic and non-monotonic privacy problems.

We performed experiments for all reasonable combinations of k-anonymity 
                              
                                 (
                                 k
                                 )
                              
                           , 
                              
                                 ℓ
                              
                           -diversity 
                              
                                 (
                                 ℓ
                                 )
                              
                           , t-closeness 
                              
                                 (
                                 t
                                 )
                              
                            and 
                              
                                 δ
                              
                           -presence 
                              
                                 (
                                 δ
                                 )
                              
                           . We combined k-anonymity with 
                              
                                 ℓ
                              
                           -diversity 
                              
                                 (
                                 k
                                 ,
                                 ℓ
                                 )
                              
                           , with t-closeness 
                              
                                 (
                                 k
                                 ,
                                 t
                                 )
                              
                            and with 
                              
                                 δ
                              
                           -presence 
                              
                                 (
                                 k
                                 ,
                                 δ
                                 )
                              
                           . Moreover, we combined 
                              
                                 δ
                              
                           -presence with 
                              
                                 ℓ
                              
                           -diversity 
                              
                                 (
                                 δ
                                 ,
                                 ℓ
                                 )
                              
                            and with t-closeness 
                              
                                 (
                                 δ
                                 ,
                                 t
                                 )
                              
                           . Finally, we combined k-anonymity and 
                              
                                 δ
                              
                           -presence with 
                              
                                 ℓ
                              
                           -diversity 
                              
                                 (
                                 k
                                 ,
                                 δ
                                 ,
                                 ℓ
                                 )
                              
                            and with t-closeness 
                              
                                 (
                                 k
                                 ,
                                 δ
                                 ,
                                 t
                                 )
                              
                           . The resulting 11 privacy models protect datasets against all possible combinations of identity, attribute and membership disclosure.

As a parameter for k-anonymity we chose 
                              
                                 k
                                 =
                                 5
                              
                            which is a typical value in the biomedical domain [28]. From the different variants that exist of 
                              
                                 ℓ
                              
                           -diversity and t-closeness, we used the ones that provide the best balance between utility and privacy, i.e. recursive-
                              
                                 (
                                 c
                                 ,
                                 ℓ
                                 )
                              
                           -diversity and t-closeness with hierarchical ground distance. As parameters, we chose 
                              
                                 c
                                 =
                                 4
                                 ,
                                 ℓ
                                 =
                                 3
                              
                            and 
                              
                                 t
                                 =
                                 0.2
                              
                           , which have been proposed in the literature [18,19]. For 
                              
                                 δ
                              
                           -presence we chose 
                              
                                 
                                    
                                       δ
                                    
                                    
                                       min
                                    
                                 
                                 =
                                 0.05
                              
                            and 
                              
                                 
                                    
                                       δ
                                    
                                    
                                       max
                                    
                                 
                                 =
                                 0.15
                              
                            with a randomly selected research subset containing 10% of the entries from the respective dataset.

@&#EXPERIMENTS@&#

In the first set of experiments, we investigated the impact of combining generalization with tuple suppression on the utility of anonymized datasets. To this end, we compared the information loss resulting from anonymizing data with (1) generalization only and with (2) generalization and suppression. In the second set of experiments, we analyzed the utility of results of existing algorithms when using the given coding model. For this purpose, we compared the data utility of the results of Flash, OLA and Incognito with the data utility of the optimal solution. The latter was determined with Flash
                           2P
                           . In the third and fourth set of experiments, we evaluated the scalability of our approach. To this end, we analyzed its pruning power as well as execution times.

@&#RESULTS@&#

As described above, we compared the information loss resulting from anonymizing data with generalization and suppression with the information loss resulting from anonymizing data with generalization only. We tested all utility measures investigated in this article: Non-Uniform Entropy, Precision, Discernibility and Average Equivalence Class Size (AECS). The results are shown in Table 5
                        .

As can be seen, the numbers clearly show that even a moderate suppression limit of 5% leads to a significant increase in data utility. In our experiments, we observed this effect for all datasets and utility measures. Information loss decreased by up to 99% (CUP dataset, utility measured with AECS). The effectiveness depended on the utility measure. On average, the highest increase was measured with AECS and the lowest increase was measured with Non-Uniform Entropy. However, even utility measured with Non-Monotonic Entropy increased by up to 62% (ATUS dataset, k-anonymity). Regarding the effect on different datasets, on average, the lowest increase in data utility was achieved for the IHIS dataset. The reason is that this dataset contains a large number of entries and many privacy models can therefore be fulfilled with very little generalization. However, even for this dataset utility was increased by up to 39% when measured with Non-Uniform Entropy (k-anonymity), 61% when measured with Precision (k-anonymity), 35% when measured with Discernibility (k-anonymity+
                        
                           
                              δ
                           
                        -presence) and 89% when measured with AECS (
                           
                              ℓ
                           
                        -diversity and 
                           
                              δ
                           
                        -presence). In summary, the results highlight the value of tuple suppression for anonymizing data with high quality output.

Next, we studied how important it is – in terms of data utility – to consider monotonicity when designing anonymizing algorithms for the coding model investigated in this article. To this end, we anonymized the datasets with Flash, OLA and Incognito using different suppression limits, privacy models and utility measures. We report the utility of their solutions relative to the utility of the optimal solution, which we have determined with our novel approach.

The results obtained for the Flash algorithm with a 100% suppression limit are shown in Table 6
                        . We note that such a suppression limit does not mean that 100% of the data records have been suppressed. It simply means that ARX was free to automatically balance both types of data recoding to achieve optimal utility. Moreover, we note that Flash was the best performing algorithm in terms of data utility in our experiments. It can be seen that the output quality of Flash was worse than the optimum by up to several orders of magnitude for class-based measures (e.g. Discernibility, IHIS, k-anonymity). For attribute-based measures output utility was worse than the optimum by up to 42% for Non-Uniform Entropy (IHIS, 
                           
                              ℓ
                           
                        -diversity) and by up to 53% for Precision (e.g. IHIS, t-closeness combined with 
                           
                              δ
                           
                        -presence). Comparing the results for different datasets, IHIS was the dataset with the largest differences in data utility. Moreover, existing algorithms failed to produce datasets with optimal utility in almost all cases, with ATUS, Precision, k-anonymity and ATUS, Precision, 
                           
                              δ
                           
                        -presence being the only exceptions.

Existing algorithms have been designed to anonymize data with generalization only. The results reported in Table 6 are on the opposite end of the spectrum, as the suppression limit of 100% enables ARX to automatically balance the application of generalization and suppression. Consequently, we also studied, how the output quality of existing algorithms is affected by suppression limits that are lower than 100%. The results are shown in Fig. 7
                        . As we performed a large number of experiments with different suppression limits, we summarized the results for clarity. Each data point represents the information loss achieved for a specific utility measure on average (in terms of the geometric mean) for all datasets and privacy models. This means that each point summarizes one table similar to the ones shown in Table 6.

It can be seen that, obviously, existing algorithms did find the optimal solution for a 0% suppression limit. On average, Flash performed better than OLA and OLA performed better than Incognito. With all algorithms, output quality decreased with increasing suppression limits. In general, also the strength of the effect increased with increasing suppression limit. The effect was stronger for class-based measures. We note that even with a moderate suppression limit of 5% all three algorithms failed to deliver optimal data utility in at least two experiments with each utility measure.

As we have explained in the previous section, Flash
                        2P
                         will always return a data transformation with optimal utility. To avoid exhaustive searches through the complete solution space and thus provide scalability, it thereby combines different pruning strategies. In the experiments presented in this section, we anonymized each dataset with each of the 11 privacy models and suppression limits of 0% and 5% to analyze the pruning power of our approach. In our context, pruning power means the ability to exclude transformations from the search space. As a utility measure we used Non-Uniform Entropy. We report the relative number of pruned transformations for all monotonic and partially monotonic privacy problems.


                        Table 7
                         shows the pruning power achieved for the monotonic setup with a 0% suppression limit. In these experiments, the potential for pruning transformations from the search process was maximal. Therefore, the numbers can be seen as a gauge for exploiting monotonicity. Flash’s binary pruning strategy is very effective and it excluded at least 96% of the search space in all cases. We note that this is the usage scenario for which existing algorithms, such as Incognito, OLA and Flash, have been designed.

Results for partially monotonic setups (with a 5% suppression limit), in which Flash was combined with DFS, are shown in Table 8
                        . Compared to the previous experiments, pruning power was reduced significantly. Still, however, up to more than 84% of the search space were pruned for some configurations. Variability was rather high, reflecting the differences in difficulty for achieving different privacy criteria. The effectiveness of pruning transformations which lack a required minimal class size increased with the amount of generalization that was required for solving a privacy problem. For example, independent of the dataset, pruning power increased for privacy problems that included 
                           
                              δ
                           
                        -presence, as this criterion was the most difficult to achieve.

In this section, we present experiments that we performed to analyze the effect of pruning on execution times. To this end, we compared the execution times of 
                           
                              
                                 
                                    Flash
                                 
                                 
                                    2
                                    P
                                 
                              
                           
                         with the execution times of an exhaustive depth-first search (DFS). For measuring information loss we used Non-Uniform Entropy, which is the most computationally complex utility measure supported by our software. We anonymized each dataset with each of the 11 privacy models and suppression limits of 0% and 5%, which resulted in a total of 110 experiments. The software is implemented in Java and the experiments were performed on a desktop machine with a quad-core 3.1GHz Intel Core i5 CPU running a 64-bit Linux 3.2.0 kernel and a 64-bit Sun JVM (1.7.0).


                        Table 9
                         shows the execution times of our approach measured when anonymizing the five datasets with monotonic configurations. Here, 
                           
                              
                                 
                                    Flash
                                 
                                 
                                    2
                                    P
                                 
                              
                           
                         outperformed DFS by up to three orders of magnitude. This reflects its pruning power of at least 96%, which resulted in execution times between 0.1% and 6% of the execution times of DFS. On average, the largest increase in performance was achieved for the CUP dataset, the smallest increase was achieved for the IHIS dataset. Total execution times basically depended on the number of records in the datasets and they varied between 0.02 and 0.04s for the ADULT dataset and between 0.57 and 3.61s for the IHIS dataset. We measured no significant differences in performance for different privacy models.


                        Table 10
                         shows the execution times of our approach when anonymizing the five datasets with partially monotonic configurations. In this setup, 
                           
                              
                                 
                                    Flash
                                 
                                 
                                    2
                                    P
                                 
                              
                           
                         performed two phases. It achieved speedups of up to a factor of 45 compared to DFS (CUP, k-anonymity and 
                           
                              δ
                           
                        -presence). In some experiments we measured only small performance improvements (e.g. 5% for ATUS, 
                           
                              ℓ
                           
                        -diversity). It can be seen, that the decrease of execution times of 
                           
                              
                                 
                                    Flash
                                 
                                 
                                    2
                                    P
                                 
                              
                           
                         in comparison with DFS roughly corresponds with the percentage of transformations excluded from the search process. However, in most experiments, the speedup was actually greater than the pruning power suggested. The reason for this effect lies in the design of the ARX runtime environment, which stores snapshots of transformed data throughout the anonymization process [24]. When parts of the solution space are excluded, pressure on memory is reduced, allowing the system to store and use more relevant snapshots during the search process.


                        Table 11
                         shows the execution times of our approach when anonymizing the five datasets with non-monotonic configurations. For these privacy problems, the execution times of 
                           
                              
                                 
                                    Flash
                                 
                                 
                                    2
                                    P
                                 
                              
                           
                         were equal to the execution times of DFS, as there was no potential for pruning. Compared to the previous experiments, execution times increased significantly. Basically, the times correlate with the sizes of the datasets and the sizes of the corresponding search spaces. The only exception is the CUP dataset. In this case, the anonymization process was more difficult to optimize by our runtime environment, as the dataset contains a much higher number of distinct attribute values than the other datasets. This reduces the number of compressed snapshots that can be created during the search process. Total execution times were measured between 0.94 and 2.47s for the ADULT dataset and between 61.72 and 146.42s for the IHIS dataset. When t-closeness was included in the privacy problem, execution times increased by roughly a factor of two. This reflects the additional work that was spent on maintaining frequency distributions of sensitive attribute values.

@&#DISCUSSION@&#

In this work, we have shown that it is challenging to implement algorithmic solutions for de-identifying structured data with syntactic privacy models and complex coding models. This imposes a high barrier to data controllers and researchers who want to test their practical usefulness and ultimately implement them into day-to-day data processing. One of our major motivations for developing the ARX system has been to improve access to methods of data anonymization.

The coding model investigated in this article has been recommended for the biomedical domain. First, it is intuitive and thus easy to understand, second, it produces datasets that are well suited for analyses by epidemiologists, and, thirdly, the transformation process can easily be configured by non-experts [26]. Also, combining generalization with tuple suppression significantly increases data utility (see Section 3.1).

While we have focused on this specific coding model, our findings are applicable to other methods of data transformation as well. For example, the privacy models and utility measures covered in this article are also non-monotonic within a coding model consisting of full-domain generalization and cell suppression. This is easy to see, as cell suppression, in which individual values are suppressed instead of complete data entries, and tuple suppression are identical for datasets consisting of only one quasi-identifier. Moreover, our results also apply to coding models that combine suppression with subtree generalization [20].

We have experimentally confirmed that existing globally-optimal methods fail to deliver optimal utility in our setup. Our findings also apply to heuristic anonymization algorithms for Big Data that use the concept of minimal anonymization 
                     [20]. This means that they assume that an anonymous generalized data representation that cannot be specialized without violating the privacy model has good data utility. Our results show that, in complex coding models, minimality has no implications in terms of data utility, as the latter is not directly correlated with the degree of generalization. The finding applies to past approaches, such as DataFly [29], as well as more recent developments, such as the work by Babu et al. [30].

There is an ongoing discussion about the practical relevance of syntactic privacy models against attribute and membership disclosure [31]. Critics argue that they are rarely used in practice, as they result in unacceptable data quality. We plan to further investigate this. To date, it has been argued that such techniques are potentially important [32] and we could not find publications demonstrating that such methods fail to provide adequate output. We emphasize that our results are also relevant for implementing safeguards against identity disclosure (i.e. re-identification), the importance of which is widely recognized [8,32,31]. This includes models such as k-anonymity as well as approaches for risk-based anonymization (see, e.g. [33]). Within the coding model investigated in this article, the former represents a partially monotonic privacy problem, while the latter is a non-monotonic privacy problem. As a simple example, consider the average re-identification risk, which may be estimated with the average equivalence class size [34]. The same measure can be used for estimating data utility and it is not monotonic within the given coding model (see Section 2.5).

@&#LIMITATIONS@&#

The techniques investigated in this work are an important building block for protecting sensitive biomedical data. However, they can only provide very specific guarantees which require rather strong assumptions about the goals and the background knowledge of an attacker. Semantic privacy models such as Differential Privacy [7] require less such assumptions but usually involve stronger trade-offs in terms of data utility or supported workflows [35,4]. Which approach provides a better balance between utility and privacy is subject to ongoing discussions (see, e.g. [36,37]).

The protection of personal health data against privacy threats is a challenging task and data controllers should follow the onion layer principle by employing multiple layers of safeguards. A very widespread approach to minimize risks in data sharing are data use agreements. Their use is essential for HIPAA’s limited data set [8]. They are contracts that define rights and duties and that hold data recipients responsible to comply with relevant terms, conditions and regulations. Specifically, recipients will have to take adequate measures to protect data confidentiality and to make sure that they are fully considering the original informed consent, ethics committee approval and data access committee decisions. In this context, Malin et al. [38] have proposed specific technical and policy approaches for data sharing in clinical and translational research. Apart from data use agreements and data access committees, important recommendations are to include the description of risks of data aggregation and sharing already in the informed consent and to use multiple levels of access. Depending on which additional safeguards are implemented, different options for data de-identification may be used [39].

@&#CONCLUSIONS@&#

Our work is the first systematic study describing how to implement generalization and suppression when biomedical data is to be anonymized with common syntactic privacy models and utility measures. Implementing this transformation model leads to a strong increase in utility compared to anonymizing data with generalization only. The resulting recommendation is to use this model preferably. Moreover, common privacy models and utility measures are non-monotonic when data are transformed with generalization followed by tuple suppression. As a consequence, existing anonymization algorithms fail to produce output with optimal quality. Our novel approach overcomes this limitation while providing scalability.

By considering the findings described in this article, we were able to significantly improve the data anonymization tool ARX. With the implementation of the described methods, the software is able to anonymize data with generalization and suppression while guaranteeing the optimality of results in terms of data utility. Moreover, ARX remains scalable and supports the anonymization of very large datasets with complex privacy models on commodity hardware. Our tool is available as open source software [12].

While the coding model, privacy models and utility measures covered in this article are well known, our work is the first to investigate an integrated implementation. Our results apply to methods which are being used for protecting datasets from re-identification, which is a requirement in many laws and regulations worldwide. Moreover, the coding model investigated in this work has been recommended for use in the biomedical domain. Our results should therefore be considered when anonymizing structured biomedical data.

None declared.

Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.jbi.2015.09.007.


                     
                        
                           Supplementary appendises
                           
                        
                     
                  

@&#REFERENCES@&#

