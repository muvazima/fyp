@&#MAIN-TITLE@&#Development of a gap searching program for automotive body assemblies based on a decomposition model representation

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We suggest a method of locating gaps between the parts of an assembly automatically.


                        
                        
                           
                           We propose an algorithm to define the boundary between the exterior and the gaps.


                        
                        
                           
                           The developed program can visualize gaps of less than 1mm in a specified region.


                        
                        
                           
                           It can help to avoid design changes and repair processes while developing products.


                        
                        
                           
                           Application of the method can also be extended to aircraft and ship designs.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Mismatch

Octree

Voxel

Collaborative work

Virtual assembly

Automotive

@&#ABSTRACT@&#


               
               
                  Automobiles, aircraft, and ships require tremendously many parts to be assembled. For developing such large assemblies, most companies accelerate the design process by having many design engineers in different functional or sectional design groups working concurrently. However, interferences and gaps can be found when the parts and sub-assemblies of different design groups are to be assembled. These error cause design changes and additional repair processes, resulting in an unexpected increase in costs and time delays. While the interference problem has been resolved by digital mockup and concurrent engineering methodology, many cases of the gap problem in the automotive industry have been covered by temporary treatments when the gaps are small enough to be filled with sealants. This kind of fast fix can cause leakage into the engine chamber and passenger cabin when the gap size is too big for filling or when the sealant gets old, which can turn fatal. With this research, we have developed a program to automatically find gaps between the parts of an assembly so that design engineers can correct their designs before the manufacturing stage begins. By using the method of decomposition model representation, the program can visualize gaps between complex car body parts as well as estimate their volumetric information. It can also automatically define the boundary between a gap and the exterior space. Although we have reviewed the benefits of the program by applying it to car development, it can also be applied to aircraft and ship designs comprising several parts.
               
            

@&#INTRODUCTION@&#

Manufacturing and assembling complex machinery such as automobiles, aircraft, or ships require long development periods and huge number of parts to be assembled. For such large assemblies, most design and manufacturing companies shorten the development period by employing many design engineers working concurrently. Concurrent design [1] by functional or sectional design groups may reduce the development time, but it may still cause problems of interference, collision, and gaps between parts to be assembled, which are designed by different designers and different design groups. Most designers tend to concentrate on the parts for which they are responsible, instead of checking the assemblability of their own work with the parts designed by other engineers; this methodology often causes errors. These design errors delay development time and increase manufacturing costs caused by modifications to the original design.

Regarding problems of interference or collision between parts, engineers can verify their design with real mock-up or digital mock-up (DMU) systems that can assemble parts virtually before the manufacturing stage [2,3]. On the other hand, gaps between the parts may cause other severe problems in automobiles. Most parts of automobiles are made of thin plates to reduce the vehicle weight, and there are many empty spaces between thin parts. If there are gaps between the parts of a car facing the exterior, rainwater and water from puddles on roadways can enter the engine chamber and the cabin directly, or flow into unwanted spaces through gaps between the body parts. This situation may induce corrosion of interior parts, or fatal problems of electric shock and malfunction of the electrical system. While some of these gaps between parts are intended to increase the stiffness of the car body structure, most unwanted gaps are caused by design errors when different parts of the assembly are designed by many different engineers. In order to resolve this problem, designers check cross-sectional drawings of the assembly. However, this process is impractical as it takes too much time for design engineers to check the shape of a gap in a complicated three-dimensional assembly with two-dimensional sectional drawings.

Various studies have been done on resolving the problems of interference and collision between the parts of an assembly. Song and Chung [4] suggested a DMU system using XML for real-time interference checking and design verification of several parts in a virtual environment based on a product data management (PDM) system. Song et al. [5] suggested a web-based interference verification system for mold design processes. Shi et al. [6] suggested a collisions evaluation method in virtual environment for collaborative assembly. Chen [7] also developed a new system for virtual assembly of parts and real time collision detection between parts. However, all of the above literature focuses on interference and collision between parts and not on gaps between the parts of a complicated assembly.

In this paper, we propose a method of automatically searching for gaps between parts of complex shape with free surfaces based on the mixed octree–voxel decomposition method. With this method, designers can check for gaps between parts during the design stage in order to prevent errors due to gaps before the manufacturing and assembly stages. The application of the proposed method is not limited to the automobile industry but can be extended to the aerospace and ship building industries as well.

This research suggests a method to locate and visualize gaps within assemblies with parts of thin plates. Most assemblies, such as automobiles, aircraft, and ships are made of thin plates with free surfaces; therefore, the target shape of the parts, with which this research is concerned, is the free-form shape. Since the gaps between these parts include free-form boundary surfaces, we represent the given assembly using decomposition models; this method is efficient in calculation time and is not limited by the complexity of the given parts. Thereafter, we use Boolean operations to subtract the decomposition models from a fixed space, and thereby identify any gaps in the design. The most widely known methods used to express decomposition models are voxels with uniform elements [8,9] and octrees with elements of various sizes [10–13]. In this paper, we use a mixed octree–voxel method [14].

The overall process of the proposed algorithm is shown in Fig. 1
                     , which starts by inputting three-dimensional models in the stereolithographic (STL) data format. The STL data format is widely adopted as the standard format for computer-aided design (CAD) model data. Therefore, the program can use models from various CAD systems. Another advantage of the STL format is its small data size for representing complex parts. Since the objective of this research is to develop a program that can be applied to large assemblies having several parts, large data sizes for each model could cause severe execution problems.

Next, after representing each part as octrees of given resolutions at the “octree generation of each part” step, the algorithm uses the classification information of the octants to divide all “full” and “empty” octants into voxels of the same size as the minimum octant; this is done at the “voxel generation for each decomposition model” step. Furthermore, after mapping the decomposition model of each part to its corresponding position in the assembly, the program generates a decomposition assembly model using Boolean operations on the decomposition models of all of the parts. Finally, it searches for voxels in gaps to be visualized at the “gap searching” and “gap visualization” steps. A more detailed explanation is given in the following sections.

Gaps are defined in this research as “interior empty spaces between parts.” When the geometry of the parts is complicated, the geometry of the gap is complicated as well. For the automatic gap searching and visualization processes, which are not limited by the complexity of the object, we express the containing volume of the given assembly as a decomposition model. When the decomposition model of the assembly is generated, the empty elements of the decomposition model can be classified as either “exterior” or “gap” elements. In order to generate a decomposition model of the assembly, the proposed method first generates a decomposition model of each part of the assembly.

The most widely known methods for expressing decomposition models are voxel and octree representations. Voxels represent a three dimensional object with uniform sized cells, whereas octrees represent elements of various sizes. The voxel representation method has advantages, such as the fact that it is simple to represent a given object and easy to find neighbors of a given element. However, small voxels, corresponding to higher resolutions, require more memory for model representation and higher calculation times to classify each voxel as interior or exterior to the given object.

On the other hand, octree representations starts by generating an initial cube, called a “root,” which is the minimal containing box of a given object. Thereafter, it divides the root into eight children, called “octants,” of which each octant is classified as “full,” “empty,” or “partial” according to the spatial relation of the octant with respect to the given object, as shown in Fig. 2
                        .

If an octant is completely inside the object, it is classified as a “full” octant, while if it is completely outside the object, it is classified as “empty”. When an octant is neither “full” nor “empty,” it is classified as “partial,” which means that it contains the boundary of a given object and it is to be divided into eight further octants. This process continues recursively until the input level of the tree structure is reached. The octree representation method recursively divides only “partial” elements that contain the boundary of the given object into elements of desired resolution, which results in smaller number of elements and faster calculation times compared with the voxel method.

Though the target of this research is the entire assembly, the input STL files are only for single parts. Therefore, we have to first represent each part as a decomposition model and then combine each decomposition model using a Boolean operation for the entire assembly. For the Boolean operation, instead of representing each part as an octree from the minimal containing cube of the part, we represent it as an octree with the cube of the whole assembly as its root. Generating the octree for each part from the minimal containing cube of the entire assembly simplifies the union Boolean operation of all parts without requiring any additional calculations or operations. A more detailed explanation is provided in the following paragraph using the case of a two-dimensional quadtree, as shown in Fig. 3
                        . Even though only the quadtree within the dotted region of Fig. 3(b) is sufficient for part A in Fig. 3(a), we represent part A as a quadtree with its root element being the minimal containing box of the whole assembly, as shown in Fig. 3(b). Another part, B, is also represented as a quadtree with the same root, as shown in Fig. 3(c), to be assembled by the Boolean operation, as shown in Fig. 3(d). In the same way, all other parts are represented as quadtrees to be unified for the decomposition model of the assembly.

Meanwhile, octree generation needs much computation time for the classification of each octant. To reduce the calculation time, the proposed method classifies only the “partial” elements at the octree generation step, leaving the “full” and “empty” octants unclassified. The “full” and “empty” octants are classified at the “gap searching” step, which will be explained in detail in the next section.

For the decomposition model of a given part, octree and voxel methods have both merits and demerits. While octree representation is an efficient and a structural method for expressing objects and empty spaces in a decomposition model, voxel representation has certain advantages, such as requiring a simpler algorithm for representing a given object, as well as more smoothly representing boundaries of a given object. Another function that both methods can address is finding the neighbors of a given element. Neighbor finding is a necessary and frequent process while searching for all gap elements. Voxel methods can find neighboring elements with ease, whereas the neighbor-finding algorithm in the octree method needs more computation time [12,13]. On the other hand, voxel representations need more computation time for classifying all elements, since the number of voxel elements is much bigger than that of the octree elements. In this paper, we use the mixed octree–voxel method [14] to benefit from the advantages of both. This mixed method first represents each part as an octree, of which the root octant is the cube containing the whole assembly, and then divides the minimal cube containing all “partial” octant into voxels of the same size as the smallest octant of the octree. This approach can drastically reduce the computation time by classifying the voxels generated from “full” or “empty” octants as “full” or “empty”, because the voxels inherit their classification from their ancestors.

We will explain the proposed algorithm with the two-dimensional representation shown in Fig. 4
                        . It starts by representing each part as a quadtree, of which the root is a rectangle containing the whole assembly. Furthermore, after calculating the minimal rectangle containing all “partial” elements of the quadtree, the algorithm divides this rectangle into elements of the size of predefined resolution of the quadtree. Each of the final elements store the identification number of the part and inherit its classification information from its ancestor, for which no additional calculation is necessary. The shaded elements in Fig. 4 represent elements that are “partial,” and the number “1” refers to the identification number of the part.

The mixed octree–voxel method has three advantages for this research: first, the mixed method needs much less computation time for the classification of each voxel compared with the pure-voxel method, while maintaining the strong points of the original method. No calculation is necessary to classify voxels generated from “full” and “empty” octants as they automatically inherit the classification information from their ancestors. To compare the times required to generate decomposition models at the same resolution using the octree, voxel, and mixed methods, we show the calculation time by each method in Table 1
                         for the four sample parts of the car body shown in Fig. 5
                        . We used a PC with a 2.94GHz CPU and 3.0GB of RAM for the calculation. Table 1 shows that the mixed method is over 66 times faster than the original voxel method, while it is a little slower than original octree method.

The second advantage of the mixed method is that it represents the boundary of the gap more smoothly than the original octree method. The octree method may not yield smooth boundaries for gaps because the boundary surface can comprise variously sized octants. Therefore, compared with the octree method, the voxel and mixed methods can more smoothly represent the gap boundary.

Finally, the mixed method was selected for this research because the developed algorithm can automatically discriminates between gaps and the exterior, when both are represented as voxels of the same size. To define gap volume, we have to define boundary surfaces that can discriminate between the gap space and the exterior. However, it is difficult to define the shapes and positions of boundaries between the two spaces, as shown in Fig. 6
                        . When both parts bounding the gap have free surface boundaries, as shown in Fig. 6(a), we can consider several algorithms to define the boundary between the gap space and the exterior, such as by the minimum distance criterion (as shown in Fig. 6(b)), by the surface tangent to both parts (as shown in Fig. 6(c)), and by the maximum derivative of curvature of both parts (as shown in Fig. 6(d)), all of which seem to be inadequate. We developed an algorithm to discriminate between gap space and the exterior when they are represented in voxel models, which will be explained in Section 4.

When each part is represented in a voxel model, we combine the voxel models of all parts using union Boolean operations to obtain the decomposition model of a given assembly. This is shown in Fig. 7
                        , which illustrates the process of generating a decomposition assembly model of two parts in two dimensions. Fig. 7(a) shows the voxel models of “Part 1” and “Part 2” as well as a dotted line box containing all “partial” elements of each part, which were described in the previous subsection. Thereafter, the proposed algorithm for calculating the minimal containing box of all parts, which is called as union box, is shown in Fig. 7(b). Finally, after dividing the union box into voxel elements of the same size as those of each part, all voxels of each part are mapped into the corresponding voxels of the union box, as shown in Fig. 7(c). Each voxel of the union box inherits the classification information as well as the identification number of the part from which it originated. This process continues for all parts in order to obtain the decomposition model of the whole assembly.

With the decomposition model of assembly now created, the method proposed here searches for interior empty spaces that are regarded as gaps in the assembly. When parts of free surfaces are assembled with the interior empty space open to the exterior of the assembly, it can be difficult to discriminate the interior empty space of the assembly from the exterior space, which is mentioned in the Section 3.2 and illustrated in Fig. 6. In this research, we define the “gap element” as an “empty” voxel that is in between “partial” voxels that belong to different parts in order to develop an algorithm for locating all gap elements of the given assembly. The developed algorithm scans each voxel of the decomposition assembly model in all coordinate axis directions, searching for voxels that are in between partial voxels that belong to different parts, to be classified as gap voxels. For a better understanding of the proposed algorithm, we will explain it using the two dimensional models shown in Fig. 8
                        , in which two parts are assembled as in Fig. 7. The number of each element shown in Fig. 8 represents the identification number of the part from which the element was generated. When partial elements from different parts are overlapping with one another, as shown in Fig. 8(b), these elements keep all identification numbers of both parts, which will be used in the process of searching for “common partial” elements in the next step. When searching in the x-direction, the algorithm scans the decomposition model of the assembly layer-by-layer from the bottom to the top and checks the classification information of each scanned element to classify the gap elements in each layer, scanning all the elements from left to right. When the empty elements are in between partial elements that belong to different parts, the algorithm classifies these empty elements as gap elements. For example, the separated row in Fig. 8(a) represents the 4th row from the bottom of the assembly decomposition model, in which the 5th and the 6th elements are partial elements of “Part 1”, while the 10th is a partial element of “Part 2”. Therefore, the algorithm classifies the 7th, 8th, and 9th elements (hatched elements) as gap elements, since they are located in between partial elements of different parts in the x-axis scanning direction. The algorithm continues this process from the bottom layer to the top of the assembly. After searching for the gap elements in y-axis direction column by column in the same way, it gathers all gap elements from the x- and y-direction searches, as shown in Fig. 8(b), in which the hatched elements represent gap elements. In the three-dimensional case, the algorithm continues searching in z-direction. In addition to the merits of automatically searching for all gap elements, the proposed method has another advantage in that it can automatically define the boundary between the “gap” and “exterior” spaces of the assembly. When the located gap elements face any neighboring exterior empty element, the neighboring “empty” elements are classified as “boundary” elements. The boundary elements are useful for defining the boundary of the gap when calculating the volume of the gap space. The elements marked as “B” in Fig. 8(b) represent the boundary elements.

The proposed algorithm can find all “gap” elements that are in between two “partial” elements of different parts of the assembly. We call this gap element as “in-between partial” element to distinguish it from the “common partial” gap element that is to be explained here. Note that when the partial elements from different parts are overlapping or facing each other, as shown inside the broken line circle in Fig. 8(b), the algorithm does not classify these as being gap elements under the definition given in Section 4.1, since no empty elements exist in between the partial elements of the different parts. In reality, however, slits smaller in size than two voxels may exist between the parts. These slits must also be classified as gap elements during the search process. More detail about the elements in the circle in the lower left of Fig. 8(b) is shown in Fig. 9
                        . In this research, the proposed algorithm also classifies partial elements from different parts that face or overlap with one another, known as “common partial” elements, to be “gap” elements. In Fig. 9, when both “1” and “2” appear in an element, it means that an element of “Part 1” is overlapped with an element of “Part 2”; the shaded and hatched elements are classified common partial elements. The shaded element of Part 1 in the upper right of the figure is not classified as a common partial element, as it neither overlaps nor faces any other partial elements from different parts. As a result, the proposed algorithm can identify all gap spaces, which consist of both empty elements located between parts and the common partial elements, as shown in Fig. 10
                        .

In order to find the gaps between parts, we generated a decomposition model of the given assembly. The approximation process used by us results in differences between the computed gap volumes and the actual gap volume. In this study, the proposed algorithm also classifies partial elements from different parts that face or overlap with each other (known as “common partial” elements) to be “gap” elements. For example, Fig. 11
                         shows all gap elements between Parts 1 and 2 identified by the proposed algorithm as hatched boxes, which consist of common partial and in-between gap elements. Since the volume characterized by common partial elements is equal to or greater than that of the actual gap and the volume characterized by in-between partial elements is equal to or less than that of the actual gap, some portions of the identified gap can be larger than the actual gap space while others can be smaller. Consequently, the gap spaces found by the method used in this research are always greater than the spaces characterized by in-between elements only, and they are lesser than the union of all in-between and partial elements. Therefore, we define the minimum bound of the gap volume identified by the proposed method as the total volume characterized by in-between elements as well as the maximum bound as the union of all in-between and partial elements. We have developed the program to report to the user the minimum and maximum bounds on the gap volume found by the present method.

Meanwhile, the “error” of the identified gap spaces can be evaluated quantitatively in various ways. For example, the error can be measured as the difference between the length of the actual space and that of the identified gap (lg
                        ), as shown in Fig. 11. However, the length difference can vary according to the direction and position of the measuring point, which is not appropriate. To evaluate the quantitative error of the identified gap spaces, we will compare the known volume of an actual gap with the computed volume of an identified gap in the next section.

We have developed a gap searching program based on the algorithm proposed in the previous sections. In order to verify the efficiency of this method, we compared the conventional method for finding gaps in a car body assembly with our program. For this purpose, we considered the front left assembly of a real passenger car, which consists of 25 parts, including a cowl, dash, light, and bumper, as shown in Fig. 12
                     (a). Under the traditional method, designers check the assembly to find any gaps or design errors with two-dimensional section views, as shown in Fig. 12(b). Designers have difficulty in finding the locations of any gaps, as well as in recognizing the shape of a gap by the two-dimensional method.

Contrary to the traditional method, designers can easily find gaps in the assembly by the proposed method along with the developed program, as shown in Fig. 12. Fig. 13
                     (a) shows the input model of all parts (represented in STL file format), which is to be checked for any gaps within the assembly. Fig. 13(b) illustrates the gap in the assembly, as found and visualized by the developed program, with blue color voxels, while Fig. 13(c) shows an enlarged view of the gap, which is between the light and the bumper. The voxel size for the gap searching was 2.5mm, and it took 34s to find the gap on a PC with 3.0GB of RAM and a 2.94GHz clock speed.

For cases in which the designer would like to check for very small gaps in a region of interest, the developed program has an additional function of fine searching. While using large parts, decreased voxel size increases the number of voxels tremendously, which causes an increase in data size and calculation time. In order to resolve this problem, when a designer defines a specific region of interest for fine searching, as shown in Fig. 14
                     , the function of fine searching generates a decomposition model using voxels which are as small as possible within only the designated volume, instead of working with the entire assembly. With the aid of this function, the developed program can find very small gaps as shown in Fig. 15
                     , in which the red line cube is the volume designated by a designer, and the size of voxel for fine search was 1.2mm. The designer will notice that the gap around the corner is wider than that in the straight wall, which may cause possible problems while sealing.

In addition to the gap-searching examples above, to compare the actual gap spaces with those identified by the proposed method based on the decomposition model, Fig. 16
                     (a) shows the exact shape of the gap contained within the red-lined cube in Fig. 15 along with the shape of the identified gap at voxel sizes of 4.8mm, 2.4mm, 1.2mm, and 0.6mm in Fig. 16(b)–(e), respectively. The blue voxels in Fig. 16 represents in-between partial elements, and the red voxels represent common partial elements. Fig. 16(b) and (c) shows that most gap elements are common partial rather than in-between partial, because the gap shape is too thin to be represented with in-between partial elements. Fig. 16(e) shows the case when the voxel size is small enough to represent the gap entirely with in-between elements, and Fig. 16(d) shows the case when in-between and the common partial elements are identified together. We have calculated the gap volume in each case of Fig. 16 in order to compare with the volume of the actual gap, so that the errors may be determined. The volume of the actual gap shown in Fig. 16(a) was 40,567mm3, and those of the gaps in Fig. 16(b)–(e) were 88,886mm3, 45,137mm3, 30,146mm3, and 31,241mm3, respectively. As mentioned in the previous Section 4.3, the volume characterized by common partial elements is equal to or greater than that of the actual gap, and the volume characterized by in-between partial elements is equal to or less than the actual value. For the cases depicted in Fig. 16(b) and (c), because common partial elements are much more in number than in-between partial elements, the volume of the identified gap is greater than its actual value. On the other hand, for the case presented in Fig. 16(d), the volume of the identified gap is less than its actual value, because the in-between partial elements are much more in number than the common partial elements. For the case presented in Fig. 16(e), only in-between partial elements are identified in the gap, resulting in the volume being less than its actual value. We show the volumes denoted by the identified elements of each type along with the error bounds in Table 2
                     , for each case in Fig. 16. In addition, we show the volumes and error bounds of the identified gap according to the voxel sizes in Fig. 17
                      that shows the error of the identified gap decreases drastically as the voxel size decreases.

Previous research has focused on solving problems of interference, collision, or mismatch of parts in large assemblies, such as aircraft or automobiles, when developed concurrently by many design engineers. Gaps between parts may also become a problem in the concurrent design process, which can cause leakage. The traditional method of looking for such gaps uses two dimensional section views to find them. This not only takes too much time but it also leads to difficulty in recognizing the location and shape of a gap. In this study, we have developed an algorithm as well as a program for automatically identifying gaps between parts. The proposed method has the following advantages:
                        
                           (1)
                           It can automatically identify and visualize the gap in three dimensions, which allows designers to find errors in their design with relative ease. Therefore, designers can rectify their errors before the manufacturing stage to reduce the development period and cost.

The proposed method is not limited by the complexity of the given assembly, because it represents the assembly and gap space as a decomposition model using a mixed method of octree and voxel representation. Additionally, using the mixed method for the decomposition model incorporates the advantages of both methods without significantly increasing calculation time above that of octree representation method.

When parts with free surfaces are assembled, it can be difficult to identify the boundaries between the gaps and the space exterior to the assembly. The proposed algorithm can automatically define the boundaries when each part is represented as a decomposition model of voxels.

The developed program can search for smaller gaps in a specified domain with a fine searching function. In addition, it can calculate the volume of a gap just by counting the number of voxels.

The application of the proposed method is not limited to automotive design, but can be extended to developing aircraft and ships in which many plate-shaped parts are to be assembled.

@&#ACKNOWLEDGEMENTS@&#

This work was partially supported by the Industrial Core Technology Development Program (10033472) of MOTIE/KEIT and the International Collaborative R&D Program (20118520020010) of Korea Institute of Energy Technology Evaluation and Planning, funded by the Korean government’s Ministry of Trade, Industry and Energy.

@&#REFERENCES@&#

