@&#MAIN-TITLE@&#Utilizing user tag-based interests in recommender systems for social resource sharing websites

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Tag frequency, recency, and duration were combined to model the personalized preference.


                        
                        
                           
                           The social network was utilized to find similar users in the collaborative filtering.


                        
                        
                           
                           The incorporated system was applied to the social resource sharing systems.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Collaborative recommendation

Folksonomy

Social tagging

Tag

Social resource sharing

Personalization

@&#ABSTRACT@&#


               
               
                  Recently collaborative tagging, also known as “folksonomy” in Web 2.0, allows users to collaboratively create and manage tags to classify and categorize dynamic content for searching and sharing. A user’s interest in social resources usually changes with time in such a dynamic and information rich environment. Additionally, a social network is one innovative characteristic in social resource sharing websites. The information from a social network provides an inference of a certain user’s interests based on the interests of this user’s network neighbors.
                  To handle the problem of personalized interests changing gradually with time, and to utilize the benefit of the social network, this study models a personalized user interest, incorporating frequency, recency, and duration of tag-based information, and performs collaborative recommendations using the user’s social network in social resource sharing websites. The proposed method includes finding neighbors from the “social friends” network by using collaborative filtering and recommending similar resource items to the users by using content-based filtering.
                  This study examines the proposed system’s performance using an experimental dataset collected from a social bookmarking website. The experimental results show that the hybridization of user’s preferences with frequency, recency, and duration plays an important role, and provides better performances than traditional collaborative recommendation systems. The experimental results also reveal that the friend network information can successfully collaborate, thus improving the collaborative recommendation process.
               
            

@&#INTRODUCTION@&#

The new Web 2.0 sites, which provide interactive information sharing and user-centered collaboration, have recently experienced rapid growth in the World-Wide Web. Examples of Web 2.0 website types include social networking, social bookmarking, Web-based communities, blogs, photograph sharing, video sharing, wikis, and knowledge management. Folksonomy is one characteristic of Web 2.0. Folksonomy is also known as collaborative tagging or social tagging, which allows users to collaboratively create and manage tags to classify and categorize contents or user collections. Now collaborative tagging in Web 2.0 is becoming widely used as an important tool to classify dynamic content for searching and sharing [16,38].

Research has shown that social tagging can classify blogs [3], enhance information retrieval [22,18], and improve recommender systems [16]. Recommender systems are developed to deal with information overload and provide personalized recommendations, content, and services to users [1]. These software systems have been applied in many areas including e-commerce, news, advertisements, document management, and e-learning. Using tags reduces the limitations of the cold-start and sparsity problems in the collaborative filtering-based recommender systems [16,11].

The tags collected by a user represent part of the user’s interests or preferences in the social bookmarking website. The frequency of a tag represents the strength of user’s preference in this category, defined by this tag. The frequency information of the tag has been used in recommender systems [16]. For recommender systems of the Internet, however, user interests changes with time; thus, learning a user’s interest categories in a dynamic environment like the Web is challenging [37,26].

In an environment in which the user gradually changes interests, tag data close to the current temporal period are usually more important than data temporally far from the current period. That is, based on the tagging information, users are typically interested in items that they recently tagged. For example, a certain user was interested in a Personal Digital Assistant (PDA) six months ago. He is currently interested in the iPad, and the tag of an iPad is used frequently. It is more appropriate to recommend an iPad over a PDA to this user. In addition to the recency of a user’s preference, another aspect that represents a user’s interest in social resource sharing websites is the duration of a user’s interests. The duration a certain activated tag represents the continuity of the user’s preference on the category defined by this tag.

How should one utilize and combine tag-based information to handle personalized preferences for recommender systems in social resource sharing websites? This motivates our research to analyze user preferences in frequency, recency, and duration as well as to introduce a hybrid of a collaborative model and a content-based model to improve recommendation quality based on tag-based information. Tag-based information can be extremely useful for user-adaptive applications such as recommender systems [5]. To our knowledge, there has not been any research on a tag-based recommender system that incorporates the frequency, recency, and duration for social resource sharing websites.

Section 2 of this paper describes the related works on social tagging and recommender systems. Section 3 analyzes users’ tagging behaviors in the social resource sharing website. Section 4 introduces proposed procedures for how tag information is used to design a hybrid collaborative and content-based recommender system. Section 5 demonstrates the experimental results. Section 6 suggests conclusions and some possible areas of exploration for future research.

@&#RELATED WORKS@&#

Recommender systems use a specific information filtering technique to present information items, which are likely to be of interest to the user. Examples of these information items include blogs, commercial products, movies, music, news, and photographs. Recommender systems make recommendations using three basic steps: acquiring preferences from the users’ explicit or implicit input information, computing recommendations using proper techniques, and presenting the recommendations to users [32,28,35,33].

Recommendation techniques include Content-Based Filtering (CBF), which recommends items similar to the user’s past preferences; Collaborative Filtering (CF), which recommends items similar to preferences of the user’s neighbors; and the hybrid-based approach, which integrates the CBF and CF to improve the recommendation quality and to ease limitation problems of the CF and CBF [29,17,2,27,1]. This study builds on the hybridization of CF and CBF for the folksonomy-based social resource sharing websites, with incorporation of the frequency, recency, and duration of the user’s tag-based preferences.

Web 2.0 offers different ways to easily participate in the creation of Web contents: inserting new content, sharing objects, or providing comments [5]. A folksonomy, which is also known as “collaborative tagging,” “social classification,” “social indexing,” and “social tagging” is a classification system that allows users, who are collaboratively creating and managing tags, to annotate and categorize their own content for archiving and sharing. The folksonomy system can minimize the time and effort spent to classify and categorize the dynamic Internet contents, compared with the complex hierarchal classification and categorization schemes. The problem of ambiguity and tag synonyms may arise in folksonomies [20]. Ambiguity of the tags can emerge as users apply the same tag in different ways; synonyms of the tags can emerge as users employ different tags for the same concept. However, some research alleviated these problems by using tag ontology [4,15].

Folksonomies have become very popular on the Web as part of social software applications such as social bookmarking and photograph annotation. These resource sharing systems are also known as social annotation systems, which enable the organization of online resources with user-defined keywords [8]. Tagging, which is characteristic of Web 2.0 services, allows users to collectively classify and find information. Social resource sharing systems are Web-based systems that allow users to upload their resources, and to label them with arbitrary tags 
                        [14]. Users, resources, and tags are three important roles in this sort of system. Users label the resource applying social tags, as shown in Fig. 1
                        . These systems can be categorized according to what kind of resources are supported, such as photos (Flickr), bibliographic references (CiteULike), bookmarks (Delicious, Diigo), merchandise (Amazon), or videos (YouTube). Delicious and Diigo are two popular social resource sharing websites for users to store, share, and discover Web bookmarks, where users can tag each bookmark with freely chosen index terms.

Tags can convey information about the content and creation of a resource [21]. Users tag resources for future retrieval and sharing [19]. Tags identify what the resource is about and the characteristics of a resource [9]. When building the user’s profile on interests or preferences, two types of data collection can be used to explicitly and implicitly build the user’s profile [23,24]. Annotation of tagging and bookmarking Web pages is an example of building a user’s profile of preferences implicitly. Annotations can become a part of the user profile as an indication of his/her perspective on the content collection and interest in the annotated object [34]. The tags collected by the user represent part of this user’s preferences or interests; hence, this study uses the tag-based user profile as the user’s interest in topics of bookmarks in the social bookmarking websites. Rucker and Polanco [30] constructed a recommender system using bookmark lists. Kim et al. [16] used tag-based user profiles in the collaborative filtering-based recommender systems to reduce the limitation of the cold-start and sparsity problems.

Users collect and tag social resource items; thus, a user’s interest can be partially modeled by analyzing this user’s tag information. Because a user’s interest changes with time in the World Wide Web, a tag-based recommender system needs to consider the recency of a user’s interest. This study assumes the newly tagged resource items by the user in a social bookmarking system are more important for this user. That is, based on the tagging information, users are usually interested in resource items they recently tagged. The time decay phenomenon has been demonstrated according to user-purchased items in an e-commerce environment [13]. The weighting of the bookmark can improve the recommendation quality [6]. Unlike previous studies, this study considers tag frequency, duration, recency, and the users’ social network, which have not been examined jointly by previous studies.

This section analyzes user tag-based interests via the perspectives of user similarity, item similarity, recency, and duration of interests. In the following subsections, first, the tag-based user profile and item profile are introduced; second, the correlation between user similarity and item similarity is tested; third, the recency of tag-based interest is investigated; and finally, the duration of interest is studied.

In the social bookmarking website, a user usually uses several tags to classify his/her collected resource items. The user’s profile represented by these tags reveals the user’s interest or preference. The user’s tag information includes the tag name and its corresponding number of items owned by the user. A tag frequency is defined as the number of items tagged by this tag. Basically, a larger tag frequency means the user has more preference for this tag. Let 
                              
                                 
                                    
                                       tag
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 u
                                 )
                              
                            represent tagi
                            owned by user u, and the frequency is defined as:
                              
                                 (1)
                                 
                                    
                                       
                                          freq
                                       
                                       
                                          
                                             
                                                tag
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          u
                                          )
                                       
                                    
                                    =
                                    Number of items in
                                    
                                    
                                       
                                          tag
                                       
                                       
                                          i
                                       
                                    
                                    
                                    for user
                                    
                                    u
                                 
                              
                           
                        

The user profile is represented as a set of tags owned by a user. For example, a certain user who prefers Java programming collected 94 items of “java” and 73 items of “ajax.” This user’s preference profile can be represented as “java: 94, and ajax: 73.” For collaborative filtering, the similarity of interests among users is very important in recommender systems, and it can be measured by the similarity between the two user tag-based profiles.

The category of a resource item can be classified by keyword analysis. However, a low-cost way to categorize an item is to analyze the tag information of this item. Each resource item has its tags defined by a group of users who are interested in this resource item. The resource item’s tag information includes the tag name and its corresponding frequency tagged by a group of the users. Let tagi
                           (p) represent tagi
                            that defines the item p, and its frequency is defined as:
                              
                                 (2)
                                 
                                    
                                       
                                          freq
                                       
                                       
                                          
                                             
                                                tag
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          p
                                          )
                                       
                                    
                                    =
                                    Number of tagged times using
                                    
                                    
                                       
                                          tag
                                       
                                       
                                          i
                                       
                                    
                                    
                                    for item
                                    
                                    p
                                 
                              
                           
                        

The item profile is defined by all users who tag this item. For example, a certain resource item (msn.com) has been tagged 121 times using “MSN,” 80 times using “news,” and 48 times using “search.” This item’s tag-based profile can be represented as “MSN: 121, news: 82 and search: 48.” From the item tagging information, we can identify the category of this resource item defined by users who are interested in it.

Notice that a user profile is defined by all tags owned by this user, while an item profile is defined by all tags that are used by all users in a user dataset who tag this item. The user profile includes the tag name and corresponding frequency collected by this user. The resource item profile consists of the tag name and corresponding frequency tagged by all users who use this tag. Both the user profile and resource item profile are collected and stored in the database. To calculate the similarity between users and the similarity between items, a Term Frequency–Inverse Document Frequency (TF–IDF) approach is adapted in this study, which will be introduced in the following sections.

To identify whether the tag-based user profile can represent part of the user’s preferences, this study analyzes the relationship between the user’s similarity and the item’s similarity. The analysis procedure includes the calculation of user similarity and item similarity, as shown in Fig. 2
                        , and the test of the relationship between both similarities, as described in the following subsections.

The tag-based user profile can be transformed into a vector of Tag Frequency–Inverse User Frequency (TF–IUF), which is modified from the TF–IDF in document classification. In the TF–IDF, the term (keyword) frequency indicates the number of times that the keyword occurs in a document article being processed. The IDF provides an estimate of how common a keyword is in general usage. In the TF–IUF, the weight of tagi
                               in user u’s tag profile is defined as:
                                 
                                    (3)
                                    
                                       
                                          
                                             UserTagW
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       u
                                       )
                                       =
                                       
                                          
                                             UserTagTF
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       u
                                       )
                                       ×
                                       
                                          
                                             UserTagIUF
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           

This TF–IUF model incorporates local and global information: UserTagTFi
                               accounts for local information, and UserTagIUFi
                               is the inverse tag importance, which represents the global probability of tagi
                              
                              
                                 
                                    •
                                    The relative frequency of tagi
                                        in user u’s tag profile is defined as the normalization of the tag frequency:


                              
                                 
                                    •
                                    The global weight, UserTagIUFi
                                       , which represents the relative importance of tagi
                                        in a user dataset is defined as:

The strength of how similar two users are can be measured by the cosine similarity. The cosine similarity between user u and user v is defined as the inner product of the two users’ tag weights:
                                 
                                    (6)
                                    
                                       UserSim
                                       (
                                       u
                                       ,
                                       v
                                       )
                                       =
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   ∈
                                                   T
                                                   (
                                                   u
                                                   ,
                                                   v
                                                   )
                                                
                                             
                                             
                                             [
                                             
                                                
                                                   UserTagW
                                                
                                                
                                                   j
                                                
                                             
                                             (
                                             u
                                             )
                                             ×
                                             
                                                
                                                   UserTagW
                                                
                                                
                                                   j
                                                
                                             
                                             (
                                             v
                                             )
                                             ]
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         j
                                                         ∈
                                                         T
                                                         (
                                                         u
                                                         ,
                                                         v
                                                         )
                                                      
                                                   
                                                   
                                                   
                                                      
                                                         [
                                                         
                                                            
                                                               UserTagW
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                         (
                                                         u
                                                         )
                                                         ]
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   ×
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         j
                                                         ∈
                                                         T
                                                         (
                                                         u
                                                         ,
                                                         v
                                                         )
                                                      
                                                   
                                                   
                                                   
                                                      
                                                         [
                                                         
                                                            
                                                               UserTagW
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                         (
                                                         v
                                                         )
                                                         ]
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              where T(u,
                              v) is the set of common tags that are owned by both user u and user v.

The tag-based item profile is also scaled using the Tag Frequency–Inverse Item Frequency (TF–IIF), which is similar to the concept of TF–IDF. The weight of tagi
                               for resource item p is defined as:
                                 
                                    (7)
                                    
                                       
                                          
                                             ItemTagW
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       p
                                       )
                                       =
                                       
                                          
                                             ItemTagTF
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       p
                                       )
                                       ×
                                       
                                          
                                             ItemTagIIF
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           

The ItemTagTFi
                               accounts for local information; and ItemTagIIFi
                               represents the inverse tag importance, which represents the global probability of a certain tag for an item.
                                 
                                    •
                                    The frequency of an item’s tag is calculated based on the tag’s normalized frequency. The tagi
                                       ’s normalized frequency for item q is defined as follows:


                              
                                 
                                    •
                                    The inverse tag frequency for an item is calculated as the total number of items in a user dataset divided by the total number of items tagged by this tag in a user dataset. The tagi
                                       ’s relative importance in a user dataset is defined as:

The tag-based cosine similarity between resource item p and item q is calculated as the inner product of the item tag weights:
                                 
                                    (10)
                                    
                                       ItemSim
                                       (
                                       p
                                       ,
                                       q
                                       )
                                       =
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   ∈
                                                   T
                                                   (
                                                   p
                                                   ,
                                                   q
                                                   )
                                                
                                             
                                             
                                             [
                                             
                                                
                                                   ItemTagW
                                                
                                                
                                                   j
                                                
                                             
                                             (
                                             p
                                             )
                                             ×
                                             
                                                
                                                   ItemTagW
                                                
                                                
                                                   j
                                                
                                             
                                             (
                                             q
                                             )
                                             ]
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         j
                                                         ∈
                                                         T
                                                         (
                                                         p
                                                         ,
                                                         q
                                                         )
                                                      
                                                   
                                                   
                                                   
                                                      
                                                         [
                                                         
                                                            
                                                               ItemTagW
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                         (
                                                         p
                                                         )
                                                         ]
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   ×
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         j
                                                         ∈
                                                         T
                                                         (
                                                         p
                                                         ,
                                                         q
                                                         )
                                                      
                                                   
                                                   
                                                   
                                                      
                                                         [
                                                         
                                                            
                                                               ItemTagW
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                         (
                                                         q
                                                         )
                                                         ]
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              where T(p,
                              q) is the set of common item tags that label both resource item p and item q.

This study investigates whether a positive correlation exists between two variables—user similarity and item similarity. A test using the Pearson coefficient, which measures the strength of the linear relationship between two variables, was conducted. Let ρ represent the Person coefficient. The null hypothesis ρ
                           =0 against the alternative hypothesis ρ
                           ≠0 was tested at the 0.05-level of significance.

To measure the item similarity between two users’ collected items, the item similarity matrix for each pair of items between two users’ items was calculated in advance using Eq. (10). The overall item similarity was then calculated by averaging the pair-wise item similarities in the item similarity matrix as follows:
                              
                                 (11)
                                 
                                    AvgItemSim
                                    (
                                    
                                       
                                          I
                                       
                                       
                                          u
                                       
                                    
                                    ,
                                    
                                       
                                          I
                                       
                                       
                                          v
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             p
                                             ∈
                                             
                                                
                                                   I
                                                
                                                
                                                   u
                                                
                                             
                                             q
                                             ∈
                                             
                                                
                                                   I
                                                
                                                
                                                   v
                                                
                                             
                                          
                                       
                                    
                                    
                                    ItemSim
                                    (
                                    p
                                    ,
                                    q
                                    )
                                    /
                                    (
                                    |
                                    
                                       
                                          I
                                       
                                       
                                          u
                                       
                                    
                                    |
                                    ×
                                    |
                                    
                                       
                                          I
                                       
                                       
                                          v
                                       
                                    
                                    |
                                    )
                                 
                              
                           where Iu
                            and Iv
                            are items collected by user u and v, respectively, and |Iu
                           | and |Iv
                           | represent the number of items collected by user u and v, respectively.

To test the hypothesis, this study sampled users from a popular social bookmark website—Delicious.com, which helps users share links to their favorite information items. A robot was designed to crawl the Delicious.com to collect the newly active users. There are 145 pairs of active users that were sampled from the website. Two variables—UserSim(u,
                           v) and AvgItemSim(Iu
                           ,
                           Iv
                           ), were calculated for each pair of active users. The Pearson coefficient between the two variables was +0.283, which yields a significant level of 0.03 to reject the null hypothesis. That is, the UserSim is significantly and positively correlated to the AvgItemSim. This means that if two users are similar based on the two users’ tag-based information, their collected items are also similar based on the items’ tag-based information. This implies that the tag-based user profile can represent part of the user’s preferences, and can be further utilized in the collaborating filtering.

The social network is one of the innovative characteristics in the social bookmarks websites. People linked on social networks often share preferences. This allows inference of a certain user’s interests based on knowledge of interests of this user’s network neighbors [10]. This subsection shows that recommending items by collaborating the target user’s friend network benefits the social bookmarking website. Thus, for a particular target user, two groups of users for comparison were selected: the friends group was selected from the target user’s friend network, and the non-friend group was randomly selected from the user dataset. The average item similarity between target user u and the users in a group (“friend group” or “non-friend group”) is calculated as follows:
                           
                              (12)
                              
                                 AvgGroupItemSim
                                 (
                                 
                                    
                                       I
                                    
                                    
                                       u
                                    
                                 
                                 ,
                                 
                                    
                                       I
                                    
                                    
                                       group
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          v
                                          ∈
                                          group
                                       
                                    
                                 
                                 
                                 AvgItemSim
                                 (
                                 
                                    
                                       I
                                    
                                    
                                       u
                                    
                                 
                                 ,
                                 
                                    
                                       I
                                    
                                    
                                       v
                                    
                                 
                                 )
                                 /
                                 |
                                 group
                                 |
                              
                           
                        where AvgItemSim(Iu
                        ,
                        Iv
                        ) is defined in Eq. (11), Igroup
                         represents the item set in the group, and |group| represents the number of users in this group. The mean values of AvgGroupItemSim in the friends group and in the non-friend group are represented as μFN
                         and μNonFN
                        , respectively.

This study tested the null hypothesis μFN
                        
                        =
                        μNonFN
                         against the alternative hypothesis μFN
                        
                        >
                        μNonFN
                         at a significance level of 0.05. We sampled 199 target users from the Delicious.com. The number of users in a group was set to 10, that is, 10 friends were selected as the friends group in the target user’s friend network, and 10 random users were selected to form the non-friend group for the target user. The hypothesis was tested using the two related sample student tests. The result rejected the null hypothesis with a significant level of 0.04. This reveals that the social network plays an important role for collaborating recommendations, and can improve the collaborative recommendation in the social bookmarking website. Additionally, finding similar users from a target user’s social network can reduce computation cost, compared with finding similar users from a large user dataset.

Users are usually interested in resource items they tagged recently [12]. This means recent tags are more likely to be re-tagged in the near future. The tag with the larger re-tagged rate indicates this tag is more active. The re-tagged rate can be measured by the proportion of tags that are re-tagged in the next temporal period. Let t
                        1 and t
                        2 represent the previous period and current (more later) period, respectively. The re-tagged rate is defined as follows:
                           
                              (13)
                              
                                 
                                    
                                       P
                                    
                                    
                                       
                                          
                                             t
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 =
                                 
                                    
                                       Number of tags re-tagged in
                                       
                                       
                                          
                                             t
                                          
                                          
                                             1
                                          
                                       
                                       
                                       and
                                       
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                    
                                    
                                       Total number of tags in
                                       
                                       
                                          
                                             t
                                          
                                          
                                             1
                                          
                                       
                                       
                                       and
                                       
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                           
                        
                     

To test the re-tagged rate for the recent tags, this study sorted the target user’s items according to the item’s bookmark time, and then equally divided the items into three groups: far, recent, and current periods according to the item’s bookmark time (see Fig. 3
                        ). The re-tagged rate in periods far and current is represented as Precent
                        
                        ,
                        
                           current
                        , and the re-tagged rate in periods far and current is represented as Pfar
                        
                        ,
                        
                           current
                        . The hypothesis on the difference between the two re-tagged rates were compared and tested. The null hypothesis Precent
                        
                        ,
                        
                           current
                        
                        =
                        Pfar
                        
                        ,
                        
                           current
                         against the alternative hypothesis Precent
                        
                        ,
                        
                           current
                        
                        >
                        Pfar
                        
                        ,
                        
                           current
                         was tested using two related sample student tests at a significance level of 0.05.

This study sampled 155 target users from the Delicious.com. The result of the t value rejects the null hypothesis with a significance level of 0.03. This implies that the recent tags are more likely to be re-tagged in the future.

The duration of interest represents another aspect of user’s preference in the social bookmarking websites. Generally, a user’s preferences in the duration perspective are divided into two types: long-term preferences and short-term preferences [36]. This study defines the duration of a tag as the length of time between the bookmark times of the first item and the last item. The tag with Long Duration (LD) represents the user’s long-term interest.

This study sorted tags according to the tags’ duration. Based on the duration, these tags were divided into two groups: the LD group and Short Duration (SD) group. The proportion of tags in the LD group, which is reused or re-tagged again in the current period, is calculated using the following equation. The re-tagged rate for tags in the SD group is also calculated using the same equation.
                           
                              (14)
                              
                                 
                                    
                                       P
                                    
                                    
                                       LD
                                    
                                 
                                 =
                                 
                                    
                                       Number of tags in the LD group which is reused in current period
                                    
                                    
                                       Total number of tags in the LD group
                                    
                                 
                              
                           
                        where the current period is defined as the recent one third of a user’s maximum duration in this study. A user’s maximum duration is defined as the length between a user’s last bookmark time and the first bookmark time.

This study tests the null hypothesis PLD
                        
                        =
                        PSD
                         against the alternative hypothesis PLD
                        
                        >
                        PSD
                         at a significance level of 0.05. This study sampled 126 target users from the Delicious.com. The result accepted the null hypothesis with a significance level of 0.11, based on the two related sample student tests. This implies that the difference between the two groups was not statistically significant. The evidence of the high re-tagged rate for the long-term duration tags was not significant enough. Nevertheless, the proportion value of re-tagged tags for the long-duration group was higher than that of the short-duration group. This indicates that users may tend to reuse (or re-tag) the long-term tags to define or bookmark resource items. Therefore, this study also includes the duration preferences into our proposed models.

Users’ tagging behaviors were empirically analyzed in the previous section. Generally, users are interested in the category of items defined by a set of frequent tags. Additionally, the recency and duration of tags represent other perspectives of the user’s preferences like frequency of tags. Therefore, this study utilizes three perspectives of user preference in frequency, recency, and duration to harness a new hybrid recommender system.

In a user’s bookmark collection, the number of items (frequency) in a specific tag represents the user’s preference on this tag. Traditionally, frequency information is used to calculate the similarity between items. However, in an environment in which the user gradually changes interests, the tag data close to the current temporal period are usually more important than that temporally far from the current period. This implies that in the social tagging system, the newly tagged items by the user are more important for the user. That is, based on the tagging information, users are usually interested in items they tagged recently. Fig. 4
                         shows that the weight of importance for tags or items degrades according to their tagging or bookmarking time.

In addition to recency, the duration is another important factor to represent a user’s preference. The duration of interest of a certain tag by a user is calculated as the length of time between the first and last bookmark time. A long-duration interest means the interest lasts for a long period of time, while short duration lasts for only a short period of time. For a recent interest or for a distant (un-recent) interest (shown in Table 1
                        ), the long-duration tags usually have a more profound impact on a user’s preference than the short-duration ones. This study recommends items based on the user’s preference combination of frequency, recency, and duration. To recommend items, this study gives higher scores to those items that are frequent, recent, and of long-duration preference. The frequency is already defined in Eq. (1), and the recency and duration of tags are quantified in the following subsections.

A user’s recency of interest can be represented as the recency of tags. This study defines the scaled recency (percentage) of tagi
                            owned by user u (abbreviated as ScaledR) as the following:
                              
                                 (15)
                                 
                                    ScaledR
                                    (
                                    
                                       
                                          tag
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    u
                                    )
                                    )
                                    =
                                    1
                                    -
                                    
                                       
                                          Current
                                          -
                                          TagLast
                                          (
                                          
                                             
                                                tag
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          u
                                          )
                                          )
                                       
                                       
                                          Current
                                          -
                                          x
                                       
                                    
                                 
                              
                           where
                              
                                 (16)
                                 
                                    x
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      UserFirst
                                                      (
                                                      u
                                                      )
                                                      ,
                                                   
                                                   
                                                      if
                                                      
                                                      UserFirst
                                                      
                                                      is later than
                                                      
                                                      Base
                                                   
                                                
                                                
                                                   
                                                      Base
                                                      ,
                                                   
                                                   
                                                      if
                                                      
                                                      UserFirst
                                                      
                                                      is earlier than
                                                      
                                                      Base
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           Base base time period for analysis, Current current time period for analysis, UserFirst(u): user u’s first bookmark time, TagLast(tagi
                           (u)): user u’s last tagging time using tagi
                           .

The scaled recency of a tag is measured by dividing the time length between Current and TagLast, and by the time length between Current and UserFirst. Because UserFirst (the start time when a user begins to use the bookmarking system) may be earlier than the Base time for analysis, we just replace the denominator of Eq. (15) by the length of time between Current and Base. A threshold of Base is predefined to ignore the tag information that is earlier than Base.

Take User1 in Fig. 5
                            for example, let Current=730th (days), Base=0th (days), and if the [TagFirst, TagLast] for tagA, tagB, and tagC are [210,615], [120,590], and [165,660], respectively. From this information we notice that UserFirst
                           =120th (days) and UserLast
                           =660th (days); and thus, from Eq. (15), ScaledR(tagA) 
                              
                                 =
                                 1
                                 -
                                 
                                    
                                       Current
                                       -
                                       TagLast
                                    
                                    
                                       Current
                                       -
                                       UserFirst
                                    
                                 
                                 =
                                 1
                                 -
                                 
                                    
                                       730
                                       -
                                       615
                                    
                                    
                                       730
                                       -
                                       120
                                    
                                 
                                 =
                                 0.81
                              
                           , 
                              
                                 ScaledR
                                 (
                                 tagB
                                 )
                                 =
                                 1
                                 -
                                 
                                    
                                       730
                                       -
                                       590
                                    
                                    
                                       730
                                       -
                                       120
                                    
                                 
                                 =
                                 0.77
                              
                           , and 
                              
                                 ScaledR
                                 (
                                 tagC
                                 )
                                 =
                                 1
                                 -
                                 
                                    
                                       730
                                       -
                                       660
                                    
                                    
                                       730
                                       -
                                       120
                                    
                                 
                                 =
                                 0.89
                              
                           . The rank of ScaledR for User1 is that tagC>tagA>tagB. As shown in Fig. 5, the UserFirst for User2 is earlier than the Base, thus the UserFirst is replaced by Base in Eq. (15), and the rank of ScaledR for User2 is tagF>tagD>tagE.

The duration of a tag is measured by the time length between its first and last bookmark times. The scaled duration (abbreviated as ScaledD) of tagi
                            owned by user u is defined as follows:
                              
                                 (17)
                                 
                                    ScaledD
                                    (
                                    
                                       
                                          tag
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    u
                                    )
                                    )
                                    =
                                    
                                       
                                          TagLast
                                          (
                                          
                                             
                                                tag
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          u
                                          )
                                          )
                                          -
                                          x
                                       
                                       
                                          UserLast
                                          (
                                          u
                                          )
                                          -
                                          y
                                       
                                    
                                 
                              
                           
                           
                              
                                 (18)
                                 
                                    x
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      TagFirst
                                                      (
                                                      
                                                         
                                                            tag
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      (
                                                      u
                                                      )
                                                      )
                                                      ,
                                                   
                                                   
                                                      if
                                                      
                                                      TagFirst
                                                      
                                                      is later than
                                                      
                                                      Base
                                                   
                                                
                                                
                                                   
                                                      Base
                                                      ,
                                                   
                                                   
                                                      if
                                                      
                                                      TagFirst
                                                      
                                                      is earlier than
                                                      
                                                      Base
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (19)
                                 
                                    y
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      UserFirst
                                                      (
                                                      u
                                                      )
                                                      ,
                                                   
                                                   
                                                      if
                                                      
                                                      UserFirst
                                                      
                                                      is later than
                                                      
                                                      Base
                                                   
                                                
                                                
                                                   
                                                      Base
                                                      ,
                                                   
                                                   
                                                      if
                                                      
                                                      UserFirst
                                                      
                                                      is earlier than
                                                      
                                                      Base
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where TagFirst (tagi
                           (u)): tagi
                            ’s first bookmark time by user u, UserLast(u): user u’s last bookmark time, and UserFirst(u): user u’s first bookmark time.

In Eq. (17), the numerator is a tag’s time length between TagLast and TagFirst. The denominator is the user’s time length between UserLast and UserFirst. Followed by the example of User1 in Fig. 5, 
                              
                                 ScaledD
                                 (
                                 tagA
                                 )
                                 =
                                 
                                    
                                       TagLast
                                       -
                                       TagFirst
                                    
                                    
                                       UserLast
                                       -
                                       UserFirst
                                    
                                 
                                 =
                                 
                                    
                                       615
                                       -
                                       210
                                    
                                    
                                       660
                                       -
                                       120
                                    
                                 
                                 =
                                 0.75
                              
                           , 
                              
                                 ScaledD
                                 (
                                 tagB
                                 )
                                 =
                                 
                                    
                                       590
                                       -
                                       120
                                    
                                    
                                       660
                                       -
                                       120
                                    
                                 
                                 =
                                 0.87
                              
                           , and 
                              
                                 ScaledD
                                 (
                                 tagC
                                 )
                                 =
                                 
                                    
                                       660
                                       -
                                       165
                                    
                                    
                                       660
                                       -
                                       120
                                    
                                 
                                 =
                                 0.92
                              
                           . The rank of ScaledD for User1 is tagC>tagB>tagA. For the User2, the UserFirst of User2 is earlier than the Base, and the TagFirst(tagD) is earlier than the Base, thus to calculate ScaledD(tagD), the UserFirst is replaced by the Base in Eq. (17), and the TagFirst is also replaced by the Base.

To model user u’s preference, this study combines the frequency, recency, and duration, abbreviated as TagFRD(tagi
                           (u)), as follows:
                              
                                 (20)
                                 
                                    
                                       
                                          freq
                                       
                                       
                                          
                                             
                                                tag
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          u
                                          )
                                       
                                    
                                    ×
                                    [
                                    α
                                    +
                                    w
                                    ×
                                    ScaledR
                                    (
                                    
                                       
                                          tag
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    u
                                    )
                                    )
                                    +
                                    (
                                    1
                                    -
                                    w
                                    )
                                    ×
                                    ScaledD
                                    (
                                    
                                       
                                          tag
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    u
                                    )
                                    )
                                    ]
                                 
                              
                           where α is a scale factor (
                              
                                 α
                                 ⩾
                                 1
                              
                           ) that controls the relative importance of frequency against the combination of recency and duration, and w is a weight 
                              
                                 (
                                 0
                                 ⩽
                                 w
                                 ⩽
                                 1
                                 )
                              
                            that determines the relative importance of ScaledD against ScaledR.

The ScaledTagFRD(tagi
                           (u)) is then normalized by the following equation:
                              
                                 (21)
                                 
                                    TagFRD
                                    (
                                    
                                       
                                          tag
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    u
                                    )
                                    )
                                    /
                                    
                                       
                                          
                                             max
                                          
                                          
                                             
                                                
                                                   tag
                                                
                                                
                                                   j
                                                
                                             
                                             ∈
                                             T
                                             (
                                             u
                                             )
                                          
                                       
                                    
                                    
                                    [
                                    TagFRD
                                    (
                                    
                                       
                                          tag
                                       
                                       
                                          j
                                       
                                    
                                    )
                                    ]
                                 
                              
                           
                        

Followed by the example of User1 in Fig. 5, if the frequencies of tagA, tagB, and tagC are 6, 5, and 5 (times), respectively, and let α
                           =1 and w
                           =0.7, thus TagFRD(tagA)=12×[1+(0.7×0.81+0.3×0.75)]=10.76, TagFRD(tagB)=9.00, and TagFRD(tagC)=9.47. Because the maximum value of TagFRD is 10.76, the ScaledTagFRD(tagA)=10.76/10.76=1.0, ScaledTagFRD(tagB)=9/10.76=0.84, and ScaledTagFRD(tagC)=9.47/0.76=0.88. Notice that with the same frequencies (five times) for tagB and tagC, the TagFRD value of tagC (9.47) is larger than that of tagB (9.00) because tagC is more recent and with a longer duration than tagB.

The proposed recommendation procedure includes three main steps: collaborative filtering to find similar users, CBF to find similar resource items, and personalized recommendations to the target user (see Fig. 6
                        ). Details are described in the following subsections.

The purpose of this step is to find similar users that have similar preferences. Some possible ways to find similar users for the target user include identifying: the users in her/his friend network; the users that have common items; the users that have common tags; or the users grouped by user clustering. This study finds similar users via the target user’s friend network according to the analysis results of the previous section.
                              
                                 
                                    Step 1: Build tag-based user profiles for the users.

Followed by the approach described in Section 3.2, the tag-based user profile was built for the items collected by the target user and the users in his/her friend network.
                              
                                 
                                    Step 2: Calculate user similarities between the target user and his/her friend network.

The strength of similarity between two users can be measured by the cosine similarity defined by Eq. (6) in Section 3.2. The similarity matrix between the target user and the users in his/her friend network is computed in this step.
                              
                                 
                                    Step 3: Find K nearest neighbors for the target user.

Among the target user’s friend network, this study finds a number of nearest neighbors (e.g., K) based on the similarity matrix of the target user’s friend network to collaborate the recommendation in the next stage.

The target user usually has similar preferences with her/his nearest neighbors. The purpose of this step is to find similar resource items for which the user may be interested and then recommend these similar resource items to the target user. The CBF based on the resource item’s tag information is utilized to find similar resource items from the nearest neighbors’ resource items as in the following steps.
                              
                                 
                                    Step 1: Build tag-based item profile for items owned by the target user and his/her nearest neighbors.

The tag information classifies an item’s categories or characteristics. Followed by the approach described in Section 3.2, the tag-based item profile was built for the items collected by the target user and his/her nearest neighbors.
                              
                                 
                                    Step 2: Calculate item similarity among the target user’s items and his/her nearest neighbors’ items.

Let Itemp
                            be one of the items owned by the target user, and candidate Itemq
                            be an item owned by the target user’s nearest neighbors; the similarity matrix among Itemp
                            and Itemq
                            is calculated by Eq. (10) in Section 3.2, where p
                           ∊
                           Iu
                            and q
                           ∊
                           Ineighbors
                           . Note that the profile of Itemq
                            here is defined by the target user’s nearest neighbors who own Itemq
                           .
                              
                                 
                                    Step 3: Find M most similar item as the candidate recommending items.

From the item similarities obtained in the previous step, the most similar items were chosen as the candidate recommending items according to their item similarities.

After calculating the item similarity in the previous step, the score of recommendations is then calculated by combining the item similarity and the target user’s FRD information. The recommendation procedure is as follows:
                              
                                 
                                    Step 1: Calculate the target user’s FRD preference.

For each Itemp
                            for user u, calculate the maximum value of the scaled FRD as follows:
                              
                                 (22)
                                 
                                    MaxScaledTagFRD
                                    (
                                    p
                                    )
                                    =
                                    
                                       
                                          
                                             max
                                          
                                          
                                             
                                                
                                                   tag
                                                
                                                
                                                   i
                                                
                                             
                                             ∈
                                             T
                                             (
                                             p
                                             )
                                          
                                       
                                    
                                    
                                    [
                                    ScaledTagFRD
                                    (
                                    
                                       
                                          tag
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    ]
                                 
                              
                           where ScaledTagFRD is defined in Eq. (21), and T(p) represents the set of tags that defines Itemp
                            by user u. Because Itemp
                            is tagged by using many tags by user u, the tag with MaxScaledTagFRD is chosen to represent user u’s major preferences on Itemp
                           .


                           
                              
                                 
                                    Step 2: Calculate the scores for the candidate recommending items.

This step calculates scores of the candidate’s recommending items from the target user’s nearest neighbors, and then recommends the most similar items to the target user according to the item scores (see Fig. 7
                           ). For each item p
                           ∊
                           Iu
                            and q
                           ∊
                           Ineighbors
                            the item score ItemScore(p,
                           q) is calculated as the following:
                              
                                 (23)
                                 
                                    
                                       
                                          w
                                       
                                       
                                          1
                                       
                                    
                                    ×
                                    ItemSim
                                    (
                                    p
                                    ,
                                    q
                                    )
                                    +
                                    (
                                    1
                                    -
                                    
                                       
                                          w
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    ×
                                    MaxScaledTagFRD
                                    (
                                    p
                                    )
                                 
                              
                           where 
                              
                                 
                                    
                                       w
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 0
                                 ⩽
                                 
                                    
                                       w
                                    
                                    
                                       1
                                    
                                 
                                 ⩽
                                 1
                                 )
                              
                            is a pre-specified factor that determines the relative importance of the item similarity against the target user’s FRD preference.


                           
                              
                                 
                                    Step 3: Recommend top-N items to the target user

Among the candidate’s recommending items, choose N (
                              
                                 ⩽
                                 M
                              
                           ) items, which have the highest scores for the target user.

@&#EXPERIMENTS AND RESULTS@&#

The experimental dataset was collected from the Delicious.com, which is a popular website that helps users share links to their favorite items on the Internet. A robot was designed to crawl the Delicious.com to collect the tags, items, active users, and friend networks. Users who have less than eight friends in their friend networks were removed. Users who have less than 15 tags and less than 50 items were also deleted. The items without tagging information were omitted. This resulting dataset contains 427 target users where each user has an average of 265 tags, 411 items, and 26 friends. The user profile of a specific user includes the tags, the number of items contained in each tags, and the user’s friends. A user’s friends were collected from the user’s friend network. The item profile includes the tag names and corresponding frequencies that were tagged by all users in the user dataset. These data comprise several tables in the database, including user, friend network, item, tag, user-tags, user-items, item-tags used by the user, and item-tags used by all users in the user dataset.

Each target user’s resource items were sorted and then divided into two parts according to the time-horizon: the earlier 80% of items for training, and the most recent 20% of items for test, as shown in Fig. 8
                           . The number of hit items was computed when the recommended items hit the target user’s items in the test set. The average performances for target users were calculated to evaluate the proposed recommender system.

Three measures in evaluating the performance of the recommendation models include recall, precision, and F1-measure, as shown in Eqs. (24)–(26), respectively. The precision is the ratio of hit items to the recommended item set for a target user. The recall is the ratio that the recommended items successfully hit (predict) the target user’s item URLs in the test set. The F1-measure combines recall and precision with an equal weight.
                              
                                 (24)
                                 
                                    Precision
                                    =
                                    
                                       
                                          Number of hit items in the recommended item set
                                       
                                       
                                          Number of recommended item set
                                       
                                    
                                 
                              
                           
                           
                              
                                 (25)
                                 
                                    Recall
                                    =
                                    
                                       
                                          Number of hit items in the test set
                                       
                                       
                                          Number of items in the test set
                                       
                                    
                                 
                              
                           
                           
                              
                                 (26)
                                 
                                    F
                                    1
                                    =
                                    
                                       
                                          Recall
                                          ×
                                          Precision
                                       
                                       
                                          (
                                          Recall
                                          +
                                          Precision
                                          )
                                          /
                                          2
                                       
                                    
                                 
                              
                           
                        

To demonstrate the impact of FRD and the friend network on recommendation performances, this study built four types of models: FRD-FN, F-FN, FRD-NonFN, and F-NonFN, as shown in Table 2
                           . In the recommendation process, the FRD-FN generates the recommended items based on the target user’s preference with the FRD using the proposed procedures in Section 4, while the F-FN is only based on the frequency; both models utilized the target user’s Friend Network (FN). The FRD-NonFN was based on the target user’s preference with the FRD and without the FN, while F-NonFN was based on the target user’s preference with only frequency and also without the FN. Instead of using the FN, for the two NonFN models, the same number of users (from the user dataset) as that in the FN was randomly assigned to the target user to perform the collaborative recommendation process (finding the nearest neighbors).

The experimental system parameters were preliminarily set as follows: α
                           =1 (in Eq. (20)), w=
                           0.7 (in Eq. (20)), w
                           1
                           =0.7 (in Eq. (23)), K=
                           10, M=
                           105, N=
                           50 (for personalized recommendation in Section 4.2). This study reports preliminary results with a satisfactory outcome after several experiments with some possible values of these parameters. These models were developed using C#.NET language under the platform of a WINDOWS XP operating system and a Microsoft SQL Server 2008.

This study also conducts a performance comparison among the FRD-FN, popular recommendation, and random recommendation (that is, no-model approach). The popular (also known as top-N) recommendation advocates frequent items from the items in the target user’s FN. The random recommendation advocates items that are randomly selected in the items of the target user’s FN. The performance of the random recommendation was averaged from the results of the five repetitive runs. All the above models are built for each target user with the same recommendation size. The recommended items successfully hit the target user’s item URLs in the test period were defined as the hit items.


                        Table 3
                         shows the experimental results of four types of models, which are shown in Table 2. The proposed FRD-FN model outperformed the other models. For more detail on comparisons, the relative percentage improvements on performances between two models (see Table 4
                        ) are discussed as follows.

This section shows the performances affected by the FRD model with the usage of the FN. The relative percentage improvements for the FRD-FN against the F-FN on precision, recall, and F1-measure are +41%, +65%, and +63%, respectively. The performances of the FRD-FN model differed significantly from the F-FN with a significance level of 0.05 based on the Wilcoxon signed-rank test (a paired difference non-parametric test for two related samples). This implies that the FRD model with the FN is critical and it significantly improves the recommendation performances.

The FRD model can be combined with or without the FN. This comparison shows the performances affected by the FRD model without the use of the FN. The FRD-NonFN and F-NonFN models did not use the FN. The relative percentage improvements for the FRD-NonFN against the F-NonFN on precision, recall, and F1-measure are +33%, +47%, and +40%, respectively. The performances of the FRD-NonFN model differed significantly from the F-NonFN with a significance level of 0.05 based on the Wilcoxon signed-rank test. This implies that even without combination with the FN, the FRD model also significantly improves the recommendation performances.

This section compares the performances affected by the FN with the FRD model. The relative percentage improvements for the FRD-FN against the FRD-NonFN on precision, recall, and F1-measure are +57%, +25%, and +32%, respectively. The performances of the FRD-FN model differed significantly from the FRD-NonFN with a significance level of 0.05 based on the Wilcoxon signed-rank test. This implies that the FRD model with the FN significantly improves the recommendation performances.

This section demonstrates the performances affected by the FN without the FRD model. The relative percentage improvements for the F-FN against the F-NonFN on precision, recall, and F1-measure are +48%, +11%, and +14%, respectively. The performances of the F-FN model differed significantly from the F-NonFN with a significance level of 0.05 for recall and 0.10 for precision and F1-measure, based on the Wilcoxon signed-rank test. This implies that the FN without the FRD model still slightly improves the recommendation performances.

For comparing the FRD-FN model with traditional approaches, Table 5
                            shows the performances and the relative percentage improvements of the FRD-FN against the popular and the random recommendations. The relative percentage improvements for the FRD-FN against the popular model are +243%, +147%, and +182%, on recall, precision, and F1-measure, respectively. The relative percentage improvements for the FRD-FN against the random model are +859%, +721%, and +787%, on recall, precision, and F1-measure, respectively. Clearly, the FRD-FN is significantly better than the other two recommendation models (with a significance level of 0.05 based on the Wilcoxon signed-rank test).

To demonstrate the relative influence of recency and duration, this study conducted a further analysis of parameter w of Eq. (20). If recency is more relevant than duration, then a large value is assigned to w (e.g., w
                        >0.75) to increase the impact of recency. Otherwise, a small value is assigned to w (e.g., w
                        <0.25) to decrease the impact of the recency. Four cases were analyzed in this study, where w
                        =0, 0.5, 0.7, and 1.0.
                           
                              (1)
                              
                                 w
                                 =0. This model used only frequency and duration, and omitted recency. This model is represented as “FR0D1.0” or simply FD.


                                 w
                                 =0.5. Recency and duration have equal impact on the recommendation. This model is represented as “FR0.5D0.5” and, except for the value of w, is the same as the FRD model described in Section 5.2.


                                 w
                                 =0.7. Recency has more impact than duration. This model is represented as “FR0.7D0.3”and is the same as the FRD model in the Section 5.2.


                                 w
                                 =1.0. This model used only frequency and recency, and omitted duration. This model is represented as “FR1.0D0”, or simply FR.


                        Fig. 9
                         shows the F1-measure of the four values of w with or without FN (friend network). This table reveals that the F1-measure of FRD is superior to that of the model of FR or FD either with FN or without FN (NonFN). This means that, based on the level of frequency, incorporating the recency and duration can improve the recommendation. The performance of the FR0.7D0.3 (w
                        =0.7) is slightly higher than that of the FR0.5D0.5 (w
                        =0.5). This implies that fine-tuning the w influences the performance of our model.

Other system parameters used in this study can also be fine-tuned by conducting experiments. System managers should fine-tune these parameters to achieve acceptable performance in their unique application domains. Thorough knowledge of the application domain and the behavior of users are also crucial in setting these parameters to improve the quality of the recommendation.

Social bookmarking is an excellent platform to collect and share knowledge on the Internet. This kind of website provides social networks for users to interact and keep track of the users that they are interested in. The tag information, one of the features in the Web 2.0, provides rich information about users’ interests and a resource item’s categories. This study combined the frequency, duration, and recency of social tags, and incorporated the users’ social network to improve recommendation quality. To our knowledge, these factors have not been examined jointly by previous studies. The proposed recommendation procedures that involved incorporating these factors in the CF and CBF stages can help website managers design the recommender systems in the area of social knowledge management.

From the experimental results of the experimental dataset from the Delicious.com website, we found the proposed hybrid recommender system has promising performance improvements on precision, recall, and F1-measure. Thus, this study concludes the following:
                           
                              (1)
                              The current study demonstrated that the tag-based user profile, the item profile, and users’ FRD preference profiles can be successfully used to harness the recommendation systems in a social resource sharing website. A user’s preference model can include the tag-based information of frequency, recency, and duration to successfully model the personalized interest of the users in social resource sharing websites.

The social network in the social resource sharing website plays an important role to share and archive common interests with other users. The relationship among users in the social network is mainly to focus on sharing similar preferences or interests in resource items. Thus, recommender systems can utilize the kind of social network to make an inference about similar users and resource items to improve the collaborative recommendations.

The proposed model is applicable in many application areas where tagging is suitable and useful for Web 2.0 websites to improve users’ satisfaction levels pertaining to recommender systems, including books, articles, documents, pictures, audio, and video.

The advanced recommendations, more intelligent online tools, and decision aids, like the hybrid system proposed in this study, have a promising future on the Web and they are expected to be the subject of ongoing research in the years ahead [7,12].

The proposed model has the following limitations. First, to model and predict user interest accurately, using rich tag information is necessary. This study examined experimental users containing frequent tags and frequent items to improve the quality of the recommendation. Because the tag information plays an essential role in modeling user interest, a plentiful amount of tag information defined by the users forms the basis for successful implementation of the proposed model.

Second, a relative limited scale of users (compared to the huge number of users on the website) was tested in this study. This may restrict the generalization. Nevertheless, according to our experimental results, as long as the nearest neighbors and the recommending items were carefully filtered and selected based on the proposed tag-based information, the recommendation quality may still be obtained.

Third, there are many parameters that need to be set in the proposed recommendation procedures, including the number of similar neighbors, the weight of recency, the number of recommendations, and the length of base time. For a different application area, these parameters are extremely different and strongly related to the domain knowledge. These parameters are relevant to the characteristic of the resource items and the user’s behavior in collecting the resource items. In order to obtain accurate recommendations, these parameters need to be properly set via thorough experiments.

Some possible extensions of this research arise. First, to model the profile of a user’s interest, this study uses tag information, which the user employs to define his/her personal collected resource items. Other information including view, note, reply, comment, reference, query, save, delete, or other types of implicit or explicit feedback [23,24,25] may be included in the user’s interest model. Second, to model the profile of an item’s classification, this study uses the tag information that defines or classifies this item; nevertheless, other complex methods such as the keyword analysis could be adapted in the CBF stage. Third, from the aspect of social networks, this study incorporates the FN in the collaborative stage. Additionally, the “following,” “follower,” and other types of social relationships, such as “trust” [31], can be included to improve the collaborative filtering stage. Finally, ontology on a specific domain allows reasoning on tag semantics [4,5], and it would enable one to infer the interests and preferences for the user who tagged resources. These critical topics will be investigated in future research.

@&#ACKNOWLEDGEMENTS@&#

This research was in part supported by the National Science Council of the Republic of China under Contract Number NSC 98-2221-E-327-016-MY2. The authors would like to thank Mr. Han-Yu Chien and Wei-Chin Chen, members of the Business Intelligence and Data Mining Laboratory in NKFUST, for collecting part of the experimental data.

@&#REFERENCES@&#

