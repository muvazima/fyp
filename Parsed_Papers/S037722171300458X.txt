@&#MAIN-TITLE@&#New complexity results for parallel identical machine scheduling problems with preemption, release dates and regular criteria

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We study preemptive parallel identical machine scheduling problems with release dates.


                        
                        
                           
                           Solutions having a permutation flow shop structure are dominant.


                        
                        
                           
                           Completion times of all jobs can be ordered in an optimal solution.


                        
                        
                           
                           We provide new results on polynomially solvable problems.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Scheduling

Identical machines

Preemptive problems

Dominant structure

Agreeability

Common due date

@&#ABSTRACT@&#


               
               
                  In this paper, we are interested in parallel identical machine scheduling problems with preemption and release dates in case of a regular criterion to be minimized. We show that solutions having a permutation flow shop structure are dominant if there exists an optimal solution with completion times scheduled in the same order as the release dates, or if there is no release date. We also prove that, for a subclass of these problems, the completion times of all jobs can be ordered in an optimal solution. Using these two results, we provide new results on polynomially solvable problems and hence refine the boundary between 
                        
                           P
                        
                      and 
                        
                           NP
                        
                      for these problems.
               
            

@&#INTRODUCTION@&#

The problem considered in this paper can be expressed as follows: there are n independent jobs 1,2,…,
                        n and m identical machines M
                        1,
                        M
                        2,…,
                        M
                        
                           m
                        . Each job has a processing time p
                        
                           j
                         and can be processed on any machine, but only on one machine at a time. Preemption is allowed, meaning that a job can be interrupted and resumed on an other machine. There exists a release date r
                        
                           j
                         for each job j, i.e. no job can start before its release date. We are interested in minimizing a regular (i.e. non-decreasing) function f. Usually, f is either 
                           
                              ∑
                              
                                 
                                    f
                                 
                                 
                                    j
                                 
                              
                           
                         or max f
                        
                           j
                        , f
                        
                           j
                         being any regular function of the completion time C
                        
                           j
                         of job j. Using the standard scheduling classification (Graham et al., 1989), this problem is denoted P∣pmtn,
                        r
                        
                           j
                        ∣f.

@&#RELATED WORKS@&#

Parallel identical machine scheduling problems are one of the most studied topic in scheduling theory. For complexity results, the authors may refer to the websites maintained by Dürr (2013) and Brucker and Knust (2013). A very recent survey on parallel machine problems with equal processing times, with or without preemption, is produced by Kravchenko and Werner (2011). For different classical criteria, setting equal processing times makes a problem become polynomial-time solvable. For example, Baptiste et al. (2007) prove that 
                           
                              P
                              |
                              pmtn
                              ,
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                              
                              ,
                              
                                 
                                    p
                                 
                                 
                                    j
                                 
                              
                              =
                              p
                              |
                              ∑
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                           
                         can be solved in polynomial-time whereas 
                           
                              P
                              |
                              pmtn
                              ,
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                              
                              |
                              ∑
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                           
                         is 
                           
                              NP
                           
                        -Hard (Du et al., 1990). For the total number of late jobs 
                           
                              ∑
                              
                                 
                                    U
                                 
                                 
                                    j
                                 
                              
                           
                         criteria, the exact same behavior happens: Baptiste et al. (2004) prove that 
                           
                              P
                              |
                              pmtn
                              ,
                              
                                 
                                    p
                                 
                                 
                                    j
                                 
                              
                              =
                              p
                              |
                              ∑
                              
                                 
                                    U
                                 
                                 
                                    j
                                 
                              
                           
                         is polynomial-time solvable, and 
                           
                              P
                              |
                              pmtn
                              |
                              ∑
                              
                                 
                                    U
                                 
                                 
                                    j
                                 
                              
                           
                         is 
                           
                              NP
                           
                        -Hard (see Lawler, 1983). For the total tardiness 
                           
                              ∑
                              
                                 
                                    T
                                 
                                 
                                    j
                                 
                              
                              ,
                              P
                              |
                              pmtn
                              ,
                              
                                 
                                    p
                                 
                                 
                                    j
                                 
                              
                              =
                              p
                              |
                              ∑
                              
                                 
                                    T
                                 
                                 
                                    j
                                 
                              
                           
                         is solvable in polynomial-time (see Baptiste et al., 2004) but 
                           
                              P
                              |
                              pmtn
                              |
                              ∑
                              
                                 
                                    T
                                 
                                 
                                    j
                                 
                              
                           
                         is 
                           
                              NP
                           
                        -Hard (see Kravchenko and Werner, 2013). Adding weights on criteria make problems much more difficult since 
                           
                              P
                              2
                              |
                              pmtn
                              |
                              ∑
                              
                                 
                                    w
                                 
                                 
                                    j
                                 
                              
                              
                                 
                                    T
                                 
                                 
                                    j
                                 
                              
                           
                         and 
                           
                              P
                              |
                              pmtn
                              ,
                              
                                 
                                    p
                                 
                                 
                                    j
                                 
                              
                              =
                              p
                              |
                              ∑
                              
                                 
                                    w
                                 
                                 
                                    j
                                 
                              
                              
                                 
                                    U
                                 
                                 
                                    j
                                 
                              
                           
                         are 
                           
                              NP
                           
                        -Hard (see Bruno et al., 1974 and Brucker and Kravchenko (2006)) Note that the complexity status of 
                           
                              P
                              2
                              |
                              pmtn
                              ,
                              
                                 
                                    p
                                 
                                 
                                    j
                                 
                              
                              =
                              p
                              |
                              ∑
                              
                                 
                                    w
                                 
                                 
                                    j
                                 
                              
                              
                                 
                                    T
                                 
                                 
                                    j
                                 
                              
                           
                         is still open. Finally, by using linear programming techniques, results provided in Lawler and Labetoulle (1978), and also in Blazewicz et al. (1976) and Slowinski (1981), imply that P∣pmtn,
                        r
                        
                           j
                        ∣L
                        
                           max
                         is solvable in polynomial-time. For a survey on mathematical programming formulations in machine scheduling, the reader can refer to Blazewicz et al. (1991).


                        Baptiste et al. (2007) proved the existence of a dominant structure which allows to solve the problem 
                           
                              P
                              |
                              pmtn
                              ,
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                              
                              ,
                              
                                 
                                    p
                                 
                                 
                                    j
                                 
                              
                              =
                              p
                              |
                              ∑
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                           
                         in polynomial-time by linear programing. In this paper, we extend this result to more general criteria and to some problems with non identical processing times, which implies new polynomial-time results, such as, to mention a few, for problems 
                           
                              P
                              |
                              pmtn
                              ,
                              
                                 
                                    d
                                 
                                 
                                    j
                                 
                              
                              =
                              d
                              |
                              ∑
                              
                                 
                                    T
                                 
                                 
                                    j
                                 
                              
                           
                        , or 
                           
                              P
                              |
                              pmtn
                              ,
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                              
                              ,
                              
                                 
                                    p
                                 
                                 
                                    j
                                 
                              
                              =
                              p
                              ,
                              
                                 
                                    d
                                 
                                 
                                    j
                                 
                              
                              =
                              d
                              |
                              ∑
                              
                                 
                                    w
                                 
                                 
                                    j
                                 
                              
                              
                                 
                                    U
                                 
                                 
                                    j
                                 
                              
                           
                        .

More precisely, in Section 2, we provide a dominant structure for all the problems of the form P∣pmtn,
                        r
                        
                           j
                        ∣f for which there exists an optimal solution such that the completion times follow the same order as the release dates. Note that our result implies that, for any problem of the type P∣pmtn∣f (i.e. without release dates), the structure is dominant. We also prove that, if we are able to compute an order between optimal completion times of the different jobs, we can solve these problems in polynomial-time by linear programming. Section 3 is dedicated to finding problems for which such an order exists. We discuss the implications of our results in term of complexity on classical criteria in Section 4 and make some conclusions in Section 5.

We are looking at solutions having a Permutation Flow Shop-like structure. In order to define this kind of schedules, we introduce some notations and concepts.

A piece of a job is a part of the job that is scheduled without interruption. We say that a job j is processed at time t if there is a machine on which a piece of j starts at time t
                     1
                     ⩽
                     t and ends at time t
                     2
                     >
                     t. We denote by C(j,
                     t) (resp. M(j,
                     t)) the completion time (resp. machine) of j when it is processed at time t. For any time t, J(t) denotes the set of jobs processed at time t.

A non-delay schedule (called originally “permissible left shift”, see Giffler and Thompson (1960)) is such that, if a machine is idle during a time interval [t,
                     t
                     +
                     ∊[(∊
                     >0), no piece of length ∊′⩽
                     ∊ of a job processed at a time t′>
                     t can be processed at time t.

We also define a vertically ordered schedule in the following manner: at any time t, if J(t)={j
                     1,
                     j
                     2,…,
                     j
                     
                        k
                     } and j
                     1
                     <
                     j
                     2
                     <⋯
                     j
                     
                        k
                     , we have M(j
                     
                        i
                     ,
                     t)=
                     M
                     
                        i
                     , i
                     =1,2,…,
                     k.


                     Fig. 1
                      illustrates these properties: job j
                     2 verifies the non-delay property since none of its pieces can be processed earlier. On the contrary, the property is not verified by job j
                     1 because one piece can be scheduled at time 1. The schedule is vertically ordered during time interval [3,4], but it is not during time interval [2,3].
                        Remark 1
                        When preemption is allowed, non-delay schedules are dominant for regular criteria since it is always possible to move a piece of a job to an earlier idle time interval without increasing the objective function. Moreover, vertically ordered schedules are also dominant since the completion times of the jobs remain the same if the pieces of jobs scheduled in the same time interval are reassigned to processors in order to respect the vertical order.

We assume without loss of generality that r
                     1
                     ⩽
                     r
                     2
                     ⩽⋯⩽
                     r
                     
                        n
                      for the remainder of the paper. Now, let us characterize the structure:
                        Definition 1
                        A schedule is said to be Permutation Flow Shop-like (PFS-like) if
                              
                                 1.
                                 it is vertically ordered,

no machine processes more than one piece of each job,

the scheduling order on the different machines is the same.

An example of PFS-like schedule is given in Fig. 2
                     .

It is interesting to mention that for the problem 
                        
                           P
                           |
                           pmtn
                           ,
                           
                              
                                 r
                              
                              
                                 j
                              
                           
                           ,
                           
                              
                                 p
                              
                              
                                 j
                              
                           
                           =
                           p
                           |
                           ∑
                           
                              
                                 C
                              
                              
                                 j
                              
                           
                        
                     , Baptiste et al. (2007) show that a similar structure is dominant. This result is very specific since it deals with equal processing times and the considered objective function is the total completion time. In this paper, we prove the existence of such a structure for more general problems.

Now, we express our central result:
                        Theorem 1
                        
                           If P∣pmtn,
                           
                           r
                           
                              j
                           ∣f has a solution S with completion times C
                           
                              1
                           
                           ⩽
                           C
                           
                              2
                           
                           ⩽⋯⩽
                           C
                           
                              n
                           
                           , there exists a non-delay PFS-like solution S′ such that 
                           
                              
                                 
                                    
                                       C
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                                 ⩽
                                 ⋯
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       n
                                    
                                    
                                       ′
                                    
                                 
                              
                            
                           and 
                           
                              
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                    
                                       ′
                                    
                                 
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                 
                              
                            
                           for 1
                           ⩽
                           j
                           ⩽
                           n.
                        

By Remark 1, we assume without loss of generality that S is a non-delay schedule which is vertically ordered. Let us define the following two properties:
                              
                                 
                                    A(j):
                                 If i and i′ are two jobs such that 1⩽
                                    i
                                    ⩽
                                    j and i
                                    <
                                    i′ no machine processes a piece of job i′ before a piece of job i.

No machine processes more than one piece of job i, for 1⩽
                                    i
                                    ⩽
                                    j.

If A(n) and B(n) are true, S is a non-delay PFS-like solution. Otherwise, we prove by induction on the job number that S can be transformed into a non-delay and vertically ordered schedule S′ such that A(n) and B(n) are true.


                           Base step.
                        

By Remark 1, vertically-ordered schedules are dominant and hence each piece of job 1 is processed by machine M
                           1.

If A(1) is true then B(1) must be true: otherwise M
                           1 processes two pieces of job 1 that are separated by an idle time interval, which contradicts the non-delay assumption.

So, suppose A(1) is false and consider the smallest t such that a job k
                           >1 starts on M
                           1 at t before a piece of job 1. Let t′ be the starting time of this piece of job 1 (see case 1 of Fig. 3
                           ). The non-delay property implies that all machines are busy during time interval [t,
                           t′[. Since ∣J(t)∣=
                           m, and ∣J(t′)−{1}∣⩽
                           m
                           −1, there is a piece of a job l processed at time t that is not processed at time t′. Moreover, since C
                           1
                           ⩽
                           C
                           
                              l
                            (by definition of S), there is also another piece of job l that starts at time t″>
                           t′. Let 
                              
                                 δ
                                 =
                                 min
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       ″
                                    
                                 
                                 -
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       min
                                    
                                    
                                       i
                                       ∈
                                       J
                                       (
                                       t
                                       )
                                    
                                 
                                 {
                                 C
                                 (
                                 i
                                 ,
                                 t
                                 )
                                 -
                                 t
                                 }
                                 ,
                                 
                                    
                                       min
                                    
                                    
                                       i
                                       ∈
                                       J
                                       (
                                       
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                 
                                 {
                                 C
                                 (
                                 i
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 -
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 }
                                 )
                              
                           . We exchange the piece of job l processed during time interval [t,
                           t
                           +
                           δ[ with the piece of job 1 processed during time interval [t′,
                           t′+
                           δ[. Finally, we reassign pieces of jobs processed during time interval [t,
                           t
                           +
                           δ[ and pieces of jobs processed during time interval [t′,
                           t′+
                           δ[ respectively, so that the schedule remains vertically ordered. Only the completion time of job 1 may decrease and the new schedule is still a non-delay one. Moreover, there is now a piece of job 1 processed on machine M
                           1 during time interval [t,
                           t
                           +
                           δ[. If t
                           >
                           r
                           1, the non-delay property of S and the definition of t imply that there is a piece of job 1 processed during time interval [r
                           1,
                           t[, so there is now one single piece of job 1 processed during time interval [r
                           1,
                           t
                           +
                           δ[ by machine M
                           1. If A(1) is true, so is B(1). Otherwise, we consider again the smallest τ such that a job k
                           >1 starts on M
                           1 at τ before a piece of job 1: since τ
                           ⩾
                           t
                           +
                           δ and δ
                           >0 we have τ
                           >
                           t. Therefore, by repeating this procedure, either we do not find such a τ or we reach the end of the schedule: in both cases A(1) becomes true, so does B(1).


                           Induction step.
                        

Now, suppose there is a non-delay and vertically ordered schedule such that A(j
                           −1) and B(j
                           −1) are true for j
                           ⩾2, and assume that at least one of the properties A(j) and B(j) is false.

If A(j) is true then B(j) must be true. Indeed, suppose for the sake of contradiction that B(j) is false. In this case, there is one machine M
                           
                              q
                            which processes two pieces of job j. Let t and t′>
                           t be their completion and starting times, respectively. If the machine is idle during time interval [t,
                           t′[, we get a contradiction. Indeed, if q
                           =1 the non-delay assumption is not verified. If q
                           >1, let i be a job processed at time t′ on a machine M
                           
                              p
                           , with p
                           <
                           q: since the schedule is vertically ordered, we have i
                           <
                           j, and since A(j
                           −1) is true, no piece of job j can be processed by machine M
                           
                              p
                            during time interval [r
                           1,
                           t′[. Hence, no piece of job j is processed by machines M
                           1,
                           M
                           2,…,
                           M
                           
                              q−1 during time interval [t,
                           t′[, and the piece of job j starting at time t′ can start earlier at time t, which contradicts the non-delay assumption.

So, suppose A(j) is false, and let us consider the smallest value t such that a piece of a job k
                           >
                           j starts at time t, and a piece of job j starts at time t′>
                           t, on a machine M
                           
                              q
                            (see case 2 of Fig. 3). Since k
                           >
                           j and the schedule is vertically ordered, no piece of job j can be processed by machines M
                           
                              q+1,
                           M
                           
                              q+2,…,
                           M
                           
                              m
                            during time interval [t,
                           C(k,
                           t)[. If q
                           =1, no piece of job j can be processed during this time interval. Else, let i and i′ be the jobs processed respectively at time t and t′ by machine M
                           
                              q−1. Since the schedule is vertically ordered, we have i′<
                           j, and since A(j
                           −1) is true we have i
                           ⩽
                           i′, so we get i
                           <
                           j. Consequently, no piece of job j can be processed by machines M
                           1,
                           M
                           2,…,
                           M
                           
                              q−1 during time interval [t,
                           C(k,
                           t)[.

Since it is a non-delay schedule and r
                           
                              j
                           
                           ⩽
                           r
                           
                              k
                           
                           ⩽
                           t, all machines are busy during time interval [t,
                           t′[: therefore there is a piece of a job l
                           >
                           k processed at time t that is not processed at time t′. Since C
                           
                              j
                           
                           ⩽
                           C
                           
                              l
                            (by definition of S), there is also another piece of job l that starts at time t″>
                           t′. Let 
                              
                                 δ
                                 =
                                 min
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       ″
                                    
                                 
                                 -
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       min
                                    
                                    
                                       i
                                       ∈
                                       J
                                       (
                                       t
                                       )
                                    
                                 
                                 {
                                 C
                                 (
                                 i
                                 ,
                                 t
                                 )
                                 -
                                 t
                                 }
                                 ,
                                 
                                    
                                       min
                                    
                                    
                                       i
                                       ∈
                                       J
                                       (
                                       
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                 
                                 {
                                 C
                                 (
                                 i
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 -
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 }
                                 )
                              
                           . We exchange the piece of job l processed during time interval [t,
                           t
                           +
                           δ[ with the piece of job j processed during time interval [t′,
                           t′+
                           δ[. Finally, we reassign pieces of jobs processed during time interval [t,
                           t
                           +
                           δ[ and pieces of jobs processed during time interval [t′,
                           t′+
                           δ[ respectively, so that the schedule remains vertically ordered.

Again, only the completion time of job j may decrease, and we still have a non-delay schedule. Moreover there is a piece of job j processed on machine M
                           
                              q
                            during time interval [t,
                           t
                           +
                           δ[. If there is also a piece of job j processed by M
                           
                              q
                            before time t, it must end at time t (by definition of t and because of the non-delay assumption). Hence, machine M
                           
                              q
                            processes no piece of a job k
                           >
                           j and only one single piece of job j during time interval [0,
                           t
                           +
                           δ[. Since δ
                           >0, we can repeat the procedure, as in the “base step”, and get a schedule with A(j) and B(j) being true.□

For problems without release date, i.e. of the form P∣pmtn∣f, non-delay PFS-like schedules are dominant since, by renumbering the jobs, there always exists an optimal solution such that 
                              
                                 
                                    
                                       C
                                    
                                    
                                       1
                                    
                                    
                                       ∗
                                    
                                 
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       2
                                    
                                    
                                       ∗
                                    
                                 
                                 ⩽
                                 ⋯
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       n
                                    
                                    
                                       ∗
                                    
                                 
                              
                           .

This theorem gives a very precise structure on an optimal solution for problems of the form P∣pmtn,
                     r
                     
                        j
                     ∣f for which there exists an optimal solution S
                     ∗ such that 
                        
                           
                              
                                 r
                              
                              
                                 j
                              
                           
                           <
                           
                              
                                 r
                              
                              
                                 k
                              
                           
                           ⇒
                           
                              
                                 C
                              
                              
                                 j
                              
                              
                                 ∗
                              
                           
                           ⩽
                           
                              
                                 C
                              
                              
                                 k
                              
                              
                                 ∗
                              
                           
                        
                     . Moreover, this structure is very interesting combined with a dominant order for the jobs’ completion times, because it can lead to the time-polynomiality of a large class of problems. Indeed, the linear programming approach proposed by Baptiste et al. (2007) for problem 
                        
                           P
                           |
                           pmtn
                           ,
                           
                              
                                 r
                              
                              
                                 j
                              
                           
                           ,
                           
                              
                                 p
                              
                              
                                 j
                              
                           
                           =
                           p
                           |
                           ∑
                           
                              
                                 C
                              
                              
                                 j
                              
                           
                        
                      can be extended to regular criteria which are separable piecewise continuous linear, such as 
                        
                           ∑
                           
                              
                                 w
                              
                              
                                 j
                              
                           
                           
                              
                                 T
                              
                              
                                 j
                              
                           
                        
                      for example.

Let us modify their linear program. The value p is replaced with p
                     
                        j
                      in the job processing time constraints, and the objective function is replaced with a regular criterion f which is a separable piecewise continuous linear function. Properties of f ensure that it can be handled by a linear program (see for instance Dantzig and Thapa, 1997). We then get:
                        
                           (1)
                           
                              
                                 
                                    
                                       
                                          minimize
                                       
                                    
                                    
                                       
                                          
                                          f
                                          (
                                          
                                             
                                                C
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                C
                                             
                                             
                                                2
                                             
                                          
                                          ,
                                          …
                                          ,
                                          
                                             
                                                C
                                             
                                             
                                                n
                                             
                                          
                                          )
                                       
                                    
                                 
                                 
                                    
                                       
                                          subject to
                                       
                                    
                                    
                                       
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   l
                                                   =
                                                   1
                                                
                                                
                                                   m
                                                
                                             
                                          
                                          
                                             
                                                p
                                             
                                             
                                                j
                                             
                                             
                                                l
                                             
                                          
                                          =
                                          
                                             
                                                p
                                             
                                             
                                                j
                                             
                                          
                                          
                                          ∀
                                          j
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              
                              
                                 
                                    t
                                 
                                 
                                    j
                                 
                                 
                                    l
                                    +
                                    1
                                 
                              
                              +
                              
                                 
                                    p
                                 
                                 
                                    j
                                 
                                 
                                    l
                                    +
                                    1
                                 
                              
                              ⩽
                              
                                 
                                    t
                                 
                                 
                                    j
                                 
                                 
                                    l
                                 
                              
                              
                              ∀
                              j
                              =
                              1
                              ,
                              …
                              ,
                              n
                              ,
                              
                              ∀
                              l
                              =
                              1
                              ,
                              …
                              ,
                              m
                              -
                              1
                           
                        
                     
                     
                        
                           (3)
                           
                              
                              
                                 
                                    t
                                 
                                 
                                    j
                                 
                                 
                                    l
                                 
                              
                              +
                              
                                 
                                    p
                                 
                                 
                                    j
                                 
                                 
                                    l
                                 
                              
                              ⩽
                              
                                 
                                    t
                                 
                                 
                                    j
                                    +
                                    1
                                 
                                 
                                    l
                                 
                              
                              
                              ∀
                              j
                              =
                              1
                              ,
                              …
                              ,
                              n
                              -
                              1
                              ,
                              
                              ∀
                              l
                              =
                              1
                              ,
                              …
                              ,
                              m
                              -
                              1
                           
                        
                     
                     
                        
                           (4)
                           
                              
                              
                                 
                                    t
                                 
                                 
                                    j
                                 
                                 
                                    m
                                 
                              
                              ⩾
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                              
                              
                              ∀
                              j
                              =
                              1
                              ,
                              …
                              ,
                              n
                           
                        
                     
                     
                        
                           (5)
                           
                              
                              
                                 
                                    t
                                 
                                 
                                    j
                                 
                                 
                                    1
                                 
                              
                              +
                              
                                 
                                    p
                                 
                                 
                                    j
                                 
                                 
                                    1
                                 
                              
                              =
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                              
                              ∀
                              j
                              =
                              1
                              ,
                              …
                              ,
                              n
                           
                        
                     
                     
                        
                           (6)
                           
                              
                              
                                 
                                    p
                                 
                                 
                                    j
                                 
                                 
                                    l
                                 
                              
                              ,
                              
                                 
                                    t
                                 
                                 
                                    j
                                 
                                 
                                    l
                                 
                              
                              ⩾
                              0
                              
                              ∀
                              j
                              =
                              1
                              ,
                              …
                              ,
                              n
                              ,
                              
                              ∀
                              l
                              =
                              1
                              ,
                              …
                              ,
                              m
                           
                        
                     
                     
                        
                           (7)
                           
                              
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                              ⩾
                              0
                              
                              ∀
                              j
                              =
                              1
                              ,
                              …
                              ,
                              n
                           
                        
                     
                  

The 
                        
                           O
                           (
                           nm
                           )
                        
                      variables 
                        
                           
                              
                                 t
                              
                              
                                 j
                              
                              
                                 l
                              
                           
                           ,
                           
                              
                                 p
                              
                              
                                 j
                              
                              
                                 l
                              
                           
                        
                     , and C
                     
                        j
                      are defined respectively as the starting time of job j on machine M
                     
                        l
                     , the processing time of job j on machine M
                     
                        l
                     , and the completion time of job j. Equalities (1) guarantee the processing time of each job, whereas inequalities (2) ensure that a job is first processed on the different machines in the order M
                     
                        m
                     ,
                     M
                     
                        m−1,…,
                     M
                     1. Inequalities (3) ensure that jobs are scheduled on each machine following order 1,2,…,
                     n.
                        Theorem 2
                        
                           The problem P∣pmtn,
                           
                           r
                           
                              j
                           ∣f can be solved in polynomial time if f is a separable piecewise continuous linear function computable in polynomial time and if there exists an optimal solution such that 
                           
                              
                                 
                                    
                                       C
                                    
                                    
                                       1
                                    
                                    
                                       ∗
                                    
                                 
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       2
                                    
                                    
                                       ∗
                                    
                                 
                                 ⩽
                                 ⋯
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       n
                                    
                                    
                                       ∗
                                    
                                 
                              
                           
                           .
                        

We use Theorem 1 with the idea of the proof in Baptiste et al. (2007). Theorem 1 implies that there exists an optimal non-delay PFS-like solution such that the order of the jobs on each machine is 1,2,…,
                           n. If we denote by z
                           ∗ its value, and by w
                           ∗ the minimum value of a PFS-like solution which verifies order 1,2,…,
                           n for the jobs, we have z
                           ∗
                           ⩽
                           w
                           ∗. Now, observe that any solution of the linear program defines a PFS-like schedule. Hence, if f
                           ∗ is the value of an optimal solution of the linear program, we get f
                           ∗
                           ⩾
                           w
                           ∗, that is f
                           ∗
                           ⩾
                           z
                           ∗. However, in a PFS-like schedule a job j may have a completion time less than C
                           
                              j
                            because there may be no piece of j on machine M
                           1. So, let us show that the optimal non-delay PFS-like solution (denoted by σ) verifies the constraints of the linear program. Suppose there is a job j in σ that completes at time 
                              
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                    
                                       σ
                                    
                                 
                              
                            and whose last piece is processed by machines M
                           
                              q
                            with q
                           >1. By Theorem 1 we know that there is no job i
                           <
                           j such that 
                              
                                 
                                    
                                       C
                                    
                                    
                                       i
                                    
                                    
                                       σ
                                    
                                 
                                 >
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                    
                                       σ
                                    
                                 
                              
                           , and also that σ is vertically ordered, so no job i
                           >
                           j is scheduled by processors M
                           1,
                           M
                           2,…,
                           M
                           
                              q
                            before time 
                              
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                    
                                       σ
                                    
                                 
                              
                           : therefore, we can define a solution of the linear program such that 
                              
                                 
                                    
                                       p
                                    
                                    
                                       j
                                    
                                    
                                       l
                                    
                                 
                                 =
                                 0
                              
                            for 1⩽
                           l
                           <
                           q, that is such that 
                              
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                    
                                       σ
                                    
                                 
                              
                           . By applying this procedure to any job j whose last piece is not processed by machine M
                           1, we get a solution of the linear program of value z
                           ∗, which implies z
                           ∗
                           ⩾
                           f
                           ∗. From z
                           ∗
                           ⩽
                           f
                           ∗ we deduce that f
                           ∗
                           =
                           z
                           ∗: the optimal solution of the linear program is also an optimal solution of the problem P∣pmtn,
                           r
                           
                              j
                           ∣f.□

Note that a more general LP formulation is proposed in Kravchenko and Werner (2012), since it is dedicated to solve the problem Q∣r
                     
                        j
                     ,
                     pmtn,
                     D
                     
                        j
                     ,
                     C
                     1
                     ⩽⋯⩽
                     C
                     
                        n
                     ∣F, where C
                     1
                     ⩽⋯⩽
                     C
                     
                        n
                      means that we are only looking for an optimal schedule among the class of schedules for which C
                     1
                     ⩽⋯⩽
                     C
                     
                        n
                      holds. Nevertheless, notice that the formulation introduced here is interesting for two reasons: first, this LP formulation involves only O(nm) variables and O(nm) constraints, whereas the one proposed in Kravchenko and Werner (2012) uses O(n
                     3
                     m) variables and constraints. Secondly, the approach provided in Kravchenko and Werner (2012) does not allow us to use the PFS-like structure proposed in this paper.

The next section is dedicated to finding subproblems of P∣pmtn,
                     r
                     
                        j
                     ∣f for which a total order on jobs’ completion times can be obtained, in order to conclude that they are solvable in polynomial time.

Extending notations on the agreeability introduced in Tian et al. (2009), in the β-field, we write 
                        
                           
                              
                                 
                                    
                                       
                                          r
                                       
                                       
                                          j
                                       
                                       
                                          +
                                       
                                    
                                    ,
                                    
                                       
                                          p
                                       
                                       
                                          j
                                       
                                       
                                          +
                                       
                                    
                                 
                              
                           
                        
                      if r
                     
                        j
                     ’s and p
                     
                        j
                     ’s are in the same order, i.e. p
                     1
                     ⩽
                     p
                     2
                     ⩽⋯⩽
                     p
                     
                        n
                     . Note that, for a problem with equal processing times, or without release dates, this condition is always fulfilled. This notation can also be used for more than two inputs; for example, 
                        
                           
                              
                                 
                                    
                                       
                                          r
                                       
                                       
                                          j
                                       
                                       
                                          +
                                       
                                    
                                    ,
                                    
                                       
                                          p
                                       
                                       
                                          j
                                       
                                       
                                          +
                                       
                                    
                                    ,
                                    
                                       
                                          d
                                       
                                       
                                          j
                                       
                                       
                                          +
                                       
                                    
                                    ,
                                    
                                       
                                          w
                                       
                                       
                                          j
                                       
                                       
                                          -
                                       
                                    
                                 
                              
                           
                        
                      means that r
                     
                        j
                     ’s, p
                     
                        j
                     ’s and d
                     
                        j
                     ’s are in an increasing order whereas w
                     
                        j
                     ’s are decreasing.

Under some specific conditions on the objective functions and the input data, it is possible to know the order of the jobs’ completion times in an optimal solution:
                        Theorem 3
                        
                           The following problems are solvable in polynomial time:
                           
                              
                                 1.
                                 
                                    
                                       
                                          P
                                          |
                                          pmtn
                                          ,
                                          
                                             
                                                
                                                   
                                                      
                                                         r
                                                      
                                                      
                                                         j
                                                      
                                                      
                                                         +
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         j
                                                      
                                                      
                                                         +
                                                      
                                                   
                                                
                                             
                                          
                                          |
                                          ∑
                                          
                                             
                                                f
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                    , when f
                                    
                                       j
                                    
                                    ’s are regular functions and f
                                    
                                       j
                                    
                                    −
                                    f
                                    
                                       k
                                     
                                    is non-decreasing if j
                                    <
                                    k.
                                 


                                    
                                       
                                          P
                                          |
                                          pmtn
                                          ,
                                          
                                             
                                                
                                                   
                                                      
                                                         r
                                                      
                                                      
                                                         j
                                                      
                                                      
                                                         +
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         j
                                                      
                                                      
                                                         +
                                                      
                                                   
                                                
                                             
                                          
                                          |
                                          max
                                          
                                             
                                                f
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                    , when f
                                    
                                       j
                                    
                                    ’s are regular functions and f
                                    
                                       j
                                    
                                    −
                                    f
                                    
                                       k
                                     
                                    is non-negative if j
                                    <
                                    k.
                                 


                                    
                                       
                                          P
                                          |
                                          pmtn
                                          ,
                                          
                                             
                                                
                                                   
                                                      
                                                         r
                                                      
                                                      
                                                         j
                                                      
                                                      
                                                         +
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         j
                                                      
                                                      
                                                         +
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         w
                                                      
                                                      
                                                         j
                                                      
                                                      
                                                         -
                                                      
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                d
                                             
                                             
                                                j
                                             
                                          
                                          =
                                          d
                                          |
                                          ∑
                                          
                                             
                                                w
                                             
                                             
                                                j
                                             
                                          
                                          
                                             
                                                U
                                             
                                             
                                                j
                                             
                                          
                                       
                                    .

We first show that there exists an optimal schedule such that 
                              
                                 
                                    
                                       C
                                    
                                    
                                       1
                                    
                                    
                                       ∗
                                    
                                 
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       2
                                    
                                    
                                       ∗
                                    
                                 
                                 ⩽
                                 ⋯
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       n
                                    
                                    
                                       ∗
                                    
                                 
                              
                           . Let S be an optimal schedule. For the sake of contradiction, assume that there exist two jobs j
                           <
                           k, such that r
                           
                              j
                           
                           ⩽
                           r
                           
                              k
                           , p
                           
                              j
                           
                           ⩽
                           p
                           
                              k
                            and C
                           
                              j
                           
                           >
                           C
                           
                              k
                           , and let us prove that we can find another optimal schedule S′ such that 
                              
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                    
                                       ′
                                    
                                 
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       k
                                    
                                    
                                       ′
                                    
                                 
                              
                           . This exchange argument is illustrated with Fig. 4
                           .

The schedule S′ is constructed in the following manner: all the pieces of jobs but j and k remain exactly at the same position. All pieces of job j processed before r
                           
                              k
                            stay at the same place, and on any time interval where jobs j and k are both processed in S, we schedule them in the same manner in S′. For the remaining available slots, starting from time r
                           
                              k
                           , we schedule the remaining part of job j and then the one of k. By construction, we ensure that no overlap exists in S′ by scheduling jobs j and k in S′ when j and k are simultaneously processed in S. Using the fact that p
                           
                              j
                           
                           ⩽
                           p
                           
                              k
                           , the completions times of j and k are 
                              
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                    
                                       ′
                                    
                                 
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       k
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       C
                                    
                                    
                                       k
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                 
                              
                           .

Now, let us consider the three cases:
                              
                                 1.
                                 Since f
                                    
                                       j
                                    
                                    −
                                    f
                                    
                                       k
                                     is a non-decreasing function, by considering time points C
                                    
                                       j
                                     and C
                                    
                                       k
                                    , we can write (f
                                    
                                       j
                                    
                                    −
                                    f
                                    
                                       k
                                    )(C
                                    
                                       j
                                    )⩾(f
                                    
                                       j
                                    
                                    −
                                    f
                                    
                                       k
                                    )(C
                                    
                                       k
                                    ), which means that f
                                    
                                       j
                                    (C
                                    
                                       k
                                    )+
                                    f
                                    
                                       k
                                    (C
                                    
                                       j
                                    )⩽
                                    f
                                    
                                       j
                                    (C
                                    
                                       j
                                    )+
                                    f
                                    
                                       k
                                    (C
                                    
                                       k
                                    ).

We have 
                                       
                                          max
                                          
                                             
                                                
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  C
                                                               
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  C
                                                               
                                                               
                                                                  k
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          ⩽
                                          max
                                          (
                                          
                                             
                                                f
                                             
                                             
                                                j
                                             
                                          
                                          (
                                          
                                             
                                                C
                                             
                                             
                                                j
                                             
                                          
                                          )
                                          ,
                                          
                                             
                                                f
                                             
                                             
                                                k
                                             
                                          
                                          (
                                          
                                             
                                                C
                                             
                                             
                                                j
                                             
                                          
                                          )
                                          )
                                       
                                     and, using the fact that f
                                    
                                       j
                                    
                                    −
                                    f
                                    
                                       k
                                     is a non-negative function, we can write max (f
                                    
                                       j
                                    (C
                                    
                                       j
                                    ),f
                                    
                                       k
                                    (C
                                    
                                       j
                                    ))=
                                    f
                                    
                                       j
                                    (C
                                    
                                       j
                                    )⩽max(f
                                    
                                       j
                                    (C
                                    
                                       j
                                    ),f
                                    
                                       k
                                    (C
                                    
                                       k
                                    )).

We have to consider three cases according to the value of d; if d
                                    ⩾
                                    C
                                    
                                       j
                                    , we have 
                                       
                                          
                                             
                                                U
                                             
                                             
                                                j
                                             
                                             
                                                ′
                                             
                                          
                                          =
                                          
                                             
                                                U
                                             
                                             
                                                j
                                             
                                          
                                          =
                                          0
                                       
                                     and 
                                       
                                          
                                             
                                                U
                                             
                                             
                                                k
                                             
                                             
                                                ′
                                             
                                          
                                          =
                                          
                                             
                                                U
                                             
                                             
                                                k
                                             
                                          
                                          =
                                          0
                                       
                                    . If C
                                    
                                       k
                                    
                                    >
                                    d then 
                                       
                                          
                                             
                                                U
                                             
                                             
                                                j
                                             
                                             
                                                ′
                                             
                                          
                                          ⩽
                                          
                                             
                                                U
                                             
                                             
                                                j
                                             
                                          
                                          =
                                          1
                                       
                                     and 
                                       
                                          
                                             
                                                U
                                             
                                             
                                                k
                                             
                                             
                                                ′
                                             
                                          
                                          =
                                          
                                             
                                                U
                                             
                                             
                                                k
                                             
                                          
                                          =
                                          1
                                       
                                    . In both cases we get 
                                       
                                          
                                             
                                                w
                                             
                                             
                                                j
                                             
                                          
                                          
                                             
                                                U
                                             
                                             
                                                j
                                             
                                             
                                                ′
                                             
                                          
                                          +
                                          
                                             
                                                w
                                             
                                             
                                                k
                                             
                                          
                                          
                                             
                                                U
                                             
                                             
                                                k
                                             
                                             
                                                ′
                                             
                                          
                                          ⩽
                                          
                                             
                                                w
                                             
                                             
                                                j
                                             
                                          
                                          
                                             
                                                U
                                             
                                             
                                                j
                                             
                                          
                                          +
                                          
                                             
                                                w
                                             
                                             
                                                k
                                             
                                          
                                          
                                             
                                                U
                                             
                                             
                                                k
                                             
                                          
                                       
                                     Finally, if C
                                    
                                       j
                                    
                                    >
                                    d
                                    ⩾
                                    C
                                    
                                       k
                                     then 
                                       
                                          
                                             
                                                U
                                             
                                             
                                                j
                                             
                                             
                                                ′
                                             
                                          
                                          =
                                          
                                             
                                                U
                                             
                                             
                                                k
                                             
                                          
                                          =
                                          0
                                       
                                     and 
                                       
                                          
                                             
                                                U
                                             
                                             
                                                k
                                             
                                             
                                                ′
                                             
                                          
                                          =
                                          
                                             
                                                U
                                             
                                             
                                                j
                                             
                                          
                                          =
                                          1
                                       
                                    , so we get 
                                       
                                          
                                             
                                                w
                                             
                                             
                                                j
                                             
                                          
                                          
                                             
                                                U
                                             
                                             
                                                j
                                             
                                             
                                                ′
                                             
                                          
                                          +
                                          
                                             
                                                w
                                             
                                             
                                                k
                                             
                                          
                                          
                                             
                                                U
                                             
                                             
                                                k
                                             
                                             
                                                ′
                                             
                                          
                                          =
                                          
                                             
                                                w
                                             
                                             
                                                k
                                             
                                          
                                          ⩽
                                          
                                             
                                                w
                                             
                                             
                                                j
                                             
                                          
                                          =
                                          
                                             
                                                w
                                             
                                             
                                                j
                                             
                                          
                                          
                                             
                                                U
                                             
                                             
                                                j
                                             
                                          
                                          +
                                          
                                             
                                                w
                                             
                                             
                                                k
                                             
                                          
                                          
                                             
                                                U
                                             
                                             
                                                k
                                             
                                          
                                       
                                    .

Hence, S′ is also optimal in all cases, and there exists an optimal schedule such that 
                              
                                 
                                    
                                       C
                                    
                                    
                                       1
                                    
                                    
                                       ∗
                                    
                                 
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       2
                                    
                                    
                                       ∗
                                    
                                 
                                 ⩽
                                 …
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       n
                                    
                                    
                                       ∗
                                    
                                 
                              
                           . Therefore, problems of cases 1 and 2 are solvable in polynomial time by Theorem 2. For case 3, Theorem 2 cannot be used because f
                           
                              j
                           ’s functions are not continuous. However, we only need to find the first job k that cannot be on time, since jobs l
                           >
                           k will be also late, by Theorem 1. This can be done by testing the feasibility of successive modified versions of the linear program of Theorem 2: for k
                           =1,2,…,
                           n, only on-time jobs 1⩽
                           j
                           ⩽
                           k are considered, and constraints 
                              
                                 
                                    
                                       t
                                    
                                    
                                       j
                                    
                                    
                                       1
                                    
                                 
                                 +
                                 
                                    
                                       p
                                    
                                    
                                       j
                                    
                                    
                                       1
                                    
                                 
                                 ⩽
                                 d
                              
                           , for 1⩽
                           j
                           ⩽
                           k, are added.□

These results are used in the next section to derive time-polynomially solvable problems according to different classical criteria.


                     Fig. 5
                      shows the new complexity hierarchy of parallel identical machine scheduling problems with preemption and release dates for criteria based on the 
                        
                           ∑
                           
                              
                                 w
                              
                              
                                 j
                              
                           
                           
                              
                                 T
                              
                              
                                 j
                              
                           
                        
                      . Previously minimal 
                        
                           NP
                        
                     -Hard and maximal time-polynomially solvable problems are included with their references, and shaded results are the ones proved with the unified approach proposed in this paper.

For the four types of input data r
                     
                        j
                     , p
                     
                        j
                     , d
                     
                        j
                      and w
                     
                        j
                      there exist many agreeable combinations. In order to present a synthetic view, we consider cases where some of the data are constant, i.e. r
                     
                        j
                     
                     =0, p
                     
                        j
                     
                     =
                     p, d
                     
                        j
                     
                     ∈{0,
                     d} or w
                     
                        j
                     
                     =1. Thus, we distinguish the two following cases:
                        
                           (a)
                           Three types of data have constant values: all the problems are solvable in polynomial time, by Theorem 3. More precisely, if d
                              
                                 j
                              
                              =0 or if d
                              
                                 j
                               is not fixed, these results were already known. It is interesting to notice that some of them were proved more than 30years ago, whereas the others are very recent (Baptiste et al., 2004 and Baptiste et al. (2007)). We extend these results and prove the time-polynomiality of the six problems we get by the combinations of parameters and criteria when dj
                              =
                              d, which is known in the literature as the ’common due date’ case.

Two types of data have constant values: if the remaining data verify the condition of Theorem 3, then the corresponding problem is in 
                                 
                                    P
                                 
                               we hence provide a polynomial-time algorithm for different problems with agreeable conditions, for which very few results were known. Otherwise, i.e. if the remaining data do not necessary satisfy the condition of Theorem 3, using a literature review, we observe that the problem is either 
                                 
                                    NP
                                 
                              -Hard or open. For flow-time or tardiness criteria, all problems are 
                                 
                                    NP
                                 
                              -Hard, except 
                                 
                                    P
                                    |
                                    pmtn
                                    ,
                                    
                                       
                                          p
                                       
                                       
                                          j
                                       
                                    
                                    =
                                    p
                                    |
                                    ∑
                                    
                                       
                                          w
                                       
                                       
                                          j
                                       
                                    
                                    
                                       
                                          T
                                       
                                       
                                          j
                                       
                                    
                                 
                              : that is why we conjecture it is 
                                 
                                    NP
                                 
                              -Hard.

Our approach also defines new problems with common due dates for which complexity issues are interesting for criteria related to weighted total number of late jobs. When we have to deal with common due dates and a criterion based on 
                        
                           ∑
                           
                              
                                 w
                              
                              
                                 j
                              
                           
                           
                              
                                 U
                              
                              
                                 j
                              
                           
                        
                     , it is possible to look at the reverse problem and hence provide directly complexity results. For example, 
                        
                           P
                           |
                           
                              
                                 r
                              
                              
                                 j
                              
                           
                           ,
                           
                              
                                 d
                              
                              
                                 j
                              
                           
                           =
                           d
                           ,
                           pmtn
                           |
                           ∑
                           
                              
                                 U
                              
                              
                                 j
                              
                           
                        
                      is equivalent by symetry to 
                        
                           P
                           |
                           pmtn
                           |
                           ∑
                           
                              
                                 U
                              
                              
                                 j
                              
                           
                        
                      and is hence NP-Hard. In the same way, problem 
                        
                           P
                           |
                           pmtn
                           ,
                           
                              
                                 r
                              
                              
                                 j
                              
                           
                           ,
                           
                              
                                 p
                              
                              
                                 j
                              
                           
                           =
                           p
                           ,
                           
                              
                                 d
                              
                              
                                 j
                              
                           
                           =
                           d
                           |
                           ∑
                           
                              
                                 U
                              
                              
                                 j
                              
                           
                        
                      is equivalent to 
                        
                           P
                           |
                           pmtn
                           ,
                           
                              
                                 p
                              
                              
                                 j
                              
                           
                           =
                           p
                           |
                           ∑
                           
                              
                                 U
                              
                              
                                 j
                              
                           
                        
                     , for which a polynomial time algorithm was given in Baptiste et al. (2004). Our approach leads to a slightly more general result since we show that 
                        
                           P
                           |
                           pmtn
                           ,
                           
                              
                                 
                                    
                                       
                                          r
                                       
                                       
                                          j
                                       
                                       
                                          +
                                       
                                    
                                    ,
                                    
                                       
                                          p
                                       
                                       
                                          j
                                       
                                       
                                          +
                                       
                                    
                                    ,
                                    
                                       
                                          w
                                       
                                       
                                          j
                                       
                                       
                                          -
                                       
                                    
                                 
                              
                           
                           ,
                           
                              
                                 d
                              
                              
                                 j
                              
                           
                           =
                           d
                           |
                           ∑
                           
                              
                                 w
                              
                              
                                 j
                              
                           
                           
                              
                                 U
                              
                              
                                 j
                              
                           
                        
                      is solvable in polynomial time.

One can also note that our approach does not perform well for a criterion of type f
                     =maxf
                     
                        j
                     . Indeed, we can only prove that P∣pmtn∣C
                     
                        max
                      and P∣pmtn,
                     p
                     
                        j
                     
                     =
                     p∣L
                     
                        max
                      are in 
                        
                           P
                        
                     , whereas it was independently proved in Lawler and Labetoulle (1978) and Slowinski (1981) that R∣pmtn,
                     r
                     
                        j
                     ∣L
                     
                        max
                      can be solved in polynomial time.

@&#CONCLUSION@&#

In this paper we proved that there exists a type of schedules (named PFS-like) which is dominant for problem P∣pmtn,
                     r
                     
                        j
                     ∣f if there exists an optimal solution with completion times scheduled in the same order as the release dates, or if there is no release date. By interchange arguments, we proved that, for a large subclass of these problems, it is possible to order the optimal completion time of all jobs. Using these two results, we showed that problems satisfying the condition of Theorem 3 are polynomially solvable. In particular, we proved the polynomiality of different problems having agreeable data and/or a common due date d
                     
                        j
                     
                     =
                     d.

An interesting question consists in finding a less restrictive condition for the existence of PFS-like schedules. Indeed, on the one hand, PFS-like schedules are not dominant if condition 
                        
                           
                              
                                 
                                    
                                       
                                          r
                                       
                                       
                                          j
                                       
                                       
                                          +
                                       
                                    
                                    ,
                                    
                                       
                                          p
                                       
                                       
                                          j
                                       
                                       
                                          +
                                       
                                    
                                 
                              
                           
                        
                      does not hold (see left chart of Fig. 6
                     ) but, on the other hand, there exist PFS-like schedules that are optimal, even if the condition 
                        
                           
                              
                                 
                                    
                                       
                                          r
                                       
                                       
                                          j
                                       
                                       
                                          +
                                       
                                    
                                    ,
                                    
                                       
                                          p
                                       
                                       
                                          j
                                       
                                       
                                          +
                                       
                                    
                                 
                              
                           
                        
                      is not verified (right chart of Fig. 6). Hence, we should seek for a better characterization of the conditions implying the existence of PFS-like schedules.

Another research avenue lies in using the PFS-like structure in 
                        
                           NP
                        
                     -Hard problems to derive approximation algorithms or to improve resolution methods; indeed, the existence of PFS-like schedules drastically reduces the combinatoric of problems since, whatever the number of machines, there are at most n! orders to test.

Finally, polynomial-time cases for problem P∣pmtn,
                     r
                     
                        j
                     ∣f that were already solved in the literature are also polynomially solvable when we generalize to the uniform machine case Q∣pmtn,
                     r
                     
                        j
                     ∣f, leading to the natural following question: is the PFS-like structure also dominant for some problems in case of uniform machines?

@&#ACKNOWLEDGEMENTS@&#

We would like to thank the anonymous referees for their valuable suggestions and constructive comments that improved this paper.

@&#REFERENCES@&#

