@&#MAIN-TITLE@&#PSGMiner: A modular software for polysomnographic analysis

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           PSGMiner is a fast and extensible visualization and analysis platform.


                        
                        
                           
                           PSGMiner is a tool for clinicians and methodologists.


                        
                        
                           
                           Different classifications can be made with various attributes having the desired epoch lengths.


                        
                        
                           
                           The software proves quite easy to make any change in any part of the software or to add a new module into it.


                        
                        
                           
                           The data obtained can be exported, which allows them to be used in different classification software.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Computer software

Digital signal processing

Machine learning

Polysomnography

@&#ABSTRACT@&#


               Graphical abstract
               
                  
                     
                        
                           fx1
                           
                        
                     
                  
               
            

@&#INTRODUCTION@&#

Polysomnography (PSG) is a standard test that is applied in sleep laboratories and is used in diagnosing patients with sleep problems. During the night, continuous and real time recordings of the bioelectric signals produced by the body during sleep are made [1]. At present, sleep disorder research has become a specialised area of expertize in which approximately 90 different diseases are defined. Among the various methods used, PSG is the leading method used in sleep disorder studies [2].
                  

PSG montage may have a different number of channels depending on the problem to be solved in a specific patient. Following acquisition, the signals are amplified and filtered in order to remove noise and artifacts. There are various software and hardware solutions for PSG recording and analysis. Some of them are as follows: Cadwell Laboratories Inc. (Easy III Software), CareFusion (SomnoStar Software), CleveMed (Crystal PSG Software), Compumedics U.S.A. Inc. (ProFusion PSG 3 Software), Natus Medical Inc. (Sandman software), Natus neurology Grass Technologies (TWin PSG Clinical Software), Nihon Kohden (PSG-1100 Sleep System), Philips Respironics (Sleepware G3), Signature Sleep Services (Galaxy PSG Diagnostic Platform), Sleepvirtual (Sleepvirtual BWIII), SOMNOmedics America Inc. (DOMINO Software). These commercial software have four functions in computer-based PSG: recording, documentation, scoring and report generation.

Various academic groups that deal with digital signal processing (DSP) and machine learning (ML) techniques have software that is used for analysis of physiological signals [3–17]. However, these software focus on certain signals and disorders. The examples of these can be given as ANYWAVE (visualizing and processing electrophysiological signals), KUBIOS HRV [4] (heart rate variability analysis software), POTENCOR [5] (calculate power and correlation spectra of electroencephalography (EEG) signals), RESP-24 [6] (the investigation of 24-h breathing abnormalities in heart failure patients by using Respiratory Signal (RS)), EEGLAB [7] (processing continuous and event-related EEG and magneto-encephalogram (MEG) signals), FIELDTRIP [8] (MEG and EEG analysis), MEA-TOOLS [9] (spike analysis), BSMART [10] (analysis of multichannel neural time series), EPILAB [11] (studies on the prediction of epileptic seizures), ERPWAVELAB [12] (multi-channel time-frequency analysis of event-related activity of EEG and MEG data), EMEGS [13] (analysis of EEG and MEG data), LIMO EEG [14] (statistical analysis of physiological data), CRANIUX [15] (brain-machine interface research), OPENMEEG [16] and MFERG_LAB [17] (software for quasi-static bio-electromagnetics). The detailed characteristics of these software packages are listed in 
                     Table 1.

As seen in Table 1, the majority of software packages are created based on MATLAB™, which would require some level of programming knowledge. However, these software packages fail to provide an interface that is effective and easy to use in clinical works, which highly require a thorough visualization of signals and delicate marking events. Therefore, a common platform is strongly needed in order to allow a rapid interaction between clinical researchers and methodologists.

Here, the aim is to develop a tool at the interface between methodologists and researchers in the field of physiology. For this purpose, modular software (PSGMiner) that has marking tools and data import/export functionality was developed, which could make basic visualizations, analysis and classification of data. This software also makes it possible to incorporate any feature extraction module so that methodologists could use the newly developed algorithms properly.

With its expandable modular structure, parallel processing and machine learning support, PSGminer is capable of analyzing all of the PSG signals.

PSGminer is not limited to default parameters. It is easy to add a new data type, an analysis type, or a new ML method; users can even modify an existing feature. Any number of different data can be obtained through the calculation of the features of each PSG channel. Following that, the data obtained are stored in different tables in the database according to the type of the analysis.

Although some academic software contains DSP and ML, there is no commercial software that has these features. PSGMiner contains DSP and ML techniques at the same time and it uses the parameters obtained from the PSG signals, which are required to classify different sleep disorders or user-defined events. It can use the results of manual or automated analysis performed by the recording device.

PSGMiner creates a database, which is specific to the files and the analysis, by reading the raw PSG files with different channels and features. In the feature extraction module, it extracts features from the raw data in the form of epochs (desired time) in time, frequency, and entropy domains and stores them in the database created. In the annotation module, PSG data can be scored visually or necessary changes can be made on existing scoring data. In the artifact module, the epochs with dense artifacts are excluded from the classification. In the ML module, the classification operation is conducted through the use of five algorithms. All of these operations are managed within a single piece of software. The program can also be used to analyze signals to detect correlations and changes in a particular parameter, which could have useful applications. For example, this could give researchers an opportunity to predict an event in advance by means of established correlations, which would be an important advantage for the researchers or technicians conducting the sleep experiments, as they could be alerted to an oncoming critical event such as sleep apnea.

This study presents the architecture of the PSG miner software, which emphasizes the feature plug-ins that can be developed in any programming language. This process is described in the help menu of the software and online (http://www.psgminer.com/). It is possible to use the developed software free under GNU Lesser General Public License v3.0, with full documentation and examples at http://sourceforge.net/projects/psgminer/.

PSG data that are used at the designing stage of the study were taken from 153 patients (M/F, 112/41; mean age, 61,48±11.54 years, age range, 32–94). The study protocol was approved by a local ethics committee. These patients were actual patients from the archive of a sleep laboratory. Recordings were used in a retrospective manner. All patients were diagnosed with periodic leg movement disorder and underwent a one-night PSG for diagnosis. These PSG records were recorded with a 44-channel polygraph (Compumedics 44E series, Australia) and these archive records were obtained through the use of complete PSG techniques in the sleep Laboratory of the Faculty of Medicine, Trakya University. PSG assembly involves 6-channel EEG (F3-A2, F4-A1, O1-A2, O2-A1, C3-A2 and C4-A1), right and left electrooculography (EOG) (LOC-A2 and ROC-A1), leg electromyography (EMG), chin EMG, electrocardiography (ECG), oxygen saturation with fingertip pulse oximeter (SpO2), thermistor (for upper airway signals), thorax and abdomen, snoring (microphone), and measurement of body positions. EEG electrodes were placed according to the internationally accepted 10–20 system [18]. It was determined that the sampling rate used during the recording of lung and upper airway signals were 256Hz, the sampling rate for thoracic and abdominal respiration signals were 128Hz, the lower and upper frequencies of the filtering done were 0.3Hz and 30Hz respectively.

PSG data were manually scored by a physiologist, according to the International Classification of Sleep Disorders (ICSD), which was written by American Academy of Sleep Medicine (AASM) [19]. PSG record scoring information was converted into the file format of extensible mark-up language (XLM) [20] and raw data were converted into European data format (EDF) [21].

Different features can be obtained from PSG signals using different methods in three domains (Time, frequency and entropy). In the study, the features in all domains were extracted from the formulas given in a detailed way in the help menu of the software and online. On examining a PSG recording, time domain features typically indicate the morphology and shape of the signal and can include poorly-defined descriptions of the waveform (such as spikiness, uniformity or degree of asymmetry). These features are derived from a statistical analysis of the PSG signal within an epoch. Fast Fourier Transform (FFT), a reliable method for transferring PSG signals from time domain to frequency domain, are employed, and the detailed formulas of the features are obtained separately for each signal. In information theory, entropy is a measure of the uncertainty in a random variable. The features extracted from the entropy domain show differences as Shannon, Spectral, Singular Value Decomposition (SVD), and Fisher entropies. To calculate Shannon entropy, the signal must first be represented as a discrete distribution. This is performed here by approximating the probability mass function by different histogram bin counts. On the other hand, different spectral bin counts are used to extract Spectral entropy. As for the calculation of SVD and Fisher entropies, SVD - a measure of the complexity of a signal and is often used to obtain information about quasi-periodic signals in noise - is performed. The full set of features extracted from the EEG is listed in  
                        Table 2 
                        [22].

In 
                        Table 3, the full set of features extracted from ECG signals is shown [23,24,4,25].

In 
                        Table 4, EMG features belonging to time, frequency and entropy domains are listed [26].

The parameters in the other channels were obtained from raw data or scoring data (there is not any calculation) in PSG listed on 
                        Table 5. The features listed on Table 5 are directly imported from software of the recording hardware. Imported features are listed and the user can choose from among these for analysis. If data from another device is used, similarly its annotations will be imported and listed in a similar way. This provides the user with access to all features of the device being used for recording.

Machine learning is the general name for the computer algorithms that model a given problem according to the data obtained from the environment in which the problem occurs. A number of recommended approaches and algorithms exist. Of these approaches, some are capable of prediction, some are capable of estimation, and some are capable of classification [27,28].

In the software, K-Nearest Neighbors [29,30], Naïve Bayes [31], Artificial Neural Networks (Multi-Layer Perceptron [32], Radial Basis Function Network [33], and Self-Organizing Map [34]) methods are built-in. More detail is given in the help menu of the software and online. However, when a different method is meant to be used apart from these methods, the methods available in Waikato Environment for Knowledge Analysis (WEKA) can be used through WEKA interface connection.

The statistical verification of the study results carries importance in terms of the accuracy of the deductions related to the results. Although there are various methods recommended in the literature for the comparison of classification performance between the algorithms, the most common performance measurement metrics are known as; Accuracy, Sensitivity, Specificity, F-measure, Area Under the ROC Curve (AUC), Matthew's Correlation Coefficient, Root Mean Squared Error (RMSE), Kappa's Error (KE) [35,36]. In the software introduced, most of these metrics can be calculated. The K-fold Cross Validation [37] test method is also used.

The software has been developed as a form application using Embarcadero RAD Studio XE7 [38]. The source code consists of 12467 lines. The software comes also with a detailed help section. Apart from a detailed user manual, details of formulas used in the calculations are provided in this section. These help files are available as PDF files and online. Besides the documentation, tutorial videos, including sample runs explaining the use of the software, are also available in the help menu and online. The program is composed of four main modules, namely interface, input/output, system object and algorithm modules. 
                     Fig. 1 showing the modules were constructed based on the approach used by [39,40].


                     The interface module: this module is designed for user interaction. Dependent on user inputs, this module controls the remaining modules. Starting with the main forum, this module encompasses six other sub-modules, one of which contains three further sub-modules that can be activated depending on the functions or analysis selected by the user.


                     The input/output module: this module controls retrieval, conversion and storage of data used and generated by the program. Even though EDF is a standard file format used by all PSG devices, annotations and montage parameters used by each brand may differ. This can cause program malfunction. To overcome this situation, a sub-program is built into this module to recognize channels automatically. It first checks for channel names to get a match. Next, it looks at signal features like sampling ratio, filter values, etc. The channel detection routine is tested on seven different devices and successfully identified channels. Examples are shown in the documentation.


                     The system object: the system object module is the engine of the whole system performing all the functions needed for analysis and output display. It is not directly accessible by the user, and the module can access services from those objects through the objects public interface in the background. There are four sub-modules in the system object module:
                        
                           (1)
                           Data objects sub-module, which performs data storage and manipulation functions

Analysis objects sub-module, which is responsible for executing analysis methods obtained from algorithm module.

Visualization objects sub-module, which is used for the graphical presentation of data and study results

Parallel objects sub-module, which synchronises parallel processing routines when it is possible; for example, during the calculation of different signal channels simultaneously or simultaneous drawing of charts of these channels


                     The algorithm module: This module contains the sub-modules that stores and executes all mathematical functions in the program. Statistics, digital signal processing and machine learning; each sub-module contains a number of different mathematical functions and new functions continue to be added as the program is further developed with continuing studies. Still, if an algorithm needed by the user is missing, it can be added as a dynamic link library (DLL) file. The software includes five popular machine learning methods. There are however a large number of machine learning methods, but this is not sole purpose of this software. Therefore, instead of implementing all of these methods into the program, an interface is added to use WEKA software for this purpose. WEKA is open source and solely designed to implement machine learning methods. Installation of WEKA is optional and will be needed if other machine learning methods are to be implemented. With this connection enabled, the user will have access to all classification methods provided by WEKA [41].

In the software, MySQL (open-source relational database management system) is used as a database [42]. When a new database is created for a new study five tables (edffile, xmlanotation, edfsignalparam, annotation, pattern) are created automatically by the program. Extra tables are created depending on the selected analysis methods, as each method differs in terms of their data requirements. The structure of a sample database for hypopnea is provided in 
                     Fig. 2.

There is no need for the user to know MySQL or WEKA. Software checks if they are set up on the computer during its installation and if any is missing it installs these programs as well. MySQL is managed by the software for storage and processing data.

Main module is the initial form of the software. It provides access to the other modules. In 
                        Fig. 3, the graphical user interface of the module is shown.

In the main form, information such as Files, Database, Signals, Features, Annotations, Analysis Type, Tables and Details are respectively seen in a list. In the Database list box, any database can be chosen and activated. If the active database changes, the other lists are updated. In the Tables list box, different analysis tables can be chosen and activated. If the active table changes, the other lists are updated. In the Signals list box, the signals existing in the EDF file chosen are listed. Here, the desired signals are chosen and included in the analysis or they are excluded from the analysis if they are not chosen. When a signal is chosen here, the features of this signal are listed in the Features and Annotations list boxes. In the Analysis Type section, it is determined whether the analysis to be performed is event-based or not. If it is event-based, a new analysis table is created by considering options such as which event, which period, and the epoch length. In the Detail section, the number of events and minimum and maximum duration of events are listed for each file.

In this module, features of the signals included in the analysis are extracted using DSP and statistical methods and are inserted into database table that is special to the analysis. The graphical user interface of the Feature extraction module is shown in 
                        Fig. 4.

The components which are used in the module are dynamically formed during the study. That is, in the analysis conducted, the components vary depending on the types of the parameters and signals.

The methods which were not available can be added to the software as DLL [43]. When the user intends to add a new feature to the module, the features are added to pattern table. The method, which can be programmed in any software development environment, can be created in the form of a DLL file through using the module's input and output parameters. The DLL file created is identified to the pattern table and inserted to the software. Thanks to this feature, the software does not remain dependent on a single software developer. In the future, it can be developed by different people using different software development environments.

A data file contains events. Events are called markers, scoring information or annotations in PSGMiner and they are managed visually by this module, using a dedicated user interface of the software. The annotations are imported from the file that includes PSG scoring information, which might have been scored either by a specialist or the autoscoring feature of the recording system of the PSG device. The information, such as the name of the event, when it started and how long it lasted, is stored in the file. In this module, the scoring data and signals data existing in PSG files are visually scored and necessary modifications can be made if needed. After modifications, these values, if desired, are exported to a file.

The graphical user interface of the module is shown in 
                        Fig. 5.

The software does not perform autoscoring. But, it is possible to get any parameter related to PSG scoring that does not already exist (SpO2 desaturation, sleep stage, apnea, etc.) with the program. In order to do this, first analysis routines needs to be created. Then, PSGMiner obtains the parameters through the ML feature of the software. To assist ML, one needs to feed the program with accurate examples of those events for training and then the program can start classification. There is an example of this procedure in in the help menu of the software and online.

As the PSGMiner is an expandable modular software, a simple DLL file (which requires little programming skills) for the required parameters could be added to the program for calculations and detection of the events.

In the future versions of the software, the program code will be modified so that it can calculate and detect the mentioned parameters and events without a need for creating DLL files.

This module is designed to exclude recording fragments, which include artifacts, from analysis. It relies on the annotations provided by the PSG device or manual annotations by the user. The software aims to provide additional power to ML by selecting the most convenient sections of a recording. This module also enables the user to filter different sleep stages for classification. The module provides a list of the number of epochs with artifacts, the types of artifacts, the number of epochs according to the sleep stages, and the artifact level (from 0 to 10) of epochs. Artifact level is a measure defined by the software, measuring the ratio of noisy data in a given epoch. With the artifact module, epochs are filtered out before the analysis stage, depending on the artifact types they have and their levels. Moreover, the artifact module can be used to filter the sleep stages, if needed.

The module does not conduct automatic recognition of artifacts but, as explained in Section 3.3, detection of artifacts could be done with the same method used for annotations.

The aim of the ML module is to classify, cluster, or find relationships using the desired features taken from the signals. There are many different ML methods available. Five ML algorithms from among popular ML methods are chosen and implemented in the software for classification [44].

The module can store each analysis table, learning model and its results by creating a special name. It can also compare these results statistically. Then, the results are written into a standard American Standard Code for Information Interchange (ASCII) file with space delimiters, a format compatible for importation of the results into most spreadsheet and statistical software programs (i.e. EXCEL, SPSS, SYSTAT, etc.). The learning models stored are intended to be used in a real-time system. In addition, when the user intends to use the data in software other than the module, the data can be exported into file formats such as attribute-relation file format (ARFF) so that they can be run by other software or imported into the database from these file formats.

The program also gives all the ML tables in the chosen database in turn to WEKA software as input data. The module can store the results as an exclusive file for analysis when desired and can make comparisons by running the algorithms as well as the parameters available in WEKA through batch processing.

The software requires a platform running Windows (7, 8 or 10), with a 32-bit or 64-bit operating system and MySQL server. The minimum system requirements are 70MB free hard disk space, 1GB RAM, and a 2.00GHz processor. Use of higher-specification systems will reduce the computing time required to perform analysis with PSG software.

@&#DISCUSSION AND CONCLUSION@&#

The created software is designed to help researchers in the area of sleep analysis by providing features to easily process and compare the complicated signals from PSG devices. Some of the important features of the software are as follows: the ease of use (without a need for users to write any code, which requires some degree of programming skills), the ability to handle large data sizes, compatibility with a variety of hardware records, modularity, and the ability to implement various feature extraction and classification algorithms.

One of the advantages of the software is that, unlike similar pieces of software which focus on a certain signal, PSGMiner can analyze a variety of physiological signals and events. At the same time, the software combines several modules including those for data analysis management, feature extraction, annotation, data artifacts and machine learning; no other software has all of these features in a single software suite.

To make an event-based analysis without using PSGMiner requires the following different processes: visual marking, the extraction of epoch data, feature extraction, and classification. Generally, existing available software handles only one or two of these processes, hence requiring one to use more than one piece of software to achieve a complete analysis. Using more than one piece of software in integration may also require data format conversion or script writing for particular applications. PSG Miner realizes all of these processes with a user-friendly interface in one single program.

The PSG analysis software makes it possible to choose the desired epoch length, channel and parameter. While similar software only handles epoch-based analysis, both epoch and event-based analysis are possible using PSGMiner. Desired events can be referenced and selected parts of the data can be analyzed. As a result of this, speed and classification performances are improved. The software not only runs on PSG recordings, but also on all electrophysiological recordings with various montages (sample rate, filter, channel count, etc.).

Due to the modular structure of the software, there are a number of options available to expand its capabilities, such as through the ability to add a new annotation, analysis type, or machine learning method or the ability to modify an existing machine learning module. Moreover, feature extraction methods that are not already available in the software can be added to the software as DLLs. Thanks to this feature, the software does not remain dependent on a single programing language. In the future, it can be developed by different people using different software development environments. New annotations can be added to the software using the edit annotations form. Furthermore, it is possible to export data as an ARFF file in order to use it in another piece of machine learning or statistics software.

This program complements the standard software that comes with PSG devices with a versatile platform that allows a user to design their own tests and analyses of the data for further investigation. For example, with this software one can look for correlations between different channels that are not tested normally, e.g. a correlation between an eye movement event and SpO2 channel.

A standard EEG signal identifies different stages of sleep, however, with the help of this program the signals can be processed in detail in order to detect correlations and changes in a particular parameter; this could have a number of applications. As seen in Fig. 3, when the event-based analysis function of the software is used, a part of the signal (duration could be set by the researcher) before, during and after the event could be analyzed and compared. As a result of such an investigation, one could predict an event in advance by means of established correlations. This could give an important advantage to the researchers or technicians conducting the sleep experiments, as they could be alerted to an oncoming critical event such as sleep apnea.

In order to investigate such a correlation with the standard PSG devices, the data from a PSG device would need to be fed into a piece of software such as MATLAB™ which would require some degree of computing skills. With this software, signal processing and correlations can be done easily.

The software simplifies the processing of polysomnographic signals for researchers and physicians that are not experts in computer programming. The software could also be used for educational purposes. It is planned that future versions of the software will have real-time module and autoscoring functions.

None declared.

@&#ACKNOWLEDGMENT@&#

This study was performed in a retrospective manner. All study data were obtained from the routine polysomnography archive of the Sleep Laboratory Unit at the Trakya University Education and Research Hospital. The Trakya University Faculty of Medicine Research Ethics Committee granted approval for the study (TUTF_BAEK_2015-83). I obtained written informed consent from all patients or from their next of kin.

Supplementary data associated with this article can be found in the online version at doi:10.1016/j.compbiomed.2016.03.023.


                     
                        
                           
                              Supplementary material
                           
                           
                        
                     
                  

@&#REFERENCES@&#

