@&#MAIN-TITLE@&#A minimum cost network flow model for the maximum covering and patrol routing problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Maximum Covering and Patrol Routing Problem modeled as a MCNFP.


                        
                        
                           
                           Benchmark instances solved two orders of magnitude faster than existing heuristics.


                        
                        
                           
                           Proof that the MCPRP is not NP-hard.


                        
                        
                           
                           Practical extensions can be modeled by a Multi-Commodity MCNFP.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Routing

Problem structuring

Minimum Cost Network Flow Problem

Multi-commodity

@&#ABSTRACT@&#


               
               
                  This paper shows how the maximum covering and patrol routing problem (MCPRP) can be modeled as a minimum cost network flow problem (MCNFP). Based on the MCNFP model, all available benchmark instances of the MCPRP can be solved to optimality in less than 0.4s per instance. It is furthermore shown that several practical additions to the MCPRP, such as different start and end locations of patrol cars and overlapping shift durations can be modeled by a multi-commodity minimum cost network flow model and solved to optimality in acceptable computational times given the sizes of practical instances.
               
            

@&#INTRODUCTION@&#

The maximum covering and patrol routing problem (MCPRP) was introduced by Keskin, Li, Steil, and Spiller (2012) and is used to assist traffic enforcement. A typical method for state troopers is to patrol “hot spots” which are certain locations on highways where particular types of crashes (e.g. crashes caused by speed or driving under influence) frequently occur (Anderson, 2007; Steil & Parrish, 2009). Furthermore, these hot spots are only active during certain time windows. Due to limited resources, not all active hot spots can be patrolled. Therefore, an optimization problem to route patrol cars in a way that maximizes hot spot coverage appears to be appropriate. Keskin et al. (2012) model the MCPRP as a variant of the orienteering problem Tsiligirides (1984); Vansteenwegen, Souffriau, and Van Oudheusden (2011), prove that their model is NP-hard, and present two heuristics, a local search heuristic and a tabu search heuristic which determine good quality solutions in short periods of time. The authors claim that a heuristic solution instead of an exact technique is preferred for their model since it is important for the practitioner to obtain a good solution quickly.

Having an efficient and effective solution method to solve the MCPRP is useful since the problem often appears as a sub problem in larger problems. Li and Keskin (2013) consider a bi-objective multi-period patrol routing problem. The multi-period aspect appears through the introduction of intermediate temporary stations in the patrol routes. Li and Keskin develop a heuristic that exploits the hierarchical structure of the problem by decomposing the problem in a location and a routing problem. An effective solution method for the MCPRP can be incorporated in such a framework to solve the routing problem more efficiently. If an orienteering problem approach is taken, this is similar to the orienteering problem with hotel selection (OPHS) of Divsalar, Vansteenwegen, and Cattrysse (2013); Divsalar, Vansteenwegen, Sörensen, and Cattrysse (2014) which considers a multi-period tourist trip planner application. Very recently, Çapar, Keskin, and Rubin (2015) reconsidered the MIP formulation for the MCPRP and also used a set of domination rules to greatly simplify the MIP formulation. The new MIP formulation is able to solve their set of benchmark instances to optimality within reasonable calculation times. It also allows several extensions to be tested, such as, letting troopers start from their homes, allowing delayed starts and intra-day diversion.

Other patrol routing problems that require rerouting when incidents in the network occur during the execution of a patrol routing scheme are considered by Moonen, Cattrysse, Oudheusden, (2008), Takamiya and Watanabe (2011), Chen (2012), and Portugal and Rocha (2013). These problems can possibly also benefit from a fast solution method for rerouting patrol cars.

Modeling the MCPRP as a minimum cost network flow problem (MCNFP) (Winston, 1987), which is known to be solvable in polynomial time (Orlin, 1997) would be a major improvement over existing models in the literature. This is an example of exploiting the network structure of a problem to gain computational efficiency and it underscores the importance of selecting an appropriate model for a particular problem. In this particular case, the network structure is uncovered in the following sections step by step. For problems where the network structure is not obvious, a systematic approach such as the netform concept described by Glover, Klingman, and Phillips (1990) can be used to explicit this structure.

Several other patrol routing applications, each with their own specific constraints can be found in the literature. Some of the more recent ones are Lou, Yin, and Lawphongpanich (2011), Willemse and Joubert (2011), and Chircop, Surendonk, van den Briel, and Walsh (2013). These applications differ substantially from the basic MCPRP as described in Keskin et al. (2012) which prohibits a straightforward application of the proposed MCNFP reformulation. Because of the binary nature of the “hot spot profits”, these applications share more characteristics with the orienteering problem or the rural postman problem (Eiselt, Gendreau, Laporte, & Laport, 1995) than with the MCNFP.

The remainder of this paper is structured as follows. In Section 2, we show how the original MCPRP problem can be modeled as an MCNFP. In Section 3, we discuss the results of the computational experiments applied on the instances of Keskin et al. (2012). In Section 4, we show how practical extensions to the MCPRP can be modeled by adding a multi-commodity aspect to the MCNFP (Tomlin, 1966) and discuss the results of some computational experiments on artificial data sets in Section 5. Finally, in Section 6, we provide our conclusions and recommendations for future research.

Given a set of patrol cars and a set of hot spots, the objective of the MCPRP consists of finding a set of routes for the patrol cars that maximizes the time spent in hot spot locations. The travel times between hot spots are constant and known beforehand. Each hot spot is only active during certain time windows. All cars have the same shift start and end times and the same start and end locations. In addition, multiple cars being present in the same hot spot at the same time does not increase the objective function (Keskin et al., 2012). A car can enter and leave a hot spot at any given time but only collects “gain” for the duration that a car remains in the hot spot within the hot spot’s time window. Fig. 1
                      represents a possible routing of two patrol cars in a graphical way. Both patrol cars are allowed to leave the depot at time 0 and need to return at the end of their shift to the depot. The horizontal dotted lines represent the fact that a car can arrive at a hot spot before the hot spot’s time window is open. This time does not provide any gain and is called dead time. The angled dotted lines represent the actual movement of the cars between hot spots. In the basic MCPRP, when making abstraction of the underlying road network, the travel times between hot spots are assumed to be constant and subject to the triangle inequality. Additionally, the gain per minute can be different for each hot spot but is assumed to be constant for the full duration of the hot spot’s time window.

The transformation of the MCPRP into a minimum cost network flow problem relies on the fact that a lot of solutions of the MCPRP are dominated. In an optimal solution, a patrol car will always stay at its current hot spot until the end of its time window unless another hot spot becomes available earlier and a larger gain can be obtained in the latter hot spot, taking the travel time between hot spots into account.

Thus, patrol cars will enter a hot spot i either at the opening of its time window (t
                        
                           o, i
                        ) or at the closing time of another hot spot j’s time window plus the travel time between both hot spots, denoted as t
                        
                           a, ji
                        . Similarly, a hot spot i will only be exited at the closing of its time window (t
                        
                           c, i
                        ) or at the opening of another hot spot j’s time window minus the travel time between both hot spots, denoted as t
                        
                           b, ij
                        . This results in splitting each hot spot’s time window i into segments, referred to as time sections. The start and end points of the time sections of a hot spot i are defined by t
                        
                           o, i
                        , the t
                        
                           b, ij
                        ’s, the t
                        
                           a, ji
                        ’s and t
                        
                           c, i
                        . From this point on, for the sake of brevity, we will refer to a time section as a section.

To further clarify the process of identifying sections required to optimize the problem, consider the example shown in Fig. 2
                        (a). The network consists of three hot spots with overlapping time windows. In order to identify the sections, a forward and a backward pass over all hot spots is executed. Fig. 2(b) shows the forward pass. From every hot spot’s end time (including the source), the arrival time at any other hot spot (including the sink) is determined, or in other words, all t
                        
                           a, ji
                        ’s are determined. This process is depicted by the dotted lines. The gray lines mean that the end time of the previous hot spot’s time window plus the travel time is smaller than the start time of the next hot spot’s time window. Likewise, the red dotted lines mean that the possible arrival time in the next hot spot falls outside the hot spot’s time window. As a consequence, these ”dotted” relationships will not create additional sections. However, the green dotted lines emanating from hot spot 2 will cause splits in the time windows of hot spots 1 and 3. Fig. 2(c) shows the backward pass which determines all t
                        
                           b, ij
                        ’s. Ultimately, Fig. 2(d) shows all identified sections.

To reiterate, we define a section as a time segment of the hot spot’s time window. It is characterized by the fact that, in an optimal solution, a car can only enter a section at the start of the section’s time window and only leave it at the end of the section’s time window. We formulate this domination rule as the following lemma:

                           Lemma 1
                           
                              Any routing where a car moves from a section S before the end time of the section to another section T will be dominated by either the solution where the car leaves at the end time of section S or the solution where the car did not enter section S and immediately entered section T.

A proof of this lemma can be found in Appendix A
                     

Without loss of generality, the patrol routing problem is then redefined as: “Find a set of routes for the patrol cars that maximizes the time spent (or gain) at the sections under the additional constraint that a section can only be visited by at most one car. It should be noted, however, that it is still physically possible for two patrol cars to be present at the same hot spot location at the same time. However, this implies that one of the cars is waiting to move to another hot spot or arrived too early at the current hot spot. This physical situation will be modeled by one car actually visiting the section, collecting the gain, and one car using a travel arc that physically passes by this section while moving from or to another hot spot, not collecting the gain and thus not visiting the section.

We will now first define the general Minimum Cost Network Flow Problem (MCNFP) and then we will explain how these “sections” can be used to model the Maximum Covering Patrol Routing Problem (MCPRP) as an MCNFP.

The Minimum Cost Network Flow Problem consists of finding the cheapest possible way of sending a given amount of flow through a network, where a cost and capacity is associated with each arc in the network. It can be modeled by the following linear program, where fij
                         represents the flow from node i to node j, aij
                         represents the cost of moving one unit of flow over arc ij, cij
                         represents the capacity of arc ij and D represents the required flow

                           
                              (1)
                              
                                 
                                    
                                       
                                          
                                             Min
                                             
                                                ∑
                                                i
                                             
                                             
                                                ∑
                                                j
                                             
                                             
                                                a
                                                
                                                   i
                                                   j
                                                
                                             
                                             
                                                f
                                                
                                                   i
                                                   j
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                                i
                                             
                                             
                                                f
                                                
                                                   i
                                                   j
                                                
                                             
                                             =
                                             
                                                ∑
                                                k
                                             
                                             
                                                f
                                                
                                                   j
                                                   k
                                                
                                             
                                             
                                             ∀
                                             
                                             j
                                             ≠
                                             source
                                             ,
                                             sink
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                                i
                                             
                                             
                                                f
                                                
                                                   source
                                                   ,
                                                   i
                                                
                                             
                                             =
                                             
                                                ∑
                                                i
                                             
                                             
                                                f
                                                
                                                   i
                                                   ,
                                                   sink
                                                
                                             
                                             =
                                             D
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       
                                          
                                             
                                                f
                                                
                                                   i
                                                   j
                                                
                                             
                                             ≤
                                             
                                                c
                                                
                                                   i
                                                   j
                                                
                                             
                                             
                                             ∀
                                             
                                             i
                                             ,
                                             j
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    
                                       
                                          
                                             
                                                f
                                                
                                                   i
                                                   j
                                                
                                             
                                             ∈
                                             
                                                R
                                                
                                                   ≥
                                                   0
                                                
                                             
                                             
                                             ∀
                                             
                                             i
                                             ,
                                             j
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        Constraint set (2) ensures that an equal amount of flow leaves a given node as enters it (3) ensures that D amount of flow leaves the source and enters the sink (4) ensures that the flow through an arc never exceeds the capacity of the arc and (5) limits the flow variables to the domain of non-negative real numbers 
                           R
                        . The MCNFP contains the integrality property which states that when all supply and demand values (D) and all capacity constraints are integer, all basic solutions are integral (Winston, 1987).

In order to transform the MCPRP into the MCNFP, it should be noted that the graph of the MCNFP will be based on the sections defined above and will be an abstraction of the road network. The nodes represent the start or end of patrolling a certain hot spot during a given time and thus the start or end of a section. The arcs represent traveling from one section to another section or represent the actual patrolling of a section.


                        fij
                         represents the number of patrol cars going from node i to node j.


                        aij
                         represents the gain to be had by traveling from node i to node j. For all travel arcs this gain equals zero and for the section arcs, this gain equals the profit to be made at that section.


                        cij
                         represents the capacity of the arc and equals 1 for all arcs, except for the arc going from the source to the sink. The capacity for most arcs is set to 1 because only a single patrol car is allowed to enter a given section and thus collect the profit from that hot spot for the section’s duration of time. The arc going from the source to the sink does not have a capacity constraint and represents cars that do not pass through the physical network but remain at the depot. Since the arcs do not represent physical links, the capacity is unrelated to the actual traffic capacity of a road connection.


                        D equals the number of patrol cars in the network originating from a single source depot and ending in a single sink depot. Obviously, the source depot can equal the sink depot.

Consider again the example from Fig. 2 where nine sections were identified. In Fig. 3, it is shown that for each section an arc with an in-node and an out-node is defined. Each such arc has a capacity of 1 and has an aij
                         equal to minus the duration multiplied by the “gain per minute” for that section. Since the MCNFP minimizes total cost and the gains per section visit are negative, the total gain will be maximized. Section 9 is not included since a patrol car visiting this time section can never get back to the depot on time. It is possible to retain Section 9 in the model. The optimum will still be found. However, since it is easy to recognize that Section 9 cannot be part of a feasible solution during the section identification phase, it is equally easy to disregard it and, as a consequence, reduce the problem size.

Next, the travel arcs going into the in-nodes and out of the out-nodes are defined (depicted in Fig. 4
                        ). The travel arcs represent only feasible moves i.e. the arc going from the out-node i of section I to the in-node j of section J can only be added if the closing time of section I plus the travel time of section I to section J is smaller than or equal to the opening time of the time window at section J. These arcs going into the in-nodes and out of the out-nodes have a capacity of one and a cost of zero. Again, it should be noted that it is still physically possible for two cars to be present in the same hot spot at the same time, but this is modeled by having one of the cars assigned to a travel arc that passes by the hot spot location on the physical network. For example, a (non-optimal) feasible solution with two patrol cars to the network in Fig. 4 could be one car traveling from the source to S
                        1 and then to the sink. And another traveling from the source to S
                        4, then to S
                        2, and lastly to the sink. In this case, where S
                        1 and S
                        2 are physically in the same location, the arc going from the out-node of S
                        4 to the in-node of S
                        2 (shown in red) has to be interpreted by the trooper or dispatcher as either “waiting at the end of S
                        4”, “traveling slower” or “arriving at the start of S
                        1, but not incurring the profit of S
                        1”. The profit of S
                        1 is collected by the first car. No arcs that represent a move backward in time are added. Lastly, an uncapacitated arc connecting the source and the sink is added to allow for solutions where one or more cars remain at the depot.

Note that for a problem with n hot spots, one source, and one sink, each hot spot’s time window will at maximum be split into 
                           
                              n
                              +
                              2
                           
                         sections. Therefore, modeling an MCPRP with n hot spots results in an MCNFP with a maximum of 
                           
                              n
                              *
                              (
                              n
                              +
                              2
                              )
                           
                         sections. In the above example, we end up with considerably less, since many of the combinations result in “red” or “gray” dotted lines which do not create additional sections.

Since the MCNFP is solvable in polynomial time and the transformation of the MCPRP into the MCNFP entails only a polynomial increase in the number of nodes, the MCPRP is solvable in polynomial time. This means that since Keskin et al. (2012) prove that their MIP model for the MCPRP is NP-hard, they have unfortunately chosen to utilize an NP-hard model to solve what we show to be an “easy” problem, belonging to P.

The model as presented by Keskin et al. (2012) in some cases fails to find feasible solutions because they make use of a big M variable which actually is too small. Their MIP model is presented in algebraic equations (6)–(22) where sik
                         and fik
                         represent respectively the start and finish time of a service of a hot spot i by a car k. tij
                         equals the travel time of hot spot i to hot spot j and the binary variable xijk
                         equals 1 if car k travels from hot spot j to hot spot i and zero otherwise. si
                         and li
                         equal respectively the earliest service time possible of hot spot i and the latest service time possible of hot spot i. Keskin et al. define the big M variable Mij
                         as 
                           
                              
                                 M
                                 
                                    i
                                    j
                                 
                              
                              =
                              max
                              
                              
                                 (
                                 
                                 
                                    l
                                    i
                                 
                                 +
                                 
                                    t
                                    
                                       i
                                       j
                                    
                                 
                                 −
                                 
                                    e
                                    j
                                 
                                 
                                 ,
                                 
                                 0
                                 
                                 )
                              
                           
                        . Additional decision variables yik, uikg
                         are introduced to avoid double counting the profit when multiple cars visit the same hot spot at the same time

                           
                              (6)
                              
                                 
                                    
                                       
                                          
                                             Max
                                             
                                                ∑
                                                
                                                   i
                                                   ∈
                                                   N
                                                
                                             
                                             
                                                ∑
                                                
                                                   k
                                                   ∈
                                                   K
                                                
                                             
                                             
                                                (
                                                
                                                   f
                                                   
                                                      i
                                                      k
                                                   
                                                
                                                −
                                                
                                                   s
                                                   
                                                      i
                                                      k
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       
                                          
                                             
                                                f
                                                
                                                   i
                                                   k
                                                
                                             
                                             +
                                             
                                                t
                                                
                                                   i
                                                   j
                                                
                                             
                                             −
                                             
                                                s
                                                
                                                   j
                                                   k
                                                
                                             
                                             ≤
                                             
                                                (
                                                1
                                                −
                                                
                                                   x
                                                   
                                                      i
                                                      j
                                                      k
                                                   
                                                
                                                )
                                             
                                             
                                                M
                                                
                                                   i
                                                   j
                                                
                                             
                                             
                                             ∀
                                             k
                                             ∈
                                             
                                             K
                                             ;
                                             ∀
                                             
                                                (
                                                i
                                                ,
                                                j
                                                )
                                             
                                             ∈
                                             ϵ
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       
                                          
                                             
                                                e
                                                i
                                             
                                             
                                                ∑
                                                
                                                   j
                                                   ∈
                                                   
                                                      Δ
                                                      +
                                                   
                                                   
                                                      (
                                                      i
                                                      )
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   i
                                                   j
                                                   k
                                                
                                             
                                             ≤
                                             
                                                s
                                                
                                                   i
                                                   k
                                                
                                             
                                             
                                             ∀
                                             k
                                             ∈
                                             
                                             K
                                             ;
                                             ∀
                                             i
                                             ∈
                                             
                                             V
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       
                                          
                                             
                                                l
                                                i
                                             
                                             
                                                ∑
                                                
                                                   j
                                                   ∈
                                                   
                                                      Δ
                                                      +
                                                   
                                                   
                                                      (
                                                      i
                                                      )
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   i
                                                   j
                                                   k
                                                
                                             
                                             ≥
                                             
                                                f
                                                
                                                   i
                                                   k
                                                
                                             
                                             
                                             ∀
                                             k
                                             ∈
                                             
                                             K
                                             ;
                                             ∀
                                             i
                                             ∈
                                             
                                             V
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       
                                          
                                             
                                                s
                                                
                                                   i
                                                   k
                                                
                                             
                                             ≤
                                             
                                                f
                                                
                                                   i
                                                   k
                                                
                                             
                                             
                                             ∀
                                             k
                                             ∈
                                             
                                             K
                                             ;
                                             ∀
                                             i
                                             ∈
                                             
                                             V
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                                
                                                   j
                                                   ∈
                                                   
                                                      Δ
                                                      +
                                                   
                                                   
                                                      (
                                                      0
                                                      )
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   0
                                                   j
                                                   k
                                                
                                             
                                             =
                                             1
                                             
                                             ∀
                                             k
                                             ∈
                                             
                                             K
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   ∈
                                                   
                                                      Δ
                                                      −
                                                   
                                                   
                                                      (
                                                      j
                                                      )
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   i
                                                   j
                                                   k
                                                
                                             
                                             =
                                             
                                                ∑
                                                
                                                   i
                                                   ∈
                                                   
                                                      Δ
                                                      +
                                                   
                                                   
                                                      (
                                                      j
                                                      )
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   j
                                                   i
                                                   k
                                                
                                             
                                             
                                             ∀
                                             k
                                             ∈
                                             
                                             K
                                             ;
                                             ∀
                                             j
                                             ∈
                                             
                                             N
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   ∈
                                                   
                                                      Δ
                                                      −
                                                   
                                                   
                                                      (
                                                      n
                                                      +
                                                      1
                                                      )
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   i
                                                   ,
                                                   n
                                                   +
                                                   1
                                                   ,
                                                   k
                                                
                                             
                                             =
                                             1
                                             
                                             ∀
                                             k
                                             ∈
                                             
                                             K
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (14)
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                                
                                                   j
                                                   ∈
                                                   
                                                      Δ
                                                      +
                                                   
                                                   
                                                      (
                                                      i
                                                      )
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   i
                                                   j
                                                   k
                                                
                                             
                                             =
                                             
                                                y
                                                
                                                   i
                                                   k
                                                
                                             
                                             
                                             ∀
                                             k
                                             ∈
                                             
                                             K
                                             ;
                                             ∀
                                             i
                                             ∈
                                             
                                             N
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (15)
                              
                                 
                                    
                                       
                                          
                                             
                                                y
                                                
                                                   0
                                                   ,
                                                   k
                                                
                                             
                                             =
                                             
                                                y
                                                
                                                   n
                                                   +
                                                   1
                                                   ,
                                                   k
                                                
                                             
                                             =
                                             1
                                             
                                             ∀
                                             k
                                             ∈
                                             
                                             K
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (16)
                              
                                 
                                    
                                       
                                          
                                             
                                                u
                                                
                                                   i
                                                   k
                                                   g
                                                
                                             
                                             +
                                             
                                                u
                                                
                                                   i
                                                   g
                                                   k
                                                
                                             
                                             ≤
                                             
                                                y
                                                
                                                   i
                                                   k
                                                
                                             
                                             
                                             ∀
                                             i
                                             ∈
                                             
                                             V
                                             ;
                                             ∀
                                             k
                                             ,
                                             g
                                             ∈
                                             
                                             K
                                             ,
                                             g
                                             
                                             >
                                             
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (17)
                              
                                 
                                    
                                       
                                          
                                             
                                                u
                                                
                                                   i
                                                   k
                                                   g
                                                
                                             
                                             +
                                             
                                                u
                                                
                                                   i
                                                   g
                                                   k
                                                
                                             
                                             ≤
                                             
                                                y
                                                
                                                   i
                                                   g
                                                
                                             
                                             
                                             ∀
                                             i
                                             ∈
                                             
                                             V
                                             ;
                                             ∀
                                             k
                                             ,
                                             g
                                             ∈
                                             
                                             K
                                             ,
                                             g
                                             
                                             >
                                             
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (18)
                              
                                 
                                    
                                       
                                          
                                             
                                                u
                                                
                                                   i
                                                   k
                                                   g
                                                
                                             
                                             +
                                             
                                                u
                                                
                                                   i
                                                   g
                                                   k
                                                
                                             
                                             ≥
                                             
                                                y
                                                
                                                   i
                                                   k
                                                
                                             
                                             +
                                             
                                                y
                                                
                                                   i
                                                   g
                                                
                                             
                                             −
                                             1
                                             
                                             ∀
                                             i
                                             ∈
                                             
                                             V
                                             ;
                                             ∀
                                             k
                                             ,
                                             g
                                             ∈
                                             
                                             K
                                             ,
                                             g
                                             
                                             >
                                             
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (19)
                              
                                 
                                    
                                       
                                          
                                             
                                                f
                                                
                                                   i
                                                   k
                                                
                                             
                                             −
                                             
                                                s
                                                
                                                   i
                                                   g
                                                
                                             
                                             −
                                             M
                                             
                                                (
                                                1
                                                −
                                                
                                                   u
                                                   
                                                      i
                                                      k
                                                      g
                                                   
                                                
                                                )
                                             
                                             ≤
                                             0
                                             
                                             ∀
                                             i
                                             ∈
                                             
                                             V
                                             ;
                                             ∀
                                             k
                                             ,
                                             g
                                             ∈
                                             
                                             K
                                             ,
                                             g
                                             
                                             >
                                             
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (20)
                              
                                 
                                    
                                       
                                          
                                             
                                                f
                                                
                                                   i
                                                   g
                                                
                                             
                                             −
                                             
                                                s
                                                
                                                   i
                                                   k
                                                
                                             
                                             −
                                             M
                                             
                                                (
                                                1
                                                −
                                                
                                                   u
                                                   
                                                      i
                                                      g
                                                      k
                                                   
                                                
                                                )
                                             
                                             ≤
                                             0
                                             
                                             ∀
                                             i
                                             ∈
                                             
                                             V
                                             ;
                                             ∀
                                             k
                                             ,
                                             g
                                             ∈
                                             
                                             K
                                             ,
                                             g
                                             
                                             >
                                             
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (21)
                              
                                 
                                    
                                       
                                          
                                             
                                                x
                                                
                                                   i
                                                   j
                                                   k
                                                
                                             
                                             ,
                                             
                                                y
                                                
                                                   i
                                                   k
                                                
                                             
                                             ,
                                             
                                                u
                                                
                                                   i
                                                   k
                                                   g
                                                
                                             
                                             ∈
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                             
                                             ∀
                                             i
                                             ∈
                                             
                                             V
                                             ;
                                             ∀
                                             k
                                             ,
                                             g
                                             ∈
                                             
                                             K
                                             ,
                                             g
                                             
                                             >
                                             
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (22)
                              
                                 
                                    
                                       
                                          
                                             
                                                s
                                                
                                                   i
                                                   k
                                                
                                             
                                             ,
                                             
                                                f
                                                
                                                   i
                                                   k
                                                
                                             
                                             ≥
                                             0
                                             
                                             ∀
                                             i
                                             ∈
                                             
                                             V
                                             ;
                                             ∀
                                             k
                                             ∈
                                             
                                             K
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        This model is too restrictive. Indeed, consider a solution where hot spot H is not visited. Then 
                           
                              
                                 ∑
                                 
                                    j
                                    ∈
                                    
                                       Δ
                                       +
                                    
                                    
                                       (
                                       H
                                       )
                                    
                                 
                              
                              
                                 x
                                 
                                    H
                                    j
                                    k
                                 
                              
                           
                         equals zero for all k, which results in sHk
                         ≥ 0 and fHk
                         ≤ 0. This, together with (10), means that sHk
                         and fHk
                         equal zero for all k. If these two results are entered in (7), for j equals H, we obtain:

                           
                              (23)
                              
                                 
                                    
                                       
                                          
                                             
                                                f
                                                
                                                   i
                                                   k
                                                
                                             
                                             +
                                             
                                                t
                                                
                                                   i
                                                   H
                                                
                                             
                                             −
                                             0
                                             ≤
                                             
                                                (
                                                1
                                                −
                                                0
                                                )
                                             
                                             
                                                M
                                                
                                                   i
                                                   j
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (24)
                              
                                 
                                    
                                       
                                          
                                             
                                                f
                                                
                                                   i
                                                   k
                                                
                                             
                                             +
                                             
                                                t
                                                
                                                   i
                                                   H
                                                
                                             
                                             −
                                             0
                                             ≤
                                             
                                                l
                                                i
                                             
                                             +
                                             
                                                t
                                                
                                                   i
                                                   H
                                                
                                             
                                             −
                                             
                                                e
                                                H
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (25)
                              
                                 
                                    
                                       
                                          
                                             
                                                f
                                                
                                                   i
                                                   k
                                                
                                             
                                             ≤
                                             
                                                l
                                                i
                                             
                                             −
                                             
                                                e
                                                H
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        It implies that the latest possible time any arbitrary hot spot i can be serviced is dependent on the earliest start time of any hot spot H which is not visited in the solution. This problem can be solved by setting 
                           
                              
                                 M
                                 
                                    i
                                    j
                                 
                              
                              =
                              
                                 l
                                 i
                              
                              +
                              
                                 t
                                 
                                    i
                                    j
                                 
                              
                           
                        .

That the profit per minute is considered the same per hot spot is another drawback of the mathematical model of Keskin et al. Therefore, they do not differentiate between the accident and/or citation severity of hot spots. Keskin et al. (2012) do acknowledge the importance of assigning different weights to hot spots since they perform a set of experiments using a local search heuristic while considering different weights between hot spots. However, the above mathematical model cannot easily be modified to include different gains per minute. Since, if different gains per minute are included, the model has to allow a patrol car to revisit a given hot spot. Revisits have to be allowed, since in some cases where different gains per minute are present, the optimal solution requires revisiting a hot spot. Consider Fig. 5
                         where there is one patrol car and two hot spots. Suppose, without loss of generality, that all distances between the hot spots equal zero, hot spot A is active from time zero until time 480 with a gain per minute of 1, and hot spot B is active from time 200 until time 220 with a gain per minute of 10. Clearly the optimal solution would be to move to hot spot A from time 0 until time 200, then move to hot spot B from time 200 until time 220 and then move back to hot spot A from time 220 until time 480 resulting in a total gain of 660 minutes. But this is not allowed by the mathematical model of Keskin et al. because a single car can visit a hot spot only a single time since for each combination of hot spot and car, only a single sik
                         and fik
                         are defined. This results in their model producing an ”optimal” solution of only 480 minutes. In contrast, for the MCNFP formulation, this poses no additional difficulty as it only entails changing the aij
                         values for the relevant hot spots. The domination rule that allows for the transformation of the MCPRP into the MCNFP remains valid for different gains per minute for the different hot spots. Thus, the MCNFP will return an optimal solution of 660 minutes for the example in Fig. 5.

The instances of Keskin et al. (2012) consist of 60 random instances of 10, 20 and 40 hot spots and 27 real-life instances of 6–27 hot spots. All instances were tested with 3–8 cars. For the randomized instances, we are not able to compare the objective function values directly with Keskin et al. since in their paper they presented their results relative to the optimal or best solution found for their formulation by Cplex. The Local Search/Tabu Search (LS/TS) heuristic of Keskin et al. reaches the optimal or best solution found by Cplex in 96,7 percent, 61,7 percent and 20,8 percent of the 10, 20 and 40 hot spot instances respectively. The LS/TS heuristic requires up to 15 seconds of computation time for the largest instances on a Dell Poweredge 6850 with four dual-core 3.66 gigahertz Xeon processors and 8 gigabyte of memory.


                     Table 1
                      summarizes the average solution times to reach the optimal solution for the randomized instances with 3–8 cars using the MCNFP formulation on an Intel Core Duo E8300 machine with a single dual-core 2.83 gigahertz processor and 4 gigabyte of RAM. The minimum cost network flow problems are solved using the network simplex algorithm implementation of the LEMON C++ library (Király & Kovács, 2012). It clearly shows that the MCNFP approach including the section identification preprocessing is at least two orders of magnitude faster than the local search/tabu search approach, while reaching the optimal solution for all instances.


                     Table 2
                      shows the comparison of the Local Search/Tabu Search heuristic of Keskin et al. with the optimal MCNFP approach for the real-life instances of Keskin et al. Gain refers to the total amount of minutes the patrol cars are present at a hot spot, TW(percent) is the total gain divided by the sum of the time windows, t
                     travel equals the total travel time of the solution, t
                     dead equals the total time that patrol cars are at a hot spot when the time window is still closed and t
                     comp equals the computation time required to solve the MCNFP using the network simplex algorithm of the LEMON C++ library, including the preprocessing time. Optimal values are indicated in bold. The cars column shows the number of cars available for the instance. If the number is followed by a plus sign, it signifies that our experiments using the MCNFP formulation showed that adding more cars does not increase the objective function. It only results in adding more dead time. From the table we can conclude that, to the merit of Keskin et al., their LS/TS heuristic is able to find the optimal solution in 23 of the 27 instances. In the four instances where the LS/TS approach was not able to find the optimal solution, the average gap equals 4.5 percent. Çapar et al. (2015) mention to be able to also solve all instances to optimality using their improved MIP formulation. A total time of 5163 seconds is required to solve all instances on a powerful 3.6 gigahertz Intel Xeon Processor with 64 gigabyte RAM. In comparison, the MCNFP approach only requires a total time of 14.54 seconds to solve all instances to optimality. In addition, the approach of Çapar et al. (2015) requires all hot spots to have the same priority, i.e., no differentiation between hot spot severity is possible.

Although the MCNFP modeling is able to generate many useful insights for policy decision makers such as the number of required patrol cars or the most important hot spots, several other practical extensions cannot be modeled using the MCNFP model. An important extension to the patrol routing problem considers the case where not all patrol cars share the same start and end location and/or do not share the same shift start and end times. The reason for introducing overlapping shifts for patrol cars is that when you have, for instance, just three non-overlapping shifts during a day, around shift change times, all patrol cars are either returning to the depot or on their way for their first hot spot, resulting in no hot spots being covered. This could be solved by overlapping shifts.

Another practical extension involves the introduction of multiple depots. These can be actual depots, temporary stations, as considered by Li and Keskin (2013), or even the trooper’s homes if they are allowed to start or end their shift from their homes. Moonen, Cattrysse, Oudheusden, (2008) consider a multi-depot case where patrol units are allocated to zones (depots) but are allowed to respond to calls in neighboring zones. Such practical problems can most likely be solved more efficiently by modeling certain sub-problems as a multi-depot MCNFP.

Simply setting multiple sources and sinks and solving it as an MCNFP could result in infeasible solutions where a specific patrol car does not end up in its designated sink. Ending up in the wrong sink can correspond to ending up in a different end location or can correspond to finishing the shift too early or too late. However, these extensions can be modeled by adopting the multi-commodity minimum cost network flow problem (MCMCNFP). The MCMCNFP aims to route a set of distinct commodity flows through a network. The MCMCNFP is proven to be NP-hard (Even, Itai, & Shamir, 1976). Nevertheless, extensive research has been conducted and good algorithms are available (Aloise & Ribeiro, 2010; Kamath, 1995; Mcbride, 1998).

The MCMCNFP can be modeled by the following mixed integer program where 
                        
                           f
                           
                              i
                              j
                           
                           k
                        
                      represents the flow of commodity k from node i to node j, 
                        
                           a
                           
                              i
                              j
                           
                           k
                        
                      represents the cost of moving one unit of commodity k flow over arc ij, cij
                      represents the capacity of arc ij and Dk
                      represents the required flow of commodity k with the origin ok
                      and destination dk
                     ,

                        
                           (26)
                           
                              
                                 
                                    
                                       
                                          Min
                                          
                                             ∑
                                             k
                                          
                                          
                                             ∑
                                             i
                                          
                                          
                                             ∑
                                             j
                                          
                                          
                                             a
                                             
                                                i
                                                j
                                             
                                             k
                                          
                                          
                                             f
                                             
                                                i
                                                j
                                             
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (27)
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             k
                                          
                                          
                                             f
                                             
                                                i
                                                j
                                             
                                             k
                                          
                                          ≤
                                          
                                             c
                                             
                                                i
                                                j
                                             
                                          
                                          
                                          ∀
                                          
                                          i,j
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (28)
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             j
                                          
                                          
                                             f
                                             
                                                j
                                                i
                                             
                                             k
                                          
                                          =
                                          
                                             ∑
                                             j
                                          
                                          
                                             f
                                             
                                                i
                                                j
                                             
                                             k
                                          
                                          
                                          ∀
                                          
                                          k,
                                          ∀
                                          
                                          i
                                          ≠
                                          o,d
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (29)
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             i
                                          
                                          
                                             f
                                             
                                                
                                                   o
                                                   k
                                                
                                                ,
                                                i
                                             
                                          
                                          =
                                          
                                             ∑
                                             i
                                          
                                          
                                             f
                                             
                                                i
                                                ,
                                                
                                                   d
                                                   k
                                                
                                             
                                          
                                          =
                                          
                                             D
                                             k
                                          
                                          
                                          ∀
                                          
                                          k
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (30)
                           
                              
                                 
                                    
                                       
                                          
                                             f
                                             
                                                i
                                                j
                                             
                                             k
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                          
                                          ∀
                                          
                                          i,j,k
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

Constraint (27) ensures that the flow over an arc never exceeds the arc’s capacity, (28) ensures that all flow of a given commodity entering a node, also exits that node and constraint (29) ensures that the commodity flows leave and enter the correct origin and destination locations. And lastly, since the MCMCNFP does not exhibit the integrality property, constraint (30) guarantees binary flow.

The MCPRP with overlapping shifts and different start/end locations for the patrol cars can be modeled as a multi-commodity network flow problem by splitting the hot spot time windows in sections as in the single commodity version above. The multi-commodity aspect appears by assigning each unique start/end location and shift combination to a separate commodity k. Consider a network with 4 cars. Car 1 is stationed at depot X and is subject to shift schedule A. Car 2 is stationed at depot Y and is subject to shift schedule B. Cars 3 and 4 are also stationed at depot Y and are subject to shift schedule C. In this case, there are three distinct commodities (k = 3) and D
                     1 and D
                     2 equal one and D
                     3 equals 2.

The MIP presented above (26)–(30) was implemented in Cplex version 12.6 and tested on instances of practical size to test whether solution times remain tractable for the practitioner. The objective of these experiments is not to determine whether a particular instance is served better by utilizing multiple depots or adopting an overlapping shift schedule. The objective of these experiments is solely to evaluate whether the MCMCNFP can be solved to optimality using off-the-shelf commercial software for instances of practical size.

The multi-commodity instances were adapted from the single commodity instances of Keskin et al. by adjusting each car’s start/end location and shift duration. In the original instances, each car’s start/end location is location 0 and each car’s shift lasts from minute 0 to minute 480. The multi-commodity instances are adapted as follows. Each instance contains two start/end locations: the original depot (D1) and a new depot location (D2) which is determined by ordering all locations from nearest to furthest from the original depot location and selecting the middle one (if a tie, the furthest is chosen). The shifts are adjusted as summarized in Table 3. As can be seen from the table, the patrol cars are assigned shifts that start an hour earlier, on the same time, half an hour later, or an hour later than the original shifts. In the case of five cars for example, car 1 is stationed at the original depot and its shift lasts from minute 
                        −
                     60 until minute 420; car 2 is stationed at the new depot and its shift is the same as car 1; car 3 is stationed at the original depot and its shift goes from minute 0 until minute 480, etc.


                     Tables 4–7
                     
                     
                     
                      show the solution times and objective function values for all hot spot and car combinations using Cplex version 12.6. The maximum solution times that Cplex required was 660.45 seconds for one of the 20 instances with 40 hot spot and 7 cars and 26.80 seconds for one of the real-life instances. We conclude from this table that the MCMCNFP solution times for these instance sizes, although considerably higher than the MCNFP solution times, remain tractable while offering much greater flexibility in supporting policy decisions. Moreover, these computation times are in the same order of magnitude as the computation times required by the improved MIP model of Çapar et al. (2015). However, our approach is executed on a much less powerful computer system.

In order to test the computational boundaries of this approach two additional test cases were constructed consisting of 100 and 500 hot spots. It was impossible to run the 500 hot spot instance, even for 3 patrol cars. The number of resulting equations outstripped our computer’s memory resources. The 100 hot spot instance was solved to optimality for 3 up to 23 patrol cars. For 24 patrol cars and more, our computer’s resources were insufficient. However, if such larger instances need to be considered, our contribution in modeling the original MCPRP as an MCNFP can probably be exploited as a very effective and efficient sub-routine or one can turn to specialized MCMCNFP solution methods.

@&#DISCUSSION AND CONCLUSIONS@&#

This paper modeled the maximum covering and patrol routing problem as presented by Keskin et al. (2012) as a minimum cost network flow problem by adding at most a quadratic amount of nodes. This proves that the MCPRP belongs to P and is not NP-hard as was incorrectly concluded by Keskin et al. They unfortunately chose an NP-hard model to represent the MCPRP. This underscores the importance of selecting an appropriate model when solving an optimization problem. Computational experiments showed that using a network simplex algorithm, the MCNFP formulation can solve all instances to optimality at least two orders of magnitude faster than the local search/tabu search heuristic proposed by Keskin et al. For the current benchmark instances that are pure MCPRP problems, this does not translate to huge time savings. However, if larger instances are constructed or the MCPRP is a sub-problem to a more complex problem, the fact that the MCPRP can be solved by a polynomial algorithm is of major importance.

Practical extensions such as overlapping shifts and different start and end locations of patrol cars can be handled by considering the multi-commodity minimum cost network flow problem. Although the MCMCNFP is proven to be NP-hard, good solution approaches are plentiful in literature. Furthermore, considering the problem sizes of the real-life patrol routing instances, even a straightforward MIP implementation in Cplex can reach the optimal solutions in reasonable computation times. If larger instances of the multi-commodity version have to be solved or other practical extensions such as time-dependent travel times are considered, our contribution of modeling the original MCPRP as an MCNFP can be used to develop an efficient subroutine for a dedicated algorithm.

A requirement for the transformation of the MCPRP into the MCNFP is that travel times between hot spots are constant. In practice, this is not always the case. For such practical instances, future research might focus on heuristically splitting the hot spots and assuming constant travel times between the newly created hot spots. Since the sub-problems can be solved efficiently, this can be embedded in a larger metaheuristic framework or an exact decomposition approach.

In conclusion, the main contributions of this paper are modeling the basic MCPRP as a minimum cost network flow problem, thus proving that the basic MCPRP is not NP-hard and that all available benchmark instances can be solved to optimality in at most a few minutes. We also show that practical extensions to the basic MCPRP can be modeled by a multi-commodity minimum cost network flow problem.

This proof considers two hot spots with partly overlapping time windows (Fig. A1
                     ). The gain per minute equals g
                     1 and g
                     2 for respectively hot spot 1 and hot spot 2 and the travel time between both hot spots equals dij
                     . The time window of hot spot 1 opens at time t
                     
                        o, 1 and closes at time t
                     
                        c, 1. Similarly, the time window of hot spot 1 opens at time t
                     
                        o, 2 and closes at time t
                     
                        c, 2.


                     Lemma 1 states that one of the optimal solutions consists of all cars arriving at hot spots i either at the opening of their time window or at a time that corresponds to the closing time of another hot spot j plus the travel time between i and j. Similarly, all cars will only leave a hot spot at the closing of their time window or at a time that corresponds to the opening time of another hot spot j minus the travel time between i and j.

When considering two partly overlapping hot spots in isolation, Lemma 1 states that leaving hot spot 1 to move to hot spot 2 at any time T will be dominated by either leaving at t
                     
                        b, 21 or t
                     
                        c, 1.

Leaving hot spot 1 before t
                     
                        b, 21 or after t
                     
                        c, 1 is sub-optimal, since it results in dead waiting time where no gain is collected.

Considering the case where hot spot 1 has a higher gain per minute than hot spot 2, the patrol car in an optimal solution will remain until t
                     
                        c, 1, before moving to hot spot 2. Leaving earlier at time T results in earning 
                        
                           
                              g
                              1
                           
                           *
                           
                              (
                              
                                 t
                                 
                                    c
                                    ,
                                    1
                                 
                              
                              −
                              T
                              )
                           
                        
                      less in hot spot 1, but earning 
                        
                           
                              g
                              2
                           
                           *
                           
                              (
                              
                                 t
                                 
                                    a
                                    ,
                                    12
                                 
                              
                              −
                              
                                 T
                                 ′
                              
                              )
                           
                        
                      more in hot spot 2. Since T′ equals 
                        
                           T
                           +
                           
                              d
                              
                                 i
                                 j
                              
                           
                        
                      and t
                     
                        a, 12 equals 
                        
                           
                              t
                              
                                 c
                                 ,
                                 1
                              
                           
                           +
                           
                              d
                              
                                 i
                                 j
                              
                           
                           ,
                        
                      leaving earlier results in a change of gain earned of 
                        
                           
                              (
                              
                                 g
                                 2
                              
                              −
                              
                                 g
                                 1
                              
                              )
                           
                           
                              (
                              
                                 t
                                 
                                    c
                                    ,
                                    1
                                 
                              
                              −
                              T
                              )
                           
                        
                     . Since g
                     1 is larger than g
                     2, this solution is worse than remaining in hot spot 1 until the end of the time window.

Analogously, if hot spot 2 has a higher gain per minute than hot spot 1, the patrol car will leave hot spot 1 as soon as possible. Leaving later will reduce the total gain earned. If both hot spots have the same gain per minute, leaving hot spot 1 at t
                     
                        b, 21 or t
                     
                        c, 1 will be as good as leaving at any time T in between t
                     
                        b, 21 and t
                     
                        c, 1.

Since an identical reasoning can be applied to any combination of hot spots in the network, this concludes the proof.

@&#REFERENCES@&#

