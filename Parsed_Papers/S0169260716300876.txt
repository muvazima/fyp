@&#MAIN-TITLE@&#PopED lite: An optimal design software for preclinical pharmacokinetic and pharmacodynamic studies

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           We have created a software PopED lite in order to increase the use of optimal design in preclinical drug discovery.


                        
                        
                           
                           PopED lite is designed to be simple, fast and intuitive so that it is highly useful in practice and complements existing tools.


                        
                        
                           
                           Key functionality of PopED lite is demonstrated by three case studies from real drug discovery projects.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Optimal experimental design

preclinical drug discovery

Model-based drug discovery

@&#ABSTRACT@&#


               
               
                  Background and objective
                  Optimal experimental design approaches are seldom used in preclinical drug discovery. The objective is to develop an optimal design software tool specifically designed for preclinical applications in order to increase the efficiency of drug discovery in vivo studies.
               
               
                  Methods
                  Several realistic experimental design case studies were collected and many preclinical experimental teams were consulted to determine the design goal of the software tool. The tool obtains an optimized experimental design by solving a constrained optimization problem, where each experimental design is evaluated using some function of the Fisher Information Matrix. The software was implemented in C++ using the Qt framework to assure a responsive user-software interaction through a rich graphical user interface, and at the same time, achieving the desired computational speed. In addition, a discrete global optimization algorithm was developed and implemented.
               
               
                  Results
                  The software design goals were simplicity, speed and intuition. Based on these design goals, we have developed the publicly available software PopED lite (http://www.bluetree.me/PopED_lite). Optimization computation was on average, over 14 test problems, 30 times faster in PopED lite compared to an already existing optimal design software tool. PopED lite is now used in real drug discovery projects and a few of these case studies are presented in this paper.
               
               
                  Conclusions
                  PopED lite is designed to be simple, fast and intuitive. Simple, to give many users access to basic optimal design calculations. Fast, to fit a short design-execution cycle and allow interactive experimental design (test one design, discuss proposed design, test another design, etc). Intuitive, so that the input to and output from the software tool can easily be understood by users without knowledge of the theory of optimal design. In this way, PopED lite is highly useful in practice and complements existing tools.
               
            

@&#INTRODUCTION@&#

Poorly designed experiments often lead to uninformative experimental results. For example, poorly chosen dosage and observation/sampling times in an animal experiment can lead to inaccurate characterization of drug candidates. In order to minimize the risk of running uninformative experiments in drug discovery, we have investigated how researchers in industry reason about experimental design and what needs they have in this area, constructed design optimization strategies to meet these needs, and implemented the software PopED lite to disseminate these strategies.

Decisions in preclinical drug discovery are largely based on inference of data from cell-based assays and animals exposed to drug candidates. Accurate efficacy and safety estimates of each test compound are pivotal for proper compound ranking. Mathematical models are commonly used to formally integrate available information in order to gain system-level understanding of pharmacological effects and to make informed decisions [12,26]. These models are usually composed of two parts; the pharmacokinetics (PK) part representing what the body does to the drug, and the pharmacodynamics (PD) part representing what the drug does to the body [9].

Several compounds are tested during the compound selection phase of a drug discovery project. Estimated model parameters (e.g., clearance and potency) are used to quantitatively characterize each compound. Naturally, the uncertainty of parameter estimates must be taken into account. To increase certainty, it is not uncommon that in vivo PK/PD studies are repeated several times using the same or structurally similar compounds. The design of the experiment (e.g., when to take the blood samples, how much compound to administer) can have large influence on the parameter estimation certainty. One can reduce the number of experiments by optimizing the design of each experiment using prior information of the compound (or of similar compounds). Therefore, experimental design of preclinical studies is an important component of overall success in drug discovery.

Although there have been significant developments in optimal design for clinical studies [8,13–15,17,18], the use of optimal design in preclinical studies is still limited [23,24]. For example, in many preclinical studies, experiments are manually designed based on small scale trial-and-error using simulation tools. Occasionally, sampling times are fixed for all test compounds. Thus, we hypothesize that there is significant room for improvement in the experimental design of preclinical studies. Specifically, one could replace the manual exploration of the experimental design space by an automatic procedure. By utilizing optimal design software, one can obtain the optimal design based on thousands or even millions of algorithmically generated simulations with no more effort than running one simulation using a standard simulation tool. For example, in the first case study of this paper, 90000 designs were compared automatically in about 10s.

There are many software tools available that can potentially be used to design preclinical PK/PD studies [4,10,11,16,18,21]. We initially used one of these, PopED [18], to support the design of preclinical PK/PD studies. During this exercise, we learned how preclinical experiments were designed in drug discovery and identified several causes for optimal design not being used in these studies. Specifically, we identified three key characteristics of the preclinical experiments that need to be taken into account when designing optimal design tools in this area.

Firstly, experimental designs for preclinical studies are often done routinely and are often based on relatively simple mathematical models. Therefore, high flexibility of the software tool may not be necessary. Besides, high flexibility of a software tool incurs more user inputs which can demotivate unexperienced users and increase the risk of user errors.

Secondly, the costs of preclinical experiments are low compared to clinical studies; however, the experiments are run more frequently. The design-experiment cycles are in the order of weeks for preclinical studies, and often the experimental designs are adjusted during discussions with experimentalists. We have even observed cases where a fixed experimental design for a series of compounds were used for the sake of practicality. Thus, a quickly obtained rough optimal design is often more useful in practice than a carefully optimized design with long computation time.

Thirdly, the majority of preclinical experimentalists are not used to optimal-design terminology. Thus, we need to translate this terminology to the terminology widely used among preclinical experimentalists in order to make optimal design tools accessible.

Based on these characteristics, we have identified three general themes as important for the design of the tool: level of flexibility, accuracy and technicality. These three themes are elaborated in Section 2. Furthermore, we have made several design choices in the implementation and these are detailed in Section 3. Based on these design choices, PopED lite was developed closely with preclinical experimentalists while assisting real case studies to ensure usability and usefulness as illustrated in Section 4. This section also include a comparison of PopED lite to the already existing tool PopED in R with respect to computational speed and accuracy.

The resulting software, PopED lite, “a simple, fast and intuitive playground for experimental design”, is available for Mac and for Windows (http://www.bluetree.me/PopED_lite).

PopED lite was designed to be simple, fast and intuitive in order to bring optimal design into the regular workflow of preclinical animal experiments in the pharmaceutical industry. This design goal was based on our experiences from several realistic case studies and on discussions with many preclinical experimental teams. Specifically, together with an industrial drug-discovery team we conducted a retrospective study (Case study 1) and with another team we designed experiments using the preliminary version of PopED lite (Case study 2) as well as with the current version (Case study 3). To achieve the design goal we have attempted to balance the level of flexibility, accuracy and technicality of the software tool.

PopED lite focuses on optimization of the dosage and PK/PD sampling (observation) times to improve the accuracy of the parameter estimates of fixed effect PK/PD models. Preclinical experiments are characterized by relatively small group sizes, and animals with small genetic differences. The main interest is to predict the human situation, and focus is on average levels and not on variability, as translation of the latter is associated with very high uncertainty. Therefore, the use of nonlinear mixed effect modeling is not as central as in the clinical setting, and key questions can often be addressed by standard deterministic (fixed effect) PK/PD models. PopED lite implements standard compartmental PK models (1-, 2-, and 3-compartment models with linear and nonlinear elimination, and linear absorption), as well as commonly used PD models. For the PD models, the user can alternatively input a regular mathematical expression in the form of a function or an ordinarily differential equation (ODE). By limiting the scope of optimal design to models that are routinely used in drug discovery projects, we aim to make PopED lite simple and user-friendly.

We have decided to discretize both sampling time and dosage search space, so that the optimal design can be chosen from a combination of practical sampling schedules and allowed possible dosages. We have observed that a precisely optimized experimental design is seldom practically useful. For example, in practice one may only be able to sample every 5th minute and a discrete search space for sampling or dose times is sufficient. By discretizing the sampling time and dosage the design space will shrink to finite, and we can reduce the computational cost of the design optimization while avoiding unrealistically precise experimental designs. By focusing on a “good enough” optimal design rather than a precisely optimized design, we aim to make PopED lite fast and hence useful in short design-experiment cycles.

Preclinical studies are designed by cross-functional teams (e.g., biologists, chemists, and PK/PD-modelers), that generally lack training in numerical computation and information theory. Therefore, optimal-design specific jargon should be avoided in the software interface, and PopED lite is designed to only display terminology that is familiar to these teams. Based on the information specified by the user, PopED lite chooses an appropriate design optimization strategy. By not assuming user-knowledge of optimal design theory, we aim to make PopED lite intuitive so that the idea of optimal design can be introduced to preclinical experimentalists.

In summary, the design philosophy of PopED lite is to create the simplest, fastest, and most intuitive optimal design software tool that maintains a reasonable level of flexibility, accuracy and technicality for use in preclinical drug discovery.

@&#MATERIAL AND METHODS@&#

The input to PopED lite basically consists of a PK/PD model of the system of interest (with approximate parameter values), estimates of lower level of quantification in the experiment, and measurement error. Furthermore, one specifies what to optimize for, e.g. observation time-points. The output is the optimized design and predicted coefficients of variation. It is important to separate the difficulty of the problem itself (poor prior information gives inaccurate predictions even for an ideal software with an exhaustive search) from difficulty of solving optimal design problems (e.g. choice of heuristics).

PopED lite obtains an optimized experimental design by solving a constrained optimization problem, where each experimental design is evaluated using some function of the Fisher Information Matrix (FIM). The FIM is calculated based on the PK/PD model structure, possible sets of model parameters, and the experimental design (see [3] for an introduction to the field).

User input to PopED lite is entered step by step; completion of one step is required before the next step appears. This increases usability and reduces user errors. The optimal design is calculated in five steps (Fig. 1
                        ). Users are only required to input numbers, and a single mathematical expression in case a user-specified PD model is desired.

Accurate construction and computation of the FIM is vital to optimal design software, as the FIM is used to quantify the quality of the experimental design. In order to assure appropriate FIM construction, the residual error model is automatically built using the estimated limit of quantifications and measurement errors provided by the user in Step 2 (Fig. 1) of PopED lite. In addition, since the FIM is a symmetric matrix PopED lite utilizes Cholesky decomposition to calculate the determinant and inverse of the FIM. At each Cholesky decomposition, PopED lite monitors the rounding error and also checks the invertibility of the FIM. If the FIM of the optimized design is singular, the program outputs a warning message saying that the parameters cannot be uniquely identified from the experiment, instead of stating that the FIM is singular. Naturally, this facilitates user interpretation. In addition, if the computational error is detected when inverting the FIM, PopED lite outputs a warning as well as reports the corresponding Coefficients of Variation (CVs) with a question mark (?), allowing the user to interpret these CVs with caution. Appendix A describes in detail how the FIM is constructed in PopED lite.

This computational cost of calculating the FIM is reduced by hard-coding several PK and PD models in PopED lite. For user defined PD functions, PopED lite implements an expression parser based on the shunting-yard algorithm [6]. PopED lite parses the expression only once to save computation time. All subsequent evaluations of the expression in the design optimization procedure reuse the parsed expression (see Appendix B for differences in the computational time between the hard-coded PD model and the user-defined PD model). For PK/PD models that require solving a system of ODEs, PopED lite uses the Runge-Kutta method by default and the Rosenbrock method [22] as an option (as implemented by the Odint toolbox [1] in the boost package). The Jacobian of the right hand side of a user defined PD function is approximated using a forward difference scheme.

PopED lite chooses the optimization criteria from D, Ds, ED, and EDs optimal designs [3,7] to fit the optimization need of the user. For a chosen PK/PD model structure, the user can specify the confidence level of the best guess of the PK/PD parameters (Step 2 of PopED lite). If there is no uncertainty, PopED lite optimizes the experimental design using the D optimization criterion. Otherwise, it randomly generates sets of parameters following the uniform distribution in the range specified by the user and conducts ED optimal design (by taking the expectation of the natural logarithm of the determinant of the FIM for randomly generated sets of parameters). Furthermore, the user can specify, in Step 2, that PopED lite should optimize the design for parameter estimation accuracy of a subset of parameters; Ds or EDs optimization criteria will then be used. Note that these optimization criteria do not appear in the standard user interface and PopED lite interprets the optimization needs of the user and chooses a criterion automatically. In this way, the level of technicality is kept low, while still some flexibility is guaranteed. For further detail on the optimization criteria of PopED lite, see Appendix C.

We have implemented discrete optimization algorithms, in order to achieve the desired level of accuracy and also to obtain an experimental design that makes sense, in practice. Flexibility of the experimental design is hence limited to a certain extent.

By discretizing the sampling time, it is possible to reduce the search space (the design space) significantly. A key advantage of discretizing the sampling time is that model simulations are avoided during sampling time optimization since all the elements that can appear in the Jacobian matrices can be pre-calculated. This dramatically reduces the cost of computation.

By discretizing the dosage, the user can specify the possible doses considering the experimental constraints and compound formulation constraints. As a result, in particular for single dose experiments, PopED lite can often search exhaustively for the dosage and hence avoid the risk of finding a locally optimal design.

The sampling time optimization is a combinatorial optimization problem (e.g. choose 6 sampling points from 420 possible sampling points), while the dose optimization is a simple discrete optimization problem. PopED lite implements stochastic optimization algorithms for these two problems to reduce the risk of finding a local optimal design. The two algorithms are detailed in Appendix D.

PopED lite was implemented using the Qt framework [5] and overall implementation was optimized using Instruments [2]. The Qt framework was chosen for its speed of computation, ease of deployment, and flexibility of GUI design. The Qt framework is based on C++, hence PopED lite takes advantage of the speed of compiled software. Most of the optimal design programs targeted for pharmaceutical drug development are written in interpreter based languages such as R and Matlab which is a major cause of slow computation. Typically one order of magnitude faster computation can be expected for compiler-based language such as C++, C, or FORTRAN compared to interpreter-based languages.

The Qt is also a cross-platform framework so that PopED lite can be deployed to both Unix-based platforms and Windows-based platforms. We have also made PopED lite a standalone software to facilitate installation. As a result, PopED lite does not require any extra installation steps and can be started by simply clicking on an icon just like any other Apps available on a computer. Lastly, the Qt framework supports flexible GUI design with a unified look and feel.

We now present the case studies that PopED lite was motivated by, developed for, and used in. All case studies are based on problems encountered in real drug discovery projects at AstraZeneca. Further details of the case studies are found in Appendix B. Specifically, the computational speed is reported.

This case study was run before the start of the development of PopED lite, and motivated the development of optimal design software specifically designed for preclinical studies. In a drug candidate optimization program, several chemically similar compounds were evaluated in the mouse. Specifically, time-series data for drug exposure and drug targeted receptor occupancy were generated from orally dosed mice. For the latter time series, one mouse was sacrificed for each sampling point making experimental design highly important both from an ethical and a cost perspective. For the compound series, PK could be reliably modeled by a linear two-compartment model (1st order absorption, linear elimination), and the distribution between drug–receptor complex (RC) and free receptor (R) was modeled by a receptor kinetic model with elementary reactions as
                           
                              (1)
                              
                                 
                                    d
                                    dt
                                 
                                 RC
                                 (
                                 t
                                 )
                                 =
                                 
                                    k
                                    on
                                 
                                 C
                                 (
                                 t
                                 )
                                 (
                                 
                                    R
                                    tot
                                 
                                 −
                                 RC
                                 (
                                 t
                                 )
                                 )
                                 −
                                 
                                    k
                                    off
                                 
                                 RC
                                 (
                                 t
                                 )
                              
                           
                        where C denotes drug plasma concentration, R
                        tot denotes the total receptor concentration, RC denotes the drug–receptor complex and k
                        on and k
                        off are rate constants. The dissociation constant is derived as K
                        
                           D
                        
                        =
                        k
                        off/k
                        on, and reflects the binding affinity of the test compound. The in vivo experiment was routinely conducted using a manually defined standard design. For one test compound, the CV of k
                        off was as high as 80% resulting in high uncertainty in the binding affinity estimate. The reason for this high CV was that all observations after 16h were low and hence not informative. To improve the estimate, a second experiment was planned. During the experimental planning, various simulations were run with manually designed experiments and the experimental design with two doses of 40μmol/kg (at time 0h and 8h) and one sample at 8h, two samples at 16h, and two samples at 24h were chosen for the second experiment (terminal sampling; Fig. 2
                        (a)). By combining the first and the second experiments, the predicted CV for k
                        off was 52%. Actual data generated using this design reduced the CV of k
                        off even more, down to 22%, and the binding affinity could be reliably derived.

In a retrospective analysis we explain how this experiment could have been optimized even further using PopED lite. We first tried to optimize for the sampling schedule only, but did not find significant improvement on the predicted CV for k
                        on and k
                        off. In a subsequent step we optimized for the dosing amount using an optimization criterion taking the accuracy of all the model parameters into account (ED optimal design). The proposed design also failed to improve the CV for k
                        off and k
                        on. However, by optimizing only for the PD parameters (EDs optimal design), the predicted CVs for k
                        off and k
                        on were reduced to 36% and 44%. As the predicted CVs of k
                        off and k
                        on for the actual experiment run were 52% and 52% (see Fig. 2(b) design 0), we can expect further reduction in the parameter estimation uncertainty with this design. In addition, this optimal design requires a short sampling period (0.3, 0.7, 3, 4.1, and 4.8h), and only one dosing of 2.8μmol/kg at time 0.

By using EDs optimal design with PD parameters as the parameters of interest, it is not unexpected that the CVs of the PK parameters are relatively high in the proposed design. However, even if individual PK parameters cannot be identified accurately, the shape of the PK profile can be roughly estimated from the observation, and we can estimate PD parameters accurately using a relatively sparse sampling schedule.

In summary, the retrospective analysis indicates that by using an optimal design software we could have reduced the required amount of compound, which is often limited in preclinical studies, and study duration while obtaining similarly accurate parameter estimates. This example also illustrates the importance of both dose and sampling time optimization as well as optimization focused on the parameters of interest (i.e. EDs optimal design).

For this case study we also performed a comparison between PopED lite and PopED (implemented in R) with respect to user input, computational time and accuracy. The comparison includes 14 problem instances, each of them based on the case study, and is detailed in Appendix E. Concerning user input, PopED required scripting in R, and in the programming language C to speed the computations up, to implement the test problems. The script used for the PopED computations is included in Appendix E.1. In contrast, the problems were easily defined in the graphical user interface of PopED lite. Concerning computational time and accuracy, the comparison is highly conservative in the sense that PopED lite searches globally and does not require an initial guess of the design, while PopED requires an initial guess in our tests, and the optimal solution proposed by PopED lite was used as the initial guess. The optimisation computation was on average, over the 14 problems, 30 times faster in PopED lite compared to PopED. The designs reported by PopED (where the line search optimization algorithm was used with the optimal solution proposed by PopED lite as the starting point of the search) were slightly more accurate compared to the ones reported by PopED lite. Specifically, the Design Efficiency (as calculated by PopED) were 1.01 to 1.06 (Design Efficiency>1 indicates that the optimal design obtained by PopED is superior to the one obtained with PopED lite). All these results with respect to user input, computational time and accuracy are in line with the design goals of PopED lite.

PopED lite was developed along with a drug discovery project and a preliminary version of PopED lite was used to design several dog experiments. The drug discovery project aimed at decreasing the level of a biomarker by more than 80% over 24h. The compound concentration and biomarker response could be measured both in vitro and in vivo. However, several compounds displayed a time delay between concentration and effect in vivo that was not fully captured in the in vitro assay. To better understand the exposure–response relationship, the compound was administered to dogs in vivo, and exposure and biomarker were followed over time. The PK was then modeled using a 2-compartment model. The biomarker was modeled using a link model (2) coupled to an Emax model (3)
                        
                           
                              (2)
                              
                                 
                                    d
                                    dt
                                 
                                 
                                    C
                                    e
                                 
                                 =
                                 
                                    k
                                    e
                                 
                                 (
                                 
                                    C
                                    p
                                 
                                 −
                                 
                                    C
                                    e
                                 
                                 )
                                 ,
                              
                           
                        
                        
                           
                              (3)
                              
                                 E
                                 =
                                 1
                                 −
                                 
                                    
                                       
                                          C
                                          e
                                       
                                    
                                    
                                       
                                          IC
                                          50
                                       
                                       +
                                       
                                          C
                                          e
                                       
                                    
                                 
                              
                           
                        where C
                        e denotes the effective concentration, k
                        e denotes the equilibrium constant, C
                        p denotes the plasma concentration, E denotes the biomarker concentration and IC
                        50 signifies the concentration required to reach 50% inhibition (Emax was assumed to be one). Because of the time delay between concentration and response, it is not intuitively easy to propose sampling time-points that result in informative data. To increase the accuracy of the parameter estimates a preliminary version of PopED lite was used.

The sampling times of the first experiment was optimized based on the model parameters from in vitro data and previously run compounds in the chemical series. The predicted CV for IC
                        50 for the optimized design was 25%. With the preliminary version of PopED lite, we were only able to conduct Ds optimal design; uncertainty of the initial guess of the parameters was not considered in the design. The experiment was run with the optimized sampling time and fixed dosage of 0.44μmol/kg; however, most of the PD measurements were below the limit of quantification and IC
                        50 could therefore not be reliably estimated (CV of IC
                        50 was over 400%). The imperfect experimental design was due to a poor estimate of IC
                        50 based on in vitro data; about one order of magnitude different from that estimated from in vivo data. It was clear that the dosage should be reduced in the next experiment in order to avoid PD measurements below the limit of quantification; however, it was not clear by how much.

In the next experiment, the preliminary version of PopED lite optimized the dose based on the estimated parameters from the first experiment. The preliminary version of PopED lite had a functionality to generate feasible sets of model parameters (data import followed by bootstrapping) and then run ED(s) optimal design based on these sets. Using this functionality, the new dose was suggested to be 0.04 μmol/kg, and and the CV of IC
                        50 was predicted to 10%. The experiment was run with the design suggested and the resulting IC
                        50 estimate had a CV of 7%.

Similar analysis can be done with the current version of PopED lite, i.e., with 5% uncertainties in PK parameters and 30% uncertainties in PD parameters.

As a retrospective study we included 100% uncertainty to the prior guess of the PD parameters, based on the in vitro data. Using the EDs optimal criterion PopED lite suggested a dose of 0.08μmol/kg. Hence, we could have avoided the uninformative first experiment if the uncertainty of the initial guess of the parameters had been incorporated appropriately in the optimization of the experimental design. From this case study, we see that a poor initial guess of the parameter values leads to a poor experimental design. To avoid this problem, uncertainty in the prior guess of the parameters should be included in the experimental design calculation. Based on this case study, we have made ED/EDs optimal design the default setting for PopED lite, requiring the user to specify the confidence level of the initial guess of the parameters.

The last case study describes how the deployed version of PopED lite was proven to be a useful tool for motivating an experimental design that was different from the standard design of a preclinical study. The purpose of the study was to investigate renal function in an in vivo mouse model by measuring the glomerular filtration rate (GFR). The standard protocol for GFR measurement is to study clearance of a metabolically inert compound (inulin or sinestrin) that is freely filtered, not bound to plasma proteins and not subject to reabsorption [25]. The compound is administered intravenously and the plasma concentration is followed over time. The clearance estimate is subsequently obtained by fitting a standard two compartment PK model to the concentration curve.

In an initial study, a bolus intravenous injection of sinestrin, and standard sampling-points (3, 7, 10, 15, 35, 55, 75 min) found in literature [19] were used with a dosage of 1 500 000ng. However, the compound had an extremely rapid distribution phase in plasma and only approximately 40% of the mice showed plasma curves that were possible to fit to a two-compartment model.

Using PopED lite, the impact of changing the sampling time on the certainty of the estimates could easily be demonstrated. If sampling was restrained to later than 3 minutes the uncertainty in the parameters was much larger than if a sample could be taken at less than one minute. Specifically, we first obtained rough estimates of the PK parameters from previously ran studies and literature values (V
                        1
                        =3000μl, V
                        2
                        =5000μl, CL
                        =300μl/min, and Q
                        1
                        =1000μl/min), and estimated the uncertainty of these rough estimates to be plus or minus 30%. Then, we evaluated the standard design by calculating the predicted CVs. The CV of CL was predicted to be approximately 38% for this study design. We then calculated the optimal experimental design under the design constraint that seven samples could be taken any minute between 0 min and 75min and maximum dosage of 1500000ng. For the new design (1, 2, 5, 10, 35, 75 min) with dosage of 1500000, the CV of CL was predicted to reduce to 4%. Although the proposed design deviated from the standard protocol, the PopED lite calculations convinced the drug discovery team to run the new design. The resulting measurements from three mice were then modeled with a two-compartment model and the estimated CL had a CV of only 2%. Through this successful integration of PopED lite to a preclinical experimental design workflow we showed that even for a very rough initial estimate of the parameters, the experimental design can be improved significantly.

In this paper we have demonstrated how the optimal design software PopED lite was designed collaboratively by academic researchers and preclinical experimental teams in the pharmaceutical industry. It is designed to fit into a practical workflow, so that the use of an optimal design software can be the standard procedure in preclinical experiment designing and thus help to increase the efficiency of drug discovery in vivo studies.

Our initial attempt was to introduce the already existing software PopED and create a simplified GUI for preclinical experiments. However, as we investigated the preclinical experimental design workflow in more detail, we realized that a significant simplification to the user–software interaction, a thorough optimization of the computational speed, and a dramatic reduction of the level of technicality of the software were required. To address these issues we decided to reconstruct the software from scratch. This has allowed us to design the software–user interaction first and then implement the numerical computation engines to realize the design. To optimize the user experience, we have implemented the computation engine with careful treatment of the numerical computational errors, new discrete optimization strategies, and optimized compiled code.

As a result of these optimizations, the optimal design calculation can be done in around ten seconds for single-dose experiments and less than a minute for multiple-dose experiments (EDs optimal criteria; standard laptop; see Appendix B for full detail). These numbers are highly competitive as reported in the comparison to PopED for Case Study 1.

Future work may include improvement of the computational speed by enhancing parallelisation scalability, increasing the use of pointers, further optimisation of the ODE solvers, and refinement of the discrete optimisation algorithm.

User feedback has been continuously collected during the development of the tool. This feedback has helped us to find a reasonable balance between level of flexibility, accuracy and technicality. Occasionally, we have encountered users that miss certain PK/PD models or functionalities in PopED lite. This is natural given the purpose of PopED lite, and we point such users to more advanced and flexible tools such as PopED.

Deployment of research results through software is not uncommon in the biomedical field and those software have the potential to bridge the gap between theoretically oriented researchers in academia and more practically oriented researchers in the industry. The development of PopED lite shows that a cross-disciplinary effort to design a purpose-specific “app” can be a powerful way of introducing a new research idea to industry.

Monika Sundqvist and Peter Gennemark are employees of AstraZeneca.

Yasunori Aoki and Andrew C. Hooker have received funding from AstraZeneca.

@&#ACKNOWLEDGEMENTS@&#

Authors would like to thank Dr. Sebastian Ueckert and Dr. Joakim Nyberg for valuable and stimulating discussions, Dr. Ron Keizer for sharing his experiences in software development in pharmacometrics and suggesting the Qt framework, and the Uppsala Pharmacometrics Research Group and the AstraZeneca CVMD DMPK modeling and simulation section for useful input and software testing.

In this and the following appendices we denote a scalar quantity with a lower case letter e.g., a or c, a matrix with a capital letter, for example A, or M, and a vector quantity by a bold symbol of a lower case letter, e.g., 
                        
                           v
                        
                     , 
                        a
                     , unless otherwise specifically stated. As an exception to this matrix notation, Fisher Information Matrix is denoted as FIM to follow the convention of the notation in the field. In addition the ith row of the matrix M can be denoted by a vector 
                        m
                     
                     
                        i·, the jth row of the matrix M can be denoted by a vector 
                        m
                     
                     ·j
                      and the ith row jth column of the matrix M can be written by a scalar m
                     
                        ij
                     .

Let 
                        f
                     (
                        θ
                     
                     ;
                     
                        ξ
                     ) be a vector function that maps from the model parameters 
                        θ
                      to the PK and PD prediction of a given experimental design 
                        ξ
                     . For example, for a standard one-compartment PK model with an E
                     
                        max
                      PD model and an intra-venous bolus administration, the parameter vector is defined as
                        
                           (4)
                           
                              
                                 
                                    θ
                                 
                              
                              =
                              
                                 
                                    [
                                    V
                                    ,
                                    CL
                                    ,
                                    
                                       
                                          E
                                          max
                                       
                                    
                                    ,
                                    
                                       
                                          ED
                                          50
                                       
                                    
                                    ]
                                 
                                 T
                              
                              .
                           
                        
                     The design vector 
                        ξ
                      for a design with a single dose and N
                     
                        obs
                      measurement points at times 
                        
                           t
                           1
                        
                        ,
                        
                           t
                           2
                        
                        ,
                        …
                        ,
                        
                           t
                           
                              
                                 N
                                 obs
                              
                           
                        
                      is defined as
                        
                           (5)
                           
                              
                                 
                                    ξ
                                 
                              
                              =
                              
                                 
                                    [
                                    
                                       t
                                       1
                                    
                                    ,
                                    
                                       t
                                       2
                                    
                                    ,
                                    …
                                    ,
                                    
                                       t
                                       
                                          
                                             N
                                             obs
                                          
                                       
                                    
                                    ,
                                       
                                    
                                       dose
                                          
                                       amount
                                    
                                    ]
                                 
                                 T
                              
                              .
                           
                        
                     
                  

Then, we let the ith element of the vector 
                        f
                     (
                        θ
                     
                     ;
                     
                        ξ
                     ) be the PK model prediction at time t
                     
                        i
                      and (i
                     +
                     N
                     
                        obs
                     )th element represent the PD model prediction at time t
                     
                        i
                      (we assume both PK and PD measurements are made at the same time points).

We define the FIM as


                     
                        
                           (6)
                           
                              FIM
                              (
                              
                                 
                                    θ
                                 
                              
                              ;
                              
                                 
                                    ξ
                                 
                              
                              )
                              :
                              =
                              
                                 J
                                 T
                              
                              (
                              
                                 Σ
                                 
                                    −
                                    1
                                 
                              
                              )
                              J
                           
                        
                     where J is a Jacobian matrix of 
                        f
                      with respect to the model parameters 
                        θ
                     , i.e.
                        
                           (7)
                           
                              J
                              =
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∂
                                                      
                                                         f
                                                         1
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         θ
                                                         1
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      ∂
                                                      
                                                         f
                                                         1
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         θ
                                                         2
                                                      
                                                   
                                                
                                             
                                             
                                                ⋯
                                             
                                             
                                                
                                                   
                                                      ∂
                                                      
                                                         f
                                                         1
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         θ
                                                         
                                                            
                                                               N
                                                               para
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      ∂
                                                      
                                                         f
                                                         2
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         θ
                                                         1
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      ∂
                                                      
                                                         f
                                                         2
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         θ
                                                         2
                                                      
                                                   
                                                
                                             
                                             
                                                ⋯
                                             
                                             
                                                
                                                   
                                                      ∂
                                                      
                                                         f
                                                         2
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         θ
                                                         
                                                            
                                                               N
                                                               para
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                ⋮
                                             
                                             
                                                ⋮
                                             
                                             
                                                ⋱
                                             
                                             
                                                ⋮
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      ∂
                                                      
                                                         f
                                                         
                                                            2
                                                            
                                                               N
                                                               obs
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         θ
                                                         1
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      ∂
                                                      
                                                         f
                                                         
                                                            2
                                                            
                                                               N
                                                               obs
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         θ
                                                         2
                                                      
                                                   
                                                
                                             
                                             
                                                ⋯
                                             
                                             
                                                
                                                   
                                                      ∂
                                                      
                                                         f
                                                         
                                                            2
                                                            
                                                               N
                                                               obs
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         θ
                                                         
                                                            
                                                               N
                                                               para
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              ,
                           
                        
                     and Σ is a diagonal matrix representing the prior knowledge of the measurement error and the limit of quantification. We interpret the limit of quantification as the minimum value of the residual error, for example, assuming 10% measurement error on the PK observations, E
                     
                        max
                     /10 measurement error on the PD observations and 0.01 and 1 to be the limit of quantification of PK and PD measurements (these quantities are specified by the user in Step 2 in the GUI), Σ becomes
                        
                           (8)
                           
                              Σ
                              =
                              diag
                              
                                 
                                    
                                       
                                          
                                             max
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           f
                                                                           1
                                                                        
                                                                     
                                                                     10
                                                                  
                                                               
                                                            
                                                         
                                                         ,
                                                         0.01
                                                      
                                                   
                                                
                                                2
                                             
                                             ,
                                             max
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           f
                                                                           2
                                                                        
                                                                     
                                                                     10
                                                                  
                                                               
                                                            
                                                         
                                                         ,
                                                         0.01
                                                      
                                                   
                                                
                                                2
                                             
                                             ,
                                             …
                                             ,
                                             max
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           f
                                                                           
                                                                              
                                                                                 N
                                                                                 obs
                                                                              
                                                                           
                                                                        
                                                                     
                                                                     10
                                                                  
                                                               
                                                            
                                                         
                                                         ,
                                                         0.01
                                                      
                                                   
                                                
                                                2
                                             
                                             ,
                                                
                                             max
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           E
                                                                           max
                                                                        
                                                                     
                                                                     10
                                                                  
                                                               
                                                            
                                                         
                                                         ,
                                                         1
                                                      
                                                   
                                                
                                                2
                                             
                                             ,
                                             max
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           E
                                                                           max
                                                                        
                                                                     
                                                                     10
                                                                  
                                                               
                                                            
                                                         
                                                         ,
                                                         1
                                                      
                                                   
                                                
                                                2
                                             
                                             ,
                                             …
                                             ,
                                             max
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           E
                                                                           max
                                                                        
                                                                     
                                                                     10
                                                                  
                                                               
                                                            
                                                         
                                                         ,
                                                         1
                                                      
                                                   
                                                
                                                2
                                             
                                          
                                       
                                    
                                 
                              
                              .
                           
                        
                     
                  

Other advanced technique to handle the limit of quantification can be found in [27] and will be implemented in a future version of the software.

If J is a full-rank matrix and all the diagonal elements of Σ are nonzero, the FIM is a non-singular matrix. In such cases, we define the predicted standard deviation of the parameter estimation uncertainty of the ith parameter (PSD
                     
                        i
                     ) to be the square root of the ith diagonal element of the inverse of the FIM, i.e.
                        
                           (9)
                           
                              
                                 PSD
                                 i
                              
                              (
                              
                                 
                                    θ
                                 
                              
                              ;
                              
                                 
                                    ξ
                                 
                              
                              )
                              :
                              =
                              
                                 
                                    
                                       
                                          (
                                          
                                             
                                                (
                                                FIM
                                                (
                                                
                                                   
                                                      θ
                                                   
                                                
                                                ;
                                                
                                                   
                                                      ξ
                                                   
                                                
                                                )
                                                )
                                             
                                             
                                                −
                                                1
                                             
                                          
                                          )
                                       
                                       
                                          i
                                          ,
                                          i
                                       
                                    
                                 
                              
                              .
                           
                        
                     Finally, the predicted CV of the ith parameter (PCV
                     
                        i
                     ) is defined as
                        
                           (10)
                           
                              
                                 PCV
                                 i
                              
                              (
                              
                                 
                                    θ
                                 
                              
                              ;
                              
                                 
                                    ξ
                                 
                              
                              )
                              :
                              =
                              
                                 
                                    
                                       PSD
                                       i
                                    
                                    (
                                    
                                       
                                          θ
                                       
                                    
                                    ;
                                    
                                       
                                          ξ
                                       
                                    
                                    )
                                 
                                 
                                    
                                       θ
                                       i
                                    
                                 
                              
                              .
                           
                        
                     The predicted CV can be thought of as the predicted accuracy of the estimated parameter from the experiment conducted with the design 
                        ξ
                      assuming 
                        θ
                      is the true parameter.

Note that if the Jacobian is a full-rank matrix and the limit of quantification is set to be a positive number, then FIM is a non-singular matrix. In order to reduce the chance of FIM being numerically singular, we set the lower bound of the limit of quantification to be the square root of the machine accuracy.

Once the FIM is created, we compute the Cholesky decomposition of the FIM. If the decomposition algorithm breaks down, PopED lite annotates the FIM as numerically singular and outputs a warning that the parameter is not identifiable. If the decomposition can be computed, PopED lite rebuilds the FIM from the decomposition and compares each element to the corresponding element of the original FIM. If the maximum absolute value of the difference in an element is more than the square root of the machine accuracy, there is a significant influence of the rounding error in the computation and PopED lite outputs a warning. The decomposition is stored for future usage.

We have conducted extensive numerical experiments to quantify the computation speed. All experiments were conducted using Case studies 1–3 and tested with various setting of the computation. Computation times were monitored using the clock time accessed via std::time and computation were done on a MacBook Pro Mid 2014 with 2.5GHz Intel Core i7 processor with 16GB of memory. PopED lite used for this numerical experiment was compiled using Clang version 6.1.9 with -Os optimisation flag. The computational cost of each computation block was profiled using Apple Instruments [2].

Despite this model involves solving a nonlinear ODE, the optimal design computation was done in less than 10s (Table 1
                        ). The model simulation consists of only 14% of the computational cost during the optimisation and 85% was spent on constructing the FIM using pre-calculated gradients. In total 90 000 designs were evaluated and compared during optimisation with the default setting.

In this case study, we have optimized the design for two dosings and for observation times. As each dosage was discretized into 36 different dosages in default setting, 1296 dose combinations were possible. Instead of conducting an exhaustive search, PopED lite by default sampled 96 dose combinations and chose the best one. This caused significantly more computation compared to Case study 1 and resulted in approximately 40s of computation (Table 2
                        ). The model used for this case study can be written in closed form, and it was hence possible to parallelize model simulations. Scaling was therefore inferior compared to Case study 1. For this case study, with the default setting, PopED lite algorithmically compared 240000 designs. Only 3.5% of computational cost was spent on the model simulation and 96% was spent on the construction of the FIM from pre-calculated gradients.

In this case study we only optimized the PK. As a result, the optimisation was done very quickly. As the model is linear, the maximum tolerated dose would be the optimal dosage for the design, and one could hence have optimized for observation time only. As can be seen in Table 3
                        , the optimisation for the observation time can be done instantaneously.

There are several ways to quantify the goodness of the design using the FIM, see e.g. [3,7]. PopED lite implements ED and EDs optimal designs to be the default.

Consider the case when the goal of the experiment is to accurately estimate all model parameters. One alternative is to optimize for the sum (or squares of the sum) of the predicted CVs. However, for this approach the optimality of the design can be influenced by the linear reparameterization of the model (see [3] for a detailed discussion). Therefore, we choose instead to quantify the goodness of the experimental design by the determinant of the FIM, which is independent of the linear reparameterization of the model. Taking uncertainty in the prior parameter information into account, the robust optimal design is calculated as
                           
                              (11)
                              
                                 
                                    
                                       
                                          ξ
                                       
                                    
                                    *
                                 
                                 =
                                 
                                    argmin
                                    
                                       
                                          
                                             ξ
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             N
                                          
                                          
                                             
                                                
                                                   log
                                                   (
                                                   det
                                                   (
                                                   FIM
                                                   (
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                      
                                                      j
                                                   
                                                   ;
                                                   
                                                      
                                                         ξ
                                                      
                                                   
                                                   )
                                                   )
                                                   )
                                                   /
                                                   N
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        where 
                           θ
                        
                        
                           j
                         are the parameter vectors created uniformly randomly around the “Guesstimated Parameter Value” with the bound specified as “Confidence of Guesstimate” (specified in Step 2 of the GUI). Furthermore, N is the number of randomly generated parameter vectors 
                           θ
                        
                        
                           j
                         (as default setting, this number is automatically adjusted between 1 and 500 according to the Confidence of Guesstimate; however, this setting can be changed in Step 4 of the GUI).

Note that a naive computation of the determinant of the FIM would often results in accumulation of rounding errors. In PopED lite the log of the determinant of the FIM is calculated by summing the log of the diagonal elements of its Cholesky decomposition and multiplying the sum by two. If Cholesky decomposition cannot be computed due to a singularity of the FIM, the log of the determinant of such matrices will be set to −1010 and not to negative infinity. In this way, PopED lite selects the experimental design with the least possibility of an unidentifiable system.

As alternatives to (11), the following robust criteria are implemented in PopED lite (can be set in Step 4 in the GUI):
                           
                              (12)
                              
                                 
                                    
                                       
                                          ξ
                                       
                                    
                                    *
                                 
                                 =
                                 
                                    argmin
                                    
                                       
                                          
                                             ξ
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             min
                                             j
                                          
                                          
                                             
                                                
                                                   log
                                                   (
                                                   det
                                                   (
                                                   FIM
                                                   (
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                      
                                                      j
                                                   
                                                   ;
                                                   
                                                      
                                                         ξ
                                                      
                                                   
                                                   )
                                                   )
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                    
                                       
                                          ξ
                                       
                                    
                                    *
                                 
                                 =
                                 
                                    argmin
                                    
                                       
                                          
                                             ξ
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             median
                                             j
                                          
                                          
                                             
                                                
                                                   log
                                                   (
                                                   det
                                                   (
                                                   FIM
                                                   (
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                      
                                                      j
                                                   
                                                   ;
                                                   
                                                      
                                                         ξ
                                                      
                                                   
                                                   )
                                                   )
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        
                     

As a second option, consider the case when a given subset of the parameters is of particular interest. The robust optimal design is then calculated as
                           
                              (14)
                              
                                 
                                    
                                       
                                          ξ
                                       
                                    
                                    *
                                 
                                 =
                                 
                                    argmin
                                    
                                       
                                          
                                             ξ
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                                
                                                   j
                                                   =
                                                   1
                                                
                                                N
                                             
                                             log
                                             
                                                
                                                   
                                                      
                                                         
                                                            det
                                                            (
                                                            FIM
                                                            (
                                                            
                                                               
                                                                  
                                                                     θ
                                                                  
                                                               
                                                               j
                                                            
                                                            ;
                                                            
                                                               
                                                                  ξ
                                                               
                                                            
                                                            )
                                                            )
                                                         
                                                         
                                                            det
                                                            (
                                                            
                                                               FIM
                                                               
                                                                  ∖
                                                                  subset
                                                               
                                                            
                                                            (
                                                            
                                                               
                                                                  
                                                                     θ
                                                                  
                                                               
                                                               j
                                                            
                                                            ;
                                                            
                                                               
                                                                  ξ
                                                               
                                                            
                                                            )
                                                            )
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          /
                                          N
                                       
                                    
                                 
                                 ,
                              
                           
                        where ∖subset denotes the complement of the subset of the parameters of particular interest (i.e., subset of parameters of no-interest). If only one parameter is chosen to be of interest, the above optimization criterion reduces to optimizing for the CV for that particular parameter. EDs optimal design is used when the options “Optimize the Design for the parameter estimation accuracy of” is set to be either “PK parameters only” or “PD parameters only” in Step 2 in the GUI. As an alternative to Eq. (14), the following criterion can be optionally used in PopED lite (Step 4 in the GUI):
                           
                              (15)
                              
                                 
                                    
                                       
                                          ξ
                                       
                                    
                                    *
                                 
                                 =
                                 
                                    argmin
                                    
                                       
                                          
                                             ξ
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             N
                                          
                                          log
                                          
                                             
                                                
                                                   det
                                                   (
                                                   
                                                      FIM
                                                      subset
                                                   
                                                   (
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                      
                                                      j
                                                   
                                                   ;
                                                   
                                                      
                                                         ξ
                                                      
                                                   
                                                   )
                                                   )
                                                
                                             
                                          
                                          /
                                          N
                                       
                                    
                                 
                                 .
                              
                           
                        
                     

In this appendix, we describe the discrete optimization algorithms we have implemented in PopED lite. To avoid local convergence and to take advantage of the discrete nature of the optimization problem, we have constructed stochastic algorithms to find an approximately optimal design in a reasonable computational time. These algorithms are made specifically to address the discrete constrained optimisation problem that appeared as a result of the design of PopED lite.

Consider the problem of choosing N
                        obs observation points from N
                        disc discrete possible observation points. For example, if N
                        obs
                        =10 and N
                        disc
                        =120 there are over 1014 possible combinations and an exhaustive search is not computationally feasible. Roughly speaking, our algorithm aims to randomly search for the best design; however, for each iteration the probability of the randomly chosen observation points are adjusted based on the previous evaluation of the experimental designs. The key feature of this weighted random search algorithm is that each individual weight is defined by the combination of a pair of possible observation points, and that all weights then can be stored in a matrix (i.e., the ith row jth column of the weight matrix represents the probability of choosing ith possible observation point given jth possible observation point is already chosen to be an observation point).

Let ϕ(D) be a scalar function that takes a subset of natural numbers and returns a scalar value that we aim to maximize (e.g., the subset of the natural numbers corresponds to the discrete time points in the possible observation time window and the scalar value corresponds to the determinant of the Fisher Information Matrix), i.e.
                           
                              (16)
                              
                                 ϕ
                                 :
                                 
                                    
                                       D
                                    
                                 
                                 →
                                 
                                    
                                       ℝ
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              D
                           
                         is the space of all the subsets of the natural numbers between 1 and N
                        disc whose size is N
                        obs. Note that size of 
                           
                              D
                           
                         is N
                        disc
                        !/((N
                        disc
                        −
                        N
                        obs)!
                        N
                        obs
                        !) which grows rapidly as N
                        disc increases when N
                        obs is fixed.

All the vectors that can potentially appear as a row of the Jacobian (7), for any design, that is used to construct the FIM can be precomputed before the start of the sampling time optimization. Hence the evaluation of each experimental design does not require any PK/PD model simulation during the optimization and is hence not very computationally intensive. As a result, the computational cost of storing and checking already evaluated designs exceeds the computational cost of the redundant evaluation of the same design. Thus the weighted random search algorithm for the sampling time optimization allows the redundant evaluation of the same design.

The algorithm is defined as follows:


                        Pseudocode
                     

Construct an N
                        disc
                        ×
                        N
                        disc matrix A with all elements assigned to 1. (This matrix A stores the pairwise weights for the random search and updated after each iteration.)

For m
                        =1, b, …, N
                        iter
                     

  For l
                        =1, 2, …, N
                        test
                     

  Reset the temporary weight matrix B to be the weight matrix A and empty the set D
                        
                           l
                        , i.e.,
                           
                              (17)
                              
                                 B
                                 =
                                 A
                              
                           
                        
                        
                           
                              (18)
                              
                                 
                                    D
                                    l
                                 
                                 =
                                 ∅
                                 .
                              
                           
                          Uniformly randomly choose a natural number between 1 and N
                        disc and let it be i and add it to the set D
                        
                           l
                        .

  Set the ith row of the temporary weight matrix B to be 0, i.e.,
                           
                              (19)
                              
                                 
                                    b
                                    ij
                                 
                                 =
                                 0
                                 
                                 for all 
                                 j
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 
                                    N
                                    disc
                                 
                                 .
                              
                           
                          For n
                        =2, 3, …, N
                        obs
                     

    Randomly choose a natural number between 1 and N
                        disc with the probability
                           
                              (20)
                              
                                 
                                    
                                       
                                          b
                                          ki
                                       
                                    
                                    
                                       
                                          ∑
                                          
                                             k
                                             =
                                             1
                                          
                                          
                                             
                                                N
                                                disc
                                             
                                          
                                       
                                       
                                          b
                                          ki
                                       
                                    
                                 
                                 
                                 for 
                                    
                                 k
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 
                                    N
                                    disc
                                 
                                 ,
                              
                           
                            and let it be i and add it to the set D
                        
                           l
                        .

    Set the ith row of the temporary weight matrix B to be 0 so that the ith sampling time will not be

    chosen again, i.e.,
                           
                              (21)
                              
                                 
                                    b
                                    ij
                                 
                                 =
                                 0
                                 
                                 for all 
                                 j
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 
                                    N
                                    disc
                                 
                                 .
                              
                           
                            End for

  End for

  Find 
                           
                              D
                              m
                              *
                           
                         such that


                        
                           
                              (22)
                              
                                 ϕ
                                 (
                                 
                                    D
                                    m
                                    *
                                 
                                 )
                                 =
                                 
                                    max
                                    
                                       l
                                       =
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       ,
                                       
                                          N
                                          test
                                       
                                    
                                 
                                 ϕ
                                 (
                                 
                                    D
                                    l
                                 
                                 )
                                 
                                 .
                              
                           
                          Update the weight matrix A as follows


                        
                           
                              (23)
                              
                                 
                                    a
                                    ij
                                 
                                 =
                                 
                                    a
                                    ij
                                 
                                 +
                                 1
                                 
                                 
                                    for
                                       
                                    all
                                 
                                    
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 
                                    D
                                    m
                                    *
                                 
                                 ×
                                 
                                    D
                                    m
                                    *
                                 
                                 .
                              
                           
                        
                     

End for

Return the best subset D
                        * such that


                        
                           
                              (24)
                              
                                 ϕ
                                 (
                                 
                                    D
                                    *
                                 
                                 )
                                 =
                                 
                                    max
                                    
                                       m
                                       =
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       ,
                                       
                                          N
                                          iter
                                       
                                    
                                 
                                 ϕ
                                 (
                                 
                                    D
                                    m
                                    *
                                 
                                 )
                                 
                                 .
                              
                           
                        
                     

The search algorithm assumes that multiple observations at the same point are not allowed. Consequently, the probability of selecting an already chosen point is assigned zero at (19) and (21). If multiple sampling for the same time point is allowed then simply omit (19) and (21) from the algorithm. If sampling from two consecutive discrete possible observation points is not allowed (e.g. since the animal needs to rest between sampling points) the rows adjacent to the ith row can be set to zero as well.

Note that the algorithm reduces to a pure random search if the weight matrix is not updated at (23). As a default, PopED lite uses the weighted random search algorithm for sampling time optimization without possibility of multiple sampling from the same time point.

Further extension of the algorithm such as defining the weights as a tensor so that the weight given the combination of more than two observation points can be stored is possible.

Consider the problem where N
                        doses doses are given and each dose needs to be chosen between d
                        min and d
                        max. We first discretize the possible dose range into N
                        pd possible doses 
                           {
                           
                              d
                              1
                           
                           ,
                           
                              d
                              2
                           
                           ,
                           
                              d
                              3
                           
                           ,
                           …
                           ,
                           
                              d
                              
                                 
                                    N
                                    pd
                                 
                              
                           
                           }
                        , where d
                        
                           i
                        
                        ≠
                        d
                        
                           j
                         if i
                        ≠
                        j and d
                        min
                        ≤
                        d
                        
                           i
                        
                        ≤
                        d
                        max. We now wish to obtain a vector of N
                        doses indices [i, j, k, l, …] to maximize the optimization criterion when dose amount d
                        
                           i
                         is given at the first dose event, d
                        
                           j
                         is given at the second dose event, etc. Note that there are (N
                        pd)
                           N
                           doses
                         possible dose combinations and that the number grows rapidly as N
                        doses increases. It is therefore often not feasible to conduct an exhaustive search for a multiple dose experiment. Instead, we randomly search through the possible dose combinations and select the best dose combination. To save computation time, this weighted random search algorithm is designed to avoid evaluation of previously evaluated designs.

Note that this optimization problem is fundamentally different from the sampling-time optimization problem, as for the sampling time optimization, we aim to find the optimal subset of indices (i.e., the order of the indices does not matter) while for the dosage optimization we aim to find a vector of indices (i.e., the order of the indices matters).

For this dosage optimization algorithm, we construct an ordered tree to store the weights. This tree is constructed by nodes storing the weights 
                           w
                         and edges storing weight biases c. Each path of the tree represents the design of an experiment, for example the path reaches from the root to a leaf following i, j, kth edges represents the experimental design vector [i, j, k] (i.e., d
                        
                           i
                         as the first dose, d
                        
                           j
                         as the second dose and d
                        
                           k
                         as the last dose). An example of the tree is depicted in Fig. 3
                        .

Weight bias c defines the fundamental importance of the possible dosage that is represented as edges in the tree. For example, if there are 10 possible dose levels for each dosing time, it is wise to search for a reasonably good combination of high, medium, or low doses in a first step, and then fine tune the dose levels in a second step. Hence, in this case we put more weight bias to these three doses, and lower weight bias to the rest. By choosing the weight bias c this way, the algorithm will most probably first search through the optimal combination between high, medium and low doses and then conduct the fine tuning during the remaining search. Weight bias c remain the same throughout the search.

The variable 
                           w
                         is a weight of the probability of choosing the dosage that is represented by the edge connected to the parent node. For example, 
                           
                              w
                              ij
                           
                         (the weight stored in the node that can be reached by path i, j from the root node) is the weight for the random choice where jth possible dosage should be chosen as a second dosage given ith possible dosage is chosen for the first dosage. The weight 
                           w
                         depends on the weights of all the descendent nodes. For the nodes that are leaves the weights 
                           w
                         are initially defined as weight bias c of the connecting edge and after each evaluation of the design, the weight of the corresponding leaf is reduced to zero to avoid the redundant evaluation of the same design. Hence the weights 
                           w
                         are recalculated after each design evaluation.

We describe the algorithm more in detail using an example with N
                        doses
                        =3. The extension to other cases is trivial.

The weights of the nodes are defined as follows:
                           
                              (25)
                              
                                 
                                    w
                                    i
                                 
                                 =
                                 
                                    c
                                    i
                                 
                                 
                                    ∑
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       
                                          N
                                          pd
                                       
                                    
                                 
                                 
                                    w
                                    ij
                                 
                              
                           
                        
                        
                           
                              (26)
                              
                                 
                                    w
                                    ij
                                 
                                 =
                                 
                                    c
                                    j
                                 
                                 
                                    ∑
                                    
                                       k
                                       =
                                       1
                                    
                                    
                                       
                                          N
                                          pd
                                       
                                    
                                 
                                 
                                    w
                                    ijk
                                 
                              
                           
                        
                        
                           
                              (27)
                              
                                 
                                    w
                                    ijk
                                 
                                 =
                                 
                                    c
                                    k
                                 
                                 
                                 for all 
                                    
                                 i
                                 ,
                                 j
                                 ,
                                 k
                                 .
                              
                           
                        
                     

We consider the case where we randomly choose N
                        search dose combinations and pick the best dose combination among them.


                        Pseudocode
                     

For m
                        =1, 2, …, N
                        search
                        
                           
                              •
                              Randomly choose an integer l between 1 and N
                                 pd with the probability 
                                    
                                       w
                                       l
                                    
                                    /
                                    
                                       ∑
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          
                                             N
                                             pd
                                          
                                       
                                    
                                    
                                       w
                                       i
                                    
                                 , and let i
                                 =
                                 l.

Randomly choose an integer l between 1 and N
                                 pd with the probability 
                                    
                                       w
                                       il
                                    
                                    /
                                    
                                       ∑
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             N
                                             pd
                                          
                                       
                                    
                                    
                                       w
                                       ij
                                    
                                 , and let j
                                 =
                                 l.

Randomly choose an integer l between 1 and N
                                 pd with the probability 
                                    
                                       w
                                       ijl
                                    
                                    /
                                    
                                       ∑
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          
                                             N
                                             pd
                                          
                                       
                                    
                                    
                                       w
                                       ijk
                                    
                                 , and let k
                                 =
                                 l.

Evaluate the design with dose amount d
                                 
                                    i
                                  at the first dose time, dose amount d
                                 
                                    j
                                  at the second dose time, and dose amount d
                                 
                                    k
                                  at the third dose time. If this design is better than the one found previously keep this design, else discard.

Let 
                                    
                                       w
                                       ijk
                                    
                                    =
                                    0
                                  so that the dose combination of ijk will not be redundantly evaluated during the following search.

Recalculate the weights following (25)–(26).

End for

Return the best design.

Note that the weight calculation needs to be implemented recursively so that the weight can be calculated for any N
                        doses. In addition, to reduce the computational cost of constructing the tree, we construct only the necessary part of the tree to calculate the new weights after each search iteration. Note that this algorithm avoids the redundant evaluation of the design; hence if N
                        search is sufficiently large for given N
                        doses and N
                        pd, the search is exhaustive. In addition, avoiding redundant evaluation of the same design is crucial for the dosage optimisation as each evaluation of the design requires PK/PD model evaluation and can be computationally intensive.

The weight bias c of this algorithm is set to one in the current version of PopED lite. Future work may include changing c dynamically throughout the search.

To optimize both dose and sampling time, conduct sampling time optimization at each search iteration in the dose optimization.

In order to compare the required user input, accuracy, and computation time of our software tool with a conventional tool, we have conducted optimal design calculation of Case Study 1 using PopED in R [18,20].

In order to conduct a fairer comparison, the third author (the developer of PopED in R) has written the model file (partially in C). All the required script to obtain the optimized experimental design for Case Study 1 is included below.


                        
                           
                              
                              
                              
                           
                        
                     

The comparison of the computation time between PopED lite and PopED in R is presented in Table 4
                        . PopED lite was 2–200 times faster than PopED in R. We have quantified the accuracy of the optimal design calculated by PopED lite and PopED in R using efficiency, defined as follows:

For PK/PD optimization:
                           
                              (28)
                              
                                 
                                    Design
                                       
                                    efficiency
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         j
                                                         =
                                                         1
                                                      
                                                      N
                                                   
                                                   log
                                                   
                                                      
                                                         
                                                            det
                                                            (
                                                            FIM
                                                            (
                                                            
                                                               
                                                                  
                                                                     θ
                                                                  
                                                               
                                                               j
                                                            
                                                            ;
                                                            
                                                               
                                                                  
                                                                     ξ
                                                                  
                                                               
                                                               1
                                                            
                                                            )
                                                            )
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      ∑
                                                      
                                                         j
                                                         =
                                                         1
                                                      
                                                      N
                                                   
                                                   log
                                                   
                                                      
                                                         
                                                            det
                                                            (
                                                            FIM
                                                            (
                                                            
                                                               
                                                                  
                                                                     θ
                                                                  
                                                               
                                                               j
                                                            
                                                            ;
                                                            
                                                               
                                                                  
                                                                     ξ
                                                                  
                                                               
                                                               2
                                                            
                                                            )
                                                            )
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       1
                                       /
                                       
                                          number
                                             
                                          of
                                             
                                          parameters
                                       
                                    
                                 
                              
                           
                        
                     

For PD only optimization:


                        
                           
                              (29)
                              
                                 
                                    Design
                                       
                                    Efficiency
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                            
                                                               j
                                                               =
                                                               1
                                                            
                                                            N
                                                         
                                                         log
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        det
                                                                        (
                                                                        FIM
                                                                        (
                                                                        
                                                                           
                                                                              
                                                                                 θ
                                                                              
                                                                           
                                                                           j
                                                                        
                                                                        ;
                                                                        
                                                                           
                                                                              
                                                                                 ξ
                                                                              
                                                                           
                                                                           1
                                                                        
                                                                        )
                                                                        )
                                                                     
                                                                     
                                                                        det
                                                                        (
                                                                        
                                                                           FIM
                                                                           
                                                                              ∖
                                                                              subset
                                                                           
                                                                        
                                                                        (
                                                                        
                                                                           
                                                                              
                                                                                 θ
                                                                              
                                                                           
                                                                           j
                                                                        
                                                                        ;
                                                                        
                                                                           
                                                                              
                                                                                 ξ
                                                                              
                                                                           
                                                                           1
                                                                        
                                                                        )
                                                                        )
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                         /
                                                         N
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                            
                                                               j
                                                               =
                                                               1
                                                            
                                                            N
                                                         
                                                         log
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        det
                                                                        (
                                                                        FIM
                                                                        (
                                                                        
                                                                           
                                                                              
                                                                                 θ
                                                                              
                                                                           
                                                                           j
                                                                        
                                                                        ;
                                                                        
                                                                           
                                                                              
                                                                                 ξ
                                                                              
                                                                           
                                                                           2
                                                                        
                                                                        )
                                                                        )
                                                                     
                                                                     
                                                                        det
                                                                        (
                                                                        
                                                                           FIM
                                                                           
                                                                              ∖
                                                                              subset
                                                                           
                                                                        
                                                                        (
                                                                        
                                                                           
                                                                              
                                                                                 θ
                                                                              
                                                                           
                                                                           j
                                                                        
                                                                        ;
                                                                        
                                                                           
                                                                              
                                                                                 ξ
                                                                              
                                                                           
                                                                           2
                                                                        
                                                                        )
                                                                        )
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                         /
                                                         N
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       1
                                       /
                                       
                                          number
                                             
                                          of
                                             
                                          parameters
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ξ
                                                
                                             
                                             1
                                          
                                       
                                       
                                          :
                                       
                                       
                                          
                                             optimal
                                                
                                             design
                                                
                                             obtained
                                                
                                             by
                                                
                                             PopED
                                                
                                             in
                                                
                                             R
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   ξ
                                                
                                             
                                             2
                                          
                                       
                                       
                                          :
                                       
                                       
                                          
                                             optimal
                                                
                                             design
                                                
                                             obtained
                                                
                                             by
                                                
                                             PopED
                                                
                                             lite
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                     

As can be seen in Table 4, PopED in R performed better in terms of the accuracy of the optimized design for all tests.

It should be noted that we have used the optimal design obtained by PopED lite as the initial guess of the optimal design when using PopED in R while PopED lite does not require any initial guess of the optimal design.

@&#REFERENCES@&#

