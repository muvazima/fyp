@&#MAIN-TITLE@&#Scheduling the part supply of mixed-model assembly lines in line-integrated supermarkets

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The novel part logistics concept of line-integrated supermarkets in order to supply assembly lines is introduced.


                        
                        
                           
                           For this concept, the novel problem of scheduling the part supply of logistics workers is formalized.


                        
                        
                           
                           We introduce efficient solution procedures for solving this problem.


                        
                        
                           
                           Important managerial aspects, e.g., the impact of the heijunka-principle, are investigated in our computational study.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

In-house logistics

Mixed-model assembly lines

Automobile industry

Part supply

@&#ABSTRACT@&#


               
               
                  Line-integrated supermarkets constitute a novel in-house parts logistics concept for feeding mixed-model assembly lines. In this context, supermarkets are decentralized logistics areas located directly in each station. Here, parts are withdrawn from their containers by a dedicated logistics worker and sorted just-in-sequence (JIS) into a JIS-bin. From this bin, assembly workers fetch the parts required by the current workpiece and mount them during the respective production cycle. This paper treats the scheduling of the part supply processes within line-integrated supermarkets. The scheduling problem for refilling the JIS-bins is formalized and a complexity analysis is provided. Furthermore, a heuristic decomposition approach is presented and important managerial aspects are investigated.
               
            

@&#INTRODUCTION@&#

In the wake of an ever increasing product variety offered to fulfill highly diversified customer demands, parts logistics has become one of the greatest challenges in modern automobile production. For instance, at the average sized automobile plant in Dingolfing (Germany) of BMW more than 13,000 containers of parts arriving on more than 400 trucks need to be processed and delivered in a timely manner to the final assembly line each day (Battini, Boysen, & Emde, 2013). The main purpose of parts logistics is to never let the final assembly line run out of parts, because, in the worst case, a stock-out necessitates a line-stoppage with hundreds of assembly workers being idle. In this context, there is a long-lasting and still ongoing dispute among practitioners and researchers alike on the right in-house supply processes (Bozer & McGinnis, 1992; Brynzér & Johansson, 1995; Hua & Johnson, 2010; Limére, Van Landeghem, Goetschalckx, Aghezzaf, & McGinnis, 2012). The basic alternatives are denoted as line stocking and kitting:
                        
                           •
                           In the former concept, parts are stored in relatively large containers directly at the assembly stations. Each container is filled with identical parts, e.g., all rear-view mirrors of a specific type, so that an assembly worker has to identify the specific parts required by the current car, withdraw them from the respective containers, and assemble them during the production cycle. The main advantages of line stocking are the lack of double-handling and its flexibility in case of unforeseen events (Bozer & McGinnis, 1992). Whenever a short-term alteration of the production sequence or a defective part occur, spare parts are readily available at the stations.

Kitting means that parts are sorted just-in-sequence (JIS) into relatively small bins before being finally delivered to the assembly line. The decentralized logistics areas where kits are prepared are typically denoted as supermarkets in the automobile industry (e.g., Emde, Fliedner, & Boysen, 2012). Here, kits are stored in bins and loaded onto some waggons, which are coupled to a towing vehicle. Once fully loaded, the tow train travels via a given route to the stations along the line and exchanges empty with filled part bins. A detailed description of the supermarket concept and a literature review are provided by (Battini et al., 2013). The comparatively small bins containing JIS-parts (typically stored in some easy-to-access gravity flow rack) ease the part retrieval process for the assembly workers and reduce inventory at the line where space is notoriously scarce (Bozer & McGinnis, 1992).

The novel concept of line-integrated supermarkets introduced in this paper aims to unify the advantages of kitting and line stocking. Parts are stored directly at the stations where kits are prepared by separate logistics workers. Fig. 1
                      schematically depicts this concept, which has recently been realized at a North-American plant of a major German car producer.

In a line-integrated supermarket, the storage area for parts to be assembled by the respective assembly workers is integrated into the stations and located directly next to the moving conveyor. At our project partner, this additional logistics area is a 6meters band all along the line. The interface between the assembly and the logistics area of a station is the JIS-bin (or multiple JIS-bins). From the JIS-bin, the assembly worker withdraws the part, e.g., a specific exterior mirror, required by the car having currently entered the station, and mounts it during the production cycle. The JIS-bin is filled with parts by a separate logistics worker, who packs the picked parts into the JIS-bin just in the right assembly sequence. The logistics worker picks the required parts from the parts containers being located in the logistics area. Each container is filled with homogeneous parts, e.g., all passenger outside mirrors of a specific color, so that the logistics worker has to visit these containers according to his/her current picking order, withdraw parts, and put them into a pick trolley accompanying the pick tour. Once the current order is picked, the worker moves the trolley to the JIS-bin and sorts parts just-in-sequence into the bin. Then, the logistics worker moves to another station in order to restart the supply process. At our project partner, the line has been subdivided into multiple segments each consisting of about a dozen successive stations serviced by a team of a handful logistics workers. Note that, additionally, the replenishment of part containers from some centralized warehouse or a nearby truck dock has to be accomplished, e.g., by forklift.

Line-integrated supermarkets make do without tow trains, so that labor is saved and the amount of double handling is reduced compared to the traditional kitting concept. Furthermore, in case of unforeseen events spare parts are readily available at the stations and the assembly workers’ effort for part retrieval is reduced to a minimum. A more detailed comparison of the pros and cons of all three alternatives is provided by the snake-chart depicted in Fig. 2
                     . These properties make line-integrated supermarkets an attractive organizational concept for in-house part supply not only in the automotive industry but for any high-variety assembly process. However, in existing facilities often irremovable machinery occupies plenty space in direct vicinity to the assembly line, so that line-integrated supermarkets are often only an option for greenfield facilities.

The novel concept gives rise to some important decision problems to be solved. This paper treats the scheduling problem of part supply in the logistics areas of the assembly stations. Given multiple stations and their deterministic part demands over time, we aim at a schedule for the refilling of JIS-bins, so that no stock-outs occur and the team size for supplying a given set of stations is minimized. Section 2 formalizes the part supply scheduling problem in line-integrated supermarkets. Then, Section 3 provides a complexity analysis of the main scheduling problem and different subproblems. Section 4 provides a heuristic decomposition approach for the basic problem setting, which is tested in a comprehensive computational study (Section 5). Specifically, we investigate the interdependencies between the part supply process and the assembly sequence of cars and compare different organizational realizations of line-integrated supermarkets. Finally, Section 6 concludes the paper.

We aim to schedule the refill events of the JIS-bins by the logistics workers in a given line segment, so that none of the stations ever runs out of parts and the team size of logistics workers is minimized. The former is always the top priority of part logistics in order to avoid costly reactions on stock-outs such as line stoppages. Although over the short run of our operational problem the employed workforce cannot be adapted, minimizing the workforce in our specific part supply setting is a suitable objective, because there are always plenty of alternative tasks on the shop floor for logistics workers to perform.

Specifically, we have a set S of assembly stations, which are to be supplied with parts over a given planning horizon consisting of 
                        
                           t
                           =
                           1
                           ,
                           …
                           ,
                           T
                        
                      production cycles. Note that the set of stations typically does not contain all stations of an assembly line but only a line segment (of successive stations), into which the line has been subdivided in a previous planning step. Each of these line segments is serviced by a specific team of logistics workers, so that our scheduling problem has to be solved for each of these line segments. Note also that all time units are normalized to the duration of a production cycle. A typical cycle time in the automobile industry ranges between 60 and 90seconds (Emde et al., 2012), so that this assumption does not seem too restrictive. For each station 
                        
                           s
                           ∈
                           S
                        
                      and all production cycles 
                        
                           t
                           =
                           1
                           ,
                           …
                           ,
                           T
                        
                      the deterministic part demand 
                        
                           
                              
                                 d
                              
                              
                                 st
                              
                           
                        
                      is assumed to be given. In the automobile industry, the production sequence is, typically, finally fixed three to four days before production starts (Emde & Boysen, 2012), so that deterministic information on the retrieval sequence of parts is readily available. As a matter of convenience, we presuppose that each station assembles merely a single part type, e.g., exterior mirrors, in all its available variants, which are collected just-in-sequence in a single JIS-bin. The adaptation required when supplying multiple parts (and applying multiple JIS-bins) per station is very straightforward; we will discuss it briefly at the end of this section. 
                        
                           
                              
                                 d
                              
                              
                                 st
                              
                           
                        
                      defines the cumulative part demand for the specific part type up to cycle t at station s. Initial inventory of parts already being stored in a JIS-bin has already been picked in the past, so that 
                        
                           
                              
                                 d
                              
                              
                                 st
                              
                           
                        
                      only covers those part demands to be picked during the planning horizon. Note that we only consider the aggregated demand per product type, e.g., all passenger’s door mirrors, but not any specific part variant, e.g., a special mirror of a specific color. Thus, there are some parts required in any cycle (e.g., rear view mirrors) and others only in a subset of cycles (e.g., sunroofs).

The assembly workers of each station may never run out of parts, so that part demands are to be fulfilled with certainty. Parts are collected in the single JIS-bin of each station 
                        
                           s
                           ∈
                           S
                        
                     , which has a given capacity for 
                        
                           
                              
                                 c
                              
                              
                                 s
                              
                           
                        
                      parts and is filled during refill events. We define a refill event as the activities of a single logistics worker moving to a station, picking a specific number of parts from the parts containers and sorting them into the JIS-bin, where all three activities are assigned a specific duration: 
                        
                           
                              
                                 δ
                              
                              
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 s
                              
                           
                        
                      defines the walking time from the current station 
                        
                           
                              
                                 s
                              
                              
                                 ′
                              
                           
                        
                      of a previous refill event to the station s of the current one, 
                        
                           p
                           (
                           a
                           ,
                           s
                           )
                        
                      represents the time for picking a number of a parts at that station from the parts containers, and 
                        
                           γ
                           (
                           a
                           ,
                           s
                           )
                        
                      defines the packing time for putting a parts into the JIS-bin of station s. In this context, we seek a schedule of refill events, so that the team size 
                        
                           |
                           W
                           |
                        
                      is minimized, where W represents the set of logistics workers servicing the respective line segment.

Applying the notation summarized in Table 1
                     , a formal definition of the part supply scheduling problem in line-integrated supermarkets (PSSP) is given in the following:

A schedule 
                        
                           Ω
                        
                      consists of a set of refill events where logistics workers put parts into the JIS-bin. Each refill event is represented by a quadruple 
                        
                           (
                           t
                           ,
                           s
                           ,
                           a
                           ,
                           w
                           )
                           ∈
                           Ω
                        
                      and defines that logistics worker 
                        
                           w
                           ∈
                           W
                        
                      has completed a refill event of the JIS-bin at station 
                        
                           s
                           ∈
                           S
                        
                      with 
                        
                           a
                           ∈
                           {
                           1
                           ,
                           …
                           ,
                           
                              
                                 c
                              
                              
                                 s
                              
                           
                           }
                        
                      parts according to the given retrieval sequence at time 
                        
                           t
                           ∈
                           {
                           1
                           ,
                           …
                           ,
                           T
                           }
                        
                     . We say a schedule is feasible if:
                        
                           •
                           for each pair of non-identical refill events 
                                 
                                    (
                                    t
                                    ,
                                    s
                                    ,
                                    a
                                    ,
                                    w
                                    )
                                    ∈
                                    Ω
                                 
                               and 
                                 
                                    (
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          w
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    ∈
                                    Ω
                                 
                               executed by the same logistics worker (
                                 
                                    w
                                    =
                                    
                                       
                                          w
                                       
                                       
                                          ′
                                       
                                    
                                 
                              ) we have 
                                 
                                    t
                                    +
                                    
                                       
                                          δ
                                       
                                       
                                          
                                             
                                                ss
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                    +
                                    p
                                    (
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    +
                                    γ
                                    (
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    ⩽
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                 
                               or 
                                 
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                    +
                                    
                                       
                                          δ
                                       
                                       
                                          
                                             
                                                s
                                             
                                             
                                                ′
                                             
                                          
                                          s
                                       
                                    
                                    +
                                    p
                                    (
                                    a
                                    ,
                                    s
                                    )
                                    +
                                    γ
                                    (
                                    a
                                    ,
                                    s
                                    )
                                    ⩽
                                    t
                                 
                              , that is, processing intervals of a worker’s refill events do not overlap,

for each pair of non-identical refill events 
                                 
                                    (
                                    t
                                    ,
                                    s
                                    ,
                                    a
                                    ,
                                    w
                                    )
                                    ∈
                                    Ω
                                 
                               and 
                                 
                                    (
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          w
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    ∈
                                    Ω
                                 
                               executed by different logistics workers (
                                 
                                    w
                                    
                                    ≠
                                    
                                    
                                       
                                          w
                                       
                                       
                                          ′
                                       
                                    
                                 
                              ) executed at the same station 
                                 
                                    (
                                    s
                                    =
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                 
                               we have 
                                 
                                    t
                                    +
                                    γ
                                    (
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    ⩽
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                 
                              , or 
                                 
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                    +
                                    γ
                                    (
                                    a
                                    ,
                                    s
                                    )
                                    ⩽
                                    t
                                 
                              , that is, a simultaneous access to a single JIS-bin by multiple workers is not possible,

for each point in time 
                                 
                                    t
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    T
                                 
                               and each station 
                                 
                                    s
                                    ∈
                                    S
                                 
                               we have 
                                 
                                    0
                                    ⩽
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          τ
                                          ,
                                          
                                             
                                                s
                                             
                                             
                                                ′
                                             
                                          
                                          ,
                                          a
                                          ,
                                          w
                                          )
                                          ∈
                                          Ω
                                          (
                                          t
                                          ,
                                          s
                                          )
                                       
                                    
                                    (
                                    a
                                    -
                                    
                                       
                                          d
                                       
                                       
                                          st
                                       
                                    
                                    )
                                    ⩽
                                    
                                       
                                          c
                                       
                                       
                                          s
                                       
                                    
                                 
                              , with 
                                 
                                    Ω
                                    (
                                    t
                                    ,
                                    s
                                    )
                                    ⊂
                                    Ω
                                 
                               being the subset of all refill events with 
                                 
                                    τ
                                    ⩽
                                    t
                                 
                               and 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    =
                                    s
                                 
                              , that is no stock-outs occur and the capacity of the JIS-bin is not exceeded.

Among all feasible schedules we seek a schedule 
                        
                           Ω
                        
                      requiring the least number of logistics workers 
                        
                           |
                           W
                           |
                        
                     .

Note that, using this problem definition, while refill events have to take place at discrete points in time t, all time-related parameters (namely 
                        
                           δ
                           ,
                           
                           p
                        
                     , and 
                        
                           γ
                        
                     ) need not be integral. Given the typical cycle times of 60–90seconds in the automotive industry, the loss of precision implied by enforcing discretely timed refills seems tolerable.

Also note that it is easily possible to adapt this problem definition to account for multiple types of parts and corresponding JIS bins per station: For each of multiple parts at a station, create a “dummy station” which only uses one part (and a single bin). Set the walking time 
                        
                           δ
                        
                      between these dummy stations to 0 and all the other parameters to the appropriate values for the particular part. Since the problem structure remains thus basically unchanged, for simplicity’s sake we will focus on the single-part-per-station case in this paper.

If logistics workers are interpreted as machines or processors, then the PSSP resembles a parallel machine scheduling problem with sequence-dependent setup times (e.g., see the survey paper of Allahverdi, Gupta, & Aldowaisan, 1999). However, there are two fundamental deviations of the PSSP from traditional machine scheduling. First, jobs (refill events) have no conventional due date or deadline, but participate in supplying multiple time-varying demands. Scheduling with time-varying demand has only recently been treated by Boysen, Bock, and Fliedner (2013). However, they presuppose fixed processing times of jobs, which leads to the second specific aspect of the PSSP. Refill events have no fixed processing time, but depend on the variable number of parts filled into a refill bin. In machine scheduling, variable task times have only been treated in the context of so-called moldable (or malleable) tasks (e.g., see the survey of Dutot, Mounié, & Trystram, 2004). The processing time of these tasks, however, varies with the number of processors executing a job (and not with their variable content). Not only every single refill event but also the complete part supply process at each station could be interpreted as a job. Interrupting this process when changing to another station is then comparable with a job preemption. Later on continuing the job then requires some additional time penalty (for walking to the station and accessing the JIS bin). Such a generalized preemption concept including penalties in the single machine case is, e.g., investigated by Liu and Cheng (2002, 2004) and Agnetis, Alfieri, and Nicosia (2009). However, simply assigning each job a deadline is not sufficient to model the time varying-demand over the complete planning horizon.

In a similar vein, the PSSP also bears some resemblance to a capacitated lot-sizing and scheduling problem with parallel machines and sequence-dependent setup times (Quadt & Kuhn, 2008; Meyr, 2002), where workers can be interpreted as parallel machines, stations as products, and walking, picking, and packing times as setup times. However, lot-sizing models usually concern themselves with minimizing the number of setups and the amount of inventory, not with minimizing the number of machines (workers). Models and algorithms from the literature are therefore not immediately applicable. Consequently, the PSSP constitutes a novel real-world scheduling problem not yet treated in the literature.

In this section, we provide a complexity analysis. First, NP-hardness for the PSSP is proven. Then, different subproblems solvable in polynomial time are investigated, which we will later use in order to construct efficient heuristics.
                        Proposition 3.1
                        
                           The PSSP is NP-hard in the strong sense.
                        

The complexity proof is based on a reduction from 3-Partition, which is well-known to be NP-hard in the strong sense (see Garey & Johnson, 1979) and is defined in the following:

Any instance of 3-Partition is defined by an integer 
                        
                           B
                           ∈
                           
                              
                                 Z
                              
                              
                                 +
                              
                           
                        
                      and a set G (with 
                        
                           |
                           G
                           |
                           =
                           3
                           q
                        
                     ) containing integers 
                        
                           B
                           /
                           4
                           <
                           
                              
                                 g
                              
                              
                                 j
                              
                           
                           <
                           B
                           /
                           2
                           ,
                           
                           ∀
                           j
                           =
                           1
                           ,
                           …
                           ,
                           3
                           q
                        
                     . The problem is to find a partition of set G into q disjoint subsets 
                        
                           
                              
                                 
                                    
                                       
                                          G
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          G
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          G
                                       
                                       
                                          q
                                       
                                    
                                 
                              
                           
                        
                      such that 
                        
                           
                              
                                 ∑
                              
                              
                                 j
                                 ∈
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                              
                           
                           
                           
                              
                                 g
                              
                              
                                 j
                              
                           
                           =
                           B
                        
                      for each 
                        
                           i
                           =
                           1
                           ,
                           …
                           ,
                           q
                        
                      or to prove that no such partition exists.
                        Proof
                        We reduce 3-Partition to PSSP as follows. Given an instance of 3-Partition we introduce 
                              
                                 |
                                 S
                                 |
                                 =
                                 3
                                 q
                              
                            stations and the planning horizon is set to 
                              
                                 T
                                 =
                                 B
                              
                           . In each station 
                              
                                 s
                                 ∈
                                 S
                              
                            there is only a single demand event in the last period, so that 
                              
                                 
                                    
                                       d
                                    
                                    
                                       sT
                                    
                                 
                                 =
                                 1
                                 ,
                                 
                                 ∀
                                 s
                                 ∈
                                 S
                              
                           , and 
                              
                                 
                                    
                                       d
                                    
                                    
                                       st
                                    
                                 
                                 =
                                 0
                                 ,
                                 
                                 ∀
                                 s
                                 ∈
                                 S
                                 ;
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                                 -
                                 1
                              
                           . Furthermore, there is no walking time between stations and no packing time for JIS-bins with capacity 
                              
                                 
                                    
                                       c
                                    
                                    
                                       s
                                    
                                 
                                 =
                                 1
                                 ,
                                 
                                 ∀
                                 s
                                 ∈
                                 S
                              
                           , so that 
                              
                                 
                                    
                                       δ
                                    
                                    
                                       
                                          
                                             ss
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 =
                                 0
                                 ,
                                 
                                 ∀
                                 s
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 S
                              
                           , and 
                              
                                 γ
                                 (
                                 1
                                 ,
                                 s
                                 )
                                 =
                                 0
                              
                           , 
                              
                                 ∀
                                 s
                                 ∈
                                 S
                              
                           , respectively. Finally, the time for picking the single part required at each station is the counterpart of the integer values of 3-Partition: 
                              
                                 p
                                 (
                                 1
                                 ,
                                 j
                                 )
                                 =
                                 
                                    
                                       g
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 
                                 ∀
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 3
                                 q
                              
                           . The question we ask is whether there is a solution with a maximum team size 
                              
                                 |
                                 W
                                 |
                                 ⩽
                                 q
                              
                           .

A feasible solution for an instance of 3-Partition can be transformed to a feasible solution of the corresponding instance of PSSP in polynomial time by assigning the refill events corresponding to each of the q sets of the 3-Partition certificate to a separate logistics worker. Clearly, the resulting instance of PSSP is feasible, because each worker has exactly B time units to execute his/her refill events without overlap.

On the other hand, a feasible solution for an instance of PSSP is also a feasible solution for the corresponding 3-Partition instance since the total workload of exactly three refill events for each worker must equal B. Note that a worker having a workload of less than B must be compensated by another worker having a workload of more than B.□

Now, we investigate two special cases of PSSP solvable in polynomial time. First, we investigate the feasibility problem for a single logistics worker at a single station.
                        Proposition 3.2
                        
                           The special case of the PSSP (denoted as PSSP′) whether a feasible schedule for a single station 
                           
                              
                                 |
                                 S
                                 |
                                 =
                                 1
                              
                            
                           and a single worker 
                           
                              
                                 |
                                 W
                                 |
                                 =
                                 1
                              
                            
                           exists is solvable in 
                           
                              
                                 O
                                 (
                                 
                                    
                                       T
                                    
                                    
                                       4
                                    
                                 
                                 )
                              
                           .

For proving this proposition we generate a graph consisting of nodes 
                              
                                 (
                                 a
                                 ,
                                 t
                                 )
                              
                           , which define that a total of 
                              
                                 a
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       d
                                    
                                    
                                       sT
                                    
                                 
                                 }
                              
                            parts has been filled into the JIS-bin of current station s up to period 
                              
                                 t
                                 ∈
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 T
                                 }
                              
                           . Starting with initial node 
                              
                                 (
                                 0
                                 ,
                                 1
                                 )
                              
                            successor nodes 
                              
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                            are generated from current node 
                              
                                 (
                                 a
                                 ,
                                 t
                                 )
                              
                            and connected by an arc for all 
                              
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 a
                                 +
                                 1
                                 ,
                                 …
                                 ,
                                 a
                                 +
                                 
                                    
                                       c
                                    
                                    
                                       s
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 t
                                 +
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           , if the following conditions are met:
                              
                                 1.
                                 
                                    
                                       
                                          p
                                          (
                                          
                                             
                                                a
                                             
                                             
                                                ′
                                             
                                          
                                          -
                                          a
                                          ,
                                          s
                                          )
                                          +
                                          γ
                                          (
                                          
                                             
                                                a
                                             
                                             
                                                ′
                                             
                                          
                                          -
                                          a
                                          ,
                                          s
                                          )
                                          ⩽
                                          
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                          -
                                          t
                                       
                                    , that is there is enough time for executing the successive refill events,


                                    
                                       
                                          
                                             
                                                a
                                             
                                             
                                                ′
                                             
                                          
                                          -
                                          
                                             
                                                d
                                             
                                             
                                                
                                                   
                                                      st
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          ⩽
                                          
                                             
                                                c
                                             
                                             
                                                s
                                             
                                          
                                       
                                    , that is the capacity 
                                       
                                          
                                             
                                                c
                                             
                                             
                                                s
                                             
                                          
                                       
                                     of the JIS-bin is sufficient to receive the current parts,


                                    
                                       
                                          a
                                          ⩾
                                          
                                             
                                                d
                                             
                                             
                                                s
                                                ,
                                                
                                                   
                                                      t
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                -
                                                1
                                             
                                          
                                       
                                    , that is no stock-out occurs right before the current refill event was executed, and


                                    
                                       
                                          
                                             
                                                a
                                             
                                             
                                                ′
                                             
                                          
                                          ⩾
                                          
                                             
                                                d
                                             
                                             
                                                
                                                   
                                                      st
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                       
                                    , that is no stock-out occurs in 
                                       
                                          
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    .

Clearly, if a node already exists it need not be duplicated. Any arc connecting nodes 
                              
                                 (
                                 a
                                 ,
                                 t
                                 )
                              
                            and 
                              
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                            represents a feasible refill event finished in 
                              
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                              
                           , so that the graph generation can be stopped once 
                              
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    
                                       d
                                    
                                    
                                       s
                                    
                                 
                                 T
                              
                           . On the other hand, no feasible solution to PSSP′ exists once no feasible successor node can be generated from any existing node with 
                              
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 <
                                 
                                    
                                       d
                                    
                                    
                                       s
                                    
                                 
                                 T
                              
                            and 
                              
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 <
                                 T
                              
                           .

There are at most 
                              
                                 
                                    
                                       d
                                    
                                    
                                       sT
                                    
                                 
                                 ·
                                 T
                              
                            nodes. In each period (production cycle) there can be at most a single part in demand, so that the number of nodes is bounded by 
                              
                                 
                                    
                                       T
                                    
                                    
                                       2
                                    
                                 
                              
                           . Even if every node is connected to every other node by an arc the runtime is bounded by 
                              
                                 O
                                 (
                                 
                                    
                                       T
                                    
                                    
                                       4
                                    
                                 
                                 )
                              
                           . Note that the planning horizon T is not merely an input parameter (which would imply pseudo-polynomial runtime), but input parameters 
                              
                                 
                                    
                                       d
                                    
                                    
                                       st
                                    
                                 
                              
                            need to be specified over the complete planning horizon T. Thus, the algorithm is polynomially bounded and the proposition holds.□

Now, a special case is investigated where partially fixed schedules need to be completed with minimum workforce.
                        Proposition 3.3
                        
                           The special case of the PSSP (denoted as PSSP″) where workers are to be assigned to predetermined refill events 
                           
                              
                                 (
                                 t
                                 ,
                                 s
                                 ,
                                 a
                                 ,
                                 ?
                                 )
                              
                            
                           from a given partially fixed schedule 
                           
                              
                                 Ω
                              
                           
                           , each already having fixed time t, station s, and number a of refilled items, such that a feasible schedule with minimal team size 
                           
                              
                                 |
                                 W
                                 |
                              
                            
                           ensues, is solvable in 
                           
                              
                                 O
                                 (
                                 
                                    
                                       (
                                       |
                                       S
                                       |
                                       ·
                                       T
                                       )
                                    
                                    
                                       2.38
                                    
                                 
                                 )
                              
                           
                           .
                        

We reduce the above mentioned special case to the problem of finding a maximum matching in a bipartite graph. Given an instance of PSSP″, consider the bipartite graph 
                              
                                 G
                                 =
                                 (
                                 V
                                 ,
                                 E
                                 )
                              
                            with bipartition 
                              
                                 (
                                 P
                                 ,
                                 Q
                                 )
                              
                            where nodes of both sets represent the given (partially fixed) schedule 
                              
                                 Ω
                              
                           , so that 
                              
                                 P
                                 =
                                 Q
                                 =
                                 Ω
                              
                           . The set of edges connects a node 
                              
                                 (
                                 t
                                 ,
                                 s
                                 ,
                                 a
                                 ,
                                 w
                                 )
                                 ∈
                                 P
                              
                            to a node 
                              
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 ∈
                                 Q
                              
                           , if and only if both nodes do not refer to the same refill event and refill event 
                              
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                            can be processed after 
                              
                                 (
                                 t
                                 ,
                                 s
                                 ,
                                 a
                                 ,
                                 w
                                 )
                              
                            by the same worker, that is 
                              
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 ⩾
                                 t
                                 +
                                 
                                    
                                       δ
                                    
                                    
                                       
                                          
                                             ss
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 +
                                 p
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 +
                                 γ
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                           . In the following we will show that a maximum matching M in G corresponds to a feasible solution to PSSP″ with minimal number of workers 
                              
                                 |
                                 W
                                 |
                              
                           .

We can think of a feasible solution to the PSSP″ with 
                              
                                 |
                                 W
                                 |
                              
                            workers as a set of 
                              
                                 |
                                 W
                                 |
                              
                            chains of refill events such that each chain constitutes the set of refill events successively processed by a specific logistics worker. For each pair 
                              
                                 (
                                 (
                                 t
                                 ,
                                 s
                                 ,
                                 a
                                 ,
                                 w
                                 )
                                 ,
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 )
                              
                            of consecutive refill events in a chain choose 
                              
                                 (
                                 (
                                 t
                                 ,
                                 s
                                 ,
                                 a
                                 ,
                                 w
                                 )
                                 ,
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 )
                                 ∈
                                 E
                              
                            to be in M. Obviously, edges in M are non-adjacent since in the chains each refill event has at most one successor and at most one predecessor. For every worker 
                              
                                 w
                                 ∈
                                 W
                              
                            there will be one refill event without a predecessor, namely the first event in 
                              
                                 Ω
                              
                            the worker performs, and one event without a successor, namely the last event in 
                              
                                 Ω
                              
                            the worker performs. All other refill events performed by the worker (if any) must be consecutive and thus part of the matching. Therefore, the cardinality of the matching 
                              
                                 |
                                 M
                                 |
                              
                            equals 
                              
                                 |
                                 Ω
                                 |
                                 -
                                 |
                                 W
                                 |
                              
                           , which is maximum if the number of workers 
                              
                                 |
                                 W
                                 |
                              
                            is minimal.

Conversely, we can also construct a feasible solution to PSSP″ with minimal workforce from a maximum matching M: Choose events corresponding to nodes in Q not covered by M as first refill events in the chains. Now attach event 
                              
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                            to the end of the chain having 
                              
                                 (
                                 t
                                 ,
                                 s
                                 ,
                                 a
                                 ,
                                 w
                                 )
                              
                            as the currently last job if 
                              
                                 (
                                 (
                                 t
                                 ,
                                 s
                                 ,
                                 a
                                 ,
                                 w
                                 )
                                 ,
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 )
                                 ∈
                                 M
                              
                           . Repeat this last step until all refill events are attached to a chain. The chains obtained constitute a feasible solution to the instance of PSSP″. First, note that refill events are in the same chain only if they can be processed by the same worker due to the construction of E. Second, each refill event is contained in exactly one chain due to the matching structure. Each event must be contained in at least one chain since each node 
                              
                                 (
                                 t
                                 ,
                                 s
                                 ,
                                 a
                                 ,
                                 w
                                 )
                                 ∈
                                 Q
                              
                            either is not covered by M which makes 
                              
                                 (
                                 t
                                 ,
                                 s
                                 ,
                                 a
                                 ,
                                 w
                                 )
                              
                            the first event in a chain or is covered by M which makes 
                              
                                 (
                                 t
                                 ,
                                 s
                                 ,
                                 a
                                 ,
                                 w
                                 )
                              
                            the immediate successor of another refill event. Since no event can be its own successor each refill event which is the immediate successor of another event must be the (not necessarily immediate) successor of an event which is first in a chain. Since every chain originates in an event 
                              
                                 (
                                 t
                                 ,
                                 s
                                 ,
                                 a
                                 ,
                                 w
                                 )
                                 ∈
                                 Q
                              
                            not covered by M, the number of chains – and hence the number of workers 
                              
                                 |
                                 W
                                 |
                              
                            – is minimal when as many events in Q are covered by M as possible, which is the case if the matching is maximum.

A maximum matching in a bipartite graph can be found in 
                              
                                 O
                                 (
                                 |
                                 Ω
                                 
                                    
                                       |
                                    
                                    
                                       2.38
                                    
                                 
                                 )
                              
                           , see Mucha and Sankowski (2004). At most there can be one refill event per station in any period, so that 
                              
                                 |
                                 Ω
                                 |
                                 ⩽
                                 |
                                 S
                                 |
                                 ·
                                 T
                              
                           . Thus, the runtime is polynomially bounded and the proposition holds.□

As the PSSP was shown to be NP-hard, a heuristic solution procedure is required for solving problem instances of real-world size. Given the results of the previous section, the algorithms designed for Propositions 3.2 and 3.3 can readily be combined in a decomposition approach: First, for each station 
                           
                              s
                              ∈
                              S
                           
                         we take a random walk on the graphs designed for solving the PSSP′ within Proposition 3.2. The refill events represented by the paths taken determine a set of partially fixed refill events 
                           
                              (
                              t
                              ,
                              s
                              ,
                              a
                              ,
                              ?
                              )
                           
                         with given time t, station s, and number of refilled items a. Then, to minimize the team size for these given partially fixed refill events the matching procedure for solving PSSP″ described in Proposition 3.3 can directly be applied. This problem decomposition with a new set of random walks can be repeated until a predetermined time limit 
                           
                              Φ
                           
                         is met. A formal definition of this procedure is provided by Algorithm 1.
                           Algorithm 1
                           Heuristic decomposition approach for PSSP. 
                                 
                                    
                                 
                              
                           

Note that a problem may occur whenever no feasible solution for an instance of PSSP′ exists, that is, no single logistics worker is able to serve a station on his/her own. In this case in Proposition 3.2, Condition 1, 
                           
                              p
                              (
                              
                                 
                                    a
                                 
                                 
                                    ′
                                 
                              
                              -
                              a
                              ,
                              s
                              )
                              +
                              γ
                              (
                              
                                 
                                    a
                                 
                                 
                                    ′
                                 
                              
                              -
                              a
                              ,
                              s
                              )
                              ⩽
                              
                                 
                                    t
                                 
                                 
                                    ′
                                 
                              
                              -
                              t
                           
                        , for the existence of an arc between two refill events 
                           
                              (
                              a
                              ,
                              t
                              )
                           
                         and 
                           
                              (
                              
                                 
                                    a
                                 
                                 
                                    ′
                                 
                              
                              ,
                              t
                              )
                           
                         is to be relaxed to 
                           
                              γ
                              (
                              
                                 
                                    a
                                 
                                 
                                    ′
                                 
                              
                              -
                              a
                              ,
                              s
                              )
                              ⩽
                              
                                 
                                    t
                                 
                                 
                                    ′
                                 
                              
                              -
                              t
                           
                        . The latter allows multiple workers per station, who may, however, not interfere during packing parts from the pick trolley into the JIS-bin. For the larger Algorithm 1, this relaxation is of little consequence because the worker assignments are removed from the partially fixed refill events in any case. Therefore, it makes no real difference to the procedure as a whole if only one or multiple workers were assigned when solving the PSSP′ subproblem.

Note also that it may be impractical to take into consideration each and every random walk on the PSSP′ graph as the number of theoretically possible refill events may be huge. Therefore, it may be sufficient to only consider those random walks where the number of refill events is minimal. For example, if a station s cannot be supplied with less than three refill events, then only those solutions that consist of exactly three events are regarded as valid random walks. This way a lot of events that are unlikely to be part of the optimal solution can be pruned (meaning those where parts are brought one by one instead of batchwise to the station). In summary, this basically means that a random walk yields one solution to the PSSP′ randomly selected from the pool of all feasible solutions where the number of refill events is minimal.

One potential shortcoming of Algorithm 1 that can immediately be identified is the fact that in the final step it tries to optimize the worker assignment for the entire assembly line at once. This approach seems needlessly ambitious seeing that it is highly unlikely that there is an optimal solution where a worker serves multiple stations at opposing ends of the shop floor. Usually, we would expect that an optimal solution consists of workers handling parts at a handful of adjacent stations in order to keep unproductive walking times to a minimum. Therefore, it stands to reason that it would make sense to partition the line into segments of a couple of adjacent stations each, obtain a set of partially fixed refill events by optimizing the worker assignment for each segment separately via Algorithm 1, and finally solve the PSSP″ for the complete set of partially fixed refill events covering all stations. The rationale is that it is easier to optimize ten segments of ten stations each than one segment of one hundred stations, even if the total time limit 
                           
                              
                                 
                                    Φ
                                 
                                 
                                    ′
                                 
                              
                           
                         is the same. The procedure is outlined in Algorithm 2; we dub this the “zoning heuristic”.
                           Algorithm 2
                           Heuristic zoning approach for PSSP. 
                                 
                                    
                                 
                              
                           

Finally, instead of randomly recombining refill events in every iteration, systematic neighborhood search may also be applied. We, therefore, propose the following threshold accepting procedure (Dueck & Scheuer, 1990): A solution P is encoded as an array of length 
                           
                              |
                              S
                              |
                           
                         where each element s stands for one set of partially fixed refill events as obtained by a random walk on the PSSP′ graph for station s. The objective value 
                           
                              f
                              (
                              P
                              )
                           
                         is calculated by using all the partially fixed refill events contained in P as an input for the PSSP″, which is solved to get the minimum number of workers 
                           
                              |
                              W
                              |
                           
                        . In each iteration, a neighborhood solution 
                           
                              
                                 
                                    P
                                 
                                 
                                    ′
                                 
                              
                           
                         is created by randomly choosing one station s of the current solution P and switching out this station’s set of partially fixed refill events with another set yielded by a new random walk on the PSSP′ graph for this station. If 
                           
                              f
                              (
                              
                                 
                                    P
                                 
                                 
                                    ′
                                 
                              
                              )
                              -
                              f
                              (
                              P
                              )
                           
                         is less than the current threshold 
                           
                              τ
                           
                        , then the current solution P is replaced with 
                           
                              
                                 
                                    P
                                 
                                 
                                    ′
                                 
                              
                           
                        . Threshold 
                           
                              τ
                           
                         is initialized to some value 
                           
                              
                                 
                                    T
                                 
                                 
                                    0
                                 
                              
                           
                         and reduced to 
                           
                              τ
                              ·
                              (
                              1
                              -
                              r
                              )
                           
                         (where r is the sink rate) in each iteration. If 
                           
                              τ
                           
                         falls beneath some threshold 
                           
                              
                                 
                                    T
                                 
                                 
                                    end
                                 
                              
                           
                        , the procedure is restarted with a new random solution and 
                           
                              τ
                              ≔
                              
                                 
                                    T
                                 
                                 
                                    0
                                 
                              
                           
                        . Once the time limit 
                           
                              Φ
                           
                         is reached, the procedure is aborted and the best found solution is returned.

Furthermore, we present a mixed-integer program, which makes the PSSP solvable by a default solver. Although the NP-hard nature of PSSP will only allow solving small problem instances to optimality, these results can readily be applied to explore the optimality gap of the aforementioned heuristics. Given the notation summarized in Tables 1 and 2
                        , the PSSP can be formalized by objective function (1) and constraints (2)–(12):
                           
                              (1)
                              
                                 Minimize
                                 
                                 z
                              
                           
                        
                        
                           
                              (2)
                              
                                 subject to
                                 
                                 z
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       tsw
                                    
                                 
                                 ·
                                 w
                                 ⩾
                                 0
                                 
                                 ∀
                                 w
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       max
                                    
                                 
                                 ;
                                 
                                 s
                                 ∈
                                 S
                                 ;
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          s
                                          ∈
                                          S
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       tsw
                                    
                                 
                                 ⩽
                                 1
                                 
                                 ∀
                                 w
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       max
                                    
                                 
                                 ;
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       q
                                    
                                    
                                       tsa
                                    
                                 
                                 ⩽
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          w
                                          ∈
                                          W
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       tsw
                                    
                                 
                                 
                                 ∀
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                                 ;
                                 
                                 s
                                 ∈
                                 S
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    
                                       c
                                    
                                    
                                       s
                                    
                                 
                                 +
                                 
                                    
                                       d
                                    
                                    
                                       st
                                    
                                 
                                 ⩾
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          =
                                          1
                                       
                                       
                                          A
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                          =
                                          1
                                       
                                       
                                          t
                                       
                                    
                                 
                                 
                                    
                                       q
                                    
                                    
                                       
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                       sa
                                    
                                 
                                 ·
                                 a
                                 ⩾
                                 
                                    
                                       d
                                    
                                    
                                       st
                                    
                                 
                                 
                                 ∀
                                 s
                                 ∈
                                 S
                                 ;
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       
                                       
                                          
                                             t
                                             -
                                             
                                                
                                                   
                                                      2
                                                      -
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            tsw
                                                         
                                                      
                                                      -
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            
                                                               
                                                                  t
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            
                                                               
                                                                  s
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            w
                                                         
                                                      
                                                   
                                                
                                             
                                             ·
                                             M
                                             ⩽
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      a
                                                      =
                                                      1
                                                   
                                                   
                                                      A
                                                   
                                                
                                             
                                             
                                                
                                                   q
                                                
                                                
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   
                                                      
                                                         s
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   a
                                                
                                             
                                             ·
                                             
                                                
                                                   
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      -
                                                      
                                                         
                                                            δ
                                                         
                                                         
                                                            
                                                               
                                                                  ss
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      -
                                                      p
                                                      (
                                                      a
                                                      ,
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                      -
                                                      γ
                                                      (
                                                      a
                                                      ,
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                             ∀
                                             w
                                             =
                                             1
                                             ,
                                             …
                                             ,
                                             
                                                
                                                   w
                                                
                                                
                                                   max
                                                
                                             
                                             ;
                                             
                                             s
                                             ,
                                             
                                                
                                                   s
                                                
                                                
                                                   ′
                                                
                                             
                                             ∈
                                             S
                                             ;
                                             
                                             t
                                             ,
                                             
                                                
                                                   t
                                                
                                                
                                                   ′
                                                
                                             
                                             =
                                             1
                                             ,
                                             …
                                             ,
                                             T
                                             ;
                                             
                                             t
                                             <
                                             
                                                
                                                   t
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       
                                       
                                          
                                             t
                                             -
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      a
                                                      =
                                                      1
                                                   
                                                   
                                                      A
                                                   
                                                
                                             
                                             
                                                
                                                   q
                                                
                                                
                                                   tsa
                                                
                                             
                                             ·
                                             (
                                             p
                                             (
                                             a
                                             ,
                                             
                                                
                                                   s
                                                
                                                
                                                   ′
                                                
                                             
                                             )
                                             -
                                             γ
                                             (
                                             a
                                             ,
                                             
                                                
                                                   s
                                                
                                                
                                                   ′
                                                
                                             
                                             )
                                             )
                                             ⩾
                                             1
                                             -
                                             
                                                
                                                   
                                                      1
                                                      -
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            tsw
                                                         
                                                      
                                                   
                                                
                                             
                                             ·
                                             M
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                             ∀
                                             w
                                             =
                                             1
                                             ,
                                             …
                                             ,
                                             
                                                
                                                   w
                                                
                                                
                                                   max
                                                
                                             
                                             ;
                                             
                                             s
                                             ∈
                                             S
                                             ;
                                             
                                             t
                                             =
                                             1
                                             ,
                                             …
                                             ,
                                             T
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      w
                                                      =
                                                      1
                                                   
                                                   
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            max
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   x
                                                
                                                
                                                   tsw
                                                
                                             
                                             ·
                                             t
                                             -
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      w
                                                      =
                                                      1
                                                   
                                                   
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            max
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   x
                                                
                                                
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   sw
                                                
                                             
                                             ·
                                             
                                                
                                                   t
                                                
                                                
                                                   ′
                                                
                                             
                                             +
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      a
                                                      =
                                                      1
                                                   
                                                   
                                                      A
                                                   
                                                
                                             
                                             
                                                
                                                   q
                                                
                                                
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   sa
                                                
                                             
                                             ·
                                             γ
                                             (
                                             a
                                             ,
                                             s
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                             ⩽
                                             
                                                
                                                   
                                                      3
                                                      -
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            
                                                               
                                                                  stt
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      -
                                                      
                                                         
                                                            
                                                               ∑
                                                            
                                                            
                                                               w
                                                               =
                                                               1
                                                            
                                                            
                                                               
                                                                  
                                                                     w
                                                                  
                                                                  
                                                                     max
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                      (
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            tsw
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            
                                                               
                                                                  t
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            sw
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             ·
                                             M
                                             
                                             ∀
                                             s
                                             ∈
                                             S
                                             ;
                                             
                                             t
                                             ,
                                             
                                                
                                                   t
                                                
                                                
                                                   ′
                                                
                                             
                                             =
                                             1
                                             ,
                                             …
                                             ,
                                             T
                                             ;
                                             
                                             t
                                             
                                             ≠
                                             
                                             
                                                
                                                   t
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       y
                                    
                                    
                                       
                                          
                                             stt
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 +
                                 
                                    
                                       y
                                    
                                    
                                       
                                          
                                             st
                                          
                                          
                                             ′
                                          
                                       
                                       t
                                    
                                 
                                 ⩾
                                 1
                                 
                                 ∀
                                 s
                                 ∈
                                 S
                                 ;
                                 
                                 t
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                                 ;
                                 
                                 t
                                 
                                 ≠
                                 
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       x
                                    
                                    
                                       tsw
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ;
                                 1
                                 }
                                 
                                 ∀
                                 w
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       max
                                    
                                 
                                 ;
                                 
                                 s
                                 ∈
                                 S
                                 ;
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       q
                                    
                                    
                                       tsa
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ;
                                 1
                                 }
                                 
                                 ∀
                                 a
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 A
                                 ;
                                 
                                 s
                                 ∈
                                 S
                                 ;
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                    
                                       y
                                    
                                    
                                       
                                          
                                             stt
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ;
                                 1
                                 }
                                 
                                 ∀
                                 s
                                 ∈
                                 S
                                 ;
                                 
                                 t
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                                 ;
                                 
                                 t
                                 
                                 ≠
                                 
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                        
                     

By objective function (1) the number of workers is minimized. Constraints (2) ensure that if a worker performs a refill somewhere at some time, they are counted in the objective function. By Inequalities (3) a worker may only perform a single refill event at a time, while (4) require that a worker is actually assigned (variables 
                           
                              
                                 
                                    x
                                 
                                 
                                    tsw
                                 
                              
                           
                        ) if parts are refilled (variables 
                           
                              
                                 
                                    q
                                 
                                 
                                    tsa
                                 
                              
                           
                        ). Constraints (5) enforce that the number of parts delivered is always such that neither stock-outs nor overloaded bins occur. If the same worker performs two refill events then, by Inequalities (6), the time difference between the two events must be sufficient to account for the walking time, the picking, and the packing. Constraints (7) make it impossible for any event to start before time 1. If two refill events take place at the same station, then one event must be done accessing the JIS-bin before the other event starts accessing it, since concurrent handling of the bin is forbidden, which is ascertained by constraints (8) and (9). Finally, (10)–(12) ensure that an event takes place either once or not at all.

Note that the maximum number of parts per refill event A can be set to 
                           
                              
                                 
                                    max
                                 
                                 
                                    s
                                    ∈
                                    S
                                 
                              
                              {
                              
                                 
                                    c
                                 
                                 
                                    s
                                 
                              
                              }
                           
                        , that is, the highest capacity of any bin, because it is impossible to handle more parts than that in any single event. Similarly, the big integer 
                           
                              M
                           
                         need not be greater than the number of production cycles T since the time difference between any two events can obviously never be greater than T. A trivial bound on the number of workers 
                           
                              
                                 
                                    w
                                 
                                 
                                    max
                                 
                              
                           
                         would be 
                           
                              T
                              ·
                              |
                              S
                              |
                           
                         since that is maximum number of possible refill events, but a much tighter bound can of course be obtained by first running a heuristic like those described in Section 4.1.

Also note that the PSSP bears some resemblance to classic capacitated lot sizing and scheduling problems (e.g., Drexl & Kimms, 1997; Karimi, Fatemi Ghomi, & Wilson, 2003). It could be said that a “setup” occurs whenever a worker performs a refill event (variable x), leading to a “production” of the number of items encoded in q. Unlike classic lot sizing models, however, “setup times” (i.e., picking and packing times) are not constant in the PSSP and, therefore, it is very difficult if not impossible to model variables q as anything but binary while preserving the linearity of the model, because the picking and packing times p and 
                           
                              γ
                           
                        , respectively, may be nonlinear functions dependent on q. However, in many practical applications the picking and packing times are indeed approximately linear in the number of picked and packed items, i.e., 
                           
                              p
                              (
                              a
                              ,
                              s
                              )
                              =
                              
                                 
                                    p
                                 
                                 
                                    s
                                 
                                 
                                    c
                                 
                              
                              +
                              
                                 
                                    p
                                 
                                 
                                    s
                                 
                                 
                                    f
                                 
                              
                              ·
                              a
                           
                         and 
                           
                              γ
                              (
                              a
                              ,
                              s
                              )
                              =
                              
                                 
                                    γ
                                 
                                 
                                    s
                                 
                                 
                                    c
                                 
                              
                              +
                              
                                 
                                    γ
                                 
                                 
                                    s
                                 
                                 
                                    f
                                 
                              
                              ·
                              a
                           
                        , for some constants 
                           
                              
                                 
                                    p
                                 
                                 
                                    s
                                 
                                 
                                    c
                                 
                              
                              ,
                              
                                 
                                    p
                                 
                                 
                                    s
                                 
                                 
                                    f
                                 
                              
                           
                        , 
                           
                              
                                 
                                    γ
                                 
                                 
                                    s
                                 
                                 
                                    c
                                 
                              
                           
                        , and 
                           
                              
                                 
                                    γ
                                 
                                 
                                    s
                                 
                                 
                                    f
                                 
                              
                           
                        . In this case, variables q can in fact be modeled as integer variables, analogously to traditional lot sizing models. For example, Inequalities (6) could be rewritten as
                           
                              
                                 t
                                 -
                                 
                                    
                                       
                                          2
                                          -
                                          
                                             
                                                x
                                             
                                             
                                                tsw
                                             
                                          
                                          -
                                          
                                             
                                                x
                                             
                                             
                                                
                                                   
                                                      t
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                w
                                             
                                          
                                       
                                    
                                 
                                 ·
                                 M
                                 ⩽
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 -
                                 
                                    
                                       δ
                                    
                                    
                                       
                                          
                                             ss
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 -
                                 
                                    
                                       
                                          
                                             
                                                p
                                             
                                             
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                             
                                                c
                                             
                                          
                                          +
                                          
                                             
                                                γ
                                             
                                             
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                             
                                                c
                                             
                                          
                                          +
                                          (
                                          
                                             
                                                p
                                             
                                             
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                             
                                                f
                                             
                                          
                                          +
                                          
                                             
                                                γ
                                             
                                             
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                             
                                                f
                                             
                                          
                                          )
                                          ·
                                          
                                             
                                                
                                                   
                                                      q
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                
                                                   
                                                      t
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                                 
                                 ∀
                                 w
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       max
                                    
                                 
                                 ;
                                 
                                 s
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 S
                                 ;
                                 t
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                                 ;
                                 
                                 t
                                 <
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    
                                       
                                          q
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    st
                                 
                              
                           
                         are integer variables encoding the number of parts replenished in station s at time t. This way, a great many binary variables are removed from the model, making it less computationally expensive to use default solvers.

In order to assess the performance of our proposed heuristic approaches, we implemented them in C# 4.0 and ran them through a series of test instances on an x64 PC with an Intel Core i7-3770 3.4gigahertz CPU and 8192megabytes of RAM. As a reference point we also used a default solver, namely CPLEX 12.5, to solve the same instances on the same PC, using the MIP-model with integer variables 
                        
                           
                              
                                 q
                              
                              
                                 ¯
                              
                           
                        
                      from Section 4.2 and bounding the number of workers 
                        
                           
                              
                                 w
                              
                              
                                 max
                              
                           
                        
                      through the best heuristic objective value.

Apart from testing the performance of the algorithms, we also investigate whether the wide-spread policy of sequencing the models to be produced during the planning horizon such that the part demand is leveled over time, i.e., the output rate variation problem, is actually helpful in facilitating in-house logistics at the assembly line. Moreover, we seek to answer the question of how restrictive the widespread policy of assigning teams of workers to fixed zones along the assembly line is.

Since there are no established test data for the PSSP, we will first describe how the instances for our computational tests were generated. The part demand at a station is determined by the production sequence of the models to be assembled during the planning horizon. If a model 
                           
                              m
                              ∈
                              M
                           
                         is assembled at station s then this model either requires the part mounted at that station (
                           
                              
                                 
                                    d
                                 
                                 
                                    s
                                 
                                 
                                    m
                                 
                              
                              =
                              1
                           
                        ) or not (
                           
                              
                                 
                                    d
                                 
                                 
                                    s
                                 
                                 
                                    m
                                 
                              
                              =
                              0
                           
                        ). Consequently, the total part demand at station s up to and including cycle t amounts to 
                           
                              
                                 
                                    d
                                 
                                 
                                    st
                                 
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                    =
                                    s
                                 
                                 
                                    t
                                 
                              
                              
                              
                                 
                                    d
                                 
                                 
                                    s
                                 
                                 
                                    
                                       
                                          π
                                       
                                       
                                          
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                          -
                                          s
                                          +
                                          1
                                       
                                    
                                 
                              
                           
                        , where 
                           
                              
                                 
                                    π
                                 
                                 
                                    t
                                 
                              
                           
                         is the model on which production begins in cycle t. Since the conveyor moves workpieces through the stations sequentially with each station being, by definition, allotted exactly one period of time per workpiece, the model that is put on the conveyor at time 
                           
                              t
                              -
                              s
                              +
                              1
                           
                         will reach station s at time t.

We generated a total of 
                           
                              |
                              M
                              |
                              =
                              250
                           
                         models, where model m demands the part mounted at station s, i.e., 
                           
                              
                                 
                                    d
                                 
                                 
                                    s
                                 
                                 
                                    m
                                 
                              
                              =
                              1
                           
                        , either if the part at station s is a common part, necessary for all models; or else with a likelihood of 10%. Otherwise 
                           
                              
                                 
                                    d
                                 
                                 
                                    s
                                 
                                 
                                    m
                                 
                              
                              =
                              0
                           
                        . We assume that about 20% of the stations (randomly selected) mount parts common to all models. The model scheduled at sequence position t is randomly drawn as 
                           
                              
                                 
                                    π
                                 
                                 
                                    t
                                 
                              
                              =
                              ⌊
                              rnd
                              (
                              |
                              M
                              |
                              /
                              2
                              ;
                              |
                              M
                              |
                              /
                              4
                              )
                              ⌋
                              ,
                              
                              ∀
                              t
                              =
                              1
                              ,
                              …
                              ,
                              T
                           
                        , where 
                           
                              rnd
                              (
                              μ
                              ,
                              σ
                              )
                           
                         is a random number drawn from a truncated normal distribution with mean 
                           
                              μ
                           
                         and standard deviation 
                           
                              σ
                           
                        , cut off at 1 and 
                           
                              |
                              M
                              |
                           
                        , respectively. The normal distribution is chosen to reflect that, in the real world, some models are more popular than others and are thus demanded more often. Note that a production sequence can of course contain multiple copies of the same model.

The size of the JIS-bin at station s is randomly generated as 
                           
                              
                                 
                                    c
                                 
                                 
                                    s
                                 
                              
                              =
                              ⌊
                              
                                 
                                    rnd
                                 
                                 
                                    uni
                                 
                              
                              (
                              5
                              ,
                              25
                              )
                              ⌉
                           
                        , where 
                           
                              
                                 
                                    rnd
                                 
                                 
                                    uni
                                 
                              
                              (
                              5
                              ,
                              25
                              )
                           
                         is a uniformly distributed random number from the interval given in brackets and 
                           
                              ⌊
                              ·
                              ⌉
                           
                         denotes rounding to the nearest integer. We assume that the JIS-bin is initially filled with enough parts to last the first five periods; any demand occurring after the fifth production cycle has to be supplied by the logistics workers. The picking and packing times, p and 
                           
                              γ
                           
                        , can typically be approximated fairly well by linear functions: Handling any parts at all always entails a constant time consumption of 
                           
                              
                                 
                                    p
                                 
                                 
                                    s
                                 
                                 
                                    c
                                 
                              
                              =
                              
                                 
                                    rnd
                                 
                                 
                                    uni
                                 
                              
                              (
                              0
                              ;
                              0.1
                              )
                           
                         (
                           
                              
                                 
                                    γ
                                 
                                 
                                    s
                                 
                                 
                                    c
                                 
                              
                              =
                              
                                 
                                    rnd
                                 
                                 
                                    uni
                                 
                              
                              (
                              0
                              ;
                              0.1
                              )
                           
                        ) at station s; this is the time it takes to access the storage container (JIS-bin) at all. For each additional part picked (packed), the time is incremented by 
                           
                              
                                 
                                    p
                                 
                                 
                                    s
                                 
                                 
                                    f
                                 
                              
                              =
                              
                                 
                                    rnd
                                 
                                 
                                    uni
                                 
                              
                              (
                              0
                              ;
                              0.25
                              )
                           
                         (
                           
                              
                                 
                                    γ
                                 
                                 
                                    s
                                 
                                 
                                    f
                                 
                              
                              =
                              
                                 
                                    rnd
                                 
                                 
                                    uni
                                 
                              
                              (
                              0
                              ;
                              0.25
                              )
                           
                        ), representing the searching and sorting effort. The time it takes to pick a parts at station s is thus calculated as 
                           
                              p
                              (
                              a
                              ,
                              s
                              )
                              =
                              
                                 
                                    p
                                 
                                 
                                    s
                                 
                                 
                                    c
                                 
                              
                              +
                              
                                 
                                    p
                                 
                                 
                                    s
                                 
                                 
                                    f
                                 
                              
                              ·
                              a
                           
                        . The pack time 
                           
                              γ
                              (
                              a
                              ,
                              s
                              )
                           
                         is calculated analogously.

Finally, the walking time from station 1 to station s is generated as follows: 
                           
                              
                                 
                                    δ
                                 
                                 
                                    1
                                    ,
                                    s
                                 
                              
                              =
                              
                                 
                                    δ
                                 
                                 
                                    1
                                    ,
                                    s
                                    -
                                    1
                                 
                              
                              +
                              
                                 
                                    rnd
                                 
                                 
                                    uni
                                 
                              
                              (
                              0
                              ,
                              2
                              )
                              ,
                              
                              ∀
                              s
                              =
                              2
                              ,
                              …
                              ,
                              |
                              S
                              |
                           
                        , where 
                           
                              
                                 
                                    δ
                                 
                                 
                                    1
                                    ,
                                    1
                                 
                              
                              =
                              0
                           
                        . Since we assume a straight assembly line (or section of an assembly line) without bends, the triangle equality must hold; meaning, if, e.g., it takes 5 periods to walk from station 1 to station 10, and 4.5 periods to get from station 1 to station 9, then the walking time from station 9 to station 10 must obviously be 0.5. Therefore, we get 
                           
                              
                                 
                                    δ
                                 
                                 
                                    s
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              =
                              
                                 
                                    δ
                                 
                                 
                                    1
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              -
                              
                                 
                                    δ
                                 
                                 
                                    1
                                    ,
                                    s
                                 
                              
                           
                         and 
                           
                              
                                 
                                    δ
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    s
                                 
                              
                              =
                              
                                 
                                    δ
                                 
                                 
                                    s
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                        .

For each combination of workstation and cycle count from Table 3
                         we generate one instance as described above. Subsequently, we randomly permute the production sequence 
                           
                              π
                           
                         19 times, thereby changing the part demands 
                           
                              
                                 
                                    d
                                 
                                 
                                    st
                                 
                              
                           
                         at the stations but otherwise leaving the instances unchanged with regard to walking times, etc., leading to a total of 
                           
                              3
                              ·
                              3
                              ·
                              20
                              =
                              180
                           
                         instances for our computational tests. They are available from the authors upon request.

First, we test the performance of our proposed heuristics by pitting them against a default solver. We parameterized the heuristics as follows: For the heuristic decomposition approach (HD, Algorithm 1) we set the time limit per instance to one of three values, 
                           
                              Φ
                              ∈
                              {
                              1
                              ,
                              60
                              ,
                              300
                              }
                           
                         seconds. The zoning heuristic (ZH, Algorithm 2) gets the same total time limit, 
                           
                              
                                 
                                    Φ
                                 
                                 
                                    ′
                                 
                              
                              =
                              Φ
                           
                        , and the stations per line segment are set to 9, thus 
                           
                              β
                              =
                              S
                              /
                              9
                           
                        . The threshold accepting metaheuristic has a start threshold of 
                           
                              
                                 
                                    T
                                 
                                 
                                    0
                                 
                              
                              =
                              5
                           
                        , an end threshold of 
                           
                              
                                 
                                    T
                                 
                                 
                                    end
                                 
                              
                              =
                              0.001
                           
                        , and a sink rate of 
                           
                              r
                              =
                              0.01
                           
                        . Its time limit is also set to 
                           
                              Φ
                           
                        . The time limit for the default solver CPLEX is set to 30minutes.


                        Table 4
                         shows the results for all three heuristics, averaged over the 20 runs per parameter constellation. Columns T and 
                           
                              |
                              S
                              |
                           
                         denote the number of cycles and stations, respectively, 
                           
                              Φ
                           
                         is the time limit per instance in seconds for each algorithm. f (TA), f (ZH), and f (HD) list the number of workers required to supply the assembly line as reported by threshold accepting (TA), zoning heuristic (ZH), and heuristic decomposition approach (HD). The last three columns contain the optimality gap for the small instances; CPLEX failed to solve the larger instances within the given time limit, often not even finding a feasible solution.

The table indicates that all three heuristic procedures perform at least fairly well on average. Unsurprisingly, TA, ZH and HD perform better if the time limit 
                           
                              Φ
                           
                         is generous, with the best results overall obtained by HD in 5minutes time, yielding a relative optimality gap of 0%. This algorithm, just like TA, could also solve all the small instances to optimality in just one minute of CPU time. For the larger instances, results improve slightly for a few instances if the time limit is increased past 
                           
                              Φ
                              =
                              60
                           
                        , but all things considered, it appears that all three algorithms already deliver near-optimal results in just a minute of runtime.

TA and HD perform very similarly for larger time limits; however, TA tends to find better solutions for the larger instances if the time limit is very tight (
                           
                              Φ
                              =
                              1
                           
                         second). ZH delivers worse results than both other algorithms in many instances but occasionally beats them. This is probably due to the fact that on the one hand, zoning restricts the solution space but on the other hand, the algorithm can iterate through a lot more solutions for a given time limit.

Regarding the objective values per se, it seems hardly surprising that a greater number of stations necessitates a greater workforce to keep the assembly line well supplied. Maybe somewhat less obviously, however, a greater number of workers is also often required if the planning horizon is long, i.e., if T is great, which can be explained by the fact that the longer the assembly system is operated without breaks, the more likely it is that unfavorable demand patterns occur, where it becomes impossible for one worker to rush from station to station quickly enough.

One common method often encountered in practice thought to avoid such unfavorable demand patterns is to determine a production sequence which levels the part demand over time, meaning, for example, that if ten models that require a certain part (e.g., a sunroof) are to be assembled during a production shift then those models should not be clustered together in the production sequence but spread out over time. This problem promoted by the Toyota production system is widely known as the output rate variation problem (ORV, e.g., Boysen, Fliedner, & Scholl, 2009; Kubiak, 1993) and we will now go on to investigate whether this approach is actually helpful in reducing the required logistics workforce at the assembly line.

Whether or not a sequence is “good” in terms of the ORV depends on how well it adheres to the ideal target consumption rate 
                           
                              
                                 
                                    r
                                 
                                 
                                    s
                                 
                              
                           
                         per station/part s, which is defined as
                           
                              
                                 
                                    
                                       r
                                    
                                    
                                       s
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             M
                                          
                                       
                                       
                                       
                                          
                                             d
                                          
                                          
                                             s
                                          
                                          
                                             m
                                          
                                       
                                       ·
                                       
                                          
                                             b
                                          
                                          
                                             m
                                          
                                       
                                    
                                    
                                       T
                                    
                                 
                                 ,
                                 
                                 ∀
                                 s
                                 ∈
                                 S
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    b
                                 
                                 
                                    m
                                 
                              
                           
                         represents the number of models of type m to be produced over a planning horizon consisting of T production cycles. In the classic objective function 
                           
                              
                                 
                                    Z
                                 
                                 
                                    ORV
                                 
                              
                           
                        , squared deviations between actual and ideal consumption are summed up over time, leading to (e.g., Bautista, Companys, & Corominas, 1996)
                           
                              (13)
                              
                                 
                                    
                                       Z
                                    
                                    
                                       ORV
                                    
                                 
                                 (
                                 V
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          t
                                          =
                                          1
                                       
                                       
                                          T
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          s
                                          ∈
                                          S
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      m
                                                      ∈
                                                      M
                                                   
                                                
                                             
                                             
                                                
                                                   d
                                                
                                                
                                                   s
                                                
                                                
                                                   m
                                                
                                             
                                             ·
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      =
                                                      1
                                                   
                                                   
                                                      t
                                                   
                                                
                                             
                                             
                                                
                                                   v
                                                
                                                
                                                   
                                                      
                                                         mt
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                             -
                                             t
                                             ·
                                             
                                                
                                                   r
                                                
                                                
                                                   s
                                                
                                             
                                          
                                       
                                    
                                    
                                       2
                                    
                                 
                                 ,
                              
                           
                        with binary variables 
                           
                              
                                 
                                    v
                                 
                                 
                                    mt
                                 
                              
                           
                         indicating whether (
                           
                              
                                 
                                    v
                                 
                                 
                                    mt
                                 
                              
                              =
                              1
                           
                        ) or not (
                           
                              
                                 
                                    v
                                 
                                 
                                    mt
                                 
                              
                              =
                              0
                           
                        ) model m is produced in cycle t.

Using Eq. (13), we can judge the sequences generated for our computational tests with regard to their ORV goodness and relate this value to the number of workers required to cater to this sequence, i.e., the PSSP objective. Table 5
                         shows the Kendall tau-b rank correlation coefficient (row 
                           
                              
                                 
                                    τ
                                 
                                 
                                    b
                                 
                              
                           
                        ), measuring the dependence between 
                           
                              
                                 
                                    Z
                                 
                                 
                                    ORV
                                 
                              
                           
                         and 
                           
                              |
                              W
                              |
                           
                        , the latter corresponding to the best result found by the heuristics per instance. Note that Kendall’s tau-b was chosen here because it makes adjustments for data with ties, seeing that in the PSSP a lot of different sequences require the same number of workers. The table also lists the minimum and maximum objective values per parameter constellation (rows min 
                        
                           
                              |
                              W
                              |
                           
                         and max 
                        
                           
                              |
                              W
                              |
                           
                        , respectively). Keeping in mind that the only thing that changes in between instances of the same parameter constellation is the production order of the very same models, it is obvious that the sequence can have a substantial impact on the solution quality. Using a favorable production sequence can easily reduce the number of required workers by at least one or two. The classic ORV goal of leveling the part demand over time, however, does not seem to be the right measure to obtain a good sequence. Our experiments do not indicate a clear correlation between the number of workers and ORV; no significant (95% confidence) correlation can be shown. In fact, in the some cases the correlation coefficient is even negative (albeit not at a statistically significant level).

The reason behind this weak relation may be that it is efficient for a worker to refill a lot of parts into the JIS-bin in one go: the time difference between packing 10 parts and packing 15 parts may not be very significant; on the other hand, the difference between packing 0 parts and packing 1 part can be quite problematic, especially if the worker has to expressly revisit the station. If the sequence is such that the part demand at a station occurs in a relatively short period of time (which is bad from the point of view of the ORV), then the worker can stay at the station and perform several large-lot refill events in succession. If the part demand is spread out over time, however, then the worker has to revisit the station multiple times over the planning horizon, leading to a lot more unproductive walking time.

In practice, the PSSP is mostly solved by simple rules-of-thumb. At our OEM, for example, the assembly line is simply divided into segments of fixed size (e.g., ten stations each) and a team of workers is assigned to each segment. Apart from the obvious benefit of making the assignments easy to generate and communicate, this approach also facilitates the definition of clear responsibilities for each worker (or team of workers): if ever a station runs out of parts the culprit is easily identifiable. On the other hand, some solution quality will obviously have to be sacrificed since workers cannot perform refill events outside of their predetermined line segment even if they had the time and opportunity to do so. In the final part of our computational study we will now analyze how much of a tradeoff using the simple rule-of-thumb segmentation heuristic entails.


                        Table 6
                         compares the results of the segmentation heuristic (column f (seg.)) to HD results with 
                           
                              Φ
                              =
                              300
                           
                         (column f (HD)). f (seg.) was obtained by partitioning the assembly line such that each segment contains K stations (analogous to Algorithm 2) and subsequently solving the PSSP for each segment via HD with 
                           
                              Φ
                              =
                              5
                           
                         seconds per segment. f (seg.) then amounts to the total number of workers over all segments. Column gap shows the average relative gap between both solutions.

According to the data in Table 6, the practical benefits of simply dividing the set of stations into distinct zones come at a steep price. Depending on parameter constellation and segment size K, up to four times as many workers are sometimes required for the partitioned line than would otherwise have been necessary. The negative effects are less pronounced if the segment size is large (
                           
                              K
                              =
                              10
                           
                        ), although the gap can still be quite substantial, especially in the larger instances. Therefore, it seems advisable that companies should think hard about whether the organizational advantages of distinct logistics zones really outweigh the cost involved with employing a larger logistics workforce.

@&#CONCLUSION@&#

After introducing the novel in-house part logistics concept of line-integrated supermarkets, this paper treats the scheduling of refill events. The stations’ JIS-bins storing parts right in the assembly sequence need to be refilled, so that no stock-outs occur and the workforce servicing the respective line segment is minimized. Our computational study reveals two major take-home messages for practitioners implementing the line-integrated supermarket concept:
                        
                           •
                           The crew size for servicing an assembly line without stock-outs is considerably influenced by the production sequence of workpieces. Thus, it seems advisable to solve both decision problems in an integrative manner, e.g., by some holistic or hierarchical planning approach. However, the widely applied output rate variation (ORV) problem, which pursues the famous heijunka-principle promoted by the Toyota production system of leveling each part’s demand events evenly over time, seems poorly suited for enabling such a concerted planning approach. Our computational results fail to show any significant correlation between ORV and number of required workers.

Smaller line segments each serviced by a separate logistics worker or team in order to have clear responsibilities for stock-outs may turn out a costly strategy. Up to four times as many logistics workers are required compared to allowing a free flow of logistics workers through the supermarkets. Thus, some pick-by-voice information system continuously re-optimizing the refill schedules in the background and directing the logistics workers via headset to their next pick positions may be a worthwhile investment. This way, clear responsibilities and a reduced workforce operating with optimized refill schedules are entirely possible.

Both conclusions directly lead us to future research needs. On the one hand, a suited coupling of assembly line sequencing and our part supply scheduling problem should be derived. On the other hand, transferring our scheduling problem to an online environment where unforeseen events enforce a quick replanning during plan execution is another important enabler for realizing the part supply concept of line-integrated supermarkets in the real-world.

@&#REFERENCES@&#

