@&#MAIN-TITLE@&#A generalized Gilbert algorithm and an improved MIES for one-class support vector machine

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The primal maximum margin problem of OCSVM is equivalent to a nearest point problem.


                        
                        
                           
                           A generalized Gilbert (GG) algorithm is proposed to solve the nearest point problem.


                        
                        
                           
                           An improved MIES is developed for the Gaussian kernel parameter selection.


                        
                        
                           
                           The GG algorithm is computationally more efficient than the SMO algorithm.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

One-class support vector machine

Generalized Gilbert algorithm

Reduced convex hull

Gaussian kernel

Parameter selection

@&#ABSTRACT@&#


               
               
                  This paper is devoted to two issues involved in the one-class support vector machine (OCSVM), i.e., the optimization algorithm and the kernel parameter selection. For appropriate choices of parameters, the primal maximum margin problem of OCSVM is equivalent to a nearest point problem. A generalized Gilbert (GG) algorithm is proposed to solve the nearest point problem. Compared with the algebraic algorithms developed for OCSVM, such as the well-known sequential minimal optimization (SMO) algorithm, the GG algorithm is a novel geometric algorithm that has an intuitive and explicit optimization target at each iteration. Moreover, an improved MIES (IMIES) is developed for the Gaussian kernel parameter selection. IMIES is implemented by constraining the geometric locations of edge and interior sample mappings relative to OCSVM separating hyper-planes. The experimental results on 2-D artificial datasets and benchmark datasets show that IMIES is able to select suitable kernel parameters, and the GG algorithm is computationally more efficient while achieving comparable accuracies to the SMO algorithm.
               
            

@&#INTRODUCTION@&#

As a robust multi-class classification method, support vector machine (SVM) [1] has attracted a great deal of attention as soon as it has been put forward. Over recent years, some fruitful methods have also been built on the top of the standard SVM and bring dramatic performance improvements [2–5]. Generally speaking, the training stage of SVM requires the samples from two classes at least. But in some cases, only the samples from one class are available, and the samples from other classes are too difficult or too costly to acquire. This type of classification problem is known as one-class classification. The available class is called the target class or the negative class, while all other possible classes are collectively referred to as the non-target class or the positive class. In the real world, we often encounter one-class classification problems. For example, a classifier applied to monitor a machine should detect the abnormal and faulty behavior of the machine. In faulty situations, however, the machine might be destroyed completely, leading to the difficult acquisition of abnormal data. On the other hand, the routine data from the normal operation are easy to obtain. As a result, the classifier is generally built only using the normal data. It can be seen that one-class classification plays a significant role in real world applications.

Inspired by the principle of SVM, Schölkopf et al. [6] proposed one-class support vector machine (OCSVM) to solve one-class classification problems. Unlike the standard SVM which is originally designed for binary classification problems, OCSVM tries to describe the class of interest by learning from the training samples from only this class, and detects the samples not belonging to it. In addition, Tax and Duin [7,8] also proposed a similar method called support vector data description (SVDD). Instead of the hyper-plane, SVDD is aimed at finding a minimum-volume hyper-sphere enclosing almost all the training samples. Although the goals of OCSVM and SVDD are seemingly different from each other, they are intrinsically equivalent when Gaussian kernels are used [8]. Both OCSVM and SVDD inherit the well-known advantages of SVM, e.g., the utilization of the kernel trick, the robustness to outliers (achieved by adjusting a regularization parameter) and the sparseness of the solution. Due to these advantages, the two one-class classification methods have been successfully used in various applications, such as process monitoring [9–11], computer image [12–14] and network security [15,16]. Because of the equivalence of OCSVM and SVDD, we only focus on OCSVM in this paper.

Similar to SVM, OCSVM can also be formulated as a quadratic programming (QP) problem [6]. Some standard algebraic algorithms have been used to solve this optimization problem. However, these standard algorithms generally have cubic time complexity and at least quadratic space complexity [17,18]. OCSVM will consequently suffer the same computational problem as SVM when dealing with large-scale datasets. The complexity, however, may be reduced if a fast optimization algorithm is used, such as the well-known sequential minimal optimization (SMO) algorithm [6,17]. The SMO algorithm breaks the original QP problem into a series of smallest possible QP problems, with each involving only two variables. Each QP sub-problem can be solved analytically in an efficient way. Moreover, a caching scheme is used in this algorithm, with only linear space complexity. In such manners, the SMO algorithm can often speed the training process of OCSVM. During each iteration of the SMO algorithm, only two variables are involved to be optimized, so the SMO algorithm still converges slowly. Nevertheless, as each iteration is computationally simple, an overall speedup is often observed in practice [18]. The SMO algorithm has become one of the most popular algebraic algorithms for OCSVM.

From a geometric point of view, for appropriate choices of parameters the C-SVM or ν-SVM [19] optimization problem of finding the maximum margin between two sample sets is equivalent to the problem of finding the closest points on the respective reduced convex hulls of the two sets [20,21]. Therefore, the maximum margin problem can be solved equivalently by solving a closest pair of points problem. Based on the equivalence of the two types of optimization problems, Mavroforakis and Theodoridis [22] proposed a generalized Schlesinger–Kozinec algorithm for SVM. This geometric algorithm presents great computational superiority over the popular SMO algorithm while receiving comparable classification accuracies. As OCSVM originates from SVM, their basic principles are similar. Apart from the algebraic algorithms, it is entirely possible to develop a special geometric algorithm for OCSVM. Using the geometric algorithm, OCSVM is expected to perform more efficiently. Inspired by this idea, a generalized Gilbert (GG) algorithm is proposed for OCSVM in this work. Compared with the SMO algorithm, the GG algorithm is computationally more efficient and has a more intuitive optimization procedure.

As OCSVM also uses the kernel trick, its performance is inevitably affected by the kernel parameter. In this paper, only the Gaussian kernel is considered. Thus the Gaussian kernel parameter σ needs to be optimized before the OCSVM model training. Over recent years, some methods have been proposed to select the Gaussian kernel parameter of OCSVM or SVDD (Note that the two methods are equivalent when the Gaussian kernels are used). Tax and Duin [8] proposed a method to tune the Gaussian kernel parameter of SVDD via the leave-one-out (LOO) error, which is estimated by the fraction of support vectors. When the LOO error estimate reaches a user-specific fraction, the corresponding kernel parameter value is considered the optimal one. Since only the target class is taken into consideration for the estimation of the LOO error, this method does not handle the potential non-target class properly, generally leading to an underfitting model. Evangelista et al. [23] defined a statistic 
                        
                           
                              s
                              2
                           
                           /
                           
                              (
                              
                                 
                                    κ
                                    ¯
                                 
                                 +
                                 
                                    ɛ
                                 
                              
                              )
                           
                        
                      derived from the kernel matrix, where s
                     2 and 
                        
                           κ
                           ¯
                        
                      are the variance and the mean of non-diagonal entries of the kernel matrix, respectively, and ɛ is a small positive constant. The kernel parameter achieved by this method tends to be small. Deng and Xu [24] proposed a skewness based method to generate artificial outliers, and took the fraction of support vectors and the fraction of outliers accepted by the OCSVM model as the estimates of the type I error and the type II error, respectively. The Gaussian kernel parameter is optimized through minimizing the weighted sum of the two errors. However, this method depends on the quality of the generated outliers heavily, and its performance will deteriorate once the outliers are generated inappropriately. Khazai et al. [25] used a maximum distance based measure to calculate the kernel parameter. This measure only concerns the maximum distance between training samples and does not take the local distribution into consideration, thus the resulting kernel parameter tends to be large. Wang et al. [26] introduced a method called Min#SV+MaxL to select the optimal Gaussian kernel parameter of SVDD. This method seeks the trade-off between the minimum fraction of support vectors and the maximum value of the dual objective function. To be specific, the selection of the kernel parameter depends on the maximum reductions in both the fraction of support vectors and the value of the dual objective function. However, the fraction of support vectors decreases sharply when the kernel parameter  is small. Min#SV+MaxL is consequently prone to select a small parameter value. Xiao et al. [27] proposed an approach called DTL to choose the Gaussian kernel parameter of OCSVM. DTL detects the tightness of decision boundaries through a set of systematic rules, and tunes the kernel parameter iteratively by the bisection method until the candidate interval of σ is sufficiently small. Apart from DTL, Xiao et al. [28] also proposed another parameter selection method based on the tightness of decision boundaries, i.e., MIES. From the view of geometry, if a decision boundary fits the distribution of training samples appropriately, i.e., neither tightly nor loosely, the samples on the edge regions (referred to as the edge samples) of the sample distribution shape should lie close to the decision boundary, while the ones on the interior regions (referred to as the interior samples) should lie far from the decision boundary [28]. MIES utilizes the geometric locations of the edge and the interior samples relative to decision boundaries to determine whether a kernel parameter is suitable. Both DTL and MIES are developed based on the tightness of decision boundaries. In Refs. [27] and [28], the authors compared the two methods with the aforementioned parameter selection methods (proposed in Refs. [8,23–26]) and showed their superior performance.

In the procedure of MIES, one key step is the selection of edge and interior samples. However, the selection method for the edge samples may miss critical edge samples when handling the samples on the concave regions, leading to an inappropriate kernel parameter. In order to find a more favorable edge sample detector that suits the cases of concave regions, an Edge Sample Detector based on Circular Paraboloids (ESDCP) is proposed. In addition, we replace the original objective function used in the MIES with a new one that considers the possibly improper selection of the interior sample set. Using the new edge sample selection method and the new objective function, we develop an improved MIES (IMIES) for the Gaussian kernel parameter selection.

The remaining part of the paper is organized as follows. Section 2 briefly reviews the basic theory of OCSVM. Section 3 proposes the geometric optimization algorithm. Section 4 presents the Gaussian kernel parameter selection method. Section 5 gives the experiments conducted on 2D artificial datasets and benchmark datasets. Section 6 concludes the paper.

Assume 
                        
                           X
                           =
                           
                              
                                 {
                                 
                                    x
                                    i
                                 
                                 }
                              
                              
                                 i
                                 =
                                 1
                              
                              l
                           
                        
                      are training samples whose labels are all negative, where l is the number of training samples; Φ( · ) is the mapping function that maps samples from the input space 
                        X
                      (generally the Euclidean space) to the feature space 
                        F
                      (possibly a very high-dimensional space). The basic idea of OCSVM is to find an optimal separating hyper-plane that separates training samples from the origin with the maximum margin. This separating hyper-plane is denoted by 
                        
                           Π
                           :
                           f
                           
                              (
                              x
                              )
                           
                           =
                           
                              〈
                              
                                 
                                    
                                       w
                                    
                                    *
                                 
                                 ,
                                 Φ
                                 
                                    (
                                    x
                                    )
                                 
                              
                              〉
                           
                           −
                           
                              ρ
                              *
                           
                           =
                           0
                        
                     , where w* and ρ* are the normal and the threshold, respectively. The optimization problem of OCSVM has the following formula [6]
                     
                        
                           (1)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             min
                                             
                                                w
                                                ∈
                                                F
                                                ,
                                                ρ
                                                ∈
                                                R
                                                ,
                                                ξ
                                                ∈
                                                
                                                   R
                                                   l
                                                
                                             
                                          
                                          
                                             1
                                             2
                                          
                                          
                                             
                                                ∥
                                                w
                                                ∥
                                             
                                             2
                                          
                                          −
                                          ρ
                                          +
                                          
                                             1
                                             
                                                ν
                                                l
                                             
                                          
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             l
                                          
                                          
                                             ξ
                                             i
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          s
                                          
                                             .
                                             t
                                          
                                          .
                                          
                                             〈
                                             
                                                w
                                                ,
                                                Φ
                                                
                                                   (
                                                   
                                                      x
                                                      i
                                                   
                                                   )
                                                
                                             
                                             〉
                                          
                                          ≥
                                          ρ
                                          −
                                          
                                             ξ
                                             i
                                          
                                          ,
                                          
                                             ξ
                                             i
                                          
                                          ≥
                                          0
                                          ,
                                          i
                                          =
                                          1
                                          ,
                                          2
                                          ,
                                          …
                                          ,
                                          l
                                          .
                                       
                                    
                                 
                              
                           
                        
                     where ν ∈ (0, 1] is a user-specified parameter and ξi
                     
                     
                        
                           (
                           
                              i
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              l
                           
                           )
                        
                      are the slack variables.

The dual problem of the primal problem (1) is formulated as [6]
                     
                        
                           (2)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             max
                                             
                                                α
                                                ∈
                                                
                                                   R
                                                   l
                                                
                                             
                                          
                                          
                                          −
                                          
                                             1
                                             2
                                          
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             l
                                          
                                          
                                             
                                                ∑
                                                
                                                   j
                                                   =
                                                   1
                                                
                                                l
                                             
                                             
                                                
                                                   α
                                                   i
                                                
                                                
                                                   α
                                                   j
                                                
                                                k
                                                
                                                   (
                                                   
                                                      
                                                         x
                                                         i
                                                      
                                                      ,
                                                      
                                                         x
                                                         j
                                                      
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          s
                                          
                                             .
                                             t
                                          
                                          .
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             l
                                          
                                          
                                             α
                                             i
                                          
                                          =
                                          1
                                          ,
                                          0
                                          ≤
                                          
                                             α
                                             i
                                          
                                          ≤
                                          
                                             1
                                             
                                                ν
                                                l
                                             
                                          
                                          ,
                                          i
                                          =
                                          1
                                          ,
                                          2
                                          ,
                                          …
                                          ,
                                          l
                                          .
                                       
                                    
                                 
                              
                           
                        
                     where αi
                     
                     
                        
                           (
                           
                              i
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              l
                           
                           )
                        
                      are the Lagrange multipliers and 
                        
                           k
                           
                              (
                              
                                 
                                    x
                                    i
                                 
                                 ,
                                 
                                    x
                                    j
                                 
                              
                              )
                           
                           =
                           
                              〈
                              
                                 Φ
                                 
                                    (
                                    
                                       x
                                       i
                                    
                                    )
                                 
                                 ,
                                 Φ
                                 
                                    (
                                    
                                       x
                                       j
                                    
                                    )
                                 
                              
                              〉
                           
                        
                      is the kernel function. Given the optimal solution 
                        
                           
                              
                                 α
                              
                              *
                           
                           =
                           
                              
                                 (
                                 
                                    
                                       α
                                       1
                                       *
                                    
                                    ,
                                    
                                       α
                                       2
                                       *
                                    
                                    ,
                                    …
                                    ,
                                    
                                       α
                                       l
                                       *
                                    
                                 
                                 )
                              
                              T
                           
                        
                     , the normal w* and the threshold ρ* of the separating hyper-plane Π can be computed using [6]
                     
                        
                           (3)
                           
                              
                                 
                                    
                                       w
                                    
                                    *
                                 
                                 =
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    l
                                 
                                 
                                    
                                       α
                                       i
                                       *
                                    
                                    Φ
                                    
                                       (
                                       
                                          x
                                          i
                                       
                                       )
                                    
                                 
                                 ,
                              
                           
                        
                     and

                        
                           (4)
                           
                              
                                 
                                    ρ
                                    *
                                 
                                 =
                                 
                                    ∑
                                    
                                       j
                                       =
                                       1
                                    
                                    l
                                 
                                 
                                    
                                       α
                                       j
                                       *
                                    
                                    k
                                    
                                       (
                                       
                                          
                                             x
                                             nbsv
                                          
                                          ,
                                          
                                             x
                                             j
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        
                     where x
                     nbsv is any non-bound support vector (i.e., a sample whose Lagrange multiplier 
                        
                           α
                           i
                           *
                        
                      satisfies 
                        
                           0
                           <
                           
                              α
                              
                                 i
                              
                              *
                           
                           <
                           1
                           /
                           
                           
                              (
                              ν
                              l
                              )
                           
                        
                     ). Then, a new sample x is classified based on the sign of the decision function 
                        
                           f
                           
                              (
                              x
                              )
                           
                           =
                           
                              〈
                              
                                 
                                    
                                       w
                                    
                                    *
                                 
                                 ,
                                 Φ
                                 
                                    (
                                    x
                                    )
                                 
                              
                              〉
                           
                           −
                           
                              ρ
                              *
                           
                        
                     .

Common choices for the kernel function are Gaussian, polynomial and sigmoid kernels, etc. In this work, only the Gaussian kernel is considered. The Gaussian kernel is given in the following form

                        
                           (5)
                           
                              
                                 k
                                 
                                    (
                                    
                                       
                                          x
                                          i
                                       
                                       ,
                                       
                                          x
                                          j
                                       
                                    
                                    )
                                 
                                 =
                                 exp
                                 
                                    (
                                    
                                       −
                                       
                                          
                                             
                                                
                                                   ∥
                                                   
                                                      
                                                         x
                                                         i
                                                      
                                                      −
                                                      
                                                         x
                                                         j
                                                      
                                                   
                                                   ∥
                                                
                                             
                                             2
                                          
                                          
                                             2
                                             
                                                σ
                                                2
                                             
                                          
                                       
                                    
                                    )
                                 
                              
                           
                        
                     where σ is the Gaussian width parameter.

@&#MOTIVATION@&#

Originating from SVM, OCSVM can also be formulated as a QP problem. As a result, fast optimization algorithms developed for SVM can be reasonably taken into consideration when we seek a new computationally effective algorithm for OCSVM. Bennett and Bredensteiner [20] claimed that C-SVM is equivalent to the reduced convex hull based SVM formula for appropriate choices of parameters. Crisp and Burges [21] also gave a geometric interpretation to another SVM formula, ν-SVM. Both the literatures connected the SVM optimization problem with reduced convex hulls from a geometric point of view. To be specific, the C-SVM or the ν-SVM maximum margin problem of finding the maximum margin between two sample sets is equivalent to the closest pair of points problem of finding the closest points on the respective reduced convex hulls of the two sets [20,21]. The equivalence relationship between the two different types of optimization problems provides a new perspective for the SVM optimization algorithm. Mavroforakis and Theodoridis [22] proposed a geometric algorithm, the generalized Schlesinger–Kozinec algorithm, to solve the SVM optimization problem. While receiving comparable classification accuracies to the popular SMO algorithm, this geometric algorithm presents great computational superiority.

Motivated by the geometric algorithm developed for SVM, the relationship between OCSVM and the reduced convex hull is firstly established. Subsequently, a novel geometric algorithm also associated with the reduced convex hull is proposed for OCSVM.

Given a finite sample set 
                           
                              X
                              =
                              
                                 
                                    {
                                    
                                       x
                                       i
                                    
                                    }
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 l
                              
                           
                        , the reduced convex hull of the sample set 
                           X
                         is defined as [20]
                        
                           
                              (6)
                              
                                 
                                    RCH
                                    
                                       (
                                       
                                          X
                                          ,
                                          μ
                                       
                                       )
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   l
                                                
                                                
                                                   
                                                      α
                                                      i
                                                   
                                                   
                                                      x
                                                      i
                                                   
                                                
                                             
                                             |
                                          
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             l
                                          
                                          
                                             α
                                             i
                                          
                                          =
                                          1
                                          ,
                                          0
                                          ≤
                                          
                                             α
                                             i
                                          
                                          ≤
                                          μ
                                       
                                       }
                                    
                                 
                              
                           
                        where αi
                        
                        
                           
                              (
                              
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 l
                              
                              )
                           
                         are the combination coefficients and μ ∈ [1/l, 1) is the reduction factor. Any sample point in the reduced convex hull can be expressed as the above form. In the special case of 
                           
                              μ
                              =
                              1
                           
                        , the reduced convex hull has a special form, i.e., the convex hull. The convex hull is the smallest convex set containing given finite samples. Regarding a specific sample set, its reduced convex hull actually originates from its convex hull. As μ decreases, the convex hull shrinks non-uniformly towards the centroid of the sample set [21]. Any point lying in the reduced convex hull is definitely located inside the original convex hull. A reduced convex hull and its original convex hull are illustrated in Fig. 1.
                        
                     

An equivalent formula of the dual problem (2) is given as follows

                           
                              (7)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                min
                                                
                                                   α
                                                   ∈
                                                   
                                                      R
                                                      l
                                                   
                                                
                                             
                                             
                                             
                                                ∥
                                                
                                                   
                                                      ∑
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      l
                                                   
                                                   
                                                      
                                                         α
                                                         i
                                                      
                                                      Φ
                                                      
                                                         (
                                                         
                                                            x
                                                            i
                                                         
                                                         )
                                                      
                                                   
                                                
                                                ∥
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             s
                                             
                                                .
                                                t
                                             
                                             .
                                             
                                                ∑
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                l
                                             
                                             
                                                α
                                                i
                                             
                                             =
                                             1
                                             ,
                                             0
                                             ≤
                                             
                                                α
                                                i
                                             
                                             ≤
                                             
                                                1
                                                
                                                   ν
                                                   l
                                                
                                             
                                             ,
                                             i
                                             =
                                             1
                                             ,
                                             2
                                             ,
                                             …
                                             ,
                                             l
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        From the comparison of Eqs. (6) and (7), it is clearly seen that when 
                           
                              μ
                              =
                              1
                              /
                              (
                              
                                 ν
                                 l
                              
                              )
                           
                         the optimization problem (7) is intrinsically a nearest point problem whose goal is to find the nearest point to the origin from the reduced convex hull of training sample mappings. In this sense, the primal maximum margin problem (1) of OCSVM is equivalently converted to the nearest point problem (7) through the reduced convex hull formula. In the case of 
                           
                              μ
                              =
                              1
                              /
                              (
                              
                                 ν
                                 l
                              
                              )
                           
                        , the two optimization problems will yield the same optimal solution 
                           α
                        *. From Eq. (3), we see that the normal w* of the separating hyper-plane Π in the maximum margin problem (1) is exactly the nearest point in the nearest point problem (7).

Denote the separating hyper-plane generated from the nearest point problem (7) by 
                           
                              
                                 Π
                                 2
                              
                              :
                              
                                 f
                                 2
                              
                              
                                 (
                                 x
                                 )
                              
                              =
                              
                                 〈
                                 
                                    
                                       
                                          w
                                       
                                       *
                                    
                                    ,
                                    Φ
                                    
                                       (
                                       x
                                       )
                                    
                                 
                                 〉
                              
                              −
                              
                                 ρ
                                 2
                                 *
                              
                              =
                              0
                           
                        . Moreover, when 
                           
                              1
                              −
                              
                                 l
                                 2
                              
                              μ
                              ≠
                              0
                           
                         the threshold 
                           
                              ρ
                              2
                              *
                           
                         of the hyper-plane Π
                        2 is given by

                           
                              (8)
                              
                                 
                                    
                                       ρ
                                       2
                                       *
                                    
                                    =
                                    
                                       
                                          ∥
                                          
                                             
                                                w
                                             
                                             *
                                          
                                          ∥
                                       
                                       2
                                    
                                    −
                                    
                                       μ
                                       
                                          1
                                          −
                                          
                                             l
                                             2
                                          
                                          μ
                                       
                                    
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          
                                             I
                                             2
                                          
                                       
                                    
                                    
                                       (
                                       
                                          
                                             〈
                                             
                                                
                                                   
                                                      w
                                                   
                                                   *
                                                
                                                ,
                                                Φ
                                                
                                                   (
                                                   
                                                      x
                                                      i
                                                   
                                                   )
                                                
                                             
                                             〉
                                          
                                          −
                                          
                                             
                                                
                                                   ∥
                                                   
                                                      
                                                         w
                                                      
                                                      *
                                                   
                                                   ∥
                                                
                                             
                                             2
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        where I
                        2 is the set of the indices of sample points whose combination coefficients are equal to μ and l
                        2 is the size of the set I
                        2. Let 
                           
                              
                                 Π
                                 3
                              
                              :
                              
                                 f
                                 3
                              
                              
                                 (
                                 x
                                 )
                              
                              =
                              
                                 〈
                                 
                                    
                                       
                                          w
                                       
                                       *
                                    
                                    ,
                                    Φ
                                    
                                       (
                                       x
                                       )
                                    
                                 
                                 〉
                              
                              −
                              
                                 
                                    ∥
                                 
                                 
                                    
                                       w
                                    
                                    *
                                 
                                 
                                    
                                       ∥
                                    
                                    2
                                 
                              
                              =
                              0
                           
                         be the hyper-plane that is parallel to the hyper-plane Π
                        2 and passes through the nearest point w*. Then, the value 
                           
                              
                                 〈
                                 
                                    
                                       
                                          w
                                       
                                       *
                                    
                                    ,
                                    Φ
                                    
                                       (
                                       
                                          x
                                          i
                                       
                                       )
                                    
                                 
                                 〉
                              
                              −
                              
                                 
                                    ∥
                                 
                                 
                                    
                                       w
                                    
                                    *
                                 
                                 
                                    
                                       ∥
                                    
                                    2
                                 
                              
                           
                         can be viewed as the output of the function f
                        3(x) at x
                        
                           i
                        . The perpendicular distance between Π
                        2 and Π
                        3 is exactly 
                           
                              
                                 (
                                 
                                    −
                                    
                                       μ
                                       
                                          1
                                          −
                                          
                                             l
                                             2
                                          
                                          μ
                                       
                                    
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          
                                             I
                                             2
                                          
                                       
                                    
                                    
                                       (
                                       
                                          
                                             〈
                                             
                                                
                                                   
                                                      w
                                                   
                                                   *
                                                
                                                ,
                                                Φ
                                                
                                                   (
                                                   
                                                      x
                                                      i
                                                   
                                                   )
                                                
                                             
                                             〉
                                          
                                          −
                                          
                                             
                                                
                                                   ∥
                                                
                                                
                                                   
                                                      w
                                                   
                                                   *
                                                
                                                
                                                   ∥
                                                
                                             
                                             2
                                          
                                       
                                       )
                                    
                                 
                                 )
                              
                              /
                              
                                 ∥
                                 
                                    
                                       w
                                    
                                    *
                                 
                                 ∥
                              
                           
                        .

When 
                           
                              1
                              −
                              
                                 l
                                 2
                              
                              μ
                              =
                              0
                           
                        , all the coefficients 
                           
                              α
                              i
                              *
                           
                        
                        
                           
                              (
                              
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 ⋯
                                 ,
                                 l
                              
                              )
                           
                         take the bound value 0 or μ. It is possible that the threshold 
                           
                              ρ
                              2
                              *
                           
                         is not unique. Nevertheless, this case seldom occurs. In the unusual case, the threshold 
                           
                              ρ
                              2
                              *
                           
                         is given by 
                           
                              
                                 ρ
                                 2
                                 *
                              
                              =
                              
                                 (
                                 
                                    
                                       ρ
                                       low
                                    
                                    +
                                    
                                       ρ
                                       up
                                    
                                 
                                 )
                              
                              /
                              2
                           
                        , where 
                           
                              
                                 ρ
                                 up
                              
                              =
                              
                                 min
                                 
                                    i
                                    ∈
                                    {
                                    
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       l
                                    
                                    }
                                 
                              
                              
                                 {
                                 
                                    
                                       〈
                                       
                                          
                                             
                                                w
                                             
                                             *
                                          
                                          ,
                                          Φ
                                          
                                             (
                                             
                                                x
                                                i
                                             
                                             )
                                          
                                       
                                       〉
                                    
                                    :
                                    
                                       α
                                       i
                                       *
                                    
                                    =
                                    0
                                 
                                 }
                              
                           
                         and 
                           
                              
                                 ρ
                                 low
                              
                              =
                              
                                 max
                                 
                                    i
                                    ∈
                                    {
                                    
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       l
                                    
                                    }
                                 
                              
                           
                        
                        
                           
                              {
                              
                                 
                                    〈
                                    
                                       
                                          
                                             w
                                          
                                          *
                                       
                                       ,
                                       Φ
                                       
                                          (
                                          
                                             x
                                             i
                                          
                                          )
                                       
                                    
                                    〉
                                 
                                 :
                                 
                                    α
                                    i
                                    *
                                 
                                 =
                                 μ
                              
                              }
                           
                        .

The hyper-plane Π
                        2 is perpendicular to the line segment joining the nearest point w* and the origin. Furthermore, we can prove that the separating hyper-plane Π
                        2 generated from the nearest point problem (7) is theoretically the same as the separating hyper-plane Π generated from the maximum margin problem (1) when the cases 
                           
                              μ
                              =
                              1
                              /
                              (
                              
                                 ν
                                 l
                              
                              )
                           
                         and 
                           
                              1
                              −
                              
                                 l
                                 2
                              
                              μ
                              ≠
                              0
                           
                         hold. The proof is given in Appendix A. The threshold ρ* in the maximum margin problem is computed using any non-bound support vector (see Eq. (4)), while the threshold 
                           
                              ρ
                              2
                              *
                           
                         in the nearest point problem is generally computed using the nearest point w* (see Eq. (8)). Although the formulas for calculating the two thresholds are seemingly different, the computational results are theoretically the same.

As the primal OCSVM optimization problem is equivalent to a nearest point problem, it is possible to develop a geometric algorithm for OCSVM. The Gilbert algorithm is a geometric algorithm developed for finding the minimum distance from a convex set to the origin [29]. Coincidently, the reduced convex hull is exactly a convex set. Therefore, it is reasonable to incorporate the Gilbert algorithm into the OCSVM optimization problem. Assume 
                           S
                         is a convex set, we need to find the nearest point x* from the set 
                           S
                         to the origin. A brief description of the standard Gilbert algorithm is given below:

                           
                              Step 1: Choose w ∈ S.

Step 2: Find the point x
                                 mp ∈ S with the minimum projection onto the direction of 
                                    w
                                  . If ‖w‖≅‖x
                                 mp‖, then 
                                    
                                       
                                          
                                             x
                                          
                                          *
                                       
                                       =
                                       w
                                    
                                 ; stop.

Step 3: Find the point w
                                 new on the line segment [w, x
                                 mp], with the minimum norm (nearest to the origin). Set w ← w
                                 new and go to Step 2.

The basic principle of the Gilbert algorithm is illustrated in Fig. 2
                        . One key step of the geometric algorithm is to find the point x
                        mp with the minimum projection onto a specific direction. In terms of a reduced convex hull, intuitively, such point could always be one of the extreme points of the reduced convex hull. To find the minimum projection point, we only need to calculate the projections of all the extreme points onto the specific direction and compare these projections. Mavroforakis and Theodoridis [22] provided a significant theorem that the calculation of the minimum projection of the extreme points of a reduced convex hull onto a specific direction does not need the direct formation of all the possible extreme points, but only the calculation of the projections of the original points, and then the minimum projection is the summation of the ⌈1/μ⌉ (⌈ · ⌉ denotes the ceiling function, here 
                           
                              μ
                              =
                              1
                              /
                              (
                              
                                 ν
                                 l
                              
                              )
                           
                        ) smaller ones among these projections, with each being multiplied by a specific coefficient belonging to the set 
                           
                              {
                              
                                 μ
                                 ,
                                 1
                                 −
                                 ⌊
                                 
                                    1
                                    /
                                    μ
                                 
                                 ⌋
                                 μ
                              
                              }
                           
                         (⌊ · ⌋ denotes the floor function). More precisely, if 
                           
                              1
                              /
                              μ
                              =
                              ⌈
                              
                                 1
                                 /
                                 μ
                              
                              ⌉
                           
                        , μ is assigned to all the coefficients of the ⌈1/μ⌉ smaller projections; otherwise, μ is assigned to the former 
                           
                              ⌈
                              
                                 1
                                 /
                                 μ
                              
                              ⌉
                              −
                              1
                           
                         coefficients and 
                           
                              1
                              −
                              ⌊
                              
                                 1
                                 /
                                 μ
                              
                              ⌋
                              μ
                           
                         is assigned to the last coefficient. Also, the combination coefficients of the ⌈1/μ⌉ smaller projections that constitute the minimum projection are completely the same as those of the ⌈1/μ⌉ corresponding original points that constitute the minimum projection extreme point, so it is easy to derive the minimum projection extreme point of the reduced convex hull. Now that the minimum projection and corresponding extreme point, required in the Gilbert algorithm, are both received, a generalized Gilbert (GG) algorithm for OCSVM is proposed to solve the nearest point problem associated with the reduced convex hull.

Given a training set 
                           
                              X
                              =
                              
                                 
                                    {
                                    
                                       x
                                       i
                                    
                                    }
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 l
                              
                           
                        , 
                           
                              I
                              =
                              {
                              
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 l
                              
                              }
                           
                        , the GG algorithm for OCSVM is given as follows:

                           
                              Step 1: Ensure that μ ≥ 1/l. Set the vector w to the centroid of the sample set 
                                    X
                                 , i.e., set 
                                    
                                       w
                                       =
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             I
                                          
                                       
                                       
                                          
                                             α
                                             i
                                          
                                          
                                             x
                                             i
                                          
                                       
                                    
                                  where 
                                    
                                       
                                          α
                                          i
                                       
                                       =
                                       
                                          1
                                          /
                                          l
                                       
                                    
                                  for all i.

Step 2:

                                    
                                       (1)
                                       Find the point x
                                          mp ∈ RCH(X, μ) with the minimum projection onto the direction of 
                                             w
                                          .
                                             
                                                (a)
                                                Compute the projections of all the points x
                                                   
                                                      i
                                                    ∈ X (i ∈ I) onto the direction of 
                                                      w
                                                   , i.e., 
                                                      
                                                         
                                                            p
                                                            i
                                                         
                                                         =
                                                         
                                                            
                                                               〈
                                                               
                                                                  
                                                                     x
                                                                     i
                                                                  
                                                                  ,
                                                                  w
                                                               
                                                               〉
                                                            
                                                            /
                                                            
                                                               ∥
                                                               w
                                                               ∥
                                                            
                                                         
                                                      
                                                    (i ∈ I).

Sort the projections in ascending order and select the ⌈1/μ⌉ smaller projections pi
                                                   
                                                   
                                                      
                                                         (
                                                         
                                                            i
                                                            ∈
                                                            
                                                               I
                                                               ˜
                                                            
                                                         
                                                         )
                                                      
                                                   , where 
                                                      
                                                         I
                                                         ˜
                                                      
                                                    is the set of the first ⌈1/μ⌉ indices of the original points with sorted projections.

Compute the minimum projection, i.e., 
                                                      
                                                         
                                                            p
                                                            min
                                                         
                                                         =
                                                         μ
                                                         
                                                            ∑
                                                            
                                                               i
                                                               ∈
                                                               
                                                                  I
                                                                  ˜
                                                               
                                                               
                                                                  (
                                                                  
                                                                     1
                                                                     :
                                                                     end
                                                                     −
                                                                     1
                                                                  
                                                                  )
                                                               
                                                            
                                                         
                                                         
                                                            p
                                                            i
                                                         
                                                         +
                                                         
                                                            (
                                                            
                                                               1
                                                               −
                                                               ⌊
                                                               
                                                                  1
                                                                  /
                                                                  μ
                                                               
                                                               ⌋
                                                               μ
                                                            
                                                            )
                                                         
                                                         
                                                            p
                                                            
                                                               
                                                                  I
                                                                  ˜
                                                               
                                                               
                                                                  (
                                                                  end
                                                                  )
                                                               
                                                            
                                                         
                                                      
                                                   . The point x
                                                   mp with the minimum projection onto the direction of 
                                                      w
                                                    can be written as 
                                                      
                                                         
                                                            x
                                                            mp
                                                         
                                                         =
                                                         
                                                            ∑
                                                            
                                                               i
                                                               ∈
                                                               I
                                                            
                                                         
                                                         
                                                            
                                                               β
                                                               i
                                                            
                                                            
                                                               x
                                                               i
                                                            
                                                         
                                                      
                                                   , 
                                                      
                                                         
                                                            β
                                                            i
                                                         
                                                         =
                                                         μ
                                                         
                                                            ∑
                                                            
                                                               j
                                                               ∈
                                                               
                                                                  I
                                                                  ˜
                                                               
                                                               
                                                                  (
                                                                  
                                                                     1
                                                                     :
                                                                     end
                                                                     −
                                                                     1
                                                                  
                                                                  )
                                                               
                                                            
                                                         
                                                         
                                                            δ
                                                            
                                                               i
                                                               j
                                                            
                                                         
                                                         +
                                                         
                                                            (
                                                            
                                                               1
                                                               −
                                                               ⌊
                                                               
                                                                  1
                                                                  /
                                                                  μ
                                                               
                                                               ⌋
                                                               μ
                                                            
                                                            )
                                                         
                                                         
                                                            ∑
                                                            
                                                               j
                                                               ∈
                                                               
                                                                  I
                                                                  ˜
                                                               
                                                               
                                                                  (
                                                                  end
                                                                  )
                                                               
                                                            
                                                         
                                                         
                                                            δ
                                                            
                                                               i
                                                               j
                                                            
                                                         
                                                      
                                                    (i ∈ I) where 
                                                      
                                                         
                                                            δ
                                                            
                                                               i
                                                               j
                                                            
                                                         
                                                         
                                                            =
                                                            {
                                                         
                                                         
                                                            
                                                               
                                                                  
                                                                     1
                                                                     ,
                                                                     i
                                                                     =
                                                                     j
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  
                                                                     0
                                                                     ,
                                                                     i
                                                                     ≠
                                                                     j
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   .

If 
                                             
                                                
                                                   ∥
                                                   w
                                                   ∥
                                                
                                                −
                                                
                                                   p
                                                   min
                                                
                                                ≤
                                                
                                                   ɛ
                                                
                                                
                                                   ∥
                                                   w
                                                   ∥
                                                
                                             
                                          , 
                                             
                                                
                                                   
                                                      w
                                                   
                                                   *
                                                
                                                =
                                                w
                                             
                                           and 
                                             
                                                ρ
                                                2
                                                *
                                             
                                           is calculated using Eq. (8), then stop the algorithm; otherwise, go to Step 3.

Step 3: Compute the coefficients 
                                    
                                       α
                                       i
                                       new
                                    
                                  of w
                                 new,
                                    
                                       
                                          α
                                          i
                                          new
                                       
                                       =
                                       
                                          (
                                          
                                             1
                                             −
                                             q
                                          
                                          )
                                       
                                       
                                          α
                                          i
                                       
                                       +
                                       q
                                       
                                          β
                                          i
                                       
                                    
                                  where 
                                    
                                       q
                                       =
                                       min
                                       (
                                       
                                          1
                                          ,
                                          
                                             〈
                                             
                                                w
                                                ,
                                                w
                                                −
                                                
                                                   x
                                                   mp
                                                
                                             
                                             〉
                                          
                                          /
                                          
                                             
                                                
                                                   ∥
                                                
                                                
                                                   w
                                                   −
                                                   
                                                      x
                                                      mp
                                                   
                                                
                                                
                                                   ∥
                                                
                                             
                                             2
                                          
                                       
                                       )
                                    
                                 . Set w ← w
                                 new and go to Step 2.

The idea behind the geometric algorithm is very simple and intuitive. At each iteration, the point 
                           w
                        , representing the nearest point (until current step), is known through the coefficients αi
                         (i ∈ I), i.e., 
                           
                              w
                              =
                              
                                 ∑
                                 
                                    i
                                    ∈
                                    I
                                 
                              
                              
                                 
                                    α
                                    i
                                 
                                 
                                    x
                                    i
                                 
                              
                           
                        . This form coincides with Eq. (3).

In the Step 1, the initial 
                           w
                         is set to the centroid of the sample set which belongs to the reduced convex hull. In this way, the algorithm can ensure that the point 
                           w
                         at each iteration is always in the reduced convex hull.

In the Step 2, the geometric algorithm searches the minimum projection point x
                        mp through scanning over the projections of all the sample points onto the direction of 
                           w
                        . The minimum projection point x
                        mp is not an individually original point but a linear combination of ⌈1/μ⌉ original points. It should be noted that what matters in this step is not the absolute position of each extreme point but their projections onto a specific direction.

In the Step 3, w
                        new is actually the point with the minimum norm (nearest to the origin) on the line segment [w, x
                        mp]. The update expression restricts w
                        new to be on this line segment, thus w
                        new necessarily belongs to the reduced convex hull. At the same time, the update expression can ensure ‖w
                        new‖ < ‖w‖ (see Fig. 2), which means that the point 
                           w
                         will be getting closer to the origin as the iteration goes on. Geometrically, the algorithm iterates until 
                           w
                         becomes an ε-optimal nearest point to the origin. The precision parameter ε could be set to a small positive value, e.g., 
                           
                              
                                 ɛ
                              
                              =
                              
                                 10
                                 
                                    −
                                    3
                                 
                              
                           
                        .

For the calculations of pi
                         (i ∈ I) in the Step 2 and q in the Step 3, the quantities 〈w, x
                        
                           i
                        〉 (i ∈ I), 〈w, w〉, 〈w, x
                        mp〉 and 〈x
                        mp, x
                        mp〉 need to be calculated. Nevertheless, the calculations do not involve 
                           w
                         and x
                        mp directly but only through inner products between pairs of training samples (Note that both 
                           w
                         and x
                        mp can always be expressed as a linear combination of the training samples at each iteration). Since the implementation of the geometric algorithm only concerns inner products, we can utilize the well-known kernel trick in the algorithm. Besides, a caching scheme for 〈w, Φ(x
                        
                           i
                        )〉 (i ∈ I) and 〈w, w〉 can be applied in the GG algorithm to implement the calculations efficiently.

Similar to other kernel based pattern analysis methods, the performance of OCSVM using the Gaussian kernel is inevitably affected by the kernel parameter σ. Therefore, the Gaussian kernel parameter selection is a significant task for OCSVM. Xiao et al. [28] proposed MIES to select the Gaussian kernel parameter. This method first identifies edge and interior samples, then calculates the measures of distances from the edge and the interior samples to decision boundaries, finally selects the optimal Gaussian kernel parameter via minimizing the differences between the two kinds of distance measures: one is the measure that quantifies the distances from the edge samples to decision boundaries and the other is the measure that quantifies the distances from the interior samples to decision boundaries [28]. In this section, a new selection method for the Gaussian kernel parameter is developed based on MIES.

The selection of edge and interior samples is critical to the performance of MIES. MIES identifies whether a training sample is an edge or an interior one according to the distribution of its nearest neighbors on different sides of its tangent plane [28,30]. As the sample selection method employs tangent planes to detect the edge and the interior samples, here it is referred to as Edge-Interior Sample Detector based on Tangent Planes (EISDTP). The algorithm of EISDTP is described as follows [28].

For a given training sample x
                        
                           i
                         ∈ X, the normal n
                        
                           i
                         of the tangent plane at x
                        
                           i
                         could be approximated with its k-nearest neighbors x
                        
                           ij
                        
                        
                           
                              (
                              
                                 j
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 k
                              
                              )
                           
                         as follows [30]
                        
                           
                              (9)
                              
                                 
                                    
                                       n
                                       i
                                    
                                    =
                                    
                                       ∑
                                       
                                          j
                                          =
                                          1
                                       
                                       k
                                    
                                    
                                       v
                                       
                                          i
                                          j
                                       
                                       u
                                    
                                 
                              
                           
                        where 
                           
                              
                                 v
                                 
                                    i
                                    j
                                 
                                 u
                              
                              =
                              
                                 (
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                    
                                    −
                                    
                                       x
                                       i
                                    
                                 
                                 )
                              
                              /
                              
                                 ∥
                                 
                                    (
                                    
                                       
                                          x
                                          
                                             i
                                             j
                                          
                                       
                                       −
                                       
                                          x
                                          i
                                       
                                    
                                    )
                                 
                                 ∥
                              
                           
                         is a unit vector. The number of nearest neighbors, denoted by k, could be determined using an empirical rule-of-thumb that k equals to the square root of the number of samples [31].

The location of a neighbor x
                        
                           ij
                         relative to the tangent plane is decided by the sign of the following inner product

                           
                              (10)
                              
                                 
                                    
                                       θ
                                       
                                          i
                                          j
                                       
                                    
                                    =
                                    
                                       n
                                       i
                                       T
                                    
                                    
                                       (
                                       
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                          
                                          −
                                          
                                             x
                                             i
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        If θij
                         > 0, the neighbor x
                        
                           ij
                         lies on the side of the tangent plane which the normal n
                        
                           i
                         points to. If 
                           
                              
                                 θ
                                 
                                    i
                                    j
                                 
                              
                              =
                              0
                           
                        , it is on the tangent plane. If the training sample x
                        
                           i
                         is an edge one, all or most of its nearest neighbors will sit on one side of its tangent plane; if the training sample is an interior one, its nearest neighbors will lie roughly equally on both sides of its tangent plane [28]. Whether the training sample x
                        
                           i
                         is an edge or an interior one can be determined by calculating the fraction of the neighbors satisfying θij
                         ≥ 0, denoted as [28,30]
                        
                           
                              (11)
                              
                                 
                                    
                                       l
                                       i
                                    
                                    =
                                    
                                       1
                                       k
                                    
                                    
                                       ∑
                                       
                                          j
                                          =
                                          1
                                       
                                       k
                                    
                                    
                                       I
                                       S
                                       
                                          (
                                          
                                             
                                                θ
                                                
                                                   i
                                                   j
                                                
                                             
                                             ≥
                                             0
                                          
                                          )
                                       
                                    
                                 
                              
                           
                        where IS( · ) is a logic function that returns 1 if θij
                         ≥ 0 holds and 0 otherwise.

If 
                           
                              
                                 l
                                 i
                              
                              ≥
                              1
                              −
                              γ
                           
                         (γ is a small positive parameter), x
                        
                           i
                         is identified as an edge sample. If 
                           
                              0.5
                              −
                              η
                              ≤
                              
                                 l
                                 i
                              
                              ≤
                              0.5
                              +
                              η
                           
                         (η is a small positive parameter), x
                        
                           i
                         is identified as an interior sample. Empirically, both γ and η can be chosen from the range of [0, 0.1] [28].

For any edge sample x
                        
                           i
                         on the convex region, all its nearest neighbors are on the side of the tangent plane which the normal n
                        
                           i
                         points to, so 
                           
                              
                                 l
                                 i
                              
                              =
                              1
                              ≥
                              1
                              −
                              γ
                           
                         always holds. This implies in particular that edge samples on the convex regions are always handled correctly for any choice of γ chosen from [0, 0.1]. For an edge sample x
                        
                           i
                         on the concave region, most of its nearest neighbors are on the side of interest, and it can be selected correctly for an appropriate γ. In such case, however, the choice of γ may be very sensitive to the curvature of the concave region. Take a ring-shaped dataset for example. As shown in Fig. 3(a)–(c), the ring-shaped dataset contains 500 samples, distributed uniformly within a ring form whose inner and outer diameters are 1 and 3, respectively. The data shown in Fig. 3(d) are generated by the transform formula 
                           
                              
                                 (
                                 
                                    
                                       0.5
                                       +
                                       0.75
                                       /
                                       ∥
                                    
                                    
                                       x
                                       i
                                    
                                    
                                       ∥
                                    
                                 
                                 )
                              
                              
                                 x
                                 i
                              
                           
                         where x
                        
                           i
                        
                        
                           
                              (
                              
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 500
                              
                              )
                           
                         are the original samples from the ring-shaped dataset. This transform forms a new ring shape whose inner diameter is 2, larger than the original one, while the outer diameter remains the same. Fig. 3 illustrates the edge samples selected by EISDTP.

On the whole, the edge samples on the outer ring (convex regions) are selected well in all cases. For the edge samples on the inner ring (concave regions), however, the selection results differ. In Fig. 3(a), no samples on the inner ring are selected, while several samples on the inner ring are selected as the edge ones in Fig. 3(d). From the comparison between Fig. 3(a) and Fig. 3(d), we see that the edge samples on the concave regions with larger radius of curvatures will be identified more easily by EISDTP when the values of γ are the same. To correctly select the edge samples on the concave regions with smaller radius of curvatures, one possible way is to increase the value of γ so that more edge samples can easily satisfy the threshold 
                           
                              1
                              −
                              γ
                           
                        . With the increasing of γ, an increasing number of the edge samples on the inner ring can be identified successfully (see Fig.
3
(b) and (c)). At the same time, however, the risk of internal samples being misidentified as the edge ones increases accordingly since a few internal samples may also satisfy the threshold 
                           
                              1
                              −
                              γ
                           
                        . As shown in Fig.
3
(b) and (c), one and two internal samples are identified as the edge ones incorrectly, respectively.

In addition to relaxing the threshold 
                           
                              1
                              −
                              γ
                           
                        , another possible choice is to find a more favorable edge sample detector to suit the cases of concave regions. Instead of EISDTP, an Edge Sample Detector based on Circular Paraboloids (ESDCP) is proposed to select edge samples. A circular paraboloid is the set of all points that are equidistant from a given plane (i.e., the directrix plane) and a given point not on the plane (i.e., the focus). Note that, in the high-dimensional space, the circular paraboloid becomes a hyper-circular paraboloid and the directrix plane becomes a directrix hyper-plane correspondingly. Fig. 4 illustrates a circular paraboloid in the two-dimensional space (i.e., a parabola), with geometric features. The focal parameter (i.e., the distance between the directrix plane and the focus) is given by 
                           
                              p
                              =
                              2
                              a
                           
                        , where a is the distance from the vertex to the directrix plane or the focus.

The basic idea of ESDCP is similar to that of EISDTP, but we judge the locations of x
                        
                           i
                        's neighbors relative to the circular paraboloid rather than the tangent plane. For a given training sample x
                        
                           i
                         ∈ X, the normal n
                        
                           i
                         of the tangent plane at x
                        
                           i
                         is still given by Eq. (9). Then, we can construct a circular paraboloid at x
                        
                           i
                        . The vertex of the circular paraboloid is placed at x
                        
                           i
                         and the axis of symmetry coincides with the direction of the normal n
                        
                           i
                        , but the concave surface turns towards the opposite direction of the normal n
                        
                           i
                        . In this manner, the tangent plane is definitely tangent to the circular paraboloid at x
                        
                           i
                        . Fig. 5
                        
                         is a schematic drawing that shows ESDCP for edge samples.

For an edge sample x
                        
                           i
                         on the convex region, obviously, all its nearest neighbors are on the side of the circular paraboloid that the normal n
                        
                           i
                         points to. Therefore, this kind of edge samples can always be selected correctly by ESDCP, just like EISDTP. For an edge sample x
                        
                           i
                         on the concave region, we can adjust the parameter p so that more its nearest neighbors could be on the side of interest. It means that an edge sample on the concave region can be more easily picked out by ESDCP than by EISDTP when the values of γ are the same. This superiority of ESDCP makes it favorable to deal with the edge samples on the concave regions with small radius of curvatures.

Next, we show how to construct a circular paraboloid at x
                        
                           i
                         and then give the complete algorithm of ESDCP. Firstly, we construct a local coordinate system and designate x
                        
                           i
                         as the origin, then any point 
                           x
                         in the global coordinate system is represented by the point 
                           
                              v
                              =
                              x
                              −
                              
                                 x
                                 i
                              
                           
                         in this local coordinate system. A neighbor x
                        
                           ij
                         of x
                        
                           i
                         in the local coordinate system can be represented by

                           
                              (12)
                              
                                 
                                    
                                       v
                                       
                                          i
                                          j
                                       
                                    
                                    =
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                    
                                    −
                                    
                                       x
                                       i
                                    
                                 
                              
                           
                        In fact, the calculations of the normal n
                        
                           i
                         and the inner product θij
                         in the EISDTP also relate to the local coordinate system (see Eqs. (9) and (10)). Here, we further normalize the normal n
                        
                           i
                         by its norm

                           
                              (13)
                              
                                 
                                    
                                       n
                                       i
                                       u
                                    
                                    =
                                    
                                       ∑
                                       
                                          j
                                          =
                                          1
                                       
                                       k
                                    
                                    
                                       v
                                       
                                          i
                                          j
                                       
                                       u
                                    
                                    /
                                    
                                       ∥
                                       
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             k
                                          
                                          
                                             v
                                             
                                                i
                                                j
                                             
                                             u
                                          
                                       
                                       ∥
                                    
                                 
                              
                           
                        where 
                           
                              
                                 v
                                 
                                    i
                                    j
                                 
                                 u
                              
                              =
                              
                                 v
                                 
                                    i
                                    j
                                 
                              
                              /
                              
                                 ∥
                                 
                                    v
                                    
                                       i
                                       j
                                    
                                 
                                 ∥
                              
                           
                        .

Let the directrix plane be the plane 
                           
                              
                                 n
                                 i
                                 uT
                              
                              
                                 (
                                 
                                    v
                                    −
                                    
                                       (
                                       
                                          p
                                          /
                                          2
                                       
                                       )
                                    
                                    
                                       n
                                       i
                                       u
                                    
                                 
                                 )
                              
                              =
                              0
                           
                         and let the focus be the point 
                           
                              −
                              
                                 (
                                 
                                    p
                                    /
                                    2
                                 
                                 )
                              
                              
                                 n
                                 i
                                 u
                              
                           
                         (refer to Fig. 4). If v is a point on the circular paraboloid, by definition of a circular paraboloid, then it is the same distance from the directrix plane as the focus, i.e.,

                           
                              (14)
                              
                                 
                                    
                                       ∥
                                       
                                          n
                                          
                                             
                                                
                                                   
                                                   i
                                                   u
                                                
                                             
                                             T
                                          
                                          
                                             (
                                             
                                                v
                                                −
                                                
                                                   p
                                                   2
                                                
                                                
                                                   n
                                                   i
                                                   u
                                                
                                             
                                             )
                                          
                                       
                                       ∥
                                    
                                    =
                                    
                                       ∥
                                       
                                          v
                                          +
                                          
                                             p
                                             2
                                          
                                          
                                             n
                                             i
                                             u
                                          
                                       
                                       ∥
                                    
                                 
                              
                           
                        Concerning the choice of the parameter p, empirically, we can compute the maximum distances from x
                        
                           i
                        
                        
                           
                              (
                              
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 l
                              
                              )
                           
                         to their k-nearest neighbors, denoted by 
                           
                              
                                 R
                                 i
                              
                              =
                              
                                 max
                                 
                                    j
                                    =
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    ,
                                    k
                                 
                              
                              
                                 ∥
                                 
                                    v
                                    
                                       i
                                       j
                                    
                                 
                                 ∥
                              
                           
                        
                        
                           
                              (
                              
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 l
                              
                              )
                           
                        , then the parameter p is given by 
                           
                              p
                              =
                              
                                 max
                                 
                                    i
                                    =
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    ,
                                    l
                                 
                              
                              
                                 (
                                 
                                    R
                                    i
                                 
                                 )
                              
                           
                        . In our experiments, we find this empirical value works well.

Square both sides of Eq. (14) and move the left side to the right side, then produce

                           
                              (15)
                              
                                 
                                    
                                       
                                          v
                                       
                                       T
                                    
                                    v
                                    +
                                    2
                                    p
                                    
                                       n
                                       i
                                       uT
                                    
                                    v
                                    −
                                    
                                       
                                          v
                                       
                                       T
                                    
                                    
                                       n
                                       i
                                       u
                                    
                                    
                                       n
                                       i
                                       uT
                                    
                                    v
                                    =
                                    0
                                 
                              
                           
                        
                        Eq. (15) is the circular paraboloid formula at x
                        
                           i
                         in the local coordinate system. Then, the location of a neighbor x
                        
                           ij
                         of x
                        
                           i
                         relative to the circular paraboloid is decided by the sign of the following value

                           
                              (16)
                              
                                 
                                    
                                       θ
                                       
                                          i
                                          j
                                       
                                    
                                    =
                                    
                                       v
                                       
                                          i
                                          j
                                       
                                       T
                                    
                                    
                                       v
                                       
                                          i
                                          j
                                       
                                    
                                    +
                                    2
                                    p
                                    
                                       n
                                       i
                                       uT
                                    
                                    
                                       v
                                       
                                          i
                                          j
                                       
                                    
                                    −
                                    
                                       v
                                       
                                          i
                                          j
                                       
                                       T
                                    
                                    
                                       n
                                       i
                                       u
                                    
                                    
                                       n
                                       i
                                       uT
                                    
                                    
                                       v
                                       
                                          i
                                          j
                                       
                                    
                                 
                              
                           
                        If θij
                         > 0, the neighbor x
                        
                           ij
                         lies on the side of the circular paraboloid which the normal n
                        
                           i
                         points to. If 
                           
                              
                                 θ
                                 
                                    i
                                    j
                                 
                              
                              =
                              0
                           
                        , it is on the circular paraboloid. Subsequently, whether the training sample x
                        
                           i
                         is an edge one can be still determined using Eq. (11).

Now, we are ready to present our algorithm of the new edge sample detector. Given a sample set 
                           
                              X
                              =
                              
                                 
                                    {
                                    
                                       x
                                       i
                                    
                                    }
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 l
                              
                           
                        , the ESDCP algorithm is summarized as follows:

                           
                              Step 1: Find the k-nearest neighbors of x
                                 
                                    i
                                  for all i: 
                                    
                                       
                                          x
                                          
                                             i
                                             j
                                          
                                       
                                       ,
                                       i
                                       =
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       l
                                       ;
                                       j
                                       =
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       k
                                    
                                 .

Step 2: Calculate the unit normal vector 
                                    
                                       n
                                       i
                                       u
                                    
                                  according to Eq. (13).

Step 3: Calculate θij
                                  according to Eq. (16).

Step 4: Calculate li
                                  according to Eq. (11). If 
                                    
                                       
                                          l
                                          i
                                       
                                       ≥
                                       1
                                       −
                                       γ
                                    
                                 , then x
                                 
                                    i
                                  is selected as an edge sample.

Take the ring-shaped dataset for example again. The edge samples selected by ESDCP (
                           
                              γ
                              =
                              0.05
                           
                        ) are shown in Fig. 6
                        . Obviously, ESDCP performs better than EISDTP (see Fig. 3(b)), with some edge samples on the inner ring being selected correctly. Generally speaking, ESDCP often gets more edge samples than EISDTP; what's more, these extra edge samples are usually located on the concave regions, which EISDTP hardly handles.

Since the analytic expression of a decision boundary is unavailable in the input space, the direct calculations of the distances from samples to the decision boundary are difficult. Nevertheless, the distances from samples to a decision boundary can be measured by the distances from their mappings to the corresponding OCSVM separating hyper-plane [28].

Given the separating hyper-plane 
                           
                              
                                 Π
                                 2
                              
                              :
                              
                                 f
                                 2
                              
                              
                                 (
                                 x
                                 )
                              
                              =
                              
                                 〈
                                 
                                    
                                       
                                          w
                                       
                                       *
                                    
                                    ,
                                    Φ
                                    
                                       (
                                       x
                                       )
                                    
                                 
                                 〉
                              
                              −
                              
                                 ρ
                                 2
                                 *
                              
                              =
                              0
                           
                         generated from the nearest point problem (7), the distance from the mapping of a sample 
                           x
                         to the hyper-plane Π
                        2 is defined as [28]
                        
                           
                              (17)
                              
                                 
                                    d
                                    
                                       (
                                       x
                                       )
                                    
                                    =
                                    
                                       
                                          
                                             f
                                             2
                                          
                                          
                                             (
                                             x
                                             )
                                          
                                       
                                       
                                          ∥
                                          
                                             
                                                w
                                             
                                             *
                                          
                                          ∥
                                       
                                    
                                 
                              
                           
                        It is well known that different kernel parameters determine the different distributions of sample mappings, resulting in the different geometric locations of separating hyper-planes. Regarding the same sample, its distances, which are calculated in the different feature spaces induced by Gaussian kernels with different parameter values, are incomparable. As all the sample mappings reside on the surface of a unit hyper-sphere when the Gaussian kernel is used [28], the possible maximum distance from these mappings to the separating hyper-plane is 
                           
                              1
                              −
                              
                                 ρ
                                 2
                                 *
                              
                              /
                              
                                 ∥
                                 
                                    
                                       w
                                    
                                    *
                                 
                                 ∥
                              
                           
                         where 
                           
                              
                                 ρ
                                 2
                                 *
                              
                              /
                              
                                 ∥
                                 
                                    
                                       w
                                    
                                    *
                                 
                                 ∥
                              
                           
                         is the geometric distance from the origin to the hyper-plane. For fair comparison, the distance d(x) can be normalized by its possible maximum value as follows [28]:

                           
                              (18)
                              
                                 
                                    
                                       
                                          
                                             
                                                d
                                                N
                                             
                                             
                                                (
                                                x
                                                )
                                             
                                          
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                
                                                   d
                                                   
                                                      (
                                                      x
                                                      )
                                                   
                                                
                                                
                                                   1
                                                   −
                                                   
                                                      ρ
                                                      2
                                                      *
                                                   
                                                   /
                                                   
                                                      ∥
                                                      
                                                         
                                                            w
                                                         
                                                         *
                                                      
                                                      ∥
                                                   
                                                
                                             
                                             =
                                             
                                                
                                                   
                                                      f
                                                      2
                                                   
                                                   
                                                      (
                                                      x
                                                      )
                                                   
                                                   /
                                                   
                                                      ∥
                                                      
                                                         
                                                            w
                                                         
                                                         *
                                                      
                                                      ∥
                                                   
                                                
                                                
                                                   1
                                                   −
                                                   
                                                      ρ
                                                      2
                                                      *
                                                   
                                                   /
                                                   
                                                      ∥
                                                      
                                                         
                                                            w
                                                         
                                                         *
                                                      
                                                      ∥
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   l
                                                
                                                
                                                   
                                                      α
                                                      i
                                                      *
                                                   
                                                   k
                                                   
                                                      (
                                                      
                                                         
                                                            x
                                                            i
                                                         
                                                         ,
                                                         x
                                                      
                                                      )
                                                   
                                                
                                                −
                                                
                                                   ρ
                                                   2
                                                   *
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                         
                                                            i
                                                            =
                                                            1
                                                         
                                                         l
                                                      
                                                      
                                                         
                                                            ∑
                                                            
                                                               j
                                                               =
                                                               1
                                                            
                                                            l
                                                         
                                                         
                                                            
                                                               α
                                                               i
                                                               *
                                                            
                                                            
                                                               α
                                                               j
                                                               *
                                                            
                                                            k
                                                            
                                                               (
                                                               
                                                                  
                                                                     x
                                                                     i
                                                                  
                                                                  ,
                                                                  
                                                                     x
                                                                     j
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                      
                                                   
                                                
                                                −
                                                
                                                   ρ
                                                   2
                                                   *
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        The normalized distance d
                        N(x) varies in the interval (0, 1], thus the distances with respect to different kernel parameter values can be compared under the same scale.

To optimize the Gaussian kernel parameter, an objective function needs to be constructed. Then, a candidate value that minimizes the objective function is chosen to be the optimal σ. In the MIES, the objective function is formulated as [28]
                        
                           
                              (19)
                              
                                 
                                    F
                                    
                                       (
                                       σ
                                       )
                                    
                                    =
                                    
                                       max
                                       
                                          
                                             x
                                             i
                                          
                                          ∈
                                          
                                             Ω
                                             ED
                                          
                                       
                                    
                                    
                                       d
                                       N
                                    
                                    
                                       (
                                       
                                          x
                                          i
                                       
                                       )
                                    
                                    −
                                    
                                       max
                                       
                                          
                                             x
                                             j
                                          
                                          ∈
                                          
                                             Ω
                                             IN
                                          
                                       
                                    
                                    
                                       d
                                       N
                                    
                                    
                                       (
                                       
                                          x
                                          j
                                       
                                       )
                                    
                                 
                              
                           
                        where 
                           Ω
                        
                        ED and 
                           Ω
                        
                        IN denote the sets of edge and interior samples, respectively.

The two terms of the objective function characterize the distances from the edge samples and those from the interior samples to decision boundaries, respectively. The first term encourages the edge sample mappings to approximate the hyper-plane as close as possible, while the second term punishes the situation where the interior sample mappings are close to the hyper-plane [28]. Therefore, by minimizing the objective function MIES can select an optimal kernel parameter.

In this paper, another objective function is used, i.e.,

                           
                              (20)
                              
                                 
                                    F
                                    
                                       (
                                       σ
                                       )
                                    
                                    =
                                    
                                       max
                                       
                                          
                                             x
                                             i
                                          
                                          ∈
                                          
                                             Ω
                                             ED
                                          
                                       
                                    
                                    
                                       d
                                       N
                                    
                                    
                                       (
                                       
                                          x
                                          i
                                       
                                       )
                                    
                                    −
                                    
                                       max
                                       
                                          
                                             x
                                             j
                                          
                                          ∈
                                          
                                             Ω
                                             
                                                ED
                                             
                                             C
                                          
                                       
                                    
                                    
                                       d
                                       N
                                    
                                    
                                       (
                                       
                                          x
                                          j
                                       
                                       )
                                    
                                 
                              
                           
                        where 
                           
                              Ω
                              
                                 ED
                              
                              C
                           
                         is the complement of 
                           Ω
                        
                        ED (
                           
                              
                                 Ω
                                 ED
                              
                              ∩
                              
                                 Ω
                                 
                                    ED
                                 
                                 C
                              
                              =
                              ∅
                           
                         and 
                           
                              
                                 Ω
                                 ED
                              
                              ∪
                              
                                 Ω
                                 
                                    ED
                                 
                                 C
                              
                              =
                              X
                           
                        ). Generally speaking, 
                           Ω
                        
                        IN is a subset of 
                           
                              Ω
                              
                                 ED
                              
                              C
                           
                        . That is to say, any interior sample belonging to the set 
                           Ω
                        
                        IN should also belong to the set 
                           
                              Ω
                              
                                 ED
                              
                              C
                           
                        . This means that we may find some extra critical interior samples in the set 
                           
                              Ω
                              
                                 ED
                              
                              C
                           
                         when they are missing in the set 
                           Ω
                        
                        IN. In such manner, we can avoid the negative effects arising from the possibly improper selection of the interior sample set as much as possible. Besides, if there exist a few internal samples misidentified as the edge ones, they would make the first term to be larger than expected. In this case, we could sort d
                        N(x
                        
                           i
                        ) (x
                        
                           i
                         ∈ 
                           Ω
                        
                        ED) and compute the first term based on a given percentile.

Using the new edge sample detector ESDCP and the new objective function Eq. (20), we develop an improved MIES (IMIES). Given a training sample set 
                           
                              X
                              =
                              
                                 
                                    {
                                    
                                       x
                                       i
                                    
                                    }
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 l
                              
                           
                         and a kernel parameter candidate set 
                           
                              σ
                              =
                              
                                 
                                    {
                                    
                                       σ
                                       j
                                    
                                    }
                                 
                                 
                                    j
                                    =
                                    1
                                 
                                 
                                    N
                                    σ
                                 
                              
                           
                        , the whole algorithm of IMIES is presented as follows:

                           
                              Step 1: Obtain the edge sample set 
                                    Ω
                                 
                                 ED from the sample set 
                                    X
                                  using ESDCP.

Step 2: For each element σj
                                  of the candidate set 
                                    σ
                                 
                                 
                                    
                                       (1)
                                       Solve the OCSVM optimization problem using the GG algorithm and obtain the separating hyper-plane 
                                             
                                                
                                                   Π
                                                   2
                                                
                                                :
                                                
                                                   f
                                                   2
                                                
                                                
                                                   (
                                                   x
                                                   )
                                                
                                                =
                                                
                                                   〈
                                                   
                                                      
                                                         
                                                            w
                                                         
                                                         *
                                                      
                                                      ,
                                                      Φ
                                                      
                                                         (
                                                         x
                                                         )
                                                      
                                                   
                                                   〉
                                                
                                                −
                                                
                                                   ρ
                                                   2
                                                   *
                                                
                                                =
                                                0
                                             
                                          .

Calculate the normalized distances dN
                                          (x
                                          
                                             i
                                          ) 
                                             
                                                (
                                                
                                                   i
                                                   =
                                                   1
                                                   ,
                                                   2
                                                   ,
                                                   …
                                                   ,
                                                   l
                                                
                                                )
                                             
                                           from all the training sample mappings to the separating hyper-plane according to Eq. (18).

Calculate the objective function value F(σj
                                          ) according to Eq. (20).

Step 3: Select the optimal kernel parameter that corresponds to the minimum value in the set of objective function values 
                                    
                                       
                                          {
                                          
                                             F
                                             (
                                             
                                                σ
                                                j
                                             
                                             )
                                          
                                          }
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          N
                                          σ
                                       
                                    
                                 .

@&#EXPERIMENTS@&#

In this section, a series of experiments are conducted to evaluate the performance of our methods. First, IMIES is tested through the experiments on 2-D artificial datasets. We compare IMIES with MIES and DTL via the intuitive 2-D visualization. Note that all the three kernel parameter selection methods are proposed based on the tightness of decision boundaries. Next, some experiments are implemented on benchmark datasets to verify the practicability of IMIES to high-dimensional data. In this part, we also compare the performance of the GG algorithm and the well-known SMO algorithm quantitatively with respect to the classification accuracy and the computational efficiency. All the experiments are conducted on a machine with 2.8GHz Pentium Dual-Core CPU and 4GB RAM.

Training samples in each training set are normalized to zero mean and unit variance before they are used to select optimal kernel parameters and build OCSVM models. In the test stage, test samples are also normalized using the mean and the variance of the corresponding training set. When selecting the optimal kernel parameter for each dataset, the parameters γ  of ESDCP and EISDTP are set to 0.05, while the parameter η of EISDTP takes the value 0.1; the candidate set of the kernel parameter σ is given in the form of {d
                        min : Δσ: d
                        max } or 
                           
                              {
                              
                                 
                                    2
                                 
                                 
                                    linspace
                                    (
                                    
                                       
                                          d
                                          min
                                       
                                       ,
                                       
                                          d
                                          max
                                       
                                       ,
                                       
                                          N
                                          σ
                                       
                                    
                                    )
                                 
                              
                              }
                           
                        . Both {d
                        min : Δσ: d
                        max } and linspace(d
                        min , d
                        max , Nσ
                        ) represent that the candidate values are equally sampled from the interval [d
                        min , d
                        max ], where d
                        min  and d
                        max  denote the minimum and the maximum distances (i.e., the lower and upper bounds for σ) between normalized training samples, respectively. The former directly offers a sampling interval Δσ, while the latter provides an integer Nσ
                         which gives control over the number of the candidate values. For large-scale training sets, we give the candidate set in the form of 
                           
                              {
                              
                                 
                                    2
                                 
                                 
                                    linspace
                                    (
                                    
                                       
                                          d
                                          min
                                       
                                       ,
                                       
                                          d
                                          max
                                       
                                       ,
                                       
                                          N
                                          σ
                                       
                                    
                                    )
                                 
                              
                              }
                           
                        . As the selection of ν is beyond the scope of this paper, ν will be given beforehand in every experiment. For each dataset, we only give the parameter ν of the SMO algorithm, then the parameter μ of the GG algorithm is potentially given by 
                           
                              μ
                              =
                              1
                              /
                              (
                              
                                 ν
                                 l
                              
                              )
                           
                        ; furthermore, the Gaussian kernel parameters of the two algorithms take the same value which has already been optimized using IMIES. The GG algorithm and the SMO algorithm are two completely different algorithms developed for the same OCSVM optimization problem. These parameter settings can ensure the fair comparison between the two algorithms.

The samples from the 2-D artificial datasets are distributed in a ring shape, a banana shape and a two-mode Gaussian shape, respectively. Each of the three artificial datasets contains 500 samples. Among these datasets, the ring-shaped dataset has been taken as an example in Section 4. These geometric shapes, exhibiting various geometric characteristics, can reflect the ability of MIES in different aspects. The ring-shaped and the banana-shaped datasets have convex and concave regions. Differing from the former two shapes, the two-mode Gaussian dataset presents a characteristic of multi-mode. Benefitting from the intuitive 2-D visualization, we can compare the performance of different parameter selection methods via observing how well the resulting decision boundaries fit the geometric shapes.

In this subsection, we employ the GG algorithm to produce the decision boundaries. The precision parameter ε of this algorithm is set to 
                           
                              10
                              
                                 −
                                 5
                              
                           
                        . Due to the absence of evident outliers, we assign a small value to the parameter ν, i.e., 
                           
                              ν
                              =
                              0.03
                           
                        ; but for the banana-shaped dataset, the parameter ν takes a relatively large value 
                           
                              ν
                              =
                              0.1
                           
                         since it contains a few outliers. For each artificial dataset, the candidate set of the kernel parameter is given in the form of {d
                        min : 0.01: d
                        max }; different parameter selection methods select their own optimal kernel parameters individually.


                        Fig. 7
                         shows the edge samples selected by ESDCP for the banana-shaped and the two-mode Gaussian datasets. It should be noted that the edge samples selected for the ring-shaped dataset can be found in Fig. 6. Clearly, the proposed ESDCP selects the edge samples successfully which follow the geometric shapes of these artificial datasets. Particularly, in Fig. 7(a) we find several outliers are identified as the edge samples.

The optimal kernel parameter values selected by IMIES, MIES and DTL are listed in Table 1
                        . The corresponding decision boundaries for the artificial datasets are plotted in Figs. 8–10
                        
                        
                        , respectively. For the ring-shaped dataset, MIES does not perform well. The decision boundary resulting from MIES only fits the outer ring well, but fails to fit the inner ring. The non-target samples lying in the empty round regions will be misidentified as the target ones. EISDTP employed in the MIES cannot correctly select the edge samples on the inner ring (see Fig. 3(a)), due to its weakness in dealing with the edge samples on the concave regions with small radius of curvatures. However, these edge samples are exactly critical to generate an appropriate decision boundary that follows the ring shape. The lack of such edge samples forces MIES to select a large kernel parameter, causing the decision boundary to be loose. As for DTL, its decision boundary fits both the inner and the outer rings passably. However, this boundary contains an undesirable annular region. The target samples lying in this region will be rejected, leading to a high false positive rate. For the banana-shaped dataset, MIES achieves a good result. In this case, MIES and IMIES receive the same kernel parameter value (see the second column in Table 1). On the other hand, DTL mistakes part target regions of the banana-shaped dataset as the non-target ones. The decision boundary resulting from DTL is not smooth at the concave regions and part of it extends to the internal regions of the data distribution. For the two-mode Gaussian dataset, intuitively, MIES gives a slightly underfitting decision boundary. Regarding DTL, at first glance, it seems to perform well on this dataset. However, each of the two modes has a small hole inside the decision boundary, showing a tendency to slight overfitting. Comparing the decision boundaries of different methods, we easily observe that IMIES shows the best performance among these methods. The decision boundaries resulting from IMIES fit the geometric shapes of all the three datasets neither tightly nor loosely, which proves that the selected kernel parameters are suitable. In particular, let's concern the performance of IMIES and MIES on the banana-shaped dataset again. Although a few outliers are identified as the edge samples, both IMIES and MIES still receive the suitable kernel parameter values. The reason for this is that the first term in the objective function of MIES or IMIES, measuring the distances from the edge samples to decision boundaries, is calculated using the MAX function. When the decision boundary approaches the expected one, the normalized distance values (see Eq. (18)) of these outliers are usually negative while those of real edge samples are near zero. By using the MAX function, the first term is only determined by the real edge samples rather than the outliers.

The benchmark datasets include 8 datasets: the Svmguide1 dataset from the LIBSVM data collection [32] and other 7 datasets from the UCI machine learning repository [33]. These datasets vary greatly in the number of samples as well as the dimensions. Details of these benchmark datasets are listed in Table 2
                        . For each of the datasets, the class containing the largest number of samples is regarded as the negative class, and the other class as the positive class. The Cardiotocography dataset is initially used for three-class classification, but we just regard the normal state as the negative class and combine other two states into the positive class. For each of the datasets, 2/3 of the negative samples are used to construct the training set, and the remaining 1/3 negative and all the positive samples to form the test set. Therefore, each training set contains only negative samples, while the corresponding test set contains both positive and negative samples.

To quantitatively evaluate the performance of the GG algorithm and the SMO algorithm, we use five evaluation indicators: the g-mean, the true positive rate (TPR) and the true negative rate (TNR) for the classification accuracy evaluation; the training time and the number of kernel evaluations for the computational efficiency evaluation. Among these indicators, the g-mean metric is defined as the geometric mean of TPR and TNR [34], i.e., 
                           
                              
                                 G
                                 −
                                 mean
                                 =
                              
                              
                                 
                                    TPR
                                    ×
                                    TNR
                                 
                              
                           
                        . This metric is usually employed to evaluate the overall classification accuracies on imbalanced datasets.

For each of the datasets, both the precision parameter of the GG algorithm and the tolerance parameter of the Karush–Kuhn–Tucker (KKT) conditions for the SMO algorithm are set to 
                           
                              10
                              
                                 −
                                 3
                              
                           
                        . The initialization of the SMO algorithm follows the idea from Ref. [6]. If the SMO algorithm is initialized in the same way as the GG algorithm, we find it will take more time to train the OCSVM model. The parameter settings for the selection of kernel parameters are given in Table 3
                        
                        . Note that the parameter μ of the GG algorithm is given by 
                           
                              μ
                              =
                              1
                              /
                              (
                              
                                 ν
                                 l
                              
                              )
                           
                        . IMIES, MIES and DTL select their own optimal kernel parameters individually. The kernel parameter values are listed in Table 4. Then, the trained OCSVM models using respective optimal kernel parameters are applied to the same test set. The g-mean/TPR/TNR metrics are also reported behind the optimal kernel parameters in Table 4.
                     

In terms of the g-mean metric, as shown in Table 4, IMIES is significantly superior to MIES on five datasets (Heart, Ionosphere, Breast, Cardiotocography and Spambase). Even for other three datasets, our method still gives comparable results to MIES. While accompanying low TNRs, interestingly, MIES achieves rather high TPRs on the Breast, the Cardiotocography and the Spambase datasets, from which we can know that the kernel parameters selected by MIES on these datasets produce overfitting decision boundaries. The high test accuracies on the positive samples (i.e., high TPRs) are obtained at the cost of the high test errors on the negative samples (i.e., low TNRs), which finally results in the low g-means. This may be caused by the improper selection of the edge or the interior sample set. For example, regarding the Spambase dataset, if we use the new objective function Eq. (20) but still select the edge samples using EISDTP, then MIES can obtain a kernel parameter value that yields a g-mean of 47.93%, larger than the original g-mean of 19.13% (see Table 4); furthermore, if we use the new objective function and use ESDCP to select the edge samples, namely, using the proposed IMIES, the g-mean further increases to 72.36 % (see Table 4). This is an indication that EISDTP employed in the original MIES has selected the improper edge or interior sample set. On the other hand, IMIES also outperforms DTL on five datasets (Biomed, Heart, Ionosphere, Breast and Cardiotocography) and receives comparable g-means on the Diabetes and the Svmguide1 datasets. DTL gives unstable performance. For example, the performance of DTL can be comparable to that of IMIES on the Diabetes and the Svmguide1 datasets and even better on the Spambase dataset. But for the Heart and the Ionosphere datasets, it results in overfitting models, with high TPRs but low TNRs. The unstable performance is due to the fact that DTL gets a candidate kernel parameter by the bisection method in its iterations [27]; however, the bisection method could easily get stuck in a bad local optimum because of its sensitivity to the initial candidate interval of the kernel parameter. Among these methods, only our method achieves high g-means on the test sets and gets good balances between TPRs and TNRs. In summary, compared with other two methods, the proposed IMIES is able to select more suitable kernel parameters for OCSVM.

In addition, we implement the GG algorithm and the SMO algorithm on these benchmark datasets to investigate their respective performance, including the classification accuracy and the computational efficiency. For each of the datasets, the two algorithms use the same kernel parameter selected by IMIES (listed in Table 4). The results of the two algorithms on the benchmark datasets are reported in Table 5.
                     

From the results in Table 5, it is apparent that the GG algorithm always gives comparable g-means to the SMO algorithm. In fact, the comparable classification accuracies are to be expected since the two different algorithms are developed for the same OCSVM optimization problem. In contrast to the classification accuracy, we are more concerned about the computational efficiency. In terms of the computational efficiency, the proposed GG algorithm brings very encouraging results. For every dataset, the GG algorithm achieves less training time and fewer number of kernel evaluations, significantly outperforming the SMO algorithm. In particular, the superiority of the GG algorithm is exhibited more clearly on the last three datasets which all have relatively large sample sizes. Notice that the SMO algorithm consumes too much training time on the Breast dataset. For this dataset, we have found that the SMO algorithm reaches the maximum number of iterations (i.e., 10,000) before the KKT conditions are fulfilled within the tolerance parameter value, thus it seems not to converge. This may be due to the drawback of the SMO algorithm that it cannot ensure the convergence in some unusual cases [6]. Unfortunately, the Breast dataset seems to be such a case. From the indicators for the computational efficiency evaluation, we see the enhanced performance of the GG algorithm against its popular algebraic competitor. Although the SMO algorithm decomposes the original QP problem into a series of sub-problems and uses a clever caching scheme, it cannot avoid the repetitive searches for the best pair of Lagrange multipliers to be optimized in the next iteration through ambiguous and sometimes inefficient heuristics. On the contrary, the GG algorithm is a straightforward optimization algorithm, with an intuitive and explicit optimization target at each iteration. In summary, it is reasonable to state that the GG algorithm is computationally more efficient while achieving comparable accuracies to the SMO algorithm. The superiority of the geometric algorithm suggests its potential applications in large-scale problems.

@&#CONCLUSIONS@&#

In this paper, we propose a novel optimization algorithm and a novel kernel parameter selection method for OCSVM. For appropriate choices of parameters, the primal maximum margin problem of OCSVM is equivalent to a nearest point problem whose goal is to find the nearest point from the reduced convex hull of training samples to the origin. The GG algorithm is proposed to solve the nearest point problem. It is a straightforward geometric algorithm for OCSVM, with an intuitive and explicit optimization target at each iteration. Moreover, we develop an IMIES for the selection of the Gaussian kernel parameter. Compared with the original MIES, IMIES employs a new edge sample detector called ESDCP to identify edge samples and a new objective function to select the optimal kernel parameter. The experimental results on the 2-D artificial datasets and the benchmark datasets show that IMIES is capable of selecting suitable kernel parameters. We also implement the GG algorithm and the SMO algorithm on the benchmark datasets to investigate their respective performance. From the experimental results, it can be concluded that the GG algorithm is computationally more efficient while achieving comparable accuracies to the SMO algorithm. In our experiments, the parameter ν is always given beforehand; but in fact, it may also affect the performance of OCSVM. Joint optimization of σ and ν can be taken into account in future.

@&#ACKNOWLEDGMENTS@&#

This research is supported by the National Natural Science Foundation of China (Grant nos. 51175158 and 51375152) and the Hunan Provincial Innovation Foundation for Postgraduate (Grant no. CX2014B146).

Obviously, the normals of the two separating hyper-planes Π and Π
                     2  are completely the same. In order to prove that Π and Π
                     2 are the same hyper-plane when the cases 
                        
                           μ
                           =
                           1
                           /
                           (
                           
                              v
                              l
                           
                           )
                        
                      and 
                        
                           1
                           −
                           
                              l
                              2
                           
                           μ
                           ≠
                           0
                        
                      hold, we only need to prove 
                        
                           
                              ρ
                              2
                              *
                           
                           =
                           
                              ρ
                              *
                           
                        
                      when those cases hold. The proof is given as follows.

According to the strong duality theorem [35], the optimal objective values of the primal problem (1) and its dual problem (2) are the same. For the primal and the dual optimal solutions, when the case 
                        
                           μ
                           =
                           1
                           /
                           (
                           
                              v
                              l
                           
                           )
                        
                      holds we have

                        
                           (A.1)
                           
                              
                                 
                                    1
                                    2
                                 
                                 
                                    
                                       ∥
                                       
                                          
                                             w
                                          
                                          *
                                       
                                       ∥
                                    
                                    2
                                 
                                 −
                                 
                                    ρ
                                    *
                                 
                                 +
                                 μ
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    l
                                 
                                 
                                    ξ
                                    i
                                    *
                                 
                                 =
                                 −
                                 
                                    1
                                    2
                                 
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    l
                                 
                                 
                                    
                                       ∑
                                       
                                          j
                                          =
                                          1
                                       
                                       l
                                    
                                    
                                       
                                          α
                                          i
                                          *
                                       
                                       
                                          α
                                          j
                                          *
                                       
                                       k
                                       
                                          (
                                          
                                             
                                                x
                                                i
                                             
                                             ,
                                             
                                                x
                                                j
                                             
                                          
                                          )
                                       
                                    
                                 
                              
                           
                        
                     where 
                        
                           
                              ξ
                              i
                              *
                           
                           =
                           0
                        
                      for 
                        
                           0
                           ≤
                           
                              α
                              i
                              *
                           
                           <
                           μ
                        
                      and 
                        
                           
                              ξ
                              i
                              *
                           
                           =
                           
                              ρ
                              *
                           
                           −
                           
                              〈
                              
                                 
                                    
                                       w
                                    
                                    *
                                 
                                 ,
                                 Φ
                                 
                                    (
                                    
                                       x
                                       i
                                    
                                    )
                                 
                              
                              〉
                           
                           >
                           0
                        
                      for 
                        
                           
                              α
                              i
                              *
                           
                           =
                           μ
                        
                     . Let I
                     2 be the set of the indices of sample points whose combination coefficients satisfy 
                        
                           
                              α
                              i
                              *
                           
                           =
                           μ
                        
                      and let l
                     2 be the size of the set I
                     2. Since 
                        
                           
                              
                                 w
                              
                              *
                           
                           =
                           
                              ∑
                              
                                 i
                                 =
                                 1
                              
                              l
                           
                           
                              
                                 α
                                 i
                                 *
                              
                              Φ
                              
                                 (
                                 
                                    x
                                    i
                                 
                                 )
                              
                           
                        
                     , the above equation can be rewritten as

                        
                           (A.2)
                           
                              
                                 
                                    
                                       
                                          0
                                          
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          
                                          
                                             
                                                ∥
                                                
                                                   
                                                      w
                                                   
                                                   *
                                                
                                                ∥
                                             
                                             2
                                          
                                          −
                                          
                                             ρ
                                             *
                                          
                                          +
                                          μ
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                
                                                   I
                                                   2
                                                
                                             
                                          
                                          
                                             (
                                             
                                                
                                                   ρ
                                                   *
                                                
                                                −
                                                
                                                   〈
                                                   
                                                      
                                                         
                                                            w
                                                         
                                                         *
                                                      
                                                      ,
                                                      Φ
                                                      
                                                         (
                                                         
                                                            x
                                                            i
                                                         
                                                         )
                                                      
                                                   
                                                   〉
                                                
                                             
                                             )
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       =
                                    
                                    
                                       
                                          
                                          
                                             (
                                             
                                                1
                                                −
                                                μ
                                                
                                                   l
                                                   2
                                                
                                             
                                             )
                                          
                                          
                                             
                                                ∥
                                             
                                             
                                                
                                                   w
                                                
                                                *
                                             
                                             
                                                
                                                   ∥
                                                
                                                2
                                             
                                          
                                          −
                                          
                                             (
                                             
                                                1
                                                −
                                                μ
                                                
                                                   l
                                                   2
                                                
                                             
                                             )
                                          
                                          
                                             ρ
                                             *
                                          
                                          −
                                          μ
                                          
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                
                                                   I
                                                   2
                                                
                                             
                                          
                                          
                                          
                                             (
                                             
                                                
                                                   〈
                                                   
                                                      
                                                         
                                                            w
                                                         
                                                         *
                                                      
                                                      ,
                                                      Φ
                                                      
                                                         (
                                                         
                                                            x
                                                            i
                                                         
                                                         )
                                                      
                                                   
                                                   〉
                                                
                                                −
                                                
                                                   
                                                      
                                                         ∥
                                                      
                                                      
                                                         
                                                            w
                                                         
                                                         *
                                                      
                                                      
                                                         ∥
                                                      
                                                   
                                                   2
                                                
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        
                     When the case 
                        
                           1
                           −
                           μ
                           
                              l
                              2
                           
                           ≠
                           0
                        
                      holds, we obtain

                        
                           (A.3)
                           
                              
                                 
                                    ρ
                                    *
                                 
                                 =
                                 
                                    
                                       ∥
                                       
                                          
                                             w
                                          
                                          *
                                       
                                       ∥
                                    
                                    2
                                 
                                 −
                                 
                                    μ
                                    
                                       1
                                       −
                                       
                                          l
                                          2
                                       
                                       μ
                                    
                                 
                                 
                                    ∑
                                    
                                       i
                                       ∈
                                       
                                          I
                                          2
                                       
                                    
                                 
                                 
                                    (
                                    
                                       
                                          〈
                                          
                                             
                                                
                                                   w
                                                
                                                *
                                             
                                             ,
                                             Φ
                                             
                                                (
                                                
                                                   x
                                                   i
                                                
                                                )
                                             
                                          
                                          〉
                                       
                                       −
                                       
                                          
                                             
                                                ∥
                                                
                                                   
                                                      w
                                                   
                                                   *
                                                
                                                ∥
                                             
                                          
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                        
                     Given 
                        
                           
                              ρ
                              2
                              *
                           
                           =
                           
                              
                                 ∥
                              
                              
                                 
                                    w
                                 
                                 *
                              
                              
                                 
                                    ∥
                                 
                                 2
                              
                           
                           −
                           
                              μ
                              
                                 1
                                 −
                                 
                                    l
                                    2
                                 
                                 μ
                              
                           
                           
                              ∑
                              
                                 i
                                 ∈
                                 
                                    I
                                    2
                                 
                              
                           
                           
                              (
                              
                                 
                                    〈
                                    
                                       
                                          
                                             w
                                          
                                          *
                                       
                                       ,
                                       Φ
                                       
                                          (
                                          
                                             x
                                             i
                                          
                                          )
                                       
                                    
                                    〉
                                 
                                 −
                                 
                                    
                                       
                                          ∥
                                       
                                       
                                          
                                             w
                                          
                                          *
                                       
                                       
                                          ∥
                                       
                                    
                                    2
                                 
                              
                              )
                           
                        
                     , we have 
                        
                           
                              ρ
                              2
                              *
                           
                           =
                           
                              ρ
                              *
                           
                        
                     .

The proof is complete.

@&#REFERENCES@&#

