@&#MAIN-TITLE@&#Integration of IEC 61850 SCL and OPC UA to improve interoperability in Smart Grid environment

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Proposal of integration of IEC 61850 SCL with OPC UA information model in a Smart Grid environment


                        
                        
                           
                           Definition of OPC UA ObjectTypes able to represent IEC 61850 SCL elements


                        
                        
                           
                           Definition of mapping models between IEC 61850 SCL elements and OPC UA objects


                        
                        
                           
                           Definition of an algorithm for the mapping of IEC 61850 SCL elements to OPC UA objects


                        
                        
                           
                           Implementation and performance evaluation of the mapping algorithm


                        
                     
                  
               
            

@&#KEYPHRASES@&#

IEC 61850

OPC UA

SCL

Smart Grid

@&#ABSTRACT@&#


               
               
                  Integration of the several heterogeneous and geographically dispersed actors in Smart Grid environment is currently hampered by the usage of non-interoperable and proprietary automation solutions. Standards-compliant integration is an indispensable requirement for successful Smart Grid automation. The international standard IEC 61850 has been recognised as one of the fundamental components for reference Smart Grid architectures. Nevertheless, certain parts of the IEC 61850 definitions seem inadequate to compete with the accelerated Smart Grid evolution. For this reason, current literature presents solutions able to surpass the main limitations of the standard, improving harmonisation in Smart Grid; among them, there is integration of IEC 61850 data model with OPC UA information model. According to the current literature, integration of IEC 61850 with OPC UA does not involve the IEC 61850 engineering process, based on a particular language called Substation Configuration description Language (SCL). The paper will present a common Smart Grid scenario where interoperability could be improved extending the idea of the integration between IEC 61850 and OPC UA also to the SCL-based engineering capabilities of the IEC 61850 standard. The paper will present a proposal of mapping between IEC 61850 SCL and OPC UA, describing the relevant algorithm, its implementation and performance evaluation.
               
            

@&#INTRODUCTION@&#

Smart Grid involves significant number of heterogeneous and geographically dispersed actors with intermittent energy sources such as distributed energy resources (DERs), energy storage systems (ESSs) and electric vehicles (EVs) [1,2]. Integration of these Smart Grid entities has resulted in novel decentralised management system architectures such as virtual power plants (VPPs) [3] and smart homes/buildings [4] while also introducing new solutions for optimised control [2,5].

Fulfilling Smart Grid vision means the enabling of the two-way flow of power and information, and creating prosumers (power grid actors that are both producers and consumers of electricity). Reaching this goal has several prerequisites in a form of communication [6] and electrical infrastructure [7] along with intelligent automation systems [8]. Mainly, this goal is hampered by usage of non-interoperable and proprietary automation solutions, as the Smart Grid entities require scalable integration frameworks and optimised management techniques that exceed the capabilities of conventional automation solutions. Therefore, standards-compliant integration is an indispensable requirement for successful and secure Smart Grid automation [9].

The international standard IEC 61850 [10] has been recognised as a globally accepted solution enabling integration of heterogeneous devices and applications in the power system automation domain. It is identified as one of the fundamental components for reference Smart Grid architectures [11].

Nevertheless, certain parts of the IEC 61850 definitions are inadequate to compete with the accelerated Smart Grid evolution [12]. This is most notable in selection of manufacturing message specification (MMS) [13] as middleware technology for the vertical communication in IEC 61850 systems (i.e., between field devices and applications). MMS is regarded as an inappropriate approach for Smart Grid [5].

Current literature provides for proposals of solutions able to surpass the aforementioned issue; among them there is integration of IEC 61850 with OPC UA [14–16] to perform harmonisation in Smart Grid; the overall idea is based on the mapping of IEC 61850 data model to OPC UA information model [5,12,17–19]. By providing this mapping, it is possible that pure OPC UA clients without any previous knowledge of the IEC 61850 can make use of the relevant data and type model, just exploring the information model maintained by an OPC UA Server. Results present in the current literature demonstrate that this solution results in communication architecture for Smart Grid with many advantages in terms of security, interoperability and internet communication [20].

According to the literature, the focus of the integration between IEC 61850 and OPC UA is currently limited to the IEC 61850 data model defined in the IEC 61850-7 of the standard series [10]. Mapping of IEC 61850 with OPC UA does not involve, at this moment, the IEC 61850 engineering process, as clearly pointed out in [5].

The engineering process for IEC 61850 systems is based on the exchange of XML documents, which are formatted according to the substation configuration description language (SCL), defined in the part 6 of the IEC 61850 standard, i.e., IEC 61850-6 [10]. The engineering process consists of configuration of communication entities, electric networks and communication network topologies; this process is relatively static and most commonly used for substation automation systems. IEC 61850 engineering process is based on engineering tools for configuration of substation automation systems; a very detailed analysis of available configuration tools under IEC 61850 standard was presented in [21].

In some Smart Grid scenarios, interoperability could be improved by extending the idea of the mapping between IEC 61850 and OPC UA also to the part 6 of the IEC 61850 standard, which defines the SCL, as said. Section 2 will point out a common Smart Grid scenario, highlighting the advantages which may be achieved by the integration of IEC 61850-6 SCL with OPC UA. For this reason, the aim of this paper is that to propose a mapping of the entire set of elements featured by IEC 61850-6 SCL into the OPC UA information model. The proposal is original, as no other solutions are present in the current literature.

The paper is organised as it follows. Next section will present an example of Smart Grid scenario inside of which the proposal has been conceived; the description will allow the reader to clearly understand the advantages of the proposed mapping and why this proposal may be able to improve interoperability in some of the Smart Grid environments like that here presented. Then, after a brief overview on IEC 61850 (mainly focusing on the SCL) and OPC UA (focusing on the information model), the paper will present the proposal of integration of IEC 61850 SCL with OPC UA information model; the mapping of each single part of SCL documents with OPC UA objects will be clearly described. Finally, information about current implementation and performance evaluation of the proposed mapping algorithm will be given in the last section of the paper.

Electrical distribution systems that have traditionally operated passively to move electricity from the high-voltage transmission grid to end-use customers were never designed for bi-directional flows that could originate from any point on the system and from any one of dozens of different types of DERs. Also, distribution system operations were not designed to integrate or coordinate thousands of flexible customer and merchant DER.

For this reason, an emerging integrated distributed electricity structure is even more adopted; it can be considered a new approach of electric distribution in Smart Grid, featuring energy sources and operating decisions broadly decentralised and localised. Fig. 1
                      provides a conceptual schematic view of the emerging integrated distributed structure. It is characterised by a complementary mix of centralised and distributed resources including generation, energy storage, power flow and stability control devices, and control systems including sensing devices and load management capabilities. These resources are owned and controlled by a number of parties, including utilities, merchant distributed generators, merchant energy storage, demand aggregators, energy services firms and customers. To provide safe and reliable electric service, such a system requires an integrated and coordinated operational paradigm that clearly delineates roles and responsibilities between the two main actors shown in Fig. 1: transmission system operator (TSO) and one or more distribution system operators (DSOs).

TSO is the inter-area system operator and has the fundamental role to provide reliable open-access transmission service. This entails maintaining supply–demand balance and transmission reliability by scheduling and dispatching resources and interchange transactions with other regional balancing authorities. Additional challenges of TSO are large-scale integration of renewable sources and managing and mastering congestions.

DSO is a regional system operator and has the main role to maintain safety and reliability of the local distribution system. This involves regular reconfiguration or switching of circuits and substation loading for scheduled maintenance, and to isolate substation and distribution feeder faults and restore electric service. DSO are also responsible to ensure local voltage, power factor and phase balance maintained within engineering standards. Due to the presence of a greater number of DERs, in addition to the functions explained before, the DSO is defined by a new minimal set of functional responsibilities. This includes reliably operating the local distribution system below each substation, which will entail coordinating operations of the interconnected DERs. DSO has to ensure that DER-provided services are properly coordinated, scheduled and managed in real time so that the TSO has predictability and assurance that DER committed to provide transmission services will actually deliver those services across the distribution system.


                     Fig. 1 shows a typical organisation of a DSO. It is made up by several DSO operational centres, each managing many electric power distribution systems; a power distribution system is made up by a primary substation and several secondary substations. Fig. 1 shows examples of passive customers (i.e., only consuming electricity, like buildings and factories) and active customers (i.e., also producing electricity, like photovoltaic plants and wind energy systems) connected to the secondary substations.

Each DSO Operational centre is typically based on supervisory control and data acquisition (SCADA) system collecting information and managing the entire set of electric power distribution systems assigned to the DSO operational centre.

The role of the DSO involves strict interactions between DSO operational centre, between different DSOs and mainly with TSO (allowing scheduling interchange between TSO and DSOs). This means that information exchange/cooperation between these players gets more and more important; communication system has to be standardised (i.e., using standard data formats, protocols and channels) and flexible; information security must be also guaranteed.

Information exchange is ideally organised using a cascading system. IEC 61850 is generally adopted to allow information exchange inside each electric power distribution system (i.e., among primary and secondary substations). The same standard may be also used to realise the exchange of information between each DSO operational centre and the electric power distribution system. About the exchange of information between SCADA systems, DSOs and TSO, in this paper, it has been assumed that it occurs using OPC UA. Introduction pointed out the importance of this standard to harmonise information exchange in Smart Grid; as said, results present in the current literature demonstrate that adoption of OPC UA results in communication architecture for Smart Grid with many advantages in terms of security, interoperability and internet communication [20]. Fig. 1 shows the different communication standards assumed in this Smart Grid scenario.

The use of OPC UA for the exchange of information between SCADA systems means that each SCADA must expose a data set, the so-called OPC UA AddressSpace containing OPC UA objects (described in Section 4), which common client applications can explore, read and write (if allowed). The data set must be configured in order to reflect the real structure of each electric power distribution system connected to the SCADA; the entire set of information describing the electrical components present in the primary and secondary substations must be mapped into the OPC UA objects contained in the OPC UA data set published by each SCADA.

Building the entire OPC UA data set for each SCADA system may be very time-consuming because primary and secondary substation systems may feature a huge number of information to be published (e.g., list of devices installed, details about internal communication, list of functions and services available inside a substation). As said in the introduction, the IEC 61850-6 standard defines the SCL to allow the description of each (primary or secondary) substation; suitable SCL-based documents are able to describe each component present in a substation. Their content may be used to configure the OPC UA data set for a SCADA system.

On the basis of what said, the proposal made by the authors in this paper is that to use the SCL-based documents describing substations to automatically configure the OPC UA data set for each SCADA system present in the architecture of Fig. 1. An automatic process is proposed and implemented to map each element present in a SCL-based document to OPC UA objects, so building the OPC UA AddressSpace which each SCADA server will expose. It is very important to point out that this automatic process allows a great saving of time, as SCL documents describing complex substation automation systems may contain several hundreds of thousands of information and may feature sizes of several Mbytes.

The advantage of this proposal in the context of the Smart Grid scenario here presented, seems very important as it allow an automatic procedure able to build the entire OPC UA data set modelling the exact structure of each primary and secondary substation. OPC UA objects so created represent the same information of the substation automation systems described by IEC 61850-6 SCL and may be easily exchanged by OPC UA compliant applications using the standardised OPC UA services.

What said until now allows to point out that the proposal improves interoperability in the Smart Grid environments like that here presented. The proposal is original, as no mapping solutions between IEC 61850-6 SCL and OPC UA are present in the current literature.

IEC 61850 is the leading standard for substation automation. It is intended to structure the intelligence of protection, control, monitoring and automation functions. The standard fulfils automation architecture requirements for utility subsystems, enabling communication and semantic interoperability among multi-vendor equipment. The following sub-sections describe IEC 61850 main features.

IEC 61850 defines an object-oriented modelling of process data semantics required for the power system automation.

IEC 61850 data model has been primarily defined for the exchange of information within substations by the document IEC 61850-7-4 [10]. IEC 61850 data modelling is now extended for wind power plant domain by IEC [22], for DERs by IEC 61850-7-420 [10] and for hydropower plants by the standard IEC 61850-7-410 [10]. It is expected that in near future IEC 61850 will provide semantic data models for several other Smart Grid assets such as an electric vehicle supply equipment (EVSE), smart homes/buildings and industrial interfaces.


                        Fig. 2
                         (presented in [12]) shows the IEC 61850 data model. Using the same definition given in [12], top parent class is the Server, which is hosted by physical device, i.e., the controller part of the device, which is also called the intelligent electronic device (IED). The server consists of one or more logical devices (LDs), i.e., virtual representations of devices intended for supervision, protection or control of automated systems. LDs are created by combining several logical nodes (LNs), which represent various device functionality interfaces. Data objects (DOs) are groups of data attributes (DAs); a typical DO instance consists of at least three DAs: the data value, the data quality and the data timestamp.

From application-level perspective (again shown by Fig. 2, as done in [12]), DAs are categorised according to specific functional use (e.g., control, configuration, measurement); hence, DAs are designated by functional constraint (FC) indicating use category. Furthermore, references to DOs and its subtypes can be organised into data set (DS), which are used by IEC 61850-client application in order to optimise communication bandwidth usage.

Data exchange services used in utility subsystems such as substations are defined by the IEC 61850-7-2 standard [10]. In particular, this document defines the abstract communication service interface (ACSI) as a paradigm used for vertical and horizontal communication among IEC 61850 devices.

IEC 61850 engineering process is aimed both to describe and configure each part of a substation, through particular engineering tools, in a distributed substation automation system environment. In order to allow interoperability between engineering tools of different manufacturers, the IEC 61850 engineering process is based on exchange of XML-based documents, which are formatted according to the system configuration description language (SCL).

Part 6 of IEC 61850 standard defines SCL and its usage to describe a model of the power system structure (e.g., which primary apparatus functions are used and how the apparatus are connected), including its communication system, the application-level communication (e.g., how data is grouped into data sets for sending) and features of each IED present in the system. The SCL-based model of a power system is realised by a SCL document containing the following sections, each aimed to describe a specific part of the entire system: header, substation, IED, communication and DataTypeTemplates.

At this moment, two different versions of SCL document have been defined: edition 1.0 and 2.0; in the following, description of SCL will be limited to edition 1.0.

IEC 61850 engineering process is based on the use of several kinds of SCL document; the main difference between them consists of the type of sections present. Each kind of SCL document features a particular file extension; they are IED capability description (with file extension .ICD), system specification description (.SSD), substation configuration description (.SCD) and configured IED description (.CID). Among these documents, the .SCD file is the most complete as it contains the full description of a substation automation system, and for this reason it contains all the five sections listed before.


                        Fig. 3
                         shows the complete engineering process according to the IEC 61850 part 6. The System Configurator is a tool that is able to import configuration files describing in detail the capabilities of an IED (defined by a .ICD file) and system specification (defined by a .SSD file), describing the single line diagram of the substation (i.e., the complete set of electrical devices) and the required logical nodes. The system configurator generates a substation related configuration file (defined by a .SCD file). The IED configurator is a manufacturer-specific tool that is able to import the system configuration (.SCD file), provides IED-specific settings and generates IED-specific configuration files, to be loaded into each IED.

In the following, the overview about each section of a SCL document will be given. In order to better understand the description, the same example present in the IEC 61850-6 standard [10] will be used to highlight the features of each single SCL section.

The substation automation system considered in the example is shown by Fig. 4
                         using the single line diagram [23]. It is made up by 5 bays:
                           
                              •
                              Bay 1. It is featured by the D1Q1 feeder with a transformer and a current transformer (CTR)

Bay 2. It contains a feeder with a disconnector (DIS), a circuit breaker (CBR), a CTR, and a voltage transformer (VTR)

Bay 3. It is made up by only a static busbar

Bay 4. It contains the E1Q1 feeder with a DIS, a CBR, a CTR and a VTR

Bay 5, with E1Q3 Feeder, DIS, CBR, CTR, VTR

The current is infeed via D1Q1 to the transformer; then it is distributed at the lower voltage side to the two lines E1Q1 and E1Q3.


                        Fig. 4 and Table 1
                         show the IEDs of the Substation system, their allocation to the switchyard bays and their intended functionality. IEDs are drawn by rectangles located in the relevant bay. Fig. 4 points out also the communication connection of the IEDs by a single communication bus.

In the following sub-sections, the SCL sections present in the .SCD document describing the substation automation system shown by Fig. 4 will be presented and explained.

Each SCL document has a Header element, which contains a document reference and a version/revision history, as usual for document identification and the tracking of changes in a project.

In details, the SCL Header element is made up by several attributes: id, version, revision, toolID and nameStructure. It contains another SCL element, named History. SCL history is made up by a list of Hitem elements, each of which identifies a previously approved version of the SCL document. A SCL Hitem element holds the attributes: version, revision, when, who, what and why. Fig. 5
                            shows a very simple example of this section.

The SCL substation section allows to model the functional structure of a substation and to identify the primary devices and their electrical connections. For an industrial process or for the description of a whole power network, it is possible to have several substation sections, one for each substation. Description of a substation is very complex as it is realised through the specification of a hierarchical structure made up by several levels.

The SCL substation element defines substation; it features two attributes: name and desc. It contains at least one SCL VoltageLevel element, which includes one or more Bay elements. Fig. 6
                            shows the SCL substation section with attributes name
                           =“S12” and desc
                           =“Baden”; it refers to the substation shown by Fig. 4. For space limitation, it contains only the description of Bay 4 of Fig. 4, where the feeder E1Q1 is present. For this reason, a VoltageLevel element with attribute name E1 is defined, containing, among the other ones, the Bay element with attribute name Q1. It is very important to point out that the couple VoltageLevel name and Bay name identifies the feeder contained in the bay, i.e., E1Q1. Description of Bay is made up by a list of SCL LNode elements, pointing out logical nodes present in the bay and their location inside IEDs; in particular, each LNode features the attribute iedName related to the name of the IED containing the logical node. Fig. 6 shows the LNode elements related to the IEDs E1Q1SB1, E1Q1BP3, E1Q1BP2, described by Table 1. These IEDs are relevant to Bay 4 and are all connected to the single communication bus, as shown by Fig. 4.

Each bay element might host conducting equipment (ConductingEquipment) and connectivity nodes (ConnectivityNode), which are used to define topological connections between equipment within a single line diagram. Considering the example of Fig. 6, conducting equipment refers to the CBR, DIS, VTR and CTR shown in Fig. 6 for Bay 4, according to the values of the attribute type present for each SCL ConductingEquipment element.

The SCL substation element might also contain LNodes, PowerTransformer, GeneralEquipment and optionally several Function elements.


                           IED section describes the (pre-)configuration of an IED: its access points (to allow communication), the logical devices and logical nodes instantiated on it. Furthermore, it defines the capabilities of an IED in terms of communication services offered. There is one SCL IED element for each IED.

A SCL IED element has the following attributes (some of which are optional): name, desc, type, manufacturer, configVersion. It contains a Services element that specifies the full capabilities of the device in terms of services available, using a long list of simple attributes. IED element contains also a list of AccessPoint elements. Fig. 7
                            shows an example of SCL IED element, taking into account the substation of Fig. 4. In particular, the SCL IED element is relevant to the IED with ID E1Q1SB1 (according to the value of the attribute name) shown both in Table 1 and Fig. 4 (with the label LVBay4). Fig. 7 points out that the SCL IED element is made up by the Services element with some of its attributes, and by only one AccessPoint element, due to the presence of only a single communication bus. As it can be seen, the AccessPoint element is featured by the attribute name
                           =“S1”.


                           AccessPoint element is made up by a Server element or by list of LNs; according to the IEC 61850-6, AccessPoint cannot contain both these elements. Fig. 7 shows the AccessPoint element containing a Server SCL element. Server element contains three other SCL elements:
                              
                                 •
                                 
                                    Authentication, which may be present only once, describing authentication rules, if present.


                                    LDevices, which contains a list of SCL LN elements; it defines a logical device of the IED reachable via the access point. LDevice C1 is present in Fig. 7, with a not complete list of LNs. Some LN definition may feature the optional DOI element used to define special instance related values. Fig. 7 shows an example of DOI element.


                                    Association, not present in the example here considered. It defines one pre-configured association between the server and a client logical node.

The communication section describes which IED access points are connected to a common subnetwork. It contains the SCL communication element, including a list of subnetwork definitions.

Each SCL subnetwork element contains an optional BitRate element defining the bit rate in Mbit/s and a list of IED access points by which these IEDs are connected to a SubNetwork. The SCL ConnectedAP element describes each IED access point. It is made up by the following SCL elements: Address, GSE, SMV and PhysConn; see [10] for their definitions.


                           Fig. 8
                            shows an example of this section, taking into account the substation shown by Fig. 4. As said, this substation features only one communication system, so only one subnetwork element is present in the SCL document (featuring attribute name
                           =“W01”). Among all the IED access points connected to the communication system, again only the one related to IED E1Q1SB1 (described in Table 1) is given in the example shown by Fig. 8. As it can be seen, the SCL ConnectedAP element has the attributes iedName and apName. The first is the ID of the IED (i.e.E1Q1SB1), whilst the other one represents the name of the IED access point (i.e., S1). Considering the SCL description of the IED E1Q1SB1 given by Fig. 7, the SCL AccessPoint element has the attribute name exactly equal to S1. Fig. 8 shows only the elements Address, GSE and SMV contained inside the SCL ConnectedAP for this IED access point.

This section defines data templates describing the structure of SCL elements contained in the previous sections. In particular, it defines the following templates: LNodeType, DOType, DAType and EnumType. Fig. 9
                            shows an example of this section pointing out the presence of the above-mentioned templates; the example always refers to the scenario shown by Fig. 4 and Table 1.

SCL LNodeType element defines the template of a SCL LN element (seen, for example, in Fig. 7 inside the IED section); LNodeType holds the attributes: id, desc, iedType and lnClass. The attributes id and lnClass (which are mandatory) are used to associate a SCL LN element to the relevant LNodeType template inside the SCL document; in particular, the structure of an LN element is specified by the LNodeType element featuring for the attributes id and lnClass the same values of the LN’s attributes lnType and lnClass, respectively. For example, considering the IED section of Fig. 7, the LN featuring lnClass
                           =“LPHD” and lnType
                           =“LPHDa” is present; the structure of this LN is defined by the LNodeType element present in the DataTypeTemplates section (Fig. 9) and featuring: id
                           =“LPHDa” and lnClass
                           =“LPHD”.

Each SCL LNodeType element contains a list of DO definitions. Among several attributes, each DO features the attribute type, whose value is the reference to another SCL element (called DOType) defining the structure of the DO element itself. For example, considering again the LNodeType element with id
                           =“LPHDa” and lnClass
                           =“LPHD”, it contains a DO element with name
                           =“Mod” and the attribute type
                           =“myMod”; this means that its structure is defined by SCL DOType element with id
                           =“myMod”, shown in the Fig. 9.

A SCL DOType element is another template with the attributes: id, desc, iedType and cdc. Fig. 9 shows only a subset of these attributes, as some of them are not mandatory. A DOType can contain other SCL elements: DataAttribute (DA) and StructuredDataObject (SDO). Fig. 9 shows several examples of DOType template. As shown, DA and SDO may feature the attribute type, whose value is again the reference to another SCL element defining the structure of the DA and SDO elements. Considering the DOType with id
                           =“mySEQ” in Fig. 9, the SDO element with name
                           =“c1” has the attribute type
                           =“myCMV”; this means that it features the same structure of SCL DOType with id=“myCMV”, again shown by Fig. 9. Another example is given by DA element with attributes name
                           =“mag” and type
                           =“myAnalogValue”, inside the DOType element with id
                           =“myMV”; in this case the definition of the structure of the DA is given by the SCL DAType element (described in the following) with id=“myAnalogValue”, shown by Fig. 9.

The DAType element features the attributes: id, desc and iedType; again some of them are optional and are not shown by Fig. 9. It contains a list of BasicDataAttribute (BDA) element; Fig. 9 shows examples of this element. Each BDA has several attributes, among which bType and type. A BDA element can be of a basic type (e.g., integer, float, boolean) or it may be of custom type (e.g., enum, struct); attribute bType specifies this. Fig. 9 shows examples of float BDA (featuring the attribute bType
                           =“FLOAT32”) and examples of custom BDA with attribute bType
                           =“Struct”. In cases of custom type BDA, the attribute type has the meaning explained before, i.e., it represents the reference to another SCL element defining the structure of the BDA element.

The last template contained in the SCL DataTypeTemplates section is EnumType, featuring the attributes: desc and id. It defines an enumerator type and contains the definition of the possible values that it can assume; the definition of each value is done by the SCL EnumVal element to which the attributes ord (which is the index of the enumeration) and the actual value are associated. Fig. 9 shows examples of the EnumType template, featuring only the attribute id. This attribute allows to realise the reference with other SCL elements inside the DataTypeTemplates section. For instance, let us consider the SCL DOType element with id=“myMod”, shown in Fig. 9; among several DA elements contained, the DA with attributes name
                           =“ctlVal”, bType
                           =“Enum” and type
                           =“Mod”, has a structure given by the EnumType template with id
                           =“Mod”, described at the bottom of DataTypeTemplates section of Fig. 9.

OPC UA allows applications to exchange information using a client/server model. OPC UA is the successor of one of the most influential technologies in field of automation integration, the classic OPC [14]. Opposite to classic OPC, which is based on proprietary technologies and has several application-dependent definitions, OPC UA provides a unified and vendor-independent solution. Similar to IEC 61850, OPC UA decouples meta-modelling concepts and data exchange principles from actual implementation technologies.

The OPC UA specifications are made up by 13 parts [15,16]. Currently, OPC UA is an IEC international standard with the code IEC 62541.

Inside an OPC UA Server, particular objects, called nodes, may represent any kind of information, including the representation of data instances and the definition of data types. The set of nodes inside an OPC UA Server is called AddressSpace. Each node belongs to exactly one of the following classes:
                        
                           •
                           
                              Base NodeClass, representing the base class from which all other classes are derived.


                              Variable NodeClass, modelling values of the system. OPC UA distinguishes between DataVariables (representing physical values of the process under control) and Properties (meta-data that further describe Nodes).


                              VariableType NodeClass, used to provide type definition for variables.


                              DataType NodeClass, used to provide type definitions for the values of variables.


                              ReferenceType NodeClass, used to define different reference types. In the following, description of reference will be given.


                              Method NodeClass, modelling callable functions that initiate actions within a server.


                              View NodeClass, allowing OPC UA Servers to subset the AddressSpace into views to simplify client access.


                              Object NodeClass, representing real-world entities like system components, hardware and software components, or even whole system. An Object is made up by other Objects, DataVariables and Methods.


                              ObjectType NodeClass, holding type definition for Objects. OPC UA standard allows extending the standard ObjectTypes with additional components; the BaseObjectType is the base ObjectType and all other ObjectTypes shall either directly or indirectly inherit from it. OPC UA defines a particular ObjectType to model hierarchy among OPC UA nodes: the FolderType. Instances of ObjectType FolderType are used to organise the AddressSpace into a hierarchy of nodes; they represent the root node of a subtree and have no other semantics associated with them. OPC UA standard allows the definition of custom OPC UA FolderType SubTypes inheriting all the properties of the standard OPC UA FolderType ObjectType.

Each Node has several attributes that describe it. Some attribute are common to all nodes; other attributes are available only for some NodeClasses.

Particular relations may be defined between nodes; they are called references. OPC UA references are always defined from one node to another. ReferenceType NodeClass defines different reference types, among which there are HasComponent, HasTypeDefinition, Organizes and HasSubtype. The OPC UA HasComponent reference is used from an OPC UA object (source) to a generic object (destination) to model the relationship “Source object is made up by the destination Object”. HasTypeDefinition models the relationship between an OPC UA object and the relevant OPC UA ObjectsType. The OPC UA Organizes reference allows to model the hierarchy existing between a OPC UA folder object of FolderType SubType and OPC UA objects that are contained in this folder (i.e., “Objects are children of Folder Object”). OPC UA HasSubType is used to define subtypes of an OPC UA ObjectType (including the FolderType).

Nodes are accessible by Clients using OPC UA services (interfaces and methods). Client and server applications use OPC UA client and server application programming interface (API) to exchange data, respectively. OPC UA Client/Server API is an internal interface that isolates the client/server application code from an OPC UA Communication Stack.

Integration of IEC 61850 SCL and OPC UA has been realised by the mapping of each SCL element to a specific NodeClass of the OPC UA AddressSpace. In particular, the authors assumed to map each SCL element to an OPC UA object featuring the same attributes and the same values of the relevant SCL element; each OPC UA object is an instance of OPC UA ObjectType, ad hoc defined to realise the mapping. This choice has been done due to the capability of the OPC UA Object NodeClass to represent whatever component or system, on account of its complex structure able to reference Methods, DataVariable and other Objects, as illustrated in Section 4.

The following OPC UA ReferenceTypes have been considered in the proposal to reference OPC UA Objects: HasComponent, HasTypeDefinition, Organizes and HasSubtype.

A graphical representation of OPC UA Objects, ObjectTypes and references will be used in the following. OPC UA objects will be represented by rectangles. Their background colour is always white, except in the case of OPC UA folder objects of FolderType SubTypes; in this case, the background colour is grey. OPC UA ObjectType, FolderType and FolderType SubType will be drawn by grey rectangles with a shadow. A continuous line ending with a little orthogonal segment will represent an OPC UA HasComponent reference; a continuous line with an arrowhead will represent OPC UA Organizes reference. A continuous line ending with double black arrowheads will represent a HasTypeDefinition reference; if the double arrowheads are white, the relevant line will represent a HasSubtype reference. Fig. 10
                      shows the graphical representation of the OPC UA Objects, ObjectTypes and references.

In the following sub-sections, the mapping of SCL elements to the OPC UA objects model will be pointed out in detail. First, the mapping will be shown for each of the five sections present in a SCL configuration document. Then, the overall mapping algorithm defined by the authors to map the entire SCL document into OPC UA will be described.

In order to map the SCL elements present in the Header section, the following OPC UA ObjectTypes have been defined. The OPC UA Header_Type ObjectType is a structure made up by the same attributes defined for the relevant SCL Header element, i.e., id, version, revision, toolID, nameStructure. The OPC UA Hitem_Type ObjectType is a structure made up by the same attributes defined for the relevant SCL Hitem element, i.e., version, revision, when, who, what, why. The OPC UA History_Type is a FolderType SubType defined to organise the OPC UA objects of Hitem_Type.

The mapping of SCL header section to OPC UA may be realised as shown by Fig. 11
                        . An OPC UA object of Header_Type ObjectType is instantiated to model the SCL Header element; in Fig. 11, this object is named Header. Its attributes assume the same values of the relevant attributes of the SCL Header element; considering the example of Fig. 5, these values are: id
                        =“ID”, version
                        =“1”, revision
                        =“1.2”, toolID
                        =“Visual SCL” and nameStructure
                        =“FuncName”.

For each SCL Hitem element, an OPC UA object is created as an instance of OPC UA Hitem_Type ObjectType; Fig. 11 shows only one of this object named Hitem. Again, each attribute of this object has the current value of the relevant attribute of the SCL Hitem element. Considering the example of Fig. 5, two OPC UA objects of Hitem_Type type must be instantiated, assuming the values shown in the same figure for their relevant attributes. For instance, one of the two objects of Hitem_Type type will be featured by: version=“1” revision=“2” when=“26/01/14 1:50:55” who=“1” what=“wh1” why=“w1”.

The OPC UA objects of Hitem_Type type are organised by an OPC UA object of History_Type FolderType SubType, using OPC UA Organizes reference; in Fig. 11 this folder object is named History. A HasComponent reference connects OPC UA Header and History Objects.


                        Section 3.3.5 pointed out that SCL DataTypeTemplates section is made up by different SCL elements: DataTypeTemplates, LNodeType, DOType, DAType, EnumType. Fig. 9 has given an example of this section. For each of these elements an OPC UA ObjectType has been defined; they are, respectively, DataTypeTemplates_Type, LNodeType_Type, DOType_Type, DAType_Type, EnumType_Type. They are structures made up by the same attributes of the relevant SCL element.

The SCL DataTypeTemplates element is modelled by an OPC UA object of DataTypeTemplates_Type. In Fig. 12
                        , this object has been called DataTypeTemplates. Each SCL element LNodeType, DOType, DAType and EnumType contained in the SCL DataTypeTemplates element is modelled by an OPC UA object created as instance of the relevant OPC UA ObjectType. Fig. 12 shows an example featured by the presence of only one object for each LNodeType_Type, DOType_Type, DAType_Type and EnumType_Type types; the Objects are simply named LNodeType, DOType, DAType and EnumType, respectively. The relationships between the OPC UA DataTypeTemplates Object and the other OPC UA objects are realised by the OPC UA HasComponent reference.

In the following, the mapping proposed for each of the above-mentioned SCL elements contained in the SCL DataTypeTemplates, will be described in detail.


                           Section 3.3.5 pointed out that SCL LNodeType element is made up by one or more DOs; each DO features the attribute type pointing to a SCL DOType element describing its structure. In order to map the SCL LNodeType element in OPC UA, three OPC UA ObjectTypes have been defined: LNodeType_Type, DO_Type and DOs_Type.


                           LNodeType_Type is a structure made up by the same attributes of the relevant SCL LNodeType element; according to the IEC 61850-6 [10], they are: id, desc, iedType, lnClass. OPC UA DO_Type ObjectType is a structure made up by all the attributes related to SCL DO element: name, type, desc, accessControl, transient. The OPC UA DOs_Type is a FolderType SubType defined to organise the OPC UA objects of type DO_Type.

In this proposal, each SCL LNodeType element is mapped to an OPC UA Object belonging to LNodeType_Type ObjectType. For example, considering the first SCL LNodeType element shown by Fig. 9, with id=
                           “LPHDa”, lnClass=
                           “LPHD”, it is represented by an instance of LNodeType_Type ObjectType, featuring the same values for its attributes.


                           Fig. 13
                            shows the mapping model for each SCL LNodeType element; the OPC UA Object named LNodeType is the instance of LNodeType_Type ObjectType, created to represent the SCL LNodeType element.

For each SCL DO element contained in a SCL LNodeType element, an OPC UA object of DO_Type ObjectType is created (assuming for its attributes the same values of the relevant SCL element); Fig. 13 shows only one of this OPC UA Object, simply named DO. The OPC UA DOs folder object of DOs_Type type organises all the instances of DO_Type ObjectType created. The folder is a component of LNodeType object, as shown by the HasComponent reference in Fig. 13.

As said before, each SCL DO element features the attribute type pointing to a SCL DOType element describing DO structure; in OPC UA this reference is modelled using the OPC UA HasComponent reference between each OPC UA object of DO_Type ObjectType and the OPC UA DOType object (described in the following sub-section), as shown by Fig. 13.

The SCL DOType element can contain both DataAttribute (DA) and StructuredDataObject (SDO), as explained in Section 3.3.5.

In order to map the SCL DOType element, the following OPC UA ObjectTypes have been defined. OPC UA DOType_Type ObjectType is a structure made up by the same attributes of the relevant SCL DOType element: id, desc, iedType, cdc. The OPC UA DA_Type ObjectType has been defined as a structure made up by all the attributes related to SCL DA element: desc, name, bType, fc, dchg, qchg, dupd, sAddr, bType, type, count, valKind. The OPC UA SDO_Type ObjectType is a structure made up by all the attributes related to SCL SDO element: name, desc, type. Finally, the OPC UA DAs_Type and SDOs_Type are two FolderType SubTypes defined to organise the OPC UA objects of DO_Type and SDO_Type, respectively.


                           Fig. 14
                            shows the proposed mapping of a SCL DOType element to an OPC UA object of type DOType_Type; in the figure, this object is named DOType1. Its attributes feature the same values present in the SCL DOType element. For each SCL DA element contained in a SCL DOType element, an instance of OPC UA DA_Type ObjectType is created; Fig. 14 shows only one of this instance, named DA. This object has the same attributes of the OPC UA DA_Type ObjectType, featuring the values present in the relevant SCL DA element. Among these values there is that of attribute type; it is the reference to SCL DAType or EnumType elements defining the content of the SCL DA. This reference has been modelled in OPC UA using OPC UA HasComponent references to connect OPC UA DA object to OPC UA DAType object and to OPC UA EnumType Object, both described in the following. Fig. 14 points out the OPC UA DAs folder object of DAs_Type organising all the instances of DA_Type ObjectType created.

For each SCL SDO element contained in SCL DOType1 element, an OPC UA object of OPC UA SDO_Type ObjectType is created; as done before, Fig. 14 shows only one of this instance, named SDO. The SCL SDO element may have the attribute type pointing to another SCL DOType element, meaning that its structure is defined by this element (e.g., the SCL SDO elements with type
                           =“myCMV” in Fig. 9). For this reason, the OPC UA HasComponent reference connects each OPC UA SDO object with the instance of DOType_Type ObjectType modelling this other SCL DOType element; in the Fig. 14 this other instance is named OPC UA DOType2 Object. SDOs folder object of SDOs_Type type organises all the instances of SDO_Type ObjectType.

The SCL DAType element contains a list of BasicDataAttribute (BDA) element. In order to model SCL DAType, the OPC UA DAType_Type and BDA_Type ObjectTypes have been defined. The first one is a structure with the same attributes of SCL DAType element: desc, id, iedType; OPC UA BDA_Type is made up by the same attributes of the SCL BDA element: desc, name, sAddr, bType, type, count, ValKind. The OPC UA BDAs_Type FolderType SubType has been also defined to organise the OPC UA objects of BDA_Type.


                           Fig. 15
                            shows the proposed mapping for the SCL DAType element. A generic SCL DAType element is modelled by the OPC UA object of type DAType_Type (Object DAType1 in Fig. 15). For each SCL BDA element contained in a SCL DAType, an instance of OPC UA BDA_Type ObjectType (OPC UA BDA Object in Fig. 15) is created; it holds for each of its attributes the same values present in the relevant SCL BDA element. Among these attributes, the type one may point to another SCL DAType element or to the SCL element EnumType. For this reason, the OPC UA BDA object may present an OPC UA HasComponent reference to another instance of OPC UA DAType_Type ObjectType modelling the other SCL DAType element (the instance is named DAType2 in Fig. 15) or to the EnumType OPC UA Object, described later. Fig. 15 shows an OPC UA BDAs folder object, which organises the instances of OPC UA BDA_Type ObjectType through the OPC UA Organizes reference.

The following OPC UA ObjectTypes have been defined to model SCL EnumType element into OPC UA. The OPC UA EnumType_Type ObjectType is a structure with the attributes holds by the relevant SCL EnumType element: desc, id. The OPC UA EnumVal_Type ObjectType is a structure with two attributes: Value, Ord. The OPC UA Enums_Type FolderType SubType has been defined to organise the OPC UA objects of EnumVal_Type.


                           Fig. 16
                            shows the proposed mapping to OPC UA. For each SCL EnumType element, an OPC UA object of type EnumType_Type is created; in the figure, this object is named EnumType. For each SCL EnumVal element contained in the SCL EnumType element, an OPC UA object of EnumVal_Type ObjectType is created (assuming for its attributes the same values of the relevant SCL element); Fig. 16 shows only one of this OPC UA Object, simply named EnumVal. The OPC UA Enums folder object of Enums_Type type organises all the instances of EnumVal_Type ObjectType created. The folder is connected to OPC UA EnumType object by the HasComponent reference shown in Fig. 16.


                        Section 3.3.2 pointed out the hierarchical structure of this section, made by different levels due to the complexity of this structure and description of the mapping will be limited to the first level. At this level, a SCL substation element may contain lists of SCL LNode, VoltageLevel, GeneralEquipment, Function and PowerTransformer elements.

The following OPC UA ObjectTypes have been defined: Substation_Type, LNode_Type, VoltageLevel_Type, GeneralEquipment_Type, Function_Type and PowerTransformer_Type. They have the same structure of the relevant SCL elements [10]. For instance, OPC UA Substation_Type ObjectType is a structure with the attributes of SCL substation element: name, desc, as shown by Fig. 6. Furthermore, the following OPC UA FolderType SubTypes have been defined: LNodes_Type, VoltLevels_Type, GEs_Type, Functions_Type and PTransformers_Type. They group the OPC UA objects of LNode_Type, VoltageLevel_Type, GeneralEquipment_Type, Function_Type and PowerTransformer_Type type, respectively.


                        Fig. 17
                         presents the proposed OPC UA mapping limited to the first level of the hierarchical structure of the Substation section. Substation, LNode, VoltageLevel, GeneralEquipment, Function and PowerTransformer are generic OPC UA objects of the OPC UA ObjectTypes described before. Some OPC UA ObjectTypes are not shown due to space reason.

As done before, the mapping of IED section to OPC UA will be limited to the first hierarchical levels of its structure. As pointed out in Section 3.3.3, IED section contains one Services element and a list of AccessPoint elements; each AccessPoint is made up by one of these two elements: Server or a list of LNs. Mapping of the SCL elements at these levels has involved the definition of the following OPC UA ObjectTypes: IED_Type, Services_Type, AccessPoint_Type, Server_Type, LN_Type. They are structures with the same attributes of the relevant SCL elements: IED, Services, AccessPoint, Server and LN (see the standard IEC 61850-6 [10] for the details about these attributes). Two OPC UA FolderType SubTypes have been defined: APs_Type and LNs_Type; they organise OPC UA objects of OPC UA AccessPoint_Type and LN_Type ObjectTypes, respectively.

The proposed mapping to the OPC UA is shown by Fig. 18
                        . For space limitation, the figure does not show some of the OPC UA ObjectTypes here defined. The OPC UA object named IED is of IED_Type ObjectType and models the SCL IED element. An OPC UA object of Services_Type object Type is created to model the SCL Services element (in Fig. 18 this object is simply named Services). For each SCL AccessPoint element, an OPC UA object of AccessPoint_Type object type is created; Fig. 18 shows only one of this object, named AccessPoint. For each SCL LN element (if present in the SCL AccessPoint element), an OPC UA object of LN_Type ObjectType is instantiated; figure shows again only one of this OPC UA Object, named LN. Fig. 18 shows the OPC UA Server Object, which is an instance of OPC UA Server_Type type, modelling the SCL Server element (if present in the SCL AccessPoint element). Finally, Fig. 18 points out the folder objects used in this mapping and the relevant FolderType SubTypes.

In order to realise the mapping of the SCL elements contained in the Communication section, the following OPC UA ObjectTypes have been defined: Communication_Type, SubNetwork_Type, ConnectedAP_Type, BitRate_Type, Address_Type, GSE_Type, SMV_Type, PhysConn_Type.

OPC UA Communication_Type is a structure made up by the only attribute of the relevant SCL Communication element, i.e., desc. OPC UA SubNetwork_Type is a structure made up by the same attributes of the SCL subnetwork element; according to the IEC 61850-6 [10], they are: name, desc, type. OPC UA ConnectedAP_Type is a structure made up by all the attributes related to SCL ConnectedAP: iedName, apName, desc. The same hypothesis is valid for the other above-mentioned OPC UA ObjectTypes. As done before, several OPC UA FolderType SubTypes have been defined to organise OPC UA objects belonging to the previous ObjectTypes: SubNets_Type, ConnAPs_Type, GSEs_Type, SMVs_Type, PhysConns_Type.

The proposed mapping of this section to OPC UA is shown by Fig. 19
                        . OPC UA Communication object is of OPC UA Communication_Type ObjectType and is created to model SCL Communication element. For each SCL subnetwork element, an OPC UA object of SubNetwork_Type ObjectType is created (the figure shows only one of this Object, named SubNetwork); the SubNets folder of OPC UA SubNets_Type type organises all the OPC UA objects of SubNetwork_Type ObjectType. In order to model the SCL BitRate element, an OPC UA object of BitRate_Type ObjectType is instantiated; in the figure this OPC UA object is simply named BitRate and is connected by a HasComponent reference to the SubNetwork Object.

For each SCL ConnectedAP element, an OPC UA object of ConnectedAP_Type ObjectType is created (the figure shows only one of this Object, named ConnectedAP); the ConnAPs folder organises all the OPC UA objects of ConnectedAP_Type ObjectType. Fig. 19 shows examples of the other OPC UA objects instantiated for each SCL Address, GSE, SMV and PhysConn element; the OPC UA Folders used to organise these Objects are present in the same figure. The OPC UA ObjectTypes and FolderType SubTypes are not shown in the figure only for space limitation.

Previous sub-sections presented the proposed mapping for each SCL section. The aim of this sub-section is that to describe the overall algorithm defined to realise the mapping of the entire SCL document. The algorithm is not trivial at all as it may require many times the exploration of the entire SCL document. The description of the algorithm will be given through a mix of textual description and a more formal description.

As explained in Section 3, the DataTypeTemplates Section is a collection of data templates describing the structure of the entire set of SCL elements. On account of this important role, the first step of the mapping algorithm must involve the DataTypeTemplates section; data templates here defined must be mapped into the OPC UA AddressSpace according to the models presented in the Section 5.2. At the end of this process, the AddressSpace of an OPC UA Server will include the OPC UA objects representing the full set of data templates contained in the SCL document.

The mapping process must proceed considering the other SCL sections, applying the mapping proposals described into Sections 5.1, 5.3, 5.4 and 5.5. At this stage, the OPC UA objects modelling the DataTypeTemplates section are used to map the SCL elements contained in the other SCL sections, as it will be shown.

In the following, the previous two steps of the mapping algorithm will be applied to a very simple SCL document made up by only the two SCL sections shown by Figs. 20 and 21
                        
                        .

The first step of the mapping algorithm involves the DataTypeTemplates section shown by Fig. 21.

According to the mapping model proposed in Section 5.2 and shown by Fig. 12, the OPC UA objects DataTypeTemplates and LNType1 are instantiated, as shown by Fig. 22
                           , and connected by a HasComponent reference. OPC UA DataTypeTemplates is of type DataTypeTemplates_Type and models the SCL DataTypeTemplates element shown in Fig. 21; OPC UA LNType1 object is of type LNodeType_Type and refers to SCL LNodeType element present in Fig. 21. For each of its attributes, OPC UA LNType1 object contains the values shown in the Fig. 21 for the SCL LNodeType element (i.e., id=“LNType1” desc=“” iedType=“” lnClass=“LNCLASSA”).

Each SCL DO element contained in the SCL LNodeType element shown by Fig. 21, has a structure that is described by SCL DOType elements. In particular, the first SCL DO implements the template of the SCL DOType element with id=“DOT1”, whilst the other DO implements the template of the DOType with id=“DOT2”. According to the mapping proposed in Section 5.2.1 (see Fig. 13), the OPC UA DOs, DO1, DO2, DOT1 and DOT2 Objects are instantiated as shown in Fig. 22, with the relevant OPC UA HasComponent and Organizes references.

The OPC UA objects DO1 and DO2 belong to OPC UA DO_Type ObjectType; the values of their attributes are those of the relevant SCL DO elements they model, i.e., the pairs: name=“DO1”, id=“DOT1” and name=“DO2”, id=“DOT2”. These OPC UA objects are organised by OPC UA DOs folder of DOs_Type FolderType SubType, as shown by Fig. 22.

The OPC UA DOT1 and DOT2 Objects are of type DOType_Type, as explained in Section 5.2.2. The values assumed by their attributes are those shown in Fig. 21: id=“DOT1”, desc=“”, iedType=“”, cdc=“DT”, for the OPC UA DOT1 Object, and id=“DOT2”, desc=“”, iedType=“”, cdc=“DTF”, for the OPC UA DOT2 Object.

The mapping process proceeds analysing both SCL DOType elements featuring id=“DOT1” and id=“DOT2”.

Let us consider the first one. As shown by Fig. 21, this DOType element contains a list of SCL DA elements; according to the mapping model described in Section 5.2.2 and shown by Fig. 14, an OPC UA folder object named DAs1
                            is created (of DAs_Type FolderObject SubType) and is connected to OPC UA DOT1 object by a HasComponent reference. The first SCL DA element is of type BOOLEAN. An OPC UA Object, named DT1, may be created belonging to the OPC UA ObjectType DA_Type, according to Section 5.2.2, with the following values of the attributes: name
                           =“DT1”, bType
                           =“BOOLEAN”, fc
                           =“ST”. It is connected to DAs1
                            folder object by an OPC UA Organizes reference.

Continuing the mapping process, the analysis of the second SCL DA element (i.e., that with name=“DT2”) is realised. The OPC UA Object DT2, of OPC UA ObjectType DA_Type, is created with the following values of the attributes: name
                           =“DT2”, bType
                           =“Struct”, type
                           =“DAT1”, fc
                           =“ST”. It will be connected to DAs1
                            folder object by an Organizes reference. The values of the attributes bType=“Struct” and type=“DAT1” mean that the structure of the SCL DA element is defined by the other SCL DAType element identified by id=“DAT1”. For this reason, an OPC UA object of DAType_Type ObjectType, must be created according to the mapping proposed in Section 5.2.2 and shown by Fig. 14; this object is named DAT1 in Fig. 22 and is connected to DT2 object by a HasComponent reference. The mapping process must proceed looking for the SCL DAType element with id=“DAT1”. Fig. 21 points out that it has three BDA elements, all belonging to basic data types (i.e., BOOLEAN and INT8); so mapping process must continue creating the suitable OPC UA Objects.

On the basis of the mapping model described in Section 5.2.3 and shown by Fig. 15, the OPC UA objects T, J, K will be instantiated of OPC UA ObjectType BDA_Type type. These Objects will assume for their attributes, the same values of the relevant SCL elements; for example, OPC UA object T will contain the following values for the relevant attributes: name=
                           “T”, bType=
                           “BOOLEAN”. According to the mapping model presented in Section 5.2.3, an OPC UA folder Object, named BDAs1
                           , is created and connected to these OPC UA objects by an Organizes references. BDAs1
                            is connected to DAT1 by HasComponent reference.

The last element component of SCL DOType with id=“DOT1” is the SCL DA element with name=“DT3”; the OPC UA Object DT3, of OPC UA ObjectType DA_Type, is created with the following values of the attributes: name
                           =“DT3”, bType
                           =“Struct”, type
                           =“DAT2”, fc
                           =“ST”. It will be connected to DAs1
                            folder object by an Organizes reference, as shown by Fig. 22. The values of bType=“Struct” and type=“DAT2” mean that its structure is described by the SCL DAType element with id=“DAT2”. For this reason, an OPC UA object of DAType_Type ObjectType must be created according to Section 5.2.2 (Fig. 14); this object is named DAT2 in Fig. 22 and is connected to DT3 object by a HasComponent reference. The mapping process must explore the DataTypeTemplates section, looking for the SCL DAType element with id=“DAT2”. As shown by Fig. 21, it has two BDA elements. According to Section 5.2.3 (Fig. 15), a BDAs folder object is created of BDAs_Type FolderType SubType, with the name BDAs2
                           ; it is connected to DAT2 by a HasComponent reference.

Let us now consider the two BDA elements contained in the SCL DAType with id=“DAT2”. According to the model presented in Section 5.2.3 (Fig. 15), an OPC UA Object, named D1, of BDA_Type ObjectType is created and connected to BDAs2
                            folder object by an Organizes reference. The D1 object has the same attributes of the BDA_Type and the values of the first BDA element: name=“D1”, bType=“Struct” and type=“DAT1”. Due to the value of the last attribute (i.e., type=“DAT1”), OPC UA D1 object is connected by HasComponent reference to the DAT1 OPC UA Object, as shown by Fig. 22.

The other BDA element of the DAType with id=“DAT2” is the BDA with name=“D2”; it has bType=“BOOLEAN”. The OPC UA object of OPC UA ObjectType BDA_Type is instantiated and the name D2 is assigned. This OPC UA object is connected to BDAs2
                            by an Organizes reference.

The mapping process described until now allowed to instantiate all the OPC UA objects needed to model the SCL elements of the DataTypeTemplates section included in the hierarchy starting from SCL DO element with name=“DO1”. Once the lowest level in this hierarchy has been reached, the mapping algorithm must continue exploring the remaining SCL elements of the DataTypeTemplates section; again the process algorithm proceed from the highest to the lowest SCL elements in the hierarchy, mapping each element to the suitable OPC UA Object.

In this example, the mapping process must resume from DO2 OPC UA object, modelling the SCL DO element with name=“DO2”. Only for space limitation, the process will not be described in the details; the result of this process is depicted by Fig. 22, where the OPC UA DAs2
                           , SDOs, L1, L2, L3, L4, SD1, EnumType1 and EnumType2 Objects have been added.

OPC UA DAs2
                            and SDOs object are of DAs_Type and SDOs_Type FolderType SubTypes, respectively; OPC UA L1, L2, L3, L4 objects are of DA_Type ObjectType and feature for their attributes, the same values of the SCL DA elements with name: “L1”, “L2”, “L3” and “L4”. OPC UA SD1 object is of SDO_Type ObjectType and has the values shown in Fig. 21 for the SCL SDO element with name “SD1”.

OPC UA L1 and L3 objects are connected to DAT2 by an OPC UA HasComponent reference because the attribute type of the relevant SCL elements assumes the value DAT2. OPC UA L4 points to DAT1 by an OPC UA HasComponent reference because the attribute type of the SCL DA element with name=“L4” assumes the value DAT1. For the same reason, OPC UA SD1 points to DOT1 by an OPC UA HasComponent reference.

The OPC UA EnumType1 and EnumType2 Objects do not feature any reference as their definition is empty in the example shown by Fig. 21.

When the first step of the proposed algorithm is completed, the SCL data templates shown by Fig. 21 are modelled by the set of OPC UA objects and references shown by Fig. 22; this part of the OPC UA information model will be used in the next step of the mapping process to map all the other SCL elements.

The second step of the mapping process continues involving the other sections of the SCL document; in our simple scenario, there is only the IED section shown by Fig. 20.

The mapping algorithm analyses the structure of this IED. According to the mapping proposal described in Section 5.4 and shown by Fig. 18, the IED element may be represented by an OPC UA object belonging to the OPC UA IED_Type ObjectType. Let us assume to name IED1 this OPC UA Object; it will contain the same attributes of the relevant IED_Type ObjectType, with the values shown in Fig. 20 for the SCL IED element (e.g., name=“IED1”, desc=“description1”).


                           Fig. 20 shows that this SCL IED element contains a SCL AccessPoint element. According to the model presented in Section 5.4, it is represented by an OPC UA object belonging to the OPC UA AccessPoint_Type ObjectType. Let us assume to assign the name AP1 to this OPC UA Object; for each of the attributes of the AccessPoint_Type ObjectType, it holds the values shown in the Fig. 20 for the SCL AccessPoint element (i.e., name=“AP1”, desc=“”). According to the mapping model proposed in Section 5.4 and shown by Fig. 18, an OPC UA APs folder object belonging to APs_Type Folder_Type SubType is created to organise the OPC UA object AP1.


                           Fig. 23
                            shows the OPC UA objects defined until now (i.e., IED1, APs, AP1). The OPC UA HasComponent reference is used between the OPC UA IED1 object and the APs folder Object; OPC UA Organizes references connects APs with the OPC UA object AP1.

The mapping process continues considering the SCL AccessPoint element shown by Fig. 20. It is made up by only one SCL LN element. According to the mapping proposal made in Section 5.4, an OPC UA LNs folder object is created and connected to AP1 by a HasComponent reference, as shown by Fig. 23. An OPC UA object called LN of type LN_Type ObjectType is instantiated; it models the SCL LN element just described.

Analysing this SCL LN element, it is possible to see that among its attributes, there are lnType=“LNType1” and lnClass=“LNCLASSA”; this mean that its structure is given by the SCL LNodeType element present in Fig. 21. According to the procedure described at the first step, this element has been already modelled by the OPC UA LNType1 object shown by Fig. 22. As seen, the OPC UA LNType1 object is defined through a hierarchical sequence of nested OPC UA Objects. For this reason, the mapping process must now proceed exploring the OPC UA objects created at the first step, starting from OPC UA LNType1 object and ending when the full set of objects in the hierarchical sequence has been explored. During this exploration, the OPC UA AddressSpace relevant to the IED section (shown by Fig. 23) must be filled by suitable OPC UA objects representing the entire structure of the SCL LN element. Fig. 24
                            gives a description (using flow chart diagram) of the procedure that must be applied.

Set S present in the flow chart contains elements used to represent OPU UA objects that the procedure has to explore. Considering the example made up by Figs. 20 and 21, when the procedure is called, the set S is initialised with only one element representing the OPC UA LNType1 Object because it was said that the mapping process must proceed exploring the OPC UA objects created at the first step, starting from OPC UA LNType1 Object.

In the following, the mapping procedure shown in Fig. 24 will be described step-by-step.

The procedure extract the content of set S, i.e., the element representing the OPC UA LNType1 Object, and analyses it. As this object belongs to the OPC UA LNodeType_Type ObjectTypes, a HasComponent reference is used to connect LN with LNType1 Object; in this way, a common OPC UA Client exploring the AddressSpace relevant to the IED section, may easily understand who is the template describing the LN OPC UA Object, once it reaches this Node. Fig. 23 points out the HasComponent reference between LN and LNType1 Objects.

At this point, the procedure must select other OPC UA objects inside the AddressSpace modelling SCL DataTypeTemplates section, following the references of the current object, i.e., OPC UA LNType1 Object. As shown by Fig. 22, LNType1 Objects is connected to DOs object by HasComponent reference. According to the procedure in Fig. 24, an element representing this object is put in the set S; the procedure returns at the beginning of the loop shown by Fig. 24, extracting this element which will be analysed.

As DOs object belongs to OPC UA DOs_Type type, an OPC UA object folder of DOs_Type FolderType SubType is instantiated (with name DOs1
                           ) and connected to OPC UA object LN by an OPC UA HasComponent reference, as shown by Fig. 23. DOs object features two Organizes references to DO1 and DO2 OPC UA objects of type DO_Type; for this reason, two elements representing these Objects are put in the set S to be analysed.

At the beginning of the next loop, let us assume to extract the element representing DO1 Object, from the set S. According to the flow chart of Fig. 24, an OPC UA object of DO_Type ObjectType, named DO11
                           , is created as duplicate of DO1 object and is connected to DOs1 object by Organizes references, as shown by Fig. 23. DO1
                           1 object will have for its attributes the same values of DO1 Object. Considering Fig. 22, DO1 is connected to DOT1; so, an element representing this object is put in S.

Let us assume that at the begin of the next loop, the element representing DOT1 is extracted from S and analysed. According to the flow chart, a HasComponent reference is used to connect DO11
                            object with the DOT1 Object, as shown by Fig. 23. As said before, this is done in order to allow to a common OPC UA Client exploring the AddressSpace to easily find the templates describing DO11
                            Node, once it has been reached. DOT1 object is connected to DAs1
                            folder object, so an element representing this object is put in S. If this element is extracted at the next loop, the DAs3
                            Objects is created of DAs_Type type. OPC UA HasComponent references connects DO11
                            object with this folder as shown by Fig. 23.

In the information model of Fig. 22, the OPC UA objects DT1, DT2, DT3 are connected to DAs1
                            by OPC UA Organizes references; for this reason three elements representing OPC UA objects DT1, DT2, DT3 are put in S. Assuming to extract them in the next three loops of the procedure, according to the flow chart of Fig. 24 they will be duplicated in the OPC UA representation of IED section. This means that the OPC UA objects DT11
                           , DT21
                           , and DT31
                            of DA_Type ObjectType will be instantiated and connected to DAs3
                            folder by Organizes references; these objects will assume the same values of the DT1, DT2, DT3 Objects. Fig. 23 shows the OPC UA AddressSpace relevant to the IED section, created until now.

Going ahead with the mapping procedure described by Fig. 24, the OPC UA objects shown by Fig. 25
                            are generated. For space limit, the Fig. 25 does not show HasComponent references towards OPC UA objects representing the DataTypeTemplates section (Fig. 22). This set of OPC UA objects models the entire SCL IED section shown by Fig. 20. It is important to point out that a mode complex SCL section may lead to a very huge set of OPC UA Objects, justifying the use an automatic procedure for its generation, like that here presented.

@&#IMPLEMENTATION@&#

Mapping of the SCL IEC 61850-6 to the OPC UA has been implemented into a real SCADA system, developed inside a research project funded by Italian Ministry of Education, University and Research (MIUR), as explained in the Acknowledgment section.

The SCADA system has been realised in C#, and is based on the use of real-time MySQL Cluster NDB [24] to maintain all the variables exposed by the system; communication with the database has been realised through a dll based on NDB API written in C++.

The SCADA implementation has also involved the use of OPC UA 1.0.2 Stack Source Code .NET developed by OPC Foundation [25]. An OPC UA server has been developed inside the SCADA system to allow it to expose all the information coming from substation automation systems, according to the scenario depicted into Section 2. This choice allows a common client application based on OPC UA communication stack to exchange this information with the SCADA server.

The proposed algorithm presented in Section 5 has be implemented in C# and has been totally integrated with the SCADA server; the tool developed is able to read any IEC 61850-6 SCL document and to map the SCL elements there contained into the hierarchies of OPC UA objects which made up the AddressSpace of the OPC UA SCADA server. This allow to build and reconfigure the entire AddressSpace in automatic fashion, each time a new substation automation system must be integrated or changes in a previous installation occur.


                     Fig. 26
                      shows the overall architecture of the SCADA system. As it can be seen, the IEC 61850-6 SCL/OPC UA mapping algorithm is integrated into the SCADA. Use of the MySQL Cluster NDB is also highlighted in the figure.

@&#PERFORMANCE EVALUATION@&#

As the mapping algorithm described in Section 5 explores a SCL document to convert each element into the relevant OPC UA Object, its processing time depends on the size of the SCL document. It may also be influenced by the structures of the SCL elements and by their relationships; in Section 5.6, it has been shown that when exploring SCL elements inside the DataTypeTemplates section, it is possible that a certain SCL element points to a list of nested SCL elements; the length of this list depends on the specific features of the substation automation described by the SCL documents. Processing time depends also on the length of each list of nested SCL elements.

Due to the previous considerations, performance evaluation of the mapping algorithm implemented was assumed very important; a performance evaluation campaign has been realised varying the size of SCL documents in order to point out its influence on the processing time. In order to take into account also the dependence from the structures of SCL elements, different real substation automation scenarios have been considered and their relevant SCL documents have been used for the performance evaluation.


                        Table 2
                         shows the average processing time versus the SCL document size. For each size, several SCL documents (featuring SCL elements with different structures and interdependencies) have been considered; for each of them, the processing time has been evaluated running the mapping algorithm, achieving the average time when all the runs have been completed.

As it can be seen from Table 2, the processing time is strictly linked to the SCL document size. Furthermore, it is very important to highlight the very huge average number of OPC UA objects (shown by the last column of Table 2) that can be automatically generated by the mapping algorithm. This last consideration allows to furthermore point out the importance of the proposal.

@&#CONCLUSIONS@&#

Although IEC 61850 has been identified as one of the fundamental components for reference Smart Grid architectures, current literature provides for several examples in the Smart Grid environment demonstrating that integration of IEC 61850 with OPC UA could improve its interoperability.

The paper has presented an example of Smart Grid scenario where integration of SCL-based documents based on IEC 61850-6 with OPC UA may led to several advantages, including interoperability. Due to the lack of proposals in the current literature dealing with the mapping of IEC 61850-6 SCL with OPC UA, the aim of the paper was that to propose mapping models and algorithm to realise this integration.

The paper has deeply described the mapping models and the algorithm proposed. To demonstrate its feasibility, the proposed approach was implemented using OPC UA 1.0.2 Stack Source Code .NET developed by OPC Foundation.

The implementation of the mapping between IEC 61850-6 SCL and OPC UA has been limited to edition 1.0 of the IEC 61850-6 standard. Extension to edition 2.0 can be easily introduced in the current implementation of the algorithm, adding other mapping rules between IEC 61850-6 ed.2 and OPC UA, very similar to the mapping models proposed in the paper. For each SCL document to be mapped into OPC UA, the first thing done by the algorithm proposed by the authors, is the check of the version of the SCL document; this is done reading the SCL schema version field contained in the SCL document. On the basis of the SCL schema version (i.e., 1 or 2), the relevant set of mapping rules may be applied to translate SCL elements into OPC UA Objects. In this way whatever SCL document compliant with IEC 61850-6 ed.1 or ed.2 can be translated into OPC UA.

@&#ACKNOWLEDGMENT@&#

The research activities presented in this paper have been carried out inside the project “Col AdMin integrated SCADA- Command, control protection and supervision integrate system for production, transmission and distribution of renewable and non-renewable electrical energy, with field-device-interface, for rational use of electrical power”. The project was funded by Italian Ministry of Education, University and Research (MIUR) through the National Operational Programme (PON) for Research and Competitiveness 2007–2013. The code of the project (CUP) assigned by the MIUR was B41C11000500005.

A special thank has to go to Eng. Luca Galvagno, Eng. Paolo Grillo and Eng. Salvatore Sorbello working for Col Giovanni Paolo S.p.A., the enterprise coordinator of the above-mentioned project, for their fundamental supports, guidelines and recommendations.

@&#REFERENCES@&#

