@&#MAIN-TITLE@&#Generic face adjacency graph for automatic common design structure discovery in assembly models

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Transform abstract relationships in assembly models into measurable entities.


                        
                        
                           
                           A more quantitative descriptor for assembly models has been developed.


                        
                        
                           
                           Transform the 3D assembly model into a 2D coordinate system.


                        
                        
                           
                           Common design structures in the assembly model can be discovered for reuse.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Generic face adjacency graph

Mating face pair

Common design structure

Frequent graph discovery

Assembly models

@&#ABSTRACT@&#


               
               
                  Common Design Structure Discovery (CDSD) is to identify local structures shared by multiple models. Nowadays it is mainly restricted to part models. Extending it to assembly models can produce a significant value for assembly design reuse. However, current descriptions of assembly models usually capture topological information qualitatively, considering little geometric information, and thus are not suitable for CDSD in assembly models (CDSDA). To counter this problem, this paper proposes a generic face adjacency graph (GFAG) which is extended from the face adjacency graph for B-Rep part model description. GFAG can transform abstract relationships in assembly models into measurable entities by introducing a concept of mating face pair (MFP), thus facilitating a more quantitative and consistent description of parts and relationships in assembly models. Corresponding to geometric faces and edges in a part model, GFAG treats parts and relationships in an assembly model as generic faces and generic edges respectively. To make GFAG have a higher discrimination capability, a node in GFAG captures the geometric information of a part together with its mating parts by shape parameters and also quantitatively incorporates a relationship between parts by shape parameters of an MFP. By doing so, GFAG can take more geometric information, together with topological information, into account quantitatively, and thus can be mapped into a 2D coordinate system for easy validation. We also extend a discovery algorithm to validate the feasibility of GFAG for CDSDA, and the results demonstrate the expected effectiveness.
               
            

@&#INTRODUCTION@&#

Design is a critical stage in any new product development and commits over 80% of the product development costs  [1]. In product design, there are many common subparts of different 3D CAD models (including part and assembly), and exploiting the commonality of product, as well as the knowledge embedded, could effectively inspire designs and speed up the design process  [2]. For this purpose, technology applications such as case-based design, product platforms, product families, and group technology have been developed and widely used. However, the commonalities are usually identified manually based on the past experience, suffering from low efficiency and lack of enough detailed information  [3]. This facilitates the significant development of a technique, namely, common design structure discovery (CDSD)  [3], which treats a common design structure as a problem of frequent substructure discovery: given a set of 3D models 
                        M
                        =
                        
                           {
                           
                              
                                 m
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 m
                              
                              
                                 2
                              
                           
                           ,
                           
                              
                                 m
                              
                              
                                 3
                              
                           
                           ,
                           …
                           }
                        
                      and a local model 
                        
                           
                              m
                           
                           
                              ′
                           
                        
                     , if 
                        
                           
                              m
                           
                           
                              ′
                           
                        
                      appears 
                        
                           
                              f
                           
                           
                              i
                           
                        
                      times as a substructure of 
                        
                           
                              m
                           
                           
                              i
                           
                        
                      and for a given threshold value 
                        ζ
                        ,
                        
                           
                              ∑
                           
                           
                              i
                              =
                              1
                           
                           
                              
                                 |
                                 M
                                 |
                              
                           
                        
                        
                           
                              f
                           
                           
                              i
                           
                        
                        /
                        
                           |
                           M
                           |
                        
                        ≥
                        ζ
                     , then 
                        
                           
                              m
                           
                           
                              ′
                           
                        
                      is a common structure of 
                        M
                     . CDSD is a relatively new research problem in the CAD community and has shown potentials for automating design knowledge discovery. Its mathematical formation is quite similar to that of frequent subgraph discovery in data mining  [4], but it takes shape analysis of 3D models, especially local shape analysis, into account. In addition, although CDSD requires shape comparison as 3D geometrical model retrieval  [5] does, its goal is to identify local structures shared by multiple models instead of finding models with a given structure.

Currently, CDSD is merely restricted to part models and not yet extended to assembly models. Similar to CDSD in part models, CDSD in assembly models (CDSDA) is of significance to (1) support downstream manufacturing and service operations; (2) reduce product development time by eliminating the need for modeling, analysis, and process planning repeatedly; and (3) provide access to existing design knowledge such as cost, reliability, and failure reports  [6]. However, traditional assembly model descriptions (graph-based, tree-based for example  [7,8]) are usually qualitative, mainly considering topological information, while CDSDA needs a more quantitative descriptor. The main obstacle may lie in the abstract relationships (such as mating and joint) between parts: they are not concrete entities and cannot be captured quantitatively easily.

This paper attempts to extend CDSD to assembly models, with the main focus on the development of a suitable descriptor for CDSDA. Its main contribution is to transform abstract relationships between parts in an assembly model into measurable entities, leading to a quantitative capture of those relationships and a quantitative descriptor for assembly models. Concretely, we introduce a concept of mating face pair (MFP) to quantitatively capture abstract relationships in assembly models and propose a generic face adjacency graph (GFAG) to quantitatively describe assembly models. In order to implement CDSDA based on GFAG, a discovery algorithm  [3] that improves the well-known apriori-based graph mining (AGM)  [9] in the area of data mining is also extended.

The remainder of this paper is organized as follows. First, a brief review of the related works is given in Section  2, and some basic concepts and methods are introduced in Section  3. Then, the method to develop GFAG as a descriptor for the assembly model is demonstrated in Section  4. Following this, Section  5 illustrates the discovery algorithm based on GFAG, Section  6 gives the results, and Section  7 makes some discussion. Finally, conclusions and future work of this paper are discussed in Section  8.

@&#RELATED WORKS@&#

As aforementioned, CDSD/CDSDA requires local shape comparison based on appropriate shape description. For CDSD in part models, lots of descriptors have been developed, such as attributed graphs (B-Rep graphs  [10,11], spectral graphs  [12–14], and so on), Reeb graphs  [14–17], skeletal/shock graphs  [5,18–20], and feature-based graphs  [1,21], etc. These descriptors are usually used for single shape analysis, although useful for part, they are not very effective when used in assemblies: they do not take inner relationships and structures of assemblies into consideration and can only account for the overall shape of assemblies  [6].

For CDSDA, traditional description of the assembly model usually focuses on assembly planning (we refer the readers to Refs. [7,8] for example) and mainly considers topological information and thus is usually qualitative. To make it more suitable for assembly model retrieval, Deshimukh et al.  [6] proposed a mating graph, in which, individual parts were represented as nodes or vertices and edges were used to connect two nodes when mating conditions between the two corresponding parts exist. Though each node and edge in the graph incorporated many attributes such as Geometry, Degree, Type (the type of mating condition), etc., those attributes were all captured qualitatively, and thus were not suitable for CDSDA. In a flexible assembly retrieval approach, Chen et al.  [22] developed a multilevel assembly descriptor, which used a hierarchical data structure to capture the topological structure of an assembly model, and each node in the structure represented a component of the assembly model; geometrical shape information for each component was calculated as properties using shape distribution vector. Additionally, assembly semantics information such as DOFs was also integrated. To our knowledge, this descriptor is one of the most comprehensive descriptions, quantitatively capturing both topological and geometrical information of an assembly model to some extent. However, in this descriptor, components and relationships in an assembly model are described using different methods, which may limit the total quantification of the assembly model. In addition, though the hierarchical structure is one of the foundations for current mainstream representation of assembly, it may be designed differently from one designer to another for the same assembly model, thus resulting into a more or less subjective assembly representation.

Besides graphs aforementioned, the product structure (BOM) is also used by some researchers to compare and analyze assembly models. This school of methods believes that the commonality of content lies in the similarities of parts in two products’ BOMs [23–25]. Though the BOM-based methods can help us to find desired product information, there may be a problem that the transformed BOM is subjective (since for the same product, different BOMs may be generated in different companies, or by different designers), thus lowering the confidence of the generated product similarity. In addition, geometrical and topological information, and mating and joint relationships in assemblies are not considered.

In summary, there are few descriptors suitable for CDSDA. For CDSD in part models, Ma et al.  [3] presented a face adjacency graph (FAG) to compare substructures of solid models quantitatively. FAG can be created easily and describe the topological relations as well as the geometrical shapes of CAD models sufficiently and consistently. As such, this paper will extend FAG to form GFAG for assembly models.

As is mentioned above, this paper is going to transform abstract relationships in assembly models into concrete measurable entities, so as to capture parts and relationships in assembly models consistently, and to describe topological and geometrical information of assembly models quantitatively. To do so, we introduce a concept of MFP to represent relationships between parts and utilize the FAG for B-rep part model developed in Ref.  [3] to describe the assembly model.

Capturing mating and joint information in an assembly model is not a new topic, related approaches can be divided into kinematic-based (capture the type of joint such as revolution, prismatic)  [26], geometry-based (integrate low-level surface mating constraints such as against, fit)  [27] and feature-based (take more semantic relationships into account)  [28,29]. These descriptions usually lead to the definition of a single abstract liaison on parts of an assembly model (see Fig. 1
                        (d)). However, an abstract liaison is not easy to be described quantitatively. Often, it can be decomposed into several pairs of mating/contact faces  [25,30] (see Fig. 1(e)), for quantitative description, the concept of MFP is introduced to capture the concrete mating face pairs in an abstract single liaison. 
                           Definition 1
                           A mating face pair (MFP) consists of two faces, 
                                 
                                    
                                       f
                                    
                                    
                                       1
                                    
                                 
                               and 
                                 
                                    
                                       f
                                    
                                    
                                       2
                                    
                                 
                              , mating with each other or being contained in a joint, and they must belong to two different parts of an assembly model. It can be noted as 
                                 
                                    
                                       
                                          MFP
                                       
                                       =
                                       
                                          (
                                          
                                             
                                                P
                                             
                                             
                                                1
                                             
                                          
                                          
                                             |
                                             
                                                
                                                   f
                                                
                                                
                                                   1
                                                
                                             
                                             ,
                                             
                                                
                                                   P
                                                
                                                
                                                   2
                                                
                                             
                                             |
                                          
                                          
                                             
                                                f
                                             
                                             
                                                2
                                             
                                          
                                          )
                                       
                                       ,
                                    
                                 
                               where 
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                               and 
                                 
                                    
                                       P
                                    
                                    
                                       2
                                    
                                 
                               are two different parts containing 
                                 
                                    
                                       f
                                    
                                    
                                       1
                                    
                                 
                               and 
                                 
                                    
                                       f
                                    
                                    
                                       2
                                    
                                 
                              , respectively.

From the definition, it can be inferred that MFP in this paper is limited to geometric faces mating with each other and low-level face mating constraints (coincidence, contact, offset, angle, etc.) imposing on them. On the basis of MFP, an assembly model 
                           
                              AM
                           
                         can be formalized as a set of part models 
                           
                              PMs
                           
                         and MFPs: 
                           
                              
                                 
                                    AM
                                 
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             PM
                                          
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          
                                             PM
                                          
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          
                                             PM
                                          
                                       
                                       
                                          n
                                       
                                    
                                    ;
                                    
                                       
                                          
                                             MFP
                                          
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          
                                             MFP
                                          
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          
                                             MFP
                                          
                                       
                                       
                                          k
                                       
                                    
                                    }
                                 
                                 ,
                              
                           
                         where 
                           n
                         is the number of parts in the assembly model, and 
                           k
                         is the number of MFPs.

FAG  [3] is adopted as the basis of this paper to form GFAG. In FAG, the nodes correspond to faces of a B-rep model, and the edges correspond to adjacency relations between faces of the model. It can map a B-rep part model in 3D Euclidean space 
                           
                              
                                 E
                              
                              
                                 3
                              
                           
                         to a 2D description space 
                           S
                        , for its nodes and arcs are represented by so-called shape parameters, which can capture geometric shape characteristics quantitatively based on point classification.

As shown in Fig. 2
                        , the normal curvature at a point 
                           P
                         on a surface varies around the normal direction on the surface. The maximum and minimum values of the curvatures at 
                           P
                         are referred as principal curvatures (noted as 
                           
                              
                                 κ
                              
                              
                                 
                                    min
                                 
                              
                           
                         and 
                           
                              
                                 κ
                              
                              
                                 
                                    max
                                 
                              
                           
                        ). The value of a principal curvature can be positive 
                           
                              (
                              +
                              )
                           
                        , negative 
                           
                              (
                              −
                              )
                           
                         or zero (0). Then, different types of points can be designated by 
                           
                              [
                              
                                 
                                    s
                                 
                                 
                                    
                                       min
                                    
                                 
                              
                              ,
                              
                                 
                                    s
                                 
                                 
                                    
                                       max
                                    
                                 
                              
                              ]
                           
                         where 
                           
                              
                                 s
                              
                              
                                 
                                    min
                                 
                              
                           
                         and 
                           
                              
                                 s
                              
                              
                                 
                                    max
                                 
                              
                           
                         are the signs of the principal curvatures 
                           
                              
                                 κ
                              
                              
                                 
                                    min
                                 
                              
                           
                         and 
                           
                              
                                 κ
                              
                              
                                 
                                    max
                                 
                              
                           
                         respectively (see Table 1
                        )  [31]. To implement CDSD in part models, Ref.  [3] further introduced two parameters 
                           ω
                           =
                           
                              (
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    λ
                                 
                                 
                                    2
                                 
                              
                              )
                           
                         to represent different point types (see the last row in Table 1).

According to the classification of points, the probability distribution of different types of points can be used to describe the faces. Suppose that there are 
                           m
                         sampling points on a face, of which 
                           
                              
                                 m
                              
                              
                                 1
                              
                           
                         points are of type (0, 0), 
                           
                              
                                 m
                              
                              
                                 2
                              
                           
                         of type (1, 0), 
                           
                              
                                 m
                              
                              
                                 3
                              
                           
                         of type (0, 1), and 
                           
                              
                                 m
                              
                              
                                 4
                              
                           
                         of type (1, 1). Then, their corresponding probabilities are 
                           
                              
                                 p
                              
                              
                                 i
                              
                           
                           =
                           
                              
                                 m
                              
                              
                                 i
                              
                           
                           /
                           m
                         (
                           i
                           =
                           1
                           ,
                           2
                           ,
                           3
                        , and 4). Thus, a face 
                           f
                         can be described by two parameters 
                           p
                           
                              (
                              f
                              )
                           
                           =
                           
                              (
                              
                                 
                                    p
                                 
                                 
                                    x
                                 
                              
                              ,
                              
                                 
                                    p
                                 
                                 
                                    y
                                 
                              
                              )
                           
                        : 
                           
                              (1)
                              
                                 
                                    {
                                    
                                       
                                          
                                             
                                                
                                                   p
                                                
                                                
                                                   x
                                                
                                             
                                             =
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   4
                                                
                                             
                                             
                                                
                                                   p
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                
                                                   λ
                                                
                                                
                                                   1
                                                   ,
                                                   i
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   p
                                                
                                                
                                                   y
                                                
                                             
                                             =
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   4
                                                
                                             
                                             
                                                
                                                   p
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                
                                                   λ
                                                
                                                
                                                   2
                                                   ,
                                                   i
                                                
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Like the face description, point classification on edge can be used to determine an edge description. For an edge 
                           e
                        , the type of a point 
                           P
                         on it can be denoted by using the dihedral angle 
                           φ
                        , which is calculated between the tangent planes of the adjacent faces at 
                           P
                        . The point types are defined by two parameters 
                           
                              
                                 ω
                              
                              
                                 e
                              
                           
                           =
                           
                              (
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                                 
                                    e
                                 
                              
                              ,
                              
                                 
                                    λ
                                 
                                 
                                    2
                                 
                                 
                                    e
                                 
                              
                              )
                           
                        , where 
                           e
                         means that 
                           P
                         is on an edge, and 1 and 2 just indicate the first and the second parameters of 
                           P
                        , respectively. 
                           
                              
                                 
                                    
                                       ω
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             
                                                (
                                                0
                                                ,
                                                0
                                                )
                                             
                                             ,
                                             
                                             φ
                                             =
                                             180
                                             °
                                          
                                       
                                       
                                          
                                             
                                                (
                                                0
                                                ,
                                                1
                                                )
                                             
                                             ,
                                             
                                             φ
                                             >
                                             180
                                             °
                                          
                                       
                                       
                                          
                                             
                                                (
                                                1
                                                ,
                                                0
                                                )
                                             
                                             ,
                                             
                                             φ
                                             <
                                             180
                                             °
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Therefore, an edge 
                           e
                         between two adjacent faces 
                           
                              
                                 f
                              
                              
                                 i
                              
                           
                         and 
                           
                              
                                 f
                              
                              
                                 j
                              
                           
                         can also be described by two parameters 
                           
                              
                                 p
                              
                              
                                 e
                              
                           
                           
                              (
                              
                                 
                                    f
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    f
                                 
                                 
                                    j
                                 
                              
                              )
                           
                           =
                           
                              (
                              
                                 
                                    p
                                 
                                 
                                    x
                                 
                                 
                                    e
                                 
                              
                              ,
                              
                                 
                                    p
                                 
                                 
                                    y
                                 
                                 
                                    e
                                 
                              
                              )
                           
                         calculated from the probability distribution of different types of points on the edge: 
                           
                              (2)
                              
                                 
                                    {
                                    
                                       
                                          
                                             
                                                
                                                   p
                                                
                                                
                                                   x
                                                
                                                
                                                   e
                                                
                                             
                                             =
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   3
                                                
                                             
                                             
                                                
                                                   p
                                                
                                                
                                                   i
                                                
                                                
                                                   e
                                                
                                             
                                             
                                                
                                                   λ
                                                
                                                
                                                   1
                                                   ,
                                                   i
                                                
                                                
                                                   e
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   p
                                                
                                                
                                                   y
                                                
                                                
                                                   e
                                                
                                             
                                             =
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   3
                                                
                                             
                                             
                                                
                                                   p
                                                
                                                
                                                   i
                                                
                                                
                                                   e
                                                
                                             
                                             
                                                
                                                   λ
                                                
                                                
                                                   2
                                                   ,
                                                   i
                                                
                                                
                                                   e
                                                
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                         where 
                           
                              
                                 p
                              
                              
                                 i
                              
                              
                                 e
                              
                           
                           =
                           
                              
                                 m
                              
                              
                                 i
                              
                           
                           /
                           m
                           
                           
                              (
                              i
                              =
                              1
                              ,
                              2
                              ,
                              3
                              )
                           
                        , 
                           e
                         means that points are on an edge, 
                           m
                         is the total number of the sampling points on the edge and 
                           
                              
                                 m
                              
                              
                                 i
                              
                           
                         is the number of points of the 
                           i
                        -th type (
                           i
                           =
                           1
                           ,
                           2
                           ,
                           3
                        ).

Based on Eqs. (1) and (2), FAG uses node shape parameters 
                           A
                           
                              (
                              v
                              )
                           
                           =
                           
                              (
                              
                                 
                                    x
                                 
                                 
                                    f
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    f
                                 
                              
                              )
                           
                         to capture the geometric characteristics of a face 
                           f
                         together with its neighboring faces (see Eq. (3)). By doing so, FAG obtains a better trade-off between the capacity of discrimination and efficiency:
                           
                              (3)
                              
                                 
                                    {
                                    
                                       
                                          
                                             
                                                
                                                   x
                                                
                                                
                                                   f
                                                
                                             
                                             =
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   
                                                      
                                                         n
                                                      
                                                      
                                                         a
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   ε
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                [
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      x
                                                   
                                                
                                                
                                                   (
                                                   f
                                                   )
                                                
                                                +
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      e
                                                      ,
                                                      x
                                                   
                                                
                                                
                                                   (
                                                   f
                                                   ,
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                
                                                ]
                                             
                                             
                                                [
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      x
                                                   
                                                
                                                
                                                   (
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                
                                                +
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      e
                                                      ,
                                                      x
                                                   
                                                
                                                
                                                   (
                                                   f
                                                   ,
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                
                                                ]
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   y
                                                
                                                
                                                   f
                                                
                                             
                                             =
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   
                                                      
                                                         n
                                                      
                                                      
                                                         a
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   ε
                                                
                                                
                                                   i
                                                
                                             
                                             
                                                [
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      y
                                                   
                                                
                                                
                                                   (
                                                   f
                                                   )
                                                
                                                +
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      e
                                                      ,
                                                      y
                                                   
                                                
                                                
                                                   (
                                                   f
                                                   ,
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                
                                                ]
                                             
                                             
                                                [
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      y
                                                   
                                                
                                                
                                                   (
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                
                                                +
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      e
                                                      ,
                                                      y
                                                   
                                                
                                                
                                                   (
                                                   f
                                                   ,
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                
                                                ]
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                         where 
                           
                              
                                 n
                              
                              
                                 a
                              
                           
                         is the total number of adjacent faces of the current face 
                           f
                        , and 
                           
                              
                                 f
                              
                              
                                 i
                              
                           
                           
                           
                              (
                              i
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              
                                 
                                    n
                                 
                                 
                                    a
                                 
                              
                              )
                           
                         is its 
                           i
                        -th neighboring face; 
                           
                              
                                 ε
                              
                              
                                 i
                              
                           
                           =
                           
                              (
                              T
                              
                                 (
                                 f
                                 )
                              
                              T
                              
                                 (
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                              /
                              θ
                              
                                 (
                                 f
                                 ,
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                              )
                           
                           ;
                           T
                           
                              (
                              f
                              )
                           
                         is an integer that represents the face type. Its value is defined as follows: 
                           T
                           
                              (
                              f
                              )
                           
                           =
                           1
                         for a plane, 
                           T
                           
                              (
                              f
                              )
                           
                           =
                           2
                         for a cylinder, 
                           T
                           
                              (
                              f
                              )
                           
                           =
                           3
                         for a cone, 
                           T
                           
                              (
                              f
                              )
                           
                           =
                           4
                         for a sphere, 
                           T
                           
                              (
                              f
                              )
                           
                           =
                           5
                         for a torus, and 
                           T
                           
                              (
                              f
                              )
                           
                           =
                           6
                         for a free-form surface. The value of 
                           θ
                           
                              (
                              f
                              ,
                              
                                 
                                    f
                                 
                                 
                                    i
                                 
                              
                              )
                           
                         represents the dihedral angle between 
                           f
                         and 
                           
                              
                                 f
                              
                              
                                 i
                              
                           
                           ;
                           p
                           
                              (
                              f
                              )
                           
                         and 
                           
                              
                                 p
                              
                              
                                 e
                              
                           
                           
                              (
                              f
                              ,
                              
                                 
                                    f
                                 
                                 
                                    i
                                 
                              
                              )
                           
                         are defined in Eqs. (1) and (2), respectively.

From the description above, we may conclude that FAG uses a sampling strategy as the basis to capture shape characteristics of the B-rep part model. This strategy is similar to the shape distribution technology widely used in shape description (see Ref.  [22] for example).

The task of this section is to extend FAG to form GFAG, so as to quantitatively capture both geometrical and topological information of an assembly model. In assembly models, the main information is about parts and relationships. The following subsections will explain how to create GFAG through describing parts and relationships quantitatively in assembly models.

According to Eq. (3), all faces in a B-rep model can be described. As a part is ultimately consisted of geometric faces, we use the mean value of all face values calculated by Eq. (3) to represent the shape characteristics of a single part 
                           p
                         in an assembly model by two parameters 
                           A
                           
                              (
                              p
                              )
                           
                           =
                           
                              (
                              
                                 
                                    x
                                 
                                 
                                    p
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    p
                                 
                              
                              )
                           
                        . In this way, the part 
                           p
                         in an assembly model is essentially treated as a “generic face” similar to a geometrical face in a B-rep part model: 
                           
                              (4)
                              
                                 
                                    {
                                    
                                       
                                          
                                             
                                                
                                                   x
                                                
                                                
                                                   p
                                                
                                             
                                             =
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   
                                                      
                                                         n
                                                      
                                                      
                                                         f
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   x
                                                
                                                
                                                   f
                                                   ,
                                                   i
                                                
                                             
                                             /
                                             
                                                
                                                   n
                                                
                                                
                                                   f
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   y
                                                
                                                
                                                   p
                                                
                                             
                                             =
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   
                                                      
                                                         n
                                                      
                                                      
                                                         f
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   y
                                                
                                                
                                                   f
                                                   ,
                                                   i
                                                
                                             
                                             /
                                             
                                                
                                                   n
                                                
                                                
                                                   f
                                                
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

In Eq. (4), 
                           
                              
                                 n
                              
                              
                                 f
                              
                           
                         is the total number of faces in a part model, and 
                           
                              
                                 x
                              
                              
                                 f
                                 ,
                                 i
                              
                           
                         and 
                           
                              
                                 y
                              
                              
                                 f
                                 ,
                                 i
                              
                           
                           
                           
                              (
                              i
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              
                                 
                                    n
                                 
                                 
                                    f
                                 
                              
                              )
                           
                         are the shape parameters of the 
                           i
                        -th face and are calculated according to Eq. (3).

CAD models from enterprises usually have small features like fillet and chamfers. Since these features may not be a major concern in shape comparison and design reuse, many researchers remove this kind of features beforehand  [3,12,32] to obtain a more effective shape comparison. However, in an assembly model, a mating or a joint relationship is sometimes established on these small features, if they are eliminated the mating and joint relationships may be lost. Therefore, we preserved such kind of small features in a part but remove other small features, though this will still lower the efficiency of discovery algorithm.

MFPs can describe the relationships between two parts more accurately; however, they will make the description of the assembly model more complex because more links will be introduced (as shown in Fig. 1(d) and (e)). For an assembly model with a large number of parts, there may be three or more times of MFPs in the model, making it prohibitive to discover common design structures in assembly models. Therefore, we use compound MFP to transform the multiple links between two parts into a single relation. Then, Fig. 1(e) can be changed into the form of Fig. 3
                        . This strategy essentially treats compound MFP as a “generic edge” similar to a geometrical edge in a B-rep part model. This is also crucial for edge coding in the discovery algorithm (see Section  5.2 for more details).

Based on the discussions above, here, we use two parameters 
                           A
                           
                              (
                              m
                              )
                           
                           =
                           
                              (
                              
                                 
                                    x
                                 
                                 
                                    m
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    m
                                 
                              
                              )
                           
                         to quantitatively capture the abstract relationships between two parts through compound MFPs: 
                           
                              (5)
                              
                                 
                                    {
                                    
                                       
                                          
                                             
                                                
                                                   x
                                                
                                                
                                                   m
                                                
                                             
                                             =
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   T
                                                   
                                                      (
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            i
                                                            1
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            i
                                                            2
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      [
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            
                                                               
                                                                  f
                                                               
                                                               
                                                                  i
                                                                  1
                                                               
                                                            
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            
                                                               
                                                                  f
                                                               
                                                               
                                                                  i
                                                                  2
                                                               
                                                            
                                                         
                                                      
                                                      ]
                                                   
                                                
                                                
                                                   2
                                                   
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   y
                                                
                                                
                                                   m
                                                
                                             
                                             =
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   T
                                                   
                                                      (
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            i
                                                            1
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            i
                                                            2
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      [
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            
                                                               
                                                                  f
                                                               
                                                               
                                                                  i
                                                                  1
                                                               
                                                            
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            
                                                               
                                                                  f
                                                               
                                                               
                                                                  i
                                                                  2
                                                               
                                                            
                                                         
                                                      
                                                      ]
                                                   
                                                
                                                
                                                   2
                                                   
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

In Eq. (5), 
                           
                              
                                 n
                              
                              
                                 m
                              
                           
                         is the number of MFPs between two parts, and 
                           
                              
                                 f
                              
                              
                                 i
                                 1
                              
                           
                         and 
                           
                              
                                 f
                              
                              
                                 i
                                 2
                              
                           
                         of the 
                           i
                        -th MFP belong to two parts of an assembly model mating with each other; 
                           T
                           
                              (
                              
                                 
                                    f
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    f
                                 
                                 
                                    2
                                 
                              
                              )
                           
                         is an integer value which indicates the MFP’s type. In most commercial solid modeling platforms, coincidence, contact, offset and angle are the most common constraints and all assembly models can be established based on them, so the value of 
                           T
                           
                              (
                              
                                 
                                    f
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    f
                                 
                                 
                                    2
                                 
                              
                              )
                           
                         is defined as follows: 
                           T
                           
                              (
                              
                                 
                                    f
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    f
                                 
                                 
                                    2
                                 
                              
                              )
                           
                           =
                           1
                         for a coincidence MFP, 
                           T
                           
                              (
                              
                                 
                                    f
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    f
                                 
                                 
                                    2
                                 
                              
                              )
                           
                           =
                           2
                         for a contact MFP, 
                           T
                           
                              (
                              
                                 
                                    f
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    f
                                 
                                 
                                    2
                                 
                              
                              )
                           
                           =
                           3
                         for a offset MFP, 
                           T
                           
                              (
                              
                                 
                                    f
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    f
                                 
                                 
                                    2
                                 
                              
                              )
                           
                           =
                           4
                         for a angle MFP; 
                           
                              
                                 x
                              
                              
                                 f
                              
                           
                         and 
                           
                              
                                 y
                              
                              
                                 f
                              
                           
                         are calculated by Eq. (3).

Based on Eqs. (4) and (5), the generic face (single part) and the generic edge (compound MFP) of the proposed GFAG are prepared. In this subsection, the descriptor for the assembly model is introduced based on the GFAG. The definition of a GFAG is as follows.


                        
                           Definition 2
                           The GFAG of an assembly model is a graph 
                                 
                                    G
                                 
                                 =
                                 
                                    (
                                    
                                       V
                                    
                                    ,
                                    
                                       E
                                    
                                    )
                                 
                              , whose node 
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                               in 
                                 
                                    V
                                 
                                 =
                                 
                                    {
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    …
                                    }
                                 
                               corresponds to a part of the assembly model and edge 
                                 
                                    
                                       e
                                    
                                    
                                       i
                                    
                                 
                               in 
                                 
                                    E
                                 
                                 =
                                 
                                    {
                                    
                                       
                                          e
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          e
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    …
                                    }
                                 
                               corresponds to a compound MFP between two parts.

We use two shape parameters 
                           A
                           
                              (
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              )
                           
                           =
                           
                              (
                              
                                 
                                    x
                                 
                                 
                                    v
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    v
                                 
                              
                              )
                           
                         for a node 
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                         in a GFAG to map the graph’s nodes to a 2D coordinate system. However, if 
                           A
                           
                              (
                              p
                              )
                           
                        , as defined in Eq. (4), were directly used as the shape parameter, i.e., 
                           A
                           
                              (
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              )
                           
                           =
                           A
                           
                              (
                              p
                              )
                           
                        , there would be a lot of parts sharing the same shape parameters in an assembly model, making the shape comparison time-consuming among assembly models. Similar to the strategy in Ref.  [3], we utilize information of the current part together with its mating parts to calculate the shape parameter of the current node in GFAG, and 
                           A
                           
                              (
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              )
                           
                           =
                           
                              (
                              
                                 
                                    x
                                 
                                 
                                    v
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    v
                                 
                              
                              )
                           
                         are calculated as follows: 
                           
                              (6)
                              
                                 
                                    {
                                    
                                       
                                          
                                             
                                                
                                                   x
                                                
                                                
                                                   v
                                                
                                             
                                             =
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   
                                                      
                                                         n
                                                      
                                                      
                                                         v
                                                      
                                                   
                                                
                                             
                                             
                                                [
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      p
                                                   
                                                
                                                +
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      p
                                                      ,
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                                ]
                                             
                                             
                                                [
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                                +
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      p
                                                      ,
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                                ]
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   y
                                                
                                                
                                                   v
                                                
                                             
                                             =
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   
                                                      
                                                         n
                                                      
                                                      
                                                         v
                                                      
                                                   
                                                
                                             
                                             
                                                [
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      p
                                                   
                                                
                                                +
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      p
                                                      ,
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                                ]
                                             
                                             
                                                [
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                                +
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      p
                                                      ,
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                                ]
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Here, 
                           
                              
                                 n
                              
                              
                                 v
                              
                           
                         is the total number of nodes corresponding to the mating parts of a current part 
                           p
                         in an assembly model, and 
                           
                              
                                 p
                              
                              
                                 i
                              
                           
                           
                           
                              (
                              i
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              
                                 
                                    n
                                 
                                 
                                    v
                                 
                              
                              )
                           
                         is the 
                           i
                        -th mating parts of 
                           p
                           ;
                           
                              
                                 x
                              
                              
                                 p
                              
                           
                         and 
                           
                              
                                 y
                              
                              
                                 p
                              
                           
                         can be calculated by Eq. (4), and 
                           
                              
                                 x
                              
                              
                                 p
                                 ,
                                 
                                    
                                       p
                                    
                                    
                                       i
                                    
                                 
                              
                           
                         and 
                           
                              
                                 y
                              
                              
                                 p
                                 ,
                                 
                                    
                                       p
                                    
                                    
                                       i
                                    
                                 
                              
                           
                         can be calculated by Eq. (5).

Thanks to Eq. (6), each node, 
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                        , of a GFAG has two shape parameters, which can serve as the 
                           x
                         and 
                           y
                         coordinates of a point in a 2D coordinate system, so a GFAG can be drawn in a plane. Fig. 4
                         gives an example of a GFAG shown in a 2D coordinate system, in which the black square points represent parts of an assembly model and the red lines represent compound MFPs. The horizontal and vertical axes respectively indicate the 
                           
                              
                                 x
                              
                              
                                 v
                              
                           
                         and 
                           
                              
                                 y
                              
                              
                                 v
                              
                           
                         parameters of a node calculated by Eq. (6). At the first glance, GFAG shown in Fig. 4 is ultimately a graph similar to other graphs that have been used to represent assemblies; however, it has some unique characteristics.

(1) The node in a GFAG can only correspond to one point in a 2D coordinate system by virtue of the shape parameters calculated by Eq. (6). In other assembly representations, a node usually corresponds to an arbitrary point in a 2D coordinate system. In another words, for an assembly, its topological structure can be “fixed” in a 2D coordinate system by GFAG, which may bring more determinability into shape comparison.

(2) The edge in a GFAG is also quantified, and the captured mating condition information between parts can be directly integrated into the node of GFAG. In this way, part and relationship information in an assembly model can be captured in a consistent manner. While in other assembly representations, part and relationship information is usually described using different methods, which may increase space and time expenses in shape comparison.

In summary, GFAG can capture topological and geometrical information in an assembly model more quantitatively; this is the basis for CDSDA. Besides, GFAG has advantages such as convenient evaluation, easy check, useful for generating a unique graph descriptive code, etc.  [3].

The main focus of this paper is to develop a suitable descriptor for CDSDA. However, to demonstrate its effectiveness, the discovery algorithm based on GFAG will be explained briefly in this section. If assembly models are represented with GFAGs, common design structures are just the common subgraphs of the GFAGs. Then, CDSDA is almost the same as CDSD in part models.

The discovery algorithm is extended from that of Ref.  [3], which essentially consists of two steps. First, generate frequent subgraph candidates through direct merging; second, count the frequency of frequent subgraphs identified from the candidates based on a graph descriptive code. However, the first step sometimes generates thousands of candidates, making it prohibitive to find a result; in addition, the graph descriptive code in the second step is for the part model, not for the assembly model. Therefore, we add a pruning step in the first step to further reduce the number of candidates and slightly change the descriptive code in the second step. The extended discovery algorithm is roughly illustrated in Fig. 5
                     .

To improve efficiency, the discovery algorithm in Ref.  [3] uses the direct merging method instead of subgraph-isomorphism checking to generate frequent subgraph candidates. For two subgraphs 
                           
                              
                                 g
                              
                              
                                 i
                              
                              
                                 k
                              
                           
                         and 
                           
                              
                                 g
                              
                              
                                 j
                              
                              
                                 k
                              
                           
                         in a graph 
                           g
                        , they can be directly merged into a candidate subgraph 
                           
                              
                                 g
                              
                              
                                 m
                              
                           
                         if (1) they have some common nodes (see Fig. 6
                        (a)) and (2) they are connected by some arcs (see Fig. 6(b)). This strategy is effective; however, there is a problem: the order of the merged graph satisfying the first rule is usually lower than that satisfying the second rule. In this situation, there exists a possibility that the graph generated according to the first rule becomes a subgraph of the graph generated according to the second rule. In addition, the discovery algorithm will usually generate identical subgraph candidates in each iteration. As such, we introduce a pruning step in subgraph candidates generation. A graph in the candidates set will be pruned if (1) it is identical with another graph in the set or (2) it is a subgraph of another graph in the set. By comparing the descriptive code instead of subgraph-isomorphism checking, it has been theoretically and experimentally proved that the pruning step will not increase the complexity of the algorithm but can enhance its efficiency in practical application (see Section  6 for more detail).

Graph descriptive codes are designed to compare graphs. In Ref.  [3], nodes of all FAGs are sorted into a partial order according to the coordinates of 2D points mapped from those nodes. Based on the order, each node is attached an integer label representing the position number of its shape parameters. And those nodes sharing the same shape parameters are given the same label and clustered into a set (see Fig. 7
                        ). Then, the descriptive code is defined as follows: 
                           
                              
                                 C
                                 
                                    (
                                    g
                                    )
                                 
                                 =
                                 
                                    
                                       C
                                    
                                    
                                       1
                                    
                                 
                                 
                                    
                                       C
                                    
                                    
                                       1
                                       ,
                                       2
                                    
                                 
                                 
                                    
                                       C
                                    
                                    
                                       1
                                       ,
                                       3
                                    
                                 
                                 …
                                 
                                    
                                       C
                                    
                                    
                                       1
                                       ,
                                       n
                                    
                                 
                                 …
                                 
                                    
                                       C
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       C
                                    
                                    
                                       i
                                       ,
                                       i
                                       +
                                       1
                                    
                                 
                                 …
                                 
                                    
                                       C
                                    
                                    
                                       i
                                       ,
                                       n
                                    
                                 
                                 …
                                 
                                    
                                       C
                                    
                                    
                                       n
                                    
                                 
                                 ,
                              
                           
                         where 
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                           
                           
                              (
                              i
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              n
                              )
                           
                         is the descriptive code for the 
                           i
                        -th node cluster; 
                           
                              
                                 C
                              
                              
                                 i
                                 ,
                                 j
                              
                           
                           
                           
                              (
                              i
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              n
                              ;
                              j
                              =
                              i
                              +
                              1
                              ,
                              i
                              +
                              2
                              ,
                              …
                              ,
                              n
                              )
                           
                         is the descriptive code of a relation between node cluster 
                           i
                         and 
                           j
                        , concretely. 
                           
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          i
                                       
                                    
                                    =
                                    
                                       
                                          n
                                       
                                       
                                          v
                                          ,
                                          i
                                       
                                    
                                    
                                       
                                          L
                                       
                                       
                                          v
                                          ,
                                          i
                                       
                                    
                                    
                                       
                                          n
                                       
                                       
                                          e
                                          ,
                                          1
                                       
                                    
                                    
                                       
                                          L
                                       
                                       
                                          e
                                          ,
                                          1
                                       
                                    
                                    
                                       
                                          n
                                       
                                       
                                          e
                                          ,
                                          2
                                       
                                    
                                    
                                       
                                          L
                                       
                                       
                                          e
                                          ,
                                          2
                                       
                                    
                                    ⋯
                                    
                                       
                                          n
                                       
                                       
                                          e
                                          ,
                                          m
                                       
                                    
                                    
                                       
                                          L
                                       
                                       
                                          e
                                          ,
                                          m
                                       
                                    
                                 
                              
                              
                                 (7)
                                 
                                    
                                       
                                          L
                                       
                                       
                                          e
                                          ,
                                          j
                                       
                                    
                                    =
                                    
                                       
                                          T
                                       
                                       
                                          e
                                       
                                    
                                    θ
                                 
                              
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    =
                                    
                                       
                                          n
                                       
                                       
                                          e
                                          ,
                                          1
                                       
                                    
                                    
                                       
                                          L
                                       
                                       
                                          e
                                          ,
                                          1
                                       
                                    
                                    
                                       
                                          n
                                       
                                       
                                          e
                                          ,
                                          2
                                       
                                    
                                    
                                       
                                          L
                                       
                                       
                                          e
                                          ,
                                          2
                                       
                                    
                                    ⋯
                                    
                                       
                                          n
                                       
                                       
                                          e
                                          ,
                                          m
                                       
                                    
                                    
                                       
                                          L
                                       
                                       
                                          e
                                          ,
                                          m
                                       
                                    
                                    .
                                 
                              
                           
                        
                     

Here, 
                           
                              
                                 n
                              
                              
                                 v
                                 ,
                                 i
                              
                           
                         is the number of nodes in the 
                           i
                        -th cluster; 
                           
                              
                                 L
                              
                              
                                 v
                                 ,
                                 i
                              
                           
                         is the node label of this cluster. 
                           
                              
                                 L
                              
                              
                                 e
                                 ,
                                 j
                              
                           
                         and 
                           
                              
                                 n
                              
                              
                                 e
                                 ,
                                 j
                              
                           
                         are, respectively, the 
                           j
                        -th distinct arc label and the number of arcs with label 
                           
                              
                                 L
                              
                              
                                 e
                                 ,
                                 j
                              
                           
                        , which is composed of the shape parameters 
                           A
                           
                              (
                              e
                              )
                           
                           =
                           
                              (
                              
                                 
                                    T
                                 
                                 
                                    e
                                 
                              
                              ,
                              θ
                              )
                           
                         of its corresponding geometric edge, namely the edge type 
                           
                              
                                 T
                              
                              
                                 e
                              
                           
                         and the average dihedral angle 
                           θ
                         along the edge. Using this method, the graph descriptive codes of the graph can be illustrated in Fig. 7(c).

Obviously, this code is used for the part model. In GFAG, the arcs are no longer the geometric edges in a part model, but the compound MFPs. As such, the parameter 
                           
                              
                                 L
                              
                              
                                 e
                                 ,
                                 j
                              
                           
                         in Eq. (7) must be changed. Here, we use a four-digit decimal number to represent different kinds of compound MFPs. In the number, from left to right, the first digit is the number of MFPs of coincidence type; the second digit is the number of MFPs of contact type; the third digit is the number of MFPs of offset type; and the last digit is the number of MFPs of angle type. For example, if two parts are constrained by two coincidence MFPs and an offset MFP, then the arc label for the compound MFPs of the two parts is given as 2010. Let 
                           
                              
                                 n
                              
                              
                                 i
                              
                           
                         be the number of the 
                           i
                        -th type of MFP. Then 
                           
                              
                                 L
                              
                              
                                 e
                                 ,
                                 j
                              
                           
                         can be defined as 
                           
                              
                                 
                                    
                                       L
                                    
                                    
                                       e
                                       ,
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       n
                                    
                                    
                                       1
                                    
                                 
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       n
                                    
                                    
                                       3
                                    
                                 
                                 
                                    
                                       n
                                    
                                    
                                       4
                                    
                                 
                                 .
                              
                           
                        
                     

This coding method for compound MFPs can complement Eq. (5) to generate a more unique GFAG. According to Eq. (5), the shape parameters of a compound MFP are computed by summing products of mating condition type assignments and lower level shape parameters; it is quite possible that different compound MFPs could end up with the same parameters. Using the coding method above, the order and the number of every elementary MFP in a compound MFP are recorded and labeled to the corresponding edge in GFAG. If two different compound MFPs have the same shape parameters but different descriptive codes, they can still be separated apart.

We developed a prototype system for CDSDA on the platforms of Visual Studio 2003 & CAA for CATIA and Solid Modeler CATIA. In this system, assembly models are modeled using CATIA V5 R18 so that they can be processed using a unified program. This system is designed to include three main modules, namely pre-processing, common structure discovery, and post-processing. The function of pre-processing is to transform assembly models into GFAGs. The discovery algorithms are implemented in the common structure discovery module, which combines the powerful computing software Matlab 7.01 and a graphical toolbox MatGraph. This module mainly runs in background. The function of post-processing is to visualize the common structures discovered. In the last module, the discovered frequent subgraphs, i.e., the common structures, will be visually mapped back to assembly models. However, the last module is under development; here, we display our system interface with the first two modules in Fig. 8
                     .

As shown in Fig. 5, the first step for CDSDA is to generate the important intermediate data format GFAGs of assembly models. In Fig. 9
                     , we give some examples of GFAGs for assembly models.

After all assembly models have been transformed into GFAGs, the common assembly structure can be found using our discovery algorithm, which essentially output the frequent subgraphs of all GFAGs at a given threshold value 
                        ζ
                     , and then these frequent subgraphs will be mapped back to their visual models. Fig. 10
                     (c) gives an example of a discovered common assembly structure, Fig. 10(b) shows the maximal frequent subgraph corresponding to the common structure, and Fig. 10(a) demonstrates all 8 assembly models, their GFAGs and the frequent subgraph of the GFAGs. In Fig. 10(a) and (b), the frequent subgraphs are drawn using blue nodes and green edges. However, the scales of the figures are different, so the same frequent subgraph is shown differently in Fig. 10(a) and (b). The maximal number of nodes in the 8 GFAGs shown in Fig. 10(a) is 28, and the average number of nodes is 27. The frequent subgraph shown in Fig. 10(b) is discovered at the threshold value 0.95 within 6 iterations, and in the 2nd-, 3rd-, 4th- and 5th- iterations, there are 16, 47, 235 and 136 frequent subgraph candidates, respectively. The whole discovery time is about 8 min. The frequent subgraph shown in Fig. 10(b) actually has 16 nodes and 16 edges. However, as there are two pairs of nodes having the same shape parameters, only 14 nodes and 14 edges can be seen.

Besides the common assembly structure shown in Fig. 10, we tested 6 other groups of assembly models (see Table 2
                     ). The maximal average size of the GFAGs for the 7 groups of assembly models is 61, and the minimal average size is 4.8. The results in Table 2 are discussed in detail in the next section.

@&#DISCUSSIONS@&#

The examples shown in Figs. 9, 10 and Table 2 are just used to demonstrate the feasibility that assembly models can be transformed into GFAGs and that the common assembly structure can be discovered based on GFAGs. However, there are many other aspects which need to be discussed.

As is mentioned in Section  3.2, the basis of GFAG, i.e. FAG, is based on a sampling strategy, which can be reflected by Eq. (1), Eq. (2), especially, Eq. (3). Here, we first discuss the influence of the number of sampling points on the three equations. Three experiments have been implemented: in the first experiment, we use a simple part model; in the second one, a part with many small features is used; and the third one tests a part model with free-form surfaces. The numbers of faces in the three models are 18, 95 and 32, respectively. In each experiments, we sample the corresponding model 10 times, with the sampling number 
                        m
                        =
                        20
                        
                           
                              0
                           
                           
                              ∗
                           
                        
                        i
                        
                        
                           (
                           i
                           =
                           1
                           ,
                           2
                           ,
                           …
                           ,
                           10
                           )
                        
                     . Then we use the face values corresponding to 
                        m
                        =
                        200
                      as the base values to observe deviations of the face values corresponding to other 
                        m
                      values. In the first experiment, few changes appear, while in the second and third experiments, some deviations appear as shown in Fig. 11
                     (c) and (d). The two figures indicate that the sampling strategy may not be very effective for part with many small features and free-form surfaces. This is especially obvious in group 3 of Table 2. In group 3, the four assembly models are almost the same; however, as there are too many small features in them, we cannot discover the common assembly structure. In contrast, in other groups, common assembly structures can be discovered from the assembly models with fewer small features and free-form surfaces. Another aspect that should be noticed from the two figures is: in both experiments the deviations become more and more stable as 
                        m
                      increases. This implies that we can obtain stable face values by increasing sampling number 
                        m
                     . However, in order to obtain more correct results, in this paper, as well as in the inspirational paper Ref.  [3], fewer free-form surfaces and small features are taken into account. In some fields, assembly tooling design, for example, the main structure of a product usually has relatively few small features and free-from surfaces. This situation can warrant the applicability of our approach.

The next problem is about the differentiation capacity of GFAG, which directly affects the final result of CDSDA. Here, we analyze the differentiation capacity of GFAG from two aspects: theoretical analysis and experimental test. Theoretically, two GFAGs will be the same if (1) the shape parameters for all the corresponding nodes are the same, (2) the neighboring nodes of all the corresponding nodes are the same, and (3) the types and arrangement of MFPs between corresponding parts are the same. It will be easy to know that the possibility that two nodes are the same is 1/2. Similarly, the possibility that two MFPs are the same is also 1/2. Suppose the number of nodes in each GFAG be 
                        n
                     , the number of edges be 
                        m
                     , and the average number of neighboring nodes of all the corresponding nodes be 
                        a
                     . As is mentioned in Section  4.2, the types of MFPs between corresponding parts are 4. In addition, the biggest number of MFPs between corresponding parts is usually 3. Then, roughly, the possibilities that the three conditions are satisfied are 
                        
                           
                              p
                           
                           
                              1
                           
                        
                        =
                        
                           
                              
                                 (
                                 1
                                 /
                                 2
                                 )
                              
                           
                           
                              n
                           
                        
                        ,
                        
                           
                              p
                           
                           
                              2
                           
                        
                        =
                        
                           
                              
                                 (
                                 
                                    
                                       
                                          (
                                          1
                                          /
                                          2
                                          )
                                       
                                    
                                    
                                       a
                                    
                                 
                                 )
                              
                           
                           
                              n
                           
                        
                        =
                        
                           
                              
                                 (
                                 1
                                 /
                                 2
                                 )
                              
                           
                           
                              n
                              a
                           
                        
                     , and 
                        
                           
                              p
                           
                           
                              3
                           
                        
                        =
                        
                           
                              
                                 (
                                 
                                    
                                       
                                          (
                                          1
                                          /
                                          2
                                          )
                                       
                                    
                                    
                                       3
                                       
                                          (
                                          
                                             
                                                C
                                             
                                             
                                                4
                                             
                                             
                                                1
                                             
                                          
                                          )
                                       
                                    
                                 
                                 )
                              
                           
                           
                              m
                           
                        
                        =
                        
                           
                              
                                 (
                                 1
                                 /
                                 2
                                 )
                              
                           
                           
                              12
                              m
                           
                        
                     , respectively. Therefore, the possibility that all conditions are satisfied simultaneously is 
                        p
                        =
                        
                           
                              p
                           
                           
                              1
                           
                        
                        
                           
                              p
                           
                           
                              2
                           
                        
                        
                           
                              p
                           
                           
                              3
                           
                        
                        =
                        
                           
                              
                                 (
                                 1
                                 /
                                 2
                                 )
                              
                           
                           
                              n
                              
                                 (
                                 1
                                 +
                                 a
                                 )
                              
                              +
                              12
                              m
                           
                        
                     . For 
                        n
                        =
                        2
                        ,
                        a
                        =
                        1
                     , and 
                        m
                        =
                        1
                        ,
                        p
                        =
                        
                           
                              
                                 (
                                 1
                                 /
                                 2
                                 )
                              
                           
                           
                              16
                           
                        
                     , which indicates that the possibility 
                        p
                      is usually very small, even there are only two nodes and one edge in each GFAG. This can theoretically ensure the differentiation capacity of GFAG. However, we still cannot guarantee that the same GFAGs will not be generated for two different assembly models. Nonetheless, as pointed in Ref.  [3], this may increase the error tolerance of CDSDA based on GFAG, which may make the algorithm more robust. For this reason, we recommend our current approach to be used as a rough filter in common structure discovery.

In experimental analysis, we give an example to show that GFAG has a fine differentiation capability. Fig. 12
                     (a) illustrates two assembly models whose global shapes are similar, and their GFAGs are visualized in Fig. 12(b). In Fig. 12(a), it seems that many parts are the same (the largest parts for example), and the same parts should belong to some common local structure. However, the shape parameters of their mating parts are different in the two models, so according to Eq. (6) their shape parameters are different. The actual common local structure shown in Fig. 12(c) is discovered from five assembly models, whose average part number is 61. From this example, we can see that the algorithm proposed in this paper can effectively differentiate among the shapes of local structures and can achieve a precise shape-matching, but as a drawback, it appears to be sensitive to changes in the shapes of the parts surrounding the structure, which sometimes causes the structures identified to be smaller than expected.

Another important aspect which needs to be discussed is the complexity of the discovery algorithm, though the algorithm is not the main concern of this paper. As is mentioned in Section  5, there are mainly two steps in the discovery algorithm, the first one is to transform assembly models into GFAGs, and the second one is to discover frequent subgraphs. The complexity of the first step is largely related to the number of nodes and compound MFPs in assembly models. However, it is similar to the pre-processing step in various algorithms for frequent subgraph discovery. As such, here we only analyze the complexity of the second step. Suppose the number of iterations be 
                        I
                     , in the 
                        i
                     -th 
                        
                           (
                           i
                           =
                           1
                           ,
                           2
                           ,
                           …
                           ,
                           I
                           )
                        
                      iteration, the number of assembly models containing candidate frequent subgraphs be 
                        
                           
                              A
                           
                           
                              i
                           
                        
                     , and there be 
                        
                           
                              C
                           
                           
                              j
                           
                        
                      candidate frequent subgraphs in the 
                        j
                     -th 
                        
                           (
                           j
                           =
                           1
                           ,
                           2
                           ,
                           …
                           ,
                           
                              
                                 A
                              
                              
                                 i
                              
                           
                           )
                        
                      assembly model. Then in each iteration 
                        i
                     , for the 
                        j
                     -th assembly model, there need 
                        
                           
                              ∑
                           
                           
                              k
                              =
                              1
                              ,
                              k
                              ≠
                              j
                           
                           
                              
                                 
                                    A
                                 
                                 
                                    i
                                 
                              
                           
                        
                        
                           
                              C
                           
                           
                              j
                           
                        
                        
                           
                              C
                           
                           
                              k
                           
                        
                      descriptive code comparisons to generate candidate frequent subgraphs for next iteration 
                        i
                     +1, so the total number of descriptive code comparisons in the 
                        i
                     -th iteration for 
                        
                           
                              A
                           
                           
                              i
                           
                        
                      assembly models is about 
                        
                           
                              ∑
                           
                           
                              j
                              =
                              1
                           
                           
                              
                                 
                                    A
                                 
                                 
                                    i
                                 
                              
                           
                        
                        
                           
                              ∑
                           
                           
                              k
                              =
                              1
                              ,
                              k
                              ≠
                              j
                           
                           
                              
                                 
                                    A
                                 
                                 
                                    i
                                 
                              
                           
                        
                        
                           
                              C
                           
                           
                              j
                           
                        
                        
                           
                              C
                           
                           
                              k
                           
                        
                     . From here, we can estimate the total number of descriptive code comparisons in all iterations as follows: 
                        
                           (8)
                           
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 
                                    I
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    j
                                    =
                                    1
                                 
                                 
                                    
                                       
                                          A
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    k
                                    =
                                    1
                                    ,
                                    k
                                    ≠
                                    j
                                 
                                 
                                    
                                       
                                          A
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                              
                                 
                                    C
                                 
                                 
                                    k
                                 
                              
                              .
                           
                        
                     
                  

Since we usually do not know how many iterations are needed to finish a discovery, 
                        I
                      in Eq. (8) is usually unknown. To estimate 
                        I
                     , here, we related it to the number of maximal frequent subgraph 
                        
                           
                              n
                           
                           
                              f
                           
                        
                      among these assembly models. As is described in Section  5.1, a subgraph with higher order 
                        
                           
                              O
                           
                           
                              h
                           
                        
                      is directly merged from two subgraphs with lower order 
                        
                           
                              O
                           
                           
                              l
                           
                        
                      if (1) the two lower order subgraph have some common nodes and (2) they are connected by some arcs. For the first condition, the worst situation is that the two subgraphs are merged with only one node added, i.e., 
                        
                           
                              O
                           
                           
                              h
                           
                        
                        =
                        
                           
                              O
                           
                           
                              l
                           
                        
                        +
                        1
                     ; for the second condition, the best situation is that the two subgraphs are merged by multiplying their size, i.e., 
                        
                           
                              O
                           
                           
                              h
                           
                        
                        =
                        2
                        
                           
                              O
                           
                           
                              l
                           
                        
                     . Obviously, the higher the order of the merged subgraph, the fewer iterations will be needed. It is not difficult to figure out that, from the best situation to the worst situation, the iterations 
                        I
                      needed to generate the maximal frequent subgraph 
                        
                           
                              n
                           
                           
                              f
                           
                        
                      is between 
                        
                           (9)
                           
                              
                                 [
                                 
                                    
                                       log
                                    
                                    
                                       2
                                    
                                    
                                       
                                          
                                             n
                                          
                                          
                                             f
                                          
                                       
                                       +
                                       1
                                    
                                 
                                 ]
                              
                              +
                              1
                              ≤
                              I
                              ≤
                              
                                 
                                    n
                                 
                                 
                                    f
                                 
                              
                              −
                              1
                              .
                           
                        
                     
                  

From Eqs. (8) and (9), we can obtain a more efficient discovery algorithm from three ways: (1) in each iteration, reduce the number of candidate frequent subgraphs in each assembly model, i.e. 
                        
                           
                              C
                           
                           
                              j
                           
                        
                     ; (2) in each iteration, reduce the number of assembly models containing candidate frequent subgraphs, i.e. 
                        
                           
                              A
                           
                           
                              i
                           
                        
                     ; and (3) reduce the number of iterations 
                        I
                     , to the most extent. By introducing the pruning step, 
                        
                           
                              C
                           
                           
                              j
                           
                        
                      can be easily reduced. For 
                        
                           
                              A
                           
                           
                              i
                           
                        
                     , it will naturally decrease as the number of iterations 
                        I
                      increases. With regard to 
                        I
                     , the pruning step will preserve the candidate subgraphs with the highest order generated in each iteration, i.e., the best situation discussed in the above paragraph, as such, the iterations 
                        I
                      will also be reduced to the most extent. This can be demonstrated by the discussion about Fig. 10 in Section  6. In Fig. 10, the number of nodes of the maximal frequent subgraph 
                        
                           
                              n
                           
                           
                              f
                           
                        
                      is 16; based on Eq. (9), we can estimate that the iterations 
                        I
                      needed is between 5 and 15, and the actual iterations 
                        I
                      in Fig. 10 is 6.

Compared with the discovery algorithm without pruning step proposed in Ref.  [3], the three aspects can theoretically ensure that the discovery algorithm in our approach is more efficient. Fig. 13
                      compares the two algorithms experimentally and shows that the discovery algorithm with pruning step has a relatively higher efficiency and effectiveness.

@&#CONCLUSIONS@&#

CDSD is a new research problem in the CAD community, and resolution of the problem shows potentials for automating design knowledge discovery and design feature library customization  [3]. Based on the significant research work that has been done, this paper presents a GFAG for CDSDA. Through identifying frequent subgraphs of GFAGs of assembly models, the common assembly structure can be discovered. The main characteristic of GFAG is that it can transform abstract mating and joint relationships in assembly models into measurable entities based on MFPs. As such, it can capture both the geometrical and topological information of assembly models more quantitatively. In addition, GFAG is easy to create and has good shape differentiation capability, for it considers part together with its mating parts. CDSDA based on GFAG is demonstrated by extending a discovery algorithm, and experimental results suggest the feasibility of the proposed approach. However, there are also some problems which need to be solved further.

First, shape parameters in GFAG are obtained based on point sampling. As is mentioned in  [32], the graphs of the same part model will undergo a local change whenever they are drawn because of the characteristic of the random point sampling. Though our experiments show that for a simple part model the sampling results are stable, this is not the case for part models with many small features and free-form surfaces. This may be an inherent problem with GFAG. For the part model with many small features, we can pre-process these models carefully, as many literatures [3,12,32] have done. However, experiments show that this is not enough, free-form surfaces should also be avoided as much as possible. When free-form surfaces are present in a model, the two parameters from the statistics of point convexity are not sufficient to describe the shape of a face. As such, it cannot ensure that the discovery algorithm based on GFAG is also effective enough when it was used in assembly models with a large number of free-form surfaces.

Second, the dimensions of the parts and their relative ratios are not considered in the shape comparison. To reduce the sensitivity of the GFAG to small parts for CDSDA, the relative volumes of parts could be adopted to differentiate the significance of the parts to the whole assembly model; they could be a weight for a part code or a threshold value for eliminating a node from GFAGs.

We will continue our research on these issues in the future. In spite of these limitations, the proposed GFAG is still a useful graph for CDSDA and can be used for rough common structure discovery to narrow the discovery range for fine common structure discovery. It can also serve as a foundation for the development of other, more effective, algorithms, in other areas such as assembly model retrieval.

@&#ACKNOWLEDGMENTS@&#

The authors would like to thank the National Natural Science Foundation of China (51205316), the Basic Research Foundation of Northwestern Polytechnical University of China (JC201112), the Doctorate Foundation of Northwestern Polytechnical University (CX201223) and the Innovation Foundation of National Engineering Research Center for Commercial aircraft (SAMC12-JS-15-013) for financial support. They would also like to thank the anonymous reviewers for their comments and suggestions, which helped us to improve the manuscript.

@&#REFERENCES@&#

