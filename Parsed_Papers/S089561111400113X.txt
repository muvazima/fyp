@&#MAIN-TITLE@&#An effective and robust method for modeling multi-furcation liver vessel by using Gap Border Pairing

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Traditional methods for reconstructing complicated multi-furcation are limited.


                        
                        
                           
                           Turing points are yield on borders if three branches intersect with each other.


                        
                        
                           
                           Turning points having anisotropic-opposite relationship exactly make a triangle.


                        
                        
                           
                           Any border segment can pair one and only opposite segment.


                        
                        
                           
                           Topology of refined surface can be re-maintained by checking original vertices.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Tree-like skeleton

Multi-furcation part

Gap border pairing

Surface topology

Vessel model

@&#ABSTRACT@&#


               
               
                  Shape-based 3D surface reconstructing methods for liver vessels have difficulties to tackle with limited contrast of medical images and the intrinsic complexity of multi-furcation parts. In this paper, we propose an effective and robust technique, called Gap Border Pairing (GBPa), to reconstruct surface of liver vessels with complicated multi-furcations. The proposed method starts from a tree-like skeleton which is extracted from segmented liver vessel volumes and preprocessed as a number of simplified smooth branching lines. Secondly, for each center point of any branching line, an optimized elliptic cross-section ring (contour) is generated by optimizedly fitting its actual cross-section outline based on its tangent vector. Thirdly, a tubular surface mesh is generated for each branching line by weaving all of its adjacent rings. Then for every multi-furcation part, a transitional regular mesh is effectively and regularly reconstructed by using GBP. An initial model is generated after reconstructing all multi-furcation parts. Finally, the model is refined by using just one time subdivision and its topologies can be re-maintained by grouping its facets according to the skeleton, providing high-level editability. Our method can be automatically implemented in parallel if the segmented vessel volume and corresponding skeletons are provided. The experimental results show that GBP model is accurate enough in terms of the boundary deviations between segmented volume and the model.
               
            

3D surface models of blood vessels in human organs like cerebra, livers, hearts and wombs play a significant role in medical applications [1,2]. These models provide therapy planning, virtual surgery, radiotherapy and anatomy teaching with great conveniences. In clinical applications for example, intuitive geometric representations such as vessel topologies, spatial locations of branching segments, sizes of tubes, as well as relationships between vessels and other tissues can be directly visualized in these models. Thus a good understanding of blood vessels can be provided for surgeons before surgery procedures, minimizing subjective factors which could cause erroneous assessments. As to medical teaching, novices can easily learn to master vascular anatomy by interactively manipulating these models [3], greatly shortening the time used for virtual surgery training.

The vessel volume segmented from medical images can be rendered either by volume [4] or surface [5,6], where the volume here is inferior to surface regarding the velocity and storage [7]. Therefore, surface model should still be reconstructed in the main trend of vessel visualization. As to the surface modeling, there are two main categories of methods [8]. The first category refers to shape-free techniques, which construct mesh directly from boundary voxels of vessel volume, but not make any assumption of structuralized geometry. These techniques are applied primarily for diagnosis which requires high accuracy. Marching Cubes [9] and Multi-level Partition of Unity [10] are two popular techniques on which many other shape-free methods are based. Similarly, Ding [11] introduces a region-based technique to reconstruct human airways and artery vessels, dividing surface mesh into tree hierarchies. But it embodies no reasonable divisions around furcating parts and no other geometric representations such as cross-section radii and tube curvatures. On contrary, the shape-based techniques, belonging to second category, are used to construct referential models for therapy planning and medicine teaching [12,13]. These techniques make assumptions that the blood vessels have strictly tree-like structures with tubular shapes. They require regular (circular or elliptic) cross-section contours and smooth organic looking shapes on non-pathological branches.

The shape-free techniques have intrinsic disadvantages. The conspicuous one is their lack of structural geometric parameters. Due to the incomplete contrasts of medical images and limited extracting methods, aliasing voxels will occur at volume boundaries, causing these techniques to generate coarse meshes. In contrast, the shape-based techniques have unparalleled advantages because they can provide high-level information such as tube trends, degrees of curvatures, cross-section radii and topological hierarchies. Though shape-based techniques have more complexities in algorithm designs, they are more advantageous than the shape-free in terms of providing anatomical information.

In usual, many methods based on shape-based techniques construct coarse meshes first by means of quads [14–16], spline curves [17] or solid NURBS mesh [18], then the coarse meshes are refined by using surface subdivision for several times. However, most existing shape-based methods have difficulties in well weaving smooth meshes around complicated multi-furcation parts, especially for liver vessels. Second, the computational overheads and storages would fall into exponential growth along with subdivision times. Third, over subdivisions would cause excessive deformations on refined models compared with segmented volumes. Forth, due to intrinsically coarse boundary voxels of segmented volume, the initial radii attached to skeleton centerlines (used by shape-based methods) generated by traditional skeletonizing methods cannot be treated as reasonable. These radii are always much smaller than their actual values, especially at narrow tubes. Finally, the centerlines are not necessarily centered at optimized center positions. All these disadvantages imply that the vessel surface meshes should be based on optimized cross-section rings (see in Section 3.1) of branching vessel tubes.

In order to solve the lacks of high-level geometric information and the disadvantages mentioned above, we introduce a novel shape-based modeling method—GBP (see Sections 4 and 5). The model by GBP is based on optimized skeletons and requires refinement with just one time subdivision. We make an assumption that the cross-section contours of vessel branches are intrinsically elliptic or circular. Firstly, the tree-like skeleton (centerlines) is extracted from the segmented vessel volume. The skeleton is composed of a number of hierarchically connecting segments which are smoothed, simplified and recombined into a number of branching lines. Second, we construct elliptic contours for every branching line by generating optimized cross-section rings for all center points of the line. Third, all adjacent rings are weaved with triangular facets to generate tubular meshes. Forth, as our key innovation, GBP is applied to construct close regular meshes for all multi-furcation parts with any numbers of branches. Finally, the initial model is refined by using one time subdivision and corresponding tree topologies are re-maintained by checking the connections between new facets and old vertices.

This article is organized as follow from Sections 2–9. Section 2 describes how to construct an adaptive tree-like skeleton from original vessel volume segmented from CT images. More detailed materials will be introduced in the experimental section (Section 7). Section 3 introduces the construction of optimized elliptic tubular surfaces for branching lines. Section 4 introduces the fundamental of GBP algorithm in 2D diagrams. Section 5 illustrates how to use GBP to reconstruct real 3D multi-furcation parts. Section 6 describes the refinement for initial GBP model and re-topologization for the model. Section 7 describes the experiments and validations. Section 8 is discussion about GBP modeling. Section 9 summaries the whole thesis and prospects our future work. The flowchart of our work is shown as Fig. 1
                     .

Since our method is shape-based, the skeletal representation for vessels is required. The scalar field of vessel volume is first segmented by using the adaptive multi-scale segmenting method introduced in our previous work [19]. There are three reasons for using this method: the incomplete contrasts between vessel patterns and backgrounds, the limited existing segmenting algorithms which cannot extract vessel volumes completely, and algorithm automaticity.

Note that the histograms of vessel backgrounds in CT images have been proved to comply with Gaussian distribution [19]. The distribution function is obtained from vessel signals segmented from backgrounds by using local optimized thresholds. Then Hessian matrix is employed to enhance the thin blood vessels before segmenting. By combining the major vessels and thin vessels via filtering, the liver vessels can be approximately completely segmented.

The tree-like vessel skeleton is extracted from scalar field of the vessel volume aforementioned. Suppose that we have an initial skeleton which is composed of a number of centerline segments connecting to each other at furcating points. A segment is single-voxel-width and represented as a sequence of continuous center points between two endpoints (furcating points or leaf points). Every center point is attached with an initial radius (local maximum boundary distance) indicating the size of the cross section at that point. One segment is set as root ranking level 0. Others are descendant segments having the ranking levels respectively equal to their depths from root segment.

However, the initial centerline segments are in general aliasing, which would cause difficulties in reconstructing cross-section rings and result in overlaps between adjacent rings. In addition, not all center points are necessary for representing the skeleton. Therefore, three steps are employed to optimize the skeleton:

(1) Fine smoothing segments: Interpolation methods like Hermite require values and derivatives at endpoints and are sensitive to tangents of endpoints. Gaussian smoothing must be carefully applied to different coarse centerline segments otherwise it will cause excessive deviations. By comparison, Catmull-Rom Spline is advantageously an alternative to fit centerlines under the premise in accuracy and preventing deformability. The spline is represented as Eq. (1).
                           
                              (1)
                              
                                 
                                    B
                                    (
                                    
                                       u
                                    
                                    )
                                    =
                                    
                                       
                                          u
                                       
                                       T
                                    
                                    
                                       Mo
                                    
                                 
                              
                           
                        where 
                           u
                         is the parameter vector, 
                           M
                         is the coefficient matrix and 
                           o
                         is the geometric information of control points. We iteratively select four sequential center points as control points, and there are two continuous center points unused between each two adjacent control points. After fitting a curve between the two middle control points, we select two equal-interval points (
                           u
                        
                        =(0.33, 0.66)) on the curve to replace two corresponding unused points. Fig. 2(a) shows a centerline segment with sequential adjacent points, where 
                           P
                        
                        0, 
                           P
                        
                        1, 
                           P
                        
                        2 and 
                           P
                        
                        3 are selected as control points; 
                           Q
                        
                        1 and 
                           Q
                        
                        2 are to be readjusted. Fig. 2(b) shows readjusted 
                           Q
                        
                        1 and 
                           Q
                        
                        2 on the fitted curve between 
                           P
                        
                        1 and 
                           P
                        
                        2.

Note that Catmull-Rom Splines has two characteristics: passing through all control points and having C
                        1 continuity. So any fitted centerline can be smooth enough and have small deviations from actual center positions.

(2) Simplifying centerline segments: In order to avoid irregular meshes caused by overlapping optimized cross-section rings, we eliminate some undesired center points. Specifically, for any segment, its two endpoints are kept as desired points, then start from one of the endpoints and sequentially label its next desired point via Eq. (2).
                           
                              (2)
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                    =
                                    
                                       
                                          arg
                                          max
                                       
                                       
                                          
                                             N
                                             x
                                          
                                          ∈
                                          R
                                       
                                    
                                    
                                       
                                          
                                             
                                                N
                                             
                                             x
                                          
                                          −
                                          
                                             
                                                N
                                             
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           N
                        
                        
                           i
                         is a current desired point, R is the area of a simplifying ball centered at 
                           N
                        
                        
                           i
                        . The radius of R is dynamically set according to the size of the initial radius attached to 
                           N
                        
                        
                           i
                        . 
                           N
                        
                        
                           i+1 represents the next desired center point.

According to application requirements in subsequent sections, the simplified centerlines are first labeled with suffix code and then recombined into branching lines as follow.

(1) The root segment is labeled as L(1). For any current segment labeled as L(x), its child segments are sorted in descending order of averaged initial radii. Then the sorted segments are labeled with IDs from L(x1) to L(xn), where n is the number of child segments (usually not larger than 10). At the same time, the furcating point is labeled with B
                           x
                        .

(2) For L(1) or every non-one-suffix segment L(x), combine it and all its continuous one-suffix descendant segments to constitute a branching line labeled with its ID.


                        Fig. 3(a) shows a sub-tree vessel skeleton with its centerline segments labeled with suffix codes and four furcating points labeled as B1, B11, B111 and B13; Fig. 3(b) and (c) shows corresponding branching lines, where the branching line BL(1) is composed of continuous one-suffix segments including L(1), L(11), L(111) and L(1111) in Fig. 3(a), and BL(13) is composed of L(13) and L(131). But BL(12), BL(112), BL(1112) and BL(132) are L(12), L(112), L(1112) and L(132) respectively because of their no continuous one-suffix descendant segments.

It is possible to use the method introduced by Liao [20] to reconstruct relatively optimized elliptic cross-section contours for branching lines. However, this method is based on the projections of two views of vessel tubes, meaning the projected outlines are not necessary perpendicular to and centered at branching lines. Since we make the assumption that the cross-section contours of any centerline are intrinsically elliptic or circular, we construct cross-section contours, called cross-section rings here, by three steps as follow.

(1) Computing optimized tangent vector and semi axis: For any center point 
                           N
                        
                        
                           i
                         in tubular parts of branching lines, its tangent vector can be obtained by computing the first partial derivatives of Eq. (1). Then back to vessel volume, we set an elliptic plane centered at 
                           N
                        
                        
                           i
                         and perpendicular to the tangent vector. By minimizing the deviation between the actual voxel outline and the fitting plane, i.e., computing Eq. (3), an optimized elliptic plane with semi-major axis a and semi-minor axis b is obtained, as Ring1, Ring2, Ring3 and Ring4 shown in Fig. 4
                        .
                           
                              (3)
                              
                                 
                                    
                                       
                                          (
                                          a
                                          ,
                                          b
                                          )
                                       
                                       
                                          
                                             
                                                N
                                             
                                             i
                                          
                                       
                                    
                                    =
                                    arg
                                    min
                                    
                                       
                                          
                                             ∫
                                             0
                                             
                                                2
                                                π
                                             
                                          
                                          
                                             
                                                
                                                   P
                                                   (
                                                   
                                                      x
                                                      0
                                                   
                                                   +
                                                   a
                                                   ×
                                                   cos
                                                    
                                                   φ
                                                   ,
                                                   
                                                      y
                                                      0
                                                   
                                                   +
                                                   b
                                                   ×
                                                   sin
                                                    
                                                   φ
                                                   )
                                                   −
                                                   
                                                      BV
                                                   
                                                
                                             
                                          
                                          d
                                          φ
                                       
                                    
                                 
                              
                           
                        where x
                        0 and y
                        0 are transformed coordinate components of 
                           N
                        
                        
                           i
                         which is regarded as (0, 0, 0), meaning both x
                        0 and y
                        0 equal 0. 
                           BV
                         is the projection of a point of the actual voxel outline on the elliptic plane with 
                           N
                        
                        
                           i
                         as its coordinate origin and as z axis. In order to reduce computational overheads, we set the semi-major axis a crossing 
                           N
                        
                        
                           i
                         along the direction of maximal width of the actual voxel outline.

For center points in the furcating parts, we keep their original radii unchanged.

(2) Generating optimized cross-section rings: For every center point 
                           N
                        
                        
                           i
                        , we construct an optimized cross-section ring based on its tangent vector and semi axes. The ring is equivalent to the optimized elliptic plane aforementioned but composed of a number of discrete points. Particularly, we generate relatively denser cross-section rings between every two adjacent points near furcating parts by equidistantly inserting center points. The reason for this particularity will be seen in Section 6. As shown in Fig. 4, four elliptic cross-section rings are generated along a centerline, where Ring2 and Ring3 are centered at two interpolated center points 
                           N
                        
                        2 and 
                           N
                        
                        3 respectively.

(3) Checking overlaps: In addition to Section 2.2, overlaps of adjacent cross-section rings would occur due to over dense rings or over bent curvatures of branching lines, as shown in Fig. 5
                        . Overlaps would cause irregular meshes on branching lines. We check if a current ring 
                           Ring
                        
                        
                           i
                         has overlap with its next adjacent 
                           Ring
                        
                        
                           i+1 in this way: If all discrete points of 
                           Ring
                        
                        
                           i+1 lie at 
                           Ring
                        
                        
                           i
                        's upper side (the direction of tangent vector of 
                           Ring
                        
                        
                           i
                        ), 
                           Ring
                        
                        
                           i
                         has no overlap with 
                           Ring
                        
                        
                           i+1, otherwise 
                           Ring
                        
                        
                           i+1 intersects 
                           Ring
                        
                        
                           i
                         and 
                           Ring
                        
                        
                           i+1 should be eliminated. Suppose 
                           Q
                         is an arbitrary discrete point of 
                           Ring
                        
                        
                           i+1, then the overlap condition is formulized as Eq. (4).
                           
                              (4)
                              
                                 
                                    a
                                    (
                                    
                                       x
                                       Q
                                    
                                    −
                                    
                                       x
                                       1
                                    
                                    )
                                    +
                                    b
                                    (
                                    
                                       y
                                       Q
                                    
                                    −
                                    
                                       y
                                       1
                                    
                                    )
                                    +
                                    c
                                    (
                                    
                                       z
                                       Q
                                    
                                    −
                                    
                                       z
                                       1
                                    
                                    )
                                    ≤
                                    0
                                 
                              
                           
                        where a, b and c are three indices of the tangent vector of 
                           N
                        
                        
                           i
                        ; x
                        1, y
                        1 and z
                        1 are indices of 
                           N
                        
                        
                           i
                        ; x
                        Q, y
                        Q and z
                        Q are indices of 
                           Q
                        .

For any two adjacent cross-section rings Ring
                        
                           i
                         and Ring
                        
                           i+1 centered at 
                           N
                        
                        
                           i
                         and 
                           N
                        
                        
                           i+1 respectively, we weave mesh with triangular facets to construct tubular surface between them. In order to generate regular edges of facets, it is necessary to pair the points of Ring
                        
                           i
                         with that of Ring
                        
                           i+1. The weaving includes four steps (Fig. 6
                        ):
                           
                              (1)
                              Backup the two rings, then normalize them so that they have radii of one unit length, as shown from Fig. 5(a) and (b).

Arbitrarily select one point 
                                    P
                                  from Ring
                                 
                                    i
                                  and find an optimized point 
                                    Q
                                  from Ring
                                 
                                    i+1, so that there is a smallest angle between 
                                    
                                       
                                          
                                             P
                                             Q
                                          
                                          →
                                       
                                    
                                  and 
                                    
                                       
                                          
                                             
                                                N
                                                i
                                             
                                             
                                                N
                                                
                                                   i
                                                   +
                                                   1
                                                
                                             
                                          
                                          →
                                       
                                    
                                 , as shown in Fig. 5(b).

Back to the two backup rings, start from corresponding 
                                    P
                                  and 
                                    Q
                                  to weave mesh between the two rings with triangular facets having three counterclockwise half-edges [21] until 
                                    P
                                  and 
                                    Q
                                  are reencountered, as shown in Fig. 5(c).

Finally, attach the woven facets with the IDs of the two rings, i.e., the currently generated facets belong to the two rings.

For simplicity, suppose that there is a 2D (two-dimensional) plane called Main Plane (MPb) composed of a number of triangular facets connecting with each other by half-edges. On MP there are a number of exclusive circles (ECc) intersecting with each other. Note that MP is surface-circulating, i.e., the borders of MP are shared with each other. There are two main purposes:
                           
                              (1)
                              The inner area of any EC should be keep non-geometry after having been plugged on MP;

All the plugged ECs should have closed geometric relationship with each other and with MP.

It is the motivation and philosophy of our GBP to effectively achieve the above purposes. As shown in Fig. 7
                        , GBP includes five steps. Fig. 8
                         shows an example case where three intersecting ECs are plugged on a MP. The illustrated processes of GBP will be based on this example case for simplicity.

The removal here means that the intersecting parts of ECs and MP are eliminated. Such intersecting parts are called redundancies. As shown in Fig. 8, after the removal of Fig. 8(a), gaps between ECs and ECs and between ECs and MP are yielded, as shown in Fig. 8(b).

All ECs and MP have their own borders having end-to-end connectivity. Such borders are called border circles (BCd). Fig. 7(b) shows four BCs, i.e. BC0, BC1, BC2 and BC3, which are extracted from MP, EC1, EC2 and EC3 respectively after removing redundancies.

A turning point (TP
                           e) refers to such a point that has at least two opposite ECs. A TP means the start of one border segment (BSf) and the end of another at a same BC. As shown in Fig. 9(a), there are totally 12 turning points labeled from TP
                           
                              1
                            to TP
                           
                              12
                            with each BC having three of them. Taking TP
                           
                              1
                            as an example, it has two opposite ECs, namely EC1 and EC2, so it is a turning point. Other TPs are found in similar way.

A turning triangle (TT
                           
                              g
                           ) is such a triangular facet that is constituted by three TPs having anisotropic-opposite relationship. Note that the counterclockwise direction of BC
                              0
                            on MP is visually clockwise. Take TP
                           
                              1
                            and TP
                           
                              2
                            in Fig. 9(a) and (b) as example, the border segment (the red arc between TP
                           
                              1
                            and TP
                           
                              11
                           ) pre-connecting TP
                           
                              1
                            on MP has opposite EC2 and the post-connecting segment (the red arc between TP
                           
                              1
                            and TP
                           
                              8
                           ) of TP
                           
                              1
                            has opposite EC
                           
                              1
                           ; While the segment (the green arc between TP
                           
                              2
                            and TP
                           
                              4
                           ) pre-connecting TP
                           
                              2
                            has opposite EC
                           1 and the post-connecting segment(the green arc between TP
                           
                              2
                            and TP
                           
                              10
                           ) of TP
                           
                              2
                            has an opposite EC equivalent to MP, so there exits an anisotropic-opposite relationship from TP
                           
                              1
                            to TP
                           
                              2
                           , but not from TP
                           
                              2
                            to TP
                           
                              1
                           , so does from TP
                           
                              2
                            to TP
                           
                              3
                           . According to such sequential relationships, TP
                           
                              1
                           , TP
                           
                              2
                            and TP
                           
                              3
                            constitute a counterclockwise TT, namely 
                              
                                 
                                    Δ
                                 
                                 
                                    TP
                                    1
                                 
                                 
                                    TP
                                    2
                                 
                                 
                                    TP
                                    3
                                 
                              
                           . While other three TTs rendered blue in Fig. 9(b) are generated in the same way.

Any two BSs opposite to one another can be paired according to the anisotropic-opposite relationships of TTs. As shown in Fig. 10
                           , the BS from TP
                           2 to TP
                           10 and that from TP
                           1 to TP
                           11 are paired from two endpoints TP
                           1 and TP
                           2 having sequential anisotropic-opposite relationship in 
                              
                                 
                                    Δ
                                 
                                 
                                    TP
                                    1
                                 
                                 
                                    TP
                                    2
                                 
                                 
                                    TP
                                    3
                                 
                              
                           . Other BSs are paired in the same way. At this point, the two purposes aforementioned are achieved.


                        Case 1: Ambiguous TP
                     

An ambiguous TP means that it doubles another implied turning point, i.e., it has more than two opposite ECs. As shown in Fig. 11(a), TP
                        5 is ambiguous because it belongs to two TTs, of which one is constituted by TP
                        4, TP
                        5, TP
                        6 and the other by TP
                        5, TP
                        10, TP
                        11. In order to maintain the unity of geometric topology, TP
                        5 is split into two, as shown in Fig. 11(b), of which one belongs to the first TT constituted by TP
                        4, TP
                        5, TP
                        6 and the other belongs to an equivalent TT including TP
                        12 (post adjacent point of TP
                        5), TP
                        10, TP
                        11.


                        Case 2: Broken MP

MP could be broken into two sides due to the excessive intersection of ECs. As shown in Fig. 12
                        (a), EC1 and EC2 have an over intersection with each other on MP, resulting in broken mesh of MP. However, the gap in upper dotted rectangle is consistent with that in lower dotted rectangle because MP is surface-circulating as noted before. As shown in Fig. 12(b) and (c), there are six TPs found (two 
                           TP
                        
                        15 and two 
                           TP
                        
                        17 are visually duplicated), thus two TTs are generated according to their anisotropic-opposite relationships.

After reconstructing tubular meshes for branching lines, the meshes near multi-furcation parts have irregular intersections with each other. As a 3-furcation shown in Fig. 13(a), the surface of any one of the branching lines has no relationship with others’, which is irregular in terms of computational geometry, thus it is necessary to merge surfaces of all branching lines into a regular and closed one. The merging is exactly what GBP can efficiently and robustly apply to. For simplicity, we use simulated 3D data (the 3-furcation in Fig. 13) to illustrate 3D GBP in this section. The real data will be used in the experimental section.

In order to reduce computational overheads, every furcating part to be reconstructed is cut off. Given a multi-furcation cut off, we can geometrically see it as a transformation of a 2D diagram via projection. Fig. 13(a)–(d) shows the projecting procedures of the 3-furcation in this way: Take BL(i) with maximum average semi-axis as main branching line, cut through its surface along the centerline, unfold it and project it as MP (see in Fig. 13(d)); Then BL(i2) and BL(i3) taken as EC1 and EC2 respectively are plugged on MP. Obviously, it is feasible to implement GBP on 3D multi-furcations.

The tubular surface of any branching line is constructed by weaving adjacent cross-section rings with counterclockwise triangular facets, and we assume that any two adjacent cross-section rings have approximately equal semi-axes, so any two rings forms an equivalent cylinder whose radius equals half the sum of the two rings’ semi-major axes. As shown in Fig. 14(a) and (b), we decide whether a point 
                              P
                            is encapsulated in an equivalent cylinder constituted by adjacent Cud1 and Cud2 by checking Eq. (5).
                              
                                 (5)
                                 
                                    
                                       P
                                       =
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         encapsulated
                                                         |
                                                         ∠
                                                         P
                                                         
                                                            O
                                                            1
                                                         
                                                         H
                                                         ≤
                                                         90
                                                         ,
                                                         ∠
                                                         P
                                                         
                                                            O
                                                            2
                                                         
                                                         H
                                                         ≤
                                                         90
                                                         ,
                                                         
                                                            
                                                               P
                                                               H
                                                            
                                                         
                                                         ≤
                                                         (
                                                         
                                                            a
                                                            1
                                                         
                                                         +
                                                         
                                                            a
                                                            2
                                                         
                                                         )
                                                         /
                                                         2
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         non-encapsulated
                                                         |
                                                         others
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

If all equivalent cylinders of all branches do not encapsulate 
                              P
                           , 
                              P
                            is not redundant. Otherwise 
                              P
                            is redundant, so are the half-edges and facets that contain 
                              P
                           . If P is redundant, three labeling operations are performed:
                              
                                 (1)
                                 Label non-redundant points as border points if they are adjacent to 
                                       P
                                     and attach them with IDs of the opposite branching lines (equivalent to opposite ECs) that cause them to become border points;

Label half-edges as border half-edges if they are not redundant but their opposite half-edges are redundant;

Label any facet as border facet if it is not redundant but has at least one border half-edge.

As shown in Fig. 15
                           , after removing redundancies, the border points rendered red and the border facets rendered green are located along both sides of gaps.

For any branching surface with redundancies removed, its BC can be fast extracted from its border facets based on the counterclockwise properties of half-edges of those facets. Specifically, we arbitrarily select a border point 
                              V
                           
                           
                              x
                           , start from it and select its next adjacent border point 
                              V
                           
                           
                              x+1 via directional border half-edges of the border facet including 
                              V
                           
                           
                              x
                           ; then restart from 
                              V
                           
                           
                              x+1 and select second next 
                              V
                           
                           
                              x+2; by iteratively selecting the next adjacent border point in this way until 
                              V
                           
                           
                              x
                            is reencountered. As shown in Fig. 16(a), a BC represented as (
                              V
                           
                           
                              i,1, 
                              V
                           
                           
                              i,2, 
                              V
                           
                           
                              i,3, …, 
                              V
                           
                           
                              i,1) running visually clockwise (but geometrically counterclockwise as with half-edges) is extracted on BL(i); and (
                              V
                           
                           
                              i2,1, 
                              V
                           
                           
                              i2,2, 
                              V
                           
                           
                              i2,3, …, 
                              V
                           
                           
                              i2,1) and (
                              V
                           
                           
                              i3,1, 
                              V
                           
                           
                              i3,2, 
                              V
                           
                           
                              i3,3, …, 
                              V
                           
                           
                              i3,1) are extracted on BL(i2) and BL(i3) respectively.

If a border point has two (not greater than 2 in general) opposite branching lines, it is a turning point. As show in Fig. 17(a), 
                              TP
                           
                           1 on BL(i) is label as turning point because it has two opposite branching lines BL(i2) and BL(i3), and so is 
                              TP
                           
                           4; two turning points (
                              TP
                           
                           2 and 
                              TP
                           
                           6) are located at the BC of BL(i2); The last two (
                              TP
                           
                           3 and 
                              TP
                           
                           5) are located at the BC of BL(i3).

In 3D case, we can generate turning triangles as with 2D case (Section 4) without any further modification. However, in order to maintain the geometric validity, all half-edges of any TT must be in counterclockwise direction according to the sequential anisotropic-opposite relationships of its three 
                              TP
                           s. As shown in Fig. 17(a), two TTs (
                              
                                 
                                    Δ
                                 
                                 
                                    TP
                                    1
                                 
                                 
                                    TP
                                    2
                                 
                                 
                                    TP
                                    3
                                 
                              
                            and 
                              
                                 
                                    Δ
                                 
                                 
                                    TP
                                    4
                                 
                                 
                                    TP
                                    5
                                 
                                 
                                    TP
                                    6
                                 
                              
                           ) are generated based on sequential anisotropic-opposite relationships of six 
                              TP
                           s.

As in 2D case, we pair BSs that are opposite to one another according to sequential anisotropic-opposite relationship of TTs. As shown in Fig. 17(b), the gap between 
                              TP
                           
                           2, 
                              TP
                           
                           3, 
                              TP
                           
                           5 and 
                              TP
                           
                           6 can be mended according to the relationships from 
                              TP
                           
                           2 to 
                              TP
                           
                           3 and from 
                              TP
                           
                           5 to 
                              TP
                           
                           6. In the same way, other two gaps can be mended, as shown in Fig. 17(c) and (d).

As shown in Fig. 18(a), it is possible that the BL(i) (see MP in Case 2 in 4.2 Abnormal cases) is broken into two due to redundancy removal on over intersection of branching surfaces. But without any exception, the abnormal 4-furcation can still be projected into a 2D diagram where the minor branching lines taken as ECs are plugged on MP normally. After removing redundancies, the gaps have surface-circulating properties, thus the mending facets (see in Fig. 18(b)) including six TTs and paired facets are generated regularly by GBP. The abnormal 4-furcation is reconstructed as with normal cases, as shown in Fig. 18(c).

For any multi-furcation, the more densely cross-section rings are generated, the more accurate and effective GBP would be. But too dense cross-section rings will cause overlaps, thus the number of interpolated cross-section rings cannot be too large. However, any reconstructed multi-furcation based on relatively sparse cross-section rings may still be coarse and requires refinement.

Since the initial GBP model matches up to a standard CGAL polyhedron and has some smoothness on its surface, we use subdivision methods to refine it, which can be used to subdivide and refine an irregular surface to a regular one. Considering that our model is based on counterclockwise triangular facets, we apply a customized subdivision method based on Sqrt-3 [22] to refine GBP model for just one time, making the model have good smoothness. Meanwhile the time used for subdivision can be greatly reduced.

Topological properties of GBP model after refinement need to be re-maintained to provide hierarchical classification. For simplicity, as shown in Fig. 19
                        , Fig. 19(a) is an original mesh containing two parts split by the middle dash line. The points including 
                           P
                         on the left and those including 
                           Q
                         on right belong to L1 and L2 respectively. For each original facet after one time subdivision (see in Fig. 19(b)), a new vertex (red point) is inserted into it and connected to all its original vertices with half-edges (red edges), then all its original half-edges are flipped. Based on such relationship between new vertices and original ones, it is very easy to classify new facets to either L1 or L2 by checking which original vertices the facets are adjacent to. Take 
                           
                              
                                 Δ
                              
                              
                                 PV
                                 1
                              
                              
                                 V
                                 2
                              
                           
                         as example, it belongs to L1 because of its connection to 
                           P
                        ; and 
                           
                              
                                 Δ
                              
                              
                                 PV
                                 
                                    10
                                 
                              
                              
                                 V
                                 9
                              
                           
                         belongs to L2 because of its connection to 
                           Q
                        .

We used a series of CT images of portal vein provided by Third Military Medical University as the experimental materials. These images were identified by related medical experts and measured up to medical standard. The CT volume of the images was 512×512×216; the thickness of one slice was 0.6mm. The work was implemented with the help of VC++2008, Opengl2.0 and CGAL3.7. The computer configurations were Core T6400 2.00GHz, SKhynix DDR2 2GB and Nvidia GeForce 9600M GS (512MB). The operating system was Windows 7.

The experiment processes were performed from segmenting vessel volume from CT images, to extracting tree-like skeleton from vessel volume, to preprocessing and recombining skeleton centerline segments, to constructing tubular meshes for branching lines based on cross-section rings, to reconstructing all multi-furcation parts via GBP, to refining model and to re-maintaining surface topologies.

The scalar fields of vessel volume were first extracted from segmented liver volume based on the adaptive multi-scale segmentation (Section 2.1). As shown in Fig. 20
                        , three image samples were processed in orders from segmenting liver to extracting vessels. Fig. 20(a), (d) and (g) were the original CT images; Fig. 20(b), (e) and (h) were the segmented liver patterns with their background eliminated; Fig. 20(c), (f) and (i) were the extracted liver vessel sections.

Then an original tree-like skeleton attached with initial radii at each center point was extracted by using DBF [23]. The follow-up processes including checking graphs, deleting loops and setting root segment were performed sequentially. The skeleton had totally 327 nodes, 326 centerline segments and a volume of about 62,839mm3. Note that the segmented volume was also identified as qualified by related medical experts under the conditions of standard hepatic vessels.

As illustrated in Section 2, we fine smoothed the skeleton and simplified all segments according to the Eq. (2), where the radius of simplifying ball was dynamically set in range from 2.0mm to 3.16mm. Then all segments were recombined into branching lines by connecting all segments having sequentially one-suffix from furcating nodes to leave nodes. Unlike the assumption [16] that for any furcating part, relatively largest-radii branch is longest, any of our recombined branching lines has actually largest average radii (semi-axes) at all its furcating parts but it is not necessary longest. We got totally 163 branching lines. Fig. 21(a) shows the original scalar volume of portal vein, and Fig. 21(b) was corresponding preprocessed tree-like skeleton extracted from the volume.

As mentioned in Section 3, cross-section rings encircling branching lines were generated according to tangent vectors of center points and corresponding semi axes. For any segment connecting to furcating point, we inserted a number of center points by equidistant interpolation to generate more dense rings. Overlaps between adjacent cross-section rings were checked and eliminated according to Eq. (4). Then we constructed tubular mesh for each branching line by weaving adjacent rings with triangular facets. GBP method was used to merge meshes of all multi-furcations, generating an initial surface model with approximately good shape. The model required just one time subdivision to be refined. Finally, we re-maintained the surface topologies according to Section 6.


                        Fig. 22
                         showed two separate 2-furcations with their branching surface reconstructed. The GBP was illustrated in sequential orders from Fig. 22(a)–(f). Specifically, Fig. 22(a) was the original hard intersecting surface; Fig. 22(b) was corresponding redundancy-removed model; Fig. 22(c) shows the border triangular facets found along the gap borders; Fig. 22(d) shows the gaps paired with triangular facets; Fig. 22(e) was the result of one time subdivision; and Fig. 22(f) shows the surface topologies re-maintained according to branching lines after subdivision. Since there were less than three branching surfaces intersecting with each other, so no TTs were generated. For particular cases where adjacent multi-furcations got too close to each other, we recombined them as one multi-furcation which had no negative impact on GBP. Fig. 23(a)–(g) shows such a recombined 5-furcation which was reconstructed in much the same way Fig. 22(a)–(f) shows. However, since there exited more than three branching surfaces intersecting with each other, TTs (see in Fig. 23(d)) were generated after extracting border triangular facets (see in Fig. 23(c)), with two of them were shaded in the back side of the furcation.

As shown in Fig. 24(a)–(i), a sub-tree model of portal vein was reconstructed in sequential steps of GBP. Fig. 24(a) shows the original scalar field of vessel volume. The tree-like skeleton (see in Fig. 24(b)) was extracted and converted to an adaptive one by preprocesses; then based on it the tubular surfaces of the skeleton were generated. Fig. 24(f) shows two redundancy-removed 3-furcations with TTs generated. Note that the surface topologies (seen in Fig. 24(i)) were based on branching lines too here. Since all multi-furcations of the skeleton were cut off and each of them was reconstructed independently, GBP can be carried out in parallel processes, giving large space to accelerate algorithm's running speed.

In order to illustrate the effects when GBP was carried out in the cases where deep-hierarchy branches had narrow tubes, we thinned four sub-tree volumes by pilling off their boundary voxels and reconstructed their surfaces by using GBP. Fig. 25(a)–(d) shows the four adaptive preprocessed skeletons corresponding to one branching line with 16 centerline segments, 8 branching lines with 30 segments, 26 branching lines with 60 segments and 50 branching lines with 100 segments respectively; Fig. 25(e)–(h) shows corresponding surface models by GBP, while differently colored tubular surfaces represented different branching lines in topological orders. GBP was normatively carried out and the models by it were true to nature even though the sizes of tubes were small.

Since surfaces of branching lines were re-maintained with hierarchical topologies and all facets were attached with IDs of corresponding cross-section rings, it was very convenient to further topologize GBP models according to hierarchical levels of tree-like skeletons.


                        Fig. 26
                         shows surface models for a same segmented volume by different modeling methods; Fig. 26(a) was the result by shape-free method based on the notion of restricted Delaunay triangulation [9] (Marching Cubes); Fig. 26(b) was the result of Fig. 26(a) based on smoothing-constrained method (Marching Cubes with smoothing operations); Fig. 26(c) was the result by GBP. Note that again our GBP model was refined by just one time subdivision. Obviously, whether the models by Marching Cubes were smoothed or not, their surface meshes would still be some coarse due to noisy boundary voxels. Such irregularities were responsible for the topological variations in narrow tubes. Contrarily, our model was based on the skeletal centerlines and optimized elliptic cross-section rings, so it was much more realistic and smooth.

In Fig. 27
                        , we used a traditional shape-based method, like [15,16] to reconstruct a quad-furcation (Fig. 27(a) and (b)). The method required checking on surface interactions one branch by one instead of taking all branches as a whole. The number of selected contour points for each cross-section contour could not be too large otherwise it was difficult to graft new branches into the already grafted ones. We selected four points for each contour. Fig. 27(c) shows the initial model. Fig. 27(d) shows the one-time-subdivision model of Fig. 27(c); the three-time-subdivision model is shown in Fig. 27(e) and (f). Then we used GBP method to reconstruct the same furcation in sequential processes, as shown from Fig. 27(g)–(j).

From Fig. 27(c), we saw that the initial shape based on the traditional method had intrinsic roughness. And it was reasonable to assume that there were endless choices of selections for contour points and each choice led to a differently rough initial shape. Even though such roughness could be smoothed by Catmull Clark-like methods [24], the initial model required subdivision for more than three times before it was acceptable in visual. Meanwhile, if no constraints were set, the refined model would be severely contracted when compared with its original contours, as shown in Fig. 27(f). In addition, if branches of a multi-furcation had intersections with each other, the branches to be grafted had great impact on the already grafted ones. That was to say, the facets of the already grafted branches were required to be checked again and possibly eliminated when grafting new branches, causing unnecessarily repetitive computation. Fig. 27(g) shows the corresponding initial model based on GBP. In GBP, optimized cross-section rings were used to construct surfaces, thus the model required just one-time subdivision to be refined, as shown from Fig. 27(h) and (i). There existed very small deviations between the refined model and original contours, as shown in Fig. 27(j). Meanwhile, the time used for subdivision could be greatly reduced.

In order to verify the accuracies of GBP model, the validations were divided into two parts: multi-furcation validation and tubular-part validation.

Since our vessel model was based on optimized cross-section rings to reconstruct surfaces for branching lines, we laid stress on the measurements for surfaces of multi-furcations. We selected a number of key multi-furcation points 
                              
                                 (
                                 
                                    
                                       P
                                    
                                    k
                                    h
                                 
                                 )
                              
                           , and for each 
                              P
                           
                           k we computed the boundary deviation (
                              
                                 
                                    D
                                    a
                                    i
                                 
                              
                           ) between segmented volume and reconstructed surface (GBP model), i.e., computed Eq. (6) based on four customized and non-coplanar directions crossing 
                              P
                           
                           k.
                              
                                 (6)
                                 
                                    
                                       
                                          D
                                          a
                                       
                                       (
                                       
                                          
                                             P
                                          
                                          k
                                       
                                       )
                                       =
                                       
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                4
                                             
                                             
                                                (
                                                
                                                   
                                                      
                                                         
                                                            V
                                                         
                                                         
                                                            v
                                                            ,
                                                            0
                                                         
                                                      
                                                      (
                                                      i
                                                      )
                                                      −
                                                      
                                                         
                                                            V
                                                         
                                                         
                                                            s
                                                            ,
                                                            0
                                                         
                                                      
                                                      (
                                                      i
                                                      )
                                                   
                                                
                                                +
                                                
                                                   
                                                      
                                                         
                                                            V
                                                         
                                                         
                                                            v
                                                            ,
                                                            1
                                                         
                                                      
                                                      (
                                                      i
                                                      )
                                                      −
                                                      
                                                         
                                                            V
                                                         
                                                         
                                                            s
                                                            ,
                                                            1
                                                         
                                                      
                                                      (
                                                      i
                                                      )
                                                   
                                                
                                                )
                                             
                                          
                                          8
                                       
                                    
                                 
                              
                           where 
                              V
                           
                           v,0(i) and 
                              V
                           
                           s,0(i) respectively represented boundary voxel point and surface point at front end of the ith direction, while 
                              V
                           
                           v,1(i) and 
                              V
                           
                           s,1(i) respectively represented the corresponding points at back end of the ith direction; D
                           a(
                              P
                           
                           k) was the absolute boundary deviation of 
                              P
                           
                           k. We compared D
                           a(
                              P
                           
                           k) with the sum of semi-major axis and semi-minor axis of current cross-section ring to get relative boundary deviation (
                              
                                 
                                    D
                                    r
                                    j
                                 
                              
                           ), formulized as Eq. (7).
                              
                                 (7)
                                 
                                    
                                       
                                          D
                                          r
                                       
                                       (
                                       
                                          P
                                          k
                                       
                                       )
                                       =
                                       
                                          
                                             
                                                D
                                                a
                                             
                                             (
                                             
                                                P
                                                k
                                             
                                             )
                                          
                                          
                                             (
                                             a
                                             +
                                             b
                                             )
                                          
                                       
                                       ×
                                       100
                                       %
                                    
                                 
                              
                           where a and b represented semi-major axis and semi-minor axis respectively. We used five reconstruction stages with different number of 
                              P
                           
                           ks to do quantitative measurements for furcating parts, and to compute average absolute deviations and average relative deviations. As shown in Table 1
                           , the deviations were measured in the unit of millimeter. The last two columns showed that under the condition of approximately equal visual effects, GBP method required less time for refining, about a quarter of that used by cuboid method.

The boundary deviations of tubular parts were computed in the same way as furcating parts. The only differences were that the four customized directions were coplanar at cross-section rings and that for each branching line, we computed D
                           as and D
                           rs for all center points. Table 2
                            showed deviations respectively corresponding to one branching line with 16 segments, 8 branching lines with 30 segments, 26 branching lines with 60 segments and 50 branching lines with 100 segments. Because all facets of the whole model were intrinsically distributed in branching lines, i.e., the facets of furcating parts belong to branching lines, the storages for GBP model equaled to the storages for all branching lines.

From Tables 1 and 2, we concluded that the deviations of tubular parts were in general smaller than those of multi-furcation parts due to intrinsic complexity of multi-furcation parts. However, all deviations of both multi-furcation parts and tubular parts were small enough in an acceptable range (smaller than 7%), so our GBP model was accurate enough, embodying clinical significance. In addition, the storage requirements were proportional to the numbers of facets, which were also smaller than an acceptably approximate ratio (about 16KB/segment on average).

One problem was that parts of branching lines had irregular curvatures and semi axes due to rough volume boundaries with aliasing and terracing components. As shown in Fig. 28(a), irregular volume would cause difficulties in finding optimized semi axes to construct optimized cross-section rings.

Another tough problem was the abnormal multi-furcation parts with more than three branching lines where the over narrow branches were eaten up by relatively larger ones, as shown in Fig. 28(b). This would cause the borders of narrow branching surface to have only one opposite branch line after removing redundancies, namely, to have no turning points, so the gaps on such furcation would be hard to be mended. By repeatedly checking and contrasting, the cause to this problem was that the average semi axes of small branches were much smaller than their actual values. So it was very necessary to further improve the segmenting methods, yielding more complete vessel volumes.

@&#DISCUSSION@&#

Coarse surfaces are always generated by model-free methods due to their high sensitivity to distributions of intrinsically coarse boundary voxels. Though these methods are perfectly improved, limited contrasts of the medical images by CT or MRI are still troublesome to be handled. Therefore, model-free methods cannot provide intrinsically smooth shapes of liver vessels, as well as the vessels in other types of organs. In addition, these methods take any vessel volume as a whole but not further facilitate it with high-level information such as segment hierarchies, radii of centerlines and trends of vessel tubes. Thus we need a complete kind of modeling methods: the shape-based methods.

However, traditional shape-based methods such as [14–16], do not lay enough stresses on how to robustly and regularly reconstruct complicated multi-furcation parts. It is obvious that they might have left out some geometric regularities of surface meshes based on half edges. They have probable disadvantages as follow:
                        
                           (1)
                           High sensitivity to the conditions of multi-furcation parts whether branching surfaces intersect each other and to the angles between branching directions. Different choices of contour points selected for constructing tubular surfaces will lead to different initial coarse shapes at furcating parts.

Initial models are particularly coarse and require surface subdivision for many times. However, more subdivisions means greater variations like contraction or dilation caused on refined models.

If the branches of any furcation intersect with each other, unnecessary computational overheads are inevitable because facets of the already grafted branches are needed to be checked again and probably eliminated for new branches to be grafted.

The variation-caused smoothing methods like Gaussian g(x, δ) in [16] used by them to smooth vessel skeletons will cause centerlines to severely deviate from actual center positions, even to run out of the vascular volume.

In GBP, we use optimized semi axes and tangent vectors to reconstruct surface meshes for all branching lines by weaving adjacent cross-section rings. The branching lines are previously smoothed by Catmull-Rom Splines, leading to small deviations from their actual center positions. Therefore, GBP is more efficient and accurate than the traditional methods in terms of achieving mesh smoothness at initial stages. GBP takes full advantages of the regularly geometric properties of counterclockwise triangular facets. Specifically, it takes advantage of directional half-edges of counterclockwise triangular facets to extract gab borders, check turning points, generate turning triangles, pair border segments and mend the gaps. These directional half-edges led to the anisotropic-opposite relationship mentioned in Section 4.1.4. These mean that we can use GBP to regularly construct any multi-furcation part without considering too much about the conditions of branching surfaces. After reconstructing all multi-furcation parts, the meshes of all branching lines are merged into a close surface mesh, namely, an initial model. The model requires just one time subdivision to be refined in visual because of its already approximate smoothness. Finally, by checking the relationships between original vertices and new generated facets (by subdivision), we can re-maintain the topologies of refined model as with a vessel tree, achieving a model of high editability. The boundary deviations including D
                     as and D
                     rs are in an acceptable range. GBP can be successfully performed on all multi-furcation parts of liver vessels except for some abnormal cases mentioned in Section 7.5.

Overall, the main advantages of GBP method are:
                        
                           (a)
                           Effectively and robustly reconstruct various kinds of multi-furcation parts without considering what the conditions of branching surfaces are;

Approximately smooth initial models require just one time subdivision to be refined, obviously reducing computational overheads and storages;

Take all branching surfaces of any multi-furcation part as a whole, yielding a regular initial model and avoiding unnecessarily repeated checking and eliminating;

Based on very-small-deviation smoothed branching lines and optimized elliptic cross-section rings, providing highly accurate models.

Since multi-furcation parts are cut off and each of them is reconstructed independently, it is definitely possible to parallelized GBP as with [25], giving large space to accelerate the computation.

3D model reconstructions for blood vessels have great significances in clinical applications like therapy planning, virtual surgery, radiotherapy and medical trainings. In order to solve the problems caused by complicated multi-furcation parts, tubes of small radii and over subdivisions, we introduced the GBP method which is based on tree-like skeletons and cross-section rings, displaying great advantages on reconstructing vessels with complicated furcations. Firstly, for tubular parts of vessels, surface meshes can be easily generated by weaving adjacent cross-section rings with triangular facets. Secondly, for the multi-furcation parts, GBP takes full advantages of the regular geometric properties of counterclockwise triangular facets, making it easy to remove redundancies, find gap borders and turning points, generate turning triangles and pair gap borders. Finally, the model is refined by just one time subdivision. The surface topologies of refined model can be re-maintained by checking the connectivity between new facets and original vertices. The experiments show that the boundary deviations between the model by GBP and segmented volume are in an acceptable range. GBP method reduces unnecessary computational overheads when compared with others. And therefore it is considered effective and robust.

Our future works are classified into four categories:
                        
                           (1)
                           To improve the image segmentation methods to get more accurate segmented vessel volumes;

As with [25], we will take advantage of GPU to parallelized GBP;

Though it is reliable to use elliptic cross-section rings as tubular contours, exceptions will exist in some clinical cases where patients have vessel diseases with severe stenosis. Therefore, converting GBP models into deformable ones, like [26] adaptive to different kinds of vessels whether having diseases or not, is required;

To employ GBP to other types of applications like beating vessel models and computational fluid dynamics.

@&#ACKNOWLEDGEMENTS@&#

This work is sponsored by the Major Program of National Natural Science Foundation of China (No. 61190122) and National Key Technology R&D Program of China (No. 2012BAI06B01). The materials used in our work were provided by Third Military University, Chongqing, China. Some related medical knowledge was provided by Hepatobiliary Surgery of Beijing 301 Hospital, China.

@&#REFERENCES@&#

