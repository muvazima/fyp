@&#MAIN-TITLE@&#A MIP-based approach to solve the prize-collecting local access network design problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We have addressed a new variant of the local access network design problem.


                        
                        
                           
                           The telecom company fixes a fraction of customer prizes that should be served.


                        
                        
                           
                           It is a matheuristic to decide the customers to serve and the network to build.


                        
                        
                           
                           The approach solves instances with up to 86,000 nodes and 116,000 edges.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Network loading

Local access

Prize-collecting

Matheuristic algorithm

@&#ABSTRACT@&#


               
               
                  This paper presents a new combinatorial optimization problem that can be used to model the deployment of broadband telecommunications systems in which optical fiber cables are installed between a central office and a number of end-customers. In this capacitated network design problem the installation of optical fiber cables with sufficient capacity is required to carry the traffic from the central office to the end-customers at minimum cost. In the situation motivating this research the network does not necessarily need to connect all customers (or at least not with the best available technology). Instead, some nodes are potential customers. The aim is to select the customers to be connected to the central server and to choose the cable capacities to establish these connections. The telecom company takes the strategic decision of fixing a percentage of customers that should be served, and aims for minimizing the total cost of the network providing this minimum service. For that reason the underlying problem is called the Prize-Collecting Local Access Network Design problem (PC-LAN).
                  We propose a branch-and-cut approach for solving small instances. For large instances of practical importance, our approach turns into a mixed integer programming (MIP) based heuristic procedure which combines the cutting-plane algorithm with a multi-start heuristic algorithm. The multi-start heuristic algorithm starts with fractional values of the LP-solutions and creates feasible solutions that are later improved using a local improvement strategy.
                  Computational experiments are conducted on small instances from the literature. In addition, we introduce a new benchmark set of real-world instances with up to 86,000 nodes, 116,000 edges and 1500 potential customers. Using our MIP-based approach we are able to solve most of the small instances to proven optimality. For more difficult instances, we are not only able to provide high-quality feasible solutions, but also to provide certificate on their quality by calculating lower bounds to the optimal solution values.
               
            

@&#INTRODUCTION@&#

Providing future-proof broadband Internet connections is currently a major infrastructural issue worldwide. More and more information is shared across the Internet and demand for higher data rates increases with new services. The Digital Agenda for Europe
                     
                        1
                        
                           Digital Agenda (May 2010), http://europa.eu/rapid/pressReleasesAction.do?reference=IP/10/581.
                     
                     
                        1
                      of the European Commission stresses the importance of information and communications technologies and states that “Half of European productivity growth over the past 15years was already driven by information and communications technologies [...] and this trend is likely to accelerate.” It issues the goal of achieving “internet speeds of 30megabit per second or above for all European citizens, with half European households subscribing to connections of 100megabit per second or higher” by the year 2020. The German government decided to place strong emphasis on the expansion of broadband communications in one of its latest economic stimulus packages.
                        2
                        
                           Breitbandstrategie der Bundesregierung (February 2009), http://www.zukunft-breitband.de/BBA/Navigation/Service/publikationen,sdid=290026.html.
                     
                     
                        2
                      The rather challenging aim, formulated in 2009, is to provide 75% of all households nationwide with 50megabit per second connections by the end of 2014. Reaching this goal is only possible by rolling-out the fiber-optic access networks on a broad scale.

In telecommunication network planning, customer nodes are associated to physical locations representing buildings, business locations or single households. The following strategies (known under a common name FTTx) are used for the development of access networks:
                        
                           •
                           
                              Fiber-To-The-Curb (FTTC) (or Fiber-To-The-Node, FTTN): Part of the connection from central offices to customers consists of optical fibers, but end-transmission lines are still made of copper. Besides the fiber-optic connections that need to be established, also multiplexing devices have to be installed. These devices receive signals from multiple customers via copper connections and aggregate them on a high-speed fiber-optic line.


                              Fiber-To-The-Building (FTTB): Optical fiber runs all the way to a building. Multiplexing devices (usually installed in the basement) aggregate signals from short-distance copper lines to the subscribers within the building onto a fiber-optic line.


                              Fiber-To-The-Home (FTTH): Connection between subscribers and central offices runs completely over an optical fiber.

Which strategy is employed in a particular case depends on various prerequisites. For instance, it depends on how densely the planning areas are populated (e.g., urban vs. rural areas).

Many local telecommunication carriers are realizing FTTH or FTTB projects. Deutsche Telekom AG announced plans for the connection of thousands of households in ten German cities with FTTH. Simultaneously, FTTC solutions are realized by extending VDSL connections. The largest Austrian telecommunication provider, Telekom Austria Group, is going to invest one billion Euro in the modernization of the fixed net infrastructure.
                        3
                        
                           Press release (July 3, 2009), http://www.telekomaustria.com/presse/news/2009/0703-telecommunication-infrastructure-en1.php.
                     
                     
                        3
                     
                  

The planning of such access networks is a highly complex task. Manual planning does not allow for finding provably close-to-optimal solutions. In the last years various uncapacitated optimization problems have been proposed in the context of FTTx planning (see, e.g. Arulselvan, Bley, Gollowitzer, Ljubić, & Maurer (2011), Leitner & Raidl (2011), Gollowitzer & Ljubić (2011), Gollowitzer, Gouveia, & Ljubić (2011)). These optimization problems are mainly concerned with the design of the underlying network topology, ignoring many hardware parameters. On a more detailed level, the following aspects have to be considered in addition: There are cost/capacity relations for various active and passive components, such as transponders, splitters, fibers and cables. There are overhead cost for trenching. Also existing infrastructure has to be taken into account. There are two possibilities to deploy fiber-optic access networks: customers might be connected via passive optical networks (PON) or via Point-to-point. In the first case, signals for up to 64 customers are transmitted on a single fiber and are split on the optical level somewhere between the central office and the customer. In the second case a unique fiber starting at the central office is dedicated to each customer.

This paper deals with the detailed planning of point-to-point FTTH/FTTB telecommunication networks with a given coverage rate 
                     
                        
                           α
                        
                     , (
                        
                           0
                           <
                           α
                           ⩽
                           1
                        
                     ). This coverage rate is usually determined by a network carrier and represents the minimal fraction of potential customers that should be offered the service. Fig. 1
                      shows two deployment scenarios for a real world instance with coverage rates of 0.6 and 0.9, respectively. Square nodes denote customers. The circle node denotes the central office r. The served customers are depicted with dark squares. Lines denote the denote installed connections in the solution.

In the context of FTTH/FTTB the potential customers are particular physical locations. Three important features are associated to each potential customer. Firstly, the number of subscribers (e.g., apartments and/or offices) in the building. This is denoted as the customers prize. Secondly, the number of optical fibers required to connect this potential customer is called its demand. Thirdly, there is a setup cost of installing a suitable device at the customer location. The available hardware (e.g., splitter devices in case of FTTB) determines the demand and cost for each customer.

For each customer selected for being served, there must be a fiber-optic line running to the central office. The company provides different types of cables. Each type of cable is characterized by two features. One is its capacity and represents the number of optical fibers. The other is its cost. For connecting two sites one may need several cables. Each combination of cables leads to a module with a given capacity and cost. The capacity of a module is simply the sum of the fibers included in the cables. The cost of a module is the sum of the cable costs plus the installation on the roads taking into account the length. The goal is to decide:
                        
                           •
                           which subset of customers to connect so that at least a fraction of 
                                 
                                    α
                                 
                               of the overall customers’ prizes is covered, and

which modules should be installed along the edges so that the total demand for selected customers can be routed through the network at minimum cost.

The fiber-optic lines that are necessary to connect a certain customer need not to run along the same single path through the network.

In this work we study exact and heuristic approaches to this problem of practical relevance. We first propose a branch-and-cut approach that is capable of solving small instances. However, due to the complexity of the problem and size of the instances in real applications, it is difficult to establish algorithmic approaches that ensure global cost-minimal solutions. In this work we also propose a new MIP-based approach that is based on an interplay between the cutting plane approach and a multi-start heuristic. The multi-start heuristic starts with fractional values of the LP-solutions and creates feasible solutions that are improved using a local improvement strategy. We introduce a new benchmark set of real-world instances with up to 86,000 nodes, 116,000 edges and 1500 potential customers. For these instances our computational experiments show that the MIP-based approach outperforms the alternative approach of only using the multi-start heuristic without MIP information.

A preliminary version of this paper was presented in the International Network Optimization Conference 2011 (Ljubić, Putz, & Salazar-González, 2011).

We are given an undirected and connected graph 
                        
                           G
                           =
                           (
                           V
                           ,
                           E
                           )
                        
                      with a node 
                        
                           r
                           ∈
                           V
                        
                      representing the central office (or central server or access to the backbone network) and a set of potential customers 
                        
                           K
                           ⊆
                           V
                           ⧹
                           {
                           r
                           }
                        
                     . To each potential customer 
                        
                           k
                           ∈
                           K
                        
                     , a positive demand 
                        
                           
                              
                                 d
                              
                              
                                 k
                              
                           
                        
                     , a positive prize 
                        
                           
                              
                                 p
                              
                              
                                 k
                              
                           
                        
                      and a positive setup cost 
                        
                           
                              
                                 c
                              
                              
                                 k
                              
                           
                        
                      are assigned. We denote by 
                        
                           
                              
                                 p
                              
                              
                                 0
                              
                           
                           =
                           α
                           
                              
                                 ∑
                              
                              
                                 k
                                 ∈
                                 K
                              
                           
                           
                              
                                 p
                              
                              
                                 k
                              
                           
                        
                      the minimum customer prize to collect. Let 
                        
                           
                              
                                 M
                              
                              
                                 e
                              
                           
                        
                      be the set of modules that can be installed on edge 
                        
                           e
                           ∈
                           E
                        
                     , each one 
                        
                           m
                           ∈
                           
                              
                                 M
                              
                              
                                 e
                              
                           
                        
                      associated with a positive capacity 
                        
                           
                              
                                 u
                              
                              
                                 e
                                 ,
                                 m
                              
                           
                        
                      and a cost 
                        
                           
                              
                                 c
                              
                              
                                 e
                                 ,
                                 m
                              
                           
                        
                     . We assume that modules are sorted such that 
                        
                           
                              
                                 u
                              
                              
                                 e
                                 ,
                                 m
                              
                           
                           <
                           
                              
                                 u
                              
                              
                                 e
                                 ,
                                 m
                                 +
                                 1
                              
                           
                        
                     . The optimization problem of our interest is the selection of the customers to be served, the single-source multiple-sink routing, and installation of at most one module on every edge. The connection from the central office to a customer can be seen as a flow that is allowed to split apart. Thus we are speaking of a bifurcated flow. As a result, an optimal solution of the problem is not necessarily a tree in the graph. If 
                        
                           α
                           =
                           1
                        
                     , the problem is known as the Local Access Network Design Problem (LAN), or the Single Source Network Loading Problem (SSNLP). For 
                        
                           0
                           <
                           α
                           <
                           1
                        
                     , we refer to this problem as the Prize-Collecting Local Access Network Design Problem (PC-LAN). Fig. 2
                      depicts an example with an input graph and a solution of the PC-LAN instance with 
                        
                           α
                           =
                           0.7
                        
                     . The graph 
                        
                           G
                           =
                           (
                           V
                           ,
                           E
                           )
                        
                      has 14 nodes. For each edge e the length 
                        
                           
                              
                                 l
                              
                              
                                 e
                              
                           
                        
                      of e is the Euclidean distance. Solid lines represent modules with 
                        
                           
                              
                                 u
                              
                              
                                 e
                                 ,
                                 m
                              
                           
                           =
                           100
                        
                      and 
                        
                           
                              
                                 c
                              
                              
                                 e
                                 ,
                                 m
                              
                           
                           =
                           120
                           
                              
                                 l
                              
                              
                                 e
                              
                           
                        
                     . Dashed lines represent the module with 
                        
                           
                              
                                 u
                              
                              
                                 e
                                 ,
                                 m
                              
                           
                           =
                           40
                        
                      and 
                        
                           
                              
                                 c
                              
                              
                                 e
                                 ,
                                 m
                              
                           
                           =
                           10
                           
                              
                                 l
                              
                              
                                 e
                              
                           
                        
                     . Rectangle nodes are customers with their demands 
                        
                           
                              
                                 d
                              
                              
                                 k
                              
                           
                        
                      written at the corresponding labels. Customer prizes and cost are defined as 
                        
                           
                              
                                 p
                              
                              
                                 k
                              
                           
                           =
                           
                              
                                 d
                              
                              
                                 k
                              
                           
                           ,
                           
                              
                                 c
                              
                              
                                 k
                              
                           
                           =
                           
                              
                                 d
                              
                              
                                 k
                              
                           
                           /
                           2
                        
                     , respectively. A coverage rate of 70% is requested, hence 
                        
                           
                              
                                 p
                              
                              
                                 0
                              
                           
                           =
                           0.7
                           
                              
                                 ∑
                              
                              
                                 k
                                 ∈
                                 K
                              
                           
                           
                              
                                 d
                              
                              
                                 k
                              
                           
                           =
                           80.5
                        
                     . The served demand by the optimal solution in the figure is 85.

@&#RELATED WORK@&#

The literature contains some approaches for solving LAN, which is a special case of PC-LAN where 
                           
                              α
                              =
                              1
                           
                        . LAN has been studied in Raghavan and Stanojević (2006) and Salman, Ravi, and Hooker (2008) where the authors assume that the stepwise link capacities satisfy economies of scales. Both papers consider flow-based MIP formulations and work with relaxations obtained by approximating the noncontinuous stepwise function by its lower convex envelope. In Ljubić, Putz, and Salazar-González (2012), exact approaches for LAN with general stepwise functions, based on Benders’ decomposition on various MIP models are proposed. More general multiple-source multiple-sink variants of the LAN problem have also been approached. See e.g. recent works in Frangioni and Gendron (2009), among others. However all these articles deal with problems where all customers must be served, while in PC-LAN we also need to deal with the problem of selecting a subset of the customers to be served.

More practice-oriented approaches have been studied in Martens, Patzak, Richter, and Wessäly (2009). By using a two-step approach with suitable MIP formulations, it is possible to optimize fiber-optic networks in realistic scenarios (see Martens, Orlowski, Werner, Wessäly, & Bentz, 2010). Also Orlowski et al. (2011) conducted various practice-oriented case studies that originated from planning scenarios by a German carrier. Finally we point out that there are many other works in the literature focusing on other designing aspects of fiber-to-the-home networks. For example, in recent works of Gualandi, Malucelli, and Sozzi (2010) and Kim, Lee, and Han (2011), the authors concentrate on facility location aspects rather than on network design ones.

We now show a Single Commodity Flow (SCF) formulation of the PC-LAN problem. This and other formulations can be derived from the models given in Ljubić et al. (2012) for the problem where all customers must be in the network. We make use of a binary variable 
                           
                              
                                 
                                    y
                                 
                                 
                                    k
                                 
                              
                           
                         to model whether a potential customer k is served or not. Observe that there always exists an optimal solution of the problem which is a directed acyclic graph connecting the central node with the subset of selected customers. The SCF formulation uses this result and works on a bi-directed graph G. The set of directed arcs is denoted by A. The modules available for the arcs 
                           
                              (
                              i
                              ,
                              j
                              )
                           
                         and 
                           
                              (
                              j
                              ,
                              i
                              )
                           
                         are the same as for the corresponding edge 
                           
                              {
                              i
                              ,
                              j
                              }
                           
                        , hence 
                           
                              
                                 
                                    M
                                 
                                 
                                    (
                                    i
                                    ,
                                    j
                                    )
                                 
                              
                              =
                              
                                 
                                    M
                                 
                                 
                                    (
                                    j
                                    ,
                                    i
                                    )
                                 
                              
                              =
                              
                                 
                                    M
                                 
                                 
                                    {
                                    i
                                    ,
                                    j
                                    }
                                 
                              
                           
                        . To model the non-decreasing step cost function on every arc, binary variables are used. A binary variable 
                           
                              
                                 
                                    x
                                 
                                 
                                    a
                                    ,
                                    m
                                 
                              
                           
                         decides whether the module m shall be installed on the arc a. For each subset 
                           
                              S
                              ⊂
                              V
                           
                        , we will denote the ingoing cut by 
                           
                              
                                 
                                    δ
                                 
                                 
                                    -
                                 
                              
                              (
                              S
                              )
                              ≔
                              {
                              (
                              i
                              ,
                              j
                              )
                              ∈
                              A
                              |
                              i
                              ∈
                              V
                              ⧹
                              S
                              ,
                              j
                              ∈
                              S
                              }
                           
                        .

To make sure that sufficient capacity is available to install cables between the central node and the selected customers, we additionally introduce continuous flow variables 
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    ij
                                 
                              
                              ⩾
                              0
                           
                         that represent the total amount of flow routed from the center towards the customers.

The MIP model reads now as follows:
                              
                                 (1)
                                 
                                    
                                       min
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             a
                                             ∈
                                             A
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   a
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          c
                                       
                                       
                                          a
                                          ,
                                          m
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          a
                                          ,
                                          m
                                       
                                    
                                    +
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             ∈
                                             K
                                          
                                       
                                    
                                    
                                       
                                          c
                                       
                                       
                                          k
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          k
                                       
                                    
                                 
                              
                           
                           
                              
                                 (2)
                                 
                                    
                                       
                                          
                                             
                                                subject to
                                             
                                          
                                          
                                       
                                       
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         a
                                                         ∈
                                                         
                                                            
                                                               δ
                                                            
                                                            
                                                               +
                                                            
                                                         
                                                         (
                                                         i
                                                         )
                                                      
                                                   
                                                
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      a
                                                   
                                                
                                                -
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         a
                                                         ∈
                                                         
                                                            
                                                               δ
                                                            
                                                            
                                                               -
                                                            
                                                         
                                                         (
                                                         i
                                                         )
                                                      
                                                   
                                                
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      a
                                                   
                                                
                                                =
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  -
                                                                  
                                                                     
                                                                        d
                                                                     
                                                                     
                                                                        i
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        y
                                                                     
                                                                     
                                                                        i
                                                                     
                                                                  
                                                                  ,
                                                               
                                                               
                                                                  i
                                                                  ∈
                                                                  K
                                                               
                                                            
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           ∑
                                                                        
                                                                        
                                                                           k
                                                                           ∈
                                                                           K
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        d
                                                                     
                                                                     
                                                                        k
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        y
                                                                     
                                                                     
                                                                        k
                                                                     
                                                                  
                                                                  ,
                                                               
                                                               
                                                                  i
                                                                  =
                                                                  r
                                                               
                                                            
                                                            
                                                               
                                                                  0
                                                                  ,
                                                               
                                                               
                                                                  otherwise
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                ∀
                                                i
                                                ∈
                                                V
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (3)
                                 
                                    0
                                    ⩽
                                    
                                       
                                          f
                                       
                                       
                                          a
                                       
                                    
                                    ⩽
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   a
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          u
                                       
                                       
                                          a
                                          ,
                                          m
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          a
                                          ,
                                          m
                                       
                                    
                                    
                                    ∀
                                    a
                                    ∈
                                    A
                                 
                              
                           
                           
                              
                                 (4)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             ∈
                                             K
                                          
                                       
                                    
                                    
                                       
                                          p
                                       
                                       
                                          k
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          k
                                       
                                    
                                    
                                    ⩾
                                    
                                       
                                          p
                                       
                                       
                                          0
                                       
                                    
                                 
                              
                           
                           
                              
                                 (5)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   a
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          a
                                          ,
                                          m
                                       
                                    
                                    
                                    ⩽
                                    1
                                    
                                    ∀
                                    a
                                    ∈
                                    A
                                 
                              
                           
                           
                              
                                 (6)
                                 
                                    
                                       
                                          x
                                       
                                       
                                          a
                                          ,
                                          m
                                       
                                    
                                    ∈
                                    {
                                    0
                                    ,
                                    1
                                    }
                                    
                                    ∀
                                    a
                                    ∈
                                    A
                                    ,
                                    
                                    ∀
                                    m
                                    ∈
                                    
                                       
                                          M
                                       
                                       
                                          a
                                       
                                    
                                 
                              
                           
                           
                              
                                 (7)
                                 
                                    
                                       
                                          y
                                       
                                       
                                          k
                                       
                                    
                                    ∈
                                    {
                                    0
                                    ,
                                    1
                                    }
                                    
                                    ∀
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           Objective function (1) consists of two terms: the cost for the installation of modules and the cost issued at customers’ sites. Constraints (2) are the flow preservation constraints: they make sure that the amount of flow sent to the customers is equal to their demands, in case that they are served. Capacity constraints 
                           (3) ensure that on each link, a module is installed that allows the necessary amount of flow to be routed through it. The disjunction constraints 
                           (5) ensure that at most one module is installed on every arc. Finally, the coverage constraint 
                           (4) states that a subset of customers achieving at least the requested target prize 
                              
                                 
                                    
                                       p
                                    
                                    
                                       0
                                    
                                 
                              
                            has to be connected. The presented SCF model is compact, but plugging it in a black-box MIP solver may not produce satisfactory results, mainly due to the big-M constraints (3). These constraints require hundreds of thousands of branch-and-bound nodes to be enumerated before proving the optimality of a solution (see, e.g. Ljubić et al. (2012) where similar results are obtained for the related LAN problem).

Rather than working with the compact model presented above, we remove the flow variables and use an exponential-size set of constraints to model the problem. These constraints are dynamically separated using a cutting plane approach. Furthermore, additional strengthening inequalities are added to improve the lower bounds and consequently reduce the search space and the number of enumerated nodes within a branch-and-bound tree. In this section we describe the basic ingredients of our branch-and-cut approach.

The directed cut-set formulation is obtained by projecting out flow variables from the SCF model and replacing constraints (2) and (3) with the following ones:
                              
                                 (8)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             a
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   -
                                                
                                             
                                             (
                                             S
                                             )
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   a
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          u
                                       
                                       
                                          a
                                          ,
                                          m
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          a
                                          ,
                                          m
                                       
                                    
                                    ⩾
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             ∈
                                             S
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          k
                                       
                                    
                                    
                                       
                                          d
                                       
                                       
                                          k
                                       
                                    
                                    
                                    ∀
                                    S
                                    ⊂
                                    V
                                    
                                    s
                                    .
                                    t
                                    .
                                    
                                    S
                                    ∩
                                    K
                                    
                                    ≠
                                    
                                    ∅
                                    
                                    and
                                    
                                    r
                                    
                                    ∉
                                    
                                    S
                                    .
                                 
                              
                           
                        

The cut-set inequalities 
                           (8) state that every subset of nodes S, containing at least one customer and not containing r, must have enough incoming capacity to route the total demand requested inside the set. It is not difficult to see (see, e.g., Ljubić et al. (2012)) that the new model, that we will refer to as the cut-set model (CUT), exhibits the same lower bounds as SCF. These bounds can be further strengthened as follows. Since 
                              
                                 (
                                 x
                                 ,
                                 y
                                 )
                              
                            variables are binary and the coefficients are non-negative, the cut-set inequalities can be easily strengthened by rounding down some left-hand side coefficients:
                              
                                 (9)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             a
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   -
                                                
                                             
                                             (
                                             S
                                             )
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   a
                                                
                                             
                                          
                                       
                                    
                                    
                                       min
                                    
                                    
                                       
                                          
                                             
                                                
                                                   u
                                                
                                                
                                                   a
                                                   ,
                                                   m
                                                
                                             
                                             ,
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      k
                                                      ∈
                                                      S
                                                   
                                                
                                             
                                             
                                                
                                                   d
                                                
                                                
                                                   k
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          a
                                          ,
                                          m
                                       
                                    
                                    ⩾
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             ∈
                                             S
                                          
                                       
                                    
                                    
                                       
                                          d
                                       
                                       
                                          k
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          k
                                       
                                    
                                    
                                    ∀
                                    S
                                    ⊆
                                    V
                                    
                                    s.t.
                                    
                                    S
                                    ∩
                                    K
                                    
                                    ≠
                                    
                                    ∅
                                    
                                    and
                                    
                                    r
                                    
                                    ∉
                                    
                                    S
                                    .
                                 
                              
                           
                        

The CUT model can be further strengthened with the following connectivity cuts. Every set of nodes containing at least one customer must have at least one incoming arc if the customer is included in the solution:
                              
                                 (10)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             a
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   -
                                                
                                             
                                             (
                                             S
                                             )
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   a
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          a
                                          ,
                                          m
                                       
                                    
                                    ⩾
                                    
                                       
                                          y
                                       
                                       
                                          k
                                       
                                    
                                    
                                    ∀
                                    S
                                    ⊆
                                    V
                                    ⧹
                                    {
                                    r
                                    }
                                    ,
                                    ∀
                                    k
                                    ∈
                                    S
                                    ∩
                                    K
                                    .
                                 
                              
                           
                        

From the knapsack constraint (4), we can derive a family of traditional cover inequalities as follows. Let J be a minimal subset of customers such that its complement 
                              
                                 K
                                 ⧹
                                 J
                              
                            cannot satisfy the required coverage demand, i.e., 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       ∈
                                       K
                                       ⧹
                                       J
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       k
                                    
                                 
                                 <
                                 
                                    
                                       p
                                    
                                    
                                       0
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       p
                                    
                                    
                                       l
                                    
                                 
                                 +
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       ∈
                                       K
                                       ⧹
                                       J
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       k
                                    
                                 
                                 ⩾
                                 
                                    
                                       p
                                    
                                    
                                       0
                                    
                                 
                              
                           , for any 
                              
                                 l
                                 ∈
                                 J
                              
                           . The set J is called a minimal cover with respect to coverage requirement 
                              
                                 
                                    
                                       p
                                    
                                    
                                       0
                                    
                                 
                              
                           . Let 
                              
                                 COV
                              
                            be the collection of all minimal covers with respect to 
                              
                                 
                                    
                                       p
                                    
                                    
                                       0
                                    
                                 
                              
                           . Then, the following minimal cover inequalities are valid for our problem:
                              
                                 (11)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             ∈
                                             J
                                          
                                       
                                    
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    ⩾
                                    1
                                    
                                    ∀
                                    J
                                    ∈
                                    COV
                                    .
                                 
                              
                           These inequalities can be further strengthened by lifting. In general the separation of cover inequalities is NP-hard. See, e.g., the recent work of Kaparis and Letchford (2010) where heuristic separation approaches are proposed.

Another family of cover inequalities can be derived from the cut-set inequalities (8). Given a cut-set inequality (8) defined by 
                              
                                 S
                                 ⊂
                                 V
                                 ,
                                 r
                                 
                                 ∉
                                 
                                 S
                              
                           , define the index set 
                              
                                 I
                                 (
                                 S
                                 )
                                 ≔
                                 {
                                 (
                                 a
                                 ,
                                 m
                                 )
                                 |
                                 a
                                 ∈
                                 
                                    
                                       δ
                                    
                                    
                                       -
                                    
                                 
                                 (
                                 S
                                 )
                                 ,
                                 m
                                 ∈
                                 
                                    
                                       M
                                    
                                    
                                       a
                                    
                                 
                                 }
                              
                            and the demand inside of S as 
                              
                                 B
                                 ≔
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       ∈
                                       K
                                       ∩
                                       S
                                    
                                 
                                 
                                    
                                       d
                                    
                                    
                                       k
                                    
                                 
                              
                           . Set 
                              
                                 J
                                 ⊂
                                 I
                                 (
                                 S
                                 )
                              
                            is called a cover with respect to 
                              
                                 I
                                 (
                                 S
                                 )
                              
                            if 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       (
                                       a
                                       ,
                                       m
                                       )
                                       ∈
                                       J
                                    
                                 
                                 
                                    
                                       u
                                    
                                    
                                       a
                                       ,
                                       m
                                    
                                 
                                 <
                                 B
                              
                            and a maximal cover if, in addition, for all 
                              
                                 
                                    
                                       J
                                    
                                    
                                       ′
                                    
                                 
                              
                            such that 
                              
                                 I
                                 (
                                 S
                                 )
                                 ⊇
                                 
                                    
                                       J
                                    
                                    
                                       ′
                                    
                                 
                                 ⊃
                                 J
                              
                           : 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       (
                                       a
                                       ,
                                       m
                                       )
                                       ∈
                                       
                                          
                                             J
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 
                                    
                                       u
                                    
                                    
                                       a
                                       ,
                                       m
                                    
                                 
                                 ⩾
                                 B
                              
                           . If J is a maximal cover with respect to 
                              
                                 I
                                 (
                                 S
                                 )
                              
                           , then the following maximal cover inequalities are valid:
                              
                                 (12)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             (
                                             a
                                             ,
                                             m
                                             )
                                             ∈
                                             I
                                             (
                                             S
                                             )
                                             ⧹
                                             J
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          a
                                          ,
                                          m
                                       
                                    
                                    ⩾
                                    1
                                    +
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             ∈
                                             K
                                             ∩
                                             S
                                          
                                       
                                    
                                    (
                                    
                                       
                                          y
                                       
                                       
                                          k
                                       
                                    
                                    -
                                    1
                                    )
                                    .
                                 
                              
                           These inequalities are also NP-hard to separate. However, modern MIP solvers have build-in mechanisms for detecting knapsack-type inequalities (like (4) or (8) in our case) and using heuristic techniques for separating cover inequalities (like (11) or (12)).

Non-customer nodes 
                              
                                 V
                                 ⧹
                                 (
                                 K
                                 ∪
                                 {
                                 r
                                 }
                                 )
                              
                            cannot have incoming (or outgoing) arcs only. Therefore, we can add the following degree-balance constraints that are valid due to the fact that the final solution is an acyclic graph:
                              
                                 (13)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             (
                                             l
                                             ,
                                             i
                                             )
                                             ∈
                                             A
                                             ,
                                             l
                                             ≠
                                             j
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   li
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          li
                                          ,
                                          m
                                       
                                    
                                    ⩾
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   ij
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                          ,
                                          m
                                       
                                    
                                    
                                    ∀
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    A
                                    ,
                                    i
                                    
                                    ∉
                                    
                                    K
                                    ,
                                    
                                    i
                                    
                                    ≠
                                    
                                    r
                                 
                              
                           
                           
                              
                                 (14)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             (
                                             j
                                             ,
                                             l
                                             )
                                             ∈
                                             A
                                             ,
                                             l
                                             ≠
                                             i
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   jl
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          jl
                                          ,
                                          m
                                       
                                    
                                    ⩾
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   ij
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                          ,
                                          m
                                       
                                    
                                    
                                    ∀
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    A
                                    ,
                                    j
                                    
                                    ∉
                                    
                                    K
                                    ,
                                    
                                    j
                                    
                                    ≠
                                    
                                    r
                                    .
                                 
                              
                           The following in-degree inequalities are very useful for the initialization of the LP model:
                              
                                 (15)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             a
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   -
                                                
                                             
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   a
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          a
                                          ,
                                          m
                                       
                                    
                                    ⩾
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    
                                    ∀
                                    i
                                    ∈
                                    K
                                    .
                                 
                              
                           Notice that these are the cut-set inequalities (10) associated to all the singletons S.

Finally, the following constraints are valid:
                              
                                 (16)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   ij
                                                
                                             
                                          
                                       
                                    
                                    (
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                          ,
                                          m
                                       
                                    
                                    +
                                    
                                       
                                          x
                                       
                                       
                                          ji
                                          ,
                                          m
                                       
                                    
                                    )
                                    ⩽
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    
                                    ∀
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    A
                                    .
                                 
                              
                           They are implied by the family of connectivity constraints (10), together with the in-degree constraints (15). However we have empirically observed that they speed-up the branch-and-cut performance if added at the initialization phase.

The cutting plane approach is performed at each node of the branch-and-bound tree. It starts with the linear programming relaxation of the CUT model without (8). This relaxation is strengthened with the rounded cut-set inequalities (9) associated to all the singletons S and with the inequalities (13)–(16) mentioned above. Other inequalities are generated in an iterative way as it is described below.

At each iteration a fractional solution 
                              
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       ∗
                                    
                                 
                                 ,
                                 
                                    
                                       y
                                    
                                    
                                       ∗
                                    
                                 
                                 )
                              
                            is given. The separation problem of cut-set inequalities in general multiple-source multiple-sink case is NP-hard and can be reduced to the max-cut problem Barahona (1996). However, inequalities (8) for PC-LAN can be separated in polynomial time as follows. For a given fractional solution 
                              
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       ∗
                                    
                                 
                                 ,
                                 
                                    
                                       y
                                    
                                    
                                       ∗
                                    
                                 
                                 )
                              
                           , we define the directed support graph 
                           
                              
                                 
                                    
                                       G
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       V
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       A
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                            where 
                              
                                 
                                    
                                       V
                                    
                                    
                                       ′
                                    
                                 
                                 ≔
                                 V
                                 ∪
                                 {
                                 t
                                 }
                              
                            with an additional sink t, and 
                              
                                 
                                    
                                       A
                                    
                                    
                                       ′
                                    
                                 
                                 ≔
                                 
                                    
                                       A
                                    
                                    
                                       1
                                    
                                 
                                 ∪
                                 
                                    
                                       A
                                    
                                    
                                       2
                                    
                                 
                              
                            being 
                              
                                 
                                    
                                       A
                                    
                                    
                                       1
                                    
                                 
                                 ≔
                                 {
                                 a
                                 ∈
                                 A
                                 |
                                 
                                    
                                       ∑
                                    
                                    
                                       m
                                       ∈
                                       
                                          
                                             M
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                                 
                                    
                                       u
                                    
                                    
                                       a
                                       ,
                                       m
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       a
                                       ,
                                       m
                                    
                                    
                                       ∗
                                    
                                 
                                 >
                                 0
                                 }
                              
                            and 
                              
                                 
                                    
                                       A
                                    
                                    
                                       2
                                    
                                 
                                 ≔
                                 {
                                 (
                                 k
                                 ,
                                 t
                                 )
                                 |
                                 k
                                 ∈
                                 K
                                 }
                              
                           . The capacity associated to each arc 
                              
                                 a
                                 ∈
                                 
                                    
                                       A
                                    
                                    
                                       1
                                    
                                 
                              
                            is set to 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       m
                                       ∈
                                       
                                          
                                             M
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                                 
                                    
                                       u
                                    
                                    
                                       a
                                       ,
                                       m
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       a
                                       ,
                                       m
                                    
                                    
                                       ∗
                                    
                                 
                              
                           , and the capacity of each arc 
                              
                                 a
                                 =
                                 (
                                 k
                                 ,
                                 t
                                 )
                                 ∈
                                 
                                    
                                       A
                                    
                                    
                                       2
                                    
                                 
                              
                            is set to 
                              
                                 
                                    
                                       d
                                    
                                    
                                       k
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       k
                                    
                                    
                                       ∗
                                    
                                 
                              
                           . If the minimum cut between r and t in 
                              
                                 
                                    
                                       G
                                    
                                    
                                       ′
                                    
                                 
                              
                            is less than 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       ∈
                                       K
                                    
                                 
                                 
                                    
                                       d
                                    
                                    
                                       k
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       k
                                    
                                    
                                       ∗
                                    
                                 
                              
                           , it defines a violated inequality (8). Finally, the inequality is rounded and then inserted into the LP model.

In addition, also violated connectivity constraints (10) are dynamically separated. To this end, given a fractional solution 
                              
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       ∗
                                    
                                 
                                 ,
                                 
                                    
                                       y
                                    
                                    
                                       ∗
                                    
                                 
                                 )
                              
                           , we define a network from G where the capacity associated to each arc 
                              
                                 a
                                 ∈
                                 A
                              
                            is 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       m
                                       ∈
                                       
                                          
                                             M
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       a
                                       ,
                                       m
                                    
                                    
                                       ∗
                                    
                                 
                              
                           . Then, if the minimum cut between r and any customer k in G is less than 
                              
                                 
                                    
                                       y
                                    
                                    
                                       k
                                    
                                    
                                       ∗
                                    
                                 
                              
                            this cut defines a violated inequality (10).

In general, a minimum cut problem has several optimal solutions. Especially when the dimension of the network is very large as is the case in our PC-LAN instances. Therefore, it is possible to find several violated inequalities from a given fractional solution. Multiple, nested cuts are produced for a fractional solution, as follows: The minimum cut problem is solved. Then the capacity of the arcs in the cut is increased. This defines a new minimum cut problem. This new problem is solved and if the associated inequality is violated it is added to the model. This procedure is repeated to produce multiple, nested cuts. Among all cuts with the same max-flow value, we prefer sparser ones. To detect them, we use the technique of adding an epsilon-capacity to every arc before calculating the flows. That way, cuts with less arcs are preferred to the more dense ones.

This section describes a MIP-based approach to find high quality feasible solutions to large-sized instances of the PC-LAN. It consists of three main ingredients:
                        
                           1.
                           Cutting Plane phase: The cutting plane approach works with relaxations of the CUT model described above. In the separation phase (cf. Section 2.3.3), a new set of violated inequalities is inserted into the LP. The LP is resolved and the optimal LP-solution 
                                 
                                    (
                                    
                                       
                                          x
                                       
                                       
                                          ∗
                                       
                                    
                                    ,
                                    
                                       
                                          y
                                       
                                       
                                          ∗
                                       
                                    
                                    )
                                 
                               is taken as input for the following Network Construction phase.

Network Construction phase: First, a set of customers is selected according to the fractional values 
                                 
                                    
                                       
                                          y
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              . Next, a network is constructed iteratively by using shortest path calculations on the graph with adapted edge weights. The fractional values 
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ∗
                                       
                                    
                                 
                               are taken into account for this construction.

Local Improvement phase: The solution found in the construction phase is subjected to a local improvement procedure. Flow routed along an expensive edge together with affected customers are removed, leaving a partial solution. Then the partial solution is repaired by adding new customers and extending the network design. Two different definitions of expensive are alternated.

The first phase is described in Section 2.3.3, and we now describe the remaining two phases. Before that, we first introduce the notation that is used in this section.

For the sake of a simpler description of the heuristic algorithm we use the following notation. We represent the modules 
                           
                              
                                 
                                    M
                                 
                                 
                                    e
                                 
                              
                           
                         by numbers in 
                           
                              {
                              1
                              ,
                              2
                              ,
                              …
                              }
                           
                        . A network design can be represented by a vector 
                           
                              z
                              ∈
                              
                                 
                                    N
                                 
                                 
                                    |
                                    E
                                    |
                                 
                              
                           
                         consisting of module indices 
                           
                              
                                 
                                    z
                                 
                                 
                                    e
                                 
                              
                              ∈
                              {
                              0
                              }
                              ∪
                              
                                 
                                    M
                                 
                                 
                                    e
                                 
                              
                           
                        . For example, 
                           
                              
                                 
                                    z
                                 
                                 
                                    e
                                 
                              
                              =
                              3
                           
                         means that the third available module for e is installed; 
                           
                              
                                 
                                    z
                                 
                                 
                                    e
                                 
                              
                              =
                              0
                           
                         means that there is no installation on e. Capacities per edge are denoted by 
                           
                              g
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    ⩾
                                    0
                                 
                              
                           
                        . A flow through the network is represented by a vector 
                           
                              f
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    ⩾
                                    0
                                 
                                 
                                    |
                                    A
                                    |
                                 
                              
                           
                        . The function 
                           
                              
                                 
                                    μ
                                 
                                 
                                    e
                                 
                              
                              :
                              
                                 
                                    R
                                 
                                 
                                    ⩾
                                    0
                                 
                              
                              
                              ↦
                              
                              
                                 
                                    M
                                 
                                 
                                    e
                                 
                              
                           
                         maps some required capacity to the index of the most appropriate module on edge e, i.e., the cheapest module with sufficient capacity, or the largest module if there is no module with sufficient capacity. More formally, for some required capacity 
                           
                              b
                              ⩾
                              0
                           
                        :
                           
                              
                                 
                                    
                                       μ
                                    
                                    
                                       e
                                    
                                 
                                 (
                                 b
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   0
                                                
                                                
                                                   if
                                                   
                                                   b
                                                   =
                                                   0
                                                
                                             
                                             
                                                
                                                   arg
                                                   
                                                      
                                                         
                                                            min
                                                         
                                                         
                                                            {
                                                            m
                                                            ∈
                                                            
                                                               
                                                                  M
                                                               
                                                               
                                                                  e
                                                               
                                                            
                                                            |
                                                            
                                                               
                                                                  u
                                                               
                                                               
                                                                  e
                                                                  ,
                                                                  m
                                                               
                                                            
                                                            ⩾
                                                            b
                                                            }
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         e
                                                         ,
                                                         m
                                                      
                                                   
                                                
                                                
                                                   if
                                                   
                                                   b
                                                   >
                                                   0
                                                   
                                                   and
                                                   
                                                   ∃
                                                   m
                                                   ∈
                                                   
                                                      
                                                         M
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   |
                                                   
                                                   
                                                      
                                                         u
                                                      
                                                      
                                                         e
                                                         ,
                                                         m
                                                      
                                                   
                                                   ⩾
                                                   b
                                                   
                                                   ∀
                                                   e
                                                   ∈
                                                   E
                                                   .
                                                
                                             
                                             
                                                
                                                   |
                                                   
                                                      
                                                         M
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   |
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        An edge e is said to be saturated by a required capacity 
                           
                              
                                 
                                    g
                                 
                                 
                                    e
                                 
                              
                           
                         if the largest module is already used on this edge and no free capacity is left, i.e., 
                           
                              
                                 
                                    z
                                 
                                 
                                    e
                                 
                              
                              =
                              |
                              
                                 
                                    M
                                 
                                 
                                    e
                                 
                              
                              |
                           
                         and 
                           
                              
                                 
                                    g
                                 
                                 
                                    e
                                 
                              
                              =
                              
                                 
                                    u
                                 
                                 
                                    e
                                    ,
                                    
                                       
                                          z
                                       
                                       
                                          e
                                       
                                    
                                 
                              
                           
                        . Given a current capacity vector 
                           
                              g
                           
                        , a suitable design vector 
                           
                              z
                           
                         and some additionally required capacity 
                           
                              b
                              ≥
                              0
                           
                        , we define the following edge weight approximations:
                           
                              (17)
                              
                                 
                                    
                                       w
                                    
                                    
                                       e
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                g
                                             
                                             
                                                e
                                             
                                          
                                          ,
                                          
                                             
                                                z
                                             
                                             
                                                e
                                             
                                          
                                          ,
                                          b
                                       
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         e
                                                         ,
                                                         
                                                            
                                                               μ
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               g
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         +
                                                         b
                                                         )
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         e
                                                         ,
                                                         
                                                            
                                                               z
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                      
                                                   
                                                   ,
                                                
                                                
                                                   if
                                                   
                                                   
                                                      
                                                         g
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   <
                                                   
                                                      
                                                         u
                                                      
                                                      
                                                         e
                                                         ,
                                                         |
                                                         
                                                            
                                                               M
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         |
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   ∞
                                                   ,
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                 ∀
                                 e
                                 ∈
                                 E
                                 .
                              
                           
                        Hence 
                           
                              
                                 
                                    w
                                 
                                 
                                    e
                                 
                              
                           
                         represents the cost for expanding the installation on e from the currently selected module 
                           
                              
                                 
                                    z
                                 
                                 
                                    e
                                 
                              
                           
                         to the module 
                           
                              
                                 
                                    μ
                                 
                                 
                                    e
                                 
                              
                              (
                              
                                 
                                    g
                                 
                                 
                                    e
                                 
                              
                              +
                              b
                              )
                           
                        . If the required capacity 
                           
                              
                                 
                                    g
                                 
                                 
                                    e
                                 
                              
                           
                         saturates the edge e, such an expansion is impossible and the edge weight is infinite.

Starting from a fractional solution 
                           
                              (
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    ∗
                                 
                              
                              )
                           
                         obtained after solving the LP-relaxation, we build a feasible solution by applying the following three procedures.

Let 
                              
                                 
                                    
                                       y
                                    
                                    
                                       ∗
                                    
                                 
                              
                            be a solution of the LP-relaxation of the CUT model. We sort the customer indices in order of decreasing fractional values 
                              
                                 
                                    
                                       y
                                    
                                    
                                       k
                                    
                                    
                                       ∗
                                    
                                 
                              
                           . We then define an integer feasible selection 
                              
                                 y
                              
                            by greedily setting indices of customers with large fractional values to one until the coverage constraint (4) is satisfied. The fractional vector 
                              
                                 
                                    
                                       x
                                    
                                    
                                       ∗
                                    
                                 
                              
                            is used to compute a vector of minimum required capacities 
                              
                                 
                                    
                                       g
                                    
                                    
                                       ∗
                                    
                                 
                              
                           :
                              
                                 
                                    
                                       
                                          g
                                       
                                       
                                          e
                                       
                                       
                                          ∗
                                       
                                    
                                    =
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                             ∈
                                             
                                                
                                                   M
                                                
                                                
                                                   e
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          u
                                       
                                       
                                          e
                                          ,
                                          m
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   x
                                                
                                                
                                                   ij
                                                   ,
                                                   m
                                                
                                                
                                                   ∗
                                                
                                             
                                             +
                                             
                                                
                                                   x
                                                
                                                
                                                   ji
                                                   ,
                                                   m
                                                
                                                
                                                   ∗
                                                
                                             
                                          
                                       
                                    
                                    
                                    ∀
                                    e
                                    =
                                    {
                                    i
                                    ,
                                    j
                                    }
                                    .
                                 
                              
                           Note that 
                              
                                 
                                    
                                       g
                                    
                                    
                                       ∗
                                    
                                 
                              
                            may not define the undirected capacity vector of a feasible network design. The fractional solution 
                              
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       ∗
                                    
                                 
                                 ,
                                 
                                    
                                       y
                                    
                                    
                                       ∗
                                    
                                 
                                 )
                              
                            may not satisfy all cut-set inequalities (8) associated to every set S, but only to those inequalities that have been separated so far.

Using the previously generated vector 
                              
                                 y
                              
                            and 
                              
                                 
                                    
                                       g
                                    
                                    
                                       ∗
                                    
                                 
                              
                           , this procedure constructs a feasible network design of the PC-LAN. Algorithm 3.1 describes the main steps. The initialization phase defines a demand per node 
                           
                              
                                 b
                                 ∈
                                 
                                    
                                       R
                                    
                                    
                                       ⩾
                                       0
                                    
                                    
                                       |
                                       V
                                       |
                                    
                                 
                              
                            as:
                              
                                 
                                    
                                       
                                          b
                                       
                                       
                                          k
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      ,
                                                   
                                                   
                                                      if
                                                      
                                                      k
                                                      ∈
                                                      K
                                                   
                                                
                                                
                                                   
                                                      0
                                                      ,
                                                   
                                                   
                                                      otherwise.
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           An initial network design 
                              
                                 z
                              
                            is defined via the most appropriate module per edge with respect to 
                              
                                 
                                    
                                       g
                                    
                                    
                                       ∗
                                    
                                 
                              
                           , i.e., 
                              
                                 
                                    
                                       z
                                    
                                    
                                       e
                                    
                                 
                                 ≔
                                 
                                    
                                       μ
                                    
                                    
                                       e
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                g
                                             
                                             
                                                e
                                             
                                             
                                                ∗
                                             
                                          
                                       
                                    
                                 
                              
                            for all 
                              
                                 e
                                 ∈
                                 E
                              
                           . The algorithm subsequently modifies 
                              
                                 b
                              
                           , creates an undirected flow 
                              
                                 g
                              
                            and updates the design 
                              
                                 z
                              
                           . In each iteration a node v with positive demand 
                              
                                 
                                    
                                       b
                                    
                                    
                                       v
                                    
                                 
                                 >
                                 0
                              
                            is chosen. Denote the demand to be transported as 
                              
                                 b
                                 ≔
                                 
                                    
                                       b
                                    
                                    
                                       v
                                    
                                 
                              
                            and cancel the node demand of 
                              
                                 v
                                 :
                                 
                                    
                                       b
                                    
                                    
                                       v
                                    
                                 
                                 ≔
                                 0
                              
                           . The values of 
                              
                                 g
                                 ,
                                 z
                              
                            and b uniquely determine the edge weight approximation 
                              
                                 w
                              
                            via (17). This vector 
                              
                                 w
                              
                            defines the edge weights for the shortest paths calculation on G. A shortest path from v to r is computed: 
                              
                                 
                                    
                                       SP
                                    
                                    
                                       w
                                    
                                 
                                 (
                                 v
                                 )
                                 =
                                 〈
                                 v
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 …
                                 ,
                                 r
                                 〉
                              
                           . Along this path, the current demand b is transported. Denote the remaining capacity on e by 
                              
                                 
                                    
                                       u
                                    
                                    
                                       ¯
                                    
                                 
                              
                            and the maximum that can be transported by 
                              
                                 
                                    
                                       b
                                    
                                    
                                       ¯
                                    
                                 
                              
                           . The flow 
                              
                                 g
                              
                            is increased: 
                              
                                 
                                    
                                       g
                                    
                                    
                                       e
                                    
                                 
                                 :
                                 =
                                 
                                    
                                       g
                                    
                                    
                                       e
                                    
                                 
                                 +
                                 b
                              
                            and the necessary installations 
                              
                                 
                                    
                                       z
                                    
                                    
                                       e
                                    
                                 
                                 ≔
                                 
                                    
                                       μ
                                    
                                    
                                       e
                                    
                                 
                                 (
                                 
                                    
                                       g
                                    
                                    
                                       e
                                    
                                 
                                 )
                              
                            are made for all 
                              
                                 e
                                 ∈
                                 
                                    
                                       SP
                                    
                                    
                                       w
                                    
                                 
                                 (
                                 v
                                 )
                              
                           . Once Line 23 is reached, the node demand has been transported from v to r and the next iteration starts.

A special case occurs when an edge e on 
                              
                                 
                                    
                                       SP
                                    
                                    
                                       w
                                    
                                 
                                 (
                                 v
                                 )
                              
                            does not offer sufficient remaining capacity 
                              
                                 
                                    
                                       u
                                    
                                    
                                       ¯
                                    
                                 
                              
                           , i.e., 
                              
                                 b
                                 >
                                 
                                    
                                       u
                                    
                                    
                                       ¯
                                    
                                 
                              
                            in Line 18. Then, only this maximum available capacity 
                              
                                 
                                    
                                       u
                                    
                                    
                                       ¯
                                    
                                 
                              
                            is transported on e. Now the node demands are changed appropriately at each endpoint of e. The node closer to v, denoted i, receives an additional demand of 
                              
                                 b
                                 -
                                 
                                    
                                       u
                                    
                                    
                                       ¯
                                    
                                 
                              
                           . The node closer to r, denoted j, receives an additional demand of 
                              
                                 
                                    
                                       u
                                    
                                    
                                       ¯
                                    
                                 
                              
                           . The edge e becomes saturated and the heuristic continues by picking the next randomly chosen node with positive node demand in Line 5. The heuristic terminates when 
                              
                                 b
                                 =
                                 0
                              
                            and 
                              
                                 z
                              
                            is feasible for the chosen subset of customers represented by 
                              
                                 y
                              
                           .

Of course, no shortest path may exist. This can be due to an infeasible input or due to the greedy decisions taken in the course of the algorithm. In this case the heuristic terminates in Line 11 without finding a feasible solution.

After the construction has produced a feasible solution 
                              
                                 z
                              
                           , redundant capacities may have been installed along the edges. To reduce the installation cost, a minimum-cost flow problem is defined on the subgraph of G induced by 
                              
                                 
                                    
                                       z
                                    
                                    
                                       e
                                    
                                 
                                 >
                                 0
                              
                           . The flow cost are defined as 
                              
                                 
                                    
                                       
                                          
                                             c
                                          
                                          
                                             e
                                             ,
                                             
                                                
                                                   z
                                                
                                                
                                                   e
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             u
                                          
                                          
                                             e
                                             ,
                                             
                                                
                                                   z
                                                
                                                
                                                   e
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           , and the capacity is set to 
                              
                                 
                                    
                                       u
                                    
                                    
                                       e
                                       ,
                                       
                                          
                                             z
                                          
                                          
                                             e
                                          
                                       
                                    
                                 
                              
                            for all edges. The min-cost flow problem is solved and yields a directed flow vector 
                              
                                 f
                              
                           . A new design vector 
                              
                                 
                                    
                                       z
                                    
                                    
                                       ′
                                    
                                 
                              
                            can be derived from 
                              
                                 f
                              
                            by setting 
                              
                                 
                                    
                                       z
                                    
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ≔
                                 
                                    
                                       μ
                                    
                                    
                                       e
                                    
                                 
                                 (
                                 
                                    
                                       f
                                    
                                    
                                       ij
                                    
                                 
                                 +
                                 
                                    
                                       f
                                    
                                    
                                       ji
                                    
                                 
                                 )
                              
                            for all 
                              
                                 e
                                 ∈
                                 E
                              
                           . Clearly, 
                              
                                 
                                    
                                       z
                                    
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ⩽
                                 
                                    
                                       z
                                    
                                    
                                       e
                                    
                                 
                              
                            for all 
                              
                                 e
                                 ∈
                                 E
                              
                           . The directed flow vector 
                              
                                 f
                              
                            also allows to express the design in terms of directed 
                              
                                 
                                    
                                       x
                                    
                                    
                                       a
                                       ,
                                       m
                                    
                                 
                              
                            variables:
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                          ,
                                          m
                                       
                                    
                                    ≔
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      1
                                                      ,
                                                   
                                                   
                                                      if
                                                      
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ij
                                                         
                                                      
                                                      >
                                                      0
                                                      
                                                      and
                                                      
                                                      m
                                                      =
                                                      
                                                         
                                                            μ
                                                         
                                                         
                                                            {
                                                            ij
                                                            }
                                                         
                                                      
                                                      (
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ij
                                                         
                                                      
                                                      )
                                                   
                                                
                                                
                                                   
                                                      0
                                                      ,
                                                   
                                                   
                                                      otherwise.
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              Algorithm 3.1
                              Network Construction. 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   Input: customer selection 
                                                      
                                                         y
                                                         ∈
                                                         
                                                            
                                                               {
                                                               0
                                                               ,
                                                               1
                                                               }
                                                            
                                                            
                                                               |
                                                               K
                                                               |
                                                            
                                                         
                                                      
                                                   , minimum required capacity 
                                                      
                                                         
                                                            
                                                               g
                                                            
                                                            
                                                               ∗
                                                            
                                                         
                                                         ∈
                                                         
                                                            
                                                               R
                                                            
                                                            
                                                               ⩾
                                                               0
                                                            
                                                            
                                                               |
                                                               E
                                                               |
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                1: init node demand 
                                                      
                                                         b
                                                         ∈
                                                         
                                                            
                                                               R
                                                            
                                                            
                                                               ⩾
                                                               0
                                                            
                                                            
                                                               |
                                                               V
                                                               |
                                                            
                                                         
                                                         :
                                                         
                                                            
                                                               b
                                                            
                                                            
                                                               k
                                                            
                                                         
                                                         ≔
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               k
                                                            
                                                         
                                                         
                                                            
                                                               d
                                                            
                                                            
                                                               k
                                                            
                                                         
                                                      
                                                    for all 
                                                      
                                                         k
                                                         ∈
                                                         K
                                                      
                                                    and 
                                                      
                                                         
                                                            
                                                               b
                                                            
                                                            
                                                               v
                                                            
                                                         
                                                         =
                                                         0
                                                      
                                                    for all 
                                                      
                                                         v
                                                         
                                                         ∉
                                                         
                                                         K
                                                      
                                                   
                                                
                                             
                                             
                                                2: init design 
                                                      
                                                         
                                                            
                                                               z
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         ≔
                                                         
                                                            
                                                               μ
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               g
                                                            
                                                            
                                                               e
                                                            
                                                            
                                                               ∗
                                                            
                                                         
                                                         )
                                                      
                                                    for all 
                                                      
                                                         e
                                                         ∈
                                                         E
                                                      
                                                   
                                                
                                             
                                             
                                                3: init undirected flow 
                                                      
                                                         
                                                            
                                                               g
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         ≔
                                                         0
                                                      
                                                    for all 
                                                      
                                                         e
                                                         ∈
                                                         E
                                                      
                                                   
                                                
                                             
                                             
                                                4: while 
                                                   
                                                      
                                                         ∃
                                                         v
                                                         ∈
                                                         V
                                                         :
                                                         
                                                            
                                                               b
                                                            
                                                            
                                                               v
                                                            
                                                         
                                                         >
                                                         0
                                                      
                                                    
                                                   do
                                                
                                             
                                             
                                                5:  pick a random node 
                                                      
                                                         v
                                                         ∈
                                                         V
                                                         :
                                                         
                                                            
                                                               b
                                                            
                                                            
                                                               v
                                                            
                                                         
                                                         >
                                                         0
                                                      
                                                   
                                                
                                             
                                             
                                                6:  
                                                   
                                                      
                                                         b
                                                         ≔
                                                         
                                                            
                                                               b
                                                            
                                                            
                                                               v
                                                            
                                                         
                                                      
                                                    // the demand to be transported
                                                
                                             
                                             
                                                7:  
                                                   
                                                      
                                                         
                                                            
                                                               b
                                                            
                                                            
                                                               v
                                                            
                                                         
                                                         ≔
                                                         0
                                                      
                                                   
                                                
                                             
                                             
                                                8:  define edge weight 
                                                      
                                                         w
                                                         :
                                                         
                                                            
                                                               w
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               g
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               z
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         ,
                                                         b
                                                         )
                                                         
                                                         ∀
                                                         e
                                                         ∈
                                                         E
                                                      
                                                    according to (17)
                                                
                                             
                                             
                                                9:  compute a shortest path 
                                                      
                                                         
                                                            
                                                               SP
                                                            
                                                            
                                                               w
                                                            
                                                         
                                                         (
                                                         v
                                                         )
                                                      
                                                    from v to r in 
                                                      
                                                         〈
                                                         G
                                                         ,
                                                         w
                                                         〉
                                                      
                                                   
                                                
                                             
                                             
                                                10: 
                                                   if there is no shortest path then
                                                
                                             
                                             
                                                11:  
                                                   return failed
                                             
                                             
                                                12:  
                                                   end if
                                                
                                             
                                             
                                                13:  
                                                   for 
                                                   
                                                      
                                                         e
                                                         =
                                                         (
                                                         i
                                                         ,
                                                         j
                                                         )
                                                         ∈
                                                         
                                                            
                                                               SP
                                                            
                                                            
                                                               w
                                                            
                                                         
                                                         (
                                                         v
                                                         )
                                                         =
                                                         〈
                                                         v
                                                         ,
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         ,
                                                         …
                                                         ,
                                                         r
                                                         〉
                                                      
                                                    
                                                   do
                                                
                                             
                                             
                                                14:  
                                                   
                                                      
                                                         
                                                            
                                                               u
                                                            
                                                            
                                                               ¯
                                                            
                                                         
                                                         ≔
                                                         
                                                            
                                                               u
                                                            
                                                            
                                                               e
                                                               ,
                                                               
                                                                  
                                                                     μ
                                                                  
                                                                  
                                                                     e
                                                                  
                                                               
                                                               (
                                                               
                                                                  
                                                                     g
                                                                  
                                                                  
                                                                     e
                                                                  
                                                               
                                                               +
                                                               b
                                                               )
                                                            
                                                         
                                                         -
                                                         
                                                            
                                                               g
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                      
                                                    // remaining capacity
                                                
                                             
                                             
                                                15:  
                                                   
                                                      
                                                         
                                                            
                                                               b
                                                            
                                                            
                                                               ¯
                                                            
                                                         
                                                         ≔
                                                         min
                                                         (
                                                         b
                                                         ,
                                                         
                                                            
                                                               u
                                                            
                                                            
                                                               ¯
                                                            
                                                         
                                                         )
                                                      
                                                    // maximum that can be transported
                                                
                                             
                                             
                                                16:  
                                                   
                                                      
                                                         
                                                            
                                                               g
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         ≔
                                                         
                                                            
                                                               g
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               b
                                                            
                                                            
                                                               ¯
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                17:  
                                                   
                                                      
                                                         
                                                            
                                                               z
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         ≔
                                                         
                                                            
                                                               μ
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               g
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                
                                             
                                             
                                                18:  
                                                   if 
                                                   
                                                      
                                                         b
                                                         >
                                                         
                                                            
                                                               u
                                                            
                                                            
                                                               ¯
                                                            
                                                         
                                                      
                                                    
                                                   then// insufficient remaining capacity
                                                
                                             
                                             
                                                19: 
                                                    
                                                   
                                                      
                                                         
                                                            
                                                               b
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         ≔
                                                         
                                                            
                                                               b
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         +
                                                         b
                                                         -
                                                         
                                                            
                                                               u
                                                            
                                                            
                                                               ¯
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                20: 
                                                    
                                                   
                                                      
                                                         
                                                            
                                                               b
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                         ≔
                                                         
                                                            
                                                               b
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               u
                                                            
                                                            
                                                               ¯
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                21: 
                                                    
                                                   goto Line 5
                                             
                                             
                                                22:  
                                                   end if
                                                
                                             
                                             
                                                23:  
                                                   end for
                                                
                                             
                                             
                                                24: end while
                                                
                                             
                                          
                                       
                                    
                                 
                              

Given an integer feasible solution represented by the vector 
                           
                              (
                              z
                              ,
                              y
                              ,
                              f
                              )
                           
                        , we attempt the following Local Improvement strategy. The main steps are given in Algorithm 3.2. Initialize the new solution 
                           
                              (
                              
                                 
                                    z
                                 
                                 
                                    ′
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    ′
                                 
                              
                              ,
                              f
                              
                                 
                                    
                                 
                                 
                                    ′
                                 
                              
                              )
                           
                         as 
                           
                              
                                 
                                    z
                                 
                                 
                                    ′
                                 
                              
                              ≔
                              0
                              ,
                              
                                 
                                    y
                                 
                                 
                                    ′
                                 
                              
                              ≔
                              y
                              ,
                              f
                              
                                 
                                    
                                 
                                 
                                    ′
                                 
                              
                              ≔
                              f
                           
                        . Decompose the flow on each arc a into commodity flows, i.e., compute a flow per customer per arc. Pick an edge 
                           
                              
                                 
                                    e
                                 
                                 
                                    ̃
                                 
                              
                           
                         maximizing 
                           
                              
                                 
                                    c
                                 
                                 
                                    e
                                    ,
                                    
                                       
                                          z
                                       
                                       
                                          e
                                       
                                    
                                 
                              
                           
                        . Those customers k that have a positive flow on this edge 
                           
                              
                                 
                                    e
                                 
                                 
                                    ̃
                                 
                              
                           
                         are removed from the selection, i.e., set 
                           
                              
                                 
                                    y
                                 
                                 
                                    k
                                 
                                 
                                    ′
                                 
                              
                              ≔
                              0
                           
                        . In addition, the flow for these customers is removed from 
                           
                              f
                              
                                 
                                    
                                 
                                 
                                    ′
                                 
                              
                           
                        . Compute the required capacity per edge 
                           
                              
                                 
                                    g
                                 
                                 
                                    ′
                                 
                              
                           
                         on behalf of the reduced flow 
                           
                              f
                              
                                 
                                    
                                 
                                 
                                    ′
                                 
                              
                           
                        . Define the edge weight approximation 
                           
                              w
                           
                         as described by Eq. (17). Let 
                           
                              
                                 
                                    l
                                 
                                 
                                    k
                                 
                              
                           
                         be the length of the shortest path 
                           
                              
                                 
                                    SP
                                 
                                 
                                    w
                                 
                              
                              (
                              k
                              )
                           
                         from k to r for all currently unselected customers, i.e., 
                           
                              
                                 
                                    y
                                 
                                 
                                    k
                                 
                                 
                                    ′
                                 
                              
                              =
                              0
                           
                        . Select customers with small 
                           
                              
                                 
                                    l
                                 
                                 
                                    k
                                 
                              
                           
                         values and add them to a new set 
                           
                              
                                 
                                    y
                                 
                                 
                                    ″
                                 
                              
                           
                         until the combined selection 
                           
                              
                                 
                                    y
                                 
                                 
                                    ′
                                 
                              
                              +
                              
                                 
                                    y
                                 
                                 
                                    ″
                                 
                              
                           
                         satisfies the coverage constraint 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    k
                                    ∈
                                    K
                                 
                              
                              
                                 
                                    p
                                 
                                 
                                    k
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             k
                                          
                                          
                                             ′
                                          
                                       
                                       +
                                       
                                          
                                             y
                                          
                                          
                                             k
                                          
                                          
                                             ″
                                          
                                       
                                    
                                 
                              
                              ⩾
                              
                                 
                                    p
                                 
                                 
                                    0
                                 
                              
                           
                        . Now start the Network Construction (Algorithm 3.1) with the minimum required capacity 
                           
                              
                                 
                                    g
                                 
                                 
                                    ′
                                 
                              
                           
                         and the set of newly selected customers 
                           
                              
                                 
                                    y
                                 
                                 
                                    ″
                                 
                              
                           
                        . The result is a new network design 
                           
                              
                                 
                                    z
                                 
                                 
                                    ′
                                 
                              
                           
                        . Set 
                           
                              
                                 
                                    y
                                 
                                 
                                    ′
                                 
                              
                              ≔
                              
                                 
                                    y
                                 
                                 
                                    ′
                                 
                              
                              +
                              
                                 
                                    y
                                 
                                 
                                    ″
                                 
                              
                           
                        . If the new solution 
                           
                              (
                              
                                 
                                    z
                                 
                                 
                                    ′
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    ′
                                 
                              
                              )
                           
                         has a smaller objective value than the currently best found solution 
                           
                              (
                              z
                              ,
                              y
                              )
                           
                        , the new solution 
                           
                              (
                              
                                 
                                    z
                                 
                                 
                                    ′
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    ′
                                 
                              
                              )
                           
                         becomes the new best solution. Otherwise the edge that had been selected in Line 6 is added to a taboo list T.

In order to achieve more diverse results we alternate the two criteria in Line 6 and Line 21 as follows. The criterion for picking an edge with highest absolute cost 
                           
                              
                                 
                                    c
                                 
                                 
                                    e
                                    ,
                                    
                                       
                                          z
                                       
                                       
                                          e
                                       
                                    
                                 
                              
                           
                         in Line 6 is modified to pick the edge with highest relative cost, i.e.,
                           
                              
                                 
                                    
                                       e
                                    
                                    
                                       ̃
                                    
                                 
                                 ≔
                                 
                                    
                                       arg max
                                    
                                    
                                       e
                                       =
                                       {
                                       i
                                       ,
                                       j
                                       }
                                       ∈
                                       E
                                       ,
                                       (
                                       
                                          
                                             f
                                          
                                          
                                             ij
                                          
                                       
                                       +
                                       
                                          
                                             f
                                          
                                          
                                             ji
                                          
                                       
                                       )
                                       >
                                       0
                                       ,
                                       e
                                       ∉
                                       T
                                    
                                 
                                 (
                                 
                                    
                                       c
                                    
                                    
                                       e
                                       ,
                                       
                                          
                                             z
                                          
                                          
                                             e
                                          
                                       
                                    
                                 
                                 /
                                 
                                    
                                       f
                                    
                                    
                                       e
                                    
                                 
                                 )
                                 .
                              
                           
                        The criterion for choosing new customers with smallest shortest path lengths 
                           
                              
                                 
                                    l
                                 
                                 
                                    k
                                 
                              
                           
                         in Line 21 is modified to choose customers mimizing the ratio of prizes over costs, i.e.,
                           
                              
                                 
                                    
                                       k
                                    
                                    
                                       ̃
                                    
                                 
                                 ≔
                                 arg
                                 
                                    
                                       
                                          max
                                       
                                       
                                          k
                                          ∈
                                          K
                                          ,
                                          
                                             
                                                y
                                             
                                             
                                                k
                                             
                                             
                                                ′
                                             
                                          
                                          +
                                          
                                             
                                                y
                                             
                                             
                                                k
                                             
                                             
                                                ″
                                             
                                          
                                          0
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      k
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      k
                                                   
                                                
                                                +
                                                
                                                   
                                                      l
                                                   
                                                   
                                                      k
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        The two options for these two criteria give four variations of Algorithm 3.2, that are cyclicly repeated, until 20 edges have been considered for deletion without improving the objective value.
                           Algorithm 3.2
                           Local Improvement. 
                                 
                                    
                                       
                                       
                                          
                                             
                                                Input: design 
                                                   
                                                      z
                                                      ∈
                                                      
                                                         
                                                            N
                                                         
                                                         
                                                            |
                                                            E
                                                            |
                                                         
                                                      
                                                   
                                                , customer selection 
                                                   
                                                      y
                                                      ∈
                                                      
                                                         
                                                            {
                                                            0
                                                            ,
                                                            1
                                                            }
                                                         
                                                         
                                                            |
                                                            K
                                                            |
                                                         
                                                      
                                                   
                                                , flow 
                                                   
                                                      f
                                                      ∈
                                                      
                                                         
                                                            R
                                                         
                                                         
                                                            ⩾
                                                            0
                                                         
                                                         
                                                            |
                                                            A
                                                            |
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             1: 
                                                   
                                                      s
                                                      ≔
                                                      0
                                                   
                                                 // improvement counter
                                             
                                          
                                          
                                             2: 
                                                   
                                                      T
                                                      =
                                                      ∅
                                                   
                                                 // taboo list
                                             
                                          
                                          
                                             3: while 
                                                
                                                   
                                                      s
                                                      <
                                                      20
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             4:  
                                                
                                                   
                                                      
                                                         
                                                            z
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ≔
                                                      0
                                                      ,
                                                      
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ≔
                                                      y
                                                      ,
                                                      
                                                      f
                                                      
                                                         
                                                            
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ≔
                                                      f
                                                   
                                                
                                             
                                          
                                          
                                             5:  compute 
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            a
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      ∈
                                                      
                                                         
                                                            R
                                                         
                                                         
                                                            ⩾
                                                            0
                                                         
                                                         
                                                            |
                                                            A
                                                            |
                                                            ×
                                                            |
                                                            K
                                                            |
                                                         
                                                      
                                                   
                                                 such that 
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            k
                                                            ∈
                                                            K
                                                         
                                                      
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            a
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      =
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            a
                                                         
                                                      
                                                      
                                                      ∀
                                                      a
                                                      ∈
                                                      A
                                                   
                                                 // flow decomposition
                                             
                                          
                                          
                                             6:  
                                                
                                                   
                                                      
                                                         
                                                            e
                                                         
                                                         
                                                            ̃
                                                         
                                                      
                                                      ≔
                                                      arg
                                                      
                                                         
                                                            max
                                                         
                                                         
                                                            e
                                                            =
                                                            {
                                                            i
                                                            ,
                                                            j
                                                            }
                                                            ∈
                                                            E
                                                            ,
                                                            (
                                                            
                                                               
                                                                  f
                                                               
                                                               
                                                                  ij
                                                               
                                                            
                                                            +
                                                            
                                                               
                                                                  f
                                                               
                                                               
                                                                  ji
                                                               
                                                            
                                                            )
                                                            >
                                                            0
                                                            ,
                                                            e
                                                            ∉
                                                            T
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     c
                                                                  
                                                                  
                                                                     e
                                                                     ,
                                                                     
                                                                        
                                                                           z
                                                                        
                                                                        
                                                                           e
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 // pick edge 
                                                
                                                   
                                                      
                                                         
                                                            e
                                                         
                                                         
                                                            ̃
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             7: for all 
                                                
                                                   
                                                      k
                                                      ∈
                                                      K
                                                   
                                                 with 
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            (
                                                            ij
                                                            )
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      >
                                                      0
                                                   
                                                 or 
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            (
                                                            ji
                                                            )
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      >
                                                      0
                                                   
                                                 on 
                                                   
                                                      
                                                         
                                                            e
                                                         
                                                         
                                                            ̃
                                                         
                                                      
                                                      =
                                                      {
                                                      i
                                                      ,
                                                      j
                                                      }
                                                   
                                                 
                                                do// reduction
                                             
                                          
                                          
                                             8:  
                                                
                                                   
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            k
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ≔
                                                      0
                                                   
                                                
                                             
                                          
                                          
                                             9:  
                                                
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            a
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ≔
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            a
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      -
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            a
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      
                                                      ∀
                                                      a
                                                      ∈
                                                      A
                                                   
                                                
                                             
                                          
                                          
                                             10:  
                                                end for
                                             
                                          
                                          
                                             11:  
                                                
                                                   
                                                      
                                                         
                                                            g
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ∈
                                                      
                                                         
                                                            R
                                                         
                                                         
                                                            ⩾
                                                            0
                                                         
                                                         
                                                            |
                                                            E
                                                            |
                                                         
                                                      
                                                      ≔
                                                      0
                                                   
                                                 // required capacity
                                             
                                          
                                          
                                             12:  
                                                for all 
                                                
                                                   
                                                      e
                                                      =
                                                      {
                                                      i
                                                      ,
                                                      j
                                                      }
                                                      ∈
                                                      E
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             13:  
                                                
                                                   
                                                      
                                                         
                                                            g
                                                         
                                                         
                                                            e
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ≔
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ij
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ji
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             14:  
                                                end for
                                             
                                          
                                          
                                             15:  
                                                
                                                   
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            ″
                                                         
                                                      
                                                      ≔
                                                      0
                                                   
                                                 // additional customers
                                             
                                          
                                          
                                             16:  
                                                for all 
                                                
                                                   
                                                      k
                                                      ∈
                                                      K
                                                   
                                                 with 
                                                   
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            k
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            k
                                                         
                                                         
                                                            ″
                                                         
                                                      
                                                      =
                                                      0
                                                   
                                                 
                                                do// compute shortest path lengths
                                             
                                          
                                          
                                             17:  define edge weight 
                                                   
                                                      w
                                                      :
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            e
                                                         
                                                      
                                                      (
                                                      
                                                         
                                                            g
                                                         
                                                         
                                                            e
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            z
                                                         
                                                         
                                                            e
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      )
                                                      ∀
                                                      e
                                                      ∈
                                                      E
                                                   
                                                 according to (17)
                                             
                                          
                                          
                                             18:  compute the shortest path 
                                                   
                                                      
                                                         
                                                            SP
                                                         
                                                         
                                                            w
                                                         
                                                      
                                                      (
                                                      k
                                                      )
                                                   
                                                 and denote the length by 
                                                   
                                                      
                                                         
                                                            l
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             19:  
                                                end for
                                             
                                          
                                          
                                             20:  
                                                while 
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            k
                                                            ∈
                                                            K
                                                         
                                                      
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     y
                                                                  
                                                                  
                                                                     k
                                                                  
                                                                  
                                                                     ′
                                                                  
                                                               
                                                               +
                                                               
                                                                  
                                                                     y
                                                                  
                                                                  
                                                                     k
                                                                  
                                                                  
                                                                     ″
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                      <
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             21:  
                                                
                                                   
                                                      
                                                         
                                                            k
                                                         
                                                         
                                                            ̃
                                                         
                                                      
                                                      ≔
                                                      arg
                                                      
                                                         
                                                            min
                                                         
                                                         
                                                            k
                                                            ∈
                                                            K
                                                            ,
                                                            
                                                               
                                                                  y
                                                               
                                                               
                                                                  k
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            +
                                                            
                                                               
                                                                  y
                                                               
                                                               
                                                                  k
                                                               
                                                               
                                                                  ″
                                                               
                                                            
                                                            0
                                                         
                                                      
                                                      
                                                         
                                                            l
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             22:  
                                                
                                                   
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        k
                                                                     
                                                                     
                                                                        ̃
                                                                     
                                                                  
                                                               
                                                               
                                                                  ″
                                                               
                                                            
                                                         
                                                      
                                                      ≔
                                                      1
                                                   
                                                
                                             
                                          
                                          
                                             23:  
                                                end while
                                             
                                          
                                          
                                             24:  
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            z
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      
                                                      f
                                                      
                                                         
                                                            
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                      ≔
                                                   
                                                 Network Construction 
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     g
                                                                  
                                                                  
                                                                     ′
                                                                  
                                                               
                                                               ,
                                                               
                                                                  
                                                                     y
                                                                  
                                                                  
                                                                     ″
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             25:  
                                                
                                                   
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ≔
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            ″
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             26:  
                                                if 
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            e
                                                            ∈
                                                            E
                                                         
                                                      
                                                      
                                                         
                                                            c
                                                         
                                                         
                                                            e
                                                            ,
                                                            
                                                               
                                                                  z
                                                               
                                                               
                                                                  e
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            k
                                                            ∈
                                                            K
                                                         
                                                      
                                                      
                                                         
                                                            c
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     y
                                                                  
                                                                  
                                                                     k
                                                                  
                                                                  
                                                                     ′
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                      <
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            e
                                                            ∈
                                                            E
                                                         
                                                      
                                                      
                                                         
                                                            c
                                                         
                                                         
                                                            e
                                                            ,
                                                            
                                                               
                                                                  z
                                                               
                                                               
                                                                  e
                                                               
                                                            
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            k
                                                            ∈
                                                            K
                                                         
                                                      
                                                      
                                                         
                                                            c
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      (
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      )
                                                   
                                                 
                                                then// improvement
                                             
                                          
                                          
                                             27:  
                                                
                                                   
                                                      z
                                                      ≔
                                                      
                                                         
                                                            z
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      
                                                      y
                                                      ≔
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      
                                                      f
                                                      ≔
                                                      f
                                                      
                                                         
                                                            
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                 // keep new best solution
                                             
                                          
                                          
                                             28:  
                                                
                                                   
                                                      i
                                                      =
                                                      0
                                                   
                                                
                                             
                                          
                                          
                                             29:  
                                                else// no improvement
                                             
                                          
                                          
                                             30:  
                                                
                                                   
                                                      i
                                                      ≔
                                                      i
                                                      +
                                                      1
                                                   
                                                
                                             
                                          
                                          
                                             31:  
                                                
                                                   
                                                      T
                                                      ≔
                                                      T
                                                      ∪
                                                      {
                                                      
                                                         
                                                            e
                                                         
                                                         
                                                            ̃
                                                         
                                                      
                                                      }
                                                   
                                                 // the edge from Line 6 becomes taboo
                                             
                                          
                                          
                                             32:  
                                                end if
                                             
                                          
                                          
                                             33: end while
                                             
                                          
                                          
                                             34: return 
                                                
                                                   
                                                      (
                                                      z
                                                      ,
                                                      y
                                                      ,
                                                      f
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

As stated in Section 3, the Network Construction phase followed by the Local Improvement Phase is repeated in a multi-start fashion. To get a wide variation in the solutions during multi-starting we implemented the following modifications to the base algorithms provided in Sections 3.2 and 3.3.

For some PC-LAN instances it is advantageous to send the flow to groups of customers along the same path. If economies of scale are given, as is frequently the case with this type of network design problems, larger modules have a smaller relative cost 
                           
                              
                                 
                                    u
                                 
                                 
                                    e
                                    ,
                                    m
                                 
                              
                              /
                              
                                 
                                    c
                                 
                                 
                                    e
                                    ,
                                    m
                                 
                              
                           
                         than smaller modules. In situations like this the Network Construction heuristic described in Section 3.2 should be modified to first cluster some neighboring demands and second search for a routing to the access point for the combined demands. On the other hand, sometimes the opposite is true: Economies of scale are not given. For example, when smaller modules represent existing infrastructure and larger modules represent new connections that involve a high setup cost. For these problems it can be crucial to facilitate the existing infrastructure as much as possible and avoid the larger modules. Under these circumstances the heuristic should do the opposite of routing clustered demands together. Instead, it would be better to split the given demands apart and route the partial demands individually in order to facilitate the existing infrastructure in an optimal way.

In order to accommodate for these two contradicting ideas, we employ several variants of the basic algorithm from Section 3.2.2. To enable a clustering of demands, the loop in Lines 13–23 of Algorithm 3.1 is changed so that the installation is not necessarily done along the whole path right from v to the central office r, but instead stops at some earlier node j. Two criteria are used to select j: (i) j is the first node with a positive demand 
                           
                              
                                 
                                    b
                                 
                                 
                                    j
                                 
                              
                              >
                              0
                           
                         encountered along the path, or (ii) j is at most q edges away from v. Observe that the demands are clustered if criterion (i) is applied and the parameter q is set to a small number. To implement this variant, these next instructions are inserted between Lines 22 and 23:
                           
                              
                                 
                                 
                                    
                                       
                                          if criterion (i) or (ii) then
                                       
                                    
                                    
                                       
                                           
                                          
                                             
                                                
                                                   
                                                      b
                                                   
                                                   
                                                      j
                                                   
                                                
                                                ≔
                                                
                                                   
                                                      b
                                                   
                                                   
                                                      j
                                                   
                                                
                                                +
                                                b
                                             
                                          
                                       
                                    
                                    
                                       
                                           
                                          goto Line 5
                                    
                                    
                                       
                                          end if.
                                    
                                 
                              
                           
                        
                     

The idea of this clustering is to merge customers that are close to each other with respect to the stepwise edge cost function. To provide an anti-clustering variant of the algorithm, two additional modifications of the algorithm are introduced. The first is a redefinition of the node demands. Instead of one number 
                           
                              
                                 
                                    b
                                 
                                 
                                    v
                                 
                              
                           
                         per node v, we use a list of subdemands 
                           
                              
                                 
                                    B
                                 
                                 
                                    v
                                 
                              
                              =
                              {
                              
                                 
                                    b
                                 
                                 
                                    v
                                    ,
                                    1
                                 
                              
                              ,
                              
                                 
                                    b
                                 
                                 
                                    v
                                    ,
                                    2
                                 
                              
                              ,
                              …
                              }
                           
                         for every node that can be treated independently. The initialization in Line 1 changes to.
                           
                              
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      B
                                                   
                                                   
                                                      k
                                                   
                                                
                                                ≔
                                                {
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      k
                                                   
                                                
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      k
                                                   
                                                
                                                }
                                             
                                           for all 
                                             
                                                k
                                                ∈
                                                K
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      B
                                                   
                                                   
                                                      v
                                                   
                                                
                                                ≔
                                                ∅
                                             
                                           for all 
                                             
                                                v
                                                ∈
                                                V
                                                ⧹
                                                K
                                             
                                          .
                                    
                                 
                              
                           
                        
                     

In Line 5, one of the subdemands 
                           
                              
                                 
                                    b
                                 
                                 
                                    v
                                    ,
                                    t
                                 
                              
                           
                         of a node v with at least one positive subdemand is chosen and Lines 6–7 become.
                           
                              
                                 
                                 
                                    
                                       
                                          
                                             
                                                b
                                                ≔
                                                
                                                   
                                                      b
                                                   
                                                   
                                                      v
                                                      ,
                                                      t
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      B
                                                   
                                                   
                                                      v
                                                   
                                                
                                                ≔
                                                
                                                   
                                                      B
                                                   
                                                   
                                                      v
                                                   
                                                
                                                ⧹
                                                {
                                                
                                                   
                                                      b
                                                   
                                                   
                                                      v
                                                      ,
                                                      t
                                                   
                                                
                                                }
                                             
                                          .
                                    
                                 
                              
                           
                        
                     

The update of the node demands in case of insufficient remaining capacity in Lines 19 and 20 becomes:
                           
                              
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      B
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ≔
                                                
                                                   
                                                      B
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ∪
                                                {
                                                b
                                                -
                                                
                                                   
                                                      u
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                                }
                                             
                                          ,
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      B
                                                   
                                                   
                                                      j
                                                   
                                                
                                                ≔
                                                
                                                   
                                                      B
                                                   
                                                   
                                                      j
                                                   
                                                
                                                ∪
                                                {
                                                
                                                   
                                                      u
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                                }
                                             
                                          .
                                    
                                 
                              
                           
                        
                     

Whereas the update of node demands in case of criterion (i) or (ii), introduced above, becomes:
                           
                              
                                 
                                 
                                    
                                       
                                          if criterion (i) or (ii) then
                                       
                                    
                                    
                                       
                                           
                                          
                                             
                                                
                                                   
                                                      B
                                                   
                                                   
                                                      j
                                                   
                                                
                                                ≔
                                                
                                                   
                                                      B
                                                   
                                                   
                                                      j
                                                   
                                                
                                                ∪
                                                {
                                                b
                                                }
                                             
                                          ;
                                    
                                    
                                       
                                           
                                          goto Line 5
                                    
                                    
                                       
                                          end if.
                                    
                                 
                              
                           
                        
                     

The second modification to help with anti-clustering is to initially split the demands in two 
                           
                              
                                 
                                    B
                                 
                                 
                                    k
                                 
                              
                              =
                              {
                              
                                 
                                    y
                                 
                                 
                                    k
                                 
                              
                              
                                 
                                    d
                                 
                                 
                                    k
                                 
                              
                              /
                              2
                              ,
                              
                                 
                                    y
                                 
                                 
                                    k
                                 
                              
                              
                                 
                                    d
                                 
                                 
                                    k
                                 
                              
                              /
                              2
                              }
                           
                         or three 
                           
                              
                                 
                                    B
                                 
                                 
                                    k
                                 
                              
                              =
                              {
                              
                                 
                                    y
                                 
                                 
                                    k
                                 
                              
                              
                                 
                                    d
                                 
                                 
                                    k
                                 
                              
                              /
                              3
                              ,
                              
                                 
                                    y
                                 
                                 
                                    k
                                 
                              
                              
                                 
                                    d
                                 
                                 
                                    k
                                 
                              
                              /
                              3
                              ,
                              
                                 
                                    y
                                 
                                 
                                    k
                                 
                              
                              
                                 
                                    d
                                 
                                 
                                    k
                                 
                              
                              /
                              3
                              }
                           
                         partial demands in Line 1.

A specific variant of the Network Construction algorithm can be chosen with four parameters:
                           
                              •
                              Activate criterion (i), or do not activate it.

Select a value for 
                                    
                                       q
                                       ∈
                                       {
                                       1
                                       ,
                                       …
                                       ,
                                       |
                                       V
                                       |
                                       }
                                    
                                  for criterion (ii).

Join node demands by using one value 
                                    
                                       
                                          
                                             b
                                          
                                          
                                             v
                                          
                                       
                                    
                                  per node, or do not join but use a list of values 
                                    
                                       
                                          
                                             B
                                          
                                          
                                             v
                                          
                                       
                                    
                                 .

Select a splitting ratio 
                                    
                                       ∈
                                       {
                                       1
                                       ,
                                       2
                                       ,
                                       3
                                       }
                                    
                                  for the initial definition of node demands.

Each time the Network Construction algorithm is executed, a specific variant is chosen by the means of a learning adaptation mechanism known as Reactive Search Optimization. Initially pre-specified settings for the four parameters are used. Then the settings for the parameters are varied from a diversification of the settings towards an intensification. That is, from randomly perturbed settings towards settings that have produced the best objective values so far.

This section discusses the performance of the approaches described in Section 3 on two sets of benchmark instances: (i) small instances that are graphs generated by Salman et al. (2008) and used for testing the LAN problem, and (ii) new set of large-scale instances arising from the real-world motivation of our research. The computations are performed on a computer with Intel Xeon 2.6gigahertz and 3gigabytes RAM. We have used CPLEX 12.2 to solve the linear programs and also as a MIP framework.

This is a group of 60 randomly generated problems originally published in Salman (2000). They were also used in Salman et al. (2008), Berger, Gendron, Potvin, Raghavan, and Soriano (2000), and Ljubić et al. (2012). The instances contain 20, 30 and 40 nodes and there are 12 groups in total with 5 instances per group. There are 9 cable types obeying economies of scale in each of the instances. The cheapest cable type has a capacity of 6. The convex combinations of these cable types generate up to 
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                k
                                                ∈
                                                K
                                             
                                          
                                          
                                             
                                                d
                                             
                                             
                                                k
                                             
                                          
                                          /
                                          6
                                       
                                    
                                 
                              
                            modules. See Berger et al. (2000) and Salman et al. (2008) for a detailed description. The groups are created according to the number of nodes, location of the root node (‘c’ being central, or ‘r’ being random position), and the level of demand (‘l’ stands for low demand, which is randomly generated between 0 and 30; ‘h’ stands for high demand, randomly generated between 0 and 60).

Starting from real-world inputs, we have generated three new large-sized benchmark instances using real-world locations. The instances are named A, B and C. The number of nodes in our instances is 86,745, 48,247 and 77,329, respectively. The number of edges is 116,750, 65,304 and 107,696 and the number of potential customers is 1157, 720 and 1498, respectively. The other features of the PC-LAN instances are generated following the procedure described here. We are given three types of nodes: physical locations of customers, location of the central office and locations of intermediate nodes. For each customer location, we are given the number of subscribers associated to this location. Usually, several splitter devices with various splitting ratios (e.g., 1:4, 1:16, 1:32) are available. Their costs obey economies of scales. For example, to connect 16 subscribers, a device must be installed that costs €2000 and one optical fiber should come in that building. To connect a building with 17 subscribers, a device that costs €3000 and 2 fibers are needed and this larger device is sufficient to support up to 32 subscribers. It is not feasible to connect only a fraction of subscribers at the customer node. Instead, decisions have to be made whether all subscribers or none of them are going to be served. This allows for preprocessing of input data and exact calculation of customers’ demands and the corresponding set-up costs.

These instances consider three types of links: existing fibers, existing ducts and public streets. Existing and currently unused optical fiber cables can be used with a very small cost. In existing ducts, a limited number of additional cables can be installed for relatively little cost. Along street segments, new trenches can be built and new ducts and cables can be laid. In addition to the cost for the ducts and cables there is a significant overhead cost for new trenches. Different cable technologies are available. They differ in terms of the number of fibers per cable and cost per meter. Existing fiber and existing ducts can be used simultaneously. If new trenches are dug, any existing infrastructure is removed and replaced by the new installations.

In addition the practical situation will be further complicated by the availability of different cable technologies. They can provide different numbers of fibers per cable. Other more expensive technologies can provide the same number of fibers in a cable of smaller diameter. Using these would allow to put more cables, hence more fibers in an existing duct. Furthermore between two locations, there will sometimes be different existing ducts. Independent decisions about how many cables of which technology to put into each of them will lead to many different possible combinations. Taking these aspects into account, we pre-computed the available modules for each edge. The minimum, average and maximum number of modules per edge in instance A are 3, 9 and 131, respectively. For instance B they are 3, 9 and 84 and for instance C, 3, 10 and 161. This shows the high diversity in the input data defining our instances.

We considered values of 
                              
                                 α
                                 ∈
                                 {
                                 0.4
                                 ,
                                 0.5
                                 ,
                                 0.6
                                 ,
                                 0.7
                                 ,
                                 0.8
                                 ,
                                 0.9
                                 ,
                                 1.0
                                 }
                              
                           . Hence the set of benchmark instances contains 21 examples of PC-LAN.

We first present the results of our branch-and-cut algorithm on the set of small instances. For the set of small instances, the main results are summarized in Table 1
                         and Fig. 3
                        . We consider the following two settings: (1) BC+, which is the branch-and-cut approach with the MIP heuristic as described in Section 3, and (2) BC, which is the branch-and-cut approach with the default CPLEX heuristics. For each of the 12 groups in Table 1 we report the following values: “c/r” and “h/l” columns describe the type of instances (as explained above). In addition, for the two branch-and-cut settings, with and without our proposed MIP-heuristic, we report the following values: the first obtained percentage gap at the root node (
                           
                              
                                 
                                    gap
                                 
                                 
                                    f
                                 
                              
                              [
                              %
                              ]
                           
                        ) and the time in CPU seconds when this gap is achieved (
                           
                              
                                 
                                    t
                                 
                                 
                                    f
                                 
                              
                              [
                              s
                              ]
                           
                        ), gap at the root node (
                           
                              
                                 
                                    gap
                                 
                                 
                                    r
                                 
                              
                              [
                              %
                              ]
                           
                        ) and the time in CPU seconds needed to solve the LP-relaxation at the root node (
                           
                              
                                 
                                    t
                                 
                                 
                                    r
                                 
                              
                              [
                              s
                              ]
                           
                        ), and the final gap obtained after the time limit of 1000seconds is reached (
                           
                              gap
                              [
                              %
                              ]
                           
                        ). The value 
                           
                              t
                              [
                              s
                              ]
                           
                        ) provides the total running time. All values are averaged over 5 instances per each group. Let LB denote the best lower bound (or the optimal solution, if known) of an instance, and let UB be the value of a feasible solution. The reported gaps are calculated as 
                           
                              100
                              (
                              UB
                              -
                              LB
                              )
                              /
                              UB
                           
                        .

Additional information regarding the performance of the two branch-and-cut settings is available at Fig. 3. Each point 
                           
                              (
                              x
                              ,
                              y
                              )
                           
                         on these charts is to be interpreted as follows: y% of all instances obtained the gap which is 
                           
                              ⩽
                              x
                           
                        . Three charts correspond to the: first gaps at the root node, gaps at the root node and final gaps after 1000seconds, respectively.

Summarizing the information of Table 1 and Fig. 3 we conclude that at the beginning of the optimization process, BC+finds feasible solutions of relatively good quality much faster than the BC setting with the default CPLEX heuristic. More precisely, in less than a second, BC+obtains solutions that are at most 4% above the lower bounds, on average. At the same time, BC needs a few seconds to detect solutions that are between 13% and 185% above the lower bounds, on average. Even after finishing the complete cutting plane phase at the root node, there are still significant differences in the quality of upper bounds obtained by BC+and those obtained by BC (cf. Fig. 3(b)). This can also be observed by comparing the columns denoted by 
                           
                              
                                 
                                    gap
                                 
                                 
                                    r
                                 
                              
                              [
                              %
                              ]
                           
                         in Table 1 for the two settings. Finally, if sufficient running time is available, then both approaches succeed in closing the gap, and we observe that BC+becomes more successful with the increasing instance size.

In this section we hybridize the proposed cutting plane approach with the multi-start heuristic, in order to provide high-quality solutions for large-scale instances and to give the certificate of their quality at the same time. For this purpose, we ran the code for 10hours with particular settings described below.

In preliminary experiments, we tested different configurations and selected the following scheme of alternating two configurations, that worked best for our instances. In configuration (I), we favor connectivity cuts, and to this end we produce at most two nested cut-set inequalities (9) and at most 2000 nested connectivity cuts (10). In the second configuration (II), we separate at most 20 nested cut-set inequalities (9) and do not generate connectivity cuts. We apply configuration (I) iteratively until no more violated inequalities are found, or until the improvement of the objective value in the last ten iterations is too small. Then we apply configuration (II) iteratively until no more violated inequalities are found, or until the improvement is too small. Let o be the current objective value, let 
                              
                                 
                                    
                                       o
                                    
                                    
                                       I
                                    
                                 
                              
                            be the objective value derived ten iterations ago with configuration (I), and let 
                              
                                 
                                    
                                       o
                                    
                                    
                                       II
                                    
                                 
                              
                            be the objective value derived ten iterations ago with configuration (II). The relative improvement for configuration (I) is said to be too small once 
                              
                                 (
                                 o
                                 -
                                 
                                    
                                       o
                                    
                                    
                                       I
                                    
                                 
                                 )
                                 /
                                 o
                              
                            drops below 
                              
                                 ∊
                                 =
                                 
                                    
                                       10
                                    
                                    
                                       -
                                       4
                                    
                                 
                              
                           . Note that 
                              
                                 (
                                 o
                                 -
                                 
                                    
                                       o
                                    
                                    
                                       I
                                    
                                 
                                 )
                                 /
                                 o
                              
                            may again become greater than 
                              
                                 ∊
                              
                            while configuration (II) is active. Thus the algorithm may switch back to configuration (I) and vice versa. Once no connectivity cuts, nor cut-set inequalities exist, or both values 
                              
                                 (
                                 o
                                 -
                                 
                                    
                                       o
                                    
                                    
                                       I
                                    
                                 
                                 )
                                 /
                                 o
                              
                            and 
                              
                                 (
                                 o
                                 -
                                 
                                    
                                       o
                                    
                                    
                                       II
                                    
                                 
                                 )
                                 /
                                 o
                              
                            are below 
                              
                                 ∊
                              
                           , we resort to branching.

To measure the impact of the MIP information in our heuristic approach we have also designed an alternative heuristic variant which does not make use of a MIP solver. This variant may be of interest for practical purposes since a company may desire not to purchase and install a black-box MIP solver in order to heuristically solve instances. Our non-MIP variant works as follows.
                              
                                 1.
                                 Compute a selection of customers 
                                       
                                          y
                                       
                                     that satisfies the coverage constraint (4).

This is done similarly to the customer selection in the Local Improvement Algorithm 3.2, Lines 15–23. Since there are no currently selected customers, this set is empty 
                                       
                                          
                                             
                                                y
                                             
                                             
                                                ′
                                             
                                          
                                          =
                                          0
                                       
                                    . Also, initially there is no current installation, i.e., 
                                       
                                          
                                             
                                                z
                                             
                                             
                                                ′
                                             
                                          
                                          =
                                          0
                                       
                                     and no minimum required capacity, i.e., 
                                       
                                          
                                             
                                                g
                                             
                                             
                                                ′
                                             
                                          
                                          =
                                          0
                                       
                                    . Now 
                                       
                                          y
                                          ≔
                                          
                                             
                                                y
                                             
                                             
                                                ″
                                             
                                          
                                       
                                     denotes a customer selection, feasible with respect to inequality (4).

Apply the construction phase 3.2.2 on 
                                       
                                          y
                                       
                                     and no initial required capacity, i.e., 
                                       
                                          
                                             
                                                g
                                             
                                             
                                                ∗
                                             
                                          
                                          =
                                          0
                                       
                                    
                                 

These two steps compensate for the missing fractional solution in the algorithmic framework.

This section compares the MIP-based approach described in Section 3 and the non-MIP variant when solving our benchmark instances. We apply a time limit of 10hours for both approaches. The MIP-based approach applies only the Cutting Plane phase in the first 2hours. In the remaining 8hours, every Cutting Plane phase is followed by multi-starting Network Construction, followed by Local Improvement as long as a better solution is produced. Inside the Local Improvement, the removal of different edges is repeatedly tried, until 20 recent attempts did not improve the solution. The non-MIP approach multi-starts until the time limit of 10hours is up. Inside the Local Improvement the iteration continues until the solution has not improved in the 200 recent attempts.


                           Table 2
                            compares the performance of the MIP heuristic and the non-MIP variant. For the three instances (A, B and C) and for each coverage rates the following results are reported:
                              
                                 •
                                 
                                    
                                       
                                          #
                                       
                                     is the instance character.


                                    
                                       
                                          α
                                       
                                     is the coverage rate.


                                    LB gives the lower bound obtained while running the MIP-based heuristic.


                                    UB gives the best upper bound obtained by the MIP-based heuristic or the non-MIP variant.


                                    Gap shows the optimality gap 
                                       
                                          (
                                          UB
                                          -
                                          LB
                                          )
                                          /
                                          UB
                                       
                                     in percent.


                                    
                                       
                                          
                                             
                                                Gap
                                             
                                             
                                                MIP
                                             
                                          
                                       
                                     denotes the relative distance 
                                       
                                          (
                                          
                                             
                                                UB
                                             
                                             
                                                MIP
                                             
                                          
                                          -
                                          UB
                                          )
                                          /
                                          UB
                                       
                                     in percent, where 
                                       
                                          
                                             
                                                UB
                                             
                                             
                                                MIP
                                             
                                          
                                       
                                     is the upper bound obtained by the MIP-based heuristic.


                                    
                                       
                                          
                                             
                                                Gap
                                             
                                             
                                                non
                                             
                                          
                                       
                                     denotes the relative distance 
                                       
                                          (
                                          
                                             
                                                UB
                                             
                                             
                                                non
                                             
                                          
                                          -
                                          UB
                                          )
                                          /
                                          UB
                                       
                                     in percent, where 
                                       
                                          
                                             
                                                UB
                                             
                                             
                                                non
                                             
                                          
                                       
                                     is the upper bound obtained by the non-MIP variant.


                                    
                                       
                                          |
                                          
                                             
                                                V
                                             
                                             
                                                ∗
                                             
                                          
                                          |
                                       
                                     gives the number of nodes in the best solution with value UB.


                                    
                                       
                                          |
                                          
                                             
                                                V
                                             
                                             
                                                1
                                             
                                             
                                                ∗
                                             
                                          
                                          |
                                       
                                     gives the number of nodes in the best solution with in-degree greater than 1, where edges are understood to be oriented in the direction of a flow from r to the customers.

A value of 0.00 in 
                              
                                 
                                    
                                       Gap
                                    
                                    
                                       MIP
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       Gap
                                    
                                    
                                       non
                                    
                                 
                              
                            implies that the corresponding heuristic approach found the best upper bound. Bold values indicate which of the approaches provides the best upper bound. A value of 0 in column 
                              
                                 |
                                 
                                    
                                       V
                                    
                                    
                                       1
                                    
                                    
                                       ∗
                                    
                                 
                                 |
                              
                            would imply that the solution is a tree, thus this column gives a measure of deviation from tree.

For none of the 21 instances the MIP-based approach finished the root node of the branch and bound tree in the time limit of 10hours. Table 2 shows that the MIP-based heuristic found the best solution in 14 out of the 21 instances. The average value of 
                              
                                 
                                    
                                       Gap
                                    
                                    
                                       MIP
                                    
                                 
                              
                            is 0.52 while the average value of 
                              
                                 
                                    
                                       Gap
                                    
                                    
                                       non
                                    
                                 
                              
                            is 5.67. So on average the MIP-based heuristic is closer to the best found solution than the non-MIP variant. And also the largest advancement of MIP over non-MIP is more pronounced than the other way around. The largest advancement of the MIP aproach over the non-MIP approach, seen for C with 
                              
                                 α
                                 =
                                 0.5
                              
                            is 
                              
                                 |
                                 
                                    
                                       Gap
                                    
                                    
                                       non
                                    
                                 
                                 -
                                 
                                    
                                       Gap
                                    
                                    
                                       MIP
                                    
                                 
                                 |
                                 =
                                 18.94
                              
                           . While the largest improvement of the non-MIP approach over the MIP-approach, seen for B with 
                              
                                 α
                                 =
                                 1.0
                              
                            is 3.01. The MIP-based heuristic is clearly better on instances with smaller values of 
                              
                                 α
                              
                           , which can be seen from the relatively larger distances of 
                              
                                 
                                    
                                       Gap
                                    
                                    
                                       non
                                    
                                 
                              
                           . This can be explained by the fact that our MIP-based heuristic is better designed to exploit the combinatorial nature of the problem by selecting the appropriate subset of customers, guided by the LP-information. On pure LAN instances, all customers have to be served, i.e., 
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 1
                              
                           , for all 
                              
                                 i
                                 ∈
                                 K
                              
                           , and therefore the advantage of using the LP-information is not given anymore. Similar situation happens for large coverage values, where many of y-variables are close to one.

Comparing the growth of the cost of the optimal solution (by assuming that the provided lower bound are safe estimates of the optimal values), we observe that increasing the coverage rate by 10%, may lead to the total increase of the investment cost by more than 100% (cf. instance A, and the increase from 
                              
                                 α
                                 =
                                 0.9
                              
                            to 
                              
                                 α
                                 =
                                 1.0
                              
                           ). In the remaining two instances, the corresponding increase from the coverage of 90% to the full coverage, results in the increase of the investment cost by more than 50%. This clearly explains why the decision makers prefer the PC-LAN model over the LAN model when deploying the local access networks. Typical coverage values considered by decision makers clearly depend on the available budget, but they usually range between 60% and 90%.

To take a closer look at the performance of the two heuristic approaches during the 10h, we have selected two plots, one with the coverage rate of 70%, where the MIP-heuristic significantly outperforms the non-MIP variant, and one with the coverage rate of 100%, where the MIP-heuristic gives a solution which is 1% worse than the best solution found by the non-MIP variant. However, the advantage of the MIP-heuristic is that it also provides the lower bounds as certificates of the solution quality. We point out that the instance B, which is the smallest among the three considered graphs, contains more than 48,000 of nodes and more than 65,000 of edges, and that the final gaps we report lie between 6.5% and 11.5%. Fig. 4
                            illustrates the performance of the two approaches on the instance B with 
                              
                                 α
                                 =
                                 0.7
                              
                           , where the MIP-based heuristic ends with a better solution than the non-MIP variant. MIP Heuristic - Upper Bound and Lower Bound show a value in every iteration of the MIP approach. Non-MIP - Upper Bound shows a value every time an improved solution is found. A value of 100 for the relative objective value in the figure corresponds to 
                              
                                 
                                    
                                       Gap
                                    
                                    
                                       MIP
                                    
                                 
                                 =
                                 0.0
                              
                            in Table 2. The time is represented in hours. Note that the MIP approach starts with an initial heuristic solution computed similarly to the non-MIP variant. This initial heuristic multi-starts as long as the solution gets better in every iteration. The next 20%, or 2hours of the runtime are spent, iterating in the Cutting Plane phase to build up a set of cutting planes before Network Construction and Local Improvement algorithms are executed. We observe that the non-MIP variant slowly improves the quality of the solution and in the last almost two hours there is no more improvement. In contrast to this, the MIP approach finds a significantly better feasible solution on the first execution of Network Construction and Local Improvement after 2hours. Furthermore, the MIP approach slowly improves the quality of upper and lower bounds providing the final gap of 7.13% between the lower and the upper bound.


                           Fig. 5
                            illustrates the performance on the instance B with coverage rate 1.0, where the non-MIP variant ends with a better solution than the MIP-based heuristic. A value of 100 for the relative objective value in the figure corresponds to 
                              
                                 
                                    
                                       Gap
                                    
                                    
                                       non
                                    
                                 
                                 =
                                 0.0
                              
                            in Table 2. We observe that the non-MIP variant, again, slowly improves the quality of the solution. On the other hand, the MIP approach does not seem to draw a noticeable advantage of the information from the fractional solutions. The MIP approach behaves similar to the non-MIP variant with the exception of investing much of the runtime in cutting planes and LP solutions. Thus it does not quite achieve the same solution quality as the non-MIP variant.


                           Table 3
                            presents further results of the MIP-based heuristic on our 21 instances. The meaning of the columns is the following:
                              
                                 •
                                 
                                    
                                       
                                          
                                             
                                                gap
                                             
                                             
                                                ′
                                             
                                          
                                       
                                     is the percentage deviation between the initial solution value 
                                       
                                          
                                             
                                                UB
                                             
                                             
                                                ′
                                             
                                          
                                       
                                     (before solving the first linear relaxation) and the best lower bound obtained while running the MIP-based heuristic (LB). It is computed as 
                                       
                                          100
                                          (
                                          
                                             
                                                UB
                                             
                                             
                                                ′
                                             
                                          
                                          -
                                          LB
                                          )
                                          /
                                          
                                             
                                                UB
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    .


                                    
                                       
                                          
                                             
                                                Gap
                                             
                                             
                                                MIP
                                             
                                             
                                                ′
                                             
                                          
                                       
                                     denotes the gap of the initial solution before solving the first linear relaxation. As in the previous table, this gap has been calculated with respect to the best upper bound UB, and it is a percentage, i.e. it is computed as 
                                       
                                          100
                                          (
                                          
                                             
                                                UB
                                             
                                             
                                                ′
                                             
                                          
                                          -
                                          UB
                                          )
                                          /
                                          UB
                                       
                                    .


                                    
                                       
                                          
                                             
                                                t
                                             
                                             
                                                MIP
                                             
                                             
                                                ′
                                             
                                          
                                       
                                     is the time (in seconds) to produce the initial solution.


                                    
                                       
                                          
                                             
                                                t
                                             
                                             
                                                MIP
                                             
                                          
                                       
                                     is the total time (in seconds) of the MIP-based heuristic minus the time consumed to compute the lower bound (i.e., separation phase and MIP solver).


                                    
                                       
                                          
                                             
                                                n
                                             
                                             
                                                MIP
                                             
                                          
                                       
                                     gives the number of improved solutions found during the MIP-based heuristic.


                                    
                                       
                                          
                                             
                                                n
                                             
                                             
                                                LP
                                             
                                          
                                       
                                     gives the number of iterations of the cutting-plane algorithm, i.e., the number of LP solutions.


                                    
                                       
                                          n
                                       
                                    
                                    (9) shows the number of generated rounded cut-set inequalities (9).


                                    
                                       
                                          n
                                       
                                    
                                    (10) shows the number of generated connectivity cuts (10).


                                    
                                       
                                          
                                             
                                                n
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                    
                                    (9) shows the average number of generated rounded cut-set inequalities (9) per fractional solution in the second half of the iterations of the cutting-plane algorithm.


                                    
                                       
                                          
                                             
                                                n
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                    
                                    (10) shows the average number of generated connectivity cuts (10) per fractional solution in the second half of the iterations of the cutting-plane algorithm.


                                    
                                       
                                          t
                                       
                                    
                                    (9) shows the time consumed in separating rounded cut-set inequalities (9).


                                    
                                       
                                          t
                                       
                                    
                                    (10) shows the time consumed in separating connectivity cuts (10).

From this table it can bee seen that around half of the total time of 10h (36,000seconds) in the MIP-based heuristic is consumed by the cutting-plane procedure where inequalities are separated and linear programming relaxations are solved. However, as previously observed, this time consumption increases the solution quality when the coverage rate 
                              
                                 α
                              
                            is small. The objective value of the initial heuristic solution computed before the first iteration of the cutting-plane procedure is similar to the objective value of the best solution when 
                              
                                 α
                              
                            is large. In particular, we even observe that on instance A with 1.0 of coverage rate, the initial solution available in the first 5min of the computation was not improved during the whole 10hours of the MIP-based heuristic. The situation is different when the coverage rate is small. Note that the number of generated inequalities (9) and (10) is strongly affected by the separation settings described in Section 2.3.3. We also tested different settings to encourage finding more rounded cut-set inequalities, but the overall performance of the approach was not better. As shown in the table, on average we generate two rounded cut-set inequalities from each fractional solution, which means that configuration (I) was executed once on each cutting-plane iteration. Columns 
                              
                                 
                                    
                                       n
                                    
                                    
                                       ‾
                                    
                                 
                                 
                                    (9)
                                 
                              
                            and 
                              
                                 
                                    
                                       n
                                    
                                    
                                       ‾
                                    
                                 
                                 
                                    (10)
                                 
                              
                            indicate the average numbers of inequalities generated at the end of the cutting-plane process. For example, in the last 30 cutting-plane iterations only an average of 8.1 connectivity cuts are generated when solving instance B with 0.6 coverage rate. Finally, we also observe that the number of separated connectivity cuts (10) increases with the increasing coverage rates.

@&#CONCLUSION@&#

We have proposed a MIP-based approach to solve a new network design problem arising in a telecommunication context where not all customers need to be served. Instead, the company is interested in finding a good feasible solution to reach at least a given percentage. The problem is called PC-LAN and to our knowledge this is the first work to solve it. Based on a mathematical formulation, we propose a branch-and-cut approach. On small instances this approach finds optimal solutions. On large instances it has been adapted to find satisfactory solutions. Our procedure creates feasible solutions from the fractional ones obtained by separating two families of inequalities. A local search approach is used to improve each feasible solution, and all the approach is embedded in a multi-start framework. To measure the convenience of having a MIP solver inside our heuristic approach, we have also implemented a variant without using the cutting-plane ingredient. Our experiments have shown that the MIP-based approach significantly outperforms the non-MIP variant for coverage rates below 
                        
                           α
                           =
                           0.8
                        
                     . These coverage rates are also typical for real-world applications motivating our research.

@&#REFERENCES@&#

