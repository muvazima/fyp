@&#MAIN-TITLE@&#A post-optimization method for the routing and wavelength assignment problem applied to scheduled lightpath demands

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We study the routing and wavelength assignment problem for Scheduled Lightpath Demands (SLDs).


                        
                        
                           
                           We design a post-optimization to solve this problem.


                        
                        
                           
                           We provide an experimental study of this method.


                        
                        
                           
                           This method improves the solutions provided by a heuristic.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Combinatorial optimization

WDM optical networks

Routing and Wavelength Assignment Problem (RWA)

Scheduled Lightpath Demands (SLDs)

Post-optimization

@&#ABSTRACT@&#


               
               
                  We consider here a NP-hard problem related to the Routing and Wavelength Assignment (RWA) problem in optical networks, dealing with Scheduled Lightpath Demands (SLDs). An SLD is a connection demand between two nodes of the network, during a certain time. Given a set of SLDs, we want to assign a lightpath, i.e. a routing path and a wavelength, to each SLD, so that the total number of required wavelengths is minimized. The constraints are the following: a same wavelength must be assigned all along the edges of the routing path of any SLD; at any time, a given wavelength on a given edge of the network cannot be used to satisfy more than one SLD. To solve this problem, we design a post-optimization method improving the solutions provided by a heuristic. The experimental results show that this post-optimization method is quite efficient to reduce the number of necessary wavelengths.
               
            

@&#INTRODUCTION@&#

We consider a problem related to the Routing and Wavelength Assignment (RWA) problem in wavelength division multiplexing (WDM) optical networks; see e.g. Gagnaire, Kuri, and Koubaa (2009), Kuri, Puech, Gagnaire, Dotaro, and Douville (2003), Ramaswami and Sivarajan (2002) or Zheng and Mouftah (2004) for general references. Fibre-optic networking technology using WDM offers the potential of dividing the bandwidth of a fibre into several channels, each at a different optical wavelength, permitting to carry data in parallel. For a given network topology, represented by an undirected graph 
                        
                           G
                        
                     , the RWA problem consists in establishing a set S of traffic demands, also called connection requests, in this network. Different versions of the RWA problem can be found in the literature, depending on the performance metrics and on the traffic assumptions; see for instance (Zang, Jue, & Mukherjee, 2000). Traffic demands may be of three types: static (permanent and known in advance), scheduled (requested for a given period of time and known in advance) and dynamic (unexpected). The typical objectives of RWA can be:
                        
                           –
                           to minimize the required number of wavelengths under given connection requests,

to minimize the blocking probability, i.e. the number of rejected traffic demands, under a given number of wavelengths and dynamic connection requests,

to minimize the maximum number of wavelengths going through a single fibre, also called the lightpath congestion,

to minimize the network load as defined by the fraction of the number of wavelengths used on the overall set of fibre links in the network.

These problems or variants of them have been extensively studied in the last decades; see, among others, (Banerjee & Mukherjee, 1996; Belgacem & Puech, 2008; Chen & Banerjee, 1996; Choi, Golmie, Lapeyere, Mouveaux, & Su, 2000; Jaumard, Meyer, & Thiongane, 2006; Krishnaswamy & Sivarajan, 2001; Kumar & Kumar, 2002; Kuri, 2003; Kuri, Puech, Gagnaire, 2003; Kuri, Puech, Gagnaire, Dotaro et al., 2003; Lee, Kang, Lee, & Park, 2002; Margara & Simon, 2000; Noronha, Resende, & Ribeiro, 2008; Noronha & Ribeiro, 2006; Ramaswami & Sivarajan, 1995; Skorin-Kapov, 2006a, 2006b, 2007, 2008; Zang et al., 2000; Zheng & Mouftah, 2004).

Many of these works consider static demands; the problem is then sometimes called the wavelength dimensioning problem, see for instance (Jaumard et al., 2006) where this problem is studied. In this paper, we deal with the case of a set S of Scheduled Lightpath Demands (SLDs). This is relevant because of the predictable and periodic nature of the traffic load in real transport networks, more intense during working hours, see Kuri, Puech, Gagnaire, Dotaro et al. (2003). This case is also much more difficult than the static one, because of the time constraints which do not exist for static demands.

More precisely, an SLD s belonging to S can be represented by a quadruplet s
                     =(x,
                     y,
                     α,
                     β), where x and y are some vertices of 
                        
                           G
                        
                      (source and destination nodes of the connection request), and where α and β denote the set-up and tear-down dates of the demand. The routing of s
                     =(x,
                     y,
                     α,
                     β) consists in setting up a lightpath (P,
                     w) between x and y, where P is a path, also called route, between x and y in 
                        
                           G
                        
                      and w a wavelength (we do not address here the case where a traffic demand requires several lightpaths). In order to satisfy s, this lightpath must be reserved during all the span of [α,
                     β].

When wavelength converters exist, it is not necessary to use a same wavelength on all the links used by a lightpath. Unfortunately, this entails a lot of expense and hence changes the nature of the problem: the aim is then to determine the placement of these converters so that the overall network cost is minimized; see for instance (Chu, Li, & Chlamtac, 2002). When there are no wavelength converters in the network, as it will be assumed in this paper, the wavelength continuity constraint is imposed: the same wavelength must be used on all the links used by a lightpath. Moreover, at any given time, a wavelength can be used at most once on a given link; in other words, if two demands overlap in time, they can be assigned the same wavelength if and only if their routing paths are disjoint in edges. This constraint is often called the wavelength clash constraint.

We address in this paper the problem consisting in minimizing the number W of wavelengths required to establish all the SLDs. This problem is NP-hard, even if we do not take the time-windows into account; see Chlamtac, Ganz, and Karmi (1992). A solution of this problem is defined by specifying, for each SLD, the lightpath chosen for supporting the connection, i.e. a route and a wavelength, so that there is no conflict between any two lightpaths (let us recall that two lightpaths are in conflict if they use the same wavelength, they have at least one edge in common and the corresponding demands overlap in time). Several approximate or exact methods have been proposed in the literature to deal with this NP-hard problem for static demands or for SLDs; see Gi Ahn, Lee, Chung, and Choo (2005), Jaumard et al. (2006), Kuri, Puech, Gagnaire, Dotaro et al. (2003), Lee et al. (2002), Margara and Simon (2000), Park, Yang, and Bang (2007), Saradhi and Gurusamy (2005), Skorin-Kapov (2006a, 2006b, 2007), Wauters and Demeester (1996) and Zang et al. (2000).

The greedy method proposed by in Skorin-Kapov (2006b), which has been designed initially to deal with the case where SLDs may require several lightpaths simultaneously, gives very satisfying results in a very small amount of time and is, with this respect, among the most efficient heuristics. Its application to our problem, though we do not consider here the case where a traffic demand requires several lightpaths, will be used as a benchmark for measuring the performance of our approach. Indeed we propose in this paper a post-optimization method in order to improve the results given by other heuristics. The CPU time of the overall method will naturally increase, but it will remain acceptable to deal with SLDs: since the demands are known in advance, the allotted time to provide a solution is relatively large (unlike the case where demands are unexpected, and for which routings must be computed dynamically).

The greedy algorithm derived from Skorin-Kapov (2006b) and the post-optimization method are presented in Section 2. In Section 3, we apply these methods on different types of instances and we analyse the obtained results. Finally we conclude in Section 4.

We describe in this section the different heuristics that we apply to deal with RWA. Let us recall that the aim consists in minimizing the number W of wavelengths required to establish a given set S of demands. We first present in Section 2.1 the greedy algorithm derived from Skorin-Kapov (2006b); we propose in Section 2.3 a slight modification of this algorithm so that it can be repeated. The post-optimization method is described in Section 2.2.

The greedy algorithm derived from Skorin-Kapov (2006b) consists in considering the wavelengths one by one, and in trying to route as many SLDs as possible with each wavelength. For each wavelength w, the SLDs are examined following some prescribed order ≺; we set s′≺
                        s if s′ is examined before s.

More precisely, let w be the current wavelength and s
                        =(x,
                        y,
                        α,
                        β) be the current SLD. We consider a graph 
                           
                              H
                              (
                              s
                              )
                           
                         obtained from 
                           
                              G
                           
                         by removing all the edges unavailable for the routing of s with w, i.e. edges that are contained in lightpaths corresponding to SLDs already routed with the wavelength w and which overlap s in time. According to this construction, any edge of 
                           
                              H
                              (
                              s
                              )
                           
                         could be used to route the demand s with wavelength w without inducing any clash with previously established SLDs. Thus, if there exists at least one path between x and y in 
                           
                              H
                              (
                              s
                              )
                           
                        , we attribute the shortest possible path P
                        
                           s
                         to the SLD s as well as the wavelength w; otherwise s is put aside and will be dealt with latter using another wavelength. Then we move up to the next not yet established SLD with respect to the prescribed order.

When all the SLDs have been examined, we move up to the wavelength w
                        +1 and try to route the remaining SLDs. The algorithm stops as soon as all the SLDs have been established, and returns the current value of w.

This algorithm is given in Fig. 1
                         and will be referred to as G.

The post-optimization method presented in this paper aims at improving the results provided by the greedy heuristic depicted above, though it can be applied to any heuristic permitting to solve the addressed problem or even to other variants of this problem. It consists in minimizing the overall values of the wavelengths of the established lightpaths in order to try to minimize the total number of wavelengths W.

The principle of this method is the following: for any w
                        ∈{2,…,
                        W}, we try to empty the set of SLDs routed with w, at least partially; this set will be called the layer w in the following. This is done by trying to assign a smaller wavelength (1,2,…,
                        w
                        −1) to the demands of the layer w, which leads us to rearrange the wavelengths assigned to the SLDs of these lower layers. During this operation, the layers of some SLDs may change but all of them must remain in [1,
                        w
                        −1].

More precisely, let us assume that we want to move the demand s
                        =(x,
                        y,
                        α,
                        β) from its current layer w to a lower layer ℓ (ℓ∈[1,
                        w
                        −1]). It is very likely that some of the demands belonging to the layer ℓ prevent us from routing s with this wavelength. In other words, if we delete from 
                           
                              G
                           
                         all the edges used to establish the demands of this layer which overlap s in time, we may find no path joining x and y. So we consider a graph 
                           
                              H
                              (
                              s
                              )
                           
                        , initially equal to 
                           
                              G
                           
                        , and we examine one after the other the demands s′ of the layer ℓ which overlap s in time. For each such s′, we remove from 
                           
                              H
                              (
                              s
                              )
                           
                         the edges of the path 
                           
                              
                                 
                                    P
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         supporting the connection associated with s′ which are still in 
                           
                              H
                              (
                              s
                              )
                           
                        . If there still exists a path in 
                           
                              H
                              (
                              s
                              )
                           
                         to set up s, we move up to the next demand s′ of the layer ℓ; otherwise s′ is removed from the layer ℓ and put aside in a set E, and we put back the removed edges of 
                           
                              
                                 
                                    P
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         inside 
                           
                              H
                              (
                              s
                              )
                           
                        ; of course, if some edges of 
                           
                              
                                 
                                    P
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         had been removed previously from 
                           
                              H
                              (
                              s
                              )
                           
                         because of former clashing SLDs, they remain removed. Thus, once all demands of the layer ℓ have been examined, it becomes possible to route s using the wavelength ℓ since all the conflicting lightpaths have been (at least temporarily) removed.

We must now deal with the demands of E: we try to place each of these demands in one of the layers 1,…,
                        w
                        −1, without modifying the routing of any other SLD. If a layer can be found for each demand of E, then we have finished with the demand s: s remains in the layer ℓ and the demands of E remain in their new layers, with a lightpath compatible with the ones of the other SLDs of this layer, and we move up to the following demand of the layer w. Otherwise we consider that the attempt to move s to the layer ℓ has failed: layer ℓ is restored as before the attempt to insert s inside, and we try to move s to the next layer ℓ+1. If all the layers from 1 to w
                        −1 have been examined in vain, s remains inside its current layer w, and we move up to the following demand of the layer w.

As all the demands of the current layer w are handled, the number of remaining demands on this layer may decrease, or the layer w may even become totally empty. In the later case, we shift the layers w
                        +1, w
                        +2,…,
                        W to the layers w,w
                        +1,…,
                        W
                        −1, and we have succeeded in saving one wavelength definitively: W becomes W
                        −1.

This method, summarized in Fig. 2
                        , is referred to as the post-optimization algorithm. Let us notice that even if a rearrangement of the layers does not permit to decrease the number W of required wavelengths, it may happen that further applications of the algorithm succeed to do so, because the SLDs are not dispatched in the layers in the same manner from one application to another. In the experiments presented below, we chose to repeat the post-optimization algorithm until four consecutive runs do not decrease W. This choice is based on an experimental observation and arises from a compromise between CPU time and the quality of the computed solutions. The overall heuristic consisting of the greedy algorithm followed by the application of the post-optimization method will be denoted G+ in the rest of the paper.

The introduction of the post-optimization method yields a significant increase in computation time. To evaluate the post-optimization method, we will compare the results provided by the greedy heuristic with or without this post-optimization method. In order to avoid any bias, it is desirable that both methods are given the same amount of CPU time to provide a solution. Thus we propose a slight modification of G in order to make it stochastic (G is deterministic otherwise); then we will be able to compare G+ with a multi-start procedure consisting in repeating G as many times as necessary to attain the same CPU time as the one required by G+.

The principle is straightforward: we propose to consider, for each run of G, a random order for the examination of the SLDs. In Skorin-Kapov (2006b), the demands are ordered with respect to the decreasing numbers of connection requests, which is irrelevant in our context since all the SLDs are assumed to require the establishment of only one lightpath. We have performed some experiments to analyse the effect of the order of the SLDs on the performance of G. Whatever the considered order (increasing or decreasing order of the time window’s width, increasing or decreasing order of the length of a shortest path between the source–destination nodes), the obtained results are not significantly different. The best way to take benefit from the allotted CPU time seems then to generate a random order of the SLDs for each run of G. Of course, the solution returned by this repetition of G will be the best one computed over the different runs of G during this repetition. This repetition of G will be denoted RG.

@&#EXPERIMENTS@&#

In the next three subsections, we report some results that we obtained in our experiments. First, we present in Section 3.1 the detailed results obtained for three graphs. Then, in Section 3.2, we globally give the results obtained for other instances, involving different types of graphs. Thanks to the use of an analytical lower bound, we could find instances for which we know the optimal value for the necessary number of wavelengths; we study the application of our three methods to such instances in Section 3.3.

The three graphs studied in details in Section 3.1 are:
                        
                           –
                           
                              
                                 
                                    G
                                    57
                                 
                              , with 57 vertices and 85 edges, extracted from the European optical transport network; see Fig. 3
                              ;


                              
                                 
                                    G
                                    29
                                 
                              , with 29 vertices and 44 edges, representing a hypothetical North-American backbone network; see Fig. 4
                              ;


                              
                                 
                                    G
                                    200
                                 
                              , with 200 vertices and 239 edges, simulating a large optical network.

The first two graphs are often used to illustrate RWA problems. We have added the graph 
                        
                           G
                           200
                        
                      in order to observe the behaviour of the methods when applied to larger networks. This graph has relatively few edges so that the number of paths that may support a given demand is limited (otherwise the number of required wavelengths is very small).

To enlarge the field of results, we study in Section 3.2 other sets of instances involving three types of graphs, called Y, Z and W, following the classification used in Noronha et al. (2008). Note that the connection requests considered in Noronha et al. (2008) are static ones: there is no time-window defined for such a request. Graphs of type Y are randomly generated, graphs of type Z are defined on torus, graphs of type W are real instances coming from the literature. More precisely, they are defined and generated as in Noronha et al. (2008):
                        
                           –
                           To define a graph of type Y, a number of nodes n and a probability p, i.e. a real number between 0 and 1, are assumed to be given. First, to construct a graph of type Y with these parameters, we connect each pair of nodes with probability p. Then, for each node x of degree less than 2, we randomly add edges incident to x in order to have x of degree 2. Finally, we restrict the diameter of the graph to at most 7, by adding edges between vertices distant of more than 7.

The graphs of type Z are built on a
                              ×
                              b grids embedded on the torus, where a and b are given integers; each node is connected only to its nearest four neighbours. So, the graph is entirely determined by its dimensions a and b; its number of vertices is equal to a
                              ×
                              b and its number of edges is equal to 2×
                              a
                              ×
                              b; the degree of any vertex is equal to 4.

As said above, the graphs of type W are real instances. It is already the case for the graphs 
                                 
                                    G
                                    29
                                 
                               and 
                                 
                                    G
                                    57
                                 
                               described above. We add two graphs downloaded from http://sndlib.zib.de/home.action; one, with 50 vertices and named here 
                                 
                                    G
                                    50
                                 
                              , corresponds to an optical network in Germany; the other, with 65 vertices and named here 
                                 
                                    G
                                    65
                                 
                              , corresponds to an optical graph in Austria.

To find instances for which we know the optimal value, as the instances of Section 3.3, we use an analytical lower bound that we define now; see Skorin-Kapov (2006b). For each vertex x of the considered graph 
                        
                           G
                        
                     , we first determine the list L(x) of the SLDs involving x as their origin or destination. Then, we compute the maximum number M(x) of SLDs belonging to L(x) which must be routed at a same instant: the overall intersection of the time-windows of these M(x) SLDs is not empty. Let b(x) be the ratio of M(x) divided by the degree d(x) of x in 
                        
                           G
                        
                     . The number of wavelengths necessary to satisfy all the demands belonging to L(x) is obviously at least equal to b(x). Then the lower bound B is defined as the maximum of the ceiling of the ratios b(x) over the vertices x of 
                        
                           G
                        
                     :
                        
                           
                              B
                              =
                              
                                 
                                    
                                       max
                                    
                                    
                                       x
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             M
                                             (
                                             x
                                             )
                                          
                                          
                                             d
                                             (
                                             x
                                             )
                                          
                                       
                                    
                                 
                              
                              .
                           
                        
                     
                  

For the instances depicted above, B is always much less than the value obtained by our methods, including when these methods are given much larger CPU times, generally less than the half. Probably, the optimum is also far from B. But, by choosing graphs of type Y with larger numbers of edges than before, we succeeded to find several instances with a solution reaching the lower bound: increasing the number of edges obviously increases the degrees and so B takes lower values; but the number of paths increases still faster and so the required number of wavelengths decreases; for the instances considered here, the required number of wavelengths collapses to B and thus we know that B is the optimum value. Section 3.3 reports the results for seven such instances.

The sets of SLDs are generated randomly so that the number of time-overlaps is significant but not too large (the connection requests in Noronha et al. (2008) or in Skorin-Kapov (2007) are also randomly generated but, since in these papers only static demands are considered, there are no time-windows): if they are too few, there are few clashes between the demands and therefore the addressed problem becomes too easy; on the contrary, if the time-overlaps are too numerous, the number of required wavelengths increases greatly and the problem becomes again less interesting. This can be achieved by drawing the source and destination nodes of each SLD s randomly with a uniform distribution of probabilities over all vertices of the considered graph (of course the two nodes must be different). The set-up and tear-down times of s are chosen in [0,1000]; the centre c of the interval is a real number drawn uniformly in [L,1000−
                     L], with L chosen here between 200 and 300. The time-window of s is then of the form [c
                     −
                     L
                     ×
                     r
                     
                        γ
                     ,
                     c
                     +
                     L
                     ×
                     r
                     
                        γ
                     ], where r is a real number drawn uniformly between 0 and 1, while γ takes the values 2, 3 or 4. By choosing different values for these parameters, we obtain time-windows with more or less pairwise time-overlaps. To be more specific, we give in the next section the proportions of pairwise time-overlaps of the instances detailed in Section 3.1. Anyway, do not forget that a clash between two SLDs comes from both an overlap of their time-windows and from the paths chosen to route the two SLDs. As these ones are not fixed, the number of clashes cannot be fixed in advance.

The experiments reported below have been performed on Solaris Sun stations, namely Sun Ultra 20M2 AMD bicore 3gigahertz. In order to evaluate the three heuristics G, RG and G+ when applied to our instances, we carry out 100 runs of each method for each instance.

We apply the process depicted above to generate three sets of demands for each one of the three graphs 
                           
                              G
                              57
                              ,
                              G
                              29
                           
                         and 
                           
                              G
                              200
                           
                        . These sets contain respectively 500, 1000 and 3000 SLDs. Thus we obtain nine instances. The name of each one is obtained by the concatenation of the name of the graph with the number of SLDs to route; for instance, 
                           
                              G
                           
                        57–500 denotes the instance for which the graph is 
                           
                              G
                           
                        57, with 500 SLDs. The proportions of pairwise time-overlaps are the following: 66% for 
                           
                              G
                           
                        57–500, 49% for 
                           
                              G
                           
                        57–1000, 23% for 
                           
                              G
                           
                        57–3000; 65% for 
                           
                              G
                           
                        29–500, 53% for 
                           
                              G
                           
                        29–1000, 24% for 
                           
                              G
                           
                        29–3000; 40% for 
                           
                              G
                           
                        200–500, 65% for 
                           
                              G
                           
                        200–1000, 37% for 
                           
                              G
                           
                        200–3000.

In the following, we present the results obtained when applying G, RG and G+ to these nine instances. These results are given in Tables 1
                        . For each entry of the first three lines, we specify the best, the average and the worst values of the computed numbers of wavelengths necessary to route the SLDs over the 100 runs, as well as the average CPU time in seconds; the last two lines of each table specify the ratios (W
                        
                           G
                        
                        −
                        W
                        
                           G+)/W
                        
                           G
                         and (W
                        
                           RG
                        
                        −
                        W
                        
                           G+)/W
                        
                           RG
                        , where W
                        
                           G
                        , W
                        
                           RG
                         and W
                        
                           G+ denote the average numbers of wavelengths required to set up all the connections when applying 100 runs of G, RG and G+ respectively.

Let us recall that the method RG consists in repeating the greedy algorithm G as many times as required to attain the same computation time as G+. For example, for the instance 
                           
                              G
                           
                        57–500, G runs in 0.02761second whereas G+ takes 2.68second. Therefore RG is obtained by repeating G 97 times in average, which indeed corresponds to an overall computation time of 2.68second. As said above, the result provided by RG is of course the smallest number of wavelengths obtained during the repetition.

For the nine instances considered here, the gain, more precisely the ratio (W
                        
                           G
                        
                        −
                        W
                        
                           G+)/W
                        
                           G
                        , yielded by the application of G+ with respect to the sole application of the greedy heuristic G exceeds generally 10% (the average gain is equal to 11%), and it reaches nearly 16% for the instance 
                           
                              G
                           
                        200–3000. Even when considering the same CPU time, the gain of G+ with respect to RG, measured similarly by (W
                        
                           RG
                        
                        −
                        W
                        
                           G+)/W
                        
                           RG
                        , remains significant: 7.4% in average, with a maximum of 13.2% for 
                           
                              G
                           
                        200–3000.

We give in Figs. 5–7
                        
                        
                         the distributions of the numbers of required wavelengths obtained over the 100 runs of each method. The x-axis represents the number of required wavelengths W, and the y-axis represents the number of times that each value has been observed.

We see that the CPU time required by G+ is significantly larger than the one required by G. In our experiments, the CPU time required to perform G+ can reach few minutes, whereas it is nearly instantaneous for G (less than one second). From a practical point of view, these computation times remain quite acceptable, especially considering the high complexity of the problem and the large sizes of the instances, since the addressed problem concerns connection requests that are known in advance. Indeed, in this case, a telecommunications operator can easily afford to spend the time required by the application of the post-optimization method in order to save some wavelengths, that will be available to establish further connection requests, for instance unexpected demands.

However, in order to reduce the required time for the application of G+, we may modify the way to deal with the layers during the post-optimization method: instead of examining all the layers in order to empty them as much as possible, we propose to deal with only the layers corresponding to large values of wavelengths. These layers are indeed more likely to yield a gain in the total number of required wavelengths. More precisely, we introduce a parameter i varying from 0 to W; then we examine only the i layers of values W
                        −
                        i
                        +1,…,
                        W
                        −1,
                        W.


                        Figs. 8 and 9
                        
                         give respectively the average number of required wavelengths and the CPU time in seconds with respect to the value of the parameter i for the instance 
                           
                              G
                           
                        57–500 (results turned out to be similar for the other instances). The label N (none) on the x-axis corresponds to the result given by G, whereas the label A (all) corresponds to G+ when all the layers have been rearranged (i
                        =
                        W).

We observe that the CPU time varies almost linearly with respect to the number of rearranged layers i and that the quality of the solution increases when the post-optimization method is applied to more layers. However, this gain is larger for the high layers than for the low layers (the slope of the graph decreases when i increases), as expected. For the considered instance, we see that we could have dealt with only one third, or even one quarter, of the layers, reducing thus the CPU time in the same proportion, without loosing much in terms of quality of the provided solutions. Thus we can choose the number of rearranged layers with respect to the available time. Anyway, in order not to add an extra parameter, we do not adopt this possibility in the following.

We report now the results concerning 12 sets of 100 instances: 4 sets, called 
                           
                              Y
                              1
                              ,
                              Y
                              2
                              ,
                              Y
                              3
                           
                         and 
                           
                              Y
                              4
                           
                        , contain graphs of type Y; 3 sets, called 
                           
                              Z
                              1
                              ,
                              Z
                              2
                           
                         and 
                           
                              Z
                              3
                           
                        , contain graphs of type Z; the other sets contain graphs of type W. For each instance of each set, we apply the methods G and G+, repeating them in order to reach a chosen duration; in the following, RG still denotes the repetition of G. Of course, the result provided at the end is the best value found during the repetition. In these experiments, because of the gap between the CPU times of one application of G and one application of G+ (see Section 3.1), G is repeated a large number of times and the method G+ a small number. In the following, ρ
                        
                           RG
                         and ρ
                        
                           G+ will respectively denote the averages of the number of repetitions of RG and of G+ during the given CPU time.

Remember that any instance of RWA is made of a graph and a set of SLDs. We first explain how the graph of each instance is generated (see above for the specification of the types Y, Z and W).
                           
                              -
                              For each instance of 
                                    
                                       Y
                                       1
                                       ,
                                       Y
                                       2
                                       ,
                                       Y
                                       3
                                    
                                  and 
                                    
                                       Y
                                       4
                                    
                                 , we randomly choose a graph of type Y with the following parameters (note that the probabilities p applied here are similar to the ones in Noronha et al. (2008), which range between 3% and 5%):
                                    
                                       •
                                       for 
                                             
                                                Y
                                                1
                                             
                                          : 150 vertices and a probability equal to 2%;

for 
                                             
                                                Y
                                                2
                                             
                                          : 100 vertices and a probability equal to 3%;

for 
                                             
                                                Y
                                                3
                                             
                                          : 70 vertices and a probability equal to 5%;

for 
                                             
                                                Y
                                                4
                                             
                                          : 40 vertices and a probability equal to 7%.

For 
                                    
                                       Z
                                       1
                                       ,
                                       Z
                                       2
                                    
                                  and 
                                    
                                       Z
                                       3
                                    
                                 , the considered graphs are of type Z (they are grids embedded on a torus). We choose the dimensions of the grids so that the number of vertices is about 100, as in Noronha et al. (2008). More precisely:
                                    
                                       •
                                       for the instances of the first set 
                                             
                                                Z
                                                1
                                             
                                          , the graph is the grid 10×10;

for the instances of the second set 
                                             
                                                Z
                                                2
                                             
                                          , the graph is the grid 17×6;

for the instances of the third set 
                                             
                                                Z
                                                3
                                             
                                          , the graph is the grid 25×4.

So the instances belonging to a given set 
                                    
                                       Z
                                       1
                                       ,
                                       Z
                                       2
                                    
                                  or 
                                    
                                       Z
                                       3
                                    
                                  all share the same graph, but of course the set of SLDs will not be the same.

The last five sets involve graphs of type W. For the first of these five sets, the graph is 
                                    
                                       G
                                       29
                                       ;
                                       G
                                       57
                                    
                                  is the graph associated with the following two sets; the graph of the fourth set is 
                                    
                                       G
                                       50
                                    
                                 ; while 
                                    
                                       G
                                       65
                                    
                                  is the graph of the last set; see their characteristics above. For simplicity, we call 
                                    
                                       G
                                       29
                                       ,
                                       G
                                       57
                                       ,
                                       G
                                       50
                                    
                                  and 
                                    
                                       G
                                       65
                                    
                                  the sets of instances involving respectively the graphs 
                                    
                                       G
                                       29
                                       ,
                                       G
                                       57
                                       ,
                                       G
                                       50
                                    
                                  and 
                                    
                                       G
                                       65
                                    
                                 .

Then for each set of instances, we randomly generate 100 sets of SLDs. For each instance, each SLD of each set of SLDs is randomly generated thanks to the process described above, at the beginning of Section 3. So, the 100 instances of any set of instances are all different. The number of SLDs depends on the studied set. The numbers of SLDs are the following: 1500 SLDs for the sets 
                           
                              Y
                              1
                              ,
                              Y
                              2
                              ,
                              Y
                              3
                           
                         or 
                           
                              Y
                              4
                           
                        ; 2000 SLDs for the sets 
                           
                              Z
                              1
                              ,
                              Z
                              2
                           
                         or 
                           
                              Z
                              3
                           
                        ; 2000 SLDs for the set 
                           
                              G
                              29
                           
                        ; 3000 SLDs for the first set 
                           
                              G
                              57
                           
                        ; 1000 SLDs for the second set 
                           
                              G
                              57
                           
                        ; 1500 SLDs for the two sets 
                           
                              G
                              50
                           
                         and 
                           
                              G
                              65
                           
                        .

For each set, we also choose a CPU time (see below). Note that the CPU time allocated to the repetition of each method can be very large. For example, the CPU time devoted to each instance of the first set 
                           
                              G
                              57
                           
                         is 30minute. It means that it required 100hour of CPU time to deal with the application of both methods to the 100 instances of this set. Because of that, it is impossible to try long CPU times for each instance. Moreover, some other experiments that we performed with other CPU times show that the qualitative conclusions reported below remain the same for these other CPU times. So, instead of reporting all these experiments, we choose to report some of them, with different CPU times ranging from 60second to 1800second according to the considered instance. We prefer to specify the results for different CPU times because it brings diversity and thus a more complete lighting on the behaviour of our method. More precisely, the CPU times are the following for each instance of each set: 60second for 
                           
                              Y
                              1
                              ,
                              Y
                              2
                              ,
                              Y
                              3
                           
                         or 
                           
                              Y
                              4
                           
                        ; 60second for 
                           
                              Z
                              1
                           
                         or 
                           
                              Z
                              2
                           
                        ; 300second for 
                           
                              Z
                              3
                           
                        ; 120second for 
                           
                              G
                              29
                           
                        ; 1800second for each instance of the first set 
                           
                              G
                              57
                           
                        ; 900second for each instance of the second set 
                           
                              G
                              57
                           
                        ; 60second for 
                           
                              G
                              50
                           
                        ; 120second for 
                           
                              G
                              65
                           
                        .

In Table 2
                        , we successively specify for each set of instances: the set of instances, what specifies also the type of the graph involved in these instances; the number n of vertices of the graphs, according to the set; the number m of edges or the average of the number of edges of these graphs; the number nb_SLD of SLDs to route; the given CPU time, in seconds; the averages ρ
                        
                           RG
                         and ρ
                        
                           G+ of the number of repetitions of G and G+ during the given CPU time; the averages of the computed numbers of wavelengths W
                        
                           RG
                         and W
                        
                           G+; the average of the relative gain (W
                        
                           RG
                        
                        − 
                        W
                        
                           G+)/W
                        
                           RG
                        .

These results confirm the ones of Section 3.1. The gains provided by the post-optimization method with respect to RG range here between 6% and almost 13%, with an average of about 10%. For the instances involving 
                           
                              G
                              57
                           
                         as their graphs and with 1000 or 3000 SLDs, we may compare the results obtained when the CPU time is large with the results reported in Section 3.1. In Section 3.1, one application of G+ provided an average gain of 6.04% for 
                           
                              G
                              57
                           
                        -1000 and of 5.35% for 
                           
                              G
                              57
                           
                        -3000 with respect to RG. For 
                           
                              G
                              57
                           
                        -1000, RG was repeated 163 times in average; for 
                           
                              G
                              57
                           
                        -3000, it was repeated 243 times in average. It is sometimes considered that multi-start procedures as RG have a slow convergence and that it is necessary to run them a long time. We observe here that, even with larger numbers of repetitions, namely more than 31,000 times for 1000 SLDs and more than 10,000 times for 3000 SLDs, RG does not provide better results than G+ within a same CPU time. In fact, the gain of G+ with respect to RG is even larger when the CPU time increases: it becomes equal to 8.57% in average for 1000 SLDs instead of 6.04% and to 8.49% for 3000 SLDs instead of 5.35%. We may explain this phenomenon by the fact that, within the same CPU time (15minute for 1000 SLDs and 30minute for 3000 SLDs), the repetition of G+ (G+ is repeated about 107 times for 1000 SLDs and about 13 times for 3000 SLDs) is more beneficial than the one of RG. With this respect, we may consider that the convergence of RG is reached in our experiments. The results of Table 2 show that repeating G+ may improve the results provided by G+, what is not surprising, if greater CPU times are available.

As explained above, the use of the bound B defined at the beginning of Section 3 allowed us to find instances for which we know the optimal value. It is the case for the seven instances of which we report the results now.

These graphs are of type Y. Two have 30 vertices, three have 40 vertices and two have 50 vertices. For each instance, we perform 100 trials. For each trial, we give a CPU time equal to 60second. In Table 3
                        , we give for each instance:
                           
                              –
                              the number n of nodes;

the number m of edges of the graph;

the number nb-SLD of SLDs to route;

the number of repetititions ρ
                                 
                                    RG
                                  of RG and ρ
                                 
                                    G+ of G+ during the 60second;

the minimum number W
                                 
                                    min
                                  of necessary wavelengths;


                                 nb
                                 
                                    i
                                  denotes, for 0⩽
                                 i
                                 ⩽3, the number of times that the best solution provided by the considered method is equal to W
                                 
                                    min
                                 
                                 +
                                 i (for G+, the values nb
                                 
                                    i
                                  which are not specified are egal to zero);

the following two columns give the average of the numbers W
                                 
                                    RG
                                  and W
                                 
                                    G+ of wavelengths computed by RG and by G+ over the 100 trials;

the last column gives the relative gain of G+ with respect to RG.

In a sense, these instances may seem easier than the previous ones. But, even for these easier instances, the post-optimization provides an improvement with respect to RG. The probability to reach the optimum is much larger for G+ than for RG: G+ found the optimum in 78% of the 700 trials summarized in Table 3, versus only 0.7% for RG.

We may observe that the relative gain provided by G+ with respect to RG is always positive in our experiments. More precisely, if we consider only the results reported above, the gain, with the same CPU time, is between about 4% and more than 13%. Another important asset of G+ is illustrated by the histograms of Figs. 5–7 and by Table 3: G+ succeeds in finding some values of W that neither G nor RG can reach during the 100 trials. When the number of SLDs increase, the gap between the histograms of G+ in the one hand and those of G and RG on the other hand becomes larger.

Moreover for heavy loads of traffic demands (1000 or 3000 SLDs according to the considered network), the histograms for G+ become apart completely from the ones of G and RG: the worst solution provided by G+ remains better than the best solution found by G or RG. The same can be observed for several instances of Section 3.3 and many instances of Section 3.2.

@&#CONCLUSION@&#

In this study, we considered a Routing and Wavelength Assignment (RWA) problem in wavelength division multiplexing (WDM) optical networks. More precisely, we considered the problem consisting in minimizing the number of wavelengths required to establish all the Scheduled Lightpath Demands (SLDs). In this aim, we designed a post-optimization method in order to improve a greedy heuristic which is already very efficient.

According to our experimental results, the post-optimization method appears as improving significantly the results given by this greedy heuristic, in a reasonable CPU time, while it is known in combinatorial optimization that reducing the gap between the computed solutions and the optimal ones becomes more and more difficult when going closer to the optimum. Moreover, this method can be applied to any other heuristics to deal with the routing and the wavelength assignment of SLDs, and even to other problems related to RWA in optical transport networks. It will be the topic of our next studies.

@&#REFERENCES@&#

