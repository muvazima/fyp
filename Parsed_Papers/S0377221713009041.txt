@&#MAIN-TITLE@&#Enhanced multi-Hoffmann heuristic for efficiently solving real-world assembly line balancing problems in automotive industry

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We explain how assembly process planning is typically done at Volkswagen.


                        
                        
                           
                           We show that state-of-the-art ALBP solution procedures cannot be fully recommended for real-world.


                        
                        
                           
                           We develop a new ALBP heuristic to cover requirements of real-world.


                        
                        
                           
                           We show that the new procedure is competitive for specialized ALBP versions.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Scheduling

Production

Assembly line

Line balancing

Combinatorial optimizations

Heuristic

@&#ABSTRACT@&#


               
               
                  In production systems of automobile manufacturers, multi-variant products are assembled on paced final assembly lines. The assignment of operations to workplaces and workers deter mines the productivity of the manufacturing process. In research, various exact and heuristic solution procedures have been developed for different versions of the so-called assembly line balancing problem.
                  This paper shows that there is almost no solution procedure so far, which includes all line balancing restrictions occurring in real-world settings. We present a new general and flexible as well as fast heuristic procedure which meets all relevant requirements of line balancing in automotive industry. It is based on the successful multi-Hoffmann heuristic of Fleszar and Hindi [European Journal of Operational Research 145/3 (2003), 606–620] which is enhanced and extended to consider the required restrictions. Computational experiments show that the new procedure is competitive to state-of-the-art procedures even for specialized problems and able to compute high-quality feasible solutions in different test settings typical in real-world decision situations.
               
            

@&#INTRODUCTION@&#

In production systems of automobile manufacturers, multi-variant products are assembled on paced mixed-model assembly lines flexible enough to manufacture all products in an intermixed sequence. These variations might result from different product models (car models like, e.g., Passat and Golf at Volkswagen) and/or from different product options (like manual, automatic or no sunroof). Due to a large number of combinable options offered, incredibly large numbers of product variants can be demanded by customers such that, typically, none of the car orders is identical to another one per shift, day or even month (cf., e.g., Boysen, Fliedner, and Scholl (2008)).

Following the principle of flow production, assembly lines are divided into successional stations, which are connected by a steadily moving conveyor belt or another mechanical transportation mechanism. The product units to be assembled are launched down the line at a fixed rate such that they are accessible to each of the stations for a fixed time span (on average), called cycle time c. At each station, one or more workplaces are installed. Usually, up to four workplaces are assigned to different mounting areas of the car body which, thus, can operate independently of each other in a parallel manner (cf. Boysen et al. (2008), Becker & Scholl 2009). Usually, each workplace is equipped with one worker. So, the number of workplaces m determines the size of the required workforce.

Nowadays, in the final assembly of highly-developed cars and other complicated products, some hundreds or even thousands of elementary operations, called tasks and collected in a set V, have to be carried out. The tasks j
                     ∊
                     V and their (average) processing times tj
                      are established in a deterministic manner by applying predetermined motion time systems like MTM (Methods-Time Measurement; cf. Kanawaty (1992), Longo and Mirabelli (2009)). However, the processing times will usually vary over time (dynamic task times) as the model-mix (demand of product models and options) varies from shift to shift and month to month. The order of executing the tasks is restricted by technological and organizational conditions, e.g., mounting a radio device requires having installed a fixture and cables before. These partial orderings of tasks are represented as arcs (i,
                     j), stating that task i
                     ∊
                     V must be finished before task j
                     ∊
                     V can be started, in a precedence graph whose node set is given by the task set V.

When installing an assembly line and, due to changes in the model-mix, on a month-by-month basis or even in shorter time periods the so-called assembly line (re-) balancing problem (ALBP) needs to be solved. It consists of assigning the tasks to workplaces and, thus, stations such that precedence relations, the cycle time restriction and other restrictions of the actual assembly line setting are fulfilled and an efficiency-based objective is optimized (cf., e.g., Baybars (1986), Boysen, Fliedner, and Scholl (2007), Boysen, Fliedner, and Scholl (2009b)). The set of tasks assigned to a workplace is called work load, the sum of task times shall be called work load time or workplace time.

The productivity of a paced assembly line directly depends on the production time per product unit, defined as PT
                     =
                     m
                     ⋅
                     c, because each of m workplaces offers (on average) working time c for each product unit. Of course, PT must be at least as large as the sum of the processing times of all tasks, i.e., tsum
                     
                     =∑
                     
                        j
                     
                     ∊
                     
                        Vtj
                     . If PT exceeds tsum
                     , valuable working time is wasted. This idle time IT
                     =
                     PT
                     −
                     tsum
                      is to be kept at a minimum. PT is a very important key number in the automotive industry as it is used to compare productivity of car manufacturers all over the world in the so-called Harbor report. Though the report is actually secret, this key number is published regularly and, thus, besides the cost effect, has a high external impact (cf. Habour and Hill (2008)). As a consequence, the firms make almost every effort to minimize the value of PT.

It has to be remarked here, that in the research literature, usually, no distinction is made between workplaces and stations because it is assumed that a single workplace is installed in each station (cf. assumption (S8) in Section 2). As mentioned above, this is untypical in automotive industry and other industries manufacturing large products. So, in this article, we distinguish both entities and focus on workplaces as the smallest productive unit.

In Section 2, we describe SALBP, the well-known basic version of ALBP, and its assumptions and formulate general requirements that should be met by line balancing procedures intended to be a tool helpful for the daily work of process planners. In Section 3, we explain how assembly process planning is typically done at car manufacturers and derive aspects and restrictions of the real-world problem that need to be considered in (semi-) automated line balancing. We examine state-of-the-art ALBP solution procedures with respect to their ability of adequately considering real-world restrictions leading to the result that there is a need for generalized and flexible as well as more effective and efficient procedures. In Section 4, we present the multi-Hoffmann heuristic (MHH) for SALBP and propose some (minor) performance improvements. An adaptation and extension of MHH that is capable to incorporate all important real-world restrictions in a flexible manner is proposed in Sections 5, 6 and 7. Comprehensive computational experiments show that the new procedure is competitive for specialized ALBP versions and, more important, able to solve complex real-world problem instances in moderate computation times. The final Section 8 gives a summary and conclusions concerning future research needs.

Following the classification of Baybars (1986), the research literature differentiates between the simple ALBP (SALBP) und the general ALBP (GALBP). In SALBP, the problem complexity is significantly reduced by several simplifying assumptions in respect of practice. These assumptions include (cf. Baybars (1986), Falkenauer (2005), Boysen, Fliedner, and Scholl (2007), Becker and Scholl (2009), Martino and Pastor (2010)):
                        
                           
                              
                              
                              
                                 
                                    (S1)
                                    
                                       No product variety: Only one variant of a single homogenous product is manufactured.
                                 
                                 
                                    (S2)
                                    
                                       No process alternatives: All operations are performed in a predetermined manner.
                                 
                                 
                                    (S3)
                                    
                                       Strict seriality: The assembly line consists of stations arranged in a serial manner and being independent of each other, i.e., each workplace belongs to a single station. The line length is determined by the number of stations each of which has a fixed length defined by multiplying conveyor speed and cycle time.
                                 
                                 
                                    (S4)
                                    
                                       Precedence constraints: restrict the set of feasible task sequences.
                                 
                                 
                                    (S5)
                                    
                                       No assignment restrictions: except for cycle time and precedence constraints.
                                 
                                 
                                    (S6)
                                    
                                       Static and deterministic task times: The processing times are deterministic and fixed.
                                 
                                 
                                    (S7)
                                    
                                       Indivisibility of tasks: An operation cannot be split up between multiple workplaces.
                                 
                                 
                                    (S8)
                                    
                                       One workplace per station: Each station contains exactly one workplace.
                                 
                                 
                                    (S9)
                                    
                                       No setup times: The operation times are independent of the processing sequence of product variants.
                                 
                                 
                                    (S10)
                                    
                                       Assignment-independent station costs: Fixed and variable costs are identical for each station such that costs need not explicitly be considered in the objective function.
                                 
                                 
                                    (S11)
                                    
                                       Time oriented objective function:
                                 
                                 
                                    
                                    SALBP-1: Given cycle time c, line length (number of stations) K is to be minimized.
                                 
                                 
                                    
                                    SALBP-2: Given line length K, the cycle time c is to be minimized.
                                 
                                 
                                    
                                    SALBP-E: With cycle time c and line length m being variable in certain boundaries, the production time per car, PT
                                       =
                                       K
                                       ⋅
                                       c, is to be minimized, which is equivalent to maximizing the line efficiency. Note that K
                                       =
                                       m due to (S8).
                                 
                                 
                                    
                                    SALBP-F:No real objective, as only an assignment of tasks to stations, that is feasible for given cycle time c and line length K, is to be determined.
                                 
                              
                           
                        
                     
                  

For SALBP-1 Scholl and Klein (1997) developed a branch and bound (B&B) algorithm called Salome (see also Scholl and Klein (1999a)). At each stage of the B&B tree all possible loads of a station are generated based on the list of available tasks (station-based construction scheme). A flexible bidirectional branching scheme decides before each step whether a new station is opened at the beginning or the end of the line. Through the rapid calculation of sharp lower bounds, the local lower bound method that ensures to examine promising loads first and the extensive use of dominance and reduction rules, Salome is still one of the most effective exact SALBP-1 procedures. Sewell and Jacobson (2011) expanded elements of Salome and other procedures to a branch-and-bound-and-remember approach with three phases in which, among other components, all visited subproblems are kept in memory and branching always is restarted in the root node of the tree in order not to get trapped in a non-promising part of the tree. This new approach seems to be very powerful as it clearly outperforms Salome and other procedures.

In the incomplete enumeration heuristic of Hoffmann (1963), station loads with minimal idle time are successively built unidirectionally in forward direction (rising station numbers). Fleszar and Hindi (2003) improved and extended it to a multi-step, bidirectional approach, called multi-Hoffmann heuristic, which is explained in detail in Section 4. It is one of the most efficient SALBP-1 heuristics and, furthermore, very flexible and, thus, a good starting point for developing a more general procedure. Bautista and Pereira (2009) developed a dynamic programming heuristic, which has a comparable effectiveness to exact methods in small computation times. An overview of other exact and heuristic SALBP methods is provided by Scholl and Becker (2006).

The simplifying assumptions of SALBP significantly restrict the use of SALBP-solving methods in practice. For this reason, the research has recently focused on incorporating relevant real-world restrictions into ALBP models and solution procedures. By removing or relaxing one or more of the SALBP assumptions, a variety of different GALBP models and respective solution procedures were developed. An overview and classification of GALBP extensions is provided by Becker and Scholl (2006) and Boysen et al. (2007).

To recommend ALBP algorithms for real-world application, several general evaluation criteria resulting from requirements of planning work flows in practice have to be met (see also Falkenauer (2005)):
                           
                              1.
                              
                                 Generality: The ALBP model and the corresponding solution procedure must reflect all (relevant) aspects of the real-world problem. Otherwise, calculated solutions will not be beneficial for the real planning situation and, thus, planners will not accept the solution procedure as a decision support tool.


                                 Efficiency: In real-world the ideal optimization workflow is performed several times a month consisting of a computer-generated solution proposal with manual inspection and rework. For this reason, a short computation time is essential for the acceptance of an ALBP algorithm. In practice, we observed that waiting times of up to about 5min are acceptable for difficult problem instances with over 1.000 tasks and up to roughly 2min for smaller problems.


                                 Effectiveness: A high quality solution algorithm with a deviation of (at least) less than about 5% from the optimum tends to reduce the reworking of the planner and is therefore required for an ALBP algorithm as well.


                                 Flexibility: The paradigm of assembly line production is subject to change. In the last decades of the 20th Century, especially, the utilization of the assembly workers was focused. These days, as part of a holistic planning workflow, also ergonomic and logistical implications of a line balance are considered. For the use of quantitative methods in practice, thus, flexibility and expandability of ALBP models and algorithms are substantial properties.

We survey and evaluate important steps in the development of (S)ALBP procedures. Here, we do not aim at a complete presentation of all (heuristic) procedures for any of the generalizations but concentrate on potential starting points for developing a new general and flexible as well as efficient and effective procedure. For details and further approaches for the different GALBP versions mentioned here, we refer to the survey of Becker and Scholl (2006).

Throughout this article, it becomes clear that despite of all efforts in theory and practice, there is still no algorithm available which fulfills all four criteria. The variety of all GALBP solution procedures is only able to cover single SALBP extensions such as ergonomic or space restrictions. This significantly limits application of those algorithms, because in practice SALBP extensions often occur in a combined manner.

In order to evaluate existing GALBP procedures for application in real-world we deeply analyze real-world requirements for line balancing. To understand line balancing in real-world we have to distinguish between technical planning and process planning (also: industrial engineering). As part of the technical planning, the technical feasibility of the production process is ensured. Therefore the manufacturing concept, i.e. the level of production mechanization, the size and structure of production lines and the number of variants produced on a line will be fixed. This determines the line topology and the variable and fixed costs per station, which are fixed input parameters for the following process planning. The problem of technical planning is to choose a manufacturing concept guaranteeing the feasibility of the operational process and minimizing investments in technical resources. Baybars (1986) named this planning task the assembly line design problem (ALDP) which is derived from SALBP by relaxing assumption (S10).


                        Process planning is performed both in the product development phase before start-of-production (in short: SOP) and periodically during production after SOP. As part of “optimization cascades” a continuous improvement (Japanese: kaizen) of the working system’s productivity takes place (see also Ohno (1988)). As a starting point to increase productivity, the operations are analyzed concerning waste in time which includes walking and other non-value-adding operations, like idle times. Consider a work load (set of tasks assigned) X of a workplace, its idle time is defined as the difference of cycle time and work load time: 
                           
                              I
                              (
                              X
                              )
                              =
                              c
                              -
                              
                                 
                                    ∑
                                 
                                 
                                    x
                                    ∈
                                    X
                                 
                              
                              
                                 
                                    t
                                 
                                 
                                    x
                                 
                              
                           
                        . Obviously, ALBP is a suitable instrument to support the reduction of waste in process (improvement) planning as idle times and walking distances are results of assigning tasks to workplaces.

Since at the time of process planning the variables of the technical planning are already determined, it is sufficient to consider time-related objectives of ALBP such that cost-related GALBP including ALDP (Baybars, 1986) are not focused in this paper. In real-world settings of process planning additional constraints have to be considered which relax several SALBP assumptions (for a more detailed classification of GALBP versions relaxing different subsets of the assumptions see Boysen et al. (2007)):

This SALBP assumption is obviously incompatible with practice. As already mentioned in Section 1, the automotive industry manufactures multi-variant products on mixed-model lines. Due to the increased needs of product differentiation in the mass customization paradigm, the variant complexity at assembly lines continuously increases. Typically, at Volkswagen, a vehicle can be configured by more than 170 disjoint configuration classes with an average of four options in each class (see Sternatz (2013)). Also in many plants, several (possibly rather different) products are manufactured on the same mixed-model line.

In order to simplify (manual) line balancing, the mixed-model situation is transformed into a single-model one by building joint operations and a joint precedence graph based on demand portions (frequencies) of the product variants (for potential failures of this method and an improved version, cf. Boysen, Fliedner, and Scholl (2009a)). Given the deterministic duration tjp
                         of a task j
                        ∊
                        V (analyzed by a motion time study like some MTM method, cf. Kanawaty (1992), Longo and Mirabelli (2009)) for a product variant p, a joint task time is calculated as 
                           
                              
                                 
                                    
                                       
                                          t
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                              =
                              
                                 
                                    b
                                 
                                 
                                    p
                                 
                              
                              ·
                              
                                 
                                    t
                                 
                                 
                                    jp
                                 
                              
                           
                         with bp
                         denoting the frequency with which variant p is ordered during the planning horizon. Nevertheless, the required work content and the task times may considerably differ between the product variants including the case that performing a task j is not required for all product units p that do not contain a certain option (indicated by tjp
                        
                        =0). This considerably increases process complexity and the work load time of a workplace varies from product unit to product unit as, e.g., installation of a sun roof will only be accomplished if the buyer of the respective car has ordered a sun roof. That is, joint task times 
                           
                              
                                 
                                    
                                       
                                          t
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                           
                         are average values being exceeded or undercut by actual task times tjp
                        . A worker can compensate slight cycle time violations (exceedance) for several consecutive product units by drifting into the next work station where he completes his/her operations. In case of exceeding the cycle time too much, the worker must, however, be supported by additional staff (so called floaters). The short-term mixed-model sequencing problem (MSP) arises, which minimizes the use of floaters through an overload preventing workload smoothing. An overview of different variants of the MSP and appropriate solution methods is given by Boysen, Fliedner, and Scholl (2009c).

In the mid-term, the mixed-model assembly line balancing problem (MALBP) which results from relaxing SALBP assumption (S1) is to be solved. It extends the single-model problem by an additional objective that attempts to reduce the negative effects of varying workplace times by some anticipation function (see, e.g., Domschke, Klein, and Scholl (1996), Merengo, Nava, and Pozzetti (1999), Emde, Boysen, and Scholl (2010), Sternatz (2013)). To solve MALBP-1 (the appendix “−1” marks the objective of minimizing line length), existing SALBP-1 procedures are expanded in order to smooth the workplace times on all variants in a workplace (horizontal line balancing) and/or over all workplaces of the line on average (vertical line balancing). Scholl (1999, Section 6.1.2) supplemented Salome with a second-order (anticipative) smoothing criterion. Thomopoulos (1970) and Merengo et al. (1999) minimize a horizontal smoothing objective instead of minimizing the total idle time. Sternatz (2013) proposes risk-adjusted limits for workplace times, i.e., planned idle times, in order to avoid risky distributions of workplace time. An overview of other exact and heuristic MALBP-1 approaches are provided by van Zante-de Fokkert and de Kok (1997) as well as Becker and Scholl (2006, Section 10).

This assumption is compatible with practice. At the time of process planning, technical planning regarding the choice of alternatives is finished, variable and fixed station costs are determined. Accordingly, for process planning there is no trade-off between technical investments on the one hand and production time based expenditures on the other hand.

In most cases, this assumption is compatible with practice in automotive industry. In paced flow line production systems, each workplace is assigned to exactly one station. In practice, this ensures better productivity and ergonomics versus cross-over workplaces, because otherwise additional walking ways and coordination problems, enforced by mixed-model production, between several stations occur. Approaches like the U-shape principle (e.g., Miltenburg (2001), Scholl and Klein (1999b)) or parallel assembly lines (e.g., Ahmadi, Dasu, and Tang (1992), Scholl and Boysen (2009)) are not applicable in automotive industry at all due to the aforementioned reasons, the short cycle times of about a minute and the size of the workpieces.

This assumption is compatible with practice. Restrictions in operation sequences are derived from the construction of a product and are stored in a precedence graph. However, in practice, problems with up to several thousand operations for each product occur, so that the manual creation of a precedence graph is practically impossible. For this reason concepts for an automatic generation of precedence graphs are recently discussed (cf. Altemeier (2009), Chapter 5.2; Klindworth, Otto, and Scholl (2012), Otto (2012)). Starting with a feasible line balance forming a serial precedence graph, additional degrees of freedom are gained by removing precedence relations based on the bills of materials and old feasible process plans. This “learned” precedence graph, which usually deviates from the unknown real graph but guarantees feasible solutions, can be used for automated line balancing greatly increasing the planning capabilities of process planners (Klindworth et al. (2012)).

This SALBP assumption is not compatible with practice. In addition to precedence and cycle time constraints, there are numerous other restrictions that limit the assignment of operations to workplaces (Becker and Scholl (2006), Scholl, Fliedner, and Boysen (2010)). In automotive industry, we typically find the following types of assignment restrictions: Process-related restrictions
                        
                           1
                           (E.g. tasks having mounting positions are on opposite sides of the car body may be incompatible to each other.)
                        
                        
                           1
                         between two tasks which have [must not] be executed at the same workplace. Moreover, we find station-related assignment restrictions
                        
                           2
                           (E.g. a given working height of a station and the required working height of a task might be conflicting.)
                        
                        
                           2
                         between a station and a task. Resource-related or cumulative assignment restrictions
                        
                           3
                           (E.g. the delivery area of stations is limited, where necessary equipment and part containers need to be stored. Consequently, the set of possible operations per work station is restricted by the available space. An important example in automotive industry is ergonomics, i.e., restricting the cumulative bio-mechanical strength required for executing a work load to a value which is acceptable for the average working population; cf. Otto and Scholl (2011).)
                        
                        
                           3
                         decide on the feasibility of combining tasks to form work loads of a workplace or even station. They define allowed values of aggregate attributes (resource capacities) like the cycle time restriction which claims the cumulative work load time not to exceed the cycle time. Employee-related assignment restrictions, which limit the assignment of operations to workplaces depending on qualification, salary or bio-mechanical strength of the staff, are usually not yet relevant at the time of process planning. The assignment of employees to workplaces is part of the manpower planning which is performed after having finished process planning as human resources are seen as a suited means to adjust provided capacity to the requirements of the short-term model-mix (set of customer orders).

By relaxing (S5), the assignment restricted ALBP (ARALBP, see Scholl et al. (2010)) arises. The time-and-space-constrained ALBP (TSALBP, see Bautista and Pereira (2007)) is a special case of ARALBP, in which only a single resource-oriented (space) restriction expands SALBP. The exact ARALBP-1 procedure Absalom by Scholl et al. (2010) extends Salome to process, station and resource related assignment constraints. Salome’s lower bounds were adapted for the case of multiple resources. Operations, which have to be assigned to the same workplace, are merged with interjacent operations through a preprocessing to a so-called mega-node. Bautista and Pereira (2007) solved the simplified TSALBP heuristically by ANTS, an ant colony optimization algorithm, in connection with the tabu search method for SALBP-2 proposed by Scholl and Voß (1996). ErgoSALBP by Otto and Scholl (2011) takes the ergonomics of workplaces into account. They reduce the number of bio-mechanically highly exposed workplaces for a given number of workplaces by a simulated annealing approach in combination with Salome.

This SALBP assumption is partly compatible with practice. The process times are generally determined by using standardized MTM (Methods-Time Measurement; cf. Kanawaty (1992), Longo and Mirabelli (2009)) time blocks based on a reference power of the working population (cf. Bokranz and Landau (2006), 471–532). If the performance of a plant population in terms of intensity or effectiveness differs from this reference power, then MTM time discounts or surcharges are used, which compensate all stochastic influences. The processing times are therefore to be regarded as deterministic.

However, task times are dynamic as they depend on the model-mix and vary over product variants. As explained for (S1), this dynamics is dealt with by balancing lines for a joint (average) precedence graph but considering (risk) measures that reduce workplace time variations (cf. Sternatz (2013)).

This SALBP assumption is compatible with practice. Operations in practice are, per definition, indivisible work elements and usually much smaller than the cycle time such that there is no need to split up tasks to several workplaces. Depending on the cycle time and the number of models jointly produced at a line, the work loads of a workplace mostly contain ten to twenty tasks in current real-world assembly lines.

As already mentioned, this SALBP assumption is not compatible with practice. While solving the ALDP during technical planning, the planners try to reduce the assembly line length (number of stations) so that the investment in conveyors and floor space are minimized in the long-run. Thus, given the manufacturing process defined by the product design and the cycle time based on desired production volumes, it is necessary and efficient to install multiple workplaces per station in order to adapt production capacity to the needs in the medium- and short-term (see also Becker and Scholl (2009)). A space-focused work is aspired, so that multiple workers in a station do not physically interfere. Here, every workplace gets a specific mounting area at the product (e.g. front, rear, left, right). An operation may only be assigned to a workplace if its mounting positions lie within the mounting area of the workplace.


                        Becker and Scholl (2009) additionally consider the sequence of operations within the parallel workplaces in order to minimize idle (waiting) times caused by precedence related tasks being assigned to different workplaces of the same station. In practice, this case is often forbidden, mainly because the end times of operations vary from product variant to product variant. Thus, for each variant the precedence relationships between operations in different parallel workplaces would have to be ensured by adapting the starting times of waiting tasks. The limited possible gains of this interaction of parallel workplaces seem not to justify the increased planning effort and the resulting fault-proneness of the process. Furthermore, only in a few cases there exist precedence relations between tasks to be performed at different mounting positions.

From relaxing (S7) the variable parallel workplace ALBP (VWALBP with the mentioned simplification, see Becker and Scholl (2009)) arises. The two-sided ALBP (2ALBP, see Bartholdi (1993)) is a special case of VWALBP where only two opposing workplaces per station could be installed and no interference is possible. Based on Salome, Becker and Scholl (2009) developed the exact branch-and-bound algorithm VWSolver for VWALBP-1, in which up to 
                           
                              
                                 
                                    w
                                 
                                 
                                    ¯
                                 
                              
                           
                         workplaces per station can be built. Station loads with a cumulated processing time of up to 
                           
                              
                                 
                                    w
                                 
                                 
                                    ¯
                                 
                              
                              ·
                              c
                           
                         time units are generated per node (subproblem). Each station load is then divided into work loads of workplaces with non-overlapping mounting positions, wherein the sequencing problem is solved when precedence relations between operations of different workplaces occur. The assignment of workplaces to mounting areas is not predefined but results from the required working positions of the assigned tasks. Among others, the genetic algorithm by Kim, Kim, and Kim (2000) solves the restricted 2ALBP, in which only two workplaces per station with a fixed mounting area assignment (left, right) can be installed. For further approaches, see Becker and Scholl (2009).

This SALBP assumption is not compatible with practice, since the processing times can vary depending on the combination and sequence of operations within a workplace. For example, the worker has to walk the way from the delivery area to the first mounting position, between different mounting positions of the assigned tasks and from the last mounting position of a sequence back to the delivery area. Consequently, the processing times, which also include walking and access times for picking parts from containers, vary depending on the set of tasks combined and the overall execution sequence within the workplace.

From relaxing (S9) in the manner described above, the setup assembly line balancing and scheduling problem (SUALBSP, see Andrés, Miralles, and Pastor (2008), Scholl and N.; Fliedner (2011)) arises which defines and considers set-up times between two operations i and j that are assigned to the same workplace. The sequence-dependent ALBP (SDALBP, see Scholl, Boysen, & Fliedner 2008) generalizes the setups required to the case where tasks i and j need not be executed in the same workplace when a part mounted by task i might be an obstacle for mounting another part by task j. In practice, the latter problem extension is not rather relevant in the step of process planning as technical aspects of mounting parts are subject to the foregoing technical planning. Martino and Pastor (2010) developed an efficient heuristic for solving a restricted version of SUALBSP-1, in which several weighted priority rules were ingeniously combined (see also Andrés et al., 2008). The rule weights were trained based on test instances. Scholl et al. (2011) propose a number of practicable heuristics based on a greedy randomized adaptive search approach.

This SALBP assumption is widely compatible with practice. The optimization of station costs is performed at the time of technical planning, whose planning results (used process alternatives, number and usage of technical resources, technical production structure including the line length and the line configuration) are given input data of process planning.

As already mentioned, the assembly line design problem (ALDP, Baybars (1986)) extends SALBP by relaxing assumption (S9) and is able to support technical planning.

As mentioned above, investment costs of stations and their equipment are mainly fixed by technical planning such that they cannot be significantly influenced by line balancing anymore. Thus, cost of labor becomes the most relevant cost component (wage-cost oriented ALBP (CALBP-W), cf., e.g., Amen (2000a), Amen (2000b)). As process planning takes place, usually, before manpower planning actually assigns workers to workplaces (cf. assumption (S5)) and wage rates of different workers do not vary considerably enough, car manufacturers concentrate, as already argued in Section 1, on minimizing the production time per product unit PT .

In practice, additional objective criteria are considered important: First, due to the high variety of processing times of product variants, it is necessary to anticipate negative effects (overload costs) at the time of short-term mixed-model sequencing by adding a suitable anticipation measure to the ALBP objective function. Second, an acceptable bio-mechanical exposure of the workplaces has to be ensured, and third, depending on the assignment of tasks to stations a cost minimizing delivery policy for required parts has to be determined.

Following these real-world requirements, a line balance is sought, which reduces relevant operational costs for given line length and cycle time by minimizing the number of workplaces with considering the above-mentioned operational aspects as second-order objectives (e.g., MALBP-1) or by defining an overall cost function that weights all objectives by suitable cost coefficients (goal weights) and sums up these partial values.


                        Table 1
                         lists the modified assumptions (G1)–(G11) required for real-world line balancing in automotive industry. As none of the former problems covers all these assumptions, a new problem type arises and shall be called APALBP to highlight that the assumptions chosen consider the specific conditions of process planning in automotive industry. In Sections 5 and 6, we will substantiate the details of how certain aspects are modeled in order not to present these details twice.

Avalanche by Boysen and Fliedner (2008) takes an exceptional position as it is the only procedure flexible enough to solve a large variety of GALBPs. In the first stage, precedence-feasible task sequences are generated by an ant colony algorithm (or another procedure) without partitioning this sequence into station loads. In the second stage, a graph is defined for which a shortest path is calculated to determine the best solution that can be built from these sequences. In this graph, the nodes denote (feasible) subsets of already assigned tasks and arcs represent feasible station loads weighted with arc weights that measure the station loads’ contribution to the overall objective function (also, see Klein (1963)). For SALBP-1, the cost of each feasible station load is set equal to 1. Most SALBP extensions can be easily incorporated by adapting the definition of arcs and the arc weights. In this way, all extensions listed in Table 1 (except for some special cases mentioned below) can be solved by adapting Avalanche adequately. In some cases, e.g., when several workplaces are to be installed in the stations, like in VWALBP, the definition of arcs and weights is more complicated than in case of SALBP-1 as a (possibly complex) “station problem” has to be solved to determine feasibility of a station load and/or to find the correct arc weight. However, extensions that concern the global feasibility of station loads cannot be modeled with Avalanche, because at the time of constructing the graph it is unknown at which position of the line a station load is located and which other loads are built. For this reason and if the line length is limited or if station related assignment restrictions are to be considered a feasible solution might not be found by Avalanche for VWALBP.

As no existing procedure fulfills all requirements, we develop a new flexible and general procedure with the effectiveness of specialized GALBP procedures and (almost) the efficiency of modern SALBP heuristics. As a basis of our development, we select the multi-Hoffmann method of Fleszar and Hindi (2003), whose station-oriented, bidirectional enumeration procedure is well-suited for being extended to consider all extensions of APALBP.

In this Section, we describe the multi-Hoffmann heuristic (MHH) for SALBP-1 by Fleszar and Hindi (2003) as a starting point for some performance enhancements (Section 4.3) and the development of a general APALBP procedure in Sections 5 and 6. Table 2
                      summarizes used symbols and Table 3
                      depicts a block chart of MHH.

The procedure applies a station-based construction scheme. For each station (equivalent to a workplace in SALBP-1) considered, feasible loads X are enumerated in a systematic manner until a load X
                        * with minimal idle time I(X
                        *) is identified. This load is fixed for the current station. The process is repeated following a bidirectional sequence of stations (performing forward steps from the beginning of the line to the end and backward steps in the reverse direction) until all tasks are assigned.

In a forward (backward) step, only tasks from the set of available tasks AF
                         (AB
                        ), i.e., tasks all predecessors (successors) of which are already assigned, can be chosen to build the current station load X:
                           
                              (4.1)
                              
                                 
                                    
                                       A
                                    
                                    
                                       F
                                    
                                 
                                 =
                                 
                                    
                                       
                                          j
                                          ∈
                                          Y
                                          |
                                          
                                             
                                                P
                                             
                                             
                                                j
                                             
                                          
                                          ∩
                                          Y
                                          =
                                          ∅
                                       
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       A
                                    
                                    
                                       B
                                    
                                 
                                 =
                                 
                                    
                                       
                                          j
                                          ∈
                                          Y
                                          |
                                          
                                             
                                                F
                                             
                                             
                                                j
                                             
                                          
                                          ∩
                                          Y
                                          =
                                          ∅
                                       
                                    
                                 
                              
                           
                        
                        AF
                         and AB
                         need to be updated after each assignment of a task because additional tasks could become available. In phase 1, the procedure first builds mF
                         stations in forward direction and then assigns the remaining tasks in some mB
                         stations in backward direction. Phase 1 of the procedure is repeated with iteratively setting mF
                        
                        =0,1,…,
                        UB. In phase 2, the construction scheme of phase 1 is inverted: First, mB
                        
                        =1,…,
                        UB stations are created in backward direction and then the remaining tasks are assigned to some mF
                         stations in forward direction. To reduce computing time, partial results of an iteration can be reused in the next iteration (see Fleszar and Hindi (2003)). The result of the procedure is the best solution found in any iteration of both phases.

As mentioned above, in each iteration, station loads X
                        * with minimal idle times are sought. For this purpose, from the list of available tasks AF
                         resp. AB
                         all station loads FSF
                        (Y) resp. FSB
                        (Y) are enumerated, which do not exceed the cycle time (I(X)⩾0):
                           
                              (4.2)
                              
                                 
                                    
                                       FS
                                    
                                    
                                       F
                                    
                                 
                                 (
                                 Y
                                 )
                                 =
                                 
                                    
                                       
                                          X
                                          ∈
                                          P
                                          (
                                          Y
                                          )
                                          |
                                          I
                                          (
                                          X
                                          )
                                          ⩾
                                          0
                                          ∧
                                          ∀
                                          j
                                          ∈
                                          X
                                          :
                                          
                                             
                                                P
                                             
                                             
                                                j
                                             
                                          
                                          ∩
                                          (
                                          Y
                                          -
                                          X
                                          )
                                          =
                                          ∅
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (4.3)
                              
                                 
                                    
                                       FS
                                    
                                    
                                       B
                                    
                                 
                                 (
                                 Y
                                 )
                                 =
                                 
                                    
                                       
                                          X
                                          ∈
                                          P
                                          (
                                          Y
                                          )
                                          |
                                          I
                                          (
                                          X
                                          )
                                          ⩾
                                          0
                                          ∧
                                          ∀
                                          j
                                          ∈
                                          X
                                          :
                                          
                                             
                                                F
                                             
                                             
                                                j
                                             
                                          
                                          ∩
                                          (
                                          Y
                                          -
                                          X
                                          )
                                          =
                                          ∅
                                       
                                    
                                 
                              
                           
                        If the first station load X
                        * with idle time I(X
                        *)=0 is found, then the enumeration quits. If no load without idle time exists, the one with least idle time (after a complete enumeration of all possible loads) is taken. Overall, the solution space is not fully investigated, because possible effects of an enumerated station load to following stations are not considered, which is typical for a greedy heuristic procedure like MHH. To accelerate the search and to increase the solution quality, Fleszar and Hindi (2003) sort the lists of available tasks before each load enumeration step according to non-increasing processing times. The available lists are updated after each task assignment. An iteration is terminated (by fathoming) if the current number K(X) of installed stations plus the best-known lower bound on the number of additional stations LB(Y) is not smaller than the best known solution value UB(K(X)+
                        LB(Y)⩾
                        UB). In addition, the procedure can be stopped if UB
                        =
                        LB(V) holds, where LB(V) is a global lower bound on the number of stations, since the optimal solution has been found then. For calculations of lower bounds, the well-known and new methods for SALBP-1 are used (cf. Scholl and Klein (1997), Scholl (1999), Chapter 2.2.2), Fleszar and Hindi (2003)).

We now extend MHH by some performance enhancements which will increase the effectiveness and the efficiency of the original heuristic as shown in Section 5.2.

Since MHH prefers station loads with minimal idle time which have been found first in the enumeration, the order of the available list is a key parameter of MHH. The order should guarantee that beside of the (idle time) optimality of the actual station load also succeeding stations could be loaded (nearly) optimal. In Fleszar and Hindi (2003) the available list is only sorted by non-increasing task times. Martino and Pastor (2010) showed that a combination of several priority values is tending to increase the solution quality. Therefore, we calculate for each task j a combined priority value 
                           
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                                 
                                    F
                                 
                              
                           
                         for sorting AF
                         resp. 
                           
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                                 
                                    B
                                 
                              
                           
                         for sorting AB
                        . The order of the available lists is guaranteed with every task assignment. The priority value 
                           
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                                 
                                    F
                                 
                              
                           
                         (resp. 
                           
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                                 
                                    B
                                 
                              
                           
                        ) of a task j is calculated by the unweighted sum of the following normalized priority values:
                           
                              1.
                              The ratio tj
                                 /c of task time tj
                                  and cycle time c (the unnormalized version is called MaxTime of Scholl and Voß (1996)). A late assignment of large tasks increases the likelihood that the resulting station loads cannot be filled up with small tasks. Consequently the sooner large tasks can be assigned to a station load, the tendentially less idle time may be installed.

The ratio 
                                    
                                       |
                                       
                                          
                                             
                                                
                                                   FI
                                                
                                                
                                                   j
                                                
                                             
                                          
                                          
                                             j
                                          
                                       
                                       |
                                       
                                          
                                             max
                                          
                                          
                                             i
                                          
                                       
                                       |
                                       
                                          
                                             FI
                                          
                                          
                                             i
                                          
                                       
                                       |
                                       (
                                       |
                                       
                                          
                                             PI
                                          
                                          
                                             j
                                          
                                       
                                       |
                                       
                                          
                                             max
                                          
                                          
                                             i
                                          
                                       
                                       {
                                       
                                          
                                             PI
                                          
                                          
                                             i
                                          
                                       
                                       }
                                       )
                                    
                                  of the number of all successors (predecessors) of a task j in comparison to the task with most successors (predecessors) (the unnormalized version is called MaxF resp. MaxS in Scholl and Voß (1996)). Tasks with many successors (predecessors) should be assigned with high priority, since for following station loads more successors (predecessors) get available so that the likelihood to find station loads with no idle time increases.

The ratio 
                                    
                                       
                                          
                                             a
                                          
                                          
                                             j
                                          
                                       
                                       +
                                       
                                          
                                             t
                                          
                                          
                                             j
                                          
                                       
                                       /
                                       c
                                       +
                                       
                                          
                                             η
                                          
                                          
                                             j
                                          
                                       
                                       /
                                       
                                          
                                             max
                                          
                                          
                                             i
                                          
                                       
                                       {
                                       
                                          
                                             a
                                          
                                          
                                             i
                                          
                                       
                                       +
                                       
                                          
                                             t
                                          
                                          
                                             j
                                          
                                       
                                       /
                                       c
                                       +
                                       
                                          
                                             η
                                          
                                          
                                             i
                                          
                                       
                                       }
                                    
                                  of the sum of the earliest start (head) aj
                                 , the relative resource utilization tj
                                 /c and the smallest possible distance (tail) ηj
                                  to the last station of task j compared to the largest of such sums. aj
                                 
                                 +
                                 tj
                                 /c
                                 +
                                 ηj
                                  is a lower bound on the number of stations (see Scholl (1999, Chapter 2.2.2.1)), so that tasks with largest lower bound should be assigned with high priority. For the calculation of heads aj
                                  and tails ηj
                                 , see Scholl and Klein (1997).

In addition to this, several minor improvements are applied to MHH:
                           
                              •
                              To calculate an initial upper bound we use a priority rule based procedure with priority values 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             j
                                          
                                          
                                             F
                                          
                                       
                                    
                                  in forward resp. 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             j
                                          
                                          
                                             B
                                          
                                       
                                    
                                  in backward mode to construct two feasible line balances in a station-oriented manner.

The efficiency of the enumeration process can be improved by a local time limit for the enumeration of station loads (lines 7 and 8 respectively 15 and 16 in Table 3), so that not all feasible station loads are to be enumerated if a station load without idle times cannot be found within the local time limit. As result the best found solution within the time limit is returned.

The effectiveness of the procedure can be improved by multiple repetition (called: multi-pass) of the multi-Hoffmann heuristic. For this, the above mentioned priority value components 1–3 are combined via uniformly distributed random weights within [0;1] at each repetition. A multi-pass stage stops when a global time limit or an iteration limit is exceeded.

The multi-Hoffmann heuristic, which was originally developed for SALBP-1, can be flexibly adapted to many GALBP problems. We will show, that any extensions that affect the local feasibility of a station load, the quality of a station load or the global feasibility of a line balance, can be modeled within the enhanced multi-Hoffmann heuristic (in short: EMHH) by adapting the load enumeration step (lines 7 and 15 of Table 3) and/or the evaluation function (lines 8 and 16 of Table 3) of MHH.

In order to be comparable with Avalanche, which is so far the only procedure flexible and general enough to solve a large variety of GALBPs (see Section 3) and is by now mainly tested in ARALBP test beds, we first describe EMHH in detail for ARALBP. After we have shown the superior efficiency and effectiveness of EMHH to Avalanche in the standardized ARALBP test bed, we will adapt EMHH for further APALBP extensions (Section 6) and show its flexibility and generality within a practice oriented experiment from automotive industry (Section 7).

Following Scholl et al. (2010), process-related assignment restrictions, in which several tasks must be assigned to the same workplace, are considered by merging the respective tasks (and all intermediate ones) to a mega-node. If two tasks i and j are incompatible (inci
                        
                        ,
                        
                           j
                        
                        =1), so that both tasks cannot share the same workplace, the local feasibility test within the load enumeration (lines 7 and 15 of Table 3) has to be changed so that from the list of available tasks resp. AB
                         only such station loads are created and evaluated within FS(Y), which fulfill the incompatibility constraints. To ensure the efficiency of EMHH, tasks with many incompatibilities should be processed first, since otherwise only few tasks without incompatibilities could be found for stations considered later. This may increase the likelihood not to find any tasks to fill up the station load for minimal idle time. The priority values 
                           
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                                 
                                    F
                                 
                              
                           
                         resp. 
                           
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                                 
                                    B
                                 
                              
                           
                         for sorting the available lists should consequently be expanded by adding the ratio of incompatibilities of a task j compared to the maximum number of incompatibilities 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    ∀
                                    i
                                 
                              
                              Inc
                              
                                 
                                    .
                                 
                                 
                                    i
                                    ,
                                    j
                                 
                              
                              /
                              
                                 
                                    max
                                 
                                 
                                    l
                                 
                              
                              {
                              
                                 
                                    ∑
                                 
                                 
                                    ∀
                                    i
                                 
                              
                              Inc
                              
                                 
                                    .
                                 
                                 
                                    i
                                    ,
                                    l
                                 
                              
                              }
                           
                         so that tasks with many incompatibilities are assigned to idle-time minimized station loads with high priority.

In resource-related assignment restrictions, each task j requires an amount ujr
                         of a resource r (e.g. space, also the processing time could be handled as a resource r
                        =0, cf. Scholl et al. (2010)). The sum of all requirements of a station load X must not exceed the capacity limit Ar
                         for each resource r: 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    x
                                    ∈
                                    X
                                 
                              
                              
                                 
                                    u
                                 
                                 
                                    xr
                                 
                              
                              ⩽
                              
                                 
                                    A
                                 
                                 
                                    r
                                 
                              
                           
                        . To adapt these additional capacity constraints to EMHH the local feasibility test within the load enumeration (lines 7 and 15 of Table 3) has to be supplemented correspondingly.

Next to the local feasibility test, also the evaluation function within the enumeration (lines 8 and 16 of Table 3) has to be adjusted to cover multiple resources. The minimum idle-time search in MHH has to be extended to a minimum capacity waste search in EMHH. In EMHH, station loads X
                        * with a minimal (relative) deviation to a target vector are sought. The target vector represents an average resource consumption of each resource in X
                        * so that the calculated lower bound of additional stations LB(Y) – which is updated by every change of Y – is still reachable in the long run of the procedure. The lower bound methods of MHH need therefore be slightly adjusted to cover multiple resources (for further details see Scholl et al. (2010, Section 4.3)). A station load X using fewer resources than given in the target vector should be punished, because the choice of X in the final line balance tends to increase the total capacity required, i.e. the number of stations.
                           4
                           This evaluation strategy is similar to the local lower bound method of Salome by Scholl and Klein (1997), where subproblems with the lowest local lower bound of one node are examined first when branching a node.
                        
                        
                           4
                         The relative deviation between the resource consumption Cr
                        (X) of resource r in a load X and the target value Cr
                        (Y)/LB(Y) of the average resource consumption required to get along with LB(Y) stations is a good measure to evaluate station loads. To ensure the efficiency of the procedure in complex GALB problems, the load enumeration stops whenever a station load X
                        * is found which holds or exceeds the target for each resource. Consequently, only positive values of Ψr
                        (X)=1−
                        Cr
                        (X)/(Cr
                        (Y)/LB(Y)) should be punished within the evaluation function Δ(X) to be placed in lines 8 and 16 of Table 3:
                           
                              (5.1)
                              
                                 Δ
                                 (
                                 X
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          ∀
                                          r
                                       
                                    
                                 
                                 
                                    max
                                 
                                 (
                                 
                                    
                                       Ψ
                                    
                                    
                                       r
                                    
                                 
                                 (
                                 X
                                 )
                                 ;
                                 0
                                 )
                              
                           
                        
                        
                           
                              (5.2)
                              
                                 
                                    
                                       X
                                    
                                    
                                       ∗
                                    
                                 
                                 =
                                 {
                                 X
                                 ∈
                                 FS
                                 (
                                 Y
                                 )
                                 |
                                 Δ
                                 (
                                 X
                                 )
                                 =
                                 
                                    min
                                 
                                 (
                                 Δ
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 |
                                 
                                    
                                       X
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 FS
                                 (
                                 Y
                                 )
                                 )
                                 }
                              
                           
                        In station-related assignment restrictions some tasks j can only be executed in a section of the assembly line between earliest ESj
                         and latest possible station LSj
                         or are incompatible with certain stations in a set ISx
                         (cf. Scholl et al. (2010)).
                           5
                           Remark: Since successors of a task j could also be station-restricted the latest station of j can be preponed by its successors, cf. Scholl et al. (2010, Section 3).
                        
                        
                           5
                         Within the load enumeration only feasible tasks x with 
                           
                              
                                 
                                    ES
                                 
                                 
                                    x
                                 
                              
                              ⩽
                              K
                              (
                              X
                              )
                              ⩽
                              
                                 
                                    LS
                                 
                                 
                                    x
                                 
                              
                              
                              and
                              
                              K
                              (
                              X
                              )
                              ∈
                              
                                 
                                    IS
                                 
                                 
                                    x
                                 
                              
                           
                         are added to a station load X for the currently considered station number K(X). Tasks x with LSx
                        
                        =
                        K(X) must be added to X, otherwise the line balance is not feasible and the currently considered line balance loop (lines 2 and 23 of Table 3) has to be canceled by EMHH. As a tribute to its heuristic approach, it is possible that no feasible line balance could be found in any loop. To minimize this risk, loads, which tend to decrease the likelihood of global feasibility, should be charged with additional penalty costs. Similar to the aforementioned station-related target vectors these penalty costs 
                           
                              PC
                              (
                              X
                              ,
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                              )
                           
                         should be part of the evaluation function (lines 8 and 16 of Table 3):
                           
                              (5.3)
                              
                                 Δ
                                 (
                                 X
                                 ,
                                 
                                    
                                       λ
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          ∀
                                          r
                                       
                                    
                                 
                                 
                                    max
                                 
                                 (
                                 
                                    
                                       Ψ
                                    
                                    
                                       r
                                    
                                 
                                 (
                                 X
                                 )
                                 ;
                                 0
                                 )
                                 +
                                 PC
                                 (
                                 X
                                 ,
                                 
                                    
                                       λ
                                    
                                    
                                       1
                                    
                                 
                                 )
                              
                           
                        By trend, the higher the risk of global infeasibility of a station load X the higher should be 
                           
                              PC
                              (
                              X
                              ,
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                              )
                           
                         and so more unlikely the choice of X as optimal load X
                        * within the enumeration. The trade-off between the global feasibility of a line balance on the one hand and a minimal target deviation of a station load on the other hand, is controlled by a factor 
                           
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                              ⩾
                              0
                           
                        : The higher 
                           
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                           
                        , the more likely it is that the chosen station load X
                        * leads to a globally feasible line balance. In ARALBP the probability of global infeasibility tends to be larger, the smaller 
                           
                              
                                 
                                    LS
                                 
                                 
                                    y
                                 
                              
                              -
                              K
                              (
                              X
                              )
                           
                        , i.e. the remaining number of stations feasible for task y. The term 
                           
                              PC
                              (
                              X
                              ,
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                              )
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    y
                                    ∈
                                    Y
                                 
                              
                              min
                              (
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                              ;
                              1
                              )
                              ·
                              
                                 
                                    2
                                 
                                 
                                    K
                                    (
                                    X
                                    )
                                    -
                                    
                                       
                                          LS
                                       
                                       
                                          y
                                       
                                    
                                    +
                                    
                                       
                                          λ
                                       
                                       
                                          1
                                       
                                    
                                    -
                                    1
                                 
                              
                           
                         suitably represents this relation: the larger 
                           
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                           
                         the sooner station-restricted tasks are assigned to a station load at the expense of increased capacity wastages. By trend, X
                        * has a decreasing resource efficiency with increasing 
                           
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                           
                        . Starting with 
                           
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                              =
                              0
                           
                        , the whole EMHH procedure is repeated until a feasible solution or a time limit has been reached. With each repetition, 
                           
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                           
                         is incremented by 1. Since the station number K(X) is not known in backward iterations, EMHH must only be performed in forward direction if station-related assignment restrictions are to be considered.

To demonstrate the efficiency and effectiveness of EMHH, a computational test in comparison to the similarly flexible Avalanche is performed. To be comparable with Avalanche, the SALBP, ARALBP and TSALBP test beds by Scholl et al. (2010) will be used. For this purpose the 269 SALBP-1 benchmark instances of Scholl (1999, Chapter 7.1) are applied, which are on-line available at www.assembly-line-balancing.de. They include 25 different precedence graphs with 8–297 tasks. These SALBP-1 test instances with known optima have been extended for GALBP problems. For testing their Absalom procedure, Scholl et al. (2010) supplemented several ARALBP-1-assignment restrictions to this SALBP-1 data set. Bautista and Pereira (2007) extended the SALBP-1 data set with TSALBP space restrictions for each station.

The EMHH procedure is implemented using Java JDK 6 (Eclipse IDE 3.6.0). The computational tests are running on a Core i7 620M (2.0GHz dual-core) with 4GB of RAM. Since the applied procedures in the test bed are performed on a broad variety of different hardware configurations, we roughly normalize the computation time in relation to a 1GHz processor. The program code of EMHH as well as of the other procedures tested was not optimized to run on multiple processor cores. The following metrics are used to compare the algorithms:
                           
                              •
                              
                                 #found: Number of found (but not necessarily proven) optima.


                                 
                                    
                                       ∅
                                    
                                  
                                 rel. dec.: Average relative deviation of the found solution from the optimum.


                                 
                                    
                                       ∅
                                    
                                  
                                 time: Average computation time in seconds.


                                 
                                    
                                       ∅
                                    
                                  
                                 norm. time: Normalized computation time considering a processor clock frequency f compared to a one GHz processor (
                                    
                                       ∅
                                       
                                       norm
                                       .
                                       time
                                       =
                                       ∅
                                       
                                       time
                                       ·
                                       d
                                    
                                 ).


                                 max time: Maximum (normalized) computation time.

Although lacking in practical relevance but to compare the efficiency and effectiveness of EMHH with the variety of procedures in theoretical ALBP literature and to test the performance enhancements to MHH, we first perform a test based on the original benchmark SALBP-1 data sets. Herein, the exact procedures
                              
                                 •
                                 Salome/Absalom
                                       6
                                       As mentioned in Section 3, Absalom is an extension of Salome for multiple resources and is therefore equivalent to Salome (with some minor overhead) for SALBP-1.
                                    
                                    
                                       6
                                     (Scholl et al. (2010), Pentium IV, 1.5GHz, time limit: 500s (normalized: 750s)),

BB&R-CFBS (Sewell and Jacobson (2011), Core 2 Duo, 2.0GHz, time limit: 3600s (normalized: 7200s)),

as well as the heuristics
                              
                                 •
                                 BDP (Bautista and Pereira (2009), Core 2 Duo, 2.0GHz, time limit: 3600s (normalized: 7200s), window_size: 1000),

Multi-Hoffmann in the implementation of Fleszar and Hindi (2003) (in short: MHH, Pentium II, 400MHz, no time limit) and in our own implementation (in short: MHH*, no time limit),

Avalanche (Boysen and Fliedner (2008) in the test configuration of Scholl et al. (2010)
                                    
                                       7
                                       Remark: In order to be comparable to the following ARALBP test bed, we use the configuration of Avalanche optimized for ARALBP of Scholl et al. (2010) with 25 ants and 1000 iterations which delivers slightly worse results than the configuration optimized for SALBP-1 by Boysen and Fliedner (2008) with 40 ants and 200 iterations.
                                    
                                    
                                       7
                                    , Pentium IV, 1.5GHz, iteration limit: 1000),

are tested against the developed EMHH procedure, which is executed in two settings:
                              
                                 •
                                 One pass (one repetition of a whole MHH loop, in short: EMHH-OP, local time limit: 5s., no global time limit).

Multi pass (in short: EMHH-MP, local time limit: 5s, global time limit: 100s (normalized: 200s), iteration limit: 100 repetitions of a whole MHH loop with randomly chosen priority value weights for sorting the available lists).


                           Table 4
                            summarizes the results. EMHH clearly outperforms Avalanche, in the one pass as well as in the multi pass setting. It more often finds the optimum (239 vs. 162), the average relative deviation from the optimum and the average computation time are much smaller than in case of Avalanche. Due to the lack of a suitable construction scheme, Avalanche is not efficient and effective in the sense required in practice.

The implemented extensions of EMHH over MHH (and MHH*) make an impact: More than 30 additional optima and a halving of the relative deviation of 0.92–0.43% at a constant normalized average computation time of 0.02s could be achieved by an enhanced sorting of the availability lists in EMHH-OP compared to MHH. EMHH-MP gets even better results with computation times absolutely acceptable in practice. It is quite astonishing that the results of EMHH-MP are not much worse than those of the highly specialized and evolved exact procedures.

Using the ARALBP-1 instances of Scholl et al. (2010), the exact procedure Absalom (Scholl et al. (2010), Pentium IV, 1.5GHz, time limit: 500s (normalized: 750s)) as well as the heuristic Avalanche (Boysen and Fliedner (2008), Pentium IV, 1.5GHz, iteration limit: 1000, 25ants) are tested against EMHH, which is executed in the two settings specified above.

At first, process- and resource-related assignment restrictions are considered with a total of 33 runs (cf. Scholl et al. (2010)). Here combinations of 
                              
                                 0
                                 ⩽
                                 R
                                 ⩽
                                 3
                              
                            additional resources, different proportions 
                              
                                 0
                                 %
                                 ⩽
                                 LR
                                 ⩽
                                 20
                                 %
                              
                            of linked tasks and varying amounts of incompatible tasks 
                              
                                 0
                                 %
                                 ⩽
                                 LR
                                 ⩽
                                 20
                                 %
                              
                            are used as originally defined in Scholl et al. (2011). Table 5
                            summarizes the results. For more details on the ARALBP-1 results see Table 9 in Appendix A.

EMHH-OP outperforms Avalanche in every measured performance index: It takes almost twice as often the optimum (5985 vs. 3212 instances), has a much lower average deviation from the optimum (2.28% vs. 10.93%) and is much faster (1s vs. 69s) than Avalanche. In none of the 33 test runs Avalanche gets a more efficient or effective result. Concerning the very small computation times of EMHH-OP and the moderate computation times of EMHH-MP, the obtained solution quality is rather acceptable, in particular, from the real-world point of view. In complex test instances with multiple resources and many incompatibilities Absalom outperforms EMHH-OP clearly. EMHH-MP represents a good compromise between the effectiveness of Absalom and the efficiency of EMHH-OP.

In a second test bed, station-related assignment restrictions are analyzed. Both Absalom and EMHH must therefore be executed as a forward procedure, since the station number is unknown in backward iterations. Avalanche must be excluded in this test, since at the time of the evaluation of station loads the final number of a station is unknown in Avalanche. Table 6
                            summarizes the results. In column SR the percentage of tasks with station-related assignment restrictions is listed.

The exact Absalom procedure significantly beats EMHH at test instances with combined process-, resource- and station-related restrictions in the number of found optimal solutions. As a tribute to the heuristic approach of EMHH, which does not scan the complete solution space, EMHH can only find half of the optima than Absalom and even provides for some instances within the time limit no feasible solution (column #inf) when multiple resources are used. However, in data sets with only station-related assignment restrictions EMH-MP is competitive to Absalom in terms of effectiveness and efficiency (rows 1–4). Although EMHH is strongly limited by performing only in forward mode EMHH-OP even beats the much slower Avalanche in the much more easier ARALBP test instances without any station restrictions (row no. 0 and 5 in Table 6 resp. row no. 0 and 28 in Table 9 in Appendix A).

Using the TSALBP-1 instances of Bautista and Pereira (2007) the exact procedure Absalom (Scholl et al. (2010), Pentium IV, 1.5GHz, time limit: 30s (normalized: 45s)) and the heuristics
                              
                                 •
                                 BDP (Bautista and Pereira (2011), Core 2 Duo, 2.33GHz, setting: 500/10/105/c),

ANTS (Bautista and Pereira (2007), processor with 1.8GHz, time limit: 120s (normalized: 216s)),

Avalanche (Scholl et al. (2010), Pentium IV, 1.5GHz, iteration limit: 1000),

In order to be comparable to the experiments reported in Scholl et al. (2010), Table 7
                            summarizes the results in relation to the SALBP-1 optima, which constitute (rather weak) lower bounds but are taken as the only measure in Bautista and Pereira (2007). For Absalom and our new methods, we additionally count the number of optimal solutions found and the relative deviation from the best known ARALBP-1 lower bound computed by Absalom (which constitutes an upper bound on the real deviation). As in the ARALBP-1 tests, EMHH clearly outperforms the flexible Avalanche and even the specialized heuristic ANTS with very moderate computation times acceptable in practice. The one-pass flexible EMHH-OP gets solutions that are only slightly worse than those of Absalom taking about only 2% of the computation time. The multi-pass version EMHH-MP gets a solution quality which is quite comparable to Absalom’s in less time. It can be stated that, for this problem setting, the new flexible procedures get very encouraging results.

We now discuss how to adapt EMHH for further APALBP extensions and show the flexibility and generality of EMHH. As described in Section 5.1 we can flexibly adapt EMHH by adjusting the load enumeration and/or the evaluation function to cover additional local and global feasibility restrictions as well as different quality measures of station loads. In Section 7, we demonstrate the usefulness of EMHH for solving a real-world line balancing problem from automotive industry.

To take effects of product variety into account, high utilized station loads with a minimal anticipation measure index AM has to be found in MALBP-1 (cf. Merengo et al. (1999)). A typical anticipation measure used in real-world is the exceedance of the maximal processing time of a vehicle order above the cycle time. Further anticipation measures are listed in detail by Emde et al. (2010). Within EMMH a station load X with an anticipation measure index AM(X) exceeding the target anticipation measure AM(Y) should either be punished within the evaluation function or could be marked as invalid within the enumeration of station loads.

Another approach of modeling high product variety, where a weighting factor is not needed, is suggested by Sternatz (2013): By maintaining the SALBP-1 objective function the local feasibility of a station load is affected. Only those station loads are allowed, whose total processing times plus a risk premium RP(X)⩾0 do not exceed the cycle time c. Therein, RP(X) is a function of the time spread of station load X, which is the higher, the more overloads a station load will create at the time of sequencing planning. For details see Sternatz (2013).

In SUALBSP-1, in addition to the processing time tj
                         of task j sequence-dependent set-up times sdij
                         arise when in a workplace task i is directly executed before j. To determine the minimal setup costs SD(X) of a given station load X a corresponding task scheduling problem has to be solved (see Scholl et al. (2011) for further details). Consequently, in EMHH only such station loads X shall be enumerated whose processing time sum of all assigned tasks plus SD(X) does not exceed the cycle time.

In VWALB problems multiple workplaces can be installed per station (for details see Becker and Scholl (2009)). Two tasks i and j have to be assigned to the same workplace of a station or to different stations (specified by setting parameter mri
                        
                        ,
                        
                           j
                        
                        =1, otherwise 0) if the mounting positions of the tasks are identical or closely adjacent or when precedence constraints are existing between both tasks. Vice versa, two tasks i and j cannot share the same workplace, if they are incompatible to each other or if their mounting positions are too distant (specified by setting parameter wii
                        
                        ,
                        
                           j
                        
                        =1, otherwise 0). The assignment of two tasks i and j to workplaces can be chosen arbitrarily, if neither mri
                        
                        ,
                        
                           j
                        
                        =1 nor wii
                        
                        ,
                        
                           j
                        
                        =1 holds, and if the precedence and capacity constraints are respected. In each station up to 
                           
                              
                                 
                                    w
                                 
                                 
                                    ¯
                                 
                              
                           
                         workplaces with a time capacity of c can be installed. Therefore, in the load enumeration, station loads with up to 
                           
                              
                                 
                                    w
                                 
                                 
                                    ¯
                                 
                              
                              ·
                              c
                           
                         units of time are allowed.
                           8
                           Remark: Workplace oriented resources (e.g. ergonomic strength, not: space) can be modeled similar by adjusting the capacity limit to 
                                 
                                    
                                       
                                          w
                                       
                                       
                                          ¯
                                       
                                    
                                    ·
                                    
                                       
                                          A
                                       
                                       
                                          r
                                       
                                    
                                 
                              .
                        
                        
                           8
                         For each station load X, the so-called workplace problem has to be solved, which determines the minimum number of installed workplaces w in respect to the mounting position constraints. For solving the workplace problem, the methods of Becker and Scholl (2009, Section 6) without regarding the task sequence (since precedence related tasks have to share the same workplace, see Section 3) are used. If the workplace problem cannot be solved then X is identified as being infeasible and should not be further evaluated.

In VWALB problems usually the length of the assembly line and thus the number of stations is limited. To fulfill this global restriction, sometimes multiple workplaces must be installed in a station even when the idle time is not minimized. This leads to a combined evaluation function with penalty costs: Let K be the maximum number of stations as well as K′ the number of currently installed stations. Then 
                           
                              W
                              (
                              Y
                              )
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    yy
                                    ∈
                                    Y
                                 
                              
                              t
                              /
                              [
                              c
                              ·
                              (
                              K
                              -
                              
                                 
                                    K
                                 
                                 
                                    ′
                                 
                              
                              )
                              ]
                           
                         is a target value for the minimal number of workplaces per station that should not be undercut by the currently considered station load. Otherwise the risk of global infeasibility tends to increase. Consequently, a station load X undercutting W(Y) is punished within the evaluation function 
                           
                              Δ
                              (
                              X
                              ,
                              
                                 
                                    λ
                                 
                                 
                                    3
                                 
                              
                              )
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    ∀
                                    r
                                 
                              
                              max
                              (
                              
                                 
                                    Ψ
                                 
                                 
                                    r
                                 
                              
                              (
                              X
                              )
                              ;
                              0
                              )
                              +
                              
                                 
                                    λ
                                 
                                 
                                    3
                                 
                              
                              ·
                              Θ
                              (
                              X
                              )
                           
                         with penalty term Θ(X)=max(1−
                        W(X)/W(Y);0). If within the first pass of EMHH (with 
                           
                              
                                 
                                    λ
                                 
                                 
                                    3
                                 
                              
                              =
                              0
                           
                        ) no valid solution could be found, then EMHH is restarted with incrementing 
                           
                              
                                 
                                    λ
                                 
                                 
                                    3
                                 
                                 
                                    ′
                                 
                              
                              =
                              
                                 
                                    λ
                                 
                                 
                                    3
                                 
                              
                              +
                              1
                           
                        .

The flexible application of the presented EMHH method is tested on a real-world problem instance. The test instance is a manufacturing section of a final assembly line with currently 63 workplaces and 45 stations at a cycle time of 60.774s without high product variety. More than a half of the 728 tasks have a process time of less than 5s (see Fig. 2
                     ). The precedence graph (order strength: 87.7%) was created automatically under evaluation of historical line balances.
                        9
                        For a detailed description of a concept for a learning procedure for the creation of precedence graphs see Klindworth et al. (2012) and Otto (2012).
                     
                     
                        9
                      Herein different workplace assignments, the mounting positions of tasks as well as the bill of materials are used to construct a precedence graph. In this experiment, a line balance with the lowest number of workplaces is sought in respect to the following APALBP extensions:
                        
                           •
                           
                              Worker density (VWALBP-1): In each station up to four workplaces can be installed. Each task requires one or more mounting positions (see Fig. 1
                              ). Within one station only one employee can perform processes on a specific mounting position. Station loads with precedence relations between its workplaces are forbidden. The length of the assembly line is limited to 45 stations.


                              Delivery area and logistics (ARALBP-1): Each task requires space for the delivery of necessary equipment and components. The delivery area in each station is restricted to 16 running meters parallel to the conveyor belt. Tasks, whose parts are stored in a common container (e.g., a sequencing trolley), must be assigned to the same station.

To solve this real-world problem instance two resources (time and space) as well as the limited length of the line has to be regarded in EMHH. Thus, the evaluation function is set to 
                        
                           Δ
                           (
                           X
                           ,
                           
                              
                                 λ
                              
                              
                                 3
                              
                           
                           )
                           =
                           
                              
                                 ∑
                              
                              
                                 ∀
                                 r
                              
                           
                           max
                           (
                           
                              
                                 Ψ
                              
                              
                                 r
                              
                           
                           (
                           X
                           )
                           ;
                           0
                           )
                           +
                           
                              
                                 λ
                              
                              
                                 3
                              
                           
                           ·
                           Θ
                           (
                           X
                           )
                        
                      measuring the target deviation Ψr
                     (X) for time and space as well as the target deviation Θ(X) for the number of workplaces per station. Starting with 
                        
                           
                              
                                 λ
                              
                              
                                 3
                              
                           
                           =
                           0
                        
                      the whole EMHH procedure is repeated until a feasible solution has been reached. With each repetition, 
                        
                           
                              
                                 λ
                              
                              
                                 3
                              
                           
                        
                      is incremented by 1.

Although the considered line segment has been subject of several optimization workshops, in which a variety of planners sought a better line balance by manual trial and error, the number of workplaces could significantly be reduced from 63 to 59 (lower bound: 58) by the EMHH computer proposal. The result of this complex test instance could already be found after 100s of computing time.

In a second experiment we want to analyze the influence of different APALBP extensions on the best found solution. Hereto we extract a snippet of 16 stations from the planning data of a new vehicle 18month before start of production (SOP). In the current state of (rough) planning, 25 workplaces are planned to be installed at a cycle time of 60.774s. The problem instance contains 236 tasks. The precedence graph has been automatically created using the methods of Klindworth et al. (2012) and Otto (2012). As it is usual in planning phase 18month before SOP only few historical data could be used for the creation of the precedence graph, so that the order strength is considerably high (96%). In the second experiment the following APALBP extensions are tested within EMHH:
                        
                           •
                           
                              Setup times (SUALBSP-1): Depending on the sequence of operations within a workplace additional walk ways between different mounting positions may occur. The processing time of a task increases by about three seconds if the worker has to walk from the (1) left side to the back, (2) left side to the front, (3) right side to the back, (4) right side to the front (et vice versa). If the worker has to walk from front to the back two seconds of setup time arise. Additionally, 1.3s of gathering time arise if more than three parts are handled within a workplace.


                              High product variety (MALBP-1): To avoid drifting the maximal processing time of any vehicle order is restricted to 1.3⋅
                              c, which is a common bound used within the planning phase at Volkswagen.


                              Ergonomics (ARALBP-1): All tasks are analyzed on bio-mechanically exhausting postures, encumbrances and strengths (cf. Otto and Scholl (2011)). Depending on the configuration of the workload and regarding its bio-mechanical exhaustion level, a workplace is classified as risky (“red”), potentially risky (“yellow”) and unrisky (“green”). Within series operation, risky workloads are forbidden. However, as tribute to the current rough planning phase our problem instance contains currently five risky and two potentially risky workplaces.


                              Worker density (VWALBP-1): In each station up to four workplaces can be installed. The length of the assembly line is limited to 16 stations.

In order to test EMHH on several APALBP extensions, we compute 24 different solutions on the same problem instance via en- and disabling the above mentioned restrictions and via alternating the maximum number of workplaces per station from 2 to 4. Table 8
                      summarizes the results (the grey colored row contains the current solution by manual line balancing). In all APALBP settings EMHH could reduce the number of workplaces. Also when considering the ARALBP-1 ergonomical constraint, EMHH finds better solution than by manual planning.

Depending on the APALBP setting between 1500 and 6500 station loads are evaluated until EMHH terminates (see Fig. 3
                     ). More computation time is especially needed if ARABP-1 is enabled (10–35s vs. 8–14s). In some settings EMHH could not find a valid solution with only 16 stations in the first pass of EMHH. Since in this case EMHH has to be restarted (by incrementing 
                        
                           
                              
                                 λ
                              
                              
                                 3
                              
                              
                                 ′
                              
                           
                           =
                           
                              
                                 λ
                              
                              
                                 3
                              
                           
                           +
                           1
                        
                     ), in these APALBP settings much more station loads are evaluated (1700–2900 with 
                        
                           
                              
                                 λ
                              
                              
                                 3
                              
                              
                                 Max
                              
                           
                           =
                           0
                        
                      vs. 4300–5200 with 
                        
                           
                              
                                 λ
                              
                              
                                 3
                              
                              
                                 Max
                              
                           
                           =
                           2
                        
                     , see Fig. 3).

Since within our experiments EMHH is able to cover all real-world APALBP extensions and finds better solutions than by manual planning in rather short computation times, EMHH can substantially improve line balancing in real-world.

In this article, upcoming from practice-oriented requirements in automotive industry, a new class of general, efficient, effective and flexible ALBP procedures is defined. It was shown that previously developed exact and heuristic methods cannot meet these important requirements, since in many places established exact procedures are not sufficiently flexible to model different GALB problems and established flexible heuristics are not sufficiently efficient and effective to be used as online-optimization tools in real-world planning situations.

For this field of action, we enhanced the multi Hoffmann heuristic by Fleszar and Hindi (2003) to the highly customizable extended multi Hoffmann heuristic (EMHH), which can model all practice-oriented SALBP extensions in a flexible manner. Extensive computational experiments show that EMHH has a significantly improved efficiency and effectiveness compared to previous flexible heuristics like the versatile Avalanche by Boysen and Fliedner (2008). The experiments show that the new procedure is competitive for specialized ALBP versions and, more important, able to find improved solutions for complex real-world problem instances in moderate computation times.

Further research is especially needed in the integration of other aspects of assembly line planning into decision support systems. For example, the consideration of logistical impacts of line balances gets a growing importance of action in practice, which has to be integrated into practice-oriented ALBP-procedures.

See Table 9
                     .

@&#REFERENCES@&#

