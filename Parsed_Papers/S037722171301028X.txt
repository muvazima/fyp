@&#MAIN-TITLE@&#Implicit depot assignments and rotations in vehicle routing heuristics

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We consider several VRP variants with vehicle type and depot-assignment choices.


                        
                        
                           
                           Compound neighborhoods with rotations, service & vehicle reassignments are searched.


                        
                        
                           
                           Exploring these neighborhoods does not lead to any computational-complexity increase.


                        
                        
                           
                           Efficient ILS and hybrid GA metaheuristics are built upon these procedures.


                        
                        
                           
                           Experiments demonstrate the valuable contribution of the new neighborhoods.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Vehicle routing

Dynamic programming

Local search

Multi-depot

Fleet mix

Unlimited fleet

@&#ABSTRACT@&#


               
               
                  Vehicle routing variants with multiple depots and mixed fleet present intricate combinatorial aspects related to sequencing choices, vehicle type choices, depot choices, and depots positioning. This paper introduces a dynamic programming methodology for efficiently evaluating compound neighborhoods combining sequence-based moves with an optimal choice of vehicle and depot, and an optimal determination of the first customer to be visited in the route, called rotation. The assignment choices, making the richness of the problem, are thus no more addressed in the solution structure, but implicitly determined during each move evaluation. Two meta-heuristics relying on these concepts, an iterated local search and a hybrid genetic algorithm, are presented. Extensive computational experiments demonstrate the remarkable performance of these methods on classic benchmark instances for multi-depot vehicle routing problems with and without fleet mix, as well as the notable contribution of the implicit depot choice and positioning methods to the search performance. New state-of-the-art results are obtained for multi-depot vehicle routing problems (MDVRP), and multi-depot vehicle fleet mix problems (MDVFMP) with unconstrained fleet size. The proposed concepts are fairly general, and widely applicable to many other vehicle routing variants.
               
            

@&#INTRODUCTION@&#

Vehicle Routing Problems (VRP) with combined assignment choices, such as multi-depot and mixed-fleet settings, appear prominently in many applications related to transportation, production planning, robotics, maintenance, health care or emergency relief. These combinatorial optimization problems require two levels of decisions, related respectively to the sequencing of visits to customers into routes, and the assignment of customers to some global resources, such as depots or vehicle types. Heuristics and meta-heuristics that rely on separate optimization procedures for addressing each aspect, e.g. separate families of local searches, large neighborhoods or crossovers to work on the order of visits, the depot choices or the vehicle types, may overlook a wide range of potential solution refinements involving joint changes in the sequencing and assignment decisions, e.g. swapping two customers and in the meantime changing the vehicle or the depot assigned to the routes. Thus, most advanced meta-heuristics combine these decisions within purposeful optimization procedures to achieve notable performance gains (see Prins, 2009b, for example), though the number of combined solution changes tends to become computationally expensive to investigate.

To contribute towards addressing this challenge, this paper proposes a new bidirectional dynamic programming approach to optimally manage the choices of vehicle, depot, and first customer visited in a route, the so-called optimal rotation, directly at the level of route evaluations in vehicle routing heuristics. We thus introduce a new Local Search (LS) in which the neighborhoods are solely based on customer-visits relocations and arc exchanges, while dynamic programming-based route evaluation functions produce optimal depot placements, choices and rotations for each alternative route. Since several advanced meta-heuristics for vehicle routing problems require a Split algorithm to optimally segment a solution represented as a giant tour into several routes, we also derive an advanced Split algorithm with compound vehicle assignments, depot choices and rotations. The proposed enhanced procedures work with the same computational complexity as the classic ones from the literature. Thus, the additional capability we introduce does not lead to any additional computational overhead.

As a proof of concept, these methodologies are integrated and tested within two meta-heuristics: a simple multi-start Iterated Local Search (ILS) similar to the one of Prins (2009a) for the capacitated VRP, and a more elaborate Hybrid Genetic Search with Advanced Diversity Control (HGSADC) similar to the one of Vidal, Crainic, Gendreau, Lahrichi, and Rei (2012, 2013, 2014). Two specific problems are investigated, the multi-depot fleet mix problem requiring combined decisions on assignments to vehicles types and depot along with sequencing choices, and the classic multi-depot VRP with unlimited fleet. Extensive computational experiments, on small- and large-scale benchmark instances with up to 960 customers demonstrate the remarkable performance of the proposed meta-heuristics, as well as the notable contribution of the combined neighborhoods to the search performance. In particular, the HGSADC built on these compound neighborhoods outperforms all current methods on multi-depot vehicle routing variants with or without mixed-fleet, and with unlimited fleet size. All known optimal solutions, with up to 150 customers, are systematically found.

To facilitate the presentation, we first introduce in Section 2 the problems, notations and variants considered in our experiments. Sections 3 and 4 describe the proposed methodology for optimally managing depot, vehicle choices and rotations within route evaluations, and presents the advanced Split method. The integration of these procedures into a neighborhood-based and a population-based meta-heuristic is discussed in Section 5. The computational experiments are reported in Section 6, and Section 7 concludes.

Vehicle Routing Problems (VRP) aim to design least cost vehicle routes to service geographically dispersed customers (Toth & Vigo, 2002; Cordeau, Laporte, Savelsbergh, & Vigo, 2007; Golden, Raghavan, & Wasil, 2008; Laporte, 2009; Vidal, Crainic, Gendreau, & Prins, 2013c). Emphasis is still growing on this family of problems after 50years of research, mostly because of their major economic impact in many application fields, but also because of the considerable amount of problem variants that must be dealt with to adequately address practical settings. Practical applications, indeed, lead to a variety of problem attributes that complement the classic VRP model, and seek to account for customer requirements (e.g., schedules, consistency), network and vehicle characteristics (mixed fleet, multiple depots), and driver’s needs (working hour regulations, lunch breaks) among others.

Two attributes especially, mixed-fleet and multi-depot, are recurrent in many large-scale logistics applications. The problem combining these attributes, known as the Multi-Depot Vehicle Fleet Mix Problem (MDVFMP), can be defined as follows. Let 
                        
                           G
                           =
                           (
                           V
                           ,
                           E
                           )
                        
                      be a complete undirected graph, in which the vertices 
                        
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                        
                      with 
                        
                           i
                           ∈
                           {
                           1
                           ,
                           …
                           ,
                           d
                           }
                        
                      represent depots with infinite capacity, while the n vertices 
                        
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                        
                      with 
                        
                           i
                           ∈
                           {
                           d
                           +
                           1
                           ,
                           …
                           ,
                           d
                           +
                           n
                           }
                        
                      stand for customers with a demand for a non-negative amount of product 
                        
                           
                              
                                 q
                              
                              
                                 i
                              
                           
                        
                     . The edges 
                        
                           (
                           i
                           ,
                           j
                           )
                           ∈
                           E
                        
                      represent the possibility of traveling between vertices 
                        
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                        
                      and 
                        
                           
                              
                                 v
                              
                              
                                 j
                              
                           
                        
                      for a total travel distance of 
                        
                           
                              
                                 c
                              
                              
                                 ij
                              
                           
                        
                     . Finally, w types of vehicles are available in unlimited quantity, any vehicle k being characterized by a base acquisition/depreciation cost 
                        
                           
                              
                                 e
                              
                              
                                 k
                              
                           
                        
                     , a per-distance-unit cost 
                        
                           
                              
                                 u
                              
                              
                                 k
                              
                           
                        
                     , and a capacity 
                        
                           
                              
                                 Q
                              
                              
                                 k
                              
                           
                        
                     . The overall fleet, containing a large number of vehicles of each types, is notated 
                        
                           F
                        
                     . As such, the minimum cost 
                        
                           Φ
                           (
                           x
                           ,
                           q
                           )
                        
                      to perform a route with distance x and total demand q is given by
                        
                           (1)
                           
                              Φ
                              (
                              x
                              ,
                              q
                              )
                              =
                              
                                 
                                    
                                       min
                                    
                                    
                                       k
                                       ∈
                                       F
                                       /
                                       q
                                       ⩽
                                       
                                          
                                             Q
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                              
                              {
                              
                                 
                                    e
                                 
                                 
                                    k
                                 
                              
                              +
                              
                                 
                                    u
                                 
                                 
                                    k
                                 
                              
                              x
                              }
                              .
                           
                        
                     
                  

The MDVFMP aims to find a set of routes, as well as their assignment to vehicles and depots, to service each customer once and minimize the total cost. Each route assigned to any vehicle k must start and end at the same depot location and carry less than 
                        
                           
                              
                                 Q
                              
                              
                                 k
                              
                           
                        
                      of units of products. A mathematical formulation is given in Eqs. (2)–(9). The binary variables 
                        
                           
                              
                                 x
                              
                              
                                 ijko
                              
                           
                        
                      take value 1 if and only if vertex 
                        
                           
                              
                                 v
                              
                              
                                 j
                              
                           
                        
                      is visited immediately after 
                        
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                        
                      by a vehicle k from depot o. The objective, presented in Eq. (2), includes the base cost of 
                        
                           
                              
                                 e
                              
                              
                                 k
                              
                           
                        
                      of any used vehicle k, and the distance-based cost 
                        
                           
                              
                                 u
                              
                              
                                 k
                              
                           
                           
                              
                                 c
                              
                              
                                 ij
                              
                           
                        
                     . Eq. (3) constrains each customer to be visited once. For every depot and vehicle, Eq. (4) limits the number of routes to one, Eq. (5) ensures the consistency between the depot assignment, and the origin location and Eq. (6) ensures the conservation of the flow. Eq. (7) enforces the capacity limits for the vehicles, and sub-tours are eliminated by Eq. (8).
                        
                           (2)
                           
                              Minimize
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       ∈
                                       F
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       o
                                       =
                                       1
                                    
                                    
                                       d
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                =
                                                d
                                                +
                                                1
                                             
                                             
                                                d
                                                +
                                                n
                                             
                                          
                                       
                                       
                                          
                                             e
                                          
                                          
                                             k
                                          
                                       
                                       
                                          
                                             x
                                          
                                          
                                             oiko
                                          
                                       
                                       +
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                d
                                                +
                                                n
                                             
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                d
                                                +
                                                n
                                             
                                          
                                       
                                       
                                          
                                             u
                                          
                                          
                                             k
                                          
                                       
                                       
                                          
                                             c
                                          
                                          
                                             ij
                                          
                                       
                                       
                                          
                                             x
                                          
                                          
                                             ijko
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (3)
                           
                              s
                              .
                              t
                              .
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       d
                                       +
                                       n
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       o
                                       =
                                       1
                                    
                                    
                                       d
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       ∈
                                       F
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    ijko
                                 
                              
                              =
                              1
                              
                              i
                              =
                              d
                              +
                              1
                              ,
                              …
                              ,
                              d
                              +
                              n
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       d
                                       +
                                       n
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    ojko
                                 
                              
                              ⩽
                              1
                              
                              k
                              ∈
                              F
                              ;
                              
                              o
                              =
                              1
                              ,
                              …
                              ,
                              d
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       
                                          
                                             o
                                          
                                          
                                             ′
                                          
                                       
                                       ∈
                                       {
                                       1
                                       ,
                                       …
                                       ,
                                       d
                                       }
                                       -
                                       {
                                       o
                                       }
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       d
                                       +
                                       n
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          o
                                       
                                       
                                          ′
                                       
                                    
                                    jko
                                 
                              
                              =
                              0
                              
                              k
                              ∈
                              F
                              ;
                              
                              o
                              =
                              1
                              ,
                              …
                              ,
                              d
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       d
                                       +
                                       n
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    jiko
                                 
                              
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       d
                                       +
                                       n
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    ijko
                                 
                              
                              =
                              0
                              
                              i
                              =
                              1
                              ,
                              …
                              ,
                              d
                              +
                              n
                              ;
                              
                              k
                              ∈
                              F
                              ;
                              
                              o
                              =
                              1
                              ,
                              …
                              ,
                              d
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       =
                                       d
                                       +
                                       1
                                    
                                    
                                       d
                                       +
                                       n
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       d
                                       +
                                       n
                                    
                                 
                              
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    ijko
                                 
                              
                              ⩽
                              
                                 
                                    Q
                                 
                                 
                                    k
                                 
                              
                              
                              k
                              ∈
                              F
                              ;
                              
                              o
                              =
                              1
                              ,
                              …
                              ,
                              d
                           
                        
                     
                     
                        
                           (8)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   ∈
                                                   S
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   ∈
                                                   S
                                                
                                             
                                          
                                          
                                             
                                                x
                                             
                                             
                                                ijko
                                             
                                          
                                          ⩽
                                          |
                                          S
                                          |
                                          -
                                          1
                                          
                                          S
                                          ⊂
                                          {
                                          d
                                          +
                                          1
                                          ,
                                          …
                                          ,
                                          d
                                          +
                                          n
                                          }
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                          
                                          |
                                          S
                                          |
                                          ⩾
                                          2
                                          ;
                                          
                                          k
                                          ∈
                                          F
                                          ;
                                          
                                          o
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          d
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (9)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                          
                                             
                                                x
                                             
                                             
                                                ijko
                                             
                                          
                                          ∈
                                          {
                                          0
                                          ,
                                          1
                                          }
                                          
                                          i
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          d
                                          +
                                          n
                                          ;
                                          
                                          j
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          d
                                          +
                                          n
                                          ;
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                          
                                          k
                                          ∈
                                          F
                                          ;
                                          
                                          o
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          d
                                       
                                    
                                 
                              
                           
                        
                     
                  

The MDVFMP includes several prominent problems as special cases, such as the Vehicle Fleet Mix Problem (VFMP) when 
                        
                           d
                           =
                           1
                        
                     , the Multi-Depot VRP (MDVRP) when 
                        
                           w
                           =
                           1
                        
                     , and the Capacitated VRP (CVRP) when 
                        
                           (
                           w
                           ,
                           d
                           )
                           =
                           (
                           1
                           ,
                           1
                           )
                        
                     . The MDVFMP is also NP-hard as a generalization of the CVRP.

Contributions on the MDVFMP are not frequent in the literature, and we are only aware of two published methods. Salhi and Sari (1997) introduced a neighborhood-based method relying on the same concepts as the Variable Neighborhood Search, changing the neighborhoods by increasing size whenever a local optimum is encountered. Advanced moves that impact both the assignment and the sequencing are used once several simpler neighborhoods have been exhausted. More recently, Salhi, Imran, and Wassan (2013) proposed a variable neighborhood search, which identifies borderline customers and applies route aggregation and disaggregation techniques.

The MDVFMP is also a special case of the problems addressed by Irnich (2000), Dondo and Cerdá (2007), and Goel and Gruhn (2008). Yet, a limited fleet has been considered in most cases along with some other problem attributes, leading to different solution techniques.

In contrast, the literature dedicated to its two immediate sub-problems, the MDVRP and the VFMP, is much more furnished. An extensive survey of all methods for these two sub-problems is outside the scope of this section, and we refer to Ombuki-Berman and Hanshar (2009), Vidal et al. (2013c), and Subramanian, Penna, Uchoa, and Ochi (2012) to that extent. Several meta-heuristics produce solutions of remarkable quality. For the MDVRP, the current state of the art results are produced by the Hybrid Genetic Search with Advanced Diversity Control (HGSADC) of Vidal et al. (2012), which relies on efficient crossover and LS-improvement procedures to create new individuals. Of particular interest is the individual evaluation used in HGSADC, which relies on both solution quality and contribution to the population diversity. High-quality solutions have also been generated by the Adaptive Large Neighborhood Search (ALNS) of Pisinger and Ropke (2007), the parallel iterated tabu search heuristic of Cordeau and Maischberger (2012) and the hybrid iterated local search and integer programming approach of Subramanian (2012). The previously-mentioned meta-heuristics enable to adequately address large-scale problem instances, while a number of small and medium-size instances with up to 240 customers can be addressed by the exact approaches of Baldacci and Mingozzi (2009) and Contardo (2012).

For the VFMP, state-of-the-art heuristics are based either on ILS and integer programming (Subramanian et al., 2012; Subramanian, 2012), tabu search (Brandão, 2009), variable neighborhood search (Imran, Salhi, & Wassan, 2009), and hybrid genetic algorithms (Liu, Huang, & Ma, 2009; Prins, 2009b).

It should be noted that most successful hybrid genetic algorithms for the previous problems (Liu et al., 2009; Prins, 2009b; Vidal et al., 2012, 2013, 2014) rely on a solution representation as a giant tour without trip delimiters that does not consider the route segmentation. Such a representation reduces the search space and allows for the use of simple crossovers based on permutations, but requires a Split algorithm to optimally segment the tour into routes whenever a full solution is needed (Prins, 2004). This latter splitting problem is generally solved as a shortest path problem on an acyclic auxiliary directed graph (Beasley, 1983). For the CVRP, the VFMP and the MDVRP, advanced Split algorithms with additional capabilities have been proposed, in order to combine the segmentation choices with decisions on vehicle type-to-customer assignments (Prins, 2009b), depot selections (Kansou & Yassine, 2010), or potential route inversions or rotations (Prins, Labadi, & Reghioui, 2009). These enhanced procedures were shown to contribute significantly to solution quality, however, although implicit depot choice and positioning has been studied in the context of Split algorithms, no such methodology has been to this date proposed in the context of LS. The next section contributes to fill this gap in the state of the art, by introducing a new dynamic programming-based approach to efficiently explore compound LS neighborhoods with sequence changes, optimal vehicle, depot choices and route rotations.

When dealing with vehicle routing variants with combined assignment choices – for example to depots, days, drivers or vehicle types –, the success of heuristics is often linked to their capacity to tightly integrate decisions together. Any change in the routes, especially, may influence the best way to assign these routes to vehicles, depots, or intervals in drivers schedules, or to rotate the route, such that the exploration of compound neighborhoods is often a key to find new combined choices that could otherwise look unfavorable when examined separately.


                     Fig. 1
                      displays three Euclidean problem instances where these situations arise. Customers are represented with diamonds, while depots are represented by larger squares. The coordinates of the vertices considered are listed at the bottom of the figure. For the VRP instance, the vehicle capacity is 
                        
                           Q
                           =
                           3
                        
                      and any customer 
                        
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                        
                      for 
                        
                           i
                           ∈
                           {
                           3
                           ,
                           …
                           ,
                           7
                           }
                        
                      requests one unit of product. All solutions illustrated on the top of this figure are not the global optimum of the problem, but in fact precisely the second best solution (we listed all the solutions when generating the instances). The global optimum is presented below.

It is noteworthy that, even for these small problems with seven nodes, for situations I and II the classical TSP neighborhoods such as 2-OPT or OR-OPT are insufficient to lead to an optimal solution. The same happens in situation III with the 2-OPT*, RELOCATE, SWAP, CROSS and I-CROSS VRP neighborhoods (see Vidal et al., 2013c for a review of these neighborhoods). By looking further at the solution changes required to attain the unique global optimum of our instances, we observe that a simple OR-OPT move of customer 
                        
                           
                              
                                 v
                              
                              
                                 6
                              
                           
                        
                      between customers 
                        
                           
                              
                                 v
                              
                              
                                 2
                              
                           
                        
                      and 
                        
                           
                              
                                 v
                              
                              
                                 3
                              
                           
                        
                     , combined with an optimal placement of the depot 
                        
                           
                              
                                 v
                              
                              
                                 0
                              
                           
                        
                      (i.e., rotation of the route), solves the situation for Case I. A similar setting is encountered in the second case, an OR-OPT move of customers 
                        
                           
                              
                                 v
                              
                              
                                 1
                              
                           
                        
                      and 
                        
                           
                              
                                 v
                              
                              
                                 6
                              
                           
                        
                      between 
                        
                           
                              
                                 v
                              
                              
                                 3
                              
                           
                        
                      and 
                        
                           
                              
                                 v
                              
                              
                                 4
                              
                           
                        
                      with an implicit depot placement between 
                        
                           
                              
                                 v
                              
                              
                                 2
                              
                           
                        
                      and 
                        
                           
                              
                                 v
                              
                              
                                 5
                              
                           
                        
                      leads to the global optimum. Finally, in Case III, relocating customer 
                        
                           
                              
                                 v
                              
                              
                                 6
                              
                           
                        
                      before 
                        
                           
                              
                                 v
                              
                              
                                 4
                              
                           
                        
                      and changing the depot assigned to the receiving route in a compound way leads to the global optimum. There is no other manner to make a transition to these optimal solutions, using classic TSP and VRP local-search neighborhoods, without accepting deteriorating moves.

Such multi-attribute compound neighborhoods open the way to critical solution refinements, but may be computationally expensive to explore. To give an example, searching any classical 2-OPT, 2-OPT*, RELOCATE or SWAP neighborhood with combined depot choices, vehicle assignments and rotations would take 
                        
                           O
                           (
                           
                              
                                 dwn
                              
                              
                                 3
                              
                           
                           )
                        
                      elementary operations when using a straightforward approach that tests all combinations. This complexity is too high to address large problems with meta-heuristics, which usually involve many LS runs.

To address this challenge, we introduce a new efficient search procedure which explores composite VRP neighborhoods based on a bounded number of edge exchanges and node relocations with an optimal choice of vehicle type, depot, and rotation. The proposed approach examines classic VRP neighborhoods of size 
                        
                           O
                           (
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                           )
                        
                      to produce new alternative sequences of visits, and relies on dynamic programming and incremental route evaluations to optimally determine the other attribute decisions. It exploits the fact that any sequence-based neighborhood involving a bounded number of edge exchanges and vertices relocations, can be assimilated to a recombination of a bounded number of sequences of consecutive visits (Kindervater & Savelsbergh, 1997; Vidal, Crainic, Gendreau, & Prins, 2011). Fig. 2
                      (inspired from Vidal et al., 2011) illustrates this property on a 2-OPT* move, involving two edge exchanges, and on a RELOCATE move involving a vertex relocation.

The proposed method requires pre-processing dynamic programming information on the 
                        
                           O
                           (
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                           )
                        
                      subsequences of successive customer visits. The following values are computed for each subsequence 
                        
                           σ
                        
                     : the distance 
                        
                           C
                           (
                           σ
                           )
                        
                      without depot visit, the minimum distance supplement 
                        
                           
                              
                                 C
                              
                              
                                 ^
                              
                           
                           (
                           σ
                           )
                        
                      to also visit one depot between the first and the last delivery, and the sum of customers demands 
                        
                           Q
                           (
                           σ
                           )
                        
                     . This information is used to efficiently compute optimal depot positions for each route produced by the LS. By convention, 
                        
                           
                              
                                 C
                              
                              
                                 ^
                              
                           
                           (
                           σ
                           )
                           =
                           +
                           ∞
                        
                      if a sequence 
                        
                           σ
                        
                      is empty or restricted to a single customer. Thus, for a sequence 
                        
                           
                              
                                 σ
                              
                              
                                 0
                              
                           
                           =
                           (
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                           )
                        
                      containing a single customer, 
                        
                           C
                           (
                           
                              
                                 σ
                              
                              
                                 0
                              
                           
                           )
                           =
                           0
                        
                     , 
                        
                           
                              
                                 C
                              
                              
                                 ^
                              
                           
                           (
                           
                              
                                 σ
                              
                              
                                 0
                              
                           
                           )
                           =
                           +
                           ∞
                        
                     , and 
                        
                           Q
                           (
                           
                              
                                 σ
                              
                              
                                 0
                              
                           
                           )
                           =
                           
                              
                                 q
                              
                              
                                 i
                              
                           
                        
                     . Propositions 1 and 2 enable to exploit pre-processed information on subsequences to perform efficient move evaluations with rotations and depot assignment.

For any 
                        
                           (
                           i
                           ,
                           j
                           )
                           ∈
                           
                              
                                 {
                                 d
                                 +
                                 1
                                 ,
                                 …
                                 ,
                                 d
                                 +
                                 n
                                 }
                              
                              
                                 2
                              
                           
                        
                     , define the distance supplement 
                        
                           
                              
                                 
                                    
                                       c
                                    
                                    
                                       ˆ
                                    
                                 
                              
                              
                                 ij
                              
                           
                           =
                           
                              
                                 min
                              
                              
                                 o
                                 ∈
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 d
                                 }
                              
                           
                           {
                           
                              
                                 c
                              
                              
                                 io
                              
                           
                           +
                           
                              
                                 c
                              
                              
                                 oj
                              
                           
                           -
                           
                              
                                 c
                              
                              
                                 ij
                              
                           
                           }
                        
                      as the additional distance required to visit the closest depot between customers 
                        
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                        
                      and 
                        
                           
                              
                                 v
                              
                              
                                 j
                              
                           
                        
                      rather than driving directly.
                        Proposition 1
                        
                           The minimum distance 
                           
                              
                                 Z
                                 (
                                 σ
                                 )
                              
                            
                           to perform the sequence 
                           
                              
                                 σ
                                 =
                                 (
                                 
                                    
                                       σ
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       σ
                                    
                                    
                                       |
                                       σ
                                       |
                                    
                                 
                                 )
                              
                            
                           with the best depot choice and route rotation is
                           
                              
                                 (10)
                                 
                                    Z
                                    (
                                    σ
                                    )
                                    =
                                    C
                                    (
                                    σ
                                    )
                                    +
                                    
                                       
                                          c
                                       
                                       
                                          
                                             
                                                σ
                                             
                                             
                                                |
                                                σ
                                                |
                                             
                                          
                                          
                                             
                                                σ
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    +
                                    
                                       min
                                    
                                    {
                                    
                                       
                                          C
                                       
                                       
                                          ^
                                       
                                    
                                    (
                                    σ
                                    )
                                    ,
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                ˆ
                                             
                                          
                                       
                                       
                                          
                                             
                                                σ
                                             
                                             
                                                |
                                                σ
                                                |
                                             
                                          
                                          
                                             
                                                σ
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    }
                                    .
                                 
                              
                           
                        

The distance for completing a given sequence of visits 
                              
                                 σ
                              
                            and coming back to the first location, without any depot visit, is given by 
                              
                                 C
                                 (
                                 σ
                                 )
                                 +
                                 
                                    
                                       c
                                    
                                    
                                       
                                          
                                             σ
                                          
                                          
                                             |
                                             σ
                                             |
                                          
                                       
                                       
                                          
                                             σ
                                          
                                          
                                             1
                                          
                                       
                                    
                                 
                              
                           . There are two depot-positioning options.
                              
                                 1.
                                 Inside the sequence, in this case the distance supplement related to the best depot positioning is defined as 
                                       
                                          
                                             
                                                C
                                             
                                             
                                                ^
                                             
                                          
                                          (
                                          σ
                                          )
                                       
                                     and the total cost is 
                                       
                                          C
                                          (
                                          σ
                                          )
                                          +
                                          
                                             
                                                c
                                             
                                             
                                                
                                                   
                                                      σ
                                                   
                                                   
                                                      |
                                                      σ
                                                      |
                                                   
                                                
                                                
                                                   
                                                      σ
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                          
                                          +
                                          
                                             
                                                C
                                             
                                             
                                                ^
                                             
                                          
                                          (
                                          σ
                                          )
                                       
                                    .

At the end of the sequence, in this case the distance supplement is given by 
                                       
                                          
                                             
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      ˆ
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      σ
                                                   
                                                   
                                                      |
                                                      σ
                                                      |
                                                   
                                                
                                                
                                                   
                                                      σ
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                          
                                       
                                     and the cost is 
                                       
                                          C
                                          (
                                          σ
                                          )
                                          +
                                          
                                             
                                                c
                                             
                                             
                                                
                                                   
                                                      σ
                                                   
                                                   
                                                      |
                                                      σ
                                                      |
                                                   
                                                
                                                
                                                   
                                                      σ
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      ˆ
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      σ
                                                   
                                                   
                                                      |
                                                      σ
                                                      |
                                                   
                                                
                                                
                                                   
                                                      σ
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                          
                                       
                                    .

The cost of the optimal positioning is the minimum of the two values. □

Now, define the concatenation 
                        
                           σ
                           ⊕
                           
                              
                                 σ
                              
                              
                                 ′
                              
                           
                        
                      of two sequences 
                        
                           σ
                           =
                           (
                           
                              
                                 σ
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 σ
                              
                              
                                 |
                                 σ
                                 |
                              
                           
                           )
                        
                      and 
                        
                           
                              
                                 σ
                              
                              
                                 ′
                              
                           
                           =
                           
                              
                                 
                                    
                                       
                                          σ
                                       
                                       
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          σ
                                       
                                       
                                          |
                                          
                                             
                                                σ
                                             
                                             
                                                ′
                                             
                                          
                                          |
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                        
                      as 
                        
                           σ
                           ⊕
                           
                              
                                 σ
                              
                              
                                 ′
                              
                           
                           =
                           
                              
                                 
                                    
                                       
                                          σ
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          σ
                                       
                                       
                                          |
                                          σ
                                          |
                                       
                                    
                                    ,
                                    
                                       
                                          σ
                                       
                                       
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          σ
                                       
                                       
                                          |
                                          
                                             
                                                σ
                                             
                                             
                                                ′
                                             
                                          
                                          |
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                        
                     .
                        Proposition 2
                        
                           The values 
                           
                              
                                 C
                                 (
                                 σ
                                 ⊕
                                 
                                    
                                       σ
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 ,
                                 
                                    
                                       C
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 σ
                                 ⊕
                                 
                                    
                                       σ
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                           
                           , and 
                           
                              
                                 Q
                                 (
                                 σ
                                 ⊕
                                 
                                    
                                       σ
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                           
                           , for the concatenation of two sequences 
                           
                              
                                 σ
                              
                            
                           and 
                           
                              
                                 
                                    
                                       σ
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                           , can be computed from the individual information on each sequence as follows:
                           
                              
                                 (11)
                                 
                                    C
                                    (
                                    σ
                                    ⊕
                                    
                                       
                                          σ
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    =
                                    C
                                    (
                                    σ
                                    )
                                    +
                                    
                                       
                                          c
                                       
                                       
                                          
                                             
                                                σ
                                             
                                             
                                                |
                                                σ
                                                |
                                             
                                          
                                          
                                             
                                                σ
                                             
                                             
                                                1
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                    +
                                    C
                                    (
                                    
                                       
                                          σ
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 (12)
                                 
                                    
                                       
                                          C
                                       
                                       
                                          ^
                                       
                                    
                                    (
                                    σ
                                    ⊕
                                    
                                       
                                          σ
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    =
                                    
                                       min
                                    
                                    
                                       
                                          
                                             
                                                
                                                   C
                                                
                                                
                                                   ^
                                                
                                             
                                             (
                                             σ
                                             )
                                             ,
                                             
                                                
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         ˆ
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         σ
                                                      
                                                      
                                                         |
                                                         σ
                                                         |
                                                      
                                                   
                                                   
                                                      
                                                         σ
                                                      
                                                      
                                                         1
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                             ,
                                             
                                                
                                                   C
                                                
                                                
                                                   ^
                                                
                                             
                                             (
                                             
                                                
                                                   σ
                                                
                                                
                                                   ′
                                                
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (13)
                                 
                                    Q
                                    (
                                    σ
                                    ⊕
                                    
                                       
                                          σ
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    =
                                    Q
                                    (
                                    σ
                                    )
                                    +
                                    Q
                                    (
                                    
                                       
                                          σ
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                 
                              
                           
                        

Eq. (11) directly follows from the fact that the distance 
                              
                                 C
                                 (
                                 σ
                                 ⊕
                                 
                                    
                                       σ
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                            is the sum of the distances from the individual sequences 
                              
                                 C
                                 (
                                 σ
                                 )
                              
                            and 
                              
                                 
                                    
                                       C
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 σ
                                 )
                              
                            plus the cost of the connection 
                              
                                 
                                    
                                       c
                                    
                                    
                                       
                                          
                                             σ
                                          
                                          
                                             |
                                             σ
                                             |
                                          
                                       
                                       
                                          
                                             σ
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                              
                            between the last customer of the first sequence and the first customer of the next sequence.

Furthermore, there are three depot positioning options: (a) inside the first sequence, the distance supplement for the depot visit being given by 
                              
                                 
                                    
                                       C
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 σ
                                 )
                              
                           , (b) inside the second sequence, leading to a distance supplement 
                              
                                 
                                    
                                       C
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 
                                    
                                       σ
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                           , and (c) during the connexion, leading to a distance supplement 
                              
                                 
                                    
                                       
                                          
                                             c
                                          
                                          
                                             ˆ
                                          
                                       
                                    
                                    
                                       
                                          
                                             σ
                                          
                                          
                                             |
                                             σ
                                             |
                                          
                                       
                                       
                                          
                                             σ
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                              
                           . The distance supplement for an optimal depot positioning is the minimum of these three values as stated in Eq. (12). Finally the total demand 
                              
                                 Q
                                 (
                                 σ
                                 ⊕
                                 
                                    
                                       σ
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                            is the sum of the demands on the two sequences, as expressed in Eq. (13). □

Eqs. (11)–(13) are used in a pre-processing phase to derive characteristic information on the subsequences of each new incumbent solution, by iteratively appending single customers at the extremities. This pre-processing phase requires 
                        
                           O
                           (
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                           )
                        
                      calls to the previous operations. The information is updated with the same complexity, for any route modified during the local search. Neighbor solutions, assimilated to recombinations of subsequences, are then efficiently evaluated from the pre-processed values. Because any LS move can be assimilated to a bounded number of concatenations, the evaluation of new routes created by a move is done in 
                        
                           O
                           (
                           1
                           )
                        
                      calls to Eqs. (11)–(13).

Any use of Eqs. (11)–(13) requires 
                        
                           O
                           (
                           d
                           )
                        
                      elementary operations in a case with multiple depots, otherwise 
                        
                           O
                           (
                           1
                           )
                        
                     . The factor d appears within the computation of 
                        
                           
                              
                                 
                                    
                                       c
                                    
                                    
                                       ˆ
                                    
                                 
                              
                              
                                 ij
                              
                           
                        
                      values. Yet, the 
                        
                           
                              
                                 
                                    
                                       c
                                    
                                    
                                       ˆ
                                    
                                 
                              
                              
                                 ij
                              
                           
                        
                      values can be preprocessed at the beginning of the algorithm in 
                        
                           O
                           (
                           
                              
                                 dn
                              
                              
                                 2
                              
                           
                           )
                        
                     , and then be used for all LS runs. Since for the wide majority of neighborhood-based heuristics the number of successive LS is, by far, greater than the number of depots d, the amortized compound move evaluation complexity drops from 
                        
                           O
                           (
                           d
                           )
                        
                      to 
                        
                           O
                           (
                           1
                           )
                        
                      in multi-depot settings.

This methodology thus enables to compute the route distances resulting from any compound sequence-based move with a best choice of rotation and depot in 
                        
                           O
                           (
                           1
                           )
                        
                      amortized time. The implicit rotation optimization is applicable to many VRP variants, and the additional implicit choice of depot has to potential to strongly enhance the capacities of meta-heuristics for multi-depot settings. Finally, in presence of a mixed fleet, the optimal vehicle type can also be chosen in a compound way in 
                        
                           O
                           (
                           w
                           )
                        
                      time, and even 
                        
                           O
                           (
                           1
                           )
                        
                      once some cost tables of pseudo-polynomial size are preprocessed (Prins, 2009b).

Before going further with meta-heuristics implementations relying on these concepts, we detail another methodological result which follows from the previous property: an advanced Split algorithm which has the ability to optimally segment the giant tour, choose the vehicles and the depots, and rotate the routes.

Consider the example illustrated in Fig. 3
                     . Let 
                        
                           
                              
                                 π
                              
                              
                                 i
                              
                           
                        
                      be the ith customer in the giant tour. The proposed algorithm computes an optimal compound segmentation in three routes corresponding to three sequences of customers (
                        
                           
                              
                                 π
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 π
                              
                              
                                 2
                              
                           
                        
                     ), (
                        
                           
                              
                                 π
                              
                              
                                 3
                              
                           
                        
                     ,…,
                        
                           
                              
                                 π
                              
                              
                                 6
                              
                           
                        
                     ) and (
                        
                           
                              
                                 π
                              
                              
                                 7
                              
                           
                           ,
                           
                              
                                 π
                              
                              
                                 8
                              
                           
                        
                     ), with the best depot and vehicle choices. Also, notice that for the sequence (
                        
                           
                              
                                 π
                              
                              
                                 3
                              
                           
                        
                     ,…,
                        
                           
                              
                                 π
                              
                              
                                 6
                              
                           
                        
                     ) it is advantageous not to visit the depot between the sequence extremities 
                        
                           
                              
                                 π
                              
                              
                                 3
                              
                           
                        
                      and 
                        
                           
                              
                                 π
                              
                              
                                 6
                              
                           
                        
                     , as it would be in a classic Split procedure, but rather between 
                        
                           
                              
                                 π
                              
                              
                                 3
                              
                           
                        
                      and 
                        
                           
                              
                                 π
                              
                              
                                 4
                              
                           
                        
                     . The compound detection of these rotations is also managed by the method.

As in Beasley (1983) and subsequent works, our advanced Split assimilates the problem of optimally segmenting a giant tour to a shortest path problem on a directed acyclic auxiliary graph 
                        
                           H
                           =
                           (
                           
                              
                                 V
                              
                              
                                 ′
                              
                           
                           ,
                           A
                           )
                        
                     , where 
                        
                           
                              
                                 V
                              
                              
                                 ′
                              
                           
                        
                      contains 
                        
                           n
                           +
                           1
                        
                      nodes indexed from 0 to n. Each arc 
                        
                           (
                           i
                           ,
                           j
                           )
                           ∈
                           A
                        
                      with 
                        
                           i
                           <
                           j
                        
                      represents a potential trip visiting the subsequence of customers 
                        
                           
                              
                                 π
                              
                              
                                 i
                                 +
                                 1
                              
                           
                        
                      to 
                        
                           
                              
                                 π
                              
                              
                                 j
                              
                           
                        
                     . The cost 
                        
                           
                              
                                 h
                              
                              
                                 ij
                              
                           
                        
                      of arc 
                        
                           (
                           i
                           ,
                           j
                           )
                        
                      corresponds to the cost to serve the associated subsequence of customers. The proposed approach accounts for rotations and assignments within this cost definition, and thus 
                        
                           
                              
                                 h
                              
                              
                                 ij
                              
                           
                        
                      stands for the best cost to service the sequence of customers 
                        
                           
                              
                                 π
                              
                              
                                 i
                                 +
                                 1
                              
                           
                        
                      to 
                        
                           
                              
                                 π
                              
                              
                                 j
                              
                           
                        
                     , considered as cyclic (
                        
                           
                              
                                 π
                              
                              
                                 j
                              
                           
                        
                      is followed by 
                        
                           
                              
                                 π
                              
                              
                                 i
                                 +
                                 1
                              
                           
                        
                     ) while optimally choosing the depot, vehicle type, and rotation. Section 3 gives the methods to compute all these values on subsequences in 
                        
                           O
                           (
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                           )
                        
                      time.
                        Algorithm 1
                        Split with vehicle choice, depot choice and rotations
                              
                                 
                                    
                                    
                                       
                                          1: // Compute the costs 
                                             
                                                
                                                   
                                                      
                                                         h
                                                      
                                                      
                                                         ij
                                                      
                                                   
                                                
                                              
                                             for 
                                             
                                                
                                                   0
                                                   ⩽
                                                   i
                                                   <
                                                   j
                                                   ⩽
                                                   n
                                                
                                              
                                             in the auxiliary graph 
                                             
                                                
                                                   H
                                                
                                             
                                          
                                       
                                       
                                          2: for 
                                             
                                                
                                                   i
                                                   =
                                                   1
                                                
                                              to n 
                                             do
                                          
                                       
                                       
                                          3: // Single node case
                                          
                                       
                                       
                                          4: 
                                             
                                                
                                                   σ
                                                   =
                                                   {
                                                   
                                                      
                                                         π
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   }
                                                   ,
                                                   C
                                                   (
                                                   σ
                                                   )
                                                   =
                                                   0
                                                   ,
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         ^
                                                      
                                                   
                                                   (
                                                   σ
                                                   )
                                                   =
                                                   +
                                                   ∞
                                                   ,
                                                   Q
                                                   (
                                                   σ
                                                   )
                                                   =
                                                   
                                                      
                                                         q
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                              and 
                                                
                                                   
                                                      
                                                         h
                                                      
                                                      
                                                         i
                                                         -
                                                         1
                                                         ,
                                                         i
                                                      
                                                   
                                                   =
                                                   Φ
                                                   (
                                                   
                                                      
                                                         
                                                            
                                                               c
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               π
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         
                                                            
                                                               π
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         q
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          5: // Append customers to compute costs on larger routes
                                          
                                       
                                       
                                          6: 
                                             for each 
                                                
                                                   j
                                                   =
                                                   i
                                                   +
                                                   1
                                                
                                              to n 
                                             do
                                          
                                       
                                       
                                          7: 
                                             if 
                                             
                                                
                                                   Q
                                                   (
                                                   σ
                                                   )
                                                   +
                                                   
                                                      
                                                         q
                                                      
                                                      
                                                         
                                                            
                                                               π
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                      
                                                   
                                                   ⩽
                                                   
                                                      
                                                         Q
                                                      
                                                      
                                                         max
                                                      
                                                   
                                                
                                              
                                             then
                                          
                                       
                                       
                                          8: 
                                             
                                             
                                                
                                                   C
                                                   (
                                                   σ
                                                   )
                                                   =
                                                   C
                                                   (
                                                   σ
                                                   )
                                                   +
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         
                                                            
                                                               π
                                                            
                                                            
                                                               j
                                                               -
                                                               1
                                                            
                                                         
                                                         
                                                            
                                                               π
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          9: 
                                             
                                             
                                                
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         ^
                                                      
                                                   
                                                   (
                                                   σ
                                                   )
                                                   =
                                                   min
                                                   {
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         ^
                                                      
                                                   
                                                   (
                                                   σ
                                                   )
                                                   ,
                                                   
                                                      
                                                         
                                                            
                                                               c
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               π
                                                            
                                                            
                                                               j
                                                               -
                                                               1
                                                            
                                                         
                                                         
                                                            
                                                               π
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                      
                                                   
                                                   }
                                                
                                             
                                          
                                       
                                       
                                          10: 
                                             
                                             
                                                
                                                   Q
                                                   (
                                                   σ
                                                   )
                                                   =
                                                   Q
                                                   (
                                                   σ
                                                   )
                                                   +
                                                   
                                                      
                                                         q
                                                      
                                                      
                                                         
                                                            
                                                               π
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          11: 
                                             
                                             
                                                
                                                   
                                                      
                                                         h
                                                      
                                                      
                                                         i
                                                         -
                                                         1
                                                         ,
                                                         j
                                                      
                                                   
                                                   =
                                                   Φ
                                                   (
                                                   C
                                                   (
                                                   σ
                                                   )
                                                   +
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         
                                                            
                                                               π
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                         
                                                            
                                                               π
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                      
                                                   
                                                   +
                                                   min
                                                   {
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         ^
                                                      
                                                   
                                                   (
                                                   σ
                                                   )
                                                   ,
                                                   
                                                      
                                                         
                                                            
                                                               c
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               π
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                         
                                                            
                                                               π
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                      
                                                   
                                                   }
                                                   ,
                                                   Q
                                                   (
                                                   σ
                                                   )
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          12: Solve the shortest path problem on 
                                                
                                                   H
                                                
                                              with costs 
                                                
                                                   
                                                      
                                                         h
                                                      
                                                      
                                                         ij
                                                      
                                                   
                                                
                                             , using Bellman algorithm
                                       
                                       
                                          13: Return the set of routes associated to the set of arcs of the shortest path
                                       
                                    
                                 
                              
                           
                        

Once all the costs are determined, applying the Bellman algorithm for undirected acyclic graphs (see Cormen, Stein, Rivest, & Leiserson, 2001) on 
                        
                           H
                        
                      leads to the best compound segmentation with vehicle types, depot choices and positioning within the routes. The overall splitting algorithm, given in Algorithm 1, works in 
                        
                           O
                           (
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                           )
                        
                      time. This complexity of 
                        
                           O
                           (
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                           )
                        
                      is the same as for the basic version of Split (Beasley, 1983; Prins, 2004) without depot choices and rotations. In this algorithm, 
                        
                           
                              
                                 Q
                              
                              
                                 max
                              
                           
                        
                      denotes the capacity of the largest vehicle type. For the sake of simplicity, we separated the algorithm into a cost computation phase (equivalent to generating the graph 
                        
                           H
                        
                     ), and a shortest path resolution. These two phases could be done simultaneously to avoid storing the costs, but without impact on the theoretical complexity.

This advanced Split procedure can thus be viewed as a byproduct of advanced subsequence evaluation procedures. The same observation arose in Vidal et al. (2014), where different operators for sequence evaluations were shown to provide the keys to design splitting algorithms for a wide family of VRP variants. We believe that Split algorithms and local searches with pre-computations on subsequences take their roots on the same dynamic programming concepts, and that as we progress in our understanding of these procedures, these common fundamentals become more apparent.

The previous move evaluations and Split methodologies have been tested within two types of methods, a multi-start ILS following the guidelines of Prins (2009b), representing perhaps one of the simplest alternative for a neighborhood-based meta-heuristic, and an elaborate population-based meta-heuristic such as HGSADC of Vidal et al. (2012, 2013, 2014).

The ILS framework is based on the iterative application of shaking operators and LS-improvement procedures on an incumbent solution to obtain new – hopefully better – solutions. This process is repeated until a maximum number of iterations without improvement 
                           
                              
                                 
                                    n
                                 
                                 
                                    
                                       it-ils
                                    
                                 
                              
                           
                         is attained. In addition, as recommended by Prins (2009a), three enhancements have been added to the method. Firstly, 
                           
                              
                                 
                                    n
                                 
                                 
                                    
                                       c
                                    
                                 
                              
                           
                         solutions are generated at each iteration instead of one, the best solution being kept for the next iteration. This variant of ILS is sometimes called evolutionary local search (Wolf & Merz, 2007). Secondly, the overall method is started 
                           
                              
                                 
                                    n
                                 
                                 
                                    
                                       r
                                    
                                 
                              
                           
                         times from different initial solutions. Finally, two alternative search spaces are considered, a giant-tour solution representation being used during the shaking phases, while a complete solution representation is used during LS-improvement procedures. We thus rely on the advanced Split procedure of Section 4 to pass from a giant-tour solution representation to a complete solution while efficiently managing assignment choices and rotations. The general structure of the meta-heuristic is presented in Algorithm 2. The algorithm starts from a random solution (random permutation of the giant-tour), and terminates when all 
                           
                              
                                 
                                    n
                                 
                                 
                                    
                                       r
                                    
                                 
                              
                           
                         restarts have been exhausted, or when a maximum time limit 
                           
                              
                                 
                                    T
                                 
                                 
                                    
                                       max
                                    
                                 
                              
                           
                         is attained.
                           Algorithm 2
                           Iterated local search framework
                                 
                                    
                                       
                                       
                                          
                                             1: 
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best-ever
                                                            
                                                         
                                                      
                                                      ←
                                                      ø
                                                   
                                                
                                             
                                          
                                          
                                             2: for 
                                                
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               r
                                                            
                                                         
                                                      
                                                      =
                                                      1
                                                   
                                                 to 
                                                   
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            
                                                               r
                                                            
                                                         
                                                      
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             3: 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best
                                                            
                                                         
                                                      
                                                      ←
                                                      ø
                                                      ;
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               ils
                                                            
                                                         
                                                      
                                                      =
                                                      0
                                                   
                                                
                                             
                                          
                                          
                                             4: 
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               feas
                                                            
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               infeas
                                                            
                                                         
                                                      
                                                      )
                                                      ←
                                                   
                                                InitializeRandom()
                                          
                                          
                                             5: 
                                                while 
                                                
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               ils
                                                            
                                                         
                                                      
                                                      <
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            
                                                               it-ils
                                                            
                                                         
                                                      
                                                   
                                                 and Time() 
                                                   
                                                      <
                                                      
                                                         
                                                            T
                                                         
                                                         
                                                            
                                                               max
                                                            
                                                         
                                                      
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             6: 
                                                
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               children
                                                            
                                                         
                                                      
                                                      ←
                                                      ø
                                                   
                                                
                                             
                                          
                                          
                                             7: 
                                                for 
                                                
                                                   
                                                      s
                                                      =
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               feas
                                                            
                                                         
                                                      
                                                   
                                                 and 
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               infeas
                                                            
                                                         
                                                      
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             8: 
                                                
                                                for 
                                                
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               c
                                                            
                                                         
                                                      
                                                      =
                                                      1
                                                   
                                                 to 
                                                   
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            
                                                               c
                                                            
                                                         
                                                      
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             9: 
                                                
                                                if 
                                                
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               ils
                                                            
                                                         
                                                      
                                                      =
                                                      k
                                                      ×
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            
                                                               x
                                                            
                                                         
                                                      
                                                      
                                                      with
                                                      
                                                      k
                                                      ∈
                                                      
                                                         
                                                            N
                                                         
                                                         
                                                            ∗
                                                            +
                                                         
                                                      
                                                   
                                                 
                                                then 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               curr
                                                            
                                                         
                                                      
                                                      ←
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best
                                                            
                                                         
                                                      
                                                   
                                                 
                                                else 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               curr
                                                            
                                                         
                                                      
                                                      ←
                                                      s
                                                   
                                                
                                             
                                          
                                          
                                             10: 
                                                
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               curr
                                                            
                                                         
                                                      
                                                      ←
                                                   
                                                Shaking(s)
                                          
                                          
                                             11: 
                                                
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               curr
                                                            
                                                         
                                                      
                                                      ←
                                                   
                                                AdvancedSplit(
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               curr
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             12: 
                                                
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               curr
                                                            
                                                         
                                                      
                                                      ←
                                                   
                                                LocalSearch(
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               curr
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             13: 
                                                
                                                
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               children
                                                            
                                                         
                                                      
                                                      ←
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               curr
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             14: 
                                                
                                                if Infeasible
                                                   
                                                      (
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               curr
                                                            
                                                         
                                                      
                                                      )
                                                   
                                                 
                                                then 
                                                
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               children
                                                            
                                                         
                                                      
                                                      ←
                                                   
                                                Repair (
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               curr
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             15: 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               feas
                                                            
                                                         
                                                      
                                                      ←
                                                   
                                                BestFeasible (
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               children
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             16: 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               infeas
                                                            
                                                         
                                                      
                                                      ←
                                                   
                                                BestInFeasible (
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               children
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             17: 
                                                if Cost (
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               feas
                                                            
                                                         
                                                      
                                                   
                                                ) 
                                                   
                                                      <
                                                   
                                                 Cost (
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best
                                                            
                                                         
                                                      
                                                   
                                                ) then 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best
                                                            
                                                         
                                                      
                                                      ←
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               feas
                                                            
                                                         
                                                      
                                                      ;
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               ils
                                                            
                                                         
                                                      
                                                      =
                                                      0
                                                   
                                                
                                             
                                          
                                          
                                             18: 
                                                else 
                                                
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               ils
                                                            
                                                         
                                                      
                                                      =
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               ils
                                                            
                                                         
                                                      
                                                      +
                                                      1
                                                   
                                                
                                             
                                          
                                          
                                             19: AdaptPenaltyCoefficients()
                                          
                                          
                                             20: if Cost (
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best
                                                            
                                                         
                                                      
                                                   
                                                ) 
                                                   
                                                      <
                                                   
                                                 Cost (
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best-ever
                                                            
                                                         
                                                      
                                                   
                                                ) then 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best-ever
                                                            
                                                         
                                                      
                                                      ←
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             21: return 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best-ever
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

In addition, several studies highlighted the benefits of using intermediate penalized infeasible solutions with respect to route constraints (Cordeau, Gendreau, & Laporte, 1997; Glover & Hao, 2011; Vidal et al., 2012, 2013, 2014). Hence, both load and distance constraints are relaxed in our ILS, the cost 
                           
                              Φ
                              (
                              x
                              ,
                              q
                              )
                           
                         of a route with distance x and total demand q begin given in Eq. (14), where 
                           
                              
                                 
                                    ω
                                 
                                 
                                    
                                       d
                                    
                                 
                              
                           
                         and 
                           
                              
                                 
                                    ω
                                 
                                 
                                    
                                       q
                                    
                                 
                              
                           
                         are the penalties for one unit of excess distance and load, respectively. These penalty coefficients are adapted as in Vidal et al. (2012, 2013, 2014) relatively to the proportion of feasible solutions generated by the LS.
                           
                              (14)
                              
                                 Φ
                                 (
                                 x
                                 ,
                                 q
                                 )
                                 =
                                 
                                    
                                       
                                          min
                                       
                                       
                                          k
                                          ∈
                                          F
                                       
                                    
                                 
                                 {
                                 
                                    
                                       e
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 
                                    
                                       u
                                    
                                    
                                       k
                                    
                                 
                                 x
                                 +
                                 
                                    
                                       ω
                                    
                                    
                                       D
                                    
                                 
                                 
                                    max
                                 
                                 {
                                 0
                                 ,
                                 x
                                 -
                                 D
                                 }
                                 +
                                 
                                    
                                       ω
                                    
                                    
                                       Q
                                    
                                 
                                 
                                    max
                                 
                                 {
                                 0
                                 ,
                                 q
                                 -
                                 
                                    
                                       Q
                                    
                                    
                                       k
                                    
                                 
                                 }
                                 }
                              
                           
                        
                     

The structure of the method has been slightly changed to account for infeasible solutions. First, it is straightforward to extend the Split algorithm to include penalized infeasibility by modifying the subsequence evaluations, and examining subsequences 
                           
                              σ
                           
                         with a total demand smaller than two times the maximum capacity (
                           
                              Q
                              (
                              σ
                              )
                              +
                              
                                 
                                    q
                                 
                                 
                                    
                                       
                                          π
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                              ⩽
                              2
                              ×
                              
                                 
                                    Q
                                 
                                 
                                    max
                                 
                              
                           
                        , Line 7 of Algorithm 1). In addition, two incumbent solutions are used in the ILS, one feasible, and one infeasible. At each iteration of the ILS, each solution is used to produce 
                           
                              
                                 
                                    n
                                 
                                 
                                    
                                       c
                                    
                                 
                              
                           
                         child solutions. In the event that no feasible solution is currently known, then only the infeasible incumbent solution is used. Furthermore, any infeasible solution undergoes a Repair procedure, where the penalty coefficients are multiplied by a factor of 10, and the LS-improvement procedure is applied to focus the search towards feasible solutions. A last attempt with a factor of 100 is performed if the infeasibility remains. The resulting repaired solution is included in the set of offspring.

The LS-improvement procedure is based on 2-OPT, 2-OPT*, CROSS and I-CROSS neighborhoods restricted to sequences of less than two vertices. The optimal depot choice and position, and vehicle type choice is determined in a compound way using the approach of Section 3. A granularity threshold (Toth & Vigo, 2003) is set to limit the neighborhood size, the moves being tested only between a vertex 
                           
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                           
                         and one of its 
                           
                              Γ
                           
                         closest neighbors. Moves are explored in random order, any improving move being directly applied.

Shaking is done by swapping two pairs of random customers within the giant tour. Finally, our experimental analyses show that adding a probability of Recall, that is, jumping back to the current best solution, enhances the search performance by letting the method focus further on elite solution characteristics. We thus included this procedure, and after every 
                           
                              
                                 
                                    n
                                 
                                 
                                    
                                       x
                                    
                                 
                              
                           
                         successive solution generations without improvement, consider the best solution as starting point for the next shaking and LS.

To further investigate the contribution of the proposed strategies in the context of a population-based method, we derived an extension of the HGSADC framework of Vidal et al. (2012, 2013, 2014) using the implicit depot management during LS and Split. The method relies on the following main elements:
                           
                              •
                              An hybridization between genetic algorithms and efficient local-improvement procedures. The same LS as in Section 5.1 is used.

A solution representation as a giant tour without trip delimiters. It should be noted that since the depot choice and management is done implicitly by the LS and Split algorithm of Section 4, there is no need to separate the solution representation among different depots.

A two sub-population scheme to manage feasible and penalized infeasible solutions w.r.t. route constraints.

A bi-criteria evaluation of individuals, driven by both solution quality and contribution to the population diversity. This evaluation is used for parent selections and survivors selections when the population size becomes too large.

HGSADC framework 
                                 
                                    
                                       
                                       
                                          
                                             1: 
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               pop
                                                            
                                                         
                                                      
                                                      =
                                                      (
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               feas
                                                            
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               inf
                                                            
                                                         
                                                      
                                                      )
                                                      ←
                                                   
                                                 InitializePopulation()
                                          
                                          
                                             2: 
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best
                                                            
                                                         
                                                      
                                                      ←
                                                      ø
                                                      ;
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               hgs
                                                            
                                                         
                                                      
                                                      =
                                                      0
                                                   
                                                ; 
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               hgs-tot
                                                            
                                                         
                                                      
                                                      =
                                                      0
                                                   
                                                
                                             
                                          
                                          
                                             3: while 
                                                
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               hgs
                                                            
                                                         
                                                      
                                                      <
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            
                                                               it-hgs
                                                            
                                                         
                                                      
                                                   
                                                 and Time() 
                                                   
                                                      <
                                                      
                                                         
                                                            T
                                                         
                                                         
                                                            
                                                               max
                                                            
                                                         
                                                      
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             4: 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               p1
                                                            
                                                         
                                                      
                                                      ←
                                                   
                                                 BinTournamentSelection (
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               pop
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             5: 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               p2
                                                            
                                                         
                                                      
                                                      ←
                                                   
                                                 BinTournamentSelection (
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               pop
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             6: 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               off
                                                            
                                                         
                                                      
                                                      ←
                                                   
                                                 Crossover(
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               p1
                                                            
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               p2
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             7: 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               off
                                                            
                                                         
                                                      
                                                      ←
                                                   
                                                 AdvancedSplit (
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               off
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             8: 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               off
                                                            
                                                         
                                                      
                                                      ←
                                                   
                                                 LocalSearch (
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               off
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             9: 
                                                
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               pop
                                                            
                                                         
                                                      
                                                      ←
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               off
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             10: 
                                                if Infeasible (
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               off
                                                            
                                                         
                                                      
                                                   
                                                ) and Alea() 
                                                   
                                                      <
                                                      
                                                         
                                                            P
                                                         
                                                         
                                                            
                                                               rep
                                                            
                                                         
                                                      
                                                   
                                                 
                                                then 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               off
                                                            
                                                         
                                                      
                                                      ←
                                                   
                                                 Repair (
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               off
                                                            
                                                         
                                                      
                                                   
                                                ); 
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               pop
                                                            
                                                         
                                                      
                                                      ←
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               off
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             11: 
                                                
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               hgs-tot
                                                            
                                                         
                                                      
                                                      =
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               hgs-tot
                                                            
                                                         
                                                      
                                                      +
                                                      1
                                                   
                                                
                                             
                                          
                                          
                                             12: 
                                                if Cost (
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               off
                                                            
                                                         
                                                      
                                                   
                                                ) 
                                                   
                                                      <
                                                   
                                                 Cost (
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best
                                                            
                                                         
                                                      
                                                   
                                                ) then 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best
                                                            
                                                         
                                                      
                                                      ←
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               off
                                                            
                                                         
                                                      
                                                      ;
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               hgs
                                                            
                                                         
                                                      
                                                      =
                                                      0
                                                   
                                                
                                             
                                          
                                          
                                             13: 
                                                else 
                                                
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               hgs
                                                            
                                                         
                                                      
                                                      =
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               hgs
                                                            
                                                         
                                                      
                                                      +
                                                      1
                                                   
                                                
                                             
                                          
                                          
                                             14: 
                                                if TooLarge (
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               feas
                                                            
                                                         
                                                      
                                                   
                                                ) then SelectSurvivors (
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               feas
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             15: 
                                                if TooLarge (
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               inf
                                                            
                                                         
                                                      
                                                   
                                                ) then SelectSurvivors (
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               inf
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             16: 
                                                if 
                                                
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               hgs
                                                            
                                                         
                                                      
                                                      =
                                                      k
                                                      ×
                                                      
                                                         
                                                            It
                                                         
                                                         
                                                            div
                                                         
                                                      
                                                   
                                                 with 
                                                   
                                                      k
                                                      ∈
                                                      
                                                         
                                                            N
                                                         
                                                         
                                                            ∗
                                                         
                                                      
                                                   
                                                 
                                                then Diversification (
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            
                                                               pop
                                                            
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             17: 
                                                if 
                                                
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            
                                                               hgs-tot
                                                            
                                                         
                                                      
                                                      =
                                                      k
                                                      ×
                                                      
                                                         
                                                            It
                                                         
                                                         
                                                            dec
                                                         
                                                      
                                                   
                                                 with 
                                                   
                                                      k
                                                      ∈
                                                      
                                                         
                                                            N
                                                         
                                                         
                                                            ∗
                                                         
                                                      
                                                   
                                                 
                                                then DecompositionPhase()
                                          
                                          
                                             18: AdaptPenaltyCoefficients()
                                          
                                          
                                             19: return 
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            
                                                               best
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

The structure of the method is described in Algorithm 3. Initial individuals are first randomly generated and inserted in the appropriate sub-population relatively to their feasibility. HGSADC then iteratively selects two individuals by binary tournament in the merged sub-populations to serve as input the ordered crossover (OX) operator (see Prins, 2004), yielding a single offspring 
                           
                              
                                 
                                    S
                                 
                                 
                                    
                                       off
                                    
                                 
                              
                           
                        . This offspring undergoes the advanced Split procedure to optimally delimit and rotate its routes, assign vehicles and depots. Then, 
                           
                              
                                 
                                    S
                                 
                                 
                                    
                                       off
                                    
                                 
                              
                           
                         undergoes the LS-improvement procedure of Section 5.1 and is inserted in the population. In case of infeasibility, it is repaired with probability 
                           
                              
                                 
                                    P
                                 
                                 
                                    
                                       rep
                                    
                                 
                              
                           
                         and added again to the population.

Each sub-population is monitored separately, a survivor selection phase being triggered whenever a maximum size is attained. In addition, diversification and decomposition procedures (Vidal et al., 2013) are regularly used to enhance exploration and intensify the search around elite solution characteristics. The best found solution is returned once 
                           
                              
                                 
                                    n
                                 
                                 
                                    
                                       it-hgs
                                    
                                 
                              
                           
                         successive iterations without improvement have been performed or when a time limit 
                           
                              
                                 
                                    T
                                 
                                 
                                    
                                       max
                                    
                                 
                              
                           
                         is attained.

Extensive computational experiments are conducted to analyze the contribution of the compound neighborhoods within the ILS and HGSADC metaheuristics, and compare these methods with state-of-the-art algorithms from the literature. Three main VRP variants are considered: the CVRP and the MDVRP, two seminal problems covered by a huge literature, and the multi-depot vehicle fleet mix problem (MDVFMP), a good example of rich problem with compound attributes. The goal, with the ILS experiments, is not to put forward a new champion method, but rather to test the impact of the new compound neighborhoods on a simple LS-based metaheuristic.

Five sets of benchmark instances are used for the tests. For the CVRP, we rely on the classic benchmark instances of Christofides, Mingozzi, and Toth (1979) (Set S1) and Golden, Wasil, Kelly, and Chao (1998) (Set S2). S1 includes 10 instances with uniformly geographically distributed customers, and four instances with clustered customers. S2 includes 20 instances with 200–483 customers. These instances display multiple geometric symmetries.

Three sets of instances (Sets S3–S5) are used for multi-depot settings. These instances present a mix of uniformly distributed customers and clustered customers. Sets S3 and S4 of Cordeau et al. (1997) include 33 MDVRP instances with 50–360 customers and two to nine depots. The last Set S5, of fourteen large-scale instances, has been introduced in Vidal et al. (2013) for the MDVRP with time windows, and is used for the MDVRP by removing time-window constraints. This set involves 360–960 customers and four to twelve depots. MDVFMP instances were also derived, as in Salhi and Sari (1997), by keeping the same customer locations and demands, and generating five types of vehicles 
                        
                           
                              
                                 v
                              
                              
                                 k
                              
                           
                        
                      such that 
                        
                           
                              
                                 Q
                              
                              
                                 k
                              
                           
                           =
                           (
                           0.4
                           +
                           0.2
                           k
                           )
                           ∗
                           
                              
                                 Q
                              
                              
                                 ^
                              
                           
                           ,
                           
                              
                                 e
                              
                              
                                 k
                              
                           
                           =
                           70
                           +
                           10
                           k
                        
                      and 
                        
                           
                              
                                 u
                              
                              
                                 k
                              
                           
                           =
                           0.7
                           +
                           0.1
                           k
                        
                      for 
                        
                           k
                           ∈
                           {
                           1
                           ,
                           …
                           ,
                           5
                           }
                           ,
                           
                              
                                 Q
                              
                              
                                 ^
                              
                           
                        
                      standing for the vehicle capacity in the original instance. An unlimited fleet is considered in all experiments.

The run time limit for the methods has been set to 
                        
                           
                              
                                 T
                              
                              
                                 max
                              
                           
                           =
                           20
                        
                      minutes on the medium-scale instance sets (Sets S1 to S4) and 
                        
                           
                              
                                 T
                              
                              
                                 max
                              
                           
                           =
                           300
                        
                      minutes for the larger instances (Set S5). The parameter setting of HGSADC is kept the same as in Vidal et al. (2012, 2013, 2014), since an extensive parameter calibration had already been conducted for multi-depot settings. The termination criteria of ILS has been set to 
                        
                           
                              
                                 n
                              
                              
                                 
                                    it-ils
                                 
                              
                           
                           =
                           25000
                           /
                           
                              
                                 n
                              
                              
                                 
                                    c
                                 
                              
                           
                        
                     , so as to generate 25,000 non-improving children before stopping, and the number of restarts is set to 
                        
                           
                              
                                 n
                              
                              
                                 
                                    r
                                 
                              
                           
                           =
                           5
                        
                      to compare with HGSADC and other authors using similar computational effort. The two remaining free parameters, 
                        
                           
                              
                                 n
                              
                              
                                 
                                    c
                                 
                              
                           
                        
                      and 
                        
                           
                              
                                 n
                              
                              
                                 
                                    x
                                 
                              
                           
                        
                      were simultaneously calibrated. Several possible values of each parameter were selected, and the method was run 30 times with different random seeds for each configuration on a subset of 10 MDVRP instances: Instances S3 {7,8,9,10,21,22} and S4 {4,5,9,10}. These instances have been selected due to their higher difficulty. The gap to the Best Known Solutions (BKS) in the literature 
                        
                           Gap
                           =
                           (
                           
                              
                                 Z
                              
                              
                                 
                                    ils
                                 
                              
                           
                           -
                           
                              
                                 Z
                              
                              
                                 
                                    bks
                                 
                              
                           
                           )
                           /
                           
                              
                                 Z
                              
                              
                                 
                                    bks
                                 
                              
                           
                        
                     , averaged on all 10 test instances, is reported for each parameter configuration in Fig. 4
                     .

As observed in Fig. 4, the combination of parameters 
                        
                           (
                           
                              
                                 n
                              
                              
                                 
                                    c
                                 
                              
                           
                           ,
                           
                              
                                 n
                              
                              
                                 
                                    x
                                 
                              
                           
                           )
                           =
                           (
                           10
                           ,
                           200
                           )
                        
                      yields the solutions of highest quality. These values were kept for all computational experiments. The algorithm has been coded in C++, compiled with “g++ -O3”, and run on an Opteron 250 2.4GHz CPU for the medium-scale instances (Sets S1–S4), and an Opteron 275 2.2GHz CPU for large-scale instances (Set S5).

The impact of the new compound neighborhoods, within LS and Split, is assessed by means of comparative analyses of several variants of the proposed meta-heuristics, in which the compound optimization of some aspects – rotations, depot choices – has been activated or not. The methods with compound neighborhoods are notated ILS+ and HGSADC+ in the following.

The ILS variant without compound rotation optimization is referred to as ILS-noR. Not using both implicit rotations and assignments leads a variant called ILS-noRD. In the latter case, customer-to-depots assignments are explicitly managed within the solution representation, using one giant-tour per depot, and applying independently the classic Split procedure on the different giant-tours. The local search of Section 5.1 is used on each separate subset of customers associated to a different depot to perform route improvements (RI), and an additional LS-neighborhood based on customer-to-depot re-assignments is considered during an assignment improvement (AI) phase. These phases are called in the sequence AI-RI-AI-RI.

In the case of HGSADC, deactivating the compound rotations leads to a variant called HGSADC-noR. Coming back to an explicit management of the depots means using the original algorithm of Vidal et al. (2012) on the MDVRP instances with unlimited fleet, notated HGSADC-noRD. In this case, the solutions are represented as one giant tour per depot, the PIX crossover of Vidal et al. (2012) is applied to impact both assignment and sequencing decisions, and the LS-improvement procedure is again separated between route- and assignment-improvement moves.


                        Tables 1 and 2
                        
                         report the detailed results of the two meta-heuristics with and without implicit rotations on CVRP instances. The quality of the solutions is compared to those of the best previous methods in the literature: the original HGSADC of Vidal et al. (2012) (VCGLR12), the HGA with edge-assembly crossover of Nagata and Bräysy (2009) (NB09), and the parallel record-to-record and set covering algorithm of Groër, Golden, and Wasil (2011) (GGW11). In these tables, the first two columns display the instance names and characteristics, then the average solution values for the different methods are reported as well as the Best Known Solution (BKS) ever found, in previous literature and in our experiments. Several BKS, indicated with a “
                           
                              *
                           
                        ”, are known to be optimal from Hadjiconstantinou and Christofides (1995) and Uchoa, Pecin, Pessoa, and Poggi (2013). Best solution values are indicated in boldface for each problem, and new BKS are underlined. The last lines of the tables display the average gap of each method w.r.t. the BKS on each instance set, the average time per run for the methods, and the type of processor used.

In a similar fashion, Tables 3 and 4
                        
                         display the results of the two meta-heuristics with different rotation and assignment strategies on the MDVRP instances. The first three columns display the instances names and characteristics, then the average solution values, best solution values and CPU times are reported for three different variants of each metaheuristic: no rotations and assignment choices (-noRD), implicit assignments but no rotations (-noR), and all strategies (+). Finally, a summary of the results of ILS and HGSADC on both problems (CVRP and MDVRP) and all benchmark instance sets is also provided in Table 5
                        . The original version of each method is compared to the proposed new one with all implicit rotations and depot management strategies.

These results first highlight the notable contribution of implicit depot assignments, which lead to MDVRP solutions of better average quality for both ILS (0.781% for ILS-noR compared to 2.585% for ILS-noRD) and HGSADC (0.100% compared to 0.252%) with similar run time. This contribution is higher on large-scale problems, for which larger solution improvements were still achievable. The impact of the implicit depot management is very large for the ILS approach, which seems to have difficulties to achieve high-quality solutions on large-scale benchmarks without compound sequencing and assignment moves. For these problems, a more thorough exploration of assignment alternatives appears to be necessary, and the compound moves contribute to fulfill this goal.

The use of implicit rotations enhances the solution quality for both ILS and HGSADC, on both CVRP and MDVRP experiments. The largest improvement is again observed on the MDVRP with ILS, with an average gap decrease from 0.781% to 0.515%. No impact on the computational time is observed on MDVRP experiments for both ILS and HGSADC, and thus the effort spent in evaluating compound moves is paid off in terms of convergence speed. For the CVRP, the computational time increases by a factor of two. However, the current HGSADC+ implementation was derived from an existing code, and “skips” depots when evaluating routes using “if” instructions. A complete new implementation without any mention of depots would run much faster. Implicit rotation management also lead to LS simplifications, by enabling to define moves only between sequences of visits to customers, thus avoiding to deal with special cases related to depots.

Finally, a comparison of solution quality for the MDVRP is conducted in Table 6
                         with the best current methods: the ALNS of Pisinger and Ropke (2007) (PR07), the ILS of Subramanian (2012) (S12) and the original HGSADC of Vidal et al. (2012) (VCGLR12). Results are reported for these three methods in presence of a fleet size limit. Yet, as indicated by Cordeau et al. (1997), in many cases the fleet size limit is large and does not impact the optimal solution value. Problems for which the fleet size appears to have an impact are indicated in italics. Further results of S12, without the fleet size limit, are included. These solutions were communicated to us recently by the authors. Several BKS, marked with “
                           
                              *
                           
                        ”, have been proven optimal in Baldacci and Mingozzi (2009) and Contardo (2012).

These results illustrate the high performance of the proposed HGSADC+ meta-heuristic, which matches or outperforms all other current state-of-the-art algorithms for the MDVRP (as well as for the CVRP as shown in Table 2). For the classic MDVRP benchmark instances of Cordeau et al. (1997), HGSADC achieved an average gap to the BKS of 0.024%. This gap is smaller than the one of the previous state-of-the-art method S12‡. In addition, the 17 known optimal solutions have been systematically found. Overall, the proposed method reaches the BKS on 48/67 instances. For the CVRP, the best solution out of 10 runs differs from the BKS by only 0.001%, while for the classic MDVRP instances of Cordeau et al. (1997) the difference is 0.004%. After many years of extensive research on these benchmark instances, most of the BKS are likely to be already optimal or very close to optimality. This observation was our main reason for introducing new larger and more difficult benchmark instances with up to 960 customers for the MDVRP in Set S5. On these new instances (Table 4), HGSADC+ produces solutions at 0.093% from the BKS obtained from multiple long runs, with a standard deviation of 0.071%. Solutions of very-high quality are thus generated in a consistent manner, even for large scale problems.

A second set of experiments has been conducted to investigate the performance of the proposed HGSADC+ on a rich vehicle routing variant, the MDVFMP. We compare the proposed method to the variable neighborhood heuristic of Salhi and Sari (1997) (SS97) and to the more recent VNS1 and VNS2 of Salhi et al. (2013) (SIW13). Table 7
                         reports the results of the methods on the modified MDVRP instances, using the same format as previously.

These experimental results demonstrate that significant solution improvements were still achievable for the MDVFMP. The average gap obtained by HGSADC+ on the classic S3 instances is 0.112%, a notable improvement when compared to 1.469% and 1.524% for SIW13. The proposed method demonstrates its ability to find the best known solutions in a consistent manner: for 14/23 instances of S3 with 50 to 360 customers the BKS has been reached on all 10 runs, and the overall standard deviation of solution costs remains very small (0.089%). The run time is of the same order of magnitude than SIW13 (11.92min compared to 14.04 or 3.71min). Furthermore, HGSADC+ is only built on a small number of general concepts. We believe that it is simpler than SIW13, which relies on seven problem-tailored solution phases and includes node aggregation techniques, borderline customers identification procedures, vehicle-assignment methods using shortest path, and various large neighborhood structures, among others.

@&#CONCLUSIONS@&#

In this paper, an efficient dynamic programming methodology was introduced for managing compound customer-to-depots assignments, rotations and vehicles choices within neighborhood searches for vehicle routing. Two meta-heuristics based on these concepts, ILS+ and HGSADC+, have been proposed. These approaches produce solutions of remarkable quality on classic benchmark instances for vehicle routing problems with multiple depots and vehicle types. In particular, HGSADC+ produces new state-of-the-art results on the classic benchmark instances for the MDVRP and MDVFMP.

Extensive experiments demonstrate the notable contribution of the proposed implicit depot management to the search performance. The implicit rotations have a smaller but noticeable impact and simplify several aspects of local search by avoiding special cases related to the depot. The proposed methodology is general and broadly applicable to many VRP variants.

Promising avenues of research involves generalizing the approach to other multi-attribute VRPs, possibly with limited fleet. Finally, this research is part of a general effort aiming to identify efficiently manageable subproblems to reduce the size of solution spaces, and similar subproblems and management methods may be investigated on other VRP variants and combinatorial optimization settings.

@&#ACKNOWLEDGMENTS@&#

The authors would like to thank both referees for their comments, which contributed significantly to improve this paper. We also thank Anand Subramanian, who promptly answered our request to run his algorithm on the MDVRP with unlimited fleet, for comparison purposes. Partial funding for this project has been provided by the Champagne-Ardenne regional council, France, the Natural Sciences and Engineering Council of Canada (NSERC) through its Industrial Research Chair and Discovery Grant programs, and by the Fonds québécois de la recherche sur la nature et les technologies (FQRNT) through its Team Research Project program. This support is gratefully acknowledged.

@&#REFERENCES@&#

