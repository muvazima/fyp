@&#MAIN-TITLE@&#A grid generator for 3-D explosion simulations using the staircase boundary approach in Cartesian coordinates based on STL models

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           An automatic grid generator based on STL models is proposed.


                        
                        
                           
                           The staircase boundary treatment is implemented to handle irregular geometries.


                        
                        
                           
                           Slicing algorithm and scan line filling technique are used to generate grids.


                        
                        
                           
                           The example shows that the grid generator can provide practical grids for the simulation of explosions with complicated entries.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Numerical simulation

Cartesian grid

Grid generation

STL model

Staircase boundary treatment

Scan line filling

@&#ABSTRACT@&#


               
               
                  In this paper, an automatic grid generator based on STL models is proposed. The staircase boundary treatment is implemented to handle irregular geometries and the computation domain is discretized using a regular Cartesian grid. Using the grid generator, staircase grids that are suitable for fast and accurate finite difference analysis could be generated. Employing the slicing algorithm in RP technologies [1], the STL models are sliced with a set of parallel planes to generate 2D slices after the STL files obtained from a CAD system undergo topology reconstruction. To decrease the staircase error (increase accuracy) and enhance working efficiency, the cross-section at the middle of the layer is taken to represent the cross-section of whole layer. The scan line filling technique of computer graphics [2] is used to achieve grid generation after slicing. Finally, we demonstrate an application of the introduced method to generate staircase grids, which allows successful FDM simulation in the field of explosion. The example shows that the automatic grid generator based on STL models is fast and gives simulation results that are in agreement with practical observations.
               
            

@&#INTRODUCTION@&#

The study of rapid, accurate and automatic grid generation for three-dimensional entity is significant for ensuring precision and efficiency of the computation [3]. A number of grid types are currently used to solve the equations in complex geometries, including overlapping orthogonal grids (Chimera grids) [4], flexible mesh embedding [5], curvilinear boundary-fitted grids [6,7] and unstructured grids [8]. While these approaches simplify the implementation of boundary conditions, each introduces additional difficulties, such as additional terms in the governing equations, increased complexity in the required interpolation schemes, larger computational stencils, and problems associated with information transfer across grid interfaces. These additional complexities impede code development and generally increase the required computational time to obtain a solution. Discussions of these techniques for treating complex boundaries can be found in [9].

An alternative approach that has attracted increasing interest in recent years uses a Cartesian grid for all cells except those intersected by the boundary. The method was first developed within the aerospace community specifically for handling multi-component geometries [10], yet its basic principles have much wider application. This approach is conceptually quite simple. Boundary contours are cut out from a background Cartesian grid and cells that are partially or completely cut are singled out for special treatment. In this way, the advantages of a Cartesian grid are retained for the standard non-boundary cells, and a more complex treatment is only required for the boundary cells. Cells completely outside the flow domain are removed from the computations. This approach is referred to in the literature as the “embedded boundary method”, the “Cartesian grid method” or the “cut cell method” [11]. The advantages of the Cartesian grid method include easy grid generation, low computational storage requirements, and significantly less operational count per cell. However, a common problem with the cut cell method is the creation of very small cells, and the main challenge in using Cartesian methods is about dealing with arbitrary boundaries, because the grids are not body-aligned. Hence successful Cartesian methods require accurate means to represent boundary conditions in cells that intersect surfaces [12].

In this paper, a Cartesian grid method based on the staircase boundary approximation for the boundaries of curvilinear geometries is studied for the simulation of explosion problems by the PMMIC-3D hydrocode [13] using the Eulerian method. Like some other typical Eulerian type hydrocode [14–16], PMMIC-3D use orthogonal hexahedral grid to discretize the computational region. The boundary is approximated with ladder-like lines as shown in Fig. 1
                     . This allows to treat any complex geometry without tedious and time-consuming surface preparation. The grid generation process is extremely simple compared with other approaches and can be readily automated. Moreover, because it uses only hexahedral cells, the numerical solution is much less affected by numerical errors due to irregularly shaped cells (e.g., skewness). The method is referred to in the literature as the “blocked-off region procedure” or the “saw-tooth Cartesian method” to simulate radiative heat transfer in complex geometries [17–19]. Doronzo et al. [20] simulated the pyroclastic density currents using locally refined Cartesian grids based on the staircase boundary treatment.

However, the staircase boundary method does not necessarily fit geometries of arbitrary complexity. This lack of generality is largely due to the representation of curved boundaries by a staircase-type approximation. Using the staircase boundary treatment means that a fine grid must be employed in the computation field with a curve boundary in order to ensure the accuracy of the numerical results. Kirkpatrick et al. [11] compared the staircase boundary treatment with the cut cell method and indicated that the numerical results of both are all close to the analytic solution. Note that the cut cell boundary performed better than the staircase boundary, but the difference was greatly reduced when using a fine grid in the staircase boundary.

In this study, stereolithography (STL) models [21] are used as input for the grid generation. The STL format has a list of facets (planar triangles), with each triangle described by three unique vertices and a normal direction pointing towards the exterior of the model. As the STL format stores the vertex list for each facet explicitly, the edges of the facet are defined implicitly. Facets are created using triangulation to approximate the CAD models.

The grid generation based on staircase boundary treatment is done automatically by using a ray-tracing technique [20,22]. In this paper, another technique of grid generation, slicing technique is employed. The STL model is first sliced with several parallel planes along the Z direction to generate the 2D slices for grid generation. The intersection of XY-planes with the triangular facets has been extensively studied in rapid prototyping (RP) process. RP begins with a design created on a CAD surface or solid modeler. The designer generates an output file (such as the STL file) that approximates the surface of the part. Then the file is transferred to a computer to slice the geometric model into cross-section layers, which are then used to construct the part layer by layer. The key idea of RP is an additive layered manufacturing paradigm that maps complex 3D geometry into simple 2.5D representations, without part-specific fixturing or tooling [23].

Slicing a STL model through intersecting the model with the XY-plane at each Z increment is a well-known method for contour generation. Among the available RP processes, the STL format is the most widely accepted file format in the RP industry due to the simplicity of the STL format and the easy file generation that does not require sophisticated CAD software. Different methods for slicing an STL file have been proposed in [24,25].

The rest of this paper is organized as follows. In Section 2, topology construction and STL repair are explained. The slicing strategies, including uniform slicing, intersection points generation and contour(s) creation, are explained in Section 3. In Section 4, scan line filling for the cross-sectional contour(s) is discussed. Two grid generation examples for entities containing high curvatures and multiply connected domains with non-manifold surfaces are shown in Section 5. In Section 6, we apply the staircase grids to an example of explosion. Finally, conclusions are given in Section 7.

The STL file is verbose and has redundant data. The storage of facet normal is redundant as this can be obtained from the vertex list of each facet by accessing them in the specified order. Also, specifying the vertices of each facet (triangle) is not required, as each vertex appears in more than one facet. The vertex can be specified once and can be referenced by all facets containing it. This also solves the problem of location mismatch for identical vertices [26].

The original 3-D model, in general, is complete and could possess useful information regarding geometry, topology and material. By converting it to STL format, only the basic geometry information is stored and all other relevant information which could be useful for slicing is discarded. Such stored information could be used in slicing. When the STL file is read, each facet is created as a separate B-rep triangular face surrounded by three edges and three vertices, making the model a patchwork of disjoint faces. The main problem with recreating a solid is to match the vertices of the facets with the vertices of neighboring facets. Since there are usually thousands of facets in the file, this is very time-consuming if simply done by brute-force comparison [27]. In this paper, the algorithm in Ref. [28] is employed to reconstruct the topology for STL files.

Although the STL file format is the de facto standard of the rapid prototyping industry, there are always some defects in STL files, such as cracks and non-manifold facets, many of which are difficult to correct. Instead of correcting the defects of bad STL files by a manual, interactive and complex approach with an STL file correction program, an error-tolerant slicing algorithm for STL files was proposed in Ref. [29]. The badly sliced contour is processed by crack-tracking and non-manifold facet traveling methods to obtain a correct contour in a relatively easy 2D way.

After the complete topological structure for the facet model is built up, including the vertices, facet adjacency relationship, cracks and over-adjacent edges, the slicing will be simple and fast.

Slicing is the key step for grid generation. After topology reconstruction from STL files, the slicing process can be greatly optimized with enhanced efficiency by using topological relations. Slicing can be accomplished by the following three steps.

Based on the principle of layer manufacturing, the RP technique starts with the intersection of the 3D model from CAD (usually an STL file) with layers of 2D horizontal planes. As a result, a stack of 2D geometry contours is obtained, each representing a cross-section of the 3D model. Extrusion of a slice to form a layer results in stepped approximation of the boundary of the original CAD model. The layer thickness can be thought of as a resolution of the RP process. That is, the smaller the layer thickness, the more accurate the RP part. Theoretically, given an infinitely small thickness of each 2D slice, the 3D parts should be identical with the 3D model constructed by the computer. However, in reality, materials used in RP all have non-trivial thickness, which generates a staircase effect as shown in Fig. 2
                        .

The inaccuracy reflects the deviation of the CAD model surface from the vertically built RP part, and such effect becomes more obvious on slanted and curved surfaces. The error associated with the staircase effect can be quantified by considering the cusp height. The cusp height of a layer is the maximum distance measured along a surface normal between the CAD surface and the layer. The cusp height is δ
                        + for positive error when thebottom surface of the layer is used as the cross-section of the layer and δ
                        − for negative error when thetop surface of the layer is used as the cross-section of the layer, as shown in Fig. 3
                        a and b, respectively. The cusp height can be expressed as follows:
                           
                              (1)
                              
                                 
                                    
                                       δ
                                    
                                    
                                       +
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             R
                                          
                                          
                                             2
                                          
                                       
                                       +
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                       +
                                       2
                                       xt
                                    
                                 
                                 -
                                 R
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    
                                       δ
                                    
                                    
                                       -
                                    
                                 
                                 =
                                 R
                                 -
                                 
                                    
                                       
                                          
                                             R
                                          
                                          
                                             2
                                          
                                       
                                       -
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                       -
                                       2
                                       xt
                                    
                                 
                              
                           
                        in which, R is the curvature radius, t is the layer thickness, and x is the distance to the bottom surface of the layer.

In the uniform layer thickness method, all layers have equal thickness. Uniform slicing typically increases the build time due to the presence of many thin layers or gives a poor surface finish because fewer thick layers exist. Chiu et al. [30] proposed a slicing method based on uniform thickness and adopted the inner product between the normal vector of the STL file and the working direction as the criterion. Depending on the workpiece function requirement of either positive or negative tolerance, the top-down or bottom-up slicing method is selected to ensure unilateral tolerance over the whole prototype. This method based on uniform slicing increases accuracy to some extent.

A balance between the surface accuracy and build time is achieved by employing adaptive slicing. Adaptive slicing involves slicing the CAD model with varying layer thicknesses. The user can specify a maximum permitted cusp height for the object and also a deposition requirement (excess or deficient). In order to achieve the user specifications, surfaces of high curvature are sliced with smaller layer thicknesses and surfaces of low curvature are sliced with larger layer thicknesses. Adaptive slicing yields better surface quality as the staircase effect decreases and the variations in the cusp height across the layers are minimized. Mani et al. [31] described a slicing strategy where each surface of the CAD model was adaptively sliced based on its surface finish requirement and geometry. This strategy gives the user the flexibility in specifying the surface accuracy for the CAD model and also ensures the fastest manufacture of the object. This proposed method increases accuracy but makes machining complicated. Sabourin et al. [32] developed a high precision exterior and high speed interior slicing strategy of STL models. The interior of the model is sliced with thick layers and the exterior is sliced with adaptive layer thicknesses, while the surface finish requirements on all surfaces of the model are kept the same.

The main advantage of adaptive slicing is that it gives the user explicit control over the surface quality. It is theoretically proven that this method can produce parts with higher accuracy and less deviation from the CAD model. Some theoretical and software works have also been proposed in adaptive layer thickness prototyping. However, because of technical difficulties, the implementation of this method in current commercial RP processes has not been reported [33].

From another perspective, in most RP techniques, uniform slicing is the most commonly adopted practice to meet working efficiency requirements. All popular RP processes make parts using a uniform layer thickness [33]. This paper consistently takes the cross-section at the middle of the layer to represent the cross-section of the whole layer [34], as depicted in Fig. 3c. Then the STL model is sliced with the selected uniform layer thickness.In Fig. 3c, the cusp height value of 
                           
                              
                                 
                                    δ
                                 
                                 
                                    +
                                 
                                 
                                    ′
                                 
                              
                           
                         is 
                           
                              
                                 
                                    
                                       
                                          R
                                       
                                       
                                          2
                                       
                                    
                                    +
                                    3
                                    
                                       
                                          t
                                       
                                       
                                          2
                                       
                                    
                                    /
                                    4
                                    +
                                    x
                                    ·
                                    t
                                 
                              
                              -
                              R
                           
                        , and the value of 
                           
                              
                                 
                                    δ
                                 
                                 
                                    -
                                 
                                 
                                    ′
                                 
                              
                           
                         is 
                           
                              R
                              -
                              
                                 
                                    
                                       
                                          R
                                       
                                       
                                          2
                                       
                                    
                                    -
                                    
                                       
                                          t
                                       
                                       
                                          2
                                       
                                    
                                    /
                                    4
                                    -
                                    x
                                    ·
                                    t
                                 
                              
                           
                        . The cusp height value of 
                           
                              
                                 
                                    δ
                                 
                                 
                                    +
                                 
                                 
                                    ′
                                 
                              
                           
                         is greater than 
                           
                              
                                 
                                    δ
                                 
                                 
                                    -
                                 
                                 
                                    ′
                                 
                              
                           
                        , so the cusp height 
                           
                              
                                 
                                    δ
                                 
                                 
                                    mid
                                 
                              
                           
                         in Fig. 3c can be expressed as follows:
                           
                              (3)
                              
                                 
                                    
                                       δ
                                    
                                    
                                       mid
                                    
                                 
                                 =
                                 
                                    max
                                 
                                 (
                                 
                                    
                                       δ
                                    
                                    
                                       +
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       δ
                                    
                                    
                                       -
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       δ
                                    
                                    
                                       +
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             R
                                          
                                          
                                             2
                                          
                                       
                                       +
                                       
                                          
                                             3
                                          
                                          
                                             4
                                          
                                       
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                       +
                                       x
                                       ·
                                       t
                                    
                                 
                                 -
                                 R
                              
                           
                        
                     

It can be concluded that the cusp height δ
                        mid for the reference line taken in the middle of thelayer will be less than the cusp heights δ
                        + and δ
                        − for the case of reference line at the bottom and top of the layer.

In Refs. [29,30], the intersection points of the XY-plane with the triangular facets and contour(s) are generated at the same time layer by layer. The calculation of the intersection points of the XY-plane with the triangular facets requires a lot of computation, especially for large STL files. The edge-based integral slicing algorithm was presented in Ref. [1], in which the generation of intersection points is separated from contour(s) creation. In the intersection points generation step, the STL models are sliced with a set of horizontal planes through traveling all of the edges but not layer by layer, in order to rapidly calculate the intersection points by using increment algorithm. After creating the intersection points in each Z increment, they are ordered and connected to form continuous path(s) layer by layer. The efficiency of slicing is greatly increased by using the slicing algorithm, as reported in Ref. [1]. In this paper, we employ increment algorithm [1] to generate the intersection points. The steps for calculating the intersection points are as below.

Let us consider slicing in the z-direction. Let A(x
                        A,
                        y
                        A,
                        z
                        A) and B(x
                        B,
                        y
                        B,
                        z
                        B) be the coordinates of two endpoints of the edge AB, and Δz is the thickness of the layer. The edge AB is then sliced by intersecting it with two horizontal planes zk
                         and zk
                        
                        +1, as shown in Fig. 4
                        . Two intersection points on the edge are C and D. Using increment algorithm, the x coordinate of point D can be computed as follows:
                           
                              (4)
                              
                                 
                                    
                                       x
                                    
                                    
                                       D
                                    
                                 
                                 =
                                 
                                    
                                       x
                                    
                                    
                                       C
                                    
                                 
                                 +
                                 Δ
                                 x
                              
                           
                        where:
                           
                              (5)
                              
                                 Δ
                                 x
                                 =
                                 
                                    
                                       k
                                    
                                    
                                       x
                                    
                                 
                                 ×
                                 Δ
                                 z
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       k
                                    
                                    
                                       x
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       B
                                    
                                 
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       A
                                    
                                 
                                 )
                                 /
                                 (
                                 
                                    
                                       z
                                    
                                    
                                       B
                                    
                                 
                                 -
                                 
                                    
                                       z
                                    
                                    
                                       A
                                    
                                 
                                 )
                              
                           
                        in which, kx
                         is slope of the line AB. The y coordinate of point D can be computed by the same method.

In this step, if an edge or vertex lies on the slicing plane, it is shifted in a positive or negative Z-direction by a very small value ε (for example, ε
                        =10−8). Shifting by ε avoids unnecessary slicing results that cause singularities. Even though this process changes some of the geometric information in the imported STL model, it has no influence on the slicing results since it is much smaller than the “same point” tolerance in geometric processors (typically 10−3 or 10−4).

After the points along the cross-sectional contours are generated, we need to connect these 2-D consecutive contour(s) with a set of line segments layer by layer. The edge-based integral slicing algorithm has difficulty in connecting the points resulted from the intersection of XY-planes with all of the edges to form the 2D cross-sectional contour(s). The efficiency of linking intersection points is important to the edge-based integral slicing algorithm. In the algorithm, the contour(s) is connected by matching the intersection point to several chains on the slice, which is inefficient and hard to implement. In this paper, the algorithm is improved by using topological relations between the triangular facets and edges to form the contour(s). The steps for creating contour(s) are as below.

First, starting from the first layer, take any one intersection point that is on the Z-plane as the first point of the contour. Find the edge on which the intersection point lies. Next, search for the triangle facet that passes this edge, and find the other intersection point of the Z-plane with this triangle facet. Determine whether this intersection point is the first intersection point: if not, use the aforementioned steps to locate another intersection point; if yes, connect these intersection points to form a closed loop. A schematic diagram of closed loop connected by P
                        1, P
                        2,…,
                        Pn
                        
                        −1 and Pn
                         is shown in Fig. 5
                         using the aforementioned steps. Next, search for any intersection point that is on the Z-plane but has not been connected yet: if there is any, there must be another loop, and in this case, select one of the intersection points as the first intersection point and find other intersection points using the same method to form the other loop; if there is none, then all intersection points on the Z-plane have been connected. Finally, these loops form a 2D cross-section, which is the slicing intersection curve to be filled with scan line filling technique. Then, add another layer of lamination thickness and connect the slicing intersection curve of the next layer. Repeat these steps until the maximum z axis value is reached. The pseudo-code for creating contour(s) is as follows:
                           
                              
                                 
                                 
                                    
                                       
                                          k
                                          ←1
                                    
                                    
                                       while (zk
                                          
                                          ⩽
                                          z
                                          max)
                                    
                                    
                                       {
                                    
                                    
                                       
                                          Do{
                                    
                                    
                                       
                                          
                                          Take any one intersection point Pm
                                           on the zk
                                           plane as the first point of the contour
                                    
                                    
                                       
                                    
                                    
                                       
                                          
                                          Do
                                    
                                    
                                       
                                          
                                          {
                                    
                                    
                                       
                                          
                                          
                                          1. Find the edge on which Pm
                                           lies
                                    
                                    
                                       
                                          
                                          
                                          2. Search for the triangle facet that passes the edge in procedure 1
                                    
                                    
                                       
                                          
                                          
                                          3. Find the other intersection point Pn
                                           of the zk
                                           plane with the triangle facet in procedure 2
                                    
                                    
                                       
                                    
                                    
                                       
                                          
                                          
                                          If (Pm
                                          
                                          =
                                          Pn
                                          )
                                    
                                    
                                       
                                          
                                          
                                          {
                                    
                                    
                                       
                                          
                                          
                                          
                                          connect these intersection points to form a closed loop
                                    
                                    
                                       
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          Pn
                                          
                                          1
                                          ←
                                          Pn
                                          
                                       
                                    
                                    
                                       
                                          
                                          
                                          }
                                    
                                    
                                       
                                          
                                          
                                          Else
                                    
                                    
                                       
                                          
                                          
                                          {
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          Pn
                                          
                                          1
                                          ←
                                          Pm
                                          
                                       
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          Pm
                                          
                                          ←
                                          Pn
                                          
                                       
                                    
                                    
                                       
                                          
                                          
                                          }
                                    
                                    
                                       
                                          
                                          }While (Pn
                                          ·ne·Pn
                                          
                                          1)
                                    
                                    
                                       
                                          
                                          Is any intersection point not been connected?
                                    
                                    
                                       
                                          
                                          If(.True.)
                                    
                                    
                                       
                                          
                                          {h
                                          =1}
                                    
                                    
                                       
                                          
                                          Else
                                    
                                    
                                       
                                          
                                          {h
                                          =0}
                                    
                                    
                                       
                                    
                                    
                                       
                                          
                                          } While (h=1)
                                    
                                    
                                       
                                          
                                          k
                                          ←k+1
                                    
                                    
                                       }
                                    
                                 
                              
                           
                        
                     

Normally when the STL file is sliced, the resulting contour is an approximation of the real contour, which resembles how the faceting process approximates the three-dimensional object when producing the STL file.

The output slice for a given sliced plane is an array that holds one or more non-intersecting closed contours. Each contour is a double-linked circular list of a series of intersection points. Data structures play an important role in handling intersection points. As shown in Fig. 6
                     , a set of interconnected line segments of each contour that were saved in a double-linked circular list are in turn considered for the possibility of intersection with the scan lines passing through Y
                     =
                     yj
                     . Then, calculate the intersection segment(s) of the closed contour with the scan line such as the segments AB and CD in Fig. 6. The intersection points of each scan line yj
                      and xi
                      are the central point of grids. At last, if the central point of grids is located on the intersection segment(s), this grid is attributed to the material property value of the entity, such as explosive, concrete and metal, in the field of numerical simulation of explosion. The pseudo-code for the scan line filling is as follows:
                        
                           
                              
                              
                                 
                                    
                                       j
                                       ←1
                                 
                                 
                                    while (yj
                                       
                                       ⩽
                                       y
                                       max)
                                 
                                 
                                    {
                                 
                                 
                                    
                                       1. Calculate intersection points of scan line yj
                                        with the closed contour
                                 
                                 
                                    
                                       2. Schedule the intersection points in the sequence of its x coordinate
                                 
                                 
                                    
                                       3. Connect each odd number intersection point with its adjacent even number intersection point to segments
                                 
                                 
                                    
                                       4. i
                                       ←1
                                 
                                 
                                    
                                       
                                       while (i
                                       ⩽
                                       imax)
                                 
                                 
                                    
                                       
                                       {
                                 
                                 
                                    
                                       
                                       
                                       Calculate the central point coordinates of the (i,
                                       j)th grid
                                 
                                 
                                    
                                       
                                       
                                       If(the central point of the (i,
                                       j)th grid lies on the above segments in step 3)
                                 
                                 
                                    
                                       
                                       
                                       {
                                 
                                 
                                    
                                       
                                       
                                       
                                       Filling this grid to the material property value of the entity
                                 
                                 
                                    
                                       
                                       
                                       }
                                 
                                 
                                    
                                       
                                       
                                       Else
                                 
                                 
                                    
                                       
                                       
                                       { }
                                 
                                 
                                    
                                       
                                       
                                       
                                       i
                                       ←
                                       i
                                       +1
                                 
                                 
                                    
                                       
                                       }
                                 
                                 
                                    
                                       
                                       j
                                       ←
                                       j
                                       +1
                                 
                                 
                                    }
                                 
                              
                           
                        
                     
                  

The step of grid generation can be regarded as the layer by layer discretization of 2-D cross-sections into 2-D staircase grids, which are then “pulled” into the third dimension to generate 3-D staircase grids. Normally when the staircase grids are generated, the resulting object is an approximation of the STL model. That is to say, a set of staircase grids heaps up to represent the STL model.

In this step, if an edge or vertex (e.g. vertices P
                     1 and P
                     6 in Fig. 6) lies on the scan line, it is shifted in a positive or negative Y-direction by a very small value ε (for example, ε
                     =10−8). Shifting by ε avoids unnecessary filling results that cause singularities.

Once all of the contours of the STL models are filled layer by layer, the whole grid generation step is finished. The steps are given in the flowchart shown in Fig. 7
                     .

For STL models, facets are created using triangulation to approximate the CAD models. By a series of triangular facets “spliced” into 3-D model, there will probably be some small gaps (Fig. 8
                     b) between the two entities which originally match each other (Fig. 8a) in the same sliced plane. This is, to our knowledge, the first time that the small gap is introduced. The small gaps will be narrowed by increasing the degree of triangular facets approximation but cannot be eliminated. However, a higher level of approximation will usually increase the number of triangular facets, thus increasing the calculation and downgrading the slicing efficiency.

By default, we use air grids to fill the computational domain besides the entities for the simulation of explosions using Eulerian method [13]. If the center of the grid, such as the point C in Fig. 8b, just falls into this small gap, there will be an air grid as shown in Fig. 9
                     b, which is a grid graph for the shaped charge model in Fig. 9a. Air grids that should not exist can have catastrophic effect on the numerical simulation and must be eliminated. The width of the small gap is usually less than a grid step. In this paper, if the distance of two intersections on the same scan line is less than a grid step, we bring the two intersections into a single point. For example, in Fig. 8b, the points A and B will be merged into point A. The air grids will then be eliminated after the operation, as shown in Fig. 9c.

The proposed methodologies were implemented using Microsoft Visual C++ 6.0 with an OpenGL visualization library, and an automatic grid generator based on STL models was developed. Two grid generation examples were given to test the capability of the grid generator as they are simple and easy to find the grid generation mistakes.


                     Fig. 10
                     a shows the STL model of a gear, and Fig. 10b is the grid graph of the gear. In order to intuitively observe the generated grid and find if any grid is mistake, the slice function was developed. Fig. 10c shows the slice of the middle layer in the z direction.


                     Fig. 11
                     a shows another example of a sphere cut by cylinders in three mutually vertical directions. Fig. 11b is a half model of the entity, and Fig. 11c shows the grid graph.

These two examples show that the grid generator has the capability to treat entities containing high curvatures and multiply connected domains with non-manifold surfaces.

Applying the grid generator, a series of numerical simulation of explosion and post-processing work were carried out [13,35]. We now present the results of a FDM simulation for the explosion accidents in a house by the PMMIC-3D hydrocode [35,36] with our staircase grids. Fig. 12
                      shows the grid graph of a house with a total of 1896 triangular facets. The total number of grid is 128,911,797.

Numerical simulation on the flow field distribution was performed assuming that the explosion happens in the house. The pressure distribution of the explosion flow field in the house is shown in Fig. 13
                     . In this figure, the house is represented by blue color, the detonation products of the explosive is represented by the red color, the air is represented by the black color, and the shock wave propagation in the air is represented by the white color. The propagation of shock wave is clearly observed after the explosion in the house. The interaction of explosion shock waves with the walls of the house is also observed in Fig. 13.

In Ref. [13], we have evaluated the numerical results by an explosion example. The calculated pressure values were agreed well with the results of empirical formula which is fitted by experimental results.

The results are useful for understanding the physical process and the explosion effects in the near field and the far field of the house. The test results show that the grid generation method can provide practical grids for the simulation of explosions with complicated entries.

@&#CONCLUSIONS@&#

We have proposed an automatic grid generator for STL models in this paper. The step of grid generation is presented in detail. A slicing strategy to generate grids from 3D models in STL format is presented. To decrease the staircase error and achieve reasonable working efficiency, the cross-section at the middle of the layer is taken to represent the cross-section of whole layer. The edge-based integral slicing algorithm is improved to increase the efficiency of slicing by using topological relations between the triangular facets and edges.

Numerical simulation of explosion in a house is presented as a demonstration and the results are in agreement with practical observations. Although the example shows that the grid generator can provide practical grids for the numerical simulation of explosions, there are still lots of work to be done for the test of grid generation results for the complexity of the staircase grid generation of complicated geometries.

@&#ACKNOWLEDGMENTS@&#

This work was supported by National Basic Research Program of China (Grant No. 2010CB832706), the National Natural Science Foundation of China (Grant Nos. 11032002, 11172041) and Project of State Key Laboratory of Explosion Science and Technology (Grant No. ZDKT10-03c).

@&#REFERENCES@&#

