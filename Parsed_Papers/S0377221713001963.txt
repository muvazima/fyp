@&#MAIN-TITLE@&#The discrete forward–reserve problem – Allocating space, selecting products, and area sizing in forward order picking

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Existing literature mainly focuses on “fluid models”.


                        
                        
                           
                           We formulate discrete versions of basic and extended forward–reserve problems.


                        
                        
                           
                           We discuss their computational complexity and present suitable solution procedures.


                        
                        
                           
                           We show the basic allocation problem to be solvable in polynomial time.


                        
                        
                           
                           We propose and computationally examine a very effective “repair heuristic”.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Assignment

Logistics

Warehousing

Order picking

Forward–reserve problem

@&#ABSTRACT@&#


               
               
                  To reduce labor-intensive and costly order picking activities, many distribution centers are subdivided into a forward area and a reserve (or bulk) area. The former is a small area where most popular stock keeping units (SKUs) can conveniently be picked, and the latter is applied for replenishing the forward area and storing SKUs that are not assigned to the forward area at all. Clearly, reducing SKUs stored in forward area enables a more compact forward area (with reduced picking effort) but requires a more frequent replenishment. To tackle this basic trade-off, different versions of forward–reserve problems determine the SKUs to be stored in forward area, the space allocated to each SKU, and the overall size of the forward area. As previous research mainly focuses on simplified problem versions (denoted as fluid models), where the forward area can continuously be subdivided, we investigate discrete forward–reserve problems. Important subproblems are defined and computation complexity is investigated. Furthermore, we experimentally analyze the model gaps between the different fluid models and their discrete counterparts.
               
            

@&#INTRODUCTION@&#

Picking highly-demanded stock keeping units (SKUs) directly from bulk storage typically requires removal from deep-lane pallet racks and causes unproductive travel between far-distant picking locations. Thus, especially in high-volume distribution, many warehouses are subdivided into a forward and a reserve area. The forward area serves as a “warehouse within a warehouse” and stores popular SKUs in easy-to-access racks, e.g., gravity flow racks, concentrated in a compact area. The use of a forward area improves order picking efficiency, but requires additional effort for replenishing the forward area from the reserve area (double handling). Clearly, reducing SKUs stored in forward area enables a more compact forward area (with reduced picking effort) but requires a more frequent replenishment. To tackle this basic trade-off, forward–reserve problems have been formulated and modeled to determine the SKUs to be stored in the forward area, the space allocated to each SKU, and the overall size of the forward area.


                     Hackman et al. (1990) were the first that formulated a mathematical model to allocate space in a continuously divisible forward area and proposed a greedy heuristic. Their work motivated the paper of Hackman and Platzman (1990) who proposed a generic discrete model for deciding which SKUs to pick from the automated (forward) area and how much space to allocate on which (forward) storage device to each selected SKU. They also developed a heuristic procedure with a good guaranteed performance whenever each allocation is a small fraction of storage space. Further contributions stem from Frazelle et al. (1994), who extended the model by regarding the size of a forward area as a decision variable, Van den Berg et al. (1998), who optimized unit-load replenishments that take place during busy and idle periods, Bartholdi and Hackman (2008), who analyzed two wide-spread real-world stocking strategies for small parts in a forward area, and Gu et al. (2010), who provided a branch-and-bound algorithm for solving the joint assignment and allocation problem. Except for the contribution of Hackman and Platzman (1990) and Van den Berg et al. (1998), all these studies presuppose the “fluid model”, where a forward area can continuously be partitioned among SKUs. Clearly, this simplifying assumption might be justified if merely an approximate benchmark solution is sought. However, for a detailed stocking plan of the forward area, the fluid model shows some severe drawbacks (Bartholdi and Hackman, 2011):
                        
                           •
                           SKUs can only be stored in discrete units, so that a continuous distribution of space in either case can only be an approximation of reality. This approximation becomes the less accurate the larger an item compared to the size of the shelves.

Often the number of units stocked in forward area cannot be increased piece-wise but only in steps of multiple units. For instance, consider a gravity flow rack where each lane is filled with units of a single homogeneous product. In this case, e.g., either 0, 1000 or 2000 units can be stored depending on whether none, one or two lanes (each having a capacity for 1000 units) are allocated to the respective SKU.

Finally, some SKUs show sub-additivity with regard to space because they can be stored in a nested fashion. Consider bathtubs where two units occupy only a little more space than a single unit. This coherency cannot be considered within the continuous forward–reserve problem, because here a linear increase of space utilization is presupposed.

To avoid these shortcomings, this paper considers the discrete forward–reserve problem. Specifically, we investigate three different problem settings each within two important parameter constellations, so that in total six problem cases are treated. The most basic problem setting is the discrete forward–reserve allocation problem (DFRAP), where the given space of a forward area is to be partitioned among a predetermined set of SKUs (see Section 2). The discrete forward–reserve assignment and allocation problem (DFRAAP) combines the space allocation problem with the assignment problem of selecting the products to be stored in the forward area (see Section 3). Finally, the discrete forward–reserve allocation and sizing problem (DFRASP) treats the allocation problem jointly with the sizing problem, i.e., for a given set of products a forward area of variable size is to be allocated (see Section 4).

With regard to the parameter constellations, we differentiate between variable storage modes and equally sized shelves. In the former case, for any product different storage alternatives exist. For instance, SKUs can be stored in small or large boxes, on one or more pallets in shelves of variable size, or in one or more lanes of varying capacity in a gravity flow rack, where each alternative corresponds to a certain storage mode. Each mode is defined by a specific space utilization and the corresponding discrete number of stored product units. Clearly, the confinement to equally sized shelves defines a special case of variable storage modes. Here, the storage mode of each SKU is already defined and the decision reduces to determining the discrete number of equally sized shelves (each storing an identical multiple of units) to be assigned to any product. Typically, standardized racks with equally sized shelves, e.g., identical lanes in a gravity flow rack, are applied in a wide range of distribution centers as they allow for fast and simple re-assignments, i.e., some products that have been stored forward during the last period will be partly or fully replaced by new products within the next period. Furthermore, standardized racks, typically, cause less investment cost.

In the following, the DFRAP, the DFRAAP, and the DFRASP are treated in Sections 2, 3, and 4, respectively. In each section both parameter constellations are investigated by defining the respective problem version and either providing a polynomial time solution procedure or proving 
                        
                           NP
                        
                     -hardness. Furthermore, in each case we explore the loss in precision of the continuous problem version compared to the discrete case in a comprehensive computational study. Finally, Section 5 concludes the paper.

Consider a predefined set P of products (or SKUs) to be stored in a forward area of given size S, where due to the compact size of the forward area the locations of SKUs are assumed to not affect picking efficiency. Each product i
                        ∈
                        P can be stored in one of n
                        
                           i
                         possible modes j
                        =1, …, n
                        
                           i
                         in the forward area. Associated with each mode j for SKU i is a value a
                        
                           ij
                        
                        >0 which gives the (integral) number of units of SKU i that can be stored in mode j. The space required by storing product i in mode j is denoted by w
                        
                           ij
                        . Throughout the paper we assume that the storage modes of each product i are labeled so that 
                           
                              
                                 
                                    w
                                 
                                 
                                    i
                                    1
                                 
                              
                              <
                              
                                 
                                    w
                                 
                                 
                                    i
                                    2
                                 
                              
                              <
                              ⋯
                              <
                              
                                 
                                    w
                                 
                                 
                                    
                                       
                                          in
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                           
                        . According to this, we consider only non-dominated storage modes for each SKU i
                        ∈
                        P, i.e., 
                           
                              
                                 
                                    a
                                 
                                 
                                    i
                                    1
                                 
                              
                              <
                              ⋯
                              <
                              
                                 
                                    a
                                 
                                 
                                    
                                       
                                          in
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                           
                        .

As formulated in the mathematical model (1)–(4), the DFRAP decides on the mode in which each SKU is stored in the forward area (restriction (2)). Equivalently, it decides on the number of units to be stored per product without exceeding given storage space S (restriction (3)) which is assumed to be at least as large as 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    P
                                 
                              
                              
                                 
                                    w
                                 
                                 
                                    i
                                    1
                                 
                              
                           
                        . Otherwise, not all products of the predefined set could be stored in the forward area. Binary variables x
                        
                           ij
                         defined in (4) indicate which storage mode is chosen for SKU i. Clearly, the more space is associated with each SKU the less restocks are required per time unit. If d
                        
                           i
                         represents the total demand for product i during the planning period, e.g., a year, then the number of restocks per SKU can simply be calculated by dividing the total demand d
                        
                           i
                         by the number of units stored in the forward area of the respective product. Note that the underlying assumptions with regard to restocks are discussed in detail by Bartholdi and Hackman (2008).

When weighting the number of restocks with product specific replenishment cost c
                        
                           i
                         the objective (1) of the DFRAP is to minimize the overall restock cost per planning period:
                           
                              (1)
                              
                                 DFRAP
                                 :
                                 Minimize
                                 
                                 
                                    
                                       C
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 x
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       
                                          
                                             a
                                          
                                          
                                             ij
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 subject to
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 P
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 S
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 P
                                 ;
                                 
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        
                     

The DFRAP is mathematically equivalent to the well-known multiple-choice knapsack problem (MCKP), which becomes obvious when interpreting the parameters of the MCKP as follows:
                           
                              •
                              SKUs correspond to classes and (storage) modes (of a SKU) correspond to items (of a class),

the profit of item j of class i is p
                                 
                                    ij
                                 
                                 =−c
                                 
                                    i
                                 
                                 d
                                 
                                    i
                                 /a
                                 
                                    ij
                                  (minimizing 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                          
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                          
                                       
                                       
                                          
                                             p
                                          
                                          
                                             ij
                                          
                                       
                                       
                                          
                                             x
                                          
                                          
                                             ij
                                          
                                       
                                    
                                  is equivalent to maximizing 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                          
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                          
                                       
                                       -
                                       
                                          
                                             p
                                          
                                          
                                             ij
                                          
                                       
                                       
                                          
                                             x
                                          
                                          
                                             ij
                                          
                                       
                                    
                                 ),

the weight of item j of class i equals the space w
                                 
                                    ij
                                  required by storing SKU i in mode j,

the capacity of the knapsack is c
                                 =
                                 S,

the size of class i is n
                                 
                                    i
                                 .

Clearly, the DFRAP is 
                           
                              NP
                           
                        -hard as the MCKP, which is a generalization of the knapsack problem, is well-known to be 
                           
                              NP
                           
                        -hard (see Kellerer et al., 2004, Chap. 11). Furthermore, pseudo-polynomial solution procedures for the MCKP exist, e.g., the dynamic programming approach of Dudzinski and Walukiewicz (1987), so that it follows that the DFRAP is weakly 
                           
                              NP
                           
                        -hard.

For adopting the basic DFRAP to the case of equally sized shelves of a rack or lanes of identical capacity in a gravity flow rack, we keep to the notation introduced in Section 2.1 with a slightly different interpretation of S, w
                        
                           ij
                        , and a
                        
                           ij
                        . Parameter S denotes the total (integral) number of shelves that are available for storing the products of set P in the forward area. Hence, we let w
                        
                           ij
                         denote the number of shelves that are available when storing SKU i in mode j. As we agreed on allowing any integral number of shelves between 1 and n
                        
                           i
                         for forward storing of SKU i, where n
                        
                           i
                        
                        =
                        S
                        −∣P∣+1 if no other upper bound on the maximum number of shelves is given, we have w
                        
                           ij
                        
                        =
                        j for all i
                        ∈
                        P and j
                        =1, …, n
                        
                           i
                        . Finally, we let a
                        
                           i
                         denote the number of units of SKU i that can be stored in one shelf, which means that a
                        
                           ij
                        
                        =
                        j
                        ·
                        a
                        
                           i
                         for all i
                        ∈
                        P and j
                        =1, …, n
                        
                           i
                        . Using this modified notation, the DFRAP with equal shelves (denoted as DFRAPES) can be rewritten as follows:
                           
                              (5)
                              
                                 
                                    
                                       DFRAP
                                    
                                    
                                       ES
                                    
                                    
                                       ′
                                    
                                 
                                 :
                                 Minimize
                                 
                                 
                                    
                                       C
                                    
                                    
                                       ES
                                       1
                                    
                                    
                                       ′
                                    
                                 
                                 (
                                 x
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       j
                                       ·
                                       
                                          
                                             a
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 subject to
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 P
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 j
                                 ·
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 S
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 P
                                 ;
                                 
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        
                     

To shorten notation we define q
                        
                           i
                        ≔c
                        
                           i
                        
                        d
                        
                           i
                        /a
                        
                           i
                         as the aggregate restock costs of SKU i for the planning period, if only a single shelf is allocated to i. Thus, q
                        
                           i
                        /j denotes the aggregate restock costs of SKU i when j shelves are allocated to i.

In order to avoid infeasible or trivial solutions, we assume 
                           
                              |
                              P
                              |
                              ⩽
                              S
                              <
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    P
                                 
                              
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                           
                        . Hence, any optimal solution satisfies constraint (7) with equality. Then, using integer variables x
                        
                           i
                         for all SKUs i
                        ∈
                        P the DFRAPES can be rewritten in its compact form as follows:
                           
                              (9)
                              
                                 
                                    
                                       DFRAP
                                    
                                    
                                       ES
                                    
                                 
                                 :
                                 Minimize
                                 
                                 
                                    
                                       C
                                    
                                    
                                       ES
                                       1
                                    
                                 
                                 (
                                 x
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 subject to
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 S
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                                 }
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 P
                              
                           
                        
                     

The compact formulation (9)–(11) – which also arises in family disaggregation at hierarchical production planning (cf. Bitran and Hax, 1977) – reveals the equivalence of the DFRAPES and the simple (discrete) resource allocation problem with (generalized) lower bounds x
                        
                           i
                        
                        ⩾1 and upper bounds x
                        
                           i
                        
                        ⩽
                        n
                        
                           i
                         for all SKUs i
                        ∈
                        P (cf. Katoh and Ibaraki, 1998). The objective function 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    P
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    i
                                 
                              
                              (
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              )
                           
                         where f
                        
                           i
                        (x
                        
                           i
                        )=
                        q
                        
                           i
                        /x
                        
                           i
                         is separable and convex as each f
                        
                           i
                         is a convex function of one variable. In our case, the f
                        
                           i
                        ’s are even strictly convex and thus the difference or decrement
                           
                              (12)
                              
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 ≡
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 -
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 1
                                 )
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 1
                                 }
                                 )
                              
                           
                        is decreasing in x
                        
                           i
                         for all f
                        
                           i
                        .

Several efficient polynomial time algorithms have been developed for the integer resource allocation problem (cf. Ibaraki and Katoh, 1988, Chap. 4). The fastest one is the polynomial time algorithm of Frederickson and Johnson (1982) that has an optimal running time of 
                           
                              O
                              (
                              max
                              {
                              |
                              P
                              |
                              ,
                              |
                              P
                              |
                              log
                              (
                              (
                              S
                              -
                              |
                              P
                              |
                              )
                              /
                              |
                              P
                              |
                              )
                              }
                              )
                           
                        . For another algorithm with the same run time complexity see Hochbaum (1994).

It is important to note that DFRAPES as a special case of DFRAP is efficiently solvable without any further assumptions on the maximum number of shelves n
                        
                           i
                         for each SKU i. Compared to the simple and quite fast algorithm developed by Hackman and Platzman (1990) which has a tight worst-case performance if the n
                        
                           i
                        ’s are quite small in comparison to S, this constitutes an improvement as we showed the DFRAPES to be solvable to optimality in polynomial time. However, the underlying model considered by Hackman and Platzman for which their heuristic had been designed is far more general.

Relaxing the integrality condition (11) in DFRAPES leads to the continuous relaxation denoted by FMB which is a generalization of the classic fluid model (FM) by Hackman et al. (1990):
                           
                              (13)
                              
                                 FMB
                                 :
                                 Minimize
                                 
                                 FC
                                 (
                                 z
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       
                                          
                                             z
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (14)
                              
                                 subject to
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 S
                              
                           
                        
                        
                           
                              (15)
                              
                                 
                                 1
                                 ⩽
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 P
                              
                           
                        
                     

In contrast to FMB, the classic fluid model neither considers additional lower nor upper bounds for variables, i.e., (15) is replaced by z
                        
                           i
                        
                        >0. Solving FM by means of convex nonlinear programming (cf. Rockafellar, 1970) results in an optimal allocation of
                           
                              (16)
                              
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                    
                                       ∗
                                    
                                 
                                 =
                                 
                                    
                                       S
                                       
                                          
                                             
                                                
                                                   q
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             ∈
                                             P
                                          
                                       
                                       
                                          
                                             
                                                
                                                   q
                                                
                                                
                                                   k
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        shelves to SKU i and the corresponding optimal Lagrangian multiplier for constraint (14) is (cf. Hackman et al., 1990)
                           
                              (17)
                              
                                 
                                    
                                       λ
                                    
                                    
                                       FM
                                    
                                    
                                       ∗
                                    
                                 
                                 =
                                 -
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         k
                                                         ∈
                                                         P
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               q
                                                            
                                                            
                                                               k
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             2
                                          
                                       
                                    
                                    
                                       
                                          
                                             S
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The more general problem FMB can be solved, for instance, by application of a recursive algorithm proposed by Bitran and Hax (1981) that repeatedly allocates shelves according to (16) till all SKUs i received at least one shelf and at most n
                        
                           i
                         shelves. One iteration consists in identifying SKUs that received less than one shelf or more than n
                        
                           i
                         shelves, either increasing all allocations that are smaller than 1 exactly to this lower bound or decreasing all allocations larger than n
                        
                           i
                         exactly to the respective upper bound, and then reallocating the remaining number of shelves among the remaining SKUs. More precisely, let S
                        
                           t
                         and P
                        
                           t
                         denote the remaining number of free shelves and the remaining set of SKUs for which the optimal allocations have not yet been determined at the beginning of iteration t, respectively. Then, obtain 
                           
                              
                                 
                                    z
                                 
                                 
                                    i
                                 
                                 
                                    ∗
                                 
                              
                              (
                              
                                 
                                    S
                                 
                                 
                                    t
                                 
                              
                              )
                           
                         for all i
                        ∈
                        P
                        
                           t
                         by solving FM restricted to S
                        
                           t
                         and P
                        
                           t
                        . In case 
                           
                              1
                              ⩽
                              
                                 
                                    z
                                 
                                 
                                    i
                                 
                                 
                                    ∗
                                 
                              
                              (
                              
                                 
                                    S
                                 
                                 
                                    t
                                 
                              
                              )
                              ⩽
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                           
                         for all i
                        ∈
                        P
                        
                           t
                        , set 
                           
                              
                                 
                                    z
                                 
                                 
                                    i
                                 
                                 
                                    ∗
                                 
                              
                              =
                              
                                 
                                    z
                                 
                                 
                                    i
                                 
                                 
                                    ∗
                                 
                              
                              (
                              
                                 
                                    S
                                 
                                 
                                    t
                                 
                              
                              )
                           
                         for all i
                        ∈
                        P
                        
                           t
                         and stop the procedure since an optimal solution to FMB has been found. Otherwise, define 
                           
                              
                                 
                                    P
                                 
                                 
                                    t
                                 
                                 
                                    +
                                 
                              
                              =
                              
                                 
                                    
                                       i
                                       :
                                       
                                          
                                             z
                                          
                                          
                                             i
                                          
                                          
                                             ∗
                                          
                                       
                                       (
                                       
                                          
                                             S
                                          
                                          
                                             t
                                          
                                       
                                       )
                                       >
                                       
                                          
                                             n
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                         as well as 
                           
                              
                                 
                                    P
                                 
                                 
                                    t
                                 
                                 
                                    -
                                 
                              
                              =
                              
                                 
                                    
                                       i
                                       :
                                       
                                          
                                             z
                                          
                                          
                                             i
                                          
                                          
                                             ∗
                                          
                                       
                                       (
                                       
                                          
                                             S
                                          
                                          
                                             t
                                          
                                       
                                       )
                                       <
                                       1
                                    
                                 
                              
                           
                         and compute 
                           
                              
                                 
                                    Δ
                                 
                                 
                                    t
                                 
                                 
                                    +
                                 
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          t
                                       
                                       
                                          +
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             z
                                          
                                          
                                             i
                                          
                                          
                                             ∗
                                          
                                       
                                       (
                                       
                                          
                                             S
                                          
                                          
                                             t
                                          
                                       
                                       )
                                       -
                                       
                                          
                                             n
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                         as well as 
                           
                              
                                 
                                    Δ
                                 
                                 
                                    t
                                 
                                 
                                    -
                                 
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          t
                                       
                                       
                                          -
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       1
                                       -
                                       
                                          
                                             z
                                          
                                          
                                             i
                                          
                                          
                                             ∗
                                          
                                       
                                       (
                                       
                                          
                                             S
                                          
                                          
                                             t
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        . If 
                           
                              
                                 
                                    Δ
                                 
                                 
                                    t
                                 
                                 
                                    +
                                 
                              
                              ⩾
                              
                                 
                                    Δ
                                 
                                 
                                    t
                                 
                                 
                                    -
                                 
                              
                           
                        , set 
                           
                              
                                 
                                    z
                                 
                                 
                                    i
                                 
                                 
                                    ∗
                                 
                              
                              =
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                           
                         for all 
                           
                              i
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    t
                                 
                                 
                                    +
                                 
                              
                              ,
                              
                                 
                                    P
                                 
                                 
                                    t
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    P
                                 
                                 
                                    t
                                 
                              
                              ⧹
                              
                                 
                                    P
                                 
                                 
                                    t
                                 
                                 
                                    +
                                 
                              
                           
                        , and 
                           
                              
                                 
                                    S
                                 
                                 
                                    t
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    S
                                 
                                 
                                    t
                                 
                              
                              -
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          t
                                       
                                       
                                          +
                                       
                                    
                                 
                              
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                           
                        . Otherwise, set 
                           
                              
                                 
                                    z
                                 
                                 
                                    i
                                 
                                 
                                    ∗
                                 
                              
                              =
                              1
                           
                         for all 
                           
                              i
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    t
                                 
                                 
                                    -
                                 
                              
                              ,
                              
                              
                                 
                                    P
                                 
                                 
                                    t
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    P
                                 
                                 
                                    t
                                 
                              
                              ⧹
                              
                                 
                                    P
                                 
                                 
                                    t
                                 
                                 
                                    -
                                 
                              
                           
                         and 
                           
                              
                                 
                                    S
                                 
                                 
                                    t
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    S
                                 
                                 
                                    t
                                 
                              
                              -
                              
                                 
                                    
                                       
                                          
                                             P
                                          
                                          
                                             t
                                          
                                          
                                             -
                                          
                                       
                                    
                                 
                              
                           
                        .

Since at each iteration the optimal number of shelves is determined for at least one SKU, this procedure requires at most ∣P∣ iterations where iteration t consumes at most 
                           
                              O
                              (
                              |
                              P
                              |
                              -
                              t
                              )
                           
                         time. Thus, the worst-case running time of Bitran and Hax’s algorithm is 
                           
                              O
                              (
                              |
                              P
                              
                                 
                                    |
                                 
                                 
                                    2
                                 
                              
                              )
                           
                         time.

Interestingly, the values 
                           
                              
                                 
                                    z
                                 
                                 
                                    i
                                 
                                 
                                    ∗
                                 
                              
                           
                         (i
                        ∈
                        P) can also be used to efficiently determine an optimal solution for the discrete problem version (cf. Ibaraki and Katoh, 1988, Section 4.6). Therefore, let 
                           
                              
                                 
                                    t
                                 
                                 
                                    ¯
                                 
                              
                           
                         denote that iteration of Bitran and Hax’s algorithm at which an optimal FMB-solution has been found. Then, since 
                           
                              
                                 
                                    z
                                 
                                 
                                    ∗
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          
                                             z
                                          
                                          
                                             1
                                          
                                          
                                             ∗
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             z
                                          
                                          
                                             |
                                             P
                                             |
                                          
                                          
                                             ∗
                                          
                                       
                                    
                                 
                              
                           
                         is optimal, the Kuhn-Tucker conditions (cf., e.g., Rockafellar, 1970) are satisfied and we receive the optimal Lagrangian multiplier 
                           
                              
                                 
                                    λ
                                 
                                 
                                    FMB
                                 
                                 
                                    ∗
                                 
                              
                              =
                              -
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      k
                                                      ∈
                                                      
                                                         
                                                            P
                                                         
                                                         
                                                            
                                                               
                                                                  t
                                                               
                                                               
                                                                  ¯
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            q
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    
                                       
                                          S
                                       
                                       
                                          
                                             
                                                t
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                           
                         associated with constraint (14) of problem FMB. Furthermore, due to the convexity of the functions f
                        
                           i
                         for all i, we can conclude
                           
                              (18)
                              
                                 
                                    
                                       λ
                                    
                                    
                                       FMB
                                    
                                    
                                       ∗
                                    
                                 
                                 +
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 ⩾
                                 0
                                 
                                 for
                                 
                                 all
                                 
                                 1
                                 ⩽
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 ⌊
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                    
                                       ∗
                                    
                                 
                                 ⌋
                                 -
                                 1
                              
                           
                        and
                           
                              (19)
                              
                                 
                                    
                                       λ
                                    
                                    
                                       FMB
                                    
                                    
                                       ∗
                                    
                                 
                                 +
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 ⩽
                                 0
                                 
                                 for
                                 
                                 all
                                 
                                 ⌊
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                    
                                       ∗
                                    
                                 
                                 ⌋
                                 +
                                 1
                                 ⩽
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        
                     

Then, by setting
                           
                              (20)
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         z
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         ∗
                                                      
                                                   
                                                
                                                
                                                   if
                                                   
                                                   
                                                      
                                                         z
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         ∗
                                                      
                                                   
                                                   is
                                                   
                                                   integral
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  z
                                                               
                                                               
                                                                  i
                                                               
                                                               
                                                                  ∗
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   if
                                                   
                                                   
                                                      
                                                         λ
                                                      
                                                      
                                                         FMB
                                                      
                                                      
                                                         ∗
                                                      
                                                   
                                                   +
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           z
                                                                        
                                                                        
                                                                           i
                                                                        
                                                                        
                                                                           ∗
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   ⩽
                                                   0
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  z
                                                               
                                                               
                                                                  i
                                                               
                                                               
                                                                  ∗
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   +
                                                   1
                                                
                                                
                                                   if
                                                   
                                                   
                                                      
                                                         λ
                                                      
                                                      
                                                         FMB
                                                      
                                                      
                                                         ∗
                                                      
                                                   
                                                   +
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           z
                                                                        
                                                                        
                                                                           i
                                                                        
                                                                        
                                                                           ∗
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   >
                                                   0
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        for all i
                        ∈
                        P we obtain an optimal solution to the Lagrangian relaxation of DFRAPES with the right-hand side S being replaced by 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    P
                                 
                              
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ̃
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                           
                        . Verifying the optimality of 
                           
                              
                                 
                                    x
                                 
                                 
                                    ̃
                                 
                              
                           
                         is straightforward by equivalently reformulating the objective of the Lagrangian relaxation for a given real number λ as follows:
                           
                              
                                 
                                    min
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   ∈
                                                   P
                                                
                                             
                                          
                                          
                                             
                                                f
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          
                                             
                                                x
                                             
                                             
                                                i
                                             
                                          
                                          )
                                          -
                                          λ
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            i
                                                            ∈
                                                            P
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   -
                                                   S
                                                
                                             
                                          
                                       
                                    
                                 
                                 ⇔
                                 
                                    min
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 (
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 -
                                 λ
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 ⇔
                                 
                                    min
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          1
                                          )
                                          -
                                          (
                                          
                                             
                                                d
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          1
                                          )
                                          +
                                          λ
                                          )
                                          -
                                          (
                                          
                                             
                                                d
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          2
                                          )
                                          +
                                          λ
                                          )
                                          -
                                          …
                                          -
                                          (
                                          
                                             
                                                d
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          
                                             
                                                x
                                             
                                             
                                                i
                                             
                                          
                                          -
                                          1
                                          )
                                          +
                                          λ
                                          )
                                          -
                                          λ
                                       
                                    
                                 
                                 ⇔
                                 
                                    max
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 (
                                 (
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 1
                                 )
                                 +
                                 λ
                                 )
                                 +
                                 (
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 2
                                 )
                                 +
                                 λ
                                 )
                                 +
                                 …
                                 +
                                 (
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 1
                                 )
                                 +
                                 λ
                                 )
                                 )
                              
                           
                        
                     

Since 
                           
                              
                                 
                                    x
                                 
                                 
                                    ̃
                                 
                              
                           
                         is optimal, 
                           
                              
                                 
                                    D
                                 
                                 
                                    ∼
                                 
                              
                              =
                              {
                              
                                 
                                    d
                                 
                                 
                                    i
                                 
                              
                              (
                              y
                              )
                              |
                              i
                              ∈
                              P
                              ;
                              
                              y
                              =
                              1
                              ,
                              …
                              ,
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ̃
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              -
                              1
                              }
                           
                         contains the 
                           
                              
                                 
                                    S
                                 
                                 
                                    ∼
                                 
                              
                              -
                              |
                              P
                              |
                           
                         largest elements of the set D
                        ={d
                        
                           i
                        (y)∣i
                        ∈
                        P; y
                        =1, …, n
                        
                           i
                        
                        −1} of all decrements where 
                           
                              
                                 
                                    S
                                 
                                 
                                    ∼
                                 
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    P
                                 
                              
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ̃
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                           
                        . Then, it remains to determine the 
                           
                              (
                              S
                              -
                              
                                 
                                    S
                                 
                                 
                                    ∼
                                 
                              
                              )
                           
                         largest elements in 
                           
                              D
                              ⧹
                              
                                 
                                    D
                                 
                                 
                                    ∼
                                 
                              
                           
                         if 
                           
                              
                                 
                                    S
                                 
                                 
                                    ∼
                                 
                              
                              <
                              S
                           
                         or the 
                           
                              (
                              
                                 
                                    S
                                 
                                 
                                    ∼
                                 
                              
                              -
                              S
                              )
                           
                         smallest elements in 
                           
                              
                                 
                                    D
                                 
                                 
                                    ∼
                                 
                              
                           
                         if 
                           
                              
                                 
                                    S
                                 
                                 
                                    ∼
                                 
                              
                              >
                              S
                           
                        . Clearly, as 
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             P
                                          
                                       
                                       
                                          
                                             
                                                
                                                   x
                                                
                                                
                                                   ̃
                                                
                                             
                                          
                                          
                                             i
                                          
                                       
                                       -
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             P
                                          
                                       
                                       
                                          
                                             z
                                          
                                          
                                             i
                                          
                                          
                                             ∗
                                          
                                       
                                    
                                 
                              
                              ⩽
                              |
                              P
                              |
                              -
                              1
                           
                        , this can be done in 
                           
                              O
                              (
                              |
                              P
                              |
                              log
                              |
                              P
                              |
                              )
                           
                         time (cf. Weinstein and Yu, 1973) or even faster in 
                           
                              O
                              (
                              |
                              P
                              |
                              )
                           
                         time (cf. Ibaraki and Katoh, 1988, Section 4.6) based on the algorithm of Frederickson and Johnson (1982). Note that the latter observation on 
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             P
                                          
                                       
                                       
                                          
                                             
                                                
                                                   x
                                                
                                                
                                                   ̃
                                                
                                             
                                          
                                          
                                             i
                                          
                                       
                                       -
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             P
                                          
                                       
                                       
                                          
                                             z
                                          
                                          
                                             i
                                          
                                          
                                             ∗
                                          
                                       
                                    
                                 
                              
                           
                         induces that the maximal absolute difference in the discrete and the continuous optimal allocation is bounded above by ∣P∣ for each SKU i, more formally, 
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                x
                                             
                                             
                                                i
                                             
                                             
                                                ∗
                                             
                                          
                                          -
                                          
                                             
                                                z
                                             
                                             
                                                i
                                             
                                             
                                                ∗
                                             
                                          
                                       
                                    
                                 
                                 
                                    ∞
                                 
                              
                              ⩽
                              |
                              P
                              |
                           
                         (cf. also Hochbaum, 1994, for a more general result).

To sum up, the above mentioned efficient procedures optimally partition storage space among SKUs if the forward area meets the quite typical and only mildly restricting precondition of equally sized shelves. In this case, it seems not meaningful to apply the fluid model as proposed by Hackman et al. (1990) since it is neither much more efficiently solvable (though it requires only 
                           
                              O
                              (
                              |
                              P
                              |
                              )
                           
                         time) nor leads to better solutions. Instead, as filling a single shelf with multiple products is often not manageable in the real-world, practitioners usually apply simple repairing techniques (mainly based on rounding) rather than the previously described method for ensuring integer solutions. Of course, such a repair bears the risk of non-optimal integer solutions as can be seen by the following small (pathological) example, where three SKUs with aggregate restock costs q
                        1
                        =1, q
                        2
                        =251, and q
                        3
                        =1000, respectively, have to be allocated to S
                        =4 shelves. Clearly, the optimal allocation is x
                        ∗
                        =(1,1,2) yielding C
                        
                           ES1(x
                        ∗)=752. In contrast, the fluid model solution according to Bitran and Hax’s algorithm is 
                           
                              
                                 
                                    z
                                 
                                 
                                    ∗
                                 
                              
                              =
                              
                                 
                                    
                                       1
                                       ,
                                       
                                          
                                             3
                                             
                                                
                                                   251
                                                
                                             
                                          
                                          
                                             
                                                
                                                   251
                                                
                                             
                                             +
                                             
                                                
                                                   1000
                                                
                                             
                                          
                                       
                                       ,
                                       
                                          
                                             3
                                             
                                                
                                                   1000
                                                
                                             
                                          
                                          
                                             
                                                
                                                   251
                                                
                                             
                                             +
                                             
                                                
                                                   1000
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        . Then, inappropriate repairing can lead to the solutions (1,2,1) or (2,1,1) and relative deviations in the objective function values of 49.8% and 66.4%, respectively, compared to the optimal value.

In the following section, we strengthen the previous argumentation by quantifying the resulting gap between the DFRAPES and its fluid counterpart FMB when applying different repair heuristics.

As existing research on the fluid model does not draw attention to repair heuristics which are typically applied by practitioners, we propose four different simple, intuitive, and easily applicable procedures for altering a non-integral solution gained with the fluid model to an integer solution. All repair heuristics are based on the following two steps:
                              
                                 1.
                                 Set 
                                       
                                          
                                             
                                                x
                                             
                                             
                                                i
                                             
                                             
                                                R
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         z
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         ∗
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    , i.e., round down non-integral solution elements of the fluid model.

In case 
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                ∈
                                                P
                                             
                                          
                                          
                                             
                                                x
                                             
                                             
                                                i
                                             
                                             
                                                R
                                             
                                          
                                          <
                                          S
                                       
                                    , adequately allocate all remaining free shelves to the products until all S shelves are allocated. In case 
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                ∈
                                                P
                                             
                                          
                                          
                                             
                                                x
                                             
                                             
                                                i
                                             
                                             
                                                R
                                             
                                          
                                          =
                                          S
                                       
                                    , stop the procedure.

Clearly, after step 1 is performed, at least one shelf is allocated to each product and the total number of allocated shelves is integral. Thus, the solution is feasible for the discrete problem, but, typically, the number of allocated shelves will be smaller than S. Note also that this solution is generally not optimal for the DFRAPES with the right-hand side S being replaced by 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       ∈
                                       P
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                    
                                       R
                                    
                                 
                              
                            (in contrast to the data given in Section 2.3). Let δ denote the difference between S and the number of shelves allocated in Step 1, i.e., 
                              
                                 δ
                                 =
                                 S
                                 -
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       ∈
                                       P
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                    
                                       R
                                    
                                 
                              
                           . As 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       ∈
                                       P
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                    
                                       ∗
                                    
                                 
                                 =
                                 S
                              
                           , it is readily verified that δ
                           ∈{0,1,…,∣P∣−1}. In order to yield a better estimate on the maximum number of iterations during Step 2, the co-domain of δ can be tightened to those values that are smaller than 
                              
                                 
                                    
                                       
                                          {
                                          i
                                          ∈
                                          P
                                          :
                                          
                                             
                                                z
                                             
                                             
                                                i
                                             
                                             
                                                ∗
                                             
                                          
                                          
                                          ∉
                                          
                                          N
                                          }
                                       
                                    
                                 
                              
                           , i.e., the number of products to which the fluid model allocates non-integral numbers of shelves.

Clearly, in case δ
                           >0 it is meaningful to allocate additional shelves to some SKUs as this improves the objection function value. This Step 2, i.e., the identification of promising SKUs, is specified next. Each of the four heuristical procedures will require exactly δ iterations and no SKU will receive more than one additional shelf per adaptation step:
                              
                                 
                                    Procedure R1: Randomly choose δ different SKUs according to a uniform distribution and increase the respective numbers of allocated shelves by one in each case.


                                    Procedure R2: Rank all SKUs in order of non-decreasing 
                                       
                                          
                                             
                                                z
                                             
                                             
                                                i
                                             
                                             
                                                ∗
                                             
                                          
                                       
                                    . According to this ranking increase the number of allocated shelves by one for each of the first δ SKUs.


                                    Procedure R3: Rank all SKUs in order of non-increasing differences 
                                       
                                          
                                             
                                                z
                                             
                                             
                                                i
                                             
                                             
                                                ∗
                                             
                                          
                                          -
                                          
                                             
                                                x
                                             
                                             
                                                i
                                             
                                             
                                                R
                                             
                                          
                                       
                                    . After that, increase the number of allocated shelves for each of the first δ SKUs by one.


                                    Procedure R4: Rank all SKUs in order of non-increasing 
                                       
                                          
                                             
                                                d
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          
                                             
                                                x
                                             
                                             
                                                i
                                             
                                             
                                                R
                                             
                                          
                                          )
                                       
                                    . Then, increase the number of allocated shelves for each of the first δ SKUs by one.

In case that a certain ranking is not unique, equal elements remain in their original order. For instance, assume x
                           
                              R
                           
                           =(1,2,1,2,1) after the first step. Then, the ranking of the SKUs according to R2 is (1,3,5,2,4).

The repair heuristics are ordered in such a way, that they incorporate an increasing level of relevant information. R1 is a pure random procedure, R2 is implicitly based upon decreasing decrements d
                           
                              i
                           (x
                           
                              i
                           ) for all i (considered isolated), and R3 constitutes standard rounding in integer programming. Finally, procedure R4 includes a (simpler) variant of the main idea underlying the incremental algorithm devised by Gross (1956) for the simple resource allocation problem and is assumed to perform best.

As there is no established test bed available, we now elaborate on the generation of test instances. As can be seen from the formulation of the DFRAPES, the three relevant parameters are the number of products ∣P∣, the total number of available shelves S, and the aggregate restock costs q
                           
                              i
                            as introduced in Section 2.2.

As a forward area stores only fast moving (quite homogeneous) SKUs, aggregate restock costs q
                           
                              i
                           , typically, do not vary substantially. Therefore, we assume three different product categories P
                           1, P
                           2, and P
                           3, and probabilities p
                           1, p
                           2 and p
                           3, where p
                           
                              k
                            defines the probability of a product belonging to category P
                           
                              k
                            (k
                           =1,2,3). See Table 1
                            for the different distributions D
                           1,D
                           2, and D
                           3 of the product categories. We assume the aggregate restock costs – which can be scaled to the interval (0,1] – to be independent samples uniformly distributed in the intervals [0.1,0.2) (for P
                           1-products), [0.2,0.4) (for P
                           2-products), and [0.4,0.8) (for P
                           3-products). Note that in each category the aggregate restock costs vary at most by a factor of 2 where the maximum total variation seen over all three categories is bounded by a factor of 8.

The forward area is assumed to consist of S equally sized storage locations, e.g., lanes of gravity flow racks. We investigate differently sized forward areas, i.e., we choose S
                           ∈{50,150,500}. Finally, to analyze the impact of the number of products that are stored in the forward area, we assume a total number of ∣P∣=
                           S/r products, where r is varied as follows: r
                           ∈{5,2,1.25}. For each (S,
                           r)-combination and distribution of the product categories according to Table 1 (leading to 33
                           =27 constellations) we generated 10,000 independent instances assuming n
                           
                              i
                           
                           =
                           S
                           −∣P∣+1 for each SKU i.

For each of these instances the discrete and the continuous optimum is determined as described above. Then, the four repair heuristics are applied to obtain an integer solution out of the fluid model solution. As performance indicators we evaluate the following data for each (S,
                           r,
                           D)-constellation:
                              
                                 •
                                 “AVG” denotes the relative gap between the objective function value of the discrete optimum x
                                    ∗ and the respective “repaired” fluid model solution x
                                    
                                       R
                                     according to procedure R
                                    ∈{R1,
                                    R2,
                                    R3,
                                    R4}, i.e., (C
                                    
                                       ES1(x
                                    
                                       R
                                    )−
                                    C
                                    
                                       ES1(x
                                    ∗))/C
                                    
                                       ES1(x
                                    ∗) averaged over all instances (in %),

“MAX” defines the maximal relative deviation between the corresponding objective function values (in %),

“DIF” denotes the relative number of instances for which x
                                    ∗ and x
                                    
                                       R
                                     differ in at least one element, i.e., different number of shelves for at least one SKU (in %).

Note that for each generated instance the discrete solution is unique, which is due to the fact that the aggregate restock costs are i.i.d. drawn from a continuous probability distribution. Hence, DIF indicates the relative number of instances for which a certain repair heuristic generates a non-optimal solution, so that a DIF-value of 0 (100) means that the respective repaired solutions have always (never) been optimal for the discrete problem.

@&#RESULTS@&#


                           Table 2
                            lists the results of our computational study on the DFRAPES. Independently of the three distributions of the product categories, the procedures R4 and R3 perform surprisingly well in terms of all measures. In particular, R4 always generates the optimal solution except for three (D
                           1-distributed) instances out of all 270,000 instances. Although the number of non-optimal solutions generated by R3 is higher than for R4, average relative deviations are negligible and maximal relative deviations are about 1%. If the product categories are not distributed according to D
                           1 and if r
                           =1.25, procedure R3 always generates optimal solutions. An explanation may be that here no more than one fourth of SKUs will receive more than one shelf. When at least 30% of the SKUs belong to category P
                           3, heuristic R3 most likely chooses the right SKUs. Interestingly, in case of r
                           =2, R3 performs worse than for the other two ratios. Here, it seems more difficult to decide which products should receive only one shelf and which three or more shelves.

In contrast, the two other procedures R1 and R2 did not generate the optimal solution in almost any case. Both procedures are not competitive compared to R4 or R3. While average deviations of about 1% in case r
                           =5 are acceptable for R1 and R2, we observed maximal relative deviations up to 32% (29%) and average relative deviations up to 23% (14%) for R2 (R1). Obviously, the performance of R1 and R2 measured by AVG and MAX, respectively, deteriorates rather drastically as r decreases for all tested distributions of product categories. While the random procedure R1 performs considerably worse than R2 in case r
                           =2 and slightly worse in case r
                           =5, R1 performs better than R2 in terms of AVG and MAX if r
                           =1.25. The smaller r the more crucial the decision to which SKUs more than one shelf is allocated as this is possible only for a few products. In this case the SKU-ranking according to R2 is rather unsuited whereas R1 has a chance to select at least some of the more promising SKUs.

As procedure R4 performs outstandingly, we conducted some additional experiments testing further (S,
                           r,
                           D)-constellations with key focus on maximal relative deviations between the objective function value of the R4-solution and the optimal value. Actually, we did not observe instances of the DFRAPES that lead to relative deviations of more than 2.7%. Concerning procedure R3, we found instances for which the (maximal) relative deviation is just under 4% which is still passable. The additional tests also included variations in the product-categories, i.e., we examined more pronounced variations in the aggregate restock costs to account for inhomogeneous product sets. However, all deviations remain nearly unaltered, so that we abstain from reporting these additional results.

As a conclusion, we can deduce a quite important information for practitioners that stock their forward area using the fluid model. Although it is certainly better to apply one of the polynomial-time procedures stated in Sections 2.2 and 2.3 that guarantee optimal solutions to DFRAPES, a simple heuristic repair of fluid model solutions according to R4 will generally lead to optimal solutions for the discrete problem or at least to near-optimal ones for which the deviation from optimality can be ignored from a practical point of view.

In the previous DFRAP, the SKUs to be stored are predetermined and it only remains to decide in which quantities they are stored. In this section, we address the discrete forward–reserve assignment and allocation problem (DFRAAP). This problem simultaneously considers both the assignment of SKUs to the forward area and the allocation of storage space to each of the assigned SKUs.

The modeling of the DFRAAP is based on that of the DFRAP. Additionally, for each SKU i a storage mode j
                        =0 and its corresponding binary variable x
                        
                           i0 is introduced. This mode represents a SKU’s exclusion from the forward area, so that the respective variable indicates whether product i is assigned to the forward area (x
                        
                           i0
                        =0) or not (x
                        
                           i0
                        =1). If not assigned to the forward area, product i has to be picked from the reserve area, which results in an average cost of 
                           
                              
                                 
                                    c
                                 
                                 
                                    i
                                 
                                 
                                    R
                                 
                              
                           
                         per demand event. In contrast, a product i stocked in the forward area can more efficiently be picked at an average cost of 
                           
                              
                                 
                                    c
                                 
                                 
                                    i
                                 
                                 
                                    F
                                 
                              
                              (
                              <
                              
                                 
                                    c
                                 
                                 
                                    i
                                 
                                 
                                    R
                                 
                              
                              )
                           
                        , but has to be replenished from the reserve area, where each restock event is charged with cost c
                        
                           i
                        . We assume that the total demand forecast d
                        
                           i
                         of a SKU i is spread on a given number of o
                        
                           i
                        (⩽d
                        
                           i
                        ) orders. The objective is to minimize the overall costs, i.e., for both picking and replenishing, per planning period. The model reads as:
                           
                              (21)
                              
                                 DFRAAP
                                 :
                                 Minimize
                                 
                                 
                                    
                                       C
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 x
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                i
                                             
                                             
                                                F
                                             
                                          
                                          
                                             
                                                o
                                             
                                             
                                                i
                                             
                                          
                                          +
                                          
                                             
                                                c
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ij
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                    
                                       R
                                    
                                 
                                 
                                    
                                       o
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                       0
                                    
                                 
                              
                           
                        
                        
                           
                              (22)
                              
                                 subject to
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          0
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 P
                              
                           
                        
                        
                           
                              (23)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 S
                              
                           
                        
                        
                           
                              (24)
                              
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 P
                                 ;
                                 
                                 j
                                 =
                                 0
                                 ,
                                 …
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        
                     

Again, this problem turns out to be weakly 
                           
                              NP
                           
                        -hard as it is still mathematically equivalent to the multiple choice knapsack problem (MCKP, see Section 2.1). Nevertheless, the following structural property of DFRAAP-solutions can be applied for reducing the number of storage modes to be considered. Using equality 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    j
                                    =
                                    1
                                 
                                 
                                    
                                       
                                          n
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    ij
                                 
                              
                              =
                              1
                              -
                              
                                 
                                    x
                                 
                                 
                                    i
                                    0
                                 
                              
                           
                         (cf. (22)) for all i, we rewrite the objective function (21) as follows:
                           
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                i
                                             
                                             
                                                F
                                             
                                          
                                          
                                             
                                                o
                                             
                                             
                                                i
                                             
                                          
                                          +
                                          
                                             
                                                c
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ij
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                    
                                       R
                                    
                                 
                                 
                                    
                                       o
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                       0
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       
                                          
                                             a
                                          
                                          
                                             ij
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                i
                                             
                                             
                                                R
                                             
                                          
                                          -
                                          
                                             
                                                c
                                             
                                             
                                                i
                                             
                                             
                                                F
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       o
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                       0
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                    
                                       F
                                    
                                 
                                 
                                    
                                       o
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        
                     

Let 
                           
                              
                                 
                                    c
                                 
                                 
                                    i
                                 
                                 
                                    add
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          
                                             c
                                          
                                          
                                             i
                                          
                                          
                                             R
                                          
                                       
                                       -
                                       
                                          
                                             c
                                          
                                          
                                             i
                                          
                                          
                                             F
                                          
                                       
                                    
                                 
                              
                           
                         denote the additional average pick cost incurred by picking SKU i from the reserve rather than the forward area. Then, minimizing C
                        2(x) is equivalent to minimizing
                           
                              (25)
                              
                                 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 x
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       
                                          
                                             a
                                          
                                          
                                             ij
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                    
                                       add
                                    
                                 
                                 
                                    
                                       o
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                       0
                                    
                                 
                              
                           
                        
                     

Obviously, objective function (25) reveals that it is not meaningful to store product i in forward mode j if the associated restock costs c
                        
                           i
                        
                        d
                        
                           i
                        /a
                        
                           ij
                         are greater than the additional pick costs 
                           
                              
                                 
                                    c
                                 
                                 
                                    i
                                 
                                 
                                    add
                                 
                              
                              
                                 
                                    o
                                 
                                 
                                    i
                                 
                              
                           
                        , so that restock costs exceed the savings in picking. Let 
                           
                              
                                 
                                    j
                                 
                                 
                                    i
                                 
                                 
                                    min
                                 
                              
                              >
                              0
                           
                         denote the minimum (forward storage) mode, so that for the first time 
                           
                              
                                 
                                    c
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    d
                                 
                                 
                                    i
                                 
                              
                              /
                              
                                 
                                    a
                                 
                                 
                                    
                                       
                                          ij
                                       
                                       
                                          i
                                       
                                       
                                          min
                                       
                                    
                                 
                              
                              <
                              
                                 
                                    c
                                 
                                 
                                    i
                                 
                                 
                                    add
                                 
                              
                              
                                 
                                    o
                                 
                                 
                                    i
                                 
                              
                           
                         holds (if existing). Thus, no “smaller” storage mode, i.e., storing less than 
                           
                              
                                 
                                    a
                                 
                                 
                                    
                                       
                                          ij
                                       
                                       
                                          i
                                       
                                       
                                          min
                                       
                                    
                                 
                              
                           
                         units of SKU i in forward area, than 
                           
                              
                                 
                                    j
                                 
                                 
                                    i
                                 
                                 
                                    min
                                 
                              
                           
                         needs to be considered in the DRFAAP. In case that 
                           
                              
                                 
                                    j
                                 
                                 
                                    i
                                 
                                 
                                    min
                                 
                              
                           
                         does not exist, we can directly conclude x
                        
                           i0
                        =1.

Analogously to the DFRAP, we now adapt the basic model of the previous section to the case with equally sized storage locations. By setting 
                           
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                                 
                                    R
                                 
                              
                              =
                              
                                 
                                    c
                                 
                                 
                                    i
                                 
                                 
                                    add
                                 
                              
                              
                                 
                                    o
                                 
                                 
                                    i
                                 
                              
                           
                        , which denotes the total additional costs for picking all orders of SKU i from the reserve rather than the forward area, and recalling q
                        
                           i
                        
                        =
                        c
                        
                           i
                        
                        d
                        
                           i
                        /a
                        
                           i
                         the DFRAAPES can be formulated in its compact form as follows:
                           
                              (26)
                              
                                 
                                    
                                       DFRAAP
                                    
                                    
                                       ES
                                    
                                 
                                 :
                                 Minimize
                                 
                                 
                                    
                                       C
                                    
                                    
                                       ES
                                       2
                                    
                                 
                                 (
                                 x
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                           
                        
                        
                           
                              (27)
                              
                                 subject to
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 S
                              
                           
                        
                        
                           
                              (28)
                              
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                                 }
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 P
                                 ;
                              
                           
                        where
                           
                              (29)
                              
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         q
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   /
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                                
                                                   if
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ⩾
                                                   1
                                                   ,
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         q
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         R
                                                      
                                                   
                                                
                                                
                                                   if
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   =
                                                   0
                                                   .
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Note that the objective function (26) is still separable but the f
                        
                           i
                        ’s are not necessarily convex anymore. Clearly, the convexity of an f
                        
                           i
                         depends on the minimum storage mode 
                           
                              
                                 
                                    j
                                 
                                 
                                    i
                                 
                                 
                                    min
                                 
                              
                           
                         of the respective SKU. A necessary but not sufficient condition for f
                        
                           i
                         being convex is 
                           
                              
                                 
                                    j
                                 
                                 
                                    i
                                 
                                 
                                    min
                                 
                              
                              =
                              1
                           
                        . Only if
                           
                              (30)
                              
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                    
                                       R
                                    
                                 
                                 -
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 ⩾
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 1
                                 )
                              
                           
                        where d
                        
                           i
                        (1) is defined by Eq. (12), then f
                        
                           i
                         is convex. Thus, in case that all SKUs i
                        ∈
                        P satisfy condition (30), the DFRAAPES turns out to be polynomial time solvable (cf. Sections 2.2 and 2.3) as it is again mathematically equivalent to a simple discrete resource allocation problem with a separable convex objective function. In this case, the inequality-sign in Eq. (27) can be replaced by an equality-sign 
                           
                              
                                 
                                    
                                       if
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             P
                                          
                                       
                                       
                                          
                                             n
                                          
                                          
                                             i
                                          
                                       
                                       ⩾
                                       S
                                    
                                 
                              
                           
                        .

Considering the more general case of not necessarily convex functions f
                        
                           i
                        , the following proof deals with the complexity of solving the discrete assignment and allocation problem with equal shelves.
                           Theorem 3.1
                           
                              The DFRAAP
                              
                                 ES
                               
                              is weakly 
                              
                                 
                                    NP
                                 
                              
                              -hard.
                           

For proving the theorem we, first, have to show that the DFRAAPES is 
                                 
                                    NP
                                 
                              -hard. As the proof is based on a straightforward reduction from the well-known knapsack-problem, we only sketch the transformation scheme. The knapsack problem was shown to be 
                                 
                                    NP
                                 
                              -hard by Karp (1972). For each knapsack item i (and its associated weight w
                              
                                 i
                              
                              >0 and profit δ
                              
                                 i
                              
                              >0) we introduce a SKU i, for which w
                              
                                 i
                              
                              =
                              n
                              
                                 i
                              , 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                       
                                          R
                                       
                                    
                                    =
                                    M
                                 
                               with M
                              >
                              δ
                              
                                 i
                              
                              w
                              
                                 i
                              , and q
                              
                                 i
                              
                              =(M
                              −
                              δ
                              
                                 i
                              )w
                              
                                 i
                               holds. Then, it is readily verified that 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          i
                                       
                                       
                                          min
                                       
                                    
                                    =
                                    
                                       
                                          n
                                       
                                       
                                          i
                                       
                                    
                                 
                               as 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                       
                                          R
                                       
                                    
                                    -
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                    /
                                    
                                       
                                          n
                                       
                                       
                                          i
                                       
                                    
                                    =
                                    
                                       
                                          δ
                                       
                                       
                                          i
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                       
                                          R
                                       
                                    
                                    -
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                    /
                                    j
                                    <
                                    0
                                 
                               for j
                              <
                              n
                              
                                 i
                              . Thus, there exist only two meaningful storage modes for each SKU i in this setting: allocating n
                              
                                 i
                               shelves or excluding the SKU by choosing 0 shelves, which corresponds to putting an item into the knapsack or not. Moreover, the savings realized when SKU i is assigned to the forward area equal the profit of item i. Finally, we set the number of shelves S available in the forward area to the knapsack capacity, which completes the transformation scheme.

Furthermore, we have to proof the DFRAAPES being solvable in pseudo-polynomial time. Respective procedures are readily available in the literature. For instance, the pseudo-polynomial time dynamic programming procedure of Dudzinski and Walukiewicz (1987) for solving the MCKP, which is a generalization of our problem, can be applied. Alternatively, Ibaraki and Katoh (1988, Section 3.3), present a dynamic programming procedure for the integer simple resource allocation problem with separable, non-convex objective function with 
                                 
                                    O
                                    (
                                    |
                                    P
                                    |
                                    
                                       
                                          S
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              .□

However, for each given product selection (assignment) A
                        ⊆
                        P the resulting DFRAPES can efficiently be solved (cf. Sections 2.2 and 2.3). Thus, we can solve DFRAAPES to optimality by evaluating all possible SKU-selections, i.e., at most 2∣P∣
                        −1 selections of SKUs, which results in solving an exponential number of DFRAPES instances. Of course, this number can be reduced by enumerating only reasonable SKU assignments A
                        ⊆
                        P, i.e., all A fulfilling 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    A
                                 
                              
                              
                                 
                                    j
                                 
                                 
                                    i
                                 
                                 
                                    min
                                 
                              
                              ⩽
                              S
                           
                        . Further reductions might be yielded by some versatile branch-and-bound techniques. However, this (and other especially heuristic solution procedures) is beyond the scope of this paper and remains an open challenge for future research.

Analogously to the computational study described in Section 2.4, the following experiments compare the solutions of DFRAAPES and its (repaired) continuous counterparts in order to compute the gap between the fluid and the discrete model.

As suggested in the previous section, we solve an instance of the DFRAAPES and its respective fluid model by simply enumerating all reasonable SKU assignments A
                        ⊆
                        P. Specifically, for each A we determine:
                           
                              •
                              the discrete optimum using the algorithm of Bitran and Hax (1981) and the proximity between DFRAPES and FMB as presented within Section 2.3 assuming n
                                 
                                    i
                                 
                                 =
                                 S
                                 −∣A∣+1 for all SKUs i
                                 ∈
                                 A, and

the fluid model solution according to Eq. (16) forcing 
                                    
                                       
                                          
                                             z
                                          
                                          
                                             i
                                          
                                       
                                       ⩾
                                       
                                          
                                             j
                                          
                                          
                                             i
                                          
                                          
                                             min
                                          
                                       
                                    
                                  for all i
                                 ∈
                                 A via Bitran and Hax’s algorithm. Clearly, the denominator in (16) is to be restricted to A.

After having determined both the discrete and the continuous optimal SKU assignment, we discretize the respective fluid model allocations according to the procedures R2 and R4, which turned out to be the worst and best performing non-random heuristical procedures in Section 2.4, respectively. This way, the gap between both problem versions can be computed.

To account for the exponential nature of our computational study, we investigate only two rather small values for ∣P∣, i.e., we choose ∣P∣∈{12,24}. The number of shelves is set to S
                        =
                        r∣P∣, where r is varied as follows: r
                        ∈{1/3,1/2,2/3}. Thus, it is guaranteed that not all SKUs can be assigned to the forward area. The assumptions on the aggregate restock costs q
                        
                           i
                         are the same as in Section 2.4.2, i.e., we consider three product categories P
                        1, P
                        2, P
                        3, but only one distribution, namely D
                        2 as here products are rather equally distributed on the three categories implying a more difficult SKU-selection. Additionally, for the total additional costs we assume 
                           
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                                 
                                    R
                                 
                              
                              =
                              
                                 
                                    λ
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                              
                           
                        , where λ
                        
                           i
                         is uniformly distributed in the intervals (0.1,0.5) (with probability p
                        
                           λ
                        ) and (1.5,2) (with converse probability). We test the following three values p
                        
                           λ
                        
                        ∈{0.2,0.5,0.8} to cover a range of scenarios including different stocking strategies in the reserve area. Clearly, the coherence between q
                        
                           i
                         and 
                           
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                                 
                                    R
                                 
                              
                           
                         leads to 
                           
                              
                                 
                                    j
                                 
                                 
                                    i
                                 
                                 
                                    min
                                 
                              
                              >
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                              
                              /
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                                 
                                    R
                                 
                              
                              =
                              1
                              /
                              
                                 
                                    λ
                                 
                                 
                                    i
                                 
                              
                           
                        .

For each (∣P∣,
                        r,
                        p
                        
                           λ
                        )-combination we generated 100 independent instances according to D
                        2 (again, leading to 33
                        =27 constellations) and recorded the relative number of instances (labeled as “SEL”) for which the optimal assignment for the continuous version differs from the optimal assignment for its discrete counterpart (in %). Note that SEL is independent of the repair heuristics. Additionally, we recorded the three evaluation measures AVG, MAX, and DIF (see Section 2.4) for each of the two repair heuristics.

@&#RESULTS@&#


                        Table 3
                         contains the results of our computational study on the DFRAAPES. Taking at first a look at the SEL-values, it becomes obvious that for given ∣P∣ and r the relative number of different optimal assignments between the discrete and the fluid model decreases as p
                        
                           λ
                         increases. For p
                        
                           λ
                        
                        =0.2 we recorded up to 59% different assignments whereas SEL did not exceed 17% in case p
                        
                           λ
                        
                        =0.8. Furthermore, except for three constellations, the SEL-values for ∣P∣=12 are smaller than the respective values for ∣P∣=24. Here, we suppose that the number of different assignments increases as the number of SKUs increases – particularly if p
                        
                           λ
                         is not too large.

Next, we evaluate the performance of the two repair heuristics R2 and R4 in case ∣P∣=12. Obviously, average relative deviations (AVG) of R4-solutions as well as the number of different allocations (DIF) decrease as p
                        
                           λ
                         increases for a given r. The same is true for R2, except for one constellation. Interestingly, the development of the maximum relative deviations of R2-solutions is the other way round. Both procedures yield their maximum relative deviation of almost 22% (R2) and 6% (R4), respectively, in case p
                        
                           λ
                        
                        =0.8. Regarding DIF-values again, also note that R4 always generates the optimal solution whenever the optimal assignment for the fluid model is the same as for the discrete model (cf. DIF vs. SEL). In contrast, as expected, R2 most likely generates a non-optimal solution (cf. also Section 2.4.3) – especially if p
                        
                           λ
                         is small.

The results for ∣P∣=24 differ in some points from that obtained for ∣P∣=12. Now, smaller maximum relative deviations of almost 19% (R2) and 1.5% (R4), respectively, are yielded. However, on average, R2 seems to perform poorer than before, whereas R4 yields better AVG-values than in case ∣P∣=12, except for two constellations. Furthermore, R2 generates non-optimal solutions in almost all tested cases where p
                        
                           λ
                        
                        ≠0.8. In contrast, again, R4 generates optimal solutions whenever the fluid model and its discrete counterpart decide for the same assignment.

Some further experiments indeed indicate (i) smaller SEL-values if distribution D
                        1 (where probably all P
                        2- and P
                        3-products are selected) is chosen instead of D
                        2 and (ii) an improved performance of R4 (R2) and thus a smaller model gap if D
                        1 (D
                        3) is chosen instead of D
                        2.

To sum up, if fluid model solutions are “repaired” according to R4, acceptable deviations will generally be yielded. In contrast, the more easily applicable heuristic R2 performs considerably poorer in most cases. Based on the AVG- as well as MAX-values yielded by R4, we conjecture that the gap between the fluid version of the assignment and allocation problem and its discrete counterpart will become even smaller as the number of available shelves increases. In line with our managerial implications formulated in Section 2.4.3 we conclude that an appropriate repair (e.g., according to R4) of fluid model solutions will generally yield small deviations in terms of the objective function value although it is unlikely that the fluid model selects the optimal set of SKUs (unless a small-sized forward area is considered and P contains only a few SKUs with minimum storage mode one).

In this section, we study another extension of the basic DFRAP by incorporating the size of the forward area as a decision variable. For a given set of products the area size has to be determined and partitioned among SKUs. Clearly, the smaller a forward area the less costly its (one-time) installation and daily operations. On the other hand, generally less units of the given set of SKUs can be stored forward so that a more frequent replenishment is required.

Based on the DFRAP defined in Section 2.1, let c
                        
                           s
                         denote the linear setup and operational costs incurred by any additional storage location, and let S
                        
                           min
                         and S
                        
                           max
                         denote the minimal and maximal size of the forward area, respectively. With these limits we implicitly account for the compact size of a forward area and thus, we assume negligible impacts on the forward area pick costs within these limits. Then, depending on c
                        
                           s
                         and the aggregate restock costs of each SKU, the DFRASP minimizes the overall costs incurred by replenishing and the area size while simultaneously deciding on the total number of shelves in the forward area and their optimal allocations to the given set of SKUs that have to be stored in the forward area. The respective model reads as follows:
                           
                              (31)
                              
                                 DFRASP
                                 :
                                 Minimize
                                 
                                 
                                    
                                       C
                                    
                                    
                                       3
                                    
                                 
                                 (
                                 x
                                 ,
                                 S
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       
                                          
                                             a
                                          
                                          
                                             ij
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 +
                                 
                                    
                                       c
                                    
                                    
                                       s
                                    
                                 
                                 ·
                                 S
                              
                           
                        
                        
                           
                              (32)
                              
                                 subject to
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 P
                              
                           
                        
                        
                           
                              (33)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 S
                              
                           
                        
                        
                           
                              (34)
                              
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 P
                                 ;
                                 
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        
                        
                           
                              (35)
                              
                                 
                                 S
                                 ∈
                                 {
                                 
                                    
                                       S
                                    
                                    
                                       min
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       S
                                    
                                    
                                       max
                                    
                                 
                                 }
                              
                           
                        
                     

Note that the problem is equivalent to the all-capacity multiple-choice knapsack problem (see Kellerer et al., 2004, Ch. 11), which – as a generalization of MCKP – is well-known to be 
                           
                              NP
                           
                        -hard. As the dynamic programming procedure of Dudzinski and Walukiewicz (1987) executed for S
                        =
                        S
                        
                           max
                         recursively determines an optimal knapsack for any smaller capacity S
                        ⩽
                        S
                        
                           max
                        , a pseudo-polynomial algorithm is readily available and the DFRASP turns out to be weakly 
                           
                              NP
                           
                        -hard.

When presupposing equally sized shelves the DFRASPES is defined as follows:
                           
                              (36)
                              
                                 
                                    
                                       DFRASP
                                    
                                    
                                       ES
                                    
                                 
                                 :
                                 Minimize
                                 
                                 
                                    
                                       C
                                    
                                    
                                       ES
                                       3
                                    
                                 
                                 (
                                 x
                                 ,
                                 S
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                                 +
                                 
                                    
                                       c
                                    
                                    
                                       s
                                    
                                 
                                 ·
                                 S
                              
                           
                        
                        
                           
                              (37)
                              
                                 subject to
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 S
                              
                           
                        
                        
                           
                              (38)
                              
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                                 }
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 P
                              
                           
                        
                        
                           
                              (39)
                              
                                 S
                                 ∈
                                 {
                                 
                                    
                                       S
                                    
                                    
                                       min
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       S
                                    
                                    
                                       max
                                    
                                 
                                 }
                              
                           
                        
                     

Clearly, for any fixed size S
                        ∈{S
                        
                           min
                        ,…,
                        S
                        
                           max
                        } where S
                        
                           min
                        
                        ⩾∣P∣ and 
                           
                              
                                 
                                    S
                                 
                                 
                                    max
                                 
                              
                              ⩽
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    P
                                 
                              
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                           
                         the problem turns out to be equivalent to DFRAPES, which is polynomial time solvable (cf. Section 2.2). Let x(S)=(x
                        1(S),…,
                        x
                        ∣P∣(S)) denote the corresponding optimal allocations, we check in 
                           
                              O
                              (
                              |
                              P
                              |
                              )
                           
                         time whether S is the optimal size or not. Therefore, we simply have to determine d
                        
                           max
                        (S)=max{d
                        
                           i
                        (x
                        
                           i
                        (S))∣i
                        ∈
                        P, x
                        
                           i
                        (S)<
                        n
                        
                           i
                        } as well as d
                        
                           min
                        (S)=min{d
                        
                           i
                        (x
                        
                           i
                        (S)−1)∣i
                        ∈
                        P, x
                        
                           i
                        (S)>1}. If d
                        
                           max
                        (S)>
                        c
                        
                           s
                        , the optimal size S
                        ∗ is larger than the current size S and if d
                        
                           min
                        (S)<
                        c
                        
                           s
                        , we can conclude S
                        ∗
                        <
                        S. In the other cases, where d
                        
                           max
                        (S)=
                        c
                        
                           s
                         or d
                        
                           min
                        (S)=
                        c
                        
                           s
                        , an optimal solution to DFRASPES has been found. Thus, we can efficiently solve any DFRASPES-instance by application of binary search over the feasible forward area sizes which consumes at most 
                           
                              O
                              (
                              log
                              (
                              
                                 
                                    S
                                 
                                 
                                    max
                                 
                              
                              -
                              
                                 
                                    S
                                 
                                 
                                    min
                                 
                              
                              )
                              |
                              P
                              
                                 
                                    |
                                 
                                 
                                    2
                                 
                              
                              log
                              (
                              (
                              
                                 
                                    S
                                 
                                 
                                    max
                                 
                              
                              -
                              |
                              P
                              |
                              )
                              /
                              |
                              P
                              |
                              )
                              )
                           
                         time in total if at each iteration the corresponding DFRAPES is solved according to one of the fastest algorithms mentioned in Section 2.2. Clearly, in case S
                        
                           min
                        
                        =∣P∣ and 
                           
                              
                                 
                                    S
                                 
                                 
                                    max
                                 
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    P
                                 
                              
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                           
                         the effort of solving DFRASPES reduces to 
                           
                              O
                              
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             P
                                          
                                       
                                       log
                                       (
                                       
                                          
                                             n
                                          
                                          
                                             i
                                          
                                       
                                       -
                                       1
                                       )
                                    
                                 
                              
                           
                         by efficiently determining for each SKU i
                        ∈
                        P the smallest decrement that is larger than c
                        
                           s
                         (cf. also Frederickson and Johnson, 1982). Then, in case n
                        
                           i
                        
                        =
                        n
                        
                           j
                         for all i, j
                        ∈
                        P, note that
                           
                              (40)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 log
                                 (
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 1
                                 )
                                 =
                                 log
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          i
                                          ∈
                                          P
                                       
                                    
                                 
                                 (
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 1
                                 )
                                 =
                                 log
                                 (
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 1
                                 
                                    
                                       )
                                    
                                    
                                       |
                                       P
                                       |
                                    
                                 
                                 =
                                 |
                                 P
                                 |
                                 log
                                 (
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       max
                                    
                                 
                                 -
                                 |
                                 P
                                 |
                                 )
                                 /
                                 |
                                 P
                                 |
                                 )
                              
                           
                        so that the asymptotic worst-case time complexity equals the one of an optimal algorithm for DFRAPES (cf. Section 2.2).

Analogously to the experimental tests described in Sections 2.4 and 3.3, the following experiments compare DFRASPES-solutions and their (repaired) continuous counterparts in order to once again compute the gap between both models.

Problem DFRASPES is solved as proposed in the previous section assuming n
                        
                           i
                        
                        =
                        S
                        
                           max
                        
                        −∣P∣+1. Its respective fluid model – where the relaxation concerns only the variables x
                        
                           i
                         for all i
                        ∈ 
                        P – has been simply solved by applying the algorithm of Bitran and Hax (1981) for each feasible S to determine the optimal fluid model size as well as the corresponding allocations. After having identified the continuous optimum, we heuristically discretize the respective allocations according to the procedures R2 and R4.

We investigated three different number of products, namely ∣P∣∈{10,25,40}, and we set S
                        
                           min
                        
                        =∣P∣ and S
                        
                           max
                        
                        =3· ∣P∣. The assumptions on the aggregate restock costs q
                        
                           i
                         for product i are the same as in Section 2.4.2, i.e., we consider three product categories P
                        1, P
                        2, P
                        3, and, this time again, the three distributions D
                        1, D
                        2, D
                        3. Depending on the q
                        
                           i
                        ’s we determined individual setup-costs according to 
                           
                              
                                 
                                    c
                                 
                                 
                                    s
                                 
                              
                              =
                              c
                              ·
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                      ∈
                                                      P
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            q
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    |
                                    P
                                    
                                       
                                          |
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                           
                         for each instance where we tested three different values for the parameter c, namely c
                        ∈{0.45,0.75,1.05}. The second multiplier is based on considerations for the classic fluid model (cf. Section 2.3) for which the optimal number of shelves
                           
                              (41)
                              
                                 
                                    
                                       S
                                    
                                    
                                       FM
                                    
                                    
                                       ∗
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             P
                                          
                                       
                                       
                                          
                                             
                                                
                                                   q
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   s
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        (if no limits on S are made a priori) is readily verified using Eq. (16) and differentiating the respective objective function 
                           
                              
                                 
                                    FC
                                 
                                 
                                    ES
                                    3
                                 
                              
                              (
                              
                                 
                                    z
                                 
                                 
                                    ∗
                                 
                              
                              ,
                              S
                              )
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ∈
                                    P
                                 
                              
                              
                                 
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    
                                       
                                          z
                                       
                                       
                                          i
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              
                              +
                              
                                 
                                    c
                                 
                                 
                                    s
                                 
                              
                              ·
                              S
                           
                         with respect to S. In this case, 
                           
                              
                                 
                                    c
                                 
                                 
                                    s
                                 
                              
                              <
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                      ∈
                                                      P
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            q
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    |
                                    P
                                    
                                       
                                          |
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                           
                         guarantees 
                           
                              
                                 
                                    S
                                 
                                 
                                    FM
                                 
                                 
                                    ∗
                                 
                              
                              >
                              |
                              P
                              |
                           
                        .

For each (∣P∣,
                        D,
                        c)-combination we generated 10,000 independent instances (again, leading to 33
                        =27 constellations) and recorded the relative number of instances (labeled as “SIZ”) for which the optimal size for the continuous version differs from the optimal size for its discrete counterpart (in %). Note that SIZ is independent of the repair heuristics. Additionally, we recorded the two evaluation measures AVG and MAX (see Section 2.4) for each of the two repair heuristics. Clearly, this time, AVG as well as MAX are not only related to the replenishing costs but to the total costs incurred by replenishing and setup.

@&#RESULTS@&#

The results summarized in Table 4
                         reveal that the fluid model misses the right size of the forward area in a considerable fraction of instances. The fraction of properly sized areas, i.e., 1−
                        SIZ, deviates between 59,48% (cf. D
                        1 and c
                        =1.05) and 0% (cf. D
                        3 and c
                        =1.05).

When comparing the average and maximum gap between the DFRASP and its continuous counterpart (denoted as performance measures AVG and MAX in Table 4), rounding procedure R4 again shows much more efficient than R2. While R2 produces a considerable average (maximum) gap ranging between 2.53% (5.11%) and 12.69% (23.08%), R4 leads to an average gap of less than 1% in any parameter constellation and a maximum gap of only 3.02%.

Additional experiments with larger product sets (i.e., ∣P∣∈{100,500}) lead to the following results: (i) SIZ approaches 100%, (ii) MAX-values of R2 further decrease without having much impact on AVG-values, and (iii) R4 performs even better for larger product sets with regard to AVG and MAX.

To conclude, the application of the fluid model will most probably result in a forward area size that deviates from the optimal size. Nevertheless, the impact of a non-optimal sized forward area is rather small so that practitioners applying the fluid model will receive near optimal solutions when utilizing an appropriate repair procedure (e.g. R4) in order to determine the respective SKU-allocations.

@&#CONCLUSIONS@&#

Unlike existing research, which predominantly focuses the fluid model, the paper on hand investigates three discrete forward–reserve problems. Problem DFRAP allocates the storage space among a given set of SKUs, problem DFRAAP additionally selects the products to be stored in the forward area, and problem DFRASP jointly addresses the storage space allocation problem and the overall size of the forward area. All resulting problem versions are investigated for two different constellations, namely variable storage modes and equally sized shelves. While the former case allows each SKU being stored in facultative modes each requiring a specific amount of space for a specific number of products, the latter scenario presupposes some standardized rack being subdivided into equally sized shelves. The complexity results for all six resulting problem versions are summarized in Table 5
                     . Considering equally sized shelves, in three separate computational studies we, furthermore, quantify the resulting gap between the respective discrete problem version and its continuous counterpart (denoted as fluid models) repaired to an integral solution.

From the practitioner’s point of view the main finding of this paper is, that (given a suited rounding procedure, i.e., R4) the model gaps between the fluid models and their discrete counterparts are negligible. Thus, warehouse managers currently using a problem version of the widespread fluid model for planning forward areas do not have to worry about being misled by pronounced rounding errors.

Future research should further concentrate on the discrete versions of the forward–reserve problem. For instance, a powerful branch-and-bound algorithm for the DFRAAP based on the ideas of this paper would be a valuable contribution. Furthermore, relevant problem extensions should be investigated. For example, explicitly considering the impact of both the location of a SKU in the forward area and the overall size of the forward area on the resulting picking effort, incorporating SKU assignments into the sizing model, examining distinctive characteristics of SKUs that are stored forward, and explicitly scheduling replenishment activities bear plenty opportunities for future research.

@&#ACKNOWLEDGMENTS@&#

We thank Malte Fliedner for some hints on the resource allocation problem. Furthermore, the authors are indebted to four anonymous referees for their helpful comments.

@&#REFERENCES@&#

