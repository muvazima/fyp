@&#MAIN-TITLE@&#Performance analysis and simulation verification of S-MAC for wireless sensor networks

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose one state machines model for S-MAC protocol.


                        
                        
                           
                           We use a probabilistic model to analyze the latency and stability performances.


                        
                        
                           
                           Sleeping mechanism does have negative impacts on the latency and stability performances.


                        
                        
                           
                           Adaptive listening mechanism does optimize the latency and stability performances.


                        
                        
                           
                           Appropriate dutyCycle can be used to further improve the latency and stability.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

S-MAC

State machines model

Latency

Stability

Wireless sensor networks

@&#ABSTRACT@&#


               
               
                  As a typical media access protocol, S-MAC has drawn much attention in the past decades. However, most of the attention focuses on energy efficiency, but fails to guarantee QoS performance. Firstly, we develop one state machines model and elaborate on the states’ transition processes of S-MAC. Secondly, combining our state machines with the specific parameters of S-MAC, we propose an analytical probabilistic model to investigate the latency and stability performances of S-MAC employing three different mechanisms: without sleeping mechanism, with sleeping mechanism, and with adaptive-listening mechanism. Also we analyze the latency and stability performances of S-MAC with different dutyCycle values. This research shows two interesting results: 1) Sleeping mechanism inside S-MAC does have negative impacts on its latency and stability; fortunately, adaptive listening mechanism can optimize them to some extent. 2) Latency and stability performances of S-MAC can be further improved through manipulating dutyCycle values. The simulations in NS2 exhibit consistent results with those obtained from our analytical probabilistic model.
               
            

@&#INTRODUCTION@&#

In recent years, wireless sensor networks (WSNs) [1] have been gaining attention all round the world and well developed. One of the top challenges for WSNs is that nodes have limited energy [2]. It should be mentioned that IEEE 802.15.4 standard [3] was proposed for low-rate wireless personal networks in 2003. It defines the physical (PHY) layer and media access control (MAC) layer specifications for low-rate wireless connectivity among relatively simple devices that consume minimal power and typically operate in the Personal Operating Space (POS) of 10 m or less [4]. A diverse set of applications for IEEE 802.15.4 networks encompassing different fields have already emerged including medicine, agriculture, environment, military, and many others [5].

MAC protocol aims to distribute the consent of channel for different sensor nodes. According to different qualities of MAC protocols, wireless sensor networks can be divided into two types: TDMA (Time Division Multiple Access)-based networks and contention-based networks [6]. MAC protocol allocates limited wireless channels among nodes and determines the way radio works. As a result, MAC protocol has a great influence on quality of service (QoS) capabilities of networks that are vital in designing wireless sensor networks for different applications, such as latency, packet loss rate, stability, and throughput [7-8]. Moreover, MAC protocol is one of the essential factors to reduce energy depletion of sensor nodes [9]. Therefore, the research activities in MAC protocols are necessary since sensor nodes have limited energy, memory capacity and processing capabilities [10].

So far, many MAC protocols for WSNs have been proposed (e.g. PAMAS [11], S-MAC [12-13], PSIFT [14-15] QoS-MAC [16], PR-MAC [17], PQ-MAC [18] and Diff-MAC [19]). Among those notable protocols, S-MAC is representative because it is the first protocol to propose one periodical working and sleeping mechanism to avoid unnecessary energy consumption in idle listening. Afterwards, a lot of studies relevant to S-MAC are proposed successively [20-24]. Most of them aim to design different mechanisms to improve the energy efficiency of the canonical S-MAC; others try to develop QoS-oriented MAC layer protocols based on S-MAC. In the past years, there have already been some studies focusing on the analyses of S-MAC performance in a theoretical way. However, they only covered throughput and packet loss ratio under certain idealistic scenarios. It is well known that one satisfactory network service should consider the latency and stability in addition to throughput and packet loss ratio.

To evaluate its latency and stability, we firstly propose one state machines model for S-MAC. Each condition of states’ transition processes is described in detail by use of the state machines model. Then, based on this state machines model and specific parameters of S-MAC, we propose an analytical probabilistic model to investigate the latency and stability performances of three different S-MAC mechanisms: without sleeping mechanism, with sleeping mechanism, and with adaptive-listening mechanism. Also we analyze the latency and stability performances of S-MAC protocol with different values of dutyCycle. The results indicate that the sleeping mechanism degrades the latency and stability performances of S-MAC. However, an adaptive listening mechanism can help in improving the performances of latency and stability. For S-MAC with adaptive listening, the appropriate dutyCycle manipulation contributes to an improvement in its latency and stability performances. Moreover, based on IEEE 802.15.4 physical standard, we conduct two simulations in line-shape and cross-shape topologies with different MAC mechanisms and dutyCycle values using NS2.35. Furthermore, the validity of the analytical probabilistic model is convincingly proved by simulations.

The remainder of this paper is organized as follows: the related work is presented in Section 2. Section 3 introduces state machines model of S-MAC and state transition processes. In Section 4, the performances of different S-MAC mechanisms are investigated based on analytical probabilistic model. The simulations results are elaborated in Section 5. Finally, conclusions are drawn in Section 6.

@&#RELATED WORK@&#

IEEE 802.15.4 standard is proposed to provide a low power, low cost and highly reliable wireless connectivity among inexpensive, battery-powered devices [25]. The PHY and MAC layer provide building blocks for supporting multiple network topologies, including both star and peer to peer networks. The physical layer of IEEE 802.15.4 standard is based on Industrial, Scientific and Medical (ISM) frequency bands and can operate on three frequency bands: 2.4 GHz (worldwide, adopted in Brazil) with 16 channels and a 250 Kbps data rate; 915 MHz (used only in the USA) with 10 channels and a 40 Kbps data rate; and 868 MHz (the European standard) with only one channel and data rate of 20 Kbps [26]. The MAC sublayer coordinates access to the shared channel among competing devices and in IEEE 802.15.4, which operates on both beacon enabled and non-beacon enabled modes. In the beaconless mode, decentralized channel access is managed through an unslotted CSMA/CA mechanism, where devices may directly communicate with each other in peer-to-peer connections [27].

IEEE 802.15.4 unslotted CSMA/CA mechanism has no power saving mechanism and it does not provide any time delivery guarantee. On the other hand, by adopting the coordinated periodic sleeping, the slotted mode achieves higher energy efficiency, and better copes with time delivery constraints [5]. In slotted CSMA/CA, a packet might be delayed by several sleeping periods when a node fails to access the channel due to contention, although overall traffics in the network are relatively low [28]. Just like IEEE 802.15.4 unslotted CSMA/CA mechanism, for WSN, IEEE 802.11 has high throughput, low packet drop rate and low end-to-end packet delay. On the other hand, the lack of power saving mechanism leads to that nodes waste too much energy in listening to idle channel for a long time. As a result, IEEE 802.11 fails to assure energy efficiency on WSNs because it For this defect, a lot of energy-saving MAC protocols have been proposed, including PAMAS [11], S-MAC [12], TMAC[29] and many others. Among these, S-MAC is a typical energy-saving MAC protocol.

In 2002, Ye Wei et al. proposed Sensor-MAC (S-MAC) [12] based on IEEE802.11 DCF [30] protocol. The sleeping mechanism in S-MAC has a significant influence on further research on MAC protocols. S-MAC divides time into two cycled periods: working period and sleeping period. In the working period, node communicates with their neighbors using RTS/CTS/DATA/ACK mechanism. In the sleeping period, node turns off radio to save energy. In a network running S-MAC protocol, energy efficiency can be significantly improved compared to IEEE 802.11; unfortunately the capability of its QoS guarantee is poor because of the sleeping mechanism. Ye Wei et al. tried to improve S-MAC protocol by employing adaptive listening mechanism [13] in 2004. When a node finished its transmission, adaptive listening mechanism makes the nodes sequentially detect channel for potential transmission requirements instead of going to sleep. Afterwards, TMAC [29] and PMAC [31] are successively proposed. In TMAC, authors use one time variable, named TA, to control the moment at which the node needs to sleep. In one period of TA time, if the node did not have any transmitting action, it would directly go to sleep instead of listening to IDLE channel until sleeping period came. TMAC can handle the network with dynamic traffic loads well. Nevertheless, it still has deficiency of QoS in early-sleeping. PMAC uses the pattern information to inform the node of neighbors’ next actions in advance, which can further improve the energy efficiency and QoS performance. In recent years, more and more researchers focused on the capabilities of QoS guarantee based on energy efficiency, such as PSIFT [14,15], QoS-MAC [16], PR-MAC [17], PQ-MAC [18], and Diff-MAC [19].

Meanwhile, some researchers made great efforts in theoretically analyzing energy efficiency, especially in QoS performance. In [20], authors analyzed the influences of DIFS, content window and duty cycle on the S-MAC latency, then a simulation was implemented in NS2 with adaptive DIFS, content window and duty cycle to testify the influence. However, they did not make analysis on the specific parameters of S-MAC protocol by use of probabilistic model based, neither on the stability. Sakya G. et al. analyzed the influence of the specific parameters (e.g. dutyCycle) of S-MAC on the latency and throughput [21]. Unfortunately, they paid no attention to stability analysis. Tadayon N. et al. proposed an analytical mathematic model for S-MAC protocol, and made an analysis about the influence of dutyCycle on QoS and energy performances based on queue model [22]. However, their study was devoted to energy efficiency and throughput, lacking the analysis about the latency and stability. Wang C. et al. [23] analyzed S-MAC with a mathematic model and proved that adaptive content window and dutyCycle help in improving the S-MAC's performance through simulations. Nevertheless, authors did not make a thorough analysis of the latency and stability. Additionally, the latency and stability were not taken into consideration during their simulation analysis. Regarding the theoretical analysis, one recent study [24] proposed an analytical probabilistic model for S-MAC to conduct a throughput analysis. Through NS2 simulation, authors compared S-MAC's throughput, collision rate, accessing delay with traditional CSMA/CA mechanism. The main shortcoming of this study is that the latency and stability were not involved.

In this section, we propose one state machines model for S-MAC. According to the specific programs of S-MAC running process, there are four state machines: receiving state machine, transmitting state machine, radio state machine and channel state machine. The state machines model visually includes all the states which nodes go through when S-MAC running; and helps clearly in illustrating the condition and process of state transitions.

In Table 1
                        , we present these states inside receiving state machine of S-MAC.

As shown in Fig. 1
                        , if the signal power of a new arrival packet was lower than the receiver sensitivity threshold of the node, the node would not transform its state from MAC_IDLE to MAC_RECV. In the case that a node in the middle of receiving received a new packet, if the signal power of new arrival packet was lower than that of the packet under reception, it would not cause collision and the node would not transform its state from MAC_RECV to MAC_COLLISION. If one collision had happened, all packets that were influenced by the collision would be immediately dropped because these packets cannot be captured in reality. If a node under CR_SENSE state suffered from collision, the node would directly transform itself into a MAC_SLEEP state, otherwise the node would transform into MAC_IDLE state. If a node received a packet containing error, the node would drop the packet and transform into MAC_IDLE state.

If the signal power of a new arrival packet was higher than the node's sensitivity threshold and there was no collision during the whole reception process, the packet would be completely delivered. If a node received a packet destined to the node itself, the node would call the corresponding function to handle the packet, such as handleRTS, handleCTS and handleSYNC. If the packet was RTS signal, the node would reply CTS to the source node of RTS, and transform into, subsequently keep WAIT_DATA state until the reception of all data packets was complete. After either a successful data packet reception or an error happened in the middle of receiving, the node would transform back into the MAC_IDLE state.

The node would transform its state in different ways when a node received a packet not destined to the node itself. If a node received CTS or data packet, the node would directly transform into MAC_SLEEP state. If receiving a RTS packet, the node would transform into DATA_SENSE1 state. In the following period of time, the node received CTS or data corresponding to the RTS, and transformed into MAC_SLEEP state. If DATA_SENSE1 was timed out, the node would transform into DATA_SENSE2 state. Afterwards, if receiving any data packets, the node would transform into MAC_SLEEP, or once DATA_SENSE2 was timed out, the node would transform into MAC_IDLE.

The transmitting state machine of S-MAC contains these states tabulated in Table 2.
                        
                     

As shown in Fig. 2
                        , the transmitting state machine is taking charge of transmitting packet to other nodes. A node will transform its state from MAC_IDLE state to a corresponding state after packet delivery from MAC layer to physical layer. If the size of a data packet was beyond the length limit of MAC layer, the data packet would be divided into several fragments before being transmitted.

In S-MAC, there is no specific system for radio and channel states. Through deep investigation, we figure out the connections among radio states, channel states, receiving state machine and transmitting state machine. Moreover, after tracking the two state transition processes above, we develop the radio state machine and channel state machine. The states are listed in Tables 3
                         and 4
                        . The radio state machine describes the wireless radio transceiver state of a node, and the channel state machine indicates the detected channel state. Both of the two state machines are indispensable for assisting the receiving and transmitting state machines to make the protocol under proper operation.

Through the state machines model, we can obtain further understandings about S-MAC running progress under all conditions. The network will perform in different ways under different conditions. In next section, combining the aforementioned state machines, we will make analyses on the latency and stability performances of S-MAC with different mechanisms.

Although S-MAC protocol achieves high energy efficiency, it has one obvious defect that the latency of network is prolonged because of sleeping mechanism. Sometimes, the sending node cannot transmit packet until the receiving node wakes up. The latency of packet transmission is determined by these following elements: carrier sense, transmission, synchronization, sleeping, propagation, processing, queuing, backoff, etc. Among the elements, the propagation latency indicates that the process of electromagnetic wave is transmitted between nodes and it can be negligible because the value is too tiny to influence the result. The processing latency depends on CPU computation capability of node. Generally, the nodes in a network have the similar CPUs and their processing time is not large enough to influence the result, so that we can ignore the processing element. The queuing latency results from the congestion of simultaneous packet transmissions. The backoff latency is from the collision that leads to transmitting failure and packet retransmission.

As we know, both the queuing and backoff latencies are dynamic and uncertain. Meanwhile, the occurrence probability of collision and congestion events is lower in the case of light traffic load. Therefore, in a network with light traffic load, the queuing and backoff latencies are negligible. As a result, the analyses conducted in the networks with light traffic load help in efficiently evaluating the influence of sleeping and adaptive listening mechanism. The packet transmission latency elements that we take into consideration are listed in Table 5.
                     
                  

According to the state machines models and the specific running process of S-MAC, the following relations hold:

                        
                           listenTime_ = syncTime_ + dataTime_;

cycleTime_ = listenTime_ × 100 / dutyCycle_ + 1;

sleepTime_ = cycleTime_ - listenTime_;

adapTime_ = dataTime_;

Therefore, we have:

                        
                           (1)
                           
                              
                                 
                                    T
                                    
                                       d
                                       a
                                       t
                                       a
                                    
                                 
                                 =
                                 
                                 
                                    t
                                    
                                       c
                                       s
                                    
                                 
                                 +
                                 
                                    t
                                    
                                       t
                                       x
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              
                                 
                                    T
                                    
                                       l
                                       i
                                       s
                                       t
                                       e
                                       n
                                    
                                 
                                 =
                                 
                                 
                                    t
                                    
                                       s
                                       y
                                       n
                                       c
                                    
                                 
                                 +
                                 
                                 
                                    T
                                    
                                       d
                                       a
                                       t
                                       a
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (3)
                           
                              
                                 
                                    t
                                    s
                                 
                                 =
                                 
                                    (
                                    
                                       
                                          100
                                          
                                             d
                                             u
                                             t
                                             y
                                             C
                                             y
                                             c
                                             l
                                             e
                                          
                                       
                                       −
                                       1
                                    
                                    )
                                 
                                 ×
                                 
                                    T
                                    
                                       l
                                       i
                                       s
                                       t
                                       e
                                       n
                                    
                                 
                                 +
                                 1
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    T
                                    
                                       a
                                       d
                                       a
                                       p
                                    
                                 
                                 =
                                 
                                 
                                    T
                                    
                                       d
                                       a
                                       t
                                       a
                                    
                                 
                              
                           
                        
                     
                  

According to Eqs. (1) and (2), the listening duration is determined. According to Eq. (3), the sleeping duration is related to the parameter of dutyCycle, and the value of dutyCycle is adjustable. Generally, the bigger is its value, the longer is the sleeping duration.

As we know, CW in S-MAC is constant. Tcs
                     , the duration of carrier sense follows a uniform distribution in [0,CW];

                        
                           
                              
                                 
                                    T
                                    
                                       c
                                       s
                                    
                                 
                                 ∼
                                 U
                                 
                                    (
                                    0
                                    ,
                                    C
                                    W
                                    )
                                 
                              
                           
                        
                     
                     △D is the latency difference caused by carrier sense at each hop

                        
                           (5)
                           
                              
                                 Δ
                                 D
                                 =
                                 
                                    T
                                    
                                       c
                                       s
                                    
                                 
                                 =
                                 α
                                 ×
                                 C
                                 W
                              
                           
                        
                     Where α is a random value within the range of 0–1.

In a multihop network, tcs
                      can take the mathematical expectation of Tcs
                     :

                        
                           (6)
                           
                              
                                 
                                    t
                                    
                                       c
                                       s
                                    
                                 
                                 =
                                 
                                    ∫
                                    0
                                    
                                       C
                                       W
                                    
                                 
                                 
                                    T
                                    
                                       c
                                       s
                                    
                                 
                                 d
                                 
                                    T
                                    
                                       c
                                       s
                                    
                                 
                              
                           
                        
                     We assume that there is such network with N hops from source nodes to the Sink node; the duration of carrier sense at each hop is random. We can set the duration of carrier sense at n
                     th hop as tcs.n
                     ; the duration of one whole data packet transmission is less than the cycleTime. The value of cycleTime includes the duration of one whole working period and sleeping period.

Based on the aforementioned analyses, we will investigate the performance of S-MAC with three different mechanisms: without sleeping mechanism, with sleeping mechanism, and with adaptive-listening mechanism.

S-MAC without sleeping mechanism is similar to CSMA/CA. The latency that each hop of data transmitting takes only includes the duration of carrier sense and transmission. Hence, the latency of each hop in this mechanism, D, is calculated as follows:

                           
                              
                                 
                                    D
                                    =
                                    
                                       t
                                       
                                          c
                                          s
                                       
                                    
                                    +
                                    
                                       t
                                       
                                          t
                                          x
                                       
                                    
                                 
                              
                           
                        The gross latency of N hops, D(N), is expressed as:

                           
                              
                                 
                                    D
                                    ·
                                    N
                                    ·
                                    =
                                    
                                       ∑
                                       
                                          n
                                          =
                                          1
                                       
                                       N
                                    
                                    
                                       (
                                       
                                          
                                             t
                                             
                                                c
                                                s
                                                .
                                                n
                                             
                                          
                                          +
                                          
                                             t
                                             
                                                t
                                                x
                                             
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        Therefore, the average latency of N hops is E[D(N)]:

                           
                              (7)
                              
                                 
                                    E
                                    
                                       [
                                       
                                          D
                                          
                                             (
                                             N
                                             )
                                          
                                       
                                       ]
                                    
                                    =
                                    N
                                    ×
                                    
                                       (
                                       
                                          
                                             t
                                             
                                                c
                                                s
                                             
                                          
                                          +
                                          
                                             t
                                             
                                                t
                                                x
                                             
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        As a result, the following inferences are made:


                        Inference 1.1: According to Eq. (7), the whole latency of network is related to the hop number of N.
                     


                        Inference 1.2: According to Eqs. (5) and (7), resulting from the additive effect, the differences in the carrier sense duration among hops results in that the node with more hops from the Sink requires more time to reach a steady state. However, the duration of carrier sense is too small to significantly influence the time that the nodes would take to reach the steady state, and the time does not heavily depend on the number of hops.


                        Inference 1.3: According to Eqs. (5) and (7), the carrier sense only results in a small jitter for a network.

In this case, the nodes implement synchronization actions when they wake up. Afterwards, the nodes enter the working period. The transmissions of data packets are completely random, distributing between the best and the worst situations. In the cases of the best situations, the packet can be directly transmitted and does not need to wait for the duration of sleeping or synchronization. In the cases of the worst situations, the packet has to wait for the whole duration of sleeping and synchronization before being transmitted. Ts
                        , the latency from sleeping mechanism, follows a uniform distribution in [0, ts
                        +tsync
                        ]:

                           
                              
                                 
                                    
                                       T
                                       s
                                    
                                    ∼
                                    U
                                    
                                       (
                                       0
                                       ,
                                       
                                          t
                                          s
                                       
                                       +
                                       
                                          t
                                          
                                             s
                                             y
                                             n
                                             c
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        
                        △D is the latency difference caused by sleeping mechanism between neighboring nodes:

                           
                              (8)
                              
                                 
                                    Δ
                                    
                                       D
                                       s
                                    
                                    =
                                    α
                                    ×
                                    
                                       (
                                       
                                          
                                             t
                                             s
                                          
                                          +
                                          
                                             t
                                             
                                                s
                                                y
                                                n
                                                c
                                             
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        Where α is a random value within the range of 0–1.

In a multihop network, the value of T can take the mathematical expectation value of Ts
                        :

                           
                              (9)
                              
                                 
                                    T
                                    =
                                    
                                       ∫
                                       0
                                       
                                          
                                             t
                                             s
                                          
                                          +
                                          
                                             t
                                             
                                                s
                                                y
                                                n
                                                c
                                             
                                          
                                       
                                    
                                    
                                       
                                          T
                                          s
                                       
                                       d
                                       
                                          T
                                          s
                                       
                                    
                                 
                              
                           
                        According to Eq. (9), we can get that D is the mathematical expectation of latency at each hop:

                           
                              
                                 
                                    D
                                    =
                                    
                                       t
                                       
                                          c
                                          s
                                       
                                    
                                    +
                                    
                                       
                                          
                                             t
                                             s
                                          
                                          +
                                          
                                             t
                                             
                                                s
                                                y
                                                n
                                                c
                                             
                                          
                                       
                                       2
                                    
                                    +
                                    
                                       t
                                       
                                          t
                                          x
                                       
                                    
                                 
                              
                           
                        
                     

So, the gross latency of N hops is D(N):

                           
                              
                                 
                                    D
                                    
                                       (
                                       N
                                       )
                                    
                                    =
                                    
                                       ∑
                                       
                                          n
                                          =
                                          1
                                       
                                       N
                                    
                                    
                                       (
                                       
                                          
                                             t
                                             
                                                c
                                                s
                                                .
                                                n
                                             
                                          
                                          +
                                          
                                             T
                                             
                                                s
                                                .
                                                n
                                             
                                          
                                          +
                                          
                                             t
                                             
                                                t
                                                x
                                             
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        Thus, the average latency of N hops is E[D(N)]:

                           
                              (10)
                              
                                 
                                    E
                                    
                                       [
                                       
                                          D
                                          
                                             (
                                             N
                                             )
                                          
                                       
                                       ]
                                    
                                    =
                                    N
                                    ×
                                    
                                       (
                                       
                                          
                                             t
                                             
                                                c
                                                s
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   t
                                                   s
                                                
                                                +
                                                
                                                   t
                                                   
                                                      s
                                                      y
                                                      n
                                                      c
                                                   
                                                
                                             
                                             2
                                          
                                          +
                                          
                                             t
                                             
                                                t
                                                x
                                             
                                          
                                       
                                       )
                                    
                                    
                                    =
                                    N
                                    ×
                                    
                                       (
                                       
                                          
                                             t
                                             
                                                c
                                                s
                                             
                                          
                                          +
                                          
                                             t
                                             
                                                t
                                                x
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         100
                                                         
                                                            d
                                                            u
                                                            t
                                                            y
                                                            C
                                                            y
                                                            c
                                                            l
                                                            e
                                                         
                                                      
                                                      −
                                                      1
                                                   
                                                   )
                                                
                                                ×
                                                
                                                   (
                                                   
                                                      
                                                         t
                                                         
                                                            s
                                                            y
                                                            n
                                                            c
                                                         
                                                      
                                                      +
                                                      
                                                         t
                                                         
                                                            c
                                                            s
                                                         
                                                      
                                                      +
                                                      
                                                         t
                                                         
                                                            t
                                                            x
                                                         
                                                      
                                                   
                                                   )
                                                
                                                +
                                                1
                                                +
                                                
                                                   t
                                                   
                                                      s
                                                      y
                                                      n
                                                      c
                                                   
                                                
                                             
                                             2
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        Consequently, we have the following inferences:


                        Inference 2.1: According to Eqs. (7) and (10), the sleeping mechanism obviously prolongs the latency of the whole network.


                        Inference 2.2: According to Eqs. (5), (8) and (10), because of the additive effect, the difference of sleeping duration at each hop can cause nodes that with more hops require more time to reach steady state, and the time is obviously longer than that without sleeping mechanism.


                        Inference 2.3: According to Eqs. (5) and (8), the sleeping duration is far longer than carrier sense. Therefore, the sleeping mechanism can result in a larger jitter which indicates an aggravation in stability performance throughout the whole network.

Because of the adaptive listening mechanism, the nodes continuously detect the channel instead of directly going to sleep after a transmission. If a node has more packets to transmit or receive after last transmission, it would immediately enter the transmission process rather than wait for the next working period. As a result, the latency resulting from sleeping can be reduced. Just as shown in Fig. 3
                        , the adaptive listening mechanism only occurs at the next hop of the current receiving node, which means that the direct data packet transmission only happens in an alternate way. After a successful adaptive listening packet transmission, the node would return to the original sleeping mechanism.

In the case of the sleeping mechanism, D
                        1 is the mathematical expectation of latency at each hop:

                           
                              
                                 
                                    
                                       D
                                       1
                                    
                                    =
                                    
                                       t
                                       
                                          c
                                          s
                                       
                                    
                                    +
                                    
                                       
                                          
                                             t
                                             s
                                          
                                          +
                                          
                                             t
                                             
                                                s
                                                y
                                                n
                                                c
                                             
                                          
                                       
                                       2
                                    
                                    +
                                    
                                       t
                                       
                                          t
                                          x
                                       
                                    
                                 
                              
                           
                        In the case of the adaptive listening mechanism, △D is the latency difference caused by sleeping at each hop:

                           
                              (11)
                              
                                 
                                    Δ
                                    
                                       D
                                       s
                                    
                                    =
                                    
                                       α
                                       2
                                    
                                    ×
                                    
                                       (
                                       
                                          
                                             t
                                             s
                                          
                                          +
                                          
                                             t
                                             
                                                s
                                                y
                                                n
                                                c
                                             
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        
                     

According to Eq. (4), the latency of the adaptive transmitting is the same as without sleeping mechanism, and D
                        2 is the latency at each hop:

                           
                              
                                 
                                    
                                       D
                                       2
                                    
                                    =
                                    
                                       t
                                       
                                          c
                                          s
                                       
                                    
                                    +
                                    
                                       t
                                       
                                          t
                                          x
                                       
                                    
                                 
                              
                           
                        
                     

Thus, the gross latency of N hops is D(N):

                           
                              
                                 
                                    D
                                    
                                       (
                                       N
                                       )
                                    
                                    =
                                    
                                       ∑
                                       
                                          n
                                          =
                                          1
                                       
                                       N
                                    
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         t
                                                         
                                                            c
                                                            s
                                                            .
                                                            n
                                                         
                                                      
                                                      +
                                                      
                                                         T
                                                         
                                                            s
                                                            .
                                                            n
                                                         
                                                      
                                                      +
                                                      
                                                         t
                                                         
                                                            t
                                                            x
                                                         
                                                      
                                                   
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      t
                                                      
                                                         c
                                                         s
                                                      
                                                   
                                                   +
                                                   
                                                      t
                                                      
                                                         t
                                                         x
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                n
                                                
                                                   =
                                                   1
                                                   ,
                                                   3
                                                   ,
                                                   5
                                                
                                                …
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                n
                                                
                                                   =
                                                   2
                                                   ,
                                                   4
                                                   ,
                                                   6
                                                
                                                …
                                             
                                          
                                       
                                    
                                 
                              
                           
                        Average latency of N hops is E[D(N)]:

                           
                              (12)
                              
                                 
                                    E
                                    
                                       [
                                       
                                          D
                                          
                                             (
                                             N
                                             )
                                          
                                       
                                       ]
                                    
                                    =
                                    
                                       N
                                       2
                                    
                                    ×
                                    
                                       (
                                       
                                          
                                             t
                                             
                                                c
                                                s
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   t
                                                   s
                                                
                                                +
                                                
                                                   t
                                                   
                                                      s
                                                      y
                                                      n
                                                      c
                                                   
                                                
                                             
                                             2
                                          
                                          +
                                          
                                             t
                                             
                                                t
                                                x
                                             
                                          
                                          +
                                          
                                             t
                                             
                                                c
                                                s
                                             
                                          
                                          +
                                          
                                             t
                                             
                                                t
                                                x
                                             
                                          
                                       
                                       )
                                    
                                    =
                                    N
                                    ×
                                    
                                       (
                                       
                                          
                                             t
                                             
                                                c
                                                s
                                             
                                          
                                          +
                                          
                                             t
                                             
                                                t
                                                x
                                             
                                          
                                       
                                       )
                                    
                                    +
                                    
                                       
                                          N
                                          ×
                                          
                                             (
                                             
                                                
                                                   100
                                                   
                                                      d
                                                      u
                                                      t
                                                      y
                                                      C
                                                      y
                                                      c
                                                      l
                                                      e
                                                   
                                                
                                                −
                                                1
                                             
                                             )
                                          
                                          ×
                                          
                                             (
                                             
                                                
                                                   t
                                                   
                                                      s
                                                      y
                                                      n
                                                      c
                                                   
                                                
                                                +
                                                
                                                   t
                                                   
                                                      c
                                                      s
                                                   
                                                
                                                +
                                                
                                                   t
                                                   
                                                      t
                                                      x
                                                   
                                                
                                             
                                             )
                                          
                                          +
                                          1
                                          +
                                          
                                             t
                                             
                                                s
                                                y
                                                n
                                                c
                                             
                                          
                                       
                                       4
                                    
                                 
                              
                           
                        Therefore, we can make following inferences:


                        Inference 3.1: According to Eqs. (10) and (12), the adaptive listening mechanism contributes to the reduction of the latency from sleeping.


                        Inference 3.2: According to Eqs. (8), (11) and (12), a network with adaptive listening mechanism can reach steady state significantly quicklier than a network without adaptive listening mechanism. However, it still suffers from the additive effect mentioned in Inference 2.2.


                        Inference 3.3: According to Eqs. (8) and (11), the adaptive listening mechanism contributes to an improvement in the jitter of some hops; consequently the stability of the whole network is better assured.

According to the inferences mentioned above, the sleeping mechanism significantly increases the latency and aggravates the network stability. By contrast, the adaptive listening mechanism reduces the latency from sleeping and improves the network stability. According to Eqs. (3), (11) and (12), the sleeping duration of adaptive listening mechanism is directly related to dutyCycle, hence, we have the following inference:


                        Inference 4: Manipulating dutyCycle values is a good option to reduce the network latency and the time to reach steady state.

In this section, we conduct two scenarios to verify the inferences mentioned above using NS2.35. As listed in Table 6
                     , simulation parameters are based on IEEE 802.15.4 standard. At the beginning of simulation, S-MAC has enough time (100 s) to implement nodes’ synchronization. All nodes operate at the data rate of 250 kbps in the 2.4 GHz ISM band and each data packet has the size of 60 bytes, which satisfy IEEE 802.15.4 physical standard.

It should be mentioned that in a large-scale network with S-MAC, there would be frequent route fluctuations due to the S-MAC's sleeping mechanism, which always inevitably has negatively impacts on end-to-end latency and stability. In our inferences, the number of hops from source nodes to the Sink is one of key parameters to analyze MAC mechanism. So it would be the best option to choose the scenario with minimum route fluctuations. In a large-scale topology, some source nodes could have more than one route to Sink and the sleeping mechanism could cause frequent route change. Therefore, it is hard to eliminate the interference of the fluctuation of the route hop number with the end-to-end latency and stability of S-MAC. Moreover, the network load also has a significant effect on the end-to-end latency and stability because of congestion. To focus on the evaluation of S-MAC sleeping mechanism itself, we have to alleviate other factors to influence simulation results. Furthermore, there are two facts worth noting. One is that data packets from each source node to the Sink can be abstracted to a line route even in a real large-scale network. The other is that the nodes closer to the Sink undergo much heavier traffic load. Based on the aforementioned considerations, we design two different scenarios. First one is a line-shape topology with 5 nodes, in which a Sink lies at the far right of network and receives data only from the closest neighbor node. Second scenario is a cross-shape topology with 11 nodes, Sink is located at the center and several nodes simultaneously transmit data to Sink.

The first scenario is aimed to mimic the situation where the Sink sits on the edge of the whole network. The topology is shown as Fig. 4
                        , which has 5 nodes. N0, N1, N2 and N3 are source nodes that generate the data packets destined to the Sink of N4. Each node is characterized by the radio transmission range of 10 m. The distance between any two neighbors is 10 m. As a result, the transmission range of each node only covers its neighbor nodes, which means the nodes except N3 are not able to directly communicate with N4 independently. The rank of hop number from source to the Sink is N0>N1>N2>N3 in descending order. The nodes closer to the Sink would undergo a heavier transmission load, just as it exactly happens in large-scale networks.

Based on the topology in Fig. 4, several simulations have been conducted corresponding to different mechanisms: without sleeping mechanism, with sleeping mechanism, and with adaptive-listening mechanism. Additionally, the effects of dutyCycle on the latency and stability also are evaluated. The simulation results are elaborated on in three separate parts to make our inference verification easily understood. At each part, the latency and stability performances are evaluated at the Sink node based on the classification and count of CBR from different source nodes. In part 1), we evaluate how sleeping mechanism impacts on the latency and stability performances. In part 2), considering the disadvantage of sleeping mechanism, we investigate the influences of the adaptive listening mechanism on latency and stability. In part 3), we explore the internal relations between dutyCycle and performance.

                           
                              (1)
                              Influences of sleeping mechanism on the latency and stability

In this section, we investigate the performances of S-MAC with two different mechanisms: without sleeping and with sleeping mechanisms. The simulations results are shown in Fig. 5
                        , Tables 7
                         and 8.
                        
                     

In Fig. 5a, the latency of all nodes without sleeping mechanism is fairly small. Also, the rank of latency in descending order is N0>N1>N2>N3 which is just the same as the rank of hop number from source nodes to the Sink node. It matches Inference 1.1. In Fig. 5c, the jitter keeps in a very low level which complies with Inference 1.3. From Figs. 
                        1 and 3, all nodes become stable at 105 s and the jitter of the whole network keeps tiny during most of the simulation period. Thus, Inference 1.2 is verified.

As depicted in Fig. 5a and b and Table 7, in the case without sleeping mechanism, the latency is tiny, ranging from 0.002 ms to 0.009 ms. On the other hand, in the case with sleeping mechanism, the latency distributes between 0.3 ms and 2.4 ms, which is much larger than without sleeping mechanism. So, we do confirm that the sleeping mechanism obviously increases network latency which complies with Inference 2.1. After scrutinizing Fig. 5b, we find out that the rank of time that nodes take to reach steady state is N0>N1>N2>N3 in descending order; additionally, the node farther from Sink takes more time to get steady.

It is observed that the sleeping mechanism has an obviously negative effect on the network stability in Fig. 5c and d. Without sleeping mechanism, the jitter reaches steady state at about 105 s. On the contrary, when with sleeping mechanism, the steady jitter comes at a prolonged time of about 118 s. The Inference 2.2 is verified. Moreover, from Table 8, it is easy to find out that the jitter of S-MAC with sleeping mechanism is obviously greater than that without sleeping mechanism which makes Inference 2.3 convinced.

                           
                              (2)
                              Influences of adaptive listening mechanism on the latency and stability

In this section, we scrutinize the performances of S-MAC under two different situations: with sleeping mechanism and with adaptive listening mechanism. Results are shown in Fig. 6
                        , Tables 9
                         and 10.
                        
                     


                        Fig. 6a and b depict the effect of the adaptive listening mechanism on latency. Without adaptive listening mechanism, the latency falls in the range from 0.3 ms to 2.4 ms. In contrast, the adaptive listening mechanism shortens the latency distributing between 0.3 ms and 1.8 ms. As described in Table 9, the average latency of adaptive listening is 1.4758 ms which is smaller than without adaptive listening, it further proves that the adaptive listening mechanism can effectively reduce the latency resulting from sleeping mechanism. This conclusion matches the Inference 3.1. In Fig. 6b, It is observed that the rank of time that nodes spend in reaching steady state is N0>N1>N2>N3 in descending order. It should be mentioned that N3 and N2 reach steady state at 105 s, however, N1 and N0 get steady at a longer time of 112 s.

From the comparison of Fig. 6c and d, in the case without adaptive listening mechanism, it takes the network about 118 s to obtain jitter stability; however with adaptive listening mechanism, the transition duration is shorten to about 113 s. As a result, we can draw such conclusion that the time which a network takes to reach steady state is reduced by adaptive listening mechanism. Moreover, Table 9 reveals that the duration that the nodes need to reach steady state increases with the increasing distance. Thus, the Inference 3.2 is verified. As can be seen in Fig. 6c and d, without adaptive listening mechanism, the jitter distributes between 0.2 ms and 2 ms, whereas with adaptive listening mechanism the jitter decreases to the range of 0.2–1.5 ms. Moreover, as shown in Table 10, the adaptive listening reduces the average jitter to about 0.32 ms compared to sleeping mechanism. Such result makes us confirm that the adaptive listening mechanism does contribute to a reduction of the jitter and consequently improvement in the network stability. Hence, the Inference 3.3 can be verified.

                           
                              (3)
                              Influences of dutyCycle on the latency and stability

In this part, based on S-MAC with adaptive listening mechanism, we employ four groups of dutyCycle values: 30, 40, 60 and 80, to analyze the influences of dutyCycle on the latency and stability. The simulation results are shown in Fig. 7
                         and Table 11
                        . In addition, Fig. 8
                         and Table 12
                         present jitter results.


                        Fig. 7 visually depicts that the network latency is getting smaller with the increasing dutyCycle. In Fig. 7a, when dutyCycle is set to 30, the network reaches the steady state at about 155 s. After that, the latency falls into the range from 0.3 ms to 3 ms. Fig. 7b shows that when dutyCycle is 40, the transitional duration of about 130 s is needed to make network become steady; and latency lies in the range from 0.3 ms to 2.5 ms at the steady state. All performances are improved when the dutyCycle value increases from 30 to 40. In Fig. 7c, when dutyCycle is increased to 60, the network reaches the steady state at about 112 s, and then stays between 0.2 ms and 1.8 ms. At last, when dutyCycle is 80, the network becomes steady at about 110 s. And the latency distributes between 0.2 ms and 1.6 ms at the steady state. In addition, Table 11 also provides us with sufficient confidence to make sure that the duration which the network takes to get steady is reduced with the increasing dutyCycle, so is the latency.

Our next objective is to check the jitter performance with different dutyCycle values. As depicted in Fig. 8, when dutyCycle is 30, the jitter of the network is between 0.3 ms and 2.5 ms. When the value of dutyCycle is set to 40, the jitter of the network is distributed in a smaller range of 0.3–2 ms. When the dutyCycle is 60, the jitter of network falls into a range of 0.2–1.5 ms. When the value of dutyCycle goes up to 80, the jitter further decreases to a range of about 0.2–1.3 ms. Table 12 summarizes the change of average jitter as a function of the dutyCycle value, it also presents a direct idea that the jitter decreases with the increase of dutyCycle. Therefore, drawn is such conclusion that the network jitter decreases with the increasing dutyCycle.

In general, taking all the analyses above into consideration, we do confirm that the latency and stability performances are improved by the increased dutyCycle value in a network using S-MAC. Thus, Inference 4 is completely verified.

In this section, we make a simulation in one larger scale cross-shape topography to verify the inferences in Section 4. All parameters are the same as what we mentioned in Table 6. The cross-shape topology is shown in Fig. 9
                        . It aims to simulate the scenario where the Sink is located at the center of the whole network and several nodes can directly transmit data to the Sink simultaneously. In this situation, there will be more chances to collide in the areas closer to the Sink.

There are 11 nodes in the scenario. N1, N2, N3 and N4 are source nodes that generate of the data packets destined to and all of them send data packets to the Sink node of N0. Other nodes are only in charge of forwarding data packets. The rank of hops from source nodes to the Sink node is N4>N3>N2>N1 in descending order. Similarly to Section 5.1, we present simulation results by use of three separate parts to verify our inferences. Based on the space limitation and the same conclusions we get in Section 5.1, we only highlight key points in the section. The results of latency are shown in Fig. 10
                         and Table 13
                        , the results of jitter are presented in Fig. 11
                         and Table 14
                        .

                           
                              (1)
                              Influences of sleeping mechanism on the latency and stability

In Fig. 10a, the latency of S-MAC without sleeping mechanism keeps tiny and distributes between 0.002 ms and 0.01 ms. The rank of latency is N4>N3>N2>N1 in descending order, just the exactly same as the rank of hop number from source nodes to Sink. In addition, the latency of each source node becomes steady very soon. As can be seen in Fig. 11a, the jitter of the whole network reaches stable state very quickly, afterwards keeps fairly tiny. The same conclusion can be drawn from Tables 13 and 14. All results match the Inference 1.1, 1.2 and 1.3.
                     

As depicted in Fig. 10b, the latency of S-MAC with sleeping mechanism lies in the range of 0.2–1.5 ms, much larger than without sleeping mechanism. It is the exact expectation of Inference 2.1. Specifically, N1 is the quickest node to reach steady state. Then N2 and N3 become steady in sequence. N4 is the last one to reach steady state. And the transition durations of all nodes are significantly prolonged compared to the scenario without sleeping mechanism. Comparing Fig. 11b with Fig. 11a, we observe that the jitter increases with the action of sleeping mechanism. The results can be observed in Tables 13 and 14. As a result, Inference 2.1, 2.2 and 2.3 are verified.

                           
                              (2)
                              Influences of adaptive-listening sleeping mechanism on the latency and stability

Next, the latency result of adaptive-listening sleeping is shown in Fig. 10c. Compared with Fig. 10b, the latency is obviously reduced, falling into the range of 0.2–1.3 ms. Also the transitional periods of all nodes to get steady significantly decreases. As shown in Fig. 11c, we can find out that adaptive listening mechanism helps in reducing the jitter from sleeping mechanism. And the same evidences that match the descriptions of Inference 3.1, 3.2 and 3.3 are given in Tables 13 and 14.

                           
                              (3)
                              Influences of dutyCycle on the latency and stability

Finally, we focus on the function of dutyCycle parameter. From the comparison of Fig. 10c and d, it is observed that the latency decreases with the increasing dutyCycle. Moreover, when dutyCycle is set to 80, the whole network takes about 120 s to reach stable state. It is apparent that the stable state comes much later when dutyCycle value is set to a smaller value of 60. As presented in Table 12, the average latency of each node throughout the whole network decreases as dutyCycle increases. As depicted in Fig. 11d, the jitter significantly decreases as dutyCycle increases. The same results are further confirmed in Table 13. Hence, all conclusions match Inference 4.

@&#CONCLUSION@&#

As one classic protocol for WSNs, S-MAC will definitely gain constant attentions and further studies. With the development of applications’ requirements in QoS, there is indeed a need to investigate the QoS performance of S-MAC. However, among the existing studies, there are only a few researches taking the latency and stability of S-MAC into consideration. The objective of this study is to explore the strategy to improve S-MAC's QoS based on the performance analysis and simulation verification.

Firstly, one state machines model describing each process and condition of states’ transitions is developed. Then, combining with the state machines model and the specific parameters of S-MAC, we present one probabilistic analytical model to analyze its latency and stability performances. Finally, we employ the parameters in IEEE 802.15.4 standard to implement simulation, and verify the analysis results of the probabilistic analytical model. Results show that the sleeping mechanism increases the latency and reduces the network stability. However, the adaptive listening mechanism can lead to an improvement in the latency and stability performances. In a network running S-MAC, dutyCycle is one of the key factors to influence the latency and stability performances. Therefore, according to the specific application, we can make further improvement by setting adaptive listening mechanism and appropriate value of dutyCycle. We are aware that it is essential to explore how to improve S-MAC's QoS in the networks with route fluctuations. In the future work, we will conduct further research about S-MAC in more complex large-scale networks with dynamic routes, to figure out the key factors impacting the latency and stability performances.

@&#ACKNOWLEDGMENT@&#

This paper is supported by the National Natural Science Foundation of P. R. China (No. 61203217, 61373017, 61502411, 61572260, 61572261), China Scholarship Council, Natural Science Foundation of Anhui Province (No. 1508085MF110), Scientific & Technological Research Project of Anhui Province (No. 1501031102), Scientific & Technological Support Project of Jiangsu Province (No. BE2015702), Jiangsu High Technology Research Key Laboratory for Wireless Sensor Networks (No. WSNLBKF201506), the Introduction and Innovation of International Advanced Agricultural Science and Technology Program (No.2015-Z44), the I-CORE Program of the Planning and Budgeting Committee and the Israel Science Foundation (No.152/11). The authors thank anonymous reviewers for their valuable comments and suggestions.

@&#REFERENCES@&#

