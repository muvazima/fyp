@&#MAIN-TITLE@&#On the importance of truly ontological distinctions for standardizations: A case study in the domain of telecommunications

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Standards must define its terms and concepts in a clear and unambiguous way.


                        
                        
                           
                           Standards can be written in informal specification or formal specification.


                        
                        
                           
                           Well-founded ontology languages provides resources for distinction of meanings.


                        
                        
                           
                           A Z notation formal specification is evaluated for a telecommunications case study.


                        
                        
                           
                           Results confirm that ontological distinctions are vital for unambiguous standards.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Standard

Formal specification

Ontology

OntoUML

ITU-T Recommendation G.805

@&#ABSTRACT@&#


               
               
                  Standards are documents that aim to define norms and common understanding of a subject by a group of people. In order to accomplish this purpose, these documents must define its terms and concepts in a clear and unambiguous way. Standards can be written in two different ways: by informal specification (e.g. natural language) or formal specification (e.g. math-based languages or diagrammatic ones). Remarkable papers have already shown how well-founded ontology languages provide resources for the specification's author to better distinguish concepts and relations meanings, resulting in a better specification. This paper has the objective to expose the importance of truly ontological distinctions for standardizations. To achieve this objective, we evaluate a math-based formal specification, in Z notation, using a well-founded ontology language for a telecommunications case study, the ITU-T Recommendation G.805. The results confirm that truly ontological distinctions are essential for clear and unambiguous specifications.
               
            

@&#INTRODUCTION@&#

According to the Oxford Dictionaries
                        1
                     
                     
                        1
                        
                           http://www.oxforddictionaries.com/us/definition/american_english/standard?q=standard.
                        Recurrent abbreviations: AF—Adaptation Function, AP—Access Point, CP—Connection Point, ITU—International Telecommunication Union, LC—Link Connection, OCL—Object Constraint Language, OWL—Web Ontology Language, TCP—Termination Connection Point, TPF—Transport Processing Function, TTF—Trail Termination Function, UML—Unified Modeling Language.
                     , a standard is “an idea or thing used as a measure, norm, or model in comparative evaluations”. That is, by means of comparative evaluations, a standard is something used by human beings to provide a unique or equal interpretation over something in order to interoperate, communicate or deal about this thing. Groups of people usually define standards in order to represent a community consensus. These standards are typically defined in informal specifications – like the ones in natural language (e.g. English or German) – or in formal specifications, which are the specifications that use mathematical-based notation (usually logic-based), in a diagrammatic form or not, to create descriptions in a more precise way.

As stated by Guizzardi [1], the suitability of a language to create specifications in a given domain depends on how “close” the structure of the specifications constructed using that language resemble the structure of the domain abstractions they are supposed to represent. Further, Guizzardi [1] also presents that the structure of a language can be accessed via the description of the specification of the conceptual model underlying the language, i.e., a description of the worldview embedded in the language's modeling primitives. In Milton & Kazmierczak [2], this is called the ontological metamodel of the language, or simply, the ontology of the language.

Natural languages do not have a well-defined underlying conceptual model, hence, these languages are notoriously ambiguous [3]. This happens because this category of languages evolved by cognitive and social demand through the centuries. The usage of natural languages in standardizations may lead to a document with a series of deficiencies, undermining its comprehension and use in interoperation, in decision-making, or in problem solutions. Fig. 1
                      presents the different types of ontological deficiencies that can occur in standards.

Ontological deficiencies can occur when the languages are built over a not-well specified underlying conceptual model (the language's metamodel). Apart from the natural languages, formal languages can (and usually do) suffer from such a problem, even when the language has a formalized underlying conceptual model. It must be made clear that the existence of ontological deficiencies in a language is not only related to the presence or absence of a formalization of the language's underlying conceptual model: it is a matter of “how well specified” this formalization is. A well-specified underlying conceptual model should rely on a sound well-founded ontology (sometimes called upper ontology), like the Unified Foundational Ontology (UFO) [1], the Bunge–Wand–Weber Ontology (BWW) [6], or the Descriptive Ontology for Linguistic and Cognitive Engineering (DOLCE) [7]. For instance, as results of ontological evaluations [1,5], deficiencies have already been identified in:
                        
                           •
                           diagrammatic languages, like the Unified Modeling Language (UML) [1,8];

computational ontology representation languages, like the Web Ontology Language (OWL) [9]
                           

enterprise or business languages, like the Reference Model of Open Distributed Processing (RM-ODP) [10], or the Enterprise Systems Interoperability (ESI) [11];

process modeling, like Petri Nets [12]; and

objective modeling languages, like i* [13].

Nevertheless, some authors (e.g., Bowen [14] and Spivey [15]) claim that because a formal specification is precise (i.e., has a mathematical definition), this means that even if a certain specification is wrong, it is easier to identify and to correct the problem. The same authors claim that, since an informal specification is often ambiguous, it is more difficult to detect errors and subsequently put them right. Additionally, just like stated by Bowen [14], with the use of formal specifications, it is possible to reason about a system and detect inconsistencies in it far more easily than in the case where only an informal specification is available. The use of such languages allows the designer to verify if the system will behave as expected. In general, with the use of formal languages, the likelihood of errors in a design is reduced and errors may be pinpointed more easily [14].

Formal specifications may suffer from the ontological deficiencies presented in Fig. 1 especially when dealing with real-world domain modeling instead of design modeling. Making an analogy to the Model Driven Architecture [16], formal specification languages are more error-prone when dealing with Computational Independent Model (CIM, or the “analysis model”) representation than when dealing with Platform Independent Model representation or Platform Specific Model representation. They are less error-prone because these two last models are an adaptation of the reality for the intended system – they are, respectively, the design model and the implementation itself – the CIM does not deal about systems, but about the system's real-world domain (e.g., a medical system is about diseases and treatments).

Using Guarino's classification of knowledge representation languages [17], math-based formal languages have primitives that can be categorized into the logical level (where primitives are propositions, predicates, logical functions, and operators) and into the epistemological level, which is the level of structure. Such categorization implies that these knowledge representation languages are neutral as concerns ontological choices. In fact, the ontological commitments of specifications that use math-based formal languages remain implicit, hidden in the mind of the specifications' authors [17], undermining comprehension and reuse. The ontological distinctions of real-world domain entities (e.g., rigidity, relational dependency) require a highly expressive language to be captured, thus, they are not captured by ontologically-neutral mathematical languages [1]. These expressive languages must be built with meta-properties that capture these ontological distinctions, and they must contain different constructs for different basic ontological categories [17]. Representation languages conforming to this view belong to Guarino's ontological level, which is the level of meaning [17]. Ontological level languages may commit to different ontological choices, resulting in different capabilities of identification and operation of ontological distinctions. However, the existence of such variation is interesting, as different domains may require different modeling approaches (e.g., a portion of a real-world domain may be represented statically or dynamically, depending on the modeling's objective and future application). In summary, especially in formalization of standards, the modeler must rely on an ontologically well-founded language instead of relying on a mathematical formal specification language. This happens because the latter does not provide mechanisms to deal with ontological issues in an appropriate way to represent complex domains.

According to Guizzardi et al. [9], the use of foundational concepts that take truly ontological issues seriously is becoming more and more accepted in the ontological engineering literature. In addition, the authors state that, in order to represent a complex domain, one should rely on engineering tools (e.g., design patterns), modeling languages, and methodologies that are based on well-founded ontological theories in the philosophical sense (see [18,19], for instance). Especially in complex domains – i.e., domains with complex concepts, relations, and constraints – and in domains with potentially serious risks of interoperability problems (the domain specified in the ITU-T Recommendation G.805 fits in both cases), a supporting ontology engineering approach should be able to:
                        
                           a.
                           allow the conceptual modelers and domain experts to be explicit, regarding their ontological commitments, which enables them to expose subtle distinctions between models to be integrated and to minimize the chances of running into a False Agreement Problem 
                              [20]
                           

support the user in justifying their modeling choices and providing a sound design rationale for choosing how the elements in the universe of discourse should be modeled in terms of language elements [9].

This marks a contrast to practically all languages used to develop formal specification, including Z, B, Vienna Development Method (VDM), and Alloy. As stated by Guizzardi et al. [9], although these languages provide the modeler with mechanisms for building mathematical structures, they offer no support neither for helping the modeler on choosing a particular structure to model elements of the subject domain nor for justifying the choice of a particular structure over another. Finally, once a particular structure is represented, the ontological commitments that are made remain, in the best case, tacit in the modelers' mind. In the worst case, even the modelers and domain experts remain oblivious to these commitments [9].

An example of an ontologically well-founded modeling language is the version of UML 2.0 proposed in Guizzardi's doctoral thesis [1] and, thereafter, dubbed OntoUML. OntoUML real-world semantics is defined in terms of several ontological theories, such as theory of parts, of wholes, types and instantiation, identity, dependencies, unity, etc. However, in order to be as explicit as possible regarding all the underlying subtleties of these theories (e.g., modal issues, different modes of predication, higher-order predication), this language strives for having its formal semantics defined in a logical system as expressively as possible [9].

OntoUML has been successfully employed in a number of industrial projects in several different domains, ranging from Petroleum and Gas [9] to News Information Management [21]. In fact, it has been considered as a possible candidate for contributing to the Object Management Group (OMG) Semantic Information Model Federation (SIMF) standardization request for proposal
                        2
                     
                     
                        2
                        
                           http://www.omgwiki.org/architecture-ecosystem.
                      after a significant number of successful applications in real-world engineering settings (e.g., [22,23]).

The main objective of this paper is to expose the importance of truly ontological distinctions for standardizations in the context of the aforementioned representation problem of formal mathematical specification languages. We achieve this objective by presenting and analyzing a case study in the domain of telecommunications. With the results, we intend to make standardizations' authors and organizations, as well as everyone that aims at developing a sound domain formalization, aware of the importance of the ontological distinctions. This case study consists in an evaluation of the accuracy of the ITU-T Recommendation G.805 Z specification—an outcome that can be defined as a consequent goal. To perform this evaluation, we use an OntoUML Ontology built over the Recommendation's natural language description [24], eliminating its previously identified ontological deficiencies [4].

The ITU-T Recommendation G.805 [25] (hereafter also called, indistinctly, ITU-T Rec. G.805, or simply ITU-T G.805) is a fundamental specification to various telecommunications network technologies since it presents a generic architecture for transport networks. The recommendation's importance is justified by the fact that the architecture there presented serves as the basis for several other ITU-T recommendations (e.g. G.803, G.872, I.326, G.8010/Y.1306 [26]). These recommendations standardize specific technological platforms (e.g., Ethernet and Optical Transport Network), network management and control (e.g. the Multiprotocol Label Switching Transport Profile and the Automatically Switched Optical Network), performance evaluation, and functional specification of equipment [25,26]. A visual schema of the importance of the ITU-T G.805 to other technologies is presented in Fig. 2
                     .

However, despite the visible importance of this recommendation, its document does not contemplate an adequate and precise information model for the represented domain concepts. As a result, its formalization has ambiguities, contradictions, representation gaps, and inconsistencies [4]. A recommendation with ontological deficiencies will propagate these problems to all other recommendations (specifications, standards, norms, etc.) that use it as a basis. When used as a reference for conceptual or computational applications, this deficient recommendation will possibly generate applications with failures and interoperation problems. Examples of applications based on the ITU-T G.805 can be found in [27–30]—apropos, the development of applications based on this recommendation also highlights the importance of the ITU-T G.805.

In order to perform the accuracy's evaluation of the ITU-T Recommendation G.805 Z specification, we verify systematically (by means of automated transformations and simulation) the allowed state of affairs of the Z specification and compare them to the allowed state of affairs of the ontology model. By doing the evaluation, we aim to show important domain knowledge losses in the Z specification and how the ontological distinctions (present in well-founded ontology languages) contribute to a better domain formalization, reducing semantic problems, and improving the standards' communication and interoperation capability.

The remainder of this article is organized as follows. Section 2 presents the domain knowledge necessary for the comprehension of the evaluation. The ITU-T Recommendation G.805, presented in Subsection 2.1, describes the generic Architectural Components of transport networks in two different forms: through a natural language description and through a formal specification available in the Z notation. The ITU-T G.805 formal specification in Z is discussed in Subsection 2.2. The ITU-T G.805 OntoUML Ontology model, here used to evaluate the recommendation's formal specification, is presented in Subsection 2.3. Section 3 presents the evaluation of the specification itself. Its Subsection 3.1 presents the evaluation settings for the case study reported in this paper. Subsection 3.2 presents the evaluation through three representative cases in the telecommunications field of knowledge. Section 4 presents conclusions and discusses some final considerations.

The case study on the telecommunications domain was chosen because of its representativeness for the semantic problem in standardizations caused by the lack of ontological distinctions in formal specifications. Considering that our objective is to present and discuss such problem with a case study, our intention in this section is not to teach the Transport Networks domain (a specific, technical and complex domain), but to introduce some of its main concepts and to present how the Z notation was used for the domain formalization. Thus, for instructive purposes, all the necessary domain descriptions are presented and discussed in Subsection 2.1 (for more complex concepts, when necessary, later information is provided in Section 3, during the examples' explanations). Nevertheless, the presented descriptions are kept here as simple as possible. Although not required for the comprehension of the work here presented, for a deeper discussion of the recommendation's concepts, please refer to the ITU-T G.805 itself [25] and to its ontological evaluation, presented in [4].

With respect to the case study of Section 3, it consists in the evaluation of the Z formalization of the ITU-T G.805 comparing its allowed state of affairs with the ones allowed by the ITU-T G.805 OntoUML Ontology. For the comprehension of such evaluation by the intended audience (standardization's authors and organizations, and everyone with the objective to develop a sound domain formalization), we need to introduce the Z and OntoUML languages and all their concepts that are used in the evaluation's examples. Then, the Z formalization language is presented in Subsection 2.2, while the OntoUML is presented in Subsection 2.3. In these subsections, the languages' relations with the ITU-T Recommendation G.805 are also introduced—i.e., the Z formalization of the recommendation and the ITU-T G.805 OntoUML reference model.

However, once again, considering that both languages are complex and that their complete presentation is out of scope, we have limited the descriptions of the languages. The provided descriptions contain the necessary information for everyone that is not a specialist to understand the languages' main issues and to understand the evaluation's examples—more complete details, when necessary, are provided in the examples' explanations in Section 3. The complete Z formalization of the ITU-T G.805 and all Z terminology used in the formalization of its generic model can be found, respectively, in the recommendation's first appendix and in its annex I.A [25]. We recommend the references [14] and [15] for a complete description of the Z notation. Regarding OntoUML, the user may refer to the Guizzardi's thesis [1], where he proposes a conceptually cleaner, semantically unambiguous and ontologically well-founded version of the UML class diagrams, later named OntoUML. A simplified and interesting introduction to OntoUML and its importance can be found in [31]. For later improvements on the language or on its foundations, we recommend his full list of publications
                        3
                     
                     
                        3
                        
                           http://inf.ufes.br/~gguizzardi/.
                     .

The ITU-T Recommendation G.805 [25] is an international standard defined by the International Telecommunication Union (ITU)—the United Nations specialized agency for information and communication technologies
                           4
                        
                        
                           4
                           
                              http://www.itu.int/.
                        . This standard defines a generic model to describe the architecture of transport networks. The independence of the architecture model from specific technologies is a powerful relevant feature. The model provides a means to describe different kinds of complex transport network. This feature turns the ITU-T G.805 the basis for other technology specific recommendations. In addition, this recommendation is used as a foundation for concepts in many academic and industrial works, e.g. the Network Description Language [30].

This functional and structural model proposed in ITU-T G.805 provides a high level of abstraction for the basic elements in a network and defines relevant concepts to simplify network descriptions. Two of its main concepts are the partitioning (some elements can be part of others or be composed of others of the same kind) and the layering (each technology is inside a Layer and different aspects of a complex network can be viewed from different Layers). These concepts allow a high degree of recursion (i.e., reuse of the common specification). Partitioning is important to describe routing aspects, administrative domain boundaries and the subnetwork (a recursive definition for a not well-known network, e.g. a cloud network).

Furthermore, the recommendation defines the client/server relationship between vertically adjacent layers, which is also a recursive paradigm because any particular server layer could itself be a client of another server layer [26]. The information flow between the two network ends (called source and sink ends) is performed through adjacent layers up to the real (i.e., physical) transmission at the lowest layer. These adjacent layers have a client/server relationship where a lower-level layer (server) provides the transport services to the higher-level layer (client). For instance, an example of client/server relationship occurs between the Optical Channel (OCh) and the Optical Multiplex Section (OMS) layers in Optical Transport Networks (OTN). It is important to observe that client/server relationship is not dependent on information flow directionality (uni or bi-directional). It only depends on the network layer organization (technology and protocols).

Besides the partitioning, the layering, and the client/server relationship, other important definitions are the Transport Processing Functions (TPFs) and the Reference Points. The TPFs are blocks that process information that pass through them by their input and output ports. There are two types of TPFs: Trail Termination Function (TTF) and Adaptation Function (AF). A Reference Point represents a binding between an input and an output of different instances of TPFs and other physical components. There are three types of Reference Points: Access Point (AP), Connection Point (CP), and Termination Connection Point (TCP).

The ITU-T G.805 contains, in addition to a textual description of the main concepts and its relationships (in natural language, available in English, French, Spanish, and Chinese
                           5
                        
                        
                           5
                           
                              http://www.itu.int/rec/T-REC-G.805-200003-I.
                        ), a visual language to represent the same concepts. An example of an abstract transport network using the visual language defined in the ITU-T G.805 is presented in Fig. 3
                        .

Despite the relative small number of Architectural Components defined in the ITU-T Recommendation G.805, the numerous possibilities of relation between them make it a large and complex knowledge domain—hence, telecommunications companies are prone to error when implementing this recommendation.

The ITU made use of the Z notation, a formal syntax to write specifications [32], to formalize the ITU-T Recommendation G.805—possibly aiming to formalize mathematically the standard's natural language description with the intention of eliminating ambiguities and interpretation mistakes. Unlike computational implementations, logical specifications propose to express only abstract properties, defining names of the system components and expressing the constraints between those components. Z uses set theory and mathematical logic to define rules that can be validated by mathematical reasoning.

An issue that has to be dealt when using only mathematical methods to represent complex domains (just like is the generic functional architecture of transport networks) is that large specifications very quickly become unmanageable and unreadable [14]. Hence, in addition to the basic mathematical notation, Z includes a schema notation to aid the structuring of specifications. This provides the framework for a textual combination of mathematics' sections (known as schemas) using schema operators [14].

The ITU-T G.805 specification uses Z schemas to deal with type definition, abstraction, specialization, and structures. Schemas are used to structure and compose descriptions, encapsulating them for reuse. Z schemas are composed of two parts: declaration and predicate. The former defines sets and variables, while the latter constrains their possible values. Types are also introduced as sets (e.g., the concept subNetworks in Fig. 4
                        ), free types, power sets, and composite types. Generic symbols denote mathematical properties of relations between components (i.e., binary, total function, partial injection). The schema AnyNetwork, illustrated in Fig. 4, is a set of subNetworks with connected linkEnds, generating the topology. It also has the concept of partitions, which are functions with subNetworks as domain and range. The predicate part of the schema presented in Fig. 4 indicates the acyclic condition of partitions. Acyclic is previously defined in the recommendation as a generic concept in order to be applied to any relation. I.e., according to the ITU-T G.805 [25], “for any relation R, Acyclic R is true if, x being related to y, y is never related to x through the transitive closure of the relation”. In other words, it avoids cycles between functional elements.

Natural language is used as part of the ITU-T G.805 formal specification to enhance the clarity of the Z notation. Nevertheless, this natural language description does not give any information about the semantics of each term; instead, it just provides textual descriptions of the Z formalizations.

According to Bowen [14], as well as the formal text, a Z specification should contain English (or some other natural language) to explain the mathematical description, although, ideally, the informal description should remain readable even if the formal sections are removed from the document. This redundancy can be seen as a first clue to realize that the Z notation does not provide all the necessary mechanisms to specify the real-world semantics of a domain. Bowen [14] claims that, if there is a conflict between the two descriptions, the mathematical formalization is the final arbiter, since it provides a more precise specification. However, it must be emphasized that this kind of conflict is a problem that should not occur in any formalizations, especially in standardizations. Moreover, we know empirically that, when dealing with (at least) large-sized formalizations, the occurrence of such conflicts is not a matter of “if”, but a matter of “when”. The ITU-T Recommendation G.805 is not an exception, as illustrated in Section 3.

Despite all relevant advantages of the formal specifications' usage, this kind of formalization may be loose, allowing multiple interpretations by stakeholders and, thus, allowing undesired different interpretations (and even implementations, considering a computational scenario). Like any other formalization language, such abstract and loose specifications can also be written in Z. One may create syntactically correct statements with unsound semantics [32], e.g., saying that a transport network (a type of telecommunications network) is a specialization of a highway (a main public road for terrestrial transportation)—although syntactically correct (i.e., with no grammatical errors), this statement makes no sense at all.

As the ITU-T G.805 is the basis for many network standards, it is essential for this recommendation to be clear, complete, and unambiguous. To accomplish this objective, highly-expressive languages should be used to create a strongly axiomatized ontology that approximate as well as possible to the ideal ontology of the domain—i.e., a Reference Model should be created [1,31].

The first attempt to create an ontology model for the ITU-T Recommendation G.805 was the Ontology for Optical Transport Networks (OOTN) [33], where an ITU-T G.805 and ITU-T G.872 OWL ontology was developed. Contrary to the languages used for ontology reference models, lightweight ontologies, like OWL, are not focused on knowledge representation adequacy, but are designed with the focus on guaranteeing desirable computational properties [31]. OWL ontologies are not an adequate language for ontology representation as it hides most of the concepts nuances, thus not eliminating ambiguities and other ontological deficiencies [9].

In order to have a better representation of the ITU-T Recommendation G.805 and to solve its ontological deficiencies, an ontology reference model was created using OntoUML, a well-founded ontology language [1]. A preliminary version of this Reference Model, is presented in Monteiro et al. [34], whereas its complete first version is fully presented in Barcelos et al. [24]. This first version of the Reference Model was successfully used in an ontological evaluation of the ITU-T G.805 [4], where several ontological deficiencies were identified—in fact, examples of the four ontological deficiencies presented in Fig. 1 were identified.

Since 2011, when the first version of the ontology reference model was made available, tools and methodologies for building OntoUML ontologies have evolved, allowing the definition of more precise and accurate representations. The ontology used as the basis for this case study is a second version of the ITU-T G.805 OntoUML Ontology, built with these newer technologies. In addition, in order to create an ontology reference model that correctly reflects the intended domain and that is able to be used by different agents to interoperate and in tasks such as communication, domain analysis and problem-solving, an ontology engineering methodology must be used [31]. The ITU-T G.805 OntoUML Ontology was developed using a rigid methodology, which is completely explained in Barcelos et al. [35].

The ontology modeling consists in the formalization, through diagrams, of the domain model. The ITU-T Rec. G.805 was built using the already mentioned OntoUML: an ontologically well-founded ontology modeling language based on UML 2.0. OntoUML represents ontological distinctions using a set of stereotypes for classes and relations. These stereotypes are based on ontological meta-properties from the Unified Modeling Language (UFO) [1,36], what allow the creation of consistent ontologies.

Examples of meta-properties are the identity principle and the rigidity. The identity principle is related to the nature of an object. For example, an individual of the class Student must also be an individual of the class Person. This happens because both entities have the same identity principle. However, an individual of the class Person can never be an individual of the class Car, as these entities have different identity principles. In OntoUML, the identity may be provided using the Kind stereotype. A Kind defines a uniform principle of identity, which is obeyed by all its instances; Subkinds are specializations of a Kind and inherit that principle of identity supplied by that unique subsuming Kind [1,37]. Both Kinds and Subkinds are rigid types.

The rigidity is the capacity of an entity to be part of a class maintaining its existence. For instance, John is an individual of the class Student but, in a given world, it can cease to be a Student and still exists as a Person. However, in any world John cannot cease to be a Person without ceasing to exist. Thus, Person is an example of a rigid class (e.g., represented by a Kind), while Student is an example of an anti-rigid class, which may be represented as a Role. The Role stereotype represents a number of properties that instances of a Kind have contingently and in a relational context [1,37].

Another important OntoUML stereotype is the Relator. Relators are individuals with the power of connecting entities (they are the objectification of a relational properties). As an example, an Enrollment is a Relator that connects a Student with an Educational Institution. Relators are existentially dependent on a multitude of individuals, thus, mediating them—such relation is represented in an OntoUML model via a mediation stereotype. Relators are the foundation and truthmakers of the so-called material relations in the way, for instance, that the marriage between John and Mary founds (is the truthmaker of) the relation is-married-to between John and Mary. Contrary to material relations, formal relations hold directly between entities without requiring any intervening (connecting) individual. Examples include the relations of existential dependence (the already cited mediation), parthood, and also the relation being-taller-than between two individuals [1,37].

When dealing on part–whole relations, OntoUML specifies four different stereotypes: namely, the subQuantityOf, subCollectionOf, memberOf, and componentOf – each one of these relations has different meta-properties that must be considered in a reference model. Among these, the componentOf is the most commonly represented in conceptual models, since most individuals represented in these models are functional complexes, which are the concepts that are related using it. Examples of this type of part–whole relation include: (a) my hand is part of my arm; (b) a car engine is part of a car; and (c) a heart is part of a circulatory system [1,38,39].

For an in depth presentation, formal characterization and empirical evidence for a number of the ontological categories underlying OntoUML, the reader is referred to [1]. As graphical languages are not always capable of correctly represent the domain, in the formalization of the ITU-T G.805 OntoUML model, Object Constraint Language (OCL) rules were also necessary for restrictions and derivations.

The Ontology Lightweight Editor (OLED)
                           6
                        
                        
                           6
                           
                              https://code.google.com/p/ontouml-lightweight-editor/.
                        , used in the development of the ITU-T G.805 Reference Model, is a full framework for development of OntoUML ontologies. It contains a validation environment, which provides syntactic and semantic validations. The latter is realized in two steps: the first step is an anti-pattern identification and treatment, and the second step is a visual validation through simulation, using an OntoUML to Alloy transformation [37]. Alloy [40] is a model-checking language that can be used to simulate possible state of affairs based on the formalization provided—this capability is also explored in the case study for simulating selected cases of the ITU-T G.805 Z formalization. The validation through Alloy simulations significantly improves the model quality because the user can make assertions and check if these are valid or not.

In this chapter, the objective of this paper is accomplished, which is to illustrate, by a real case study in the domain of telecommunications, how a well-founded ontology language, which allows the modeler to represent refined ontological distinctions, is better suited for standards than math-based formal specification languages. However, before presenting the three examples that compose the case study in Subsection 3.2, we first make available its settings and definitions in Subsection 3.1.

Regarding the case study's objective, we analyze the allowed state of affairs of the formal specification of the ITU-T Rec. G.805. Performing this analysis, we evaluate the Z specification trough three quality criteria: (i) precision, which measures if the specification has problems of under-constraining (i.e., if it allows not intended instantiations); (ii) coverage, which measures if the specification has problems of over-constraining (i.e., if it does not allow desired instantiations); and (iii) scope, which measures if, inside the case study examples, the specification formalizes every concept, property, and relationship required to explain the corresponding domain [41]. The specification's allowed state of affairs must be valid transport network specifications, which we verify that is not true for the examples, making explicit the deficiencies at the Z specification. With the deficiencies exposed, we illustrate how the ontological distinctions present in the ontology representation language used in the ITU-T G.805 OntoUML model can help to solve these problems and clarify the interpretation of the Recommendation.

The ITU-T G.805 OntoUML model is used in the evaluation because it was built according to a rigid ontology engineering methodology using a high expressive language that have already proved to be capable of identifying ontological distinctions (e.g., as can be seen in Guizzardi et al. [9]). In addition, the ITU-T G.805 OntoUML model has already been used with success in the evaluation of the natural language of the ITU-T Recommendation G.805, in Barcelos et al. [4]. However, it is important to mention that the evaluation here presented could also be performed using a different ontologically well-founded model of the ITU-T G.805. Different ontological languages may have different expressivities and, hence, may offer different capabilities to capture distinctions.

In order to systematize the case study evaluation, we make use of two transformations between languages: we first transform the Z specification schemas used in the examples in UML models, and then we transform them to Alloy in order to generate the allowed state of affairs by simulating these models. Alloy [40] is a logic language based on set theory, which is supported by an analyzer (known as Alloy Analyzer) that exhaustively generates possible instances for a given specification and also allows automatic checking of assertions' consistency [37]. With the use of Alloy, the modeler (i.e., the specification's author) is confronted with a visual representation of the specification's allowed state of affairs. According to Sales et al. [37], this enables modelers to detect unintended model instances and to take the proper measures to rectify the model. The two first examples here presented are compared using both transformations. In the third example, just the Z to UML transformation is performed.

The first transformation, applied in all examples of the case study, is a Z to UML transformation, developed by Bollin in [42]. Considering that formal specifications can play an important role during engineering activities, and also considering that they lack in visually appealing notations, what impedes their use and exchange among different stakeholders, Bollin [42] intends to enrich the specification by other views using UML diagrams. His approach combines existing mapping strategies, but additionally lets the assignment of methods rest on quality-related measures [42]. Rather than being applied to all the recommendation's Z specification, this transformation is applied only in the excerpts that are analyzed in the examples.

Once the excerpts are available in UML, in the first two examples they are transformed to Alloy using the tool called UML2Alloy, which implements the transformation defined by Anastasakis et al. in [43]. With such a transformation, by transforming UML models to Alloy and then making use of the Alloy Analyzer, the authors aim at identifying design faults within specifications—hence, this implementation is well-suited for the case study here presented, which has a related objective (however, for formal specifications). In accordance with the motivation of this work, Anastasakis et al. state, in [43], that implementing a system based on a faulty design requires additional cost and effort, hence that it is important to analyze the UML models at earlier stages of the software development life cycle [43]. Implementation details of the two transformations are not presented here in order to keep the definitions in a higher abstraction level. Nonetheless, more details of these two transformations can be found, when necessary, during the examples' descriptions.

Intending to have a representative case study, we have carefully chosen three particular cases of the ITU-T G.805 Z specification as examples to be presented. These examples were chosen because of two main reasons. The first one is that the examples are not affected by the usual information loss that happens in transformations between languages with different expressivities (i.e., the semantics are preserved during the transformation). The second reason is that the examples are about fundamental concepts in the transport network domain—hence, they must be well specified and their interpretation must be clear to eliminate problems of interoperation. The three cases are:
                           
                              a.
                              Layer Network and Architectural Components, about the composition of the Layer Networks by the different Architectural Components defined in the recommendation, and also about the important client/server relationship between vertically adjacent layers

Transport Processing Functions and their related Reference Points, about the allowed relations between the recommendation's “building blocks”; and

Connections' Directionalities, about the possibilities of information flow in a network.

All three examples are thoroughly detailed in the next subsection. Like mentioned in Section 2, we provide elucidations of the domain, of the Z language, and of the OntoUML language (as well as details about the examples and the transformations) as necessary. For a better understanding, the generated UML class diagrams are also presented.

As presented in Barcelos et al. [4], the natural language description of the ITU-T Recommendation G.805 has many cases of ontological deficiencies. In this subsection, we illustrate that its formal description in Z also has this problem. In fact, there are inconsistencies even between the natural language description and the Z notation formalization, as can be seen in the Reference Points' definition. The natural language description states “Reference points are formed by the binding between inputs and outputs of transport processing functions and/or transport entities”. However, it is clearly stated at the Z formalization that “the predicate part of ReferencePoint indicates that, inside a reference point, a point is either bound to another one or not, but cannot be bound to more than one point”. This is, on the one hand, according to the Z specification, there can be non-bound Reference Points; and, on the other hand, at the natural language descriptions, Reference Points are formed by bindings. Such contradictions are results from different specialists' points of views, or they are merely errors that happen when two languages (especially when based on different paradigms) are used for the same formalization.

The following three examples do not present contradictions between the two different specifications provided by the ITU-T G.805: they present the contradictions between the Recommendation's formal specification in Z and the domain's valid state of affairs (i.e., valid transport networks).

According to the natural language description of the ITU-T G.805, Architectural Components are “generic functionality which is independent of implementation technology”, and they “are defined by the function they perform in information processing terms or by the relationships they describe between other architectural components” [25]. In addition, it is stated that “the architectural components are associated together in particular ways to form the network elements from which real networks are constructed” [25].

Layer Networks, also according to the natural language description, are “defined by the complete set of access groups of the same type which may be associated for the purpose of transferring information” [25]. Access groups are the topological representation of Trail Termination Functions. Thus, “a separate, logically distinct layer network exists for each trail termination type” [25]. The recommendation's natural language specification also states that the structures within and between Layer Networks are described by the Topological Components. According to the layering principle, “a transport network can be decomposed into a number of independent transport layer networks with a client/server association between adjacent layer networks” [25].

In the third line of the TransportNetwork Z schema, presented at the ITU-T G.805 Z specification and shown in Fig. 5
                           , there is a function, called internal, which specifies a partial injection relation between Layer Network and Architectural Component. According to Bollin [42], a partial injection relation is transformed to UML as an association with multiplicity 0..1 in both sides. In the same schema, a binary relation between Layer Networks called clientsServers, can also be found. Applying the transformation, this relation is represented as a n×n auto-relationship.

The resulting UML model of the TransportNetwork Z schema, illustrated in Fig. 5, is presented in Fig. 6
                           .

The result of the first transformation (i.e., the UML model presented in Fig. 6), was then transformed to Alloy with the UML2Alloy tool. A valid state of affairs according to the UML model presented in Fig. 6, generated via Alloy simulation, is presented in Fig. 7
                           .

Analyzing the generated valid Z specification's state of affairs presented in Fig. 7, and comparing it to admissible transport networks according to the ITU-T G.805, three problems are identified. They are:
                              
                                 i.
                                 Cyclic client/server relationship

The client/server layer relationship is acyclic, i.e., a server layer can never be a client of one of its client layers. This problem has two occurrences in the state of affairs presented in Fig. 7. These occurrences are related to the following instances of LayerNetwork (LN, for short):
                                       
                                          •
                                          LN1 and LN3: LN1 is a server and a client layer of LN3 at the same time; and

LN0, LN3 and LN1: LN0 is client of LN3, which is client of LN1. However, LN1 is client of LN0, configuring a not allowed cycle.

Reflexive client/server relationship

The problem ii is a specific case of the problem i, and is related to the restriction that asserts that no network can be server or client of itself. Occurrences of this problem can be identified, in Fig. 7, in instances LayerNetwork0, LayerNetwork1, and LayerNetwork3.

Layer Networks without or with just a single Architectural Component:

According to the ITU-T Rec. G.805, “A layer network is defined by the complete set of access groups of the same type which may be associated for the purpose of transferring information”. Thus, in order to exist, a Layer must have at least two access groups, a specific type of Architectural Component. This assumption is not satisfied in Fig. 7, where all Layer Networks are examples of this problem: some layers exist without Architectural Components (LayerNetwork0, LayerNetwork1 and LayerNetwork2) and others exist with just one Architectural Component (LayerNetwork3 and LayerNetwork4).

We saw in Fig. 5 and in Fig. 6, respectively, the Z specification and its respective UML model that represents the relation between Layer Networks and Architectural Components. Differently from what is observed in the UML model, the ITU-T G.805 OntoUML Ontology represents this relation not by an association with the general Architectural Component class, but by means of compositions with specific Architectural Components' types. The ontology's diagram that relates the Layer Network concepts with Architectural Components is depicted in Fig. 8
                           . According to the ontology's diagram, every Layer Network must be composed of at least two TTFs. In addition, depending on its type (Path, Section or Physical Media Layer Network), Layers can be composed of other elements, like Link Connections, Matrices, Subnetworks or Physical Medias.

As a UML profile, OntoUML uses stereotypes that represent meta-properties to indicate the ontological distinctions between concepts. In a classic UML model, without the use of a foundational ontology to provide improved semantics to the UML constructs, there would be no difference between the classes (in Fig. 8) Layer Network and LC Composed Layer Network (LC is the abbreviation for Link Connection), in a sense that both are simply “classes”. In an OntoUML model, every different stereotype indicates entities with different ontological distinctions. For instance, we have, in Fig. 8, Kinds (rigid elements that provides identity principle), Subkinds (rigid and relationally independent specializations), Roles (anti-rigid and relational dependent elements), Categories (an element that aggregates rigid elements with different identity principle) and RoleMixins (an element that aggregates anti-rigid elements with different identity principle). Such differentiation enriches the diagram's semantics and improves its comprehension by the readers and its use in computational applications.

The diagram in Fig. 8 illustrates the Layer Networks' compositions, where its fundamental concepts are the part–whole relations. UML provides only two different types of part–whole relations: composite aggregation and simple aggregation. Both express an “is part of”/“is composed of” relationship, but only the former has the deletion propagation property that indicates that the deletion of an object of the whole also deletes all part objects aggregated to it [44]. As demonstrated by Guizzardi in many of his works (e.g. [1,38,39,45,46]), the part–whole relations provided in UML are ambiguous—in fact, this is a problem that exists in practically all conceptual modeling languages [46]. OntoUML provides four different types of part–whole relations, namely: componentOf, memberOf, subQuantityOf, and subCollectionOf [1]. Every one of these part–whole relations has different meta-properties (e.g. transitivity [45]). All these relations share the common meta-properties of non-reflexivity, anti-symmetry, non-transitivity, and weak supplementation (to be brief: according to the weak supplementation, every whole must be composed of at least two different parts). The componentOf relation, present in the diagram, is a part–whole relation between two complexes [1]. The essential meta-property indicates whether the part is essential to the whole, while the inseparable meta-property indicates whether the whole is essential to the part [1].

Now that we have visualized how the ITU-T G.805 OntoUML Ontology deals about the relation between Layer Networks and Architectural Components, we can find in the diagram illustrated in Fig. 9
                            how it represents the different possible client/server layer relationships.

As can be seen in Fig. 9, there are three different types of client/server layer relationships (represented as material relations), which are defined according to the relation between the different Layer Network's types (Path, Section, or Physical Media Layer Network). All these types of Layer Network are stereotyped as Subkinds and they are specializations of the Layer Network concept (not represented in Fig. 9). Note that the ITU-T Rec. G.805 specifies just one type of Layer Network, in a clear construct overload deficiency.

In OntoUML, there exist mainly two different types of associations: (i) the ones that depend just on intrinsic properties of elements, called Formal Relations, and (ii) the ones that depend on a truthmaker (an OntoUML class stereotyped as Relator) to exist, named material relations. The material relations that are present in Fig. 9 are derived from (i.e., have as Relators) the bindings between the transport processing functions that forms a Layer Network—to be precise, when a TTF that characterizes a layer is (indirectly) bound with a TTF that characterizes another Layer Network, then these Layer Networks have a client/server layer relationship.

Furthermore, due to its complexity, the client/server layer relationships cannot be simply diagrammatically represented (even using OntoUML): every client/server layer relationship has an associated OCL rule to formalize its occurrences in order to restrict undesired state of affairs. For example, at the ITU-T G.805 OntoUML Ontology, the cyclic relations between Layer Networks are avoided by OCL rules that state that no Layer Network can be directly or indirectly client and server of the same Layer Network.

The natural language description of the ITU-T G.805 defines two Transport Processing Functions: the Adaptation Function (AF) and the Trail Termination Function (TTF). As instance, for the source elements (one of the three existing element directionalities: source, sink or bidirectional), an AF “adapts the client layer network characteristic information into a form suitable for transport over a trail in the server layer network” [25] and a TTF “accepts adapted characteristic information from a client layer network at its input, adds information to allow the trail to be monitored and presents the characteristic information of the layer network at its output”[25]. TTFs and AFs are bound (along with other Architectural Components, like Matrices and Subnetworks) to form the Transport Networks. Reference Points are the Architectural Components that represent the bindings between these elements. Every binding is represented by a specific type of Reference Point, which is defined by the bound Architectural Components.


                           Fig. 10
                            shows the definitions of the TTFs (wrongly written as Tff in the Z specification) and of the AFs. Both are total injection relations (a partial injection that is also a total function) where the former occurs between exactly one Access Point (AP) to exactly one Connection Point (CP), and the latter occurs between a set of CPs to one AP.

Using the transformation defined by Bollin [42], the Z specification fragment of Fig. 10 is transformed to the UML diagram shown in Fig. 11
                           .

By transforming the model presented in Fig. 11 to Alloy, we can then simulate its allowed state of affairs. Fig. 12
                            represents a valid state of affairs, according to the Z specification presented in Fig. 10.

Analyzing the simulated state of affairs presented in Fig. 12, we can first see that there exists a cycle between the bound elements, what is conceptually incorrect (i.e., it represents an invalid Transport Network). At a high abstraction level, this cycle represents a reflexive client/server relationship (the same problem pointed in the first example of this section). This happens because “a separate, logically distinct layer network exists for each trail termination type” [25].

In addition, the relations between TTFs, AFs, and its binding Reference Points (APs and TCPs) are described with lack of details, allowing wrong interpretations by the reader. TTFs and AFs, which can be of types source, sink or bidirectional—this last one composed by one source element and one sink element – are, actually, bound via its inputs or outputs in different ways, and each one of these binding is represented by a specific type of Reference Point. The different types of Reference Points can be seen in Table 1
                            (for source and sink directionalities).

We can see in Table 1 that the binding of the output of a source AF with the input of a source TTF is represented by a Source AP. The formalization of this concept at the ITU-T G.805 OntoUML Ontology can be seen in Fig. 13
                           .

In the diagram presented in Fig. 13, we can see the central participation of the Source AP Binding concept, stereotyped as a Relator. This entity, which is not available in the Z specification, is the truthmaker of the relation between the input, the output, and the Reference Point in Fig. 13. Relators are, according to the OntoUML's foundational ontology, classified as Moments. Moments are existentially dependent on other individuals, named their bearers [1]. Therefore, by the use of this ontological distinction, the ontology can correctly represent the Reference Point's existential dependency on a bound pair of input and output.

A modeling pattern similar to the one found in Fig. 13 exists in the ITU-T G.805 OntoUML Ontology for the definition of each type of Reference Point. Note that cases of construct overload in the Reference Points' definition in the natural language of the ITU-T Rec. G.805 have already been identified in Barcelos et al. [4]. The Z formal specification reflects this problem. Hence, to eliminate this deficiency, there are more particular types of Reference Points in the ITU-T G.805 OntoUML Ontology than there are in the recommendation's natural language or formal definition.

According to the natural language description of the ITU-T G.805, “the transport entities provide transparent information transfer between layer network reference points” [25]. In addition, “two basic entities are distinguished according to whether the information transferred is monitored for integrity. These are termed connections and trails. Connections are further distinguished into network connections, subnetwork connections and link connections according to the topological component to which they belong” [25].

As can be seen in Fig. 14
                           , regarding the presented Z specification, the characterization of Unidirectional and Bidirectional Connections depends on the attribute direction present on all transport entities.

The direction attribute is defined in the Z specification as
                              
                                 
                                    Direction
                                    :
                                    :
                                    =
                                    source
                                    
                                       sink
                                    
                                    bid
                                    .
                                 
                              
                           
                        

Once again, it can be noted a problem in the Z formalization that may be caused by lack of attention: the specification uses the term “bid” for bidirectionality at the direction attribute's definition and the term “bidir” at the specification of the connection's directionality. To perform the transformation and the evaluations, we assume here the term “bidirectional” to solve the mentioned term definition problem.

In UML, a formal way to restrict permitted values for attributes is by defining OCL constraint rules. Applying the transformation available at Bollin's work [42], with the addition of OCL constraints, we could transform the Z specification presented in Fig. 14 to the UML class diagram presented in Fig. 15
                           .

Contrarily to the recommendations' natural language description, the Z specification does not make the association between the unidirectional and the bidirectional elements. The domain's correct conceptualization, represented in Fig. 16
                           , asserts that every bidirectional connection connects two distinct bidirectional Reference Points.

A bidirectional connection (represented in Fig. 16 by an orange double arrow) is composed by two unidirectional connections (represented with a single purple arrow). These unidirectional connections relate the unidirectional Reference Points (blue and red circles, representing the source and sink Reference Points, respectively) that compose the bidirectional Reference Point, which is connected by the bidirectional connection. In Fig. 16, the composition of elements is represented by spatial inclusion.

In order to formalize correctly the domain, the relation between the unidirectional and the bidirectional connections must be clearly defined. Taking as an example the Link Connection (LC), one of the specific types of Connections, observe in Fig. 17
                            how the ITU-T G.805 OntoUML Ontology represents the relations between unidirectional and bidirectional entities. In the ontology, the modeling pattern found in Fig. 17 is reproduced (with the necessary adaptations) for the definition of each type of Transport Entity.

To restrict the allowed state of affairs to the desirable ones, the ITU-T G.805 OntoUML Ontology combines the diagrammatical formalization with several OCL rules. These constraints include statements to guarantee, for example, that every LC connects Reference Points that bind different elements of the same Layer Network, that LCs are only available between Reference Points that are transitively related by bindings, and many others. None of these rules was presented at the Z formalization of the recommendation. The absence of rules may happen because even domain specialists have difficulty in formulating all necessary constraints about a complex domain. An expressive language, such as OntoUML, provides a rich semantics and a simple syntax, which enable the modeler to better perceive the concepts and their relations. Hence, by using an expressive language, the modeler can visualize undesirable worlds and, hence, constrain them. Moreover, an expressive language also leads the modeler to write consistent models by using ontological patterns [37,47].

Another relevant aspect is how the different languages represent attributes. In the Z notation, variables and its respective types express attributes—it also may contain mathematical statements expressed with predicates. OntoUML has a more complete and detailed coverage of data types and data structures [1,48]. While Z treats attributes using software-oriented infrastructure (just like other well-known representation languages, like UML and ER), OntoUML have ontological theories to deal with attributes and value spaces (quality structures). Several aspects involving quality universals (such as if it is measurable, perceivable or nominal) are considered in OntoUML, as well as all possible qualia of particular qualities.

@&#CONCLUSIONS@&#

Standards are important documents when dealing about consensus on a specific domain. Frequently written in two distinct forms – using informal or formal languages – these documents are norms for the industry. Particularly for the telecommunications' community, their importance is notorious. The complexity of the knowledge field is reflected in the large number of standards bodies (e.g., ITU-T, IEEE, TMF, and OIF, among others). In this field, a huge number of protocols, organized in multi-layered and multi-technology networks, can only be used when standardized. This vast number is due to the existence of a central necessity for interoperation between telecommunications equipment vendors (i.e., equipment must interoperate for an appropriate communication). Incompatibilities can result in loss of data or absence of communication and, in both cases, probable serious financial losses.

Considering the notorious ambiguity of the natural languages (i.e., the informal languages), math-based formal specification languages (e.g. Z, B, VDM, and Alloy) could be considered a possible solution for better specification. In fact, this kind of language is frequently used in standards in order to eliminate ambiguities and other deficiencies. However, this category of languages does not present to the modeler the adequate ontological distinctions for such purpose—thus generating a false sense of quality in standards and resulting in documents with weak semantics.

In the telecommunications knowledge field, the ITU-T Recommendation G.805 is an important standard that is the basis for many other technology specific recommendations. The ITU-T Rec. G.805 standardizes the generic functional architecture of transport networks by means of a natural language description and a Z notation formal specification. Despite its recognized importance, Barcelos et al. [4] have already demonstrated that its natural language description has problems of incompleteness, construct overload and construct excess, which are ontological deficiencies. In this paper, we evaluate the Z formal specification of the ITU-T Rec. G.805 using a well-founded ontology language. We illustrate, by this real case study in the domain of telecommunications, how ontology languages are better suited for standards than math-based formal specification languages.

The case study consists in the analysis of the allowed state of affairs of the recommendation's formal specification. The case study was chosen to be as representative as possible, involving the recommendation's main concepts. Previously available transformations, described in the literature, were used for a systematic comparison. Although the evaluated state of affairs must be valid transport network specifications, we verified that this is not true for the examples. Performing this analysis, we made explicit the deficiencies at the Z specification. With the deficiencies exposed, we illustrated how the ontological distinctions present in the well-founded ontology language used in the ITU-T G.805 OntoUML Ontology could help to solve these problems and clarify the interpretation of the recommendation.

Using the defined quality criteria, in all examples of the case study, we could observe precision problems in the formal specification—i.e., it allows instantiations that do not reflect the corresponding domain. This happens especially because of problems classified in the scope quality criteria: the Z specification does no use all necessary concepts, which are not represented because of the lack of ontological distinctions of the used formal language. Although we had not identified coverage problems, the existence of the precision and scope problems found undermine the formal specification's quality.

It can be concluded from the case study here presented that math-based formal languages are not completely suitable for complex domain representation, as they do not provide to the modeler ontological distinctions—these languages are oriented to formalize concepts' relations mathematically, they are not oriented to explicit their semantics and their relation' semantics. Hence, ontological deficiencies and unsoundness may occur on standards that rely on such type of language. As expected, the results here presented are in accordance with the results of Barcelos et al. [4].

Furthermore, the results from the case study highlight the importance of the ontological distinctions for standards, and demonstrate that the use of ontologically well-founded knowledge representation languages is essential to capture the domain distinctions, and, hence, to precisely define the document. Therefore, every standard, and particularly the ITU-T G.805, should formalize its concepts using an ontologically well-founded language instead of using math-based formal languages. This is especially relevant for standards that intend to specify real-world domains, technology independent domains, or high-level abstractions, rather than standards that aim at specifying design or computational aspects of a domain. A well-formalized standard eliminates ontological deficiencies, which increases the understanding about the information it provides and possibly extinguishes communication problems. Hence, it can accomplish its purpose: to be “an idea or thing used as a measure, norm, or model in comparative evaluations”
                     
                        7
                     
                     
                        7
                        
                           http://www.oxforddictionaries.com/us/definition/american_english/standard?q=standard.
                     . Moreover, this well formalized standard becomes, then, a Reference Model [31].

Once an ontology Reference Model is available, with the use of a rigid Ontology Engineering, like the one proposed by Guizzardi [31], semantically improved computational artifacts can be created based on this standard. I.e., from a conceptual model, through design decisions, a computational knowledge base could be created automatically or manually. An example of an automated transformation from a conceptual modeling language (OntoUML) to lightweight ontology languages (OWL and Semantic Web Rule Language—SWRL) can be found in [49].

However, it is important to mention that the Z notation, as well as other math-based formalization languages, is useful in many circumstances and must not be set aside, especially in software development contexts. They are particularly important when used considering its purposes and understanding its limitations. Examples where their use is helpful include design and validation—in fact, we take advantage of the simulation capabilities of Alloy (a formal specification language influenced by the Z notation) for visual validation of ontology models, e.g., by using the OntoUML to Alloy transformation [37,47].

@&#ACKNOWLEDGMENTS@&#

This research has been partially funded by the “Ontology-based Advisor for Network Management” Project (“Assessor Baseado em Ontologias para Gerenciamento de Redes”, in Portuguese). We thank the Padtec employees and all project members who have somehow contributed to the development of this work. This research has also been funded by FAPES/CNPq (PRONEX 52272362/11).

@&#REFERENCES@&#

