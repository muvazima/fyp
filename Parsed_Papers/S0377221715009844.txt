@&#MAIN-TITLE@&#A two-stage solution method for the annual dairy transportation problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose a simple two-stage solution method to solve the ADTP.


                        
                        
                           
                           We improve the state of the art method on the related DTP.


                        
                        
                           
                           On some cases solving the ADTP instead of the DTP can lead to significant savings.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Dairy transportation problem

Two-stage method

@&#ABSTRACT@&#


               
               
                  The annual dairy transportation problem involves designing the routes that collect milk from farms and deliver it to processing plants. The demands of these plants can change from one week to the next, but the collection is fixed by contract and must remain the same throughout the year. While the routes are currently designed using the historical average demand from the plants, we show that including the information about plants demands leads to significant savings. We propose a two-stage method based on an adaptive large neighborhood search (ALNS). The first phase solves the transportation problem and the second phase ensures that the optimization of plant assignment is performed. An additional analysis based on period clustering is conducted to speed up the resolution.
               
            

@&#INTRODUCTION@&#

In Canada, the dairy industry is ranked third in the agricultural sector (after grains & oilseeds and red meat). In 2011 the total net sales of dairy products generated $13.7 billion, representing 16.4% of the Canadian food and beverage sector. Most Canadian dairy farms are located in Ontario and Quebec. The dairy processing sector is concentrated: an 80 percent of the total raw milk produced in Canada is processed by three companies.

In Quebec, the Producteurs de Lait du Québec (PLQ), a coalition of dairy farmers, is responsible for planning the transportation of the milk produced in the province. The total annual cost of milk transportation from farms in Quebec to processing plants is more than $70 million. The problem considered in this paper is the design of the routes that collect milk from farms and deliver it to processing plants.

Currently the PLQ solves two distinct problems: an annual problem to design the routes that collect the milk and a weekly problem to assign the routes to the plants depending on the quantity of milk requested. Obviously the routes have a large impact on the weekly assignments. In this paper, we integrate the two problems by considering the varying demand throughout the year as we design the routes. To our knowledge, the only analogous contribution in the literature deals with the dairy transportation problem introduced by Lahrichi, Crainic, Gendreau, Rei, and Rousseau (2014). Although it handles the routing and the assignments to plants, it does not consider that the demand vary throughout the day therefore simplifying this aspect of the problem. In this paper, we aim to integrate this weekly variations to better plan the routes and the assignment of routes to plants. This problem will be referred to as the Annual dairy transportation problem in the remainder of the paper.

This paper makes the following two contributions. First, we introduce a new routing and assignment problem, the ADTP. Second we improve on the state-of-the-art method for the dairy transportation problem (DTP). Average savings with the new approach to solve the DTP are as considerable as 4 percent. We also show that using the weekly information during the annual design of routes leads to additional savings. The proposed method is very efficient for the ADTP and may be adapted to similar problems in other industries.

The remainder of this article is structured as follows. We first define the problem and present a review of related problems. We then describe the proposed two-stage adaptive large neighborhood search (ALNS) and finally discuss our numerical experiments and provide concluding remarks.

The problem introduced in this article differs in several ways from classical vehicle routing problems. The dairy transportation problem was introduced by Lahrichi et al. (2014). It involves the design of minimum-cost routes that collect milk from producers and deliver it to processing plants. The PLQ faces this problem every year when designing the contracts that determine which routes will be performed by each transporter.

We introduce the annual version of the dairy transportation problem (ADTP), which consists of including the variation of the demand. Indeed, during each week of the year, each plant specifies its demand for milk. The total quantity of milk that it receives at the end of the week must be close to the quantity requested (a tolerance is specified for each plant). This quantity is then split between each day (at least a predefined percentage of its weekly demand is assigned to ensure fairness between plants since most of them prefer to receive milk on weekdays rather than weekends.

The transportation problem is described as follows. We consider a heterogeneous fleet of capacitated vehicles located in various depots. Each producer is visited once by exactly one route that collects all its milk (split pickups are not allowed). The sequence of producers visited by a route has to be the same on every day of the planning horizon (fixed by contract), but the plants visited can change.

We present the mathematical model to formalize the problem the ADTP and the complicating constraints related to the weekly demand of the plants. Let F be the set of milk producers and P the set of processing plants. The set of weeks considered in the planning horizon is W. For each week w ∈ W, the demand of plant p ∈ P is 
                        
                           d
                           p
                           w
                        
                     . We denote by δp
                      the tolerance for plant p ∈ P, and ξp
                     % is the minimum percentage of its weekly demand that plant p ∈ P must receive every day. Let K be the heterogeneous fleet of capacitated vehicles; each vehicle k ∈ K has capacity qk
                     . Each producer f ∈ F produces a quantity mf
                      of milk. Let Dw
                      be the days of week w ∈ W; 
                        
                           D
                           =
                           
                              ⋃
                              
                                 w
                                 ∈
                                 W
                              
                           
                           
                              D
                              w
                           
                        
                      is the set of all the days of the planning horizon. O is the set of origin depots, and O′ is the set of destination depots. The starting and ending depots of vehicle k ∈ K are denoted o(k) and o′(k), and 
                        
                           N
                           =
                           F
                           ∪
                           O
                           ∪
                           
                              O
                              ′
                           
                        
                      is the set of all the nodes of the problem. The cost of the arc between nodes i and j is denoted c
                     
                        i, j
                     . We present this model to clearly state the problem that we are solving. To improve its readability, we do not linearize the nonlinear constraints (we do not solve this model directly).

The variables are as follows: 
                        
                           x
                           
                              i
                              ,
                              j
                           
                           k
                        
                      is a binary variable indicating whether or not vehicle k ∈ K goes from i ∈ O ∪ O′ ∪ F to j ∈ O ∪ O′ ∪ F. The delivery cost of route k ∈ K for day d ∈ D is represented by continuous variable 
                        
                           b
                           d
                           k
                        
                     . The quantity delivered by vehicle k ∈ K to plant p ∈ P on day d ∈ D is represented by variable 
                        
                           l
                           
                              p
                              ,
                              k
                           
                           d
                        
                     . Finally, the binary variable 
                        
                           y
                           
                              p
                              ,
                              d
                           
                           k
                        
                      indicates whether or not vehicle k ∈ K visits plant p ∈ P on day d ∈ D.

                        
                           (1)
                           
                              
                                 
                                    
                                    
                                       
                                          min
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                K
                                                ,
                                                i
                                                ∈
                                                
                                                   {
                                                   o
                                                   (
                                                   k
                                                   )
                                                   }
                                                
                                                ∪
                                                F
                                                ,
                                                j
                                                ∈
                                                F
                                             
                                          
                                          
                                             x
                                             
                                                i
                                                ,
                                                j
                                             
                                             k
                                          
                                          
                                             c
                                             
                                                i
                                                ,
                                                j
                                             
                                          
                                          
                                             |
                                             D
                                             |
                                          
                                          +
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                K
                                                ,
                                                d
                                                ∈
                                                D
                                             
                                          
                                          
                                             b
                                             d
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        
                     The objective function (1) minimizes the distance covered every day to collect and deliver the milk.

                        
                           (2)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                f
                                                ∈
                                                F
                                             
                                          
                                          
                                             x
                                             
                                                o
                                                (
                                                k
                                                )
                                                ,
                                                f
                                             
                                             k
                                          
                                          =
                                          1
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (3)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                N
                                             
                                          
                                          
                                             x
                                             
                                                i
                                                ,
                                                o
                                                (
                                                k
                                                )
                                             
                                             k
                                          
                                          =
                                          0
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                N
                                             
                                          
                                          
                                             x
                                             
                                                
                                                   o
                                                   ′
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                                ,
                                                i
                                             
                                             k
                                          
                                          =
                                          0
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                f
                                                ∈
                                                F
                                             
                                          
                                          
                                             x
                                             
                                                f
                                                ,
                                                
                                                   o
                                                   ′
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                             k
                                          
                                          =
                                          1
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                              
                           
                        
                     Constraint (2) ensures that each vehicle leaves its starting depot only once. Constraint (3) ensures that no vehicle enters its starting depot, and constraint (4) ensures that no vehicle leaves its ending depot. Constraint (5) forces the vehicles to end their routes at their ending depots.

                        
                           (6)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                K
                                                ,
                                                j
                                                ∈
                                                F
                                                ∪
                                                
                                                   {
                                                   
                                                      o
                                                      ′
                                                   
                                                   
                                                      (
                                                      k
                                                      )
                                                   
                                                   }
                                                
                                             
                                          
                                          
                                             x
                                             
                                                f
                                                ,
                                                j
                                             
                                             k
                                          
                                          =
                                          1
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          f
                                          ∈
                                          F
                                       
                                    
                                 
                              
                           
                        
                     Constraint (6) ensures that each producer is visited exactly once.

                        
                           (7)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                j
                                                ∈
                                                F
                                                ∪
                                                
                                                   {
                                                   
                                                      o
                                                      ′
                                                   
                                                   
                                                      (
                                                      k
                                                      )
                                                   
                                                   }
                                                
                                             
                                          
                                          
                                             x
                                             
                                                f
                                                ,
                                                j
                                             
                                             k
                                          
                                          =
                                          
                                             ∑
                                             
                                                j
                                                ∈
                                                F
                                                ∪
                                                
                                                   {
                                                   o
                                                   (
                                                   k
                                                   )
                                                   }
                                                
                                             
                                          
                                          
                                             x
                                             
                                                j
                                                ,
                                                f
                                             
                                             k
                                          
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          f
                                          ∈
                                          F
                                       
                                    
                                 
                              
                           
                        
                     Constraint (7) ensures vehicle flow conservation.

                        
                           (8)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                f
                                                ∈
                                                F
                                                ,
                                                j
                                                ∈
                                                F
                                                ∪
                                                
                                                   {
                                                   o
                                                   (
                                                   k
                                                   )
                                                   }
                                                
                                             
                                          
                                          
                                             x
                                             
                                                f
                                                ,
                                                j
                                             
                                             k
                                          
                                          
                                             m
                                             f
                                          
                                          ≤
                                          
                                             q
                                             k
                                          
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                              
                           
                        
                     Constraint (8) ensures that the vehicle capacities are respected.

                        
                           (9)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             y
                                             
                                                p
                                                ,
                                                d
                                             
                                             k
                                          
                                          =
                                          0
                                          ⇒
                                          
                                             l
                                             
                                                p
                                                ,
                                                k
                                             
                                             d
                                          
                                          =
                                          0
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          p
                                          ∈
                                          P
                                          ,
                                          d
                                          ∈
                                          D
                                          ,
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                              
                           
                        
                     Constraint (9) prevents a plant from receiving milk from a vehicle on a given day, if the vehicle does not visit that plant.

                        
                           (10)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                p
                                                ∈
                                                P
                                             
                                          
                                          
                                             l
                                             
                                                p
                                                ,
                                                k
                                             
                                             d
                                          
                                          =
                                          
                                             ∑
                                             
                                                f
                                                ∈
                                                F
                                                ,
                                                j
                                                ∈
                                                F
                                                ∪
                                                
                                                   {
                                                   
                                                      o
                                                      ′
                                                   
                                                   
                                                      (
                                                      k
                                                      )
                                                   
                                                   }
                                                
                                             
                                          
                                          
                                             x
                                             
                                                f
                                                ,
                                                j
                                             
                                             k
                                          
                                          
                                             m
                                             f
                                          
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          d
                                          ∈
                                          D
                                          ,
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                              
                           
                        
                     Constraint (10) ensures that all the collected milk is delivered.

                        
                           (11)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                K
                                             
                                          
                                          
                                             l
                                             
                                                p
                                                ,
                                                k
                                             
                                             d
                                          
                                          ≥
                                          
                                             ξ
                                             p
                                          
                                          
                                             ∑
                                             
                                                
                                                   d
                                                   ′
                                                
                                                ∈
                                                
                                                   D
                                                   w
                                                
                                                ,
                                                k
                                                ∈
                                                K
                                             
                                          
                                          
                                             l
                                             
                                                p
                                                ,
                                                k
                                             
                                             
                                                d
                                                ′
                                             
                                          
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          p
                                          ∈
                                          P
                                          ,
                                          w
                                          ∈
                                          W
                                          ,
                                          d
                                          ∈
                                          
                                             D
                                             w
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (12)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                d
                                                ∈
                                                
                                                   D
                                                   w
                                                
                                                ,
                                                k
                                                ∈
                                                K
                                             
                                          
                                          
                                             l
                                             
                                                p
                                                ,
                                                k
                                             
                                             d
                                          
                                          ≤
                                          
                                             (
                                             1
                                             +
                                             
                                                δ
                                                p
                                             
                                             )
                                          
                                          
                                             d
                                             p
                                             w
                                          
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          p
                                          ∈
                                          P
                                          ,
                                          w
                                          ∈
                                          W
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (13)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                d
                                                ∈
                                                
                                                   D
                                                   w
                                                
                                                ,
                                                k
                                                ∈
                                                K
                                             
                                          
                                          
                                             l
                                             
                                                p
                                                ,
                                                k
                                             
                                             d
                                          
                                          ≥
                                          
                                             (
                                             1
                                             −
                                             
                                                δ
                                                p
                                             
                                             )
                                          
                                          
                                             d
                                             p
                                             w
                                          
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          p
                                          ∈
                                          P
                                          ,
                                          w
                                          ∈
                                          W
                                       
                                    
                                 
                              
                           
                        
                     Constraint (11) ensures that each plant receives each day at least a given percentage of the weekly delivery. Constraints (12) and (13) ensure that the quantity received each week by each plant is sufficiently close to the quantity requested.

                        
                           (14)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                S
                                                ,
                                                j
                                                ∈
                                                S
                                             
                                          
                                          
                                             x
                                             
                                                i
                                                ,
                                                j
                                             
                                             k
                                          
                                          ≤
                                          
                                             |
                                             S
                                             |
                                          
                                          −
                                          1
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          k
                                          ∈
                                          K
                                          ,
                                          S
                                          ⊆
                                          F
                                          ∪
                                          O
                                          ∪
                                          
                                             O
                                             ′
                                          
                                          ,
                                          
                                             |
                                             S
                                             |
                                          
                                          ≥
                                          2
                                       
                                    
                                 
                              
                           
                        
                     Constraint (14) ensures subtour elimination.

                        
                           (15)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             b
                                             d
                                             k
                                          
                                          ≥
                                          
                                             x
                                             
                                                f
                                                ,
                                                
                                                   o
                                                   ′
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                             k
                                          
                                          
                                             y
                                             
                                                p
                                                ,
                                                d
                                             
                                             k
                                          
                                          
                                             (
                                             
                                                c
                                                
                                                   f
                                                   ,
                                                   p
                                                
                                             
                                             +
                                             
                                                c
                                                
                                                   p
                                                   ,
                                                   
                                                      o
                                                      ′
                                                   
                                                   
                                                      (
                                                      k
                                                      )
                                                   
                                                
                                             
                                             )
                                          
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          k
                                          ∈
                                          K
                                          ,
                                          d
                                          ∈
                                          D
                                          ,
                                          f
                                          ∈
                                          F
                                       
                                    
                                 
                              
                           
                        
                     Constraint (15) determines the delivery cost of each route on each day.

                        
                           (16)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             x
                                             
                                                i
                                                ,
                                                j
                                             
                                             k
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          k
                                          ∈
                                          K
                                          ,
                                          i
                                          ∈
                                          
                                             {
                                             o
                                             (
                                             k
                                             )
                                             }
                                          
                                          ∪
                                          F
                                          ,
                                          j
                                          ∈
                                          F
                                          ∪
                                          
                                             {
                                             
                                                o
                                                ′
                                             
                                             
                                                (
                                                k
                                                )
                                             
                                             }
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (17)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             y
                                             
                                                p
                                                ,
                                                d
                                             
                                             k
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          k
                                          ∈
                                          K
                                          ,
                                          p
                                          ∈
                                          P
                                          ,
                                          d
                                          ∈
                                          D
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (18)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             b
                                             d
                                             k
                                          
                                          ∈
                                          
                                             R
                                             +
                                          
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          k
                                          ∈
                                          K
                                          ,
                                          ∀
                                          d
                                          ∈
                                          D
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (19)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             l
                                             
                                                p
                                                ,
                                                k
                                             
                                             d
                                          
                                          ∈
                                          
                                             R
                                             +
                                          
                                       
                                    
                                    
                                    
                                       
                                          ∀
                                          k
                                          ∈
                                          K
                                          ,
                                          ∀
                                          d
                                          ∈
                                          D
                                          ,
                                          ∀
                                          p
                                          ∈
                                          P
                                       
                                    
                                 
                              
                           
                        
                     Constraints (16)–(19) are domain constraints.

We illustrate in Fig. 1
                      how the annual routes are constructed and how they are modified weekly. Fig. 1(a) shows a route starting at depot d
                     1, visiting farms f
                     1 through f
                     5 and delivering the milk collected in processing plant p
                     2. The daily cost of a route is the sum of (i) the distance covered by the vehicle during the collection (i.e, from d
                     1 to f
                     5), (ii) the distance between the last producer visited and the plant that is the farthest from the last producer (i.e, between f
                     5 and p
                     2), and (iii) the distance between that plant and the depot (i.e, between p
                     2 and d
                     1). The total cost of the solution is the sum of the daily route costs.


                     Fig. 1(b) illustrates the modification to the routes to better serve the demand of the plants. Due to the amount of milk requests by plants p
                     1 and p
                     2, the route has to be diverted to p
                     1. The sequence of producers stay identical in (a) and (b).

The literature on the DTP is rather limited.

Several studies have been carried out in the context of dairy transportation, most of which consider only a subproblem of the DTP: Sankaran and Ubgade (1994), Basnet, Foulds, and Wilson (1997), Caramia and Guerriero (2010), and Dooley, Parker, and Blair (2005) present heuristic methods for routing problems in which the assignment of the producer to the plant is not considered. Exact methods have been devised by Basnet, Foulds, and Wilson (1999) and Claassen and Hendricks (2007) where only one plant and uniform demand were considered respectively. Finally, Foulds and Wilson (1997) present heuristic methods for the assignment of producers to plants. They do not consider the routing: the cost of serving each plant from each farm is known beforehand. The reader may refer to Lahrichi et al. (2014) for an extensive literature on the DTP.

The closest version of the DTP is tackled by Lahrichi et al. (2014). They consider a similar version of the problem but the demands of the processing plants are fixed and cannot change on a daily basis. Their method is based on unified tabu search (UTS) (Cordeau, Laporte, & Mercier, 2001) and is called generalized UTS (GUTS). Experiments are performed on real-life instances with up to 226 customers. The authors compare the current practice, which assigns each producer to the same route and the same plant each year, with an approach that can modify these assignments. The problem is by nature stochastic (the amount to collect each week and the plant demands are not known a year in advance), but even solving the static case is challenging. Moreover, in the ADTP the plant demands change weekly, and this impacts the assignment of routes to plants. We must determine the assignment of the generated routes throughout the year, so the ADTP is much more difficult than the DTP.

Periodic vehicle routing problems occurring outside the dairy industry share some similarities with our problem. One should note however that the dairy transportation problem is much more complex to solve than other periodic perishable food transportation problems (see Golden, Assad, & Wasil, 2002; Tarantilis & Kiranoudos, 2001, 2007).

When focusing on the multi-commodity or one-commodity pickup and delivery features of the ADTP, similar problems occurs in forestry and car sharing. For instance, Flisberg, Lidén, and Rönnqvist (2009) investigate a vehicle routing problem in a forestry context. It is a variant of a multi-commodity pickup and delivery problem with a heterogeneous fleet. The planning horizon is one week, and on each day the quantity received by each demand node must lie within a predefined range. The authors present a two-stage solution method. The first stage creates transport nodes using linear programming, and the second stage designs the routes using a modified version of UTS. Instances with 26 to 665 supply nodes and 8 to 113 demand nodes are solved.

The single-vehicle version of the one-commodity pickup and delivery problem has been studied (Hernández-Pérez, Rodríguez-Martín, & Salazar-González, 2009; Hernández-Pérez & Salazar-González, 2004; Zhao, Li, Sun, & Mei, 2009), but the multivehicle version has received little attention. Dror, Fortin, and Roucairol (1998) study the problem of car redistribution in a car-sharing system. At any given time, some of the stations where the cars are parked may need more cars while others have too many. The objective is to redistribute the cars so as to meet the target level for each station while minimizing the cost of the redistribution. The authors present a mathematical model for the problem, but they fail to solve instances for which more than six cars need to be redistributed. The authors also propose a local-search approach based on constraint programming. It obtains good results in less than 5 minutes on the instances they were able to solve to optimality.

Finally, one common constraint in the ADTP is that some of the producers cannot be visited by heavily loaded vehicles, because of access constraints. This so-called draft limit has been defined in the context of maritime transportation by Rakke, Christiansen, Fagerholt, and Laporte (2012). They propose an exact method for the traveling salesman problem with draft limits.

The ADTP is thus different form these related problems, as the impact of the operational truck to mills assignment decisions when we perform the strategic routing decisions.

Addressing the ADTP is challenging and it cannot be directly solved in a reasonable time. Therefore, we develop a two-stage method. At the first stage we compute high-quality routes using ALNS for the DTP, which assumes that each plant has the same demand every day of the year and that a route can visit only one plant. At the second stage the resulting routes form an initial solution for a method that considers the assignment of the routes to the plants on a daily basis. We hope that the first-stage solution needs only minor changes to become a good solution for the ADTP.

The ALNS extends the large neighborhood search (LNS), introduced by Shaw (1998) in a constraint programming framework, to the vehicle routing problem with time windows (VRPTW). The ALNS includes an adaptive layer that enables some parameters to be automatically adjusted based on the performance of the heuristic in the most recent iterations. It was introduced by Pisinger and Ropke (2007) for a variety of vehicle routing problems including the pickup and delivery problem with time windows (Ropke & Pisinger, 2006). In their assessment of advanced heuristics for the large-scale VRPTW, Gendreau and Tarantilis (2010) observe that the ALNS has good effectiveness, efficiency, simplicity, and flexibility. These features make it a perfect candidate for the DTP. The reader interested in an extensive description of the ALNS and its application to combinatorial problems is referred to the review by Pisinger and Ropke (2010).


                     Algorithm 1 presents the general outline of the two-stage method. The DTP is first solved by the ALNS (line 1). At the second stage we compute the variations of the routes of the DTP (line 2) and select the best routes and assign them to the plants (line 3).
                  

We first recall the general principles of the ALNS and then present the ALNS used at the first stage to solve the DTP. We then discuss the method used to solve the ADTP.

The underlying principle of the ALNS is that we can improve a solution by iteratively partially destroying and repairing it. ALNS relies on heuristic operators that either destroy the solution (by removing producers from routes) or repair it (by reinserting producers). Algorithm 2
                         presents an overview of the ALNS.

The algorithm starts from an initial solution. At each iteration we select a destroy operator and a repair operator from a pool of operators and use them to create a new solution by modifying the current one (line 4). The selection is done via a roulette wheel algorithm, which uses a score computed for each operator based on its performance in the most recent iterations. See Ropke and Pisinger (2006) for a description of the operator-selection mechanism.

In our implementation the solution is destroyed by removing some of its producers (line 6), and the repair step reinserts them (line 7). If the resulting solution is worse than the current solution, an acceptance criterion (e.g., simulated annealing (Kirkpatrick, Gelatt, & Vecchi, 1983) or record-to-record travel (Dueck, 1993)) is used to determine whether the new solution should replace the current one (lines 12 and 13). We use simulated annealing for the acceptance criterion and when the termination criterion is satisfied, the algorithm returns the best solution encountered (line 17).

We now describe the objective function and operators used by the ALNS to solve the DTP.


                           Objective function
                        

One of the complications of the DTP is that there are bounds on the quantity of milk received by each plant. When we use a construction heuristic the solution may not satisfy these constraints until the last producers are inserted. To drive the search toward a feasible solution we penalize the plants that do not receive the desired quantity of milk. The objective function is therefore the sum of the distance traveled by the fleet plus the penalty due to undersupply or oversupply of milk at the plants.


                           Destroy operators
                        

We define three destroy operators described as follows:

                              
                                 1.
                                 
                                    Random removal: this operator selects at random the producers to be removed and helps to ensure proper diversification.


                                    Worst removal: this operator removes the nodes for which removal gives the greatest savings. After each removal, we reevaluate the savings due to the removal of the other nodes of the current route.


                                    History removal: this heuristic is an adaptation of the two history-removal heuristics proposed by Pisinger and Ropke (2007). The goal is to remove the nodes that are currently poorly placed in comparison with their locations in the best-known solutions. For the best fifty solutions, let 
                                       
                                          B
                                          
                                             p
                                             ,
                                             
                                                p
                                                ′
                                             
                                          
                                       
                                     be the number of times that node p is directly followed by node p′ in a route. Let 
                                       
                                          p
                                          −
                                          1
                                       
                                     be the predecessor of node p in the current solution and 
                                       
                                          p
                                          +
                                          1
                                       
                                     its successor. For each node p′ we define a score 
                                       
                                          S
                                          
                                             p
                                             ′
                                          
                                       
                                     as follows: 
                                       
                                          
                                             S
                                             
                                                p
                                                ′
                                             
                                          
                                          =
                                          
                                             B
                                             
                                                
                                                   p
                                                   ′
                                                
                                                −
                                                1
                                                ,
                                                
                                                   p
                                                   ′
                                                
                                             
                                          
                                          +
                                          
                                             B
                                             
                                                
                                                   p
                                                   ′
                                                
                                                ,
                                                
                                                   p
                                                   ′
                                                
                                                +
                                                1
                                             
                                          
                                       
                                    . Low values of 
                                       
                                          S
                                          
                                             p
                                             ′
                                          
                                       
                                     indicate nodes that are more likely to be removed.


                           Repair operators
                        

Two repair operators are used and are described as follows:

                              
                                 1.
                                 
                                    Best insertion: at every iteration, we consider every route to compute the best insertion cost for every node that is not yet inserted. The node for which insertion gives the smallest increase in the objective function is inserted in its best position.


                                    K-Regret: this heuristic relies on the notion of regret, which is used for example by Potvin and Rousseau (1993) for the VRPTW. Let U be the set of nodes not yet inserted, and for each i ∈ U let 
                                       
                                          Δ
                                          
                                             f
                                             i
                                             j
                                          
                                       
                                     be the cost of inserting i in the jth best route in its best position. At every iteration, we set 
                                       
                                          
                                             i
                                             *
                                          
                                          =
                                          a
                                          r
                                          g
                                          
                                             max
                                             
                                                i
                                                ∈
                                                U
                                             
                                          
                                          
                                             (
                                             
                                                ∑
                                                
                                                   j
                                                   =
                                                   2
                                                
                                                k
                                             
                                             Δ
                                             
                                                f
                                                i
                                                j
                                             
                                             −
                                             Δ
                                             
                                                f
                                                i
                                                1
                                             
                                             )
                                          
                                       
                                     and insert the corresponding node in its best position. The heuristic stops when U is empty or none of the remaining nodes can be inserted. We consider values of k in the range 2 to 5.

Our repair operators rely on an insertion heuristic, which must quickly compute whether or not the insertion of a node in a given position is consistent. We will not discuss vehicle capacity constraints, which can easily be verified in constant time, but we will explain how the draft limit can also be verified in constant time. This feasibility check is inspired by the forward-time slack approach (Savelsbergh, 1992) used to efficiently handle time-window constraints in the VRPTW. We first introduce some notation.

Let:

                              
                                 •
                                 
                                    Nk
                                    : be the set of nodes currently served by route k ∈ K;


                                    
                                       
                                          
                                             
                                                L
                                                ¯
                                             
                                             i
                                          
                                          =
                                          m
                                          a
                                          x
                                          
                                             (
                                             
                                                L
                                                i
                                             
                                             ,
                                             
                                                
                                                   L
                                                   ¯
                                                
                                                
                                                   s
                                                   (
                                                   i
                                                   )
                                                
                                             
                                             −
                                             
                                                m
                                                i
                                             
                                             )
                                          
                                       
                                    : be the propagated maximum load at node i where s(i) indicates the successor of i if it has one; otherwise 
                                       
                                          
                                             
                                                L
                                                ¯
                                             
                                             i
                                          
                                          =
                                          
                                             L
                                             i
                                          
                                       
                                    . 
                                       
                                          
                                             L
                                             ¯
                                          
                                          i
                                       
                                     is the maximum load that a vehicle entering node i can have without violating the draft limit on i or one of its successors;


                                    
                                       
                                          
                                             q
                                             ¯
                                          
                                          i
                                       
                                    : be the load of the vehicle visiting node i after its visit.

When we evaluate the insertion of a node j after node i and before node i′, we must check that 
                              
                                 
                                    
                                       q
                                       ¯
                                    
                                    i
                                 
                                 +
                                 
                                    m
                                    j
                                 
                                 ≤
                                 
                                    L
                                    j
                                 
                              
                            and 
                              
                                 
                                    
                                       q
                                       ¯
                                    
                                    i
                                 
                                 +
                                 
                                    l
                                    j
                                 
                                 +
                                 
                                    l
                                    i
                                 
                                 ≤
                                 
                                    
                                       L
                                       ¯
                                    
                                    
                                       i
                                       ′
                                    
                                 
                              
                           . When an insertion is actually performed, the values of 
                              
                                 L
                                 ¯
                              
                            and 
                              
                                 q
                                 ¯
                              
                            must be updated for all the nodes of the route; this update is done in linear time. Moreover, the number of actual insertions is likely to be much less than the number of insertion evaluations. Therefore, this method is more efficient than doing a linear-time check whenever we check the consistency of an insertion.

The set of routes produced by the DTP is consistent, in the sense that the producers visited by a given route are likely to be close to one another. However, the last producer visited has been selected to minimize the delivery cost to a given processing plant, that associated with the route in the DTP solution. In the ADTP a route is unlikely to visit the same plant every day of the year. Selecting a producer farther from the plant visited in the DTP solution but closer on average to the plants usually visited in the ADTP solution can lead to a more efficient solution. We therefore propose a method that explores the neighborhood of the DTP solution to identify a better solution for the ADTP.

We compute variations of each route of the DTP solution. For each producer served by the route, we build a route where this producer is the last served, and we carry out a local search to minimize the pickup cost of this route. We then use this pool of variations to form a set partitioning problem that selects the routes that give the most efficient solution.

Let’s introduce: Ω containing the DTP route variations, Ωk
                            containing the route variations performed by vehicle k ∈ K, cω
                            is the pickup cost of route ω ∈ Ω, 
                              
                                 c
                                 
                                    ω
                                 
                                 p
                              
                            is the cost for route ω ∈ Ω to visit plant p ∈ P, and qω
                            is the quantity of milk transported by route ω ∈ Ω. The binary variable zω
                            indicates whether or not route ω ∈ Ω is used in the solution.

                              
                                 (20)
                                 
                                    
                                       
                                          
                                          
                                             
                                                min
                                                
                                                   ∑
                                                   
                                                      ω
                                                      ∈
                                                      Ω
                                                   
                                                
                                                
                                                   z
                                                   ω
                                                
                                                
                                                   c
                                                   ω
                                                
                                                
                                                   |
                                                   D
                                                   |
                                                
                                                +
                                                
                                                   ∑
                                                   
                                                      k
                                                      ∈
                                                      K
                                                      ,
                                                      d
                                                      ∈
                                                      D
                                                   
                                                
                                                
                                                   b
                                                   d
                                                   k
                                                
                                             
                                          
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (21)
                                 
                                    
                                       
                                          
                                          
                                             
                                                s
                                                .
                                                t
                                                .
                                             
                                          
                                       
                                       
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      ω
                                                      ∈
                                                      
                                                         Ω
                                                         k
                                                      
                                                   
                                                
                                                
                                                   z
                                                   ω
                                                
                                                =
                                                1
                                             
                                          
                                          
                                          
                                             
                                                ∀
                                                k
                                                ∈
                                                K
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (22)
                                 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   l
                                                   
                                                      p
                                                      ,
                                                      ω
                                                   
                                                   d
                                                
                                                ≤
                                                
                                                   y
                                                   
                                                      p
                                                      ,
                                                      d
                                                   
                                                   ω
                                                
                                                
                                                   q
                                                   ω
                                                
                                             
                                          
                                          
                                          
                                             
                                                ∀
                                                d
                                                ∈
                                                D
                                                ,
                                                p
                                                ∈
                                                P
                                                ,
                                                ω
                                                ∈
                                                Ω
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (23)
                                 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      p
                                                      ∈
                                                      P
                                                   
                                                
                                                
                                                   l
                                                   
                                                      p
                                                      ,
                                                      ω
                                                   
                                                   d
                                                
                                                =
                                                
                                                   z
                                                   ω
                                                
                                                
                                                   q
                                                   ω
                                                
                                             
                                          
                                          
                                          
                                             
                                                ∀
                                                d
                                                ∈
                                                D
                                                ,
                                                ω
                                                ∈
                                                Ω
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (24)
                                 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      ω
                                                      ∈
                                                      Ω
                                                   
                                                
                                                
                                                   l
                                                   
                                                      p
                                                      ,
                                                      ω
                                                   
                                                   d
                                                
                                                ≥
                                                
                                                   ξ
                                                   p
                                                
                                                
                                                   ∑
                                                   
                                                      
                                                         d
                                                         ′
                                                      
                                                      ∈
                                                      
                                                         D
                                                         w
                                                      
                                                      ,
                                                      ω
                                                      ∈
                                                      Ω
                                                   
                                                
                                                
                                                   l
                                                   
                                                      p
                                                      ,
                                                      ω
                                                   
                                                   
                                                      d
                                                      ′
                                                   
                                                
                                             
                                          
                                          
                                          
                                             
                                                ∀
                                                p
                                                ∈
                                                P
                                                ,
                                                w
                                                ∈
                                                W
                                                ,
                                                d
                                                ∈
                                                
                                                   D
                                                   w
                                                
                                                ,
                                                ω
                                                ∈
                                                Ω
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (25)
                                 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      d
                                                      ∈
                                                      
                                                         D
                                                         w
                                                      
                                                      ,
                                                      ω
                                                      ∈
                                                      Ω
                                                   
                                                
                                                
                                                   l
                                                   
                                                      p
                                                      ,
                                                      ω
                                                   
                                                   d
                                                
                                                ≤
                                                
                                                   (
                                                   1
                                                   +
                                                   
                                                      δ
                                                      p
                                                   
                                                   )
                                                
                                                
                                                   d
                                                   p
                                                   w
                                                
                                             
                                          
                                          
                                          
                                             
                                                ∀
                                                p
                                                ∈
                                                P
                                                ,
                                                w
                                                ∈
                                                W
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (26)
                                 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      d
                                                      ∈
                                                      
                                                         D
                                                         w
                                                      
                                                      ,
                                                      ω
                                                      ∈
                                                      Ω
                                                   
                                                
                                                
                                                   l
                                                   
                                                      p
                                                      ,
                                                      ω
                                                   
                                                   d
                                                
                                                ≥
                                                
                                                   (
                                                   1
                                                   −
                                                   
                                                      δ
                                                      p
                                                   
                                                   )
                                                
                                                
                                                   d
                                                   p
                                                   w
                                                
                                             
                                          
                                          
                                          
                                             
                                                ∀
                                                p
                                                ∈
                                                P
                                                ,
                                                w
                                                ∈
                                                W
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (27)
                                 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   b
                                                   d
                                                   k
                                                
                                                ≥
                                                
                                                   ∑
                                                   
                                                      ω
                                                      ∈
                                                      
                                                         Ω
                                                         k
                                                      
                                                   
                                                
                                                
                                                   y
                                                   
                                                      p
                                                      ,
                                                      d
                                                   
                                                   ω
                                                
                                                
                                                   c
                                                   
                                                      ω
                                                   
                                                   p
                                                
                                             
                                          
                                          
                                          
                                             
                                                ∀
                                                k
                                                ∈
                                                K
                                                ,
                                                d
                                                ∈
                                                D
                                                ,
                                                p
                                                ∈
                                                P
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (28)
                                 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   z
                                                   ω
                                                
                                                ∈
                                                
                                                   {
                                                   0
                                                   ,
                                                   1
                                                   }
                                                
                                             
                                          
                                          
                                          
                                             
                                                ∀
                                                ω
                                                ∈
                                                Ω
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (29)
                                 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   y
                                                   
                                                      p
                                                      ,
                                                      d
                                                   
                                                   ω
                                                
                                                ∈
                                                
                                                   {
                                                   0
                                                   ,
                                                   1
                                                   }
                                                
                                             
                                          
                                          
                                          
                                             
                                                ∀
                                                ω
                                                ∈
                                                Ω
                                                ,
                                                p
                                                ∈
                                                P
                                                ,
                                                d
                                                ∈
                                                D
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (30)
                                 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   b
                                                   d
                                                   k
                                                
                                                ∈
                                                
                                                   R
                                                   +
                                                
                                             
                                          
                                          
                                          
                                             
                                                ∀
                                                k
                                                ∈
                                                K
                                                ,
                                                d
                                                ∈
                                                D
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

The objective function (20) minimizes the total cost of the routing plan. Constraint (21) ensures that each vehicle is assigned to a single route. Constraint (22) makes sure that a route delivers milk to a plant only if it visits that plant. Constraint (23) enforces that the selected routes deliver all the milk they have collected. Constraints (24)–(26) require that the quantities of milk received by the plants each day and each week are close to the requested quantities. Constraint (27) determines the delivery cost for each vehicle and each day. Finally, constraints (28)–(30) are domain constraints.

The ADTP is a large size problem: we must plan the routes for 365 days. For large real-life instances it takes more than 30 minutes to compute the optimal assignment of a predetermined set of routes to the plants for the 52 weeks of the year. However, many of the weeks have similar plant demands. We can therefore carry out the optimization for some representative weeks, associating to each week a weight that corresponds to the number of similar weeks it represents.

To determine how to group the weeks we solve a clustering problem. Our goal is to divide a set of |W| observations (the weeks) composed of |P| dimensions (the plants) into a given number of clusters, such that the intra-cluster sum of squared distances is minimized. To build these clusters we use the k-means algorithm of Hartigan and Wong (1979). Fig. 2
                         shows for a given instance the optimal objective value for different numbers of clusters. In our computational experiments we will study how the number of clusters impacts the cost of the solution.

In this section we present the results of several computational experiments. We first compare the ALNS developed to solve the DTP in the first stage with the state-of-the-art method, GUTS, developed by Lahrichi et al. (2014). We then investigate the impact of the number of clusters used. The experiments are performed on an Intel Xeon X5675 computer with 96 Go of RAM running Red Hat Enterprise Linux Server release 6.4. The code is written in C++ and compiled using g++ 4.7.2. Cplex 12.5.0.1 is used to solve the mixed integer problems, and it is restricted to a single thread.

Note that the total annual routing cost is around $70 million. Therefore, if 1% can be saved on every contract, it represents a total saving of $700,000 per year.
                     
                     
                  

Since no benchmark instances are available for the DTP, we built a set of 23 instances by adapting the multi-depot vehicle routing instances of Cordeau, Gendreau, and Laporte (1997). There are two classes of instances, A and B
                           
                              •
                              The instances of class A have a total vehicle capacity close to the actual milk production;

The instances of class B have more capacity but there is a much smaller tolerance on the difference between the milk quantity requested and the quantity received.

The reader may refer to Cordeau et al. (1997) for the details on the number of depots, vehicles and distances.

For these tests we used a 5 minute time limit imposed by the application. The planning is done once a year, but on a contract basis (not every contract is renewed at the same time). The planner has just one day in which to evaluate the various scenarios and cannot afford to spend more than 5 minutes solving each possibility.

The class-A results are presented in Table 1 and the class-B results are presented in Table 2. For instance 11 in class A neither GUTS nor ALNS finds a feasible solution; we omit this instance from Table 1.

The ALNS clearly outperforms GUTS on class A and is more efficient on class B, however the improvement is smaller.

In order to assess the efficiency of this approach, we evaluate two sets of instances are used. The first set of instance consists of 12 randomly generated instances for which various parameters were used. The second set of instances consists of 4 real life instances provided by the PLQ.

Once again no benchmark instances are available for the ADTP, we built a set of twelve instances to analyze the impact of the number of clusters.


                           Table 3 gives the characteristics of the twelve generated instances used for this experiment. We consider 100 producers and 2 depots. We use as many vehicles as needed to answer the demand, considering that only 80% of the capacity of the vehicles is used. We vary the number of plants and the variability of their demand, and how producers are located in the territory. Three distinct producers distributions are considered:

                              
                                 •
                                 R in which the producers are randomly distributed,

C where the producers are clustered and

RC where half the producers is randomly distributed while the other half is clustered.

We consider two settings for the variability of the demand of the plants:

                              
                                 •
                                 L, where the variability is low: demands follow a normal distribution with a standard deviation equal to 10% of the mean;

H, where the variability is high: standard deviation is equal to 100% of the mean.

As mentioned earlier in the paper, solving the problem for 365 days is very time consuming. Therefore we recommend clustering. As the number of clusters increases, we get the closer to the original problem specification, but each iteration will take longer. Given the same time limit, the milk collection is likely to be optimized faster when the number of clusters is smaller, although the demand considered during the optimization is not as close to the actual demand over the planning horizon. Note that the optimal solution of problems with differing numbers of clusters can be associated with the same set of pickup routes. In this case it is clearly better to solve the problem with as a few clusters as possible. Results will thus be presented with a varying number of clusters.

Using the results of the first phase that designs the routes to collect the milk, we compare the results obtained by the algorithm with a single cluster to those with 5, 10, 15 and 20 clusters. We have used running time as stopping criteria rather than the number of iterations. Indeed, the running time of each iteration grows with the number of clusters. Results are presented in Tables 4
                           .

It appears clearly that the best results are obtained when we use 5 clusters. Up to 6 percent savings can be obtained when comparing to the results obtained with one single cluster. We also note that on instances I-2, I-8 and I-9, the results with the single cluster are better but only by 1.00% in the worst case. One may note that results get worse when the number of clusters increases, this is due to allowed computing time which is set to 3 hours.

We evaluated the performance of our approach using real data provided by the PLQ to evaluate the savings when our two-phase approach is used to solve the ADTP. Table 5
                            gives the characteristics of the four instances used for these experiments.

The number of producers varies from 40 to 229, number of plants from 2 to 7, number of vehicles from 5 to 23 and number of depots from 2 to 11.

To evaluate our two-stage method, we first compare the solutions obtained by solving only the first stage. This is equivalent to comparing our method to the current practice, which solves the DTP although the vehicles are likely to serve more than one plant during the year. Table 6
                            gives the percentage improvement achieved by our method for 5 to 20 clusters. Depending on the instance and the number of clusters, the savings achieved by the second stage range from negligible to a few percentage points.

@&#CONCLUSIONS@&#

We have developed a two-stage method to solve a strategic vehicle routing problem arising in the dairy industry. We have shown that for some instances, considering the different demands of different weeks can lead to significant savings in comparison with the approach currently used. We have also shown that the first-stage ALNS for the DTP outperforms the GUTS algorithm previously proposed for this problem. Average savings with the new approach to solve the DTP are as considerable as 4 percent on 23 instances. We have also shown that using the weekly information during the annual design of routes leads to additional savings.

Extensions of this work could involve removing some or all of the simplifications that we have made. First, we have assumed that the cost of a route is linearly dependent on the number of kilometers traveled. The true cost is given by a nonlinear formula that depends on the total distance driven, the number of stops, the quantity of milk transported, and the number of kilometers below a predefined bound between two consecutive producers. Second, we have assumed that the production of each farm is constant throughout the year.

We have studied real-life instances. However, the position of the plant and the variability of the demand may have a large impact on the effectiveness of the second stage. The instances studied in this article may not have had sufficient variety. It would therefore be interesting to study real-life instances for which these parameters vary considerably to investigate their impact on the efficiency of the method. Finally, it would be interesting to integrate the computation of the variations and the set partitioning method within a heuristic framework that iteratively adjusts the allocation of customers to routes. We would thus no longer require each route to serve the customer that it serves in the DTP solution.

@&#ACKNOWLEDGMENT@&#

Work supported by Mitacs acceleration, Prompt Québec and Producteurs de Lait du Québec.

@&#REFERENCES@&#

