@&#MAIN-TITLE@&#Robust geometric ℓ
               
                  p
               -norm feature pooling for image classification and action recognition

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Consider the spatial distribution information in feature pooling


                        
                        
                           
                           Handle the misalignment problems in image classification and action recognition


                        
                        
                           
                           Improve the discrimination of feature pooling in visual recognition tasks


                        
                        
                           
                           Conduct extensive experiments on visual recognition tasks


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Feature pooling

Spatial distribution

Image classification

Action recognition

@&#ABSTRACT@&#


               
               
                  Feature pooling is a key component in modern visual classification system. However, the conventional two prevailing pooling techniques, namely average and max poolings, are not theoretically optimal, due to the unrecoverable loss of the spatial information during the statistical summarization and the underlying over-simplified assumption about the feature distribution. Addressing these issues, this paper proposes to generalize previous pooling methods toward a weighted ℓ
                     
                        p
                     -norm spatial pooling function tailored for class-specific feature spatial distribution. Optimizing such a pooling function toward discriminative class separability that is subject to a spatial smoothness constraint yields a so-called geometric ℓ
                     
                        p
                     -norm pooling (GLP) method. Furthermore, to handle the variation of object scale/position, which would affect not only the learning of discriminative pooling weights but also the applicability of the learned weights, we propose a simple yet effective self-alignment step during both learning and testing to adaptively adjust the pooling weights for individual images. Image segmentation and visual saliency map are utilized to construct a directed pixel adjacency graph. The discriminative pooling weights are diffused using random walk on the constructed graph and therefore the discriminative pooling weights are propagated onto the salient and foreground region. This leads to a robust version of GLP (RGLP) which can cope with the misalignment of object position and scale in images. Comprehensive experiments validate the effectiveness of the proposed GLP feature pooling framework. The proposed random walk based self-alignment step can effectively alleviate the image misalignment issue and further boost classification accuracy. State-of-the-art image classification and action recognition performances are attained on several benchmarks.
               
            

@&#INTRODUCTION@&#

Driven by the increasing amount of image and video data from internet or surveillance cameras, computer vision areas such as image classification [59,63], image re-ranking [58,60], and action recognition [45,61] have made significant progresses in recent years. As an important step in many practical visual recognition tasks, feature selection is of great interests to many researchers [32,33,34,44]. With the prevalence of the bag-of-words (BoW) model [31] for image classification or image-based action recognition [46], feature pooling has become a common practice for image/video feature representation and selection. For a typical image classification task, local image features are first extracted and quantized according to a visual dictionary. Then, the quantization indices of all the local features are summarized to form the global feature representation. A most common summarization method is to form the histogram, i.e. to sum up all the occurrences of each index throughout the entire image in an orderless manner. From the viewpoint of feature pooling [12,28], histogram representation is equivalent to average pooling. Despite its conceivable ease and compactness, average pooling is not immune to local feature noise.

To overcome this limitation, max pooling has been proposed [39,40]. Instead of performing averaging operation, max pooling adopts the element-wise maximum values of feature vectors over the whole image or the region of interest as the pooled features. Max pooling has proved to be more robust against local feature noise and can achieve better classification performance [55].

The simple assumption associated with average or max pooling, that the spatial distribution for each visual feature is uniform across different classes, causes severe information loss. However, spatial distribution of available features can be important for visual recognition. In the image classification task, if we assume the objects/regions in the images are roughly aligned, the image local features do possess class-specific discriminative geometric information, i.e. spatial distribution patterns. Fig. 1
                      illustrates such an issue for the average and max pooling methods. For images from a specific class, their visual features indexed by the same visual word often share similar spatial distribution. Besides, such class-specific spatial distributions are quite distinct from each other and encode discriminative information. However, as shown in this figure, neither average nor max pooling can capture the underlying difference and produce discriminative features due to the loss of spatial information in the pooling process.

Moreover, these two deterministic pooling methods either treat all the local features uniformly or only select the most salient one, and they both assume local features are distributed independently. By comparison, a discriminative pooling scheme is expected to be more flexible and able to capture the spatial correlation of features.

Motivated by the above considerations, we propose a so-called geometric ℓ
                     
                        p
                     -norm pooling method. Overall, the proposed method aims to learn a pooling function that implicitly encodes the class-specific geometric information of feature distribution in the form of weighted norm. This function is optimized toward best class separability, and in the meantime, it takes into account the following prior knowledge: nearby local image pixels often present similar characteristics, thus a regularization term is employed that encodes the correlation of local features.

Another inevitable problem for image classification or action recognition is the misalignment of image foreground, which is caused by large variation in object position/scale in each image. Misalignment of the foreground regions/objects in the training image degrades the effectiveness of the learned discriminative feature pooling function. Moreover, if the object position and scale of a testing image is not aligned with those of the training images, the learned common pooling function cannot capture the discriminative features for classification.

In this work, we propose a simple yet effective self-alignment method using the side information from visual saliency [21] and image segmentation [2], which can not only adaptively adjust the discriminative pooling weights for individual images during the training process, but also tailor the learned pooling function for individual testing images. A basic observation is that within a visually consistent (e.g., homogeneous color) image local region, pixels convey similar discriminative information, thus the pooling weights for the pixels within the same local region should be similar. Motivated by this observation, we construct an adjacency graph where nodes represent pixels and edges encode the spatial and color adjacency between pixels. Simple random walk algorithm can effectively and efficiently diffuse and adapt the learned common pooling function onto individual images based on the constructed adjacency graph. Further, visual saliency map is utilized to convert the adjacency graph into a directed graph and it can direct the pooling weights propagation toward the object (foreground) region of the given image. This random walk based self-alignment step results in an image-specific adaptive feature pooling scheme which is robust to image foreground misalignment.

Based on the GLP framework originally developed for image classification [10], we further consider the misalignment problem and propose the RGLP algorithm, which can be then applied to several applications including image classification and action recognition. To this aim, the contents of introduction, the experiments, and other related parts are extended correspondingly. Our experimental results show that the proposed robust geometric ℓ
                     
                        p
                     -norm pooling scheme is insensitive to median level image foreground misalignment. To sum up, the proposed robust geometric ℓ
                     
                        p
                     -norm pooling framework possesses the following advantages: 
                        
                           •
                           As the pooling function is learned by directly maximizing the class separability, it is designed to bear good discriminating capability.

The pooling function exactly corresponds to the class specific spatial pattern of each visual word, thus the spatial distribution information of visual words is properly utilized.

It models the correlations among local features and makes a more reasonable assumption about feature distribution. Also it can naturally unify the average and max pooling in a more flexible framework.

Using the simple random walk based self-alignment module, the learning pooling weights can be tailored to individual images according to the object (foreground) position and scale, as well as the image segmentation results. Therefore the object (foreground) misalignment problem is alleviated and the resulting image representation is more robust and the classification performance is further boosted.

The remainder of this paper is organized as follows. The related literature is discussed in Section 2. Section 3 then elaborates on the geometric ℓ
                     
                        p
                     -norm feature pooling method and provides the theoretical comparison with the max and average pooling methods. An iterative optimization procedure for learning the discriminative pooling weights is also presented. In Section 5 we introduce the random walk based self-alignment method to alleviate the image misalignment problem, which results in an image-specific adaptive pooling scheme. In Section 6 extensive experimental results on benchmarks are presented and conclusions are drawn in Section 7.

@&#RELATED WORK@&#

The idea of feature pooling originates in the research on complex cells in the striate cortex [20]. In [20], they proposed a model in which responses of simple cells are fed into higher complex cells through some pooling operations, thereby endowing the complex cells with phase-invariance. Inspired by this seminal work, several extensions in the direction of pooling mechanisms have been proposed afterwards and widely applied in recent computer recognition systems. In the neocognitron model [12], a sigmoid-like function is used to pool the input signals into a single output. And convolutional networks [28] take the average value of the input signals for subsequent processing. Besides, another type of pooling via max operation is used in the HMAX class of models [42]. Wang et al. [50] have achieved impressive classification performance on several benchmarks through such max pooling. As pointed out by Jarrett et al. [23], pooling type matters more for classification tasks than careful unsupervised pre-training of features. However, most of the studies on the pooling methods are purely empirical. Boureau et al. [6] provided a theoretical analysis on the binary feature pooling in the context of classification. Based on the i.i.d. Bernoulli distribution assumption, they demonstrated that several factors, including the pooling cardinality and the sparsity of the features, affect the discriminative powers of the pooling results. Neither the average nor max pooling can always outperform the other in classification problems, which raises a question: in which way can we optimally pool the features? The proposed work is dedicated to address this problem.

As the global feature pooling method cannot encode spatial information, Lazebnik et al. [27] extended the bag-of-words (BoW) model with spatial pyramid matching (SPM) kernel by exploiting the spatial information of location regions. However, object positions and scales in the image usually have large variations and therefore the fixed spatial pyramid feature pooling approach is not always optimal. In image/object classification, several adaptive feature pooling schemes have been studied to address this issue. Bosch et al. [5] define a region-of-interest in the image and take the maximum response over the coarse image grid as the output of the classifier. Chai et al. [7] proposed to segment the images into foreground and background within the co-segmentation scenario to improve image classification performance. Yakhnenko and Verbeek [52] used a latent-SVM model, which scores an image using all regions and associates each region with a latent variable indicating whether the region represents the object of interest. Recently, Sadeghi and Tappen [41] proposed a latent pyramidal region (LPR) representation for scene image classification and all possible sub-windows of the images are input into a latent SVM training procedure to make the classification robust to different spatial configurations of images. In contrast, our proposed method directly learns a discriminative pooling function toward maximal class separability. The learned pooling function is a function that takes pixel position as input, and therefore it can encode richer discriminative information than average/max pooling.

Visual saliency map [21] has been used as guidance for object recognition as it roughly reflects region-of-interest of the object in the image. Moosmann et al. [36] presented an approach for object category recognition using the visual attention technique. It combines saliency maps very closely with the extraction of random sub-windows for classification purpose. Khan et al. [43] used color to guide attention by means of a top-down category specific attention map. The color attention map is deployed to modulate more shape features from regions within an image that are likely to contain an object instance. Wang and Forsyth [49] jointly learn object attribute, label and visual attention by exploring multiple instance learning respectively to classify images by the highest scored image region. Kanan and Cottrell [25] attempted to solve image classification using a biologically-inspired model to approximate the human eye fixations. Chen et al. [8] derived a hierarchical matching kernel that utilizes side information for hierarchically partitioning the image into irregular feature pooling regions. Sharma et al. [47] treated the saliency maps as latent variables and allowed them to adapt to the image content to maximize the classification score. Inspired by a similar motivation, in this work we adopt the saliency map as prior knowledge on the object region of interest for adaptively adjusting the learned pooling function.

Meanwhile a body of works have been devoted to discriminative feature encoding [3,13,50,51,55] and dictionary learning [26,56], which consider the visual feature encoding setup and visual dictionary formation step in the BoW representation pipeline. Instead, our work focuses on the subsequent visual words spatial aggregation step and can be seamlessly combined with any dictionary formation method.

The pipeline of a popular image classification procedure is shown in Fig. 2
                     . As can be seen from the figure, a multi-stage image classification architecture generally comprises four components. After local features are extracted from the input image, many methods can be used to encode the feature vectors.

The first two building blocks are feature extraction and encoding. We assume that there are n
                     
                        c
                      image classes, and the class index set is denoted as 
                        C
                        =
                        {
                        1
                        ,
                        2
                        ,
                        ⋯
                        
                        ,
                        j
                        ,
                        ⋯
                        
                        ,
                        
                           
                              n
                           
                           
                              c
                           
                        
                        }
                     . Additionally, we denote the image index set for the j-th class as 
                        
                           
                              I
                           
                           
                              j
                           
                        
                      and the number of images in the j-th class is denoted as N
                     
                        j
                     . Denote the location index set as ℳ={1,2,…,m,⋯ ,M} in an image with M feature locations, e.g. distributed over a regular grid. For each image I, we extract a set of d-dimensional local descriptors, e.g. SIFT [35], from M densely arranged locations. Then each local descriptor x is encoded by a pre-trained visual word dictionary D ∈ℝ
                        d
                        ×K
                      (i.e., D
                     ={d
                     1,d
                     2,⋯ ,d
                     
                        K
                     }, where d
                     
                        k
                      is a d-dimensional vector denoted as visual word prototype) into a K-dimensional code vector u in a pre-defined feasible region 
                        F
                     :


                     
                        
                           (1)
                           
                              
                                 
                                    
                                       
                                          u
                                       
                                       =
                                       arg
                                       
                                          
                                             min
                                          
                                          
                                             
                                                u
                                             
                                          
                                       
                                       |
                                       |
                                       
                                          x
                                       
                                       −
                                       D
                                       
                                          u
                                       
                                       |
                                       
                                          
                                             |
                                          
                                          
                                             2
                                          
                                       
                                       ,
                                    
                                 
                                 
                                    
                                       s
                                       .
                                       t
                                       .
                                       
                                       
                                          u
                                       
                                       ∈
                                       F
                                       .
                                    
                                 
                              
                           
                        
                     
                  

When 
                        F
                      is constrained to the set of 0–1 vectors with only a single entry equal to 1, the encoding method is known as the hard assignment. When 
                        F
                      is defined as the set of neighboring bases of the local descriptor x, the resultant u could for example correspond to the recently proposed locality-constrained linear coding (LLC) [50] as follows: 
                        
                           (2)
                           
                              
                                 
                                    
                                       
                                          u
                                       
                                       =
                                       arg
                                       
                                          
                                             min
                                          
                                          
                                             
                                                u
                                             
                                          
                                       
                                       |
                                       |
                                       
                                          x
                                       
                                       −
                                       D
                                       
                                          u
                                       
                                       |
                                       
                                          
                                             |
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 
                                    
                                       s
                                       .
                                       t
                                       .
                                       
                                       
                                          u
                                       
                                       ∈
                                       F
                                       ,
                                       
                                       F
                                       =
                                       {
                                       
                                          u
                                       
                                       |
                                       |
                                       |
                                       
                                          u
                                       
                                       ∘
                                       
                                          e
                                       
                                       |
                                       
                                          
                                             |
                                          
                                          
                                             2
                                          
                                       
                                       ≤
                                       λ
                                       ,
                                       |
                                       |
                                       
                                          u
                                       
                                       |
                                       
                                          
                                             |
                                          
                                          
                                             1
                                          
                                       
                                       =
                                       1
                                       }
                                       ,
                                    
                                 
                              
                           
                        
                     where the entries of e are the Euclidean distances between x and the bases in D. Each element u
                     
                        k
                      of the code vector u indicates the local descriptor's response to the k-th visual word in the dictionary D. We aggregate the local descriptors' responses across all the M image locations into an M-dimensional response vector v
                     (k). Namely, each element 
                        
                           
                              v
                           
                           
                              m
                           
                           
                              (
                              k
                              )
                           
                        
                      of v
                     (k) represents the response of the local descriptor x
                     
                        m
                      at the m-th location to the k-th visual word.

After feature extraction and encoding, pooling operations are performed to aggregate the encoded response vectors into a statistic vector to represent the whole image or the region of interest. Finally the pooled feature vector is fed into a classifier, and then further assigned to one of the pre-defined classes. As illustrated in Fig. 2, this work is aimed at replacing the pooling component only rather than renewing the whole classification architecture. In fact, the proposed GLP and RGLP pooling scheme can be seamlessly combined with arbitrary types of local features, encoding methods and ultimate classifiers. In the following, we will first review the limitations of the conventional feature pooling schemes and then present the proposed GLP and RGLP pooling scheme.

Essentially, feature pooling is to map the response vector v
                        (k) into a statistic value f(v
                        (k)) via some spatial pooling operation f, where f(v
                        (k)) is used to summarize the joint distribution of visual features over the region of interest. Here, for notational simplicity, we drop the visual word index k for v
                        (k) in all the following sections.

In modern visual classification models, there are two widely used pooling operations, i.e. the average pooling [6] and the max pooling [39]. Average pooling adopts the scaled ℓ
                        1-norm of the response vector v as the statistic value and its operation can be expressed as 
                           
                              (3)
                              
                                 
                                    
                                       f
                                    
                                    
                                       a
                                    
                                 
                                 (
                                 
                                    v
                                 
                                 )
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       M
                                    
                                 
                                 |
                                 |
                                 
                                    v
                                 
                                 |
                                 
                                    
                                       |
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       M
                                    
                                 
                                 
                                    
                                       ∑
                                    
                                    
                                       m
                                       =
                                       1
                                    
                                    
                                       M
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       m
                                    
                                 
                                 .
                              
                           
                        
                     

Namely, average pooling sums up the response values throughout the entire image or the region of interest in an orderless manner. The pooling result is generally tolerant to object transformation. However, it is not selective or discriminative enough for the classification tasks [37].

Recently, inspired by the mechanism of the complex cells in the primary visual cortex, another pooling operation is proposed in [42]. The so-called max pooling operation computes the ℓ
                        
                           ∞
                        -norm of the response vector, 
                           
                              (4)
                              
                                 
                                    
                                       f
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 
                                    v
                                 
                                 )
                                 =
                                 |
                                 |
                                 
                                    v
                                 
                                 |
                                 
                                    
                                       |
                                    
                                    
                                       ∞
                                    
                                 
                                 =
                                 
                                    
                                       max
                                    
                                    
                                       m
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       m
                                    
                                 
                                 .
                              
                           
                        
                     

The max pooling only captures the most salient response over the whole image or the region of interest. Thus it is more selective than the average pooling and able to preserve invariance to object's spatial transformations [42].

However, both pooling methods discard the spatial distributions of local descriptors by either forcing the distribution to be uniform (the average pooling) or only adopting the most salient location (the max pooling). This information loss severely limits their discriminating capability and degrades the performance of the subsequent classification procedures.

In fact, each visual word may exhibit a certain geometric structure within individual classes since images for a certain classification task are often well roughly aligned or can be roughly aligned automatically by saliency or symmetry detection. These structures can contribute significantly to the discriminating capability once they are properly utilized as illustrated in Fig. 1. But once lost, this useful information could never be recovered in the subsequent process. Therefore if we can well model the spatial distribution for individual visual words, the obtained pooling results will be more discriminative than those from traditional pooling methods. In the case that the foreground regions of images are misaligned, we also provide a self-alignment module that adapts the common pooling function to individual images during both training and testing.

As discussed, both the average and max pooling discard the geometric information of local responses and thus only maintain limited discriminating capability. To overcome this inherent issue, we propose the so-called geometric ℓ
                        
                           p
                        -norm pooling (GLP) method. GLP is aimed at utilizing the spatial distribution patterns of responses across different classes and meanwhile preserving the selective capability and robustness as traditional pooling methods do.

More specifically, GLP process is defined as


                        
                           
                              (5)
                              
                                 
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                g
                                             
                                          
                                          (
                                          
                                             v
                                          
                                          ;
                                          
                                             w
                                          
                                          )
                                          =
                                          
                                             
                                                ∑
                                             
                                             
                                                m
                                                =
                                                1
                                             
                                             
                                                M
                                             
                                          
                                          
                                             
                                                w
                                             
                                             
                                                m
                                             
                                          
                                          
                                             
                                                v
                                             
                                             
                                                m
                                             
                                             
                                                p
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   w
                                                
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                
                                                   v
                                                
                                             
                                             
                                                p
                                             
                                          
                                          ,
                                       
                                    
                                    
                                       
                                          s
                                          .
                                          t
                                          .
                                          
                                          |
                                          |
                                          
                                             w
                                          
                                          |
                                          
                                             
                                                |
                                             
                                             
                                                2
                                             
                                          
                                          =
                                          1
                                          ,
                                          
                                          p
                                          ≥
                                          0
                                          ,
                                       
                                    
                                 
                              
                           
                        where v
                        
                           p
                         denotes the element-wise p-th power of the response vector v. The geometric coefficient w
                        
                           m
                         encodes the contribution of the m-th image location for the specific visual word. Different locations are given different weights during the pooling process. A special case is when all w
                        
                           m
                        s are of the same value, i.e., average pooling. The parameter p determines the selection policy for locations. Note that v has been normalized by its ℓ
                        2-norm, and all the elements of v are smaller than or equal to 1. Therefore, when the value of p equals 1, GLP aggregates the responses over the entire region uniformly without preference to any location (same to the average pooling). When p increases to a large value, the policy changes toward winner-take-all (same to the max pooling). Namely, the value of p tunes the pooling operation to transit from the average to the max pooling. Instead of fixing the value of p, GLP adopts a more flexible one and possesses better selective capability. Moreover, in GLP method, the values of w and p are visual-word-specific. This enables GLP to better capture geometric information of the descriptors based on the fact that different visual features usually follow different spatial distributions among different classes.

To determine the parameters in the GLP, we adopt the class separability as the objective function and optimize it with respect to both w and p. A practical choice of the class separability criterion is the marginal Fisher analysis (MFA) developed in [53]. MFA can well characterize the class separability of the data with more general distributions beyond the Gaussian distribution. More specifically, the objective function is to maximize the inter-class separability scaled by the within-class compactness of the pooled features, namely, 
                           
                              (6)
                              
                                 
                                    
                                       max
                                    
                                    
                                       
                                          w
                                       
                                       ,
                                       p
                                    
                                 
                                 {
                                 D
                                 (
                                 
                                    w
                                 
                                 ,
                                 p
                                 )
                                 :
                                 =
                                 
                                    
                                       
                                          
                                             
                                                w
                                             
                                          
                                          
                                             T
                                          
                                       
                                       
                                          
                                             S
                                          
                                          
                                             b
                                          
                                       
                                       (
                                       p
                                       )
                                       
                                          w
                                       
                                    
                                    
                                       
                                          
                                             
                                                w
                                             
                                          
                                          
                                             T
                                          
                                       
                                       
                                          
                                             S
                                          
                                          
                                             w
                                          
                                       
                                       (
                                       p
                                       )
                                       
                                          w
                                       
                                    
                                 
                                 }
                                 ,
                              
                           
                        where S
                        
                           b
                        (p) characterizes the separability of different classes and S
                        
                           w
                        (p) describes the within-class compactness [53]. These two matrices are computed as follows:


                        
                           
                              (7)
                              
                                 
                                    
                                       
                                          
                                             
                                                S
                                             
                                             
                                                b
                                             
                                          
                                          (
                                          p
                                          )
                                          =
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      
                                                         
                                                            k
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      −
                                                   
                                                
                                                (
                                                i
                                                )
                                             
                                          
                                          (
                                          
                                             
                                                
                                                   v
                                                
                                             
                                             
                                                i
                                             
                                             
                                                p
                                             
                                          
                                          −
                                          
                                             
                                                
                                                   v
                                                
                                             
                                             
                                                j
                                             
                                             
                                                p
                                             
                                          
                                          )
                                          
                                             
                                                (
                                                
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      p
                                                   
                                                
                                                −
                                                
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   
                                                      j
                                                   
                                                   
                                                      p
                                                   
                                                
                                                )
                                             
                                             
                                                T
                                             
                                          
                                          ,
                                       
                                       
                                       
                                    
                                    
                                       
                                          
                                             
                                                S
                                             
                                             
                                                w
                                             
                                          
                                          (
                                          p
                                          )
                                          =
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      
                                                         
                                                            k
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                   
                                                      +
                                                   
                                                
                                                (
                                                i
                                                )
                                             
                                          
                                          (
                                          
                                             
                                                
                                                   v
                                                
                                             
                                             
                                                i
                                             
                                             
                                                p
                                             
                                          
                                          −
                                          
                                             
                                                
                                                   v
                                                
                                             
                                             
                                                j
                                             
                                             
                                                p
                                             
                                          
                                          )
                                          
                                             
                                                (
                                                
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      p
                                                   
                                                
                                                −
                                                
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   
                                                      j
                                                   
                                                   
                                                      p
                                                   
                                                
                                                )
                                             
                                             
                                                T
                                             
                                          
                                          .
                                       
                                       
                                       
                                    
                                 
                              
                           
                        
                     

Here 
                           
                              
                                 N
                              
                              
                                 
                                    
                                       k
                                    
                                    
                                       1
                                    
                                 
                              
                              
                                 −
                              
                           
                           (
                           i
                           )
                         means the index set for the k
                        1 nearest neighbors of the response vector v
                        
                           i
                         from different classes with v
                        
                           i
                         and 
                           
                              
                                 N
                              
                              
                                 
                                    
                                       k
                                    
                                    
                                       2
                                    
                                 
                              
                              
                                 +
                              
                           
                           (
                           i
                           )
                         denotes the k
                        2 nearest neighbors of v
                        
                           i
                         from the same class as v
                        
                           i
                        .

The previous analysis in [6] is based on the strict assumption that the response values from M locations in v are independent. However, this assumption is often invalid for real-world data as also mentioned in [6], since image features at adjacent locations are often strongly correlated. Ignoring this important fact may lead to degraded capability in describing images. Although there exists little prior knowledge about the exact form of the spatial correlation, an intuitive and simple constraint/prior is that the geometric coefficients of Eq. (5) located at adjacent image locations should exhibit similar values. To incorporate this spatial smoothness constraint, we define a spatially smooth function as follows:
                           
                              (8)
                              
                                 S
                                 (
                                 
                                    w
                                 
                                 )
                                 =
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       ,
                                       j
                                       ∈
                                       M
                                       ,
                                       i
                                       ≠
                                       j
                                    
                                 
                                 
                                    
                                       s
                                    
                                    
                                       i
                                       j
                                    
                                    
                                       a
                                    
                                 
                                 ∥
                                 
                                    
                                       w
                                    
                                    
                                       i
                                    
                                 
                                 −
                                 
                                    
                                       w
                                    
                                    
                                       j
                                    
                                 
                                 
                                    
                                       ∥
                                    
                                    
                                       2
                                    
                                 
                                 .
                              
                           
                        
                     

The value of weight 
                           
                              
                                 s
                              
                              
                                 i
                                 j
                              
                              
                                 a
                              
                           
                         is set as 
                           
                              (9)
                              
                                 
                                    
                                       s
                                    
                                    
                                       i
                                       j
                                    
                                    
                                       a
                                    
                                 
                                 =
                                 exp
                                 (
                                 −
                                 
                                    
                                       ∥
                                       
                                          
                                             
                                                a
                                             
                                          
                                          
                                             i
                                          
                                       
                                       −
                                       
                                          
                                             
                                                a
                                             
                                          
                                          
                                             j
                                          
                                       
                                       
                                          
                                             ∥
                                          
                                          
                                             2
                                          
                                       
                                    
                                    
                                       2
                                       
                                          
                                             ρ
                                          
                                          
                                             a
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 )
                                 ,
                              
                           
                        where a
                        
                           i
                         denotes the spatial coordinates of the i-th feature location. Minimizing 
                           S
                           (
                           
                              w
                           
                           )
                         penalizes the case when adjacent elements of w show a large numerical gap. ρ
                        
                           a
                         is an empirical bandwidth parameter of the neighborhood and fixed as 0.5in all our experiments.

The smooth function can be further rewritten as 
                           
                              (10)
                              
                                 S
                                 (
                                 
                                    w
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          w
                                       
                                    
                                    
                                       T
                                    
                                 
                                 L
                                 
                                    w
                                 
                                 ,
                              
                           
                        where the Laplacian matrix L is defined as L
                        =
                        D
                        −
                        S. The similarity matrix S is defined as 
                           S
                           =
                           
                              
                                 [
                                 
                                    
                                       s
                                    
                                    
                                       i
                                       j
                                    
                                    
                                       a
                                    
                                 
                                 ]
                              
                              
                                 M
                                 ×
                                 M
                              
                           
                         and the degree matrix D is a diagonal matrix with 
                           
                              
                                 D
                              
                              
                                 i
                                 i
                              
                           
                           =
                           
                              
                                 ∑
                              
                              
                                 j
                              
                           
                           
                              
                                 S
                              
                              
                                 i
                                 j
                              
                           
                        .

We combine the objectives in both Eqs. (6) and (10) into a unified function with a weighting factor λ, namely, 
                           
                              (11)
                              
                                 
                                    
                                       
                                          
                                             
                                                max
                                             
                                             
                                                
                                                   w
                                                
                                                ,
                                                p
                                             
                                          
                                          Q
                                          (
                                          
                                             w
                                          
                                          ,
                                          p
                                          )
                                       
                                       
                                          :
                                          =
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         w
                                                      
                                                   
                                                   
                                                      T
                                                   
                                                
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      b
                                                   
                                                
                                                (
                                                p
                                                )
                                                
                                                   w
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         w
                                                      
                                                   
                                                   
                                                      T
                                                   
                                                
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      w
                                                   
                                                
                                                (
                                                p
                                                )
                                                
                                                   w
                                                
                                                +
                                                λ
                                                
                                                   
                                                      
                                                         w
                                                      
                                                   
                                                   
                                                      T
                                                   
                                                
                                                L
                                                
                                                   w
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         w
                                                      
                                                   
                                                   
                                                      T
                                                   
                                                
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      b
                                                   
                                                
                                                (
                                                p
                                                )
                                                
                                                   w
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         w
                                                      
                                                   
                                                   
                                                      T
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         ˜
                                                      
                                                   
                                                   
                                                      w
                                                   
                                                
                                                (
                                                p
                                                )
                                                
                                                   w
                                                
                                             
                                          
                                          ,
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    
                                       S
                                    
                                    ˜
                                 
                              
                              
                                 w
                              
                           
                         is the regularized within-class scatter matrix, i.e., 
                           
                              
                                 
                                    
                                       S
                                    
                                    ˜
                                 
                              
                              
                                 w
                              
                           
                           =
                           
                              
                                 S
                              
                              
                                 w
                              
                           
                           +
                           λ
                           L
                        .

Though the optimization problem in Eq. (11) is not convex overall, there exists a closed form solution for w when p is fixed. Thus, we solve this optimization problem iteratively by optimizing with respect to p and w alternatively.

Note that when optimizing for w, this objective function has the same form as the well-known linear discriminative analysis (LDA) [11] algorithm, where S
                        
                           b
                        (p) corresponds to the between-class scatter matrix and 
                           
                              
                                 
                                    
                                       S
                                    
                                    ˜
                                 
                              
                              
                                 w
                              
                           
                           (
                           p
                           )
                         corresponds to the within-class scatter matrix. Here we borrow the analytical solution from LDA to derive the optimal solution w
                        
                           opt
                         to Eq. (11) with p fixed:


                        
                           
                              (12)
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   w
                                                
                                             
                                             
                                                o
                                                p
                                                t
                                             
                                          
                                          =
                                          arg
                                          
                                             
                                                max
                                             
                                             
                                                
                                                   w
                                                
                                             
                                          
                                          γ
                                          ,
                                       
                                    
                                    
                                       
                                          s
                                          .
                                          t
                                          .
                                          
                                             
                                                S
                                             
                                             
                                                b
                                             
                                          
                                          
                                             w
                                          
                                          =
                                          γ
                                          
                                             
                                                
                                                   
                                                      S
                                                   
                                                   ˜
                                                
                                             
                                             
                                                w
                                             
                                          
                                          
                                             w
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                     

The solution w
                        
                           opt
                         is the eigenvector corresponding to the largest eigenvalue.

For the optimization of Eq. (11) with respect to p, there is no closed-form solution. We adopt a gradient ascent process to solve p in an iterative manner. Let y denote the pooled feature y =w
                        
                           T
                        
                        v
                        
                           p
                        , thus the between-class and within-class scatter matrices of the pooled features can be written as


                        
                           
                              (13)
                              
                                 
                                    
                                       
                                          
                                             
                                                Ŝ
                                             
                                             
                                                b
                                             
                                          
                                          (
                                          p
                                          )
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                
                                                   w
                                                
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                S
                                             
                                             
                                                b
                                             
                                          
                                          (
                                          p
                                          )
                                          
                                             w
                                          
                                       
                                    
                                    
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      
                                                         
                                                            k
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      −
                                                   
                                                
                                                (
                                                i
                                                )
                                             
                                          
                                          
                                             
                                                (
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      i
                                                   
                                                
                                                −
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      j
                                                   
                                                
                                                )
                                             
                                             
                                                2
                                             
                                          
                                          ,
                                       
                                    
                                    
                                       
                                          
                                             
                                                Ŝ
                                             
                                             
                                                w
                                             
                                          
                                          (
                                          p
                                          )
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                
                                                   w
                                                
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      S
                                                   
                                                   ˜
                                                
                                             
                                             
                                                w
                                             
                                          
                                          (
                                          p
                                          )
                                          
                                             w
                                          
                                       
                                    
                                    
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      
                                                         
                                                            k
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                   
                                                      +
                                                   
                                                
                                                (
                                                i
                                                )
                                             
                                          
                                          
                                             
                                                (
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      i
                                                   
                                                
                                                −
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      j
                                                   
                                                
                                                )
                                             
                                             
                                                2
                                             
                                          
                                          +
                                          λ
                                          
                                             
                                                
                                                   w
                                                
                                             
                                             
                                                T
                                             
                                          
                                          L
                                          
                                             w
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                     

We use 
                           α
                         to denote the Hadamard product 
                           α
                        
                        =lnv ∘v
                        
                           p
                        . Then the derivatives of 
                           
                              
                                 Ŝ
                              
                              
                                 b
                              
                           
                         and 
                           
                              
                                 Ŝ
                              
                              
                                 w
                              
                           
                         with respect to p are as follows: 
                           
                              (14)
                              
                                 
                                    
                                       
                                          
                                             
                                                ∂
                                             
                                             
                                                ∂
                                                p
                                             
                                          
                                          
                                             
                                                Ŝ
                                             
                                             
                                                b
                                             
                                          
                                          =
                                          2
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      
                                                         
                                                            k
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      −
                                                   
                                                
                                                (
                                                i
                                                )
                                             
                                          
                                          (
                                          
                                             
                                                y
                                             
                                             
                                                i
                                             
                                          
                                          −
                                          
                                             
                                                y
                                             
                                             
                                                j
                                             
                                          
                                          )
                                          
                                             
                                                
                                                   w
                                                
                                             
                                             
                                                T
                                             
                                          
                                          (
                                          
                                             
                                                
                                                   α
                                                
                                             
                                             
                                                i
                                             
                                          
                                          −
                                          
                                             
                                                
                                                   α
                                                
                                             
                                             
                                                j
                                             
                                          
                                          )
                                          ,
                                       
                                       
                                       
                                    
                                    
                                       
                                          
                                             
                                                ∂
                                             
                                             
                                                ∂
                                                p
                                             
                                          
                                          
                                             
                                                Ŝ
                                             
                                             
                                                w
                                             
                                          
                                          =
                                          2
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      
                                                         
                                                            k
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                   
                                                      +
                                                   
                                                
                                                (
                                                i
                                                )
                                             
                                          
                                          (
                                          
                                             
                                                y
                                             
                                             
                                                i
                                             
                                          
                                          −
                                          
                                             
                                                y
                                             
                                             
                                                j
                                             
                                          
                                          )
                                          
                                             
                                                
                                                   w
                                                
                                             
                                             
                                                T
                                             
                                          
                                          (
                                          
                                             
                                                
                                                   α
                                                
                                             
                                             
                                                i
                                             
                                          
                                          −
                                          
                                             
                                                
                                                   α
                                                
                                             
                                             
                                                j
                                             
                                          
                                          )
                                          .
                                       
                                       
                                       
                                    
                                 
                              
                           
                        
                     

The partial derivative of the objective function (Eq. (11)) with respect to p is 
                           
                              (15)
                              
                                 ∇
                                 p
                                 =
                                 
                                    
                                       ∂
                                    
                                    
                                       ∂
                                       p
                                    
                                 
                                 Q
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       
                                          
                                             Ŝ
                                          
                                          
                                             w
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 (
                                 
                                    
                                       ∂
                                       
                                          
                                             Ŝ
                                          
                                          
                                             w
                                          
                                       
                                    
                                    
                                       ∂
                                       p
                                    
                                 
                                 
                                    
                                       Ŝ
                                    
                                    
                                       b
                                    
                                 
                                 −
                                 
                                    
                                       ∂
                                       
                                          
                                             Ŝ
                                          
                                          
                                             b
                                          
                                       
                                    
                                    
                                       ∂
                                       p
                                    
                                 
                                 
                                    
                                       Ŝ
                                    
                                    
                                       w
                                    
                                 
                                 )
                                 .
                              
                           
                        
                     

Thus we update p along the gradient direction with step size β as follows:
                           
                              (16)
                              
                                 
                                    
                                       p
                                    
                                    
                                       (
                                       t
                                       +
                                       1
                                       )
                                    
                                 
                                 =
                                 
                                    
                                       p
                                    
                                    
                                       (
                                       t
                                       )
                                    
                                 
                                 +
                                 β
                                 ∇
                                 p
                                 .
                              
                           
                        
                     

The process will stop when the change of p is less than a pre-defined threshold θ
                        
                           p
                         or the number of iterations exceeds the permitted number N
                        
                           iter
                        . λ is set optimally via three-fold cross-validation on a randomly sampled subset from the training data.

It is notable that there exist variations of object position/scale in images. However, the discriminative pooling function derived above assumes roughly aligned object foreground region and is not adaptive to the change of object position/scale in testing images. It is therefore preferable to have an adaptive feature pooling scheme where the discriminative pooling function can be tailored for individual images and thus the pooled image representation is robust to misalignment of foreground. In the meantime, such an adjustment procedure should be simple and efficient. To this end, we have two key observations:


                     
                        
                           1.
                           Spatially nearby and appearance-consistent pixels within an image local region present similar representative and discriminative information, thus the pooling weights with respect to these pixels should be similar. If we construct a pixel adjacency graph and on this graph nearby pixels which belong to the same object region are linked, the learned common discriminative pooling weights (from the training images) could be propagated (diffused) according to this graph. Thus, the incorrect pooling weights on some misaligned image foreground region will be corrected by receiving messages propagated from adjacent nodes (pixels).

Visual saliency map [21] provides rough information about the locations of object region-of-interest [25,36,43,47,49]. This information can guide the pooling weights to propagate toward the object region-of-interest (foreground) from background area.

Our basic idea is that for each image, we can construct a directed pixel adjacency graph based on these two types of side information, i.e., pixel similarity and visual saliency. We can then perform message passing algorithm (e.g., random walk) on the graph and eventually propagate the discriminative pooling information onto foreground region of an individual image, and in the meantime, nearby appearance-consistent pixels will share similar pooling weights.

The pixel adjacency graph is constructed based on image over-segmentation results. The assumption is that within each image segment, pixels are consistent in appearance and therefore the pooling weights can be diffused among the pixels to achieve similar values. More specifically, given an image, we segment it into super-pixels using simple linear iterative clustering (SLIC) [2]. The advantages of SLIC over-segmentation algorithm are 1) its segmented regions well preserve the object boundaries; and 2) it is very flexible to change the granularity of the segmented regions. We define the segmented regions (super-pixels) for image I as 
                           {
                           
                              
                                 R
                              
                              
                                 1
                              
                           
                           ,
                           ⋯
                           
                           ,
                           
                              
                                 R
                              
                              
                                 N
                                 (
                                 I
                                 )
                              
                           
                           }
                        , where N(I) is the number of segmented regions. We denote by R(i) the region index which contains pixel i, where i ∈{1,⋯ ,M}. The parameter of the average size of segments is empirically set as 20 pixels. We define an undirected pixel adjacency graph 
                           
                              
                                 G
                              
                              
                                 U
                              
                           
                           =
                           
                              
                                 [
                                 
                                    
                                       p
                                    
                                    
                                       i
                                       j
                                    
                                    
                                       U
                                    
                                 
                                 ]
                              
                              
                                 i
                                 ,
                                 j
                                 =
                                 1
                                 ,
                                 ⋯
                                 
                                 ,
                                 M
                              
                           
                        , where each edge potential 
                           
                              
                                 p
                              
                              
                                 i
                                 j
                              
                              
                                 U
                              
                           
                         (between pixel i and j; the superscript U stands for undirected) is defined as
                           
                              (17)
                              
                                 
                                    
                                       p
                                    
                                    
                                       i
                                       j
                                    
                                    
                                       U
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                exp
                                                (
                                                −
                                                ∥
                                                
                                                   
                                                      
                                                         a
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                −
                                                
                                                   
                                                      
                                                         a
                                                      
                                                   
                                                   
                                                      j
                                                   
                                                
                                                
                                                   
                                                      ∥
                                                   
                                                   
                                                      2
                                                   
                                                   
                                                      2
                                                   
                                                
                                                )
                                                
                                                if
                                                R
                                                (
                                                i
                                                )
                                                =
                                                R
                                                (
                                                j
                                                )
                                                ,
                                             
                                          
                                          
                                             
                                                0
                                                ,
                                                
                                                
                                                
                                                else
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where a
                        
                           i
                         is the spatial 2D coordinate of pixel i.

To direct the pooling weights toward the object region-of-interest, we utilize side information which indicates the foreground region, i.e., visual saliency map. To this end, we compute visual saliency maps using three state-of-the-art methods including graph based visual saliency (GBVS) [18], spectral residual approach (SR) [19], and frequency tuned method (FT) [1]. We use the mean saliency map by averaging the saliency maps computed from these three methods. In practice, combining these three methods outperforms any single method for visual saliency detection [1,18,19]. We then define a directed pixel adjacency graph 
                           
                              
                                 G
                              
                              
                                 D
                              
                           
                           =
                           
                              
                                 [
                                 
                                    
                                       p
                                    
                                    
                                       i
                                       j
                                    
                                    
                                       D
                                    
                                 
                                 ]
                              
                              
                                 i
                                 ,
                                 j
                                 =
                                 1
                                 ,
                                 ⋯
                                 
                                 ,
                                 M
                              
                           
                        , where each edge potential 
                           
                              
                                 p
                              
                              
                                 i
                                 j
                              
                              
                                 D
                              
                           
                         (from pixel j to i; the superscript D stands for directed) is defined as
                           
                              (18)
                              
                                 
                                    
                                       p
                                    
                                    
                                       i
                                       j
                                    
                                    
                                       D
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                1
                                                ,
                                                
                                                if
                                                A
                                                (
                                                i
                                                )
                                                >
                                                0
                                                ,
                                             
                                          
                                          
                                             
                                                0
                                                ,
                                                
                                                else
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where A(i) denotes the saliency value on pixel i. We note that on this graph, edges are only linked toward nodes (pixels) that have non-zero saliency values (which indicate foreground region). This indicates that graph algorithms which are based on message passing cannot propagate message from foreground regions (non-zero saliency value) to background regions. This ensures no leakage of pooling weights to the background region. Namely, when we propagate the feature pooling weights on the graph, background regions will not receive pooling weights from adjacent pixels.

The final graph for propagating pooling weights is a directed graph G
                        =[p
                        
                           ij
                        ]
                           i,j
                           =1,⋯ ,M
                        , whose edge is a product of corresponding edge potential of G
                        
                           U
                         and G
                        
                           D
                        , 
                           
                              (19)
                              
                                 
                                    
                                       
                                          
                                             p
                                          
                                          
                                             i
                                             j
                                          
                                       
                                    
                                    ˜
                                 
                                 =
                                 
                                    
                                       p
                                    
                                    
                                       i
                                       j
                                    
                                    
                                       U
                                    
                                 
                                 ×
                                 
                                    
                                       p
                                    
                                    
                                       i
                                       j
                                    
                                    
                                       D
                                    
                                 
                                 .
                              
                           
                        
                     

We define by 
                           
                              P
                           
                           =
                           [
                           
                              
                                 
                                    
                                       p
                                    
                                    
                                       i
                                       j
                                    
                                 
                              
                              ˜
                           
                           ]
                         the row normalized adjacency matrix of 
                           [
                           
                              
                                 
                                    
                                       p
                                    
                                    
                                       i
                                       j
                                    
                                 
                              
                              ˜
                           
                           ]
                        . It can also be considered as a transition matrix for transforming the feature pooling weights vector w.

Using the constructed adjacency graph introduced above, we can propagate the discriminative common pooling weights by simple random walk. Assuming that the learned discriminative pooling weights vector is w, a single step (order-1 updating) random walk to diffuse the pooling weights vector w for image I is defined as 
                           
                              (20)
                              
                                 
                                    
                                       
                                          w
                                       
                                    
                                    
                                       (
                                       1
                                       )
                                    
                                 
                                 =
                                 
                                    P
                                 
                                 (
                                 I
                                 )
                                 
                                    w
                                 
                                 .
                              
                           
                        
                     

In some cases, a single step random walk is not sufficient to update the pooling weights vector to cope with image foreground misalignment and therefore multi-step (order-n updating) random walk updating is required, which is denoted as 
                           
                              (21)
                              
                                 
                                    
                                       
                                          w
                                       
                                    
                                    
                                       (
                                       n
                                       )
                                    
                                 
                                 =
                                 
                                    
                                       
                                          P
                                       
                                    
                                    
                                       (
                                       n
                                       )
                                    
                                 
                                 (
                                 I
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             (
                                             I
                                             )
                                             ⋯
                                             
                                                P
                                             
                                             (
                                             I
                                             )
                                          
                                          ︸
                                       
                                    
                                    
                                       n
                                    
                                 
                                 
                                    w
                                 
                                 .
                              
                           
                        
                     

Note that the transition matrix P(I) is neither aperiodic nor irreducible, thus the iterative process of Eq. (21) does not converge when n approaches infinity. The image-specific pooling weights vector w
                        (n) is then used as in Eq. (5) to replace w for pooling visual features of individual images. We also note that this proposed adaptive adjustment for pooling weights is very efficient. For K visual words undergoing order-n updating, only K
                        ×
                        n matrix multiplications are needed. In practice our Matlab implementation on a 3GHz duo-core PC with 4GB memory takes less than 0.1s for a single random walk update on an image. Fig. 3
                         visualizes the proposed method for adapting the learned common pooling weights to individual images.

The above mentioned random walk based self-alignment step is therefore utilized to adjust the pooling procedure for individual images (e.g., for image I
                        
                           i
                        , and we assume order-n update) in terms of Eq. (5) as


                        
                           
                              (22)
                              
                                 
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                r
                                                g
                                             
                                          
                                          (
                                          
                                             v
                                          
                                          ;
                                          
                                             w
                                          
                                          )
                                          =
                                          
                                             
                                                (
                                                
                                                   
                                                      
                                                         P
                                                      
                                                   
                                                   
                                                      (
                                                      n
                                                      )
                                                   
                                                
                                                (
                                                
                                                   
                                                      I
                                                   
                                                   
                                                      i
                                                   
                                                
                                                )
                                                
                                                   w
                                                
                                                )
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                
                                                   v
                                                
                                             
                                             
                                                p
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   w
                                                
                                             
                                             
                                                T
                                             
                                          
                                          (
                                          
                                             
                                                
                                                   P
                                                
                                             
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                          
                                             
                                                (
                                                
                                                   
                                                      I
                                                   
                                                   
                                                      i
                                                   
                                                
                                                )
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                
                                                   v
                                                
                                             
                                             
                                                p
                                             
                                          
                                          )
                                          ,
                                       
                                    
                                    
                                       
                                          s
                                          .
                                          t
                                          .
                                          |
                                          |
                                          
                                             w
                                          
                                          |
                                          
                                             
                                                |
                                             
                                             
                                                2
                                             
                                          
                                          =
                                          1
                                          ,
                                          p
                                          ≥
                                          0
                                          ,
                                       
                                    
                                 
                              
                           
                        where f
                        
                           rg
                         denotes robust geometric pooling. Here w is the target discriminative pooling weights shared by all images and P
                        (n)(I
                        
                           i
                        ) is an image specific random walk term computed from the corresponding side information (saliency map and over-segmentation) extracted for images I
                        
                           i
                        . From Eq. (22), we note that w is uncoupled with P
                        (n)(I
                        
                           i
                        )
                           T
                        
                        v
                        
                           p
                        . Therefore, we can denote 
                           
                              
                                 
                                    
                                       
                                          v
                                       
                                    
                                    ˜
                                 
                              
                              
                                 p
                              
                           
                           =
                           
                              
                                 
                                    P
                                 
                              
                              
                                 (
                                 n
                                 )
                              
                           
                           
                              
                                 (
                                 
                                    
                                       I
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                              
                                 T
                              
                           
                           
                              
                                 
                                    v
                                 
                              
                              
                                 p
                              
                           
                         and the derived objective function for discriminative pooling is still in the format of Eq. (11), with the scatter matrices S
                        
                           b
                         and S
                        
                           w
                         changed to 
                           
                              
                                 
                                    
                                       S
                                    
                                    ˜
                                 
                              
                              
                                 b
                              
                           
                         and 
                           
                              
                                 
                                    
                                       S
                                    
                                    ˜
                                 
                              
                              
                                 w
                              
                           
                         as


                        
                           
                              (23)
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      S
                                                   
                                                   ˜
                                                
                                             
                                             
                                                b
                                             
                                          
                                          (
                                          p
                                          )
                                          =
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      
                                                         
                                                            k
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      −
                                                   
                                                
                                                (
                                                i
                                                )
                                             
                                          
                                          (
                                          
                                             
                                                
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   ˜
                                                
                                             
                                             
                                                i
                                             
                                             
                                                p
                                             
                                          
                                          −
                                          
                                             
                                                
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   ˜
                                                
                                             
                                             
                                                j
                                             
                                             
                                                p
                                             
                                          
                                          )
                                          
                                             
                                                (
                                                
                                                   
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                         
                                                         ˜
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      p
                                                   
                                                
                                                −
                                                
                                                   
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                         
                                                         ˜
                                                      
                                                   
                                                   
                                                      j
                                                   
                                                   
                                                      p
                                                   
                                                
                                                )
                                             
                                             
                                                T
                                             
                                          
                                          ,
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      S
                                                   
                                                   ˜
                                                
                                             
                                             
                                                w
                                             
                                          
                                          (
                                          p
                                          )
                                          =
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      
                                                         
                                                            k
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                   
                                                      +
                                                   
                                                
                                                (
                                                i
                                                )
                                             
                                          
                                          (
                                          
                                             
                                                
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   ˜
                                                
                                             
                                             
                                                i
                                             
                                             
                                                p
                                             
                                          
                                          −
                                          
                                             
                                                
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   ˜
                                                
                                             
                                             
                                                j
                                             
                                             
                                                p
                                             
                                          
                                          )
                                          
                                             
                                                (
                                                
                                                   
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                         
                                                         ˜
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      p
                                                   
                                                
                                                −
                                                
                                                   
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                         
                                                         ˜
                                                      
                                                   
                                                   
                                                      j
                                                   
                                                   
                                                      p
                                                   
                                                
                                                )
                                             
                                             
                                                T
                                             
                                          
                                          ,
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   ˜
                                                
                                             
                                             
                                                i
                                             
                                             
                                                p
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   P
                                                
                                             
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                          
                                             
                                                (
                                                
                                                   
                                                      I
                                                   
                                                   
                                                      i
                                                   
                                                
                                                )
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                
                                                   v
                                                
                                             
                                             
                                                i
                                             
                                             
                                                p
                                             
                                          
                                          ,
                                          
                                          ∀
                                          i
                                          .
                                       
                                    
                                 
                              
                           
                        
                     

Therefore we can use the same optimization scheme in Section 4.3 to optimize with respect to w. To optimize with respect to p, the same scheme as in Section 4.3 is used with the derivatives of 
                           
                              
                                 Ŝ
                              
                              
                                 b
                              
                           
                         and 
                           
                              
                                 Ŝ
                              
                              
                                 w
                              
                           
                         being changed to


                        
                           
                              (24)
                              
                                 
                                    
                                       
                                          
                                             
                                                ∂
                                             
                                             
                                                ∂
                                                p
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      S
                                                   
                                                   ˜
                                                
                                             
                                             
                                                b
                                             
                                          
                                       
                                       
                                          =
                                       
                                       
                                          2
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      
                                                         
                                                            k
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      −
                                                   
                                                
                                                (
                                                i
                                                )
                                             
                                          
                                          (
                                          
                                             
                                                
                                                   
                                                      y
                                                   
                                                   ˜
                                                
                                             
                                             
                                                i
                                             
                                          
                                          −
                                          
                                             
                                                
                                                   
                                                      y
                                                   
                                                   ˜
                                                
                                             
                                             
                                                j
                                             
                                          
                                          )
                                          
                                             
                                                
                                                   w
                                                
                                             
                                             
                                                T
                                             
                                          
                                          (
                                          
                                             
                                                
                                                   P
                                                
                                             
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                          
                                             
                                                (
                                                
                                                   
                                                      I
                                                   
                                                   
                                                      i
                                                   
                                                
                                                )
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                
                                                   α
                                                
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          −
                                          
                                             
                                                
                                                   P
                                                
                                             
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                          
                                             
                                                (
                                                
                                                   
                                                      I
                                                   
                                                   
                                                      j
                                                   
                                                
                                                )
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                
                                                   α
                                                
                                             
                                             
                                                j
                                             
                                          
                                          )
                                          ,
                                       
                                    
                                    
                                       
                                          
                                             
                                                ∂
                                             
                                             
                                                ∂
                                                p
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      S
                                                   
                                                   ˜
                                                
                                             
                                             
                                                w
                                             
                                          
                                       
                                       
                                          =
                                       
                                       
                                          2
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      
                                                         
                                                            k
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                   
                                                      +
                                                   
                                                
                                                (
                                                i
                                                )
                                             
                                          
                                          (
                                          
                                             
                                                
                                                   
                                                      y
                                                   
                                                   ˜
                                                
                                             
                                             
                                                i
                                             
                                          
                                          −
                                          
                                             
                                                
                                                   
                                                      y
                                                   
                                                   ˜
                                                
                                             
                                             
                                                j
                                             
                                          
                                          )
                                          
                                             
                                                
                                                   w
                                                
                                             
                                             
                                                T
                                             
                                          
                                          (
                                          
                                             
                                                
                                                   P
                                                
                                             
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                          
                                             
                                                (
                                                
                                                   
                                                      I
                                                   
                                                   
                                                      i
                                                   
                                                
                                                )
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                
                                                   α
                                                
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          −
                                          
                                             
                                                
                                                   P
                                                
                                             
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                          
                                             
                                                (
                                                
                                                   
                                                      I
                                                   
                                                   
                                                      j
                                                   
                                                
                                                )
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                
                                                   α
                                                
                                             
                                             
                                                j
                                             
                                          
                                          )
                                          ,
                                       
                                    
                                 
                              
                           
                        where we define 
                           
                              
                                 
                                    
                                       y
                                    
                                    ˜
                                 
                              
                              
                                 i
                              
                           
                         as 
                           
                              
                                 
                                    
                                       y
                                    
                                    ˜
                                 
                              
                              
                                 i
                              
                           
                           =
                           
                              
                                 
                                    w
                                 
                              
                              
                                 T
                              
                           
                           
                              
                                 
                                    P
                                 
                              
                              
                                 (
                                 n
                                 )
                              
                           
                           
                              
                                 (
                                 
                                    
                                       I
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                              
                                 T
                              
                           
                           
                              
                                 
                                    v
                                 
                              
                              
                                 p
                              
                           
                        .

For a testing image I
                        
                           i
                        , we first calculate its image specific random walk matrix P
                        (n)(I
                        
                           i
                        ) (i.e., order-n) and it is then straightforward to apply the image specific pooling weights P
                        (n)(I
                        
                           i
                        )w and the learned optimal p to form the image-level representation.

@&#EXPERIMENTS@&#

In this section, we evaluate the performance of the proposed GLP method as well as its enhanced version RGLP handling misalignment and compare it with the state-of-the-art average and max pooling methods. First, we investigate the separability of the pooling results produced by GLP and the other two methods on a synthesized dataset, which possesses distinctive spatial distribution patterns for different classes. Then we evaluate GLP and RGLP along with the average and max pooling on real-world datasets for image classification and action recognition: Caltech-101 dataset [30], Caltech-256 dataset [16], 15 scene dataset [27], Indoor 67 dataset [38] and human–object interaction (HOI) activity dataset [17]. These datasets are widely used in recent years so that we can compare with state-of-the-art methods conveniently, and evaluate the proposed algorithms extensively. Note that our task is for single-label image classification, thus PASCAL VOC datasets are not used for experiment.

A set of randomly generated data is used to investigate the effectiveness of feature spatial distribution for the classification purpose. The synthesized dataset comprises two classes of data, with distinctive spatial distribution per class. There are 200 data matrices for each class. The size of the matrix is fixed as 30×30 to simulate an image with 30×30 feature locations. Each element of the matrix is a binary variable to indicate the presence of a certain visual feature at the corresponding location. Random transitional noise with magnitude ranging from 1 to 20 locations is added to each datum. Fig. 4
                         shows two exemplar data from different classes. We perform average pooling, max pooling and GLP on this dataset and plot the distributions of the pooling results in Fig. 4. From the derived pooling-feature distribution, it can be seen that neither average pooling nor max pooling can well separate these two classes due to the loss of the spatial information, while GLP properly utilizes the features' class-specific spatial distributions and the resultant statistics are separable. GLP produces a discriminative pooling coefficients map as shown in Fig. 4.

In this subsection, we continue the comparison on real image datasets for image classification and image-based action recognition. The purposes of the experiments are two-fold. The first one is to compare GLP directly with the other two pooling methods. The second one is to evaluate the performance of the new image classification framework which includes GLP and RGLP as a new plug-in, and compare it with the state-of-the-art methods.

The classification performances based on these three pooling methods are compared under two different feature representing schemes (if not otherwise mentioned): one is based on the hard assignment and the other is based on the combination of locality-constrained linear coding (LLC) [50] and spatial pyramid matching (SPM) [27]. For Caltech-101/256 and 15 scene datasets, we perform multiple runs (20), and both the mean and the standard deviation of the classification accuracies are reported. For Indoor 67 dataset, we follow the training/testing image set partition provided in [38].

These two groups of experiments follow the common experimental settings. Although various types of image features can be explored, we only use a single type of local descriptor, dense SIFT [35], throughout the experiments. The SIFT features are extracted from densely located patches centered at every 4 pixels on the images and the size of the patches is fixed as 16×16 pixels. We construct a visual word dictionary containing K words from the training samples via K-means clustering. The value of K depends on the number of samples and varies across different datasets. Each SIFT feature vector is encoded into a K-dimensional code vector based on the dictionary. Then the code vectors from every image are pooled into a single feature vector via different pooling methods. During the training process of the GLP (and RGLP), we use all the training samples to calculate the MFA scatter matrices and we set k
                           1
                           =20 and k
                           2
                           =20. The maximum number of the alternations between optimizing w and p is fixed as N
                           
                              alter
                           
                           =10. The stopping threshold of updating p and w is θ
                           
                              p
                           
                           =0.1 or θ
                           
                              w
                           
                           =0.01, respectively. The optimal values of λ
                           1 and λ
                           2 are set by three-fold cross-validation on a randomly sampled subset of the training dataset. The pooled features are used to train a multi-class linear SVM. In our experiments, all the images are resized to 256×256 pixels.

In the first group of experiments, GLP is directly compared with other pooling methods, and the code vectors are generated by hard assignment. In the second group of experiments, we apply the GLP and RGLP as a new pooling component in the multi-stage image classification architecture proposed in [50]. The original architecture consists of four components: image local feature extraction, feature encoding, feature pooling and spatial pyramid matching (SPM) [27], followed by linear SVM classifier. Here, we replace the max pooling component with the GLP/RGLP method, and compare the image classification performance with the original one and other state-of-the-art methods. We follow the same experimental setting as in [50]. SIFT features are encoded by locality-constrained cinear oding (LLC) [50] and the number of neighbors is fixed as 5. Images are hierarchically partitioned into 1×1, 2×2 and 4×4 blocks on 3 levels respectively in the SPM.

We compare the performance of our proposed method with various state-of-the-art image classification methods. The comparing methods include the following:


                           
                              
                                 1.
                                 the spatial pyramid matching kernel method (KSPM) in [27];

the sparse coding+spatial pyramid matching method (ScSPM) [55];

the discriminative nearest neighbor method (SVM-KNN) [62];

the naive Bayesian nearest neighbor method (NBNN) [4];

the kernel codebooks (KC) method [15];

the metric learning based hashing+CORR kernel method (ML+CORR) [22];

the latent pyramidal region (LPR) method in [41];

the locally linear encoding method (LLC) in [50];

the linear distance coding method (LSA) in [51];

the smooth sparse coding method (SSC) in [3];

the Laplacian sparse coding method (LScSPM) in [13];

the multiple kernel object feature combination method (LP-β-MKL) in [14]; and

the dense spatial sampling and pooling method (BSPR) in [54].

Note that we directly report the published results for these state-of-the-art methods as all methods follow the same experimental settings.

We visualize the geometric coefficients in Fig. 5
                            learned by GLP, from which it can be seen that the coefficients derived from GLP are able to capture the visual word spatial distributions.

The Caltech-101 dataset [30] contains 9144 images in total from 102 different categories, including 101 object categories and 1 additional background category. The number of images per category ranges from 31 to 800. The resolution of most images is about 300×300 pixels. Following the setting in [50] and [29], we randomly select 5, 15 and 30 images respectively for training and report the classification accuracies averaged over the 102 categories. The size of visual word dictionary is set as K
                           =2048 as in [50].

The performance comparison of different pooling methods based on the hard-assignment encoding scheme is shown in the first column of Table 1
                           . It can be seen that GLP consistently outperforms the average and max pooling by a margin of 11% and 7% respectively. The robust version of GLP (RGLP) performs better than the original GLP, as RGLP alleviates the image foreground misalignment issue. The classification accuracy of GLP combined with LLC and SPM is shown in Table 2
                           . Based on the comparison with the original LLC [50], it can be observed that the performance improvement brought by GLP is nearly 8% when using 30 training samples. Also GLP outperforms all the single type of feature based methods. And the robust version of GLP (RGLP) performs better than the original GLP due to its capability in dealing with image foreground misalignment. The performance of our proposed method has already exceeded the best one (82.3%) ever reported on the Caltech-101 dataset in [29]. This result is very encouraging as the method in [29] utilizes the groundtruth segmentation, which is not available for real applications. Also, [29] uses 8 different types of features in total. In contrast, our method only uses one single type of feature (dense SIFT) and needs no groundtruth image segmentation results to be provided. In Fig. 6
                            we also visualize some example geometric coefficient maps for each specific visual word over different classes, before and after order-3 self-alignment. We see that the proposed random walk based self-alignment step can effectively adjust the spatial pooling weights toward the object foreground region.

Caltech-256 [16] is an extension of the Caltech-101 dataset. It consists of 256 object categories and contains from 80 to 827 images per category. The total number of images is 30,608. This dataset possesses larger intra-class variability than the Caltech-101 and thus is more challenging. As in [50], 15, 30 and 45 images from each category are used for training respectively, and we use a 4096-D visual word dictionary as in [50]. As can be seen from the second column of Table 1, GLP also consistently leads the performance compared with other pooling methods on this dataset under hard-assignment setting. Also our method outperforms the state-of-the-art method (LLC) on this dataset, with a margin of 2% as shown in Table 3
                           . Note that Caltech-256 has more serious image foreground misalignment issue than other datasets, therefore, we can observe that the performance gain by our random walk based self-alignment step, i.e., RGLP, outperforms the original GLP significantly and it achieves the best performance among all comparing methods.

Scene-15 dataset is composed of 15 scene classes. Each class contains 200 to 400 images and there are 4485 images in total. The scene categories contain from the out-door street and industry to the in-door kitchen and living room. As in [27,55], we randomly select 100 images from each class as training samples to construct a 1024-D visual dictionary. The improvements brought by GLP (RGLP) over the average and max pooling are about 9% and 11% respectively as shown in the third column of Table 1 under hard-assignment setting. Also from Table 4
                            we can see that GLP under the setting with LLC and SPM can improve the classification performance further with a margin of 4% compared with LLC and outperforms KSPM by nearly 2%. We note that on this dataset, Laplacian sparse coding (LScSPM) based feature encoding method achieves very high recognition accuracy. Motivated by this, we also report the performance by our GLP and RGLP pooling frameworks using the Laplacian sparse coding. That is, we replace LLC coding with Laplacian sparse coding, and the results are denoted as GLP (LScSPM) and RGLP (LScSPM). We see the combination of our pooling framework with the Laplacian sparse coding method achieves the best recognition accuracy among all comparing methods. This further demonstrates that the proposed GLP and RGLP feature pooling framework can be flexibly integrated with any feature extraction and coding component in the image representation pipeline (as shown in Fig. 2) to boost the recognition accuracy. Another observation is that on this dataset, RGLP does not outperform GLP obviously. This is because the scene images do not possess strong foreground/background separation characteristics and the visual features extracted from all regions of the image are important for representing the image. Therefore, the proposed self-alignment step is not as necessary as it is in object recognition.

Indoor 67 dataset [38] contains 67 indoor scene categories, and a total of 15,620 images. All images have a minimum resolution of 200 pixels along the smaller axis. We follow the settings of the baseline method provided in [38], i.e., 80 images of each class used for training and 20 images for testing. The recognition accuracy comparisons are shown in Table 5
                           . The current state-of-the-art accuracy is achieved by the middle-level discriminative patch method (MID-DP) [48]. Note that the proposed method significantly outperforms the state-of-the-art. We also note that RGLP does not significantly outperform GLP for this dataset. The reason is the same as that of the 15 scene dataset.

The well-known human–object interaction (HOI) activity dataset contains six activity classes [17]: cricket-defensive shot (player and cricket bat), cricket-bowling (player and cricket ball), croquet-shot (player and croquet mallet), tennis-forehand (player and tennis racket), tennis-serve (player and tennis racket), and volleyball-smash (player and volleyball). There are 50 images in each activity class. We follow the same setting as that in [17]: 30 images for training and 20 for testing, and we use a 4096-D visual word dictionary as in [9].

The recognition accuracy comparisons are shown in Table 6
                        . We compare with previous state-of-the-art results reported in [9,17,57]. the proposed method significantly outperforms the state-of-the-art. We also note that RGLP does not significantly outperform GLP for this dataset. The reason is the same as that of the 15 scene dataset. It is observed that is that on this dataset, the proposed methods show to be effective, and RGLP outperforms GLP obviously. This is because the foreground/background features have clear different influences for activity images recognition, which is differently from that in scene images classification. The proposed self-alignment step is quite useful in human action recognition.

The spatial smooth factor λ in Eq. (11) models the strength of the correlation among adjacent local features. During the GLP pooling procedure, its value controls the homogeneous degree of the geometric coefficients w
                           
                              i
                            over the region of interest. Here we plot the classification accuracy curve with respect to different values of λ in Fig. 7
                           . When the value of λ is very small, the features are assumed to be distributed independently and no correlations are taken into account. On the contrary, when the value of λ approaches infinity, the spatial smoothness term will dominate and enforce all the local features to follow the uniform distribution. As the accuracy curve shows, neither the independent assumption as in [6] nor the uniform distribution as the average pooling adopts is optimal. The optimal correlation model actually lies in between these two extremes.

There is no theoretical guarantee about what is the optimal order (n) for the random walk based self-alignment step. We plot in Fig. 8
                            the classification accuracies according to different values for n, for Caltech-101 and Caltech-256 datasets respectively. One can note that the major performance gain is from n
                           =0 (no adjustment) to n
                           =1 and further increase of the value of n does not bring significant improvement. Therefore in this work, if not otherwise stated, we choose n
                           =1 as the default experimental setting, for the trade off between performance and complexity.

@&#CONCLUSION@&#

In this work, we first proposed a geometric ℓ
                     
                        p
                     -norm pooling (GLP) method to perform feature pooling. Different from traditional feature pooling methods, e.g. the average and max pooling, the GLP method can utilize the geometric information of the feature spatial distributions and thus provide more discriminative pooling results. Second, we proposed a simple yet effective random walk based image self-alignment step to alleviate the foreground misalignment issue in geometric ℓ
                     
                        p
                     -norm feature pooling, which results in an image-adaptive discriminative pooling scheme (RGLP). Comprehensive experimental results on several benchmarks have demonstrated that the proposed GLP and RGLP can serve as a highly effective building block for the image classification architecture and boost the performance to outperform the state-of-the-arts.

@&#ACKNOWLEDGMENTS@&#

This work is supported by the National Natural Science Foundation (NSF) of China (No. 61572029, No. 61300056), and the Science and Technology Project of Anhui Province (No. 1501b042207).

@&#REFERENCES@&#

