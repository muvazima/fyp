@&#MAIN-TITLE@&#Empirical study of open source software selection for adoption, based on software quality characteristics

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We use a new model of internal quality characteristics for selecting OSS.


                        
                        
                           
                           The model quality characteristics are system, information, service qualities.


                        
                        
                           
                           The proposed model is applied on eight different OSS systems.


                        
                        
                           
                           Open source learning management systems (Moodle, Sakai, ATutor and ALIAS).


                        
                        
                           
                           Open source network tools (ns-2, ns-3, Wireshark and FileZilla).


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Information quality

Open source software (OSS)

Quality characteristics

Selection criteria

Service quality

System quality

@&#ABSTRACT@&#


               
               
                  Currently, open source software (OSS) products have started to become popular in the market as an alternative to traditional proprietary or closed source software. Governments and organizations are beginning to adopt OSS on a large scale and several governmental initiatives have encouraged the use of OSS in the private sector. One major issue for the government and private sector is the selection of appropriate OSS. This paper uses new internal quality characteristics for selecting OSS that can be added to the dimensions of DeLone and McLean information systems’ model. Through this study, the quality characteristics are organized in a two level hierarchy, which list characteristics and sub-characteristics that are interconnected with three main dimensions: system quality, information quality and service quality. These characteristic dimensions are tailored to the criteria having been built from literature study and standard for software quality and guidelines. This paper presents case study results of applying the proposed quality characteristic on eight different open source software that are divided between open source network tools and learning management systems.
               
            

@&#INTRODUCTION@&#

Open source software (OSS) is software tool that operates under an open source label whose source code should be available and modifiable. In OSS, the software suite must contain the source code orbe available at a freely accessible location, where it may be adapted to individual customized requirements and passon the modified format. Some OSS may reserve re-distribution rights but in other cases it might be free. A distributor or developer might charge for services including special training, installation, programming and technical support, etc. In general, the term OSS refers to software that is freely available, widely accessible and reusable [1], where reusability implies that source codes can be modified to make them work as their users require. In general, developments in information and communication technology support the existence of OSS strongly.

Throughout the world an increasing number of people are using OSS with an open source code, where it generally operates securely and reliably in a stable and cost-effective manner. The increasing popularity of OSS has dramatically changed the software industry in recent years. OSS is often seen as a possible solution to some of the challenges presently faced by many software communities, especially among developing countries. Such challenges include controlling piracy, exerting a greater level of control over acquired software and dealing with broader policy perspectives that pertain to the development of a national domestic software industry.

OSS does not use the same mechanism of development as proprietary software. From a policy perspective, an ‘open source’ can be defined as a software-licensing model where the software’s source code is made available, subsequently modified, redistributed and added-to, although often with certain restrictions. In addition, a range of benefits under commercial arrangements may be made available, such as, updates, training and ancillary software services [2,3].

OSS are usually, though not exclusively, developed by the collaborative efforts of a group of people who contribute components to the final version of the software. Software companies may also produce programs for the open source community. Proprietary or commercial software is developed under commercial rules and policies, in other words, it is licensed for a fee to a customer in binary, object or executable code (either directly or through channels). The company that writes the program usually provides updates, training and other services required by its users so that the software works efficiently.

The software’s source code might be made available to a certain number of its users through a special license or an alternative agreement but often remains unavailable to the general public and may not be copied, changed or modified except in a manner provided for under the terms of a prior agreement. The European Union recommended that OSS should be used preferentially; the doubters were made to realize that OSS with its freely accessible source code is not just the toy of enthusiastic computer science students but systems designed by professionals for professional use. The many organizations that use open source products include, NASA, Daimler-Chrysler, SONY, Boeing, Sixt, IKEA, the World Council of Churches and the National Association of German Skilled Crafts. Moreover, companies, such as, Hewlett–Packard, Siemens Fujitsu, IBM and Compaq are now selling computers with Linux pre-installed operating systems. These companies make it clear this operating system is just as competitive as any proprietary operating system, such as, Solaris or Windows NT [4].

Each software model (open source software and Commercial Software) represents a viable business strategy for their companies as well as supporting and providing their customers with real advantages. Solutions that the software offers are being continually updated with providers concentrating and improving on a variety of emerging issues and problems, such as, addressing reliability, security and information flow control issues. In fact, OSS has surprised many in the industry by acquiring a good reputation for its reliability, efficiency and functionality [5].

The main objective of this study is to discover criteria that help organizations in their selection, development and evaluation of OSS. In particular, this study aims to identify the most relevant dimension, i.e. system quality, information quality or service quality, which derive or motivate users and IT decision makers in selecting their OSS products. The contribution of this work is based upon the literature study and standard for software quality and guidelines to understand all possible selection criteria or quality characteristics used by potential users to evaluate OSS products for adoption. To achieve the objective of this study, it is necessary to investigate empirically the selection process and quality characteristics of OSS in different application domains. This new empirical knowledge about open source software selection for adoption refers to the qualitative analyses of software quality characteristics.

The proposed model will be used to identify the characteristics considered significant by users and IT decision makers to select and adopt the appropriate OSS product. This research can be used to gain an understanding of the quality characteristics of OSS with the ultimate goal of improving software development practice in industry, particularly of the selection of OSS. This paper provides an overview of open source software and discusses criteria for choosing it while proposing a new internal quality characteristic for selecting OSS that can be added to each DeLone and McLean information system model [6].

In the 1960s, buying a new computer meant supplying free extra software. Manufacturers were only paid for the computer’s hardware. The source codes were freely available and accessible to programmers throughout the world. In 1965 IBM has stopped supplying software source codes with their computers’ operating systems. The company started to employ sufficient computer and information technology experts and is able to dispense with external developers.

In 1970s, computer programmers started realizing that they earned a lot of money from software development. The programmers safeguarded their sources of income using license agreements that prohibited or limited users passing software to others. After 1970, freely available software source codes virtually ceased to exist. Software began to be produced behind closed doors [1,7]. All manufacturers started to maintain control over their tools and computer users had to rely and trust the software producers in the event of program code faults, errors or any special modification according to users’ wishes or new requirements. In 1984 Richard Stallman from Massachusetts Institute of Technology (MIT) provided the idea of developing a free program package named GNU. The goal of the (MIT) computer experts was to again enable open cooperation between software developers. According to the father of GNU, software is only free when it can be used by anyone without restrictions or limitations. Richard Stallman provided the GNU General Public License (GPL) for protecting the software’s freedom. The term ‘free’ has many meanings in the English language. Because of that for several interested companies the title ‘free software’ sounded very much like ‘free toy’. Many companies were hesitant or shy to have any operating system initiatives that were generously given away to everyone [8,9].

This study is based on the DeLone and McLean Information System Success Model (see Fig. 1
                     ), which has been used as a useful framework for measuring the organizational abilities of information systems. This model is widely used for understanding and measuring the dimension of information system success [10–12]. The original model of DeLone and McLean consisted of six major success dimensions: system quality (software quality), information quality (source code quality), service quality (expected and received service quality), intention to use (adoption), user satisfaction (process of discovering user satisfaction level) and net benefits (economic evaluation in terms of money and time consumption).

The modified model covers a wide range of system features [13]. Its quality characteristics of information system success with the new sub-characteristics (internal quality characteristics) for each information system model dimension are based on:

System quality implies the desirable characteristics of the OSS product, including availability, reliability, performance, usability and functionality.
                           
                              •
                              
                                 Availability of software services and any release of new software’s version with new added features. The software’s new version release at the targeted or expected time with mainly new functionality. The availability of any books, websites, forums and blogs written about this software available in market.


                                 Reliability implies maturity and popularity. Maturity refers to whether the software is new in the market or not. Popularity relates to the different software users and any catalogue, guidebook, manual, and website written about this software being available. Thus, reliable OSS must be designed to be as fault tolerant as possible. Fault tolerance refers to making and supporting the system’s function in the presence of faults.


                                 Performance is the most important feature, where every OSS must aim and strive for maximum performance, beeasy to install, configure and operate within a short time.


                                 Usability in OSS refers to its learn-ability, operability, accessibility and user interface. Learn-ability refers to the ease to master and understand the software, where it might even be without using the user manual. Operability is related to how easily the software operates. Accessibility refers to how easily the software is accessed without any other third party software or plug-in.


                                 Functionality refers to achieving the user’s expected requirements, i.e. the correct output and the software functions appropriately as required [14–16].

Information quality includes the following desirable characteristic of source code.
                           
                              •
                              
                                 Maintainability refers to the software’s modularity and modifiability. Software modularity relates to its code structure, readability and how well the software is designed. The software’s modifiability is its ability to be customized to meet a user’s requirements.


                                 Reusability is very important because it focuses on the easy to reuse or extent the code for further extension or integration. Here the source code can be used again to add new functionalities with slight or no modification.


                                 Testability enables the software to be free of errors. The software’s verification and testability is a key aspect that allows the detection of difficulties and defects in OSS. Software testability supports the testing process and facilitates the creation of better quality software.


                                 Security includes confidentiality and integrity. The confidentiality of OSS refers to data and information security and that the software is free of vulnerabilities. Integrity is related to the availability of control mechanisms to ensure the system’s integrity. The OSS should provide the level for a user’s authentication [17–19].

Service quality is based on SERVQUAL measurement instruments, which are adapted from the field of marketing and has been recognized as an important component of information system success [15].
                           
                              •
                              
                                 Commercial support: It is especially important to search for the available support options before deploying the software. This step is even more crucial when there is insufficient experience with OSS. The number of OSS systems with commercial support is relatively small. There is lots of free resources out there but the support available through them is comparable to and sometimes even better than traditional commercial support. Third party commercial support is available from some companies. These companies range from large corporations, such as, IBM and Sun Microsystems; to specialist open source organizations, such as, Red Hat and MySQL and to local firms and independent contractors.


                                 Community support: An active community behind your chosen OSS is very important, because it is always where one will usually go for support, news, advice and tips. The chosen community should have the required skills and knowledge. Both the development team and community should have a good record of performance. Community communication is also important for acknowledging problems and help in solving them. The value of OSS online communities may not always be obvious to a newcomer but are very useful when it comes to making the OSS works better.


                                 Documentation: In terms of quality of service, OSS should provide complete documentation for requirements, architecture, technical and user manual. OSS documentation should consist of the requirements documentation, the statements that identify attributes, capabilities and the qualities of a system. Architecture or design documentation should provide an overview of OSS that includes its relationship to an environment and construction principles to be used in design of OSS components. Technical documentation includes the documentation of codes, algorithms and interfaces. End User documentation involves manuals for the end user and support staff.


                                 Developer skills: Considers the skill set of an individual developer or a group of developers. They should have the appropriate skills to deploy and maintain OSS. If the developers do not have the relevant skills it is possible to employ third party contractors or implement a training program to match the developer’s skills to the task [20,21].

Many of the OSS systems are quite flexible and can be used and modified for different purposes but it is still important to consider their relative strengths and weaknesses. Thus, planning for the current and future use of OSS is important and is a key point to take into account when making an OSS selection.

User satisfaction remains an important way of measuring customers’ opinions of OSS products and should cover the entire customer experience cycle from information retrieval through purchase, payment, receipt and service. Higher OSS system quality is expected to lead to higher levels of user satisfaction. Its use has led to positive impacts on individual productivity, resulting in higher output throughout the organization. User satisfaction levels can be measured using different techniques, such as, repeat visits and user surveys [10,12].

Net benefits are an economic evaluation of OSS in terms of money and time consumption. Net benefits are very important measure of success. It captures the effect of the OSS product on the customers, industry, suppliers, employees, economy, organizations and even society. Net benefits are very important in terms of cost and time saving [10,12].

The following topic areas are important when considering open source software:

Hardware compatibility is very important factor in selecting OSS. The chosen OSS has to be able to support used computer parts and the types of devices that are in use. Another crucial factor is the type of operating system that is supported by a computer vendor. Buying from a small seller or local vendor the chance of getting support is slight. On the other hand, buying from a large company, such as, HP, IBM or Dell, one has the possibility to check what OSS operating systems they support [22].

A good reputation for OSS performance and reliability is a very important factor. Some OSS vendors have very good industry reputations, such as, Linux, Apache web server, GNU Compiler Collection (GCC) and Samba. To select an OSS based on reputation one should compare the OSS against its proprietary peers. Good software quality considers all aspects of the software product and it does not necessarily reinvent the wheel, starting from scratch or forcing programmers to learn new languages or using complex data formats [22].

The case study focuses on studying the quality characteristic of selected open source systems. The quality characteristics in the provided model are organized in a hierarchy of two levels described as characteristic and sub-characteristic that are associated with three main dimensions: system quality, information quality and service quality. Both characteristic and sub-characteristics are considered to contribute in some way or other to the dimensions to which they belong. To ensure that these quality characteristics are correctly ranked, a score has been assigned to each of sub-characteristic. The suggested weighting for each criterion is scaled from 1 to 5, where 1 is the least important, 3 is neutral while 5 is the most important criterion.

The suggested selection criteria differ from D&M IS Success Model as information quality involves the source code quality, system quality is referred to software product characteristics and service quality implies the expected and received service quality from software provider. These criteria may contribute to the success of software product adoption among potential users.

With the huge number of open source software systems available today, two different open source software categories were selected for the case study to demonstrate the feasibility and effectiveness of the proposed approach, i.e. the DeLoneand McLean information system success model with added components of each dimension (see Fig. 1). Two different open source application domains were selected as case studies, i.e. open source network tools and learning management systems.

Currently a huge number of open source network tools are available; therefore, the choice of tools for conducting the case study was important to reflect sufficient assessment of the modified model. In order to demonstrate the applicability of the modified model few of the most common open source network tools were used in this case study, which includes Network Simulator 2, Network Simulator 3, Wireshark and FileZilla. Moreover, there are many learning management systems available today and making the decision which learning platform to choose can be quite overwhelming. To prove the applicability of the proposed approach in different application domains the most popular learning management systems were selected to be evaluated, that includes Moodle, Sakai, ATutor and ILIAS.

The paper discusses various open source software as case studies and evaluates them according to the proposed criteria. The proposed selection criteria are independent of the software types. Eight open source software are evaluated among the two broad categories of considered software from learning management system and network tools. The reason behind considering eight tools is to provide large number of case study examples, to show the feasibility of the provided approach of open source software selection for adoption, based on software quality characteristics. The selected eight tools are weighted based on various research literature surveys, technical reports, performance assessment online articles, tools documentations and user’s manuals, users’ community feedback, personal knowledge and usage experience. After extracting the required information from the concerned resources, a summarized qualitative assessment is provided for the underlying tools.

The qualitative assessment is converted into scaled form for the internal quality characteristics of the tools. Furthermore, quantitative representations can be used for further analysis, such as averaging the internal quality characteristics of the individual tools. Fig. 2
                      presents the methodology in order to deduce the scalar representations of the proposed internal quality characteristics for the eight selected open source software. A method of three steps is considered for deducing the scaled values, where the steps are carried out in a sequential manner for all OSS.

The first step covers information gathering based generally on literature study and users’ feedback, which also represents bulk of the scaled based analysis. The first step highlights the most common and relatively authentic resources that were relied on inferring the suggested values. While analyzing each software tool, all resources are not taken into account since not all listed resources are available for each tool. For instance, the performance of ns-2 and ns-3 are discussed in various research papers but the same cannot be said for the other two network tools FileZilla and Wireshark. Therefore, the analysis of FileZilla and Wireshark did not include published research papers, but included all other listed resources. The second step as indicated in Fig. 2 concludes the gathered information from step one. The concluded statements are put as comments in the case study tables of each tool as given in Tables 1–4 and 8–11
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                      based on the summarized comments of each internal quality characteristic of the tool. Where, it inferring summarized description of the open source software corresponding to the internal quality characteristics. The third step provides a scaled value representation of the concluded comments. In which, the scale (weight) represents the internal quality characteristics of the open source software.


                        
                           
                              •
                              
                                 Network simulator 2 (ns-2) is a discrete event network simulation tool designed for research in communication networks and licensed under GNU GPLv2. Ns-2 coding is based on C++ &OTcl programming languages that were designed to run on Linux based operating systems but can also be used on Windows platforms using Linux emulators, such as, Cygwin. Various version of ns-2 have been released. The latest version is ns-2.35, released on 4th of November 2011 along with its complete documentation [23].


                                 Network simulator 3 (ns-3) is a discrete event network simulation tool based on C++ and Python programming languages. Ns-3 is the successor of ns-2 but with a new development architecture written from scratch. Ns-3 is not backward compatible with ns-2. The simulator ispublicly available under the GNU GPLv2 license for research and development. The latest stable version is ns-3.16 released in December 2012, along with its documentations [24].


                                 Wireshark originally known as Ethereal is a cross-platform packet analyzer. Wireshark is used for wired and wireless networks monitoring, troubleshooting, maintenance and analysis. Wireshark and its terminal based version called TShark are released under the GNU GPL terms [25].


                                 FileZilla is a program for transferring files between clients and servers using file transfer protocol (FTP). FileZilla contains separate client and server side programs, where both client and server software are distributed under the terms of GNU GPL license. In this study, we will concentrate on the server side unless explicitly stated, where the server is only available for Windows OS at the moment. On the other hand, FileZilla client program offers multiple platform support [26].


                        Table 1 shows the quality characteristics based on system quality, information quality and service quality dimensions for Network Simulator 2.


                        Table 2 shows the quality characteristics based on system quality, information quality and service quality dimensions for Network Simulator 3.


                        Table 3 shows the quality characteristics based on system quality, information quality and service quality dimensions for Wireshark.


                        Table 4 shows the quality characteristics based on system quality, information quality and service quality dimensions for FileZilla.

A system quality scaled assessment for the four OSS tools are presented in Table 5 including an outline that may help decision makers apply a similar technique to other networking related tools they may be interested in for their usage for their corporation. In Table 5, Availability of ns-2 is scaled to 5 since it’s the single most popular network simulator whereas ns-3 is scaled to 3 due to its relative lack of popularity [27,28]. Conversely, both network simulators have a consistent updates and releases [29]. In addition, Wireshark Availability is scaled to 3 due to its lack of long duration packet capture support. FileZilla is scaled to 4 with the limitation of server side cross platform support, which is currently available to only Window based systems [30].

The reliability of all four tools is scaled to 4, except for ns-3 due to its relatively lower life span. Performance and Functionality sub-features are scaled to 4 for all selected networking tools hence giving them good characteristics as OSS tools. Finally, the Usability of ns-2 is scaled with 2 due to its complex architecture and difficulty of its usage. Ns-3 is scaled to 3 due to its lower architecture and usage complexity compared to its successor ns-2 [31]. Wireshark and FileZilla are scaled 5 for their usability, since they are both easy to use and deploy [30,32].

Service Quality scaling of the selected networking tools is presented in Table 6. Maintainability of ns-2, Wireshark and FileZilla are scaled to 4 due to good support and contributions by their developers and user community. Ns-3 is scaled to 3 due to its smaller usage domain. Reusability of both ns-2 and FileZilla are scaled to 4 where the former suffers from software design architecture complexity and the latter from lack of strong documentation [25,30,33]. On the other hand, ns-3 and Wireshark are scaled with a Reusability scale of 5 due to their organized software design architecture and good documentation support. Testability of ns-2 and FileZilla is scaled to 3 whereas ns-3 and Wireshark are scaled with a Testability scale of 4, where the scaling of each software was based on fewer of more bugs and fault tolerant issues than the other. FileZilla has a password security concern raised by its user community and hence qualifying it with a Security scale of 3. Ns-2, ns-3 and Wireshark do not qualify for Security assessment, since no data security features are applicable on them [34,35].

In Table 7, Service Quality for the selected networking tools is presented. As a OSS, ns-2, ns-3 and FileZilla do not have any consistent Commercial Support with respect to development, technical support and troubleshooting, hence a scale of 1 is assigned to all three networking tools. Wiresharkis commercially supported by a company named CACE Technologies, hence providing it with a scale of 4. Among all four selected tools, ns-2 surpasses all others with its huge user community hence providing it with a community support scale of 5 [24,36]. In comparison, ns-3 is still new in the OSS market and lacks popularity and a large user community, therefore, it was assigned a community support scale of 2. Wireshark and FileZilla each have a reasonably large community of users, hence they were assigned a community support scale of 4. The volume of documentation forns-2 and ns-3 is large but there is a lack of professionally written books, they were assigned a community support scale of 4. Wireshark has good, professional support documentation with respect to books, manuals, certification facilities and guidelines, hence providing it with a scale of 5 for community support. FileZilla does not have strong documentation and was scaled 3 for community support.

The developers for all selected OSS tools were rated as skilled. Ns-2 and ns-3, however, were scaled 4 due to a lack of dedicated commercial support and, therefore, a dedicated development process. Wireshark and FileZilla are scaled 5 due to dedicated commercial development and client side cross platform support respectively [25,26].

Learning management systems are called Course Management Systems (CMS) or Virtual Learning Environments (VLE). Most of them, especially the open source systems, are designed for the formal education environment. Open source ELMS are gaining increased recognition and adoption by education organizations and some companies [37]. With the huge number of learning management systems available today, making the decision about which platform to choose can be quite overwhelming. Below is a brief introduction to four of selected Open source ELMS currently available.
                           
                              •
                              
                                 Moodle is an LMS for producing Internet-based course websites. It is an abbreviation for “Modular Object-Oriented Dynamic Learning Environment” although when it was first developed the M stood for Martin’s after its developer, Martin Dougiamas. Moodle has been around for over ten years. Its first version was published in August 2002. It is written in PHP [38].


                                 Sakai is a free educational software platform and is used for teaching, research and collaboration. It was designed by universities to solve university issues. It was built by MIT, Stanford and Berkeley amongst others so they did not need to use home-grown systems or pay vendors. Sakai aims to suit group projects and describes itself as a Collaborative Learning Environment (CLE). It is written in Java [39].


                                 ATutor is a platform to develop and deliver online courses. It differs slightly from the other education learning management systems as it is actually a learning content management system (LCMS). The platform is particularly conceived for people with disabilities (tools with very good accessibility) and accessibility is its best feature. In addition, user navigational patterns can be tracked so instructors can see students use of the site and students can track their own use. It is written in PHP [40].


                                 ILIAS (IntegriertesLern-, Informations- und Arbeitsko operations-System) (German for Integrated Learning, Information and Work Cooperation System). It is an LMS based on the concepts of Personal Desktop and Repository. It supports learning content management (including SCORM 2004 compliance) and tools for collaboration, communication, evaluation and assessment. ILIAS was published and offered for learning at the Cologne Faculty of Business Administration, Economics and Social Sciences. It can be run on any server that supports PHP and MySQL. It’s written in PHP [41].


                        Table 8 shows the quality characteristics based on system quality, information quality and service quality dimensions for Moodle.


                        Table 9 shows the quality characteristics based on system quality, information quality and service quality dimensions for Sakai.


                        Table 10 shows the quality characteristics based on system quality, information quality and service quality dimensions for ATutor.


                        Table 11 shows the quality characteristics based on system quality, information quality and service quality dimensions for ILIAS.

The above mentioned open source LMS possess different levels of quality characteristics. They have different importance levels for system, information and service qualities. Moodle has by far has the best system quality among the selected LMS. It is the most available and popular one. It is available in about 78 languages and in approximately 216 different countries compared to the ELMS Sakai, ATutor and ILIAS, which are available in about 30 languages and present in less than 60 countries. Due to its popularity, Moodle is the most reliable open source LMS system in use today. It can be scaled for small or large deployments. The other LMS have not yet equaled the large pen etration of Moodle. The performance characteristics of Moodle were scaled to 5 because of its simplicity and satisfac tion with ease of installation and time to implement it. Sakai scaled to 3 because of its lack of comprehensive competency profiling and manage ment. ILIAS scaled to 2 because it has some logistical installation issues that need to be considered [42] (see Tables 12–14
                        
                        
                        ).

The usability of Moodle and ATutor, were scaled to 5. This reflects satisfac tion with Moodle with respect toits ease of use and comprehensive of customization and the good accessibility and adaptability of the design of ATutor. ILIAS was scaled to 2 due to its lack of interoperability, integration and poor accessibility standards. The functionality of Moodle and Sakai is ranked 4, because many developers try to create plug-ins and other add-ons to increase their functionality over the years. The functionality of ATutor and ILIAS was scaled to 3 because there are no modules in ATutor and in ILIAS most functionality resides in ad hoc modules without interface consistency and its code is a bit [43,44].

The information quality of the above mentioned LMS are similar. The maintainability of Moodle, ATutor and ILIAS are scaled to 3 because their software enjoy a similar level of structure, readability and design. Sakai is scaled to 2, which is lower than others due to its code complexity. The reusability of Sakai and ILIAS are higher than Moodle and ATutor, because they support software reuse and easily extend for further extension or integration. Moodle and ATutor have few limitations with respect to their user interface design [17,18]. In terms of testability, Moodle and ILIAS were scaled to 4, because of their amenability for the testing process, which facilitates the creation of better quality software. On the other hand, Sakai and ATutor are scaled to 3 and 3 respectively, because of their test process and time consumption in the manual test. The final criterion of information quality is the software security in which Moodle and ILIAS were scaled 4, because of their flexible and straightforward support of authentication and authorization security control mechanisms. Conversely, Sakai and ATutor scaled 3, because of some weaknesses in their access control mechanisms [19,45].

Moodle scored highest while ILIAS scored lowest for service quality. Moodle and ATutor have the best commercial support in terms of the services provided by their partners. Sakai and ILIAS have limited commercial support, such as, hosting and technical support. In terms of community support Moodle is a very popular LMS and is larger and more active than all other LMSs. The Moodle community is full of discussion boards in many different languages; therefore, users can communicate with people from in/outside their organization. Sakai and ATutor are less popular but they have very active communities in terms of helping each other. ILIAS has a small community of developer because non-German users have little chance of influencing the product’s development via participation in the various help forums. Moodle is a well-documented LMS compared to other ones. Here administrators, teachers, students and developers all have better documentation compared to Sakai and ATutor with their small amount of available documentation [12,20]. There are many support options for Moodle users. On the Moodle site you can find books, manuals and documents including frequently asked questions and a forum where you can ask questions. The forums usually have plenty of other users that are available and even computer programmers who are happy to offer help, advice and recommendations whatever the issue. ILIAS has less documentation because it is almost entirely used by German Speakers [21]. Developer skills refer to the skill set of an individual developer or a group of developers. The above mentioned tools do not qualify as ones that concern the skills of developers. The developers skills for each tool depends of the used language in the tool development process, such as, Moodle, ATutor and ILIAS, which use PHP while Sakai uses Java [43,44].

This case study illustrates how to apply additional quality characteristic that added to the DeLone and McLean information system models as an internal constraint to be included for users and IT decision makers in an OSS selection process to solve the problem of selecting the preferred open source tool. From the case study it can be concluded that ns-2 has the better characteristics out of the four above network tools while Moodle is the best of the analyzed learning management systems [46,47].

@&#CONCLUSION@&#

The study’s objective was to identify the most and relevant dimension (system quality, information quality or service quality) that derive or motivate users and IT decision maker in choosing their OSS products. The paper relied on the literature study, standard for software quality and guidelines to understand all possible selection criteria or quality characteristics used by these potential users in evaluating OSS products for adoption purposes. The paper uses an additional quality characteristic that added to DeLone and McLean information system model, which is the internal constraint included for IT decision makers on OSS adoption. The hierarchical characteristic of OSS selection criteria might act to boost users’ confidence in OSS product adoptions in the future. Applying the proposed model to an OSS related criteria is operable and effective in solving the selection issue in practice, which is demonstrated in the case study of eight different OSS that are divided between open source network tools and learning management systems.

This study concentrated on the quality characteristic for the selection of an OSS, however, future work, which the authors intend to perform, entails enhancing the existing work by extending this study to include other DeLone and McLean information system model components, such as, Intention to Use. Here, the work will consider planning for the current and future use of OSS and User Satisfaction, which is very important for measuring customers’ opinions of OSS products, which can be measured using different techniques, such as, repeat visits and user surveys. The last component in any future research will be Net Benefits, which is closely related to economic evaluation of OSS in terms of money and time consuming. Furthermore, the proposed model characteristic dimensions are tailored to the criteria build from literature study, standard for software quality and guidelines, which may help to identify the characteristics consider by the users and IT decision makers for selecting and adopting an OSS product. The contribution of this research depended on the literature study, standard for software quality and guide lines. A comprehensive survey, therefore, should be conducted to identify the main characteristics of each OSS to be selected or adopted. Moreover, it would be valuable to review all case studies on selected tools by the experts that already used them.

@&#REFERENCES@&#

