@&#MAIN-TITLE@&#Conceptual model for spatial data cubes: A UML profile and its automatic implementation

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The paper presents a state of art of conceptual models for Spatial Data Warehouses


                        
                        
                           
                           The paper details a new UML profile for modeling complex Spatial OLAP applications


                        
                        
                           
                           The implementation in a commercial CASE tool is presented


                        
                        
                           
                           Its automatic implementation in a classical ROLAP architecture is shown


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Conceptual multidimensional modelling

UML profile

Object Constraint Language

Data aggregation

Spatial OLAP

@&#ABSTRACT@&#


               
               
                  The increasing availability of geo-referenced data has increased the need to enrich OLAP with spatial analysis, leading to the concept of Spatial OLAP (SOLAP). The conceptual modelling of spatial data cubes requires the definition of two kinds of metadata: (i) warehouse metadata that model data structures that maintain integrated data from multiple data sources and (ii) aggregation
                        1
                     
                     
                        1
                        In this paper, the term “aggregation” does not refer to UML aggregation associations. In the text of our article, “aggregation” is used in the sense of calculating a result (as in the field of databases) — the terms “aggregation level” and “aggregating relationship” refer to OLAP aggregations.
                      metadata that specify how the warehoused data should be aggregated to meet the analysis goals of decision makers.
                  In this paper we provide a review of existing conceptual spatial data cube models. We highlight some limits of these models concerning the aggregation model design, and their implementation in existing CASE tools and SOLAP architectures.
                  Firstly, we propose a new UML (Unified Modeling Language) profile for modelling complex Spatial Data Warehouses and aggregations. Our profile is implemented in the MagicDraw CASE tool.
                  Secondly, we propose a tool for the automatic implementation of conceptual spatial data cube models, designed using our profile, in a SOLAP architecture. In particular, our solution allows: (i) generating different logical representations of the SDW (Spatial Data Warehouse) model (star schema and snow-flake schema) and (ii) implementing complex SOLAP analysis indicators using MDX (MultiDimensional eXpressions language).
               
            

@&#INTRODUCTION@&#

Today, Data Warehouses (DWs) and Online Analytical Processing (OLAP) tools are used in Business Intelligence (BI) applications to support the decision-making processes of large organisations [1]. DWs allow for storing huge volumes of integrated data from multiple data sources. OLAP systems provide effective means to query and to analyse the warehoused data by producing online statistical summaries (indicators) at different levels of detail. These indicators are computed using aggregate functions (e.g., Avg, Min) when users navigate through dimension hierarchies by performing OLAP operations (e.g., Roll-up, Drill-down). In addition, the increasing availability of geo-referenced data acquired by means of several technologies (e.g., sensor networks, remote sensing systems) has increased the need to enrich OLAP with spatial analysis. To support this, OLAP systems were successfully extended by new spatial data cube-specific concepts (e.g., spatial dimension) and operators (e.g., spatial drill-down). Consequently, new types of decision support systems, namely Spatial Data Warehouses (SDWs) and Spatial OLAP (SOLAP) tools, have emerged [2]. SDWs are collections of spatial and non-spatial data that support spatial multidimensional analysis [3]. SOLAP tools allow spatio-multidimensional analysis of the SDW content; they combine OLAP analysis with cartographic visualisation capabilities of GIS systems [2]. This enables, for example, the understanding of the geographic distributions of the analysed phenomena.

Relevance of SOLAP technology has been widely recognised in several application domains (e.g., health care, marketing, and environmental risk management) [2,4]. However, SOLAP opens several research issues from the implementation, modelling and visualisation points of view [4].

At the conceptual abstraction level, DW and SDW systems are modelled using the MultiDimensional (MD) model [7] and the spatial MD model [4], respectively. These models organise (in terms of measures and dimensions) decisional data multidimensionally according to the analytical needs of decision makers. Therefore, they represent an important means to exchange and to collaborate between decision makers and designers for attaining a high achievement with the decisional project, which depends on meeting the users' analysis goals [7].

In the literature, many (spatial) MD models have been proposed for DW [13] and SDW [4] applications. However, until now, no standard model has emerged for these applications.

Several authors proposed Unified Modeling Language (UML)-based models for the conceptual modelling of such applications [11,13,15]. There are many reasons for this. Firstly, UML provides designers with powerful constructs to better represent static and dynamic aspects of these applications. UML can be extended using profiles to handle specific complex aspects of these applications (e.g., security and multi-versioning). After its adoption by the software designer community, a growing number of UML-based tools emerged, allowing for easier and quicker development.

As shown in this paper, all of the existing conceptual spatial MD models focus on the design of the warehouse structures and provide a simple representation of the aspects related to the aggregation of data that are central to SOLAP applications. Moreover, some models cannot be used to design these systems because they do not provide designers with visual notations (such as [4]). Others are ad hoc models and require more learning and modelling efforts.

Thus, in this paper, we propose a conceptual model for spatial data cubes based on standard languages: UML and OCL. In particular we propose a new UML profile. This profile and its OCL-based constraints have been fully validated by a complete implementation in the UML-based tool called MagicDraw. Our profile meets the main classical modelling requirements that are identified in the literature (e.g., explicit complex hierarchies, measure sets and aggregate functions); see [13,16], and additionally, it allows representing complex analysis indicators (indicators computed using different aggregate functions along different dimensions).

Finally, motivated by the need of an automatic implementation of conceptual spatial data cube models in a SOLAP architecture [20], we propose a system that allows (i) generating different logical representations of the SDW model (star schema and snow-flake schema) and (ii) implementing complex analysis indicators using the MultiDimensional eXpressions language (MDX).

The remainder of this paper is organised as follows. In Section 2, the main OLAP/SOLAP concepts are defined. In Section 3, the retail case study used for illustration throughout the paper is described. In Section 4, modelling and implementation requirements for spatial data cubes are presented. In Section 5, we survey and discuss related work according to the requirements defined in Section 4. In Section 6, our UML profile for spatial data cubes is presented. In Section 7, our tool for the automatic implementation is described. In Section 8, conclusions and future work are outlined.

In this section, we present the main concepts of OLAP applications (Section 2.1), SOLAP applications (Section 2.2) and UML (Section 2.3). As our proposal is to provide designers with a conceptual spatial MD model, we focus on conceptual abstraction level aspects.

Data Warehouses allow for storing huge volumes of integrated data, extracted from multiple heterogeneous data sources. OLAP systems query these warehoused data to produce online statistical summaries (indicators) at different levels of detail.

At the conceptual abstraction level, these applications are typically modelled using the MultiDimensional model that organises data into facts and dimensions according to the analytical requirements of decision makers [7]. The facts represent subjects of analysis (e.g., “sales”) and are described using measures (e.g., “price”). The dimensions represent perspectives of analysis (e.g., “Products”). They are organised into different dimension hierarchies which are composed of related aggregation levels allowing for viewing indicators (measure aggregates) at different granularities. Indicators (e.g., “Turnover”) are computed by applying aggregate functions (e.g., Sum, Avg, Min, and Max) to measure values [1].

The data structures that represent indicators with their dimensional information (dimension members) at different granularities are called hypercubes (data cubes). These data cubes can be implemented in three main ways: (a) pre-computation and storage in optimised multidimensional arrays (Multidimensional OLAP (MOLAP)); (b) storage in Relational databases (ROLAP); and (c) Hybrid OLAP (combination of ROLAP and MOLAP).

Finally, decision makers explore these data cubes by navigating through dimension hierarchies and performing OLAP operators. Common OLAP operators are the following: “Slice”, which defines a selection on one dimension of the cube; “Dice”, which performs a selection on two dimensions or more; “Roll-up”, which decreases the granularity of the measure values aggregating them along a dimension hierarchy; and “Drill-down”, which is the reverse of Roll-up.

SDW and SOLAP systems [2] have been introduced to enrich BI applications with spatial analysis by considering the spatial components of the increasing volumes of geo-referenced data, which are generated by means of different technologies (e.g., sensor networks and remote sensing systems). A SDW multidimensionally organises and historicises data (spatial and non-spatial) coming from multiple data sources in support of decision-making processes. SOLAP systems enable interactive multidimensional map-based explorations of spatial data cubes by combining traditional OLAP analysis capabilities with GIS systems' functionalities [2].

At the conceptual abstraction level, SDWs are modelled according to the spatio-multidimensional model [3], which extends the conventional MD model with new spatio-multidimensional concepts, such as spatial dimension, spatial measure, spatial fact and spatial hypercube. Spatial dimensions represent facts' locations as analysis axis and are composed of at least one spatial level (a level having a geometrical representation); see [3,19]. The spatial measure is often considered as a measure having a geometrical data type (e.g., a point) [3,4,20]. Spatial hypercubes are defined by at least one spatial measure or at least one spatial dimension [21], to allow cartographic representations and navigations through data. Spatial facts represent instances of spatial data cubes [21,22].

Spatial measures are aggregated using spatial aggregate functions (e.g., GeometricUnion and Centroid) to calculate spatial indicators when navigating in both spatial and conventional dimension hierarchies [3].

To enable spatial explorations of spatial data cubes, SOLAP re-defines traditional OLAP operators, such as Spatial Slice, Spatial Drill-down and Spatial Roll-up [4]. Spatial Drill-down and Roll-up allow navigating spatial dimensions by simply interacting with cartographic displays of the SOLAP client. Spatial Slice selects a data subset by applying a spatial predicate (metrical, directional or topological predicates — for example, the overlap operator) on spatial dimension members (i.e., instances of spatial dimensions).

The classical SOLAP architecture is composed of three tiers: SDW, SOLAP server and SOLAP client (Fig. 1
                        ). In the SDW tier, (spatial) data that are collected from data sources are often stored at their finer grains using a spatial DataBase Management System (DBMS) such as Oracle Spatial.

The Relational DB schema can be defined following three schema types: star, snow-flake or star-flake. In the star schema, every dimension is represented by one table containing all of the dimensional attributes of the dimension's aggregation levels as columns. In the snowflake schema, dimensions are normalised, and each aggregation level is mapped into one table. The starflake schema combines the two representations by normalising some dimensions or parts of them and denormalising others. In all of these schema types, each fact class is represented by one table that references the dimension tables by using foreign keys.

The well-known constellation schema (a constellation of stars, or snowflakes, or starflakes) is obtained when the MD model is composed of two or more hypercubes, which eventually share some dimensions.

The choice between normalising and denormalising dimensions is often based on the storage cost and the expected query performance. In contrast to denormalised dimensions, normalised dimensions are easy to maintain and optimise the storage space; however, they decrease the query performance because many joins need to be performed when executing queries [19].

SOLAP servers (e.g., Mondrian) define spatial data cubes (dimensions, facts, aggregations, etc.) and implement SOLAP operators to compute and to navigate through (spatial) data cubes. Usually, the spatial data cubes (SOLAP server models) are defined by means of graphical wizard or using XML files.

Finally, SOLAP clients (e.g., JRubiK and JMAP–SOLAP) provide users with interactive visual displays (crosstabs, histograms and maps) that trigger SOLAP operators and allow the visualisation of indicators and dimensions.

Object-Oriented (OO) models are heavily used for data modelling [13] because they are very expressive and better represent static and dynamic aspects of complex applications. The Unified Modeling Language is the standard language for OO modelling [23] and is increasingly used for DW and SDW modelling [13,24]. An important advantage of UML is its extensibility. UML can be adapted in two ways: (a) with profiles to customise it to specific platforms or domains (e.g., security, spatial, and temporal) or (b) with metamodels to augment and to enrich its semantics [23]. Moreover, it has been shown that UML provides powerful constructs to represent static and dynamic aspects of complex applications, such as SDWs [20,24]. Complementary to the UML specification, the Object Constraint Language has been adopted by the Object Management Group (OMG) as the standard language for expressing integrity constraints on UML models [25]. OCL offers a good balance between expressivity and readability. Consequent to their large adoption by the software designers' community, a growing number of UML-based tools allow for easier and quicker developments of software applications (by automating certain tasks).

To illustrate SOLAP/OLAP concepts and modelling requirements, we introduce a retail case study adapted from [19]. In this model, decision makers are interested in the analysis of two aspects of their activity: (1) the product supplies and (2) the product sales. In terms of OLAP, these aspects can be defined using two hypercubes (i.e., two data cubes): the “Supplying” and the “Sales” hypercubes. The Sales multidimensional model is depicted in Fig. 2
                      using a graph notation. As shown in this figure, sales facts are described using five numerical measures: “price” (sales amounts), “quantity-sold” (quantities of sold products), “quantity-stock” (stock quantities of products), “costs” (sales costs) and “unit-price” (unit sales prices). The sales are analysed according to five dimensions, describing three different types of extents:
                        
                           -
                           two dimensions (i.e., non-spatial and non-temporal dimensions), “Orders” and “Products”, containing only thematic information;

two spatial dimensions, “Customers” and “Stores”, containing geographic and thematic information;

one temporal dimension, “Time”, representing the time frames of facts (sales).

The dimension “Orders” records the order identifiers. The dimension “Products” records thematic information about the products and their categories. The spatial dimension “Stores” records the stores and their locations. The dimension “Customers” stores the customers and their addresses. Dimensions are described using different types of attributes, called dimensional attributes. For example, the spatial dimension “Stores” (Fig. 2) contains thematic attributes such as “country-name” and spatial attributes such as “country-geometry”, which describes the locations of countries. The “Time” dimension is defined by temporal attributes (e.g., “month-temporality”) and thematic attributes such as “month-name”.

The aggregation levels are formed by grouping dimensional attributes into disjoint subsets according to the analysis requirements. For example, the spatial dimension “Stores” (Fig. 3
                     ) consists of one hierarchy (“StoreLocation”) that is composed of four aggregation levels: “Store”, “City”, “State” and “Country”.

Once the warehouse MD model (i.e., dimensions and measures) is defined, the decision makers decide how to aggregate data to compute different indicators of analysis in the SOLAP tier. In our case study, decision makers may want, for example, to compute the total quantity sold by summing the “quantity-sold” measure values or the turnover by summing the “price” values.

Finally, this spatial data cube allows users to answer queries such as “What are the turnovers per store or per product between 2000 and 2011?” and “What are the total costs per state?”. These queries are visualised in the SOLAP client tier using different types of displays (e.g., tabular and maps). Specifically, a map representing states is used to show the results of the second query.

In this section, we present the main spatial data cube conceptual modelling requirements (Section 4.1) (with particular attention on aggregation (Section 4.2)) and ones related to its implementation (Section 4.3). We illustrate these requirements using the retail case study previously described.

Modelling requirements for conventional and Spatial Data Warehouses have been investigated in many studies [13,16]. These studies suggest that each (S)DW model must conform to the user's view of the decisional data by organising the data into facts and dimensions. This support for multidimensionality must be clear, non-ambiguous and independent from the implementation to facilitate the understanding and the validation of the model by the decision makers.

In the literature, support for measure sets is a well-known requirement concerning the conceptual modelling of measures. An example of a measure set is the set composed of “quantity-sold” and “price” which describe sales facts.

The main modelling requirements regarding dimensions are support for descriptive attributes, identifying attributes and multiple hierarchies 
                        [11,13,19]. The identifying attributes identify dimension members and are used for grouping purposes in Roll-up and Drill-down operations. An example of these attributes is “customer-id” (Fig. 2). The descriptive attributes are used to select and to filter results in Slice and Dice operations (e.g., “country-name”). Dimension hierarchies are widely used structures that support data aggregations [26]. Consequently, representing hierarchies explicitly is stated as a mandatory requirement. Moreover, as highlighted in [19], designers may want to model different hierarchies per dimension. In our example, the dimension “Customers” could be organised into two hierarchies, “CustomerLocation” and “CustomerType”. This requirement is known as multiple hierarchies per dimension.

Several studies have highlighted the importance of aggregate functions for representing MD queries (data cubes) at the conceptual level [17], thereby allowing validation of the model with respect to the analytical requirements of decision makers at an early stage.

A very important requirement for SDWs is the precise typing of multidimensional elements. Indeed, according to [12,19], SDW elements that either represent factual or dimensional data can be spatial, temporal and thematic (non-spatial and non-temporal). This requirement allows us to perform the following: (a) to improve readability by associating adequate graphical notations for each type, (b) to ease models' validation (e.g., spatial measures have to be aggregated using only spatial aggregate functions), and (c) to facilitate automatic implementation for each type (e.g., a spatial measure must be implemented using a geometric data type into the SDW tier). Measures can be of different categories according to their purposes of use in multidimensional analysis: Numerical, Spatial and Textual. Numerical measures are attributes that are used to quantify facts; for example, “quantity-sold” quantifies sales (Fig. 2). Spatial measures are geometric attributes that should be visualised on maps to better understand the geographic distribution of facts. Textual measures are qualitative attributes used to analyse textual data [28]. We refer to this concept as the measure using type. Regarding their additivity, measures are classified into flow, stock and value per unit measures [10]. Flow measures (e.g., “quantity-sold”) record the commutative effect (value changes) over a given time period. Stock measures record the state at specific points in time (“quantity-stock”). Value per unit measures record values per unit in a specific period (“unit-price”). The additivity type of a measure influences its aggregation. Flow measures can be summed (additive) on all dimensions; stock measures are not additive on the time dimension (semi-additive); and value per unit measures are not additive at all. We refer to this concept as the measure additivity type.

The SDW model should explicitly support thematic, spatial, and temporal dimensions, and hierarchies and aggregation levels. These different types of MD elements influence differently aggregations; for example, stock measures (e.g., “quantity-stock”) cannot be summed (using Sum) along temporal dimensions (“Time”). For example, spatial topological relationships (e.g., geometrical inclusion) can be defined only between spatial levels (e.g., “City” and “State”). Finally, these different types of elements are used differently in SOLAP analysis. For example, only spatial hierarchies support Spatial Roll-up/Drill-down operations.


                        Complex data structures are very frequent in real-world situations. Among these structures, we can cite irregular hierarchies (non-strict, non-onto and non-covering) and irregular fact-dimension relationships (non-strict and non-complete); for more details, see [19].

Other important classical requirements are the separation between structure and content, the representation of multiple hypercubes that share dimensions, and the sharing of levels between hierarchies; see [13,16] for more details.

Usually, decision makers aggregate measures using different aggregate functions to meet their analysis goals. For example, in our case study, managers may want to compute the maximum sales price by applying the Max aggregate function along all dimensions, the total sales price by applying the Sum along all dimensions, and the stock level by applying the Avg along the Time dimension and the Sum along the other dimensions.

To model such different complex situations, we believe that it is necessary to distinguish between the following:
                           
                              -
                              the measure that represents an attribute that is subject to data aggregations;

the aggregation rule that specifies the aggregate function that is applicable to a measure along a certain number of dimensions, hierarchies or between two aggregation levels; and

the indicator that defines an ordered set of correct aggregation rules for a measure in response to an analysis need.

In this way, we can easily associate multiple indicators for one measure (e.g., “Max_Price” and “Total_Price” with the measure “price”). We refer to this requirement as explicit indicators.

Aggregation rules for “Max_Price” and “Total_Price” indicators simply use one aggregate function along all of the dimensions (i.e., Max and Sum, respectively); however, more complex scenarios can be formulated. Indeed, certain indicators may be defined by ordered sets of aggregation rules, where each rule may specify the aggregate function along a set of dimensions. For example, to compute the indicator “Stock_Level”, we must apply Avg along “Time” after applying Sum along other dimensions [27]. We refer to these requirements as multiple ordered aggregation rules per indicator and explicit dimension-related aggregation rules.

Although these two requirements are supported by only some models [27], they are well-known requirements.

Moreover (un)fortunately, when dimensions are composed of multiple hierarchies, it is possible to have different aggregate functions for each hierarchy of the same dimension [12,26]. For example, decision makers may want to aggregate the “quantity-sold” using the Sum along the “CustomerLocation” hierarchy and the Avg along the “CustomerType” hierarchy. We call this requirement explicit hierarchy-related aggregation rules. In specific situations, the aggregation rule may change between two aggregation levels of the same hierarchy [12,26]. For example, to obtain the maxima of city's turnovers for every combination of levels, we first sum the “price” values from “Store” to “City” and then apply Max. We call this requirement explicit sub-hierarchy-related aggregation rules.

Finally, indicators such as “Profit” and “Unit_Price” may be derived from other indicators; “Profit”, for example, is calculated by subtracting the “Total_Price” from the “Total_Costs”; we refer to this requirement as explicit derived indicators.

In [3], SOLAP aggregate functions are classified into three types according to their distributivity: distributive (e.g., Sum and GeometricUnion), algebraic (e.g., Avg and Centroid) and holistic (e.g., Mode and EquiPartition). With distributive aggregators, sub-aggregates can be safely reused to compute coarser ones. Algebraic aggregators are expressed as finite algebraic expressions over distributive aggregators; e.g., Avg is computed using Count and Sum. Holistic aggregators are all of the other aggregate functions that are non-distributive and non-algebraic. We refer to this knowledge as the aggregator distributivity type.

Similar to dimensions and measures, aggregate functions can be classified with regard to the data types to which they apply; the categories are numerical (Sum), spatial (GeometricUnion) and Textual (list [28]). We refer to this knowledge as the aggregator applicability type.

We state that representing these two characteristics of aggregators (i.e., the distributivity and the applicability types) at the conceptual abstraction level is very important for multiple reasons. The distributivity type can be used to ease the materialised view selection process by illuminating at an early stage the views that are calculated using non-distributive functions. More importantly, it can be only obtained from users
                           2
                        
                        
                           2
                           The user information and needs should be represented at the conceptual abstraction level because the languages used at this level are understood by users.
                         when the aggregators are application-specific. The applicability type can be used to check the validity of the aggregation model at an early stage. For example, indicators associated with spatial measures must be defined using spatial aggregators.

Conceptual models providing a visual notation have to be supported by CASE tools allowing designers to correctly “draw” their models [7]. Thus, as for classical databases, a conceptual SDM has to be supported by some CASE tools that should force designers to define SOLAP models being compliant with its formal definition [20].

Secondly, in order to easy the implementation process, which can be tedious, complex and iterative, an automatic implementation of the SDM model should be supported [15]. It allows improving effectiveness of design process, and reducing errors generated by application ad-hoc implementations. In the context of Spatial Data Warehouses, the automatic implementation concerns the models of the SDW and SOLAP server tiers. The former is a relational model but with the particularity of using SDW logical models (star schema and snow-flake schema) that can be different from the conceptual representation of dimensions (c.f. Section 2.2). The SOLAP server model should be able to represent spatio-multidimensional elements but also complex indicators.

@&#RELATED WORK@&#

In this section, we present the most relevant conceptual MD models proposed in the literature for conventional DWs (Section 5.1) and SDWs (Section 5.2). In particular, we discuss the limitations of spatial multidimensional models with a graphical representation according to previously described requirements (Section 5.3).

In conventional Data Warehouses, many graphical conceptual models have been proposed in the literature. These models provide graphical support for the main static MD components and are based on either existing frameworks (e.g., UML, Entity-Relationship — ER, and Description Logic) or ad hoc formalisms; see [13] for more details.

The study in [27] proposes an ad hoc conceptual multidimensional model, the Dimensional-Fact Model (DFM), which supports the main static MD structures and allows for graphical representations of the measure additivity constraints (referred to as type compatibility conditions in [10]). In addition, the authors discuss two interesting issues: overlapping hypercubes and aggregation in empty facts (facts without measures which are typically used to record the occurrence of events).

Studies in [29,30,19] propose ER-based models. Particularly, the proposal in [19] appears as an interesting framework for the modelling of complex DW applications. This paper pays particular attention to the conceptual and logical design of complex hierarchies (e.g., non-strict, generalised, and multiple alternative). Furthermore, this is the only model in both DW and SDW fields that explicitly distinguishes the different hierarchies that compose the same dimension; hierarchy names are attached to the aggregating relationship roles when necessary.

On the other hand, some studies aim at defining UML extensions [15,26,31]. Reference [13] proposes a UML extension called YAM2, which allows for modelling a richer set of MD structures and for representing multiple related hypercubes. Another interesting feature is that it makes use of UML packages to organise the modelling elements into different abstraction levels, thereby simplifying the model. This model also represents dimension-related aggregation rules of measures (Summarisation). As recognised by the authors themselves, all of the semantic relationships make the YAM2 too complex or even cumbersome. Reference [15] proposes a UML profile that defines a set of stereotypes, tagged values and OCL constraints to represent the major static MD properties at the conceptual level. Main MD concepts that can be represented using the defined stereotypes are measures, dimensions (but not multiple explicit hierarchies), aggregation levels, relationships between levels and multiple related cubes. This profile is implemented in the Rational Rose tool. Reference [31] proposes a UML-based model that unifies the representations of facts and of dimension members, thereby allowing for more flexibility in the design of DW applications. This model is enriched by a set of OCL constraints, namely structural, to guarantee its consistency.

Finally, [26] proposes another UML model and expresses different types of aggregation rules using the Production Rule Representation (PPR) language.
                           3
                        
                        
                           3
                           The Production Rule Representation (PRR) is an OMG standard for modelling production rules on UML models.
                        
                     

Research in spatial multidimensional modelling is relatively recent. Since the pioneering work of [3], some conceptual spatial MD models have been proposed in the literature; these models aim at extending the traditional multidimensional model with spatial concepts.

The majority of these studies adopt the computer science point of view regarding spatiality; they suggest that labelling specific components of SDWs (e.g., measure, dimension, and fact) as ‘spatial’ requires them to have a geometric representation. Only [21] adopts the ‘geomatics’ point of view of spatiality, which considers spatial data as any data that is used to localise phenomena on the Earth regardless of its representation (geometry or text).

Besides being non-standards-based, some models [21,22,32,33] do not provide designers with graphical notations. Consequently, they cannot be used for the conceptual design of SOLAP applications. Except for [21], these models have been proposed to address specific complex issues of SOLAP applications: handling imprecision in partial containment hierarchies [32], representing spatial measures at different cartographic scales [22], and handling field data [5,34] and spatio-temporal data [6].

Other studies propose graphical conceptual models that extend existing standard languages (ER and UML). These models are described in the rest of this sub-section.

Reference [19] extends the MultiDimER model with a set of spatial concepts, such as spatial level, spatial measure, and spatial hierarchy. The authors make use of MADS
                           4
                        
                        
                           4
                           MADS is a well-known model for the conceptual design of spatio-temporal databases [36].
                         pictograms to represent spatial features such as geometries of levels and spatial topological relationships between spatial levels (e.g., inside).

To the best of our knowledge, only [11,19,24] propose UML extensions to conceptually design SDWs. Reference [20] extends the UML profile that is presented in [15]. This paper [20] introduces two new stereotypes, spatial measure (a measure with a geometrical data type) and spatial level (an aggregation level having at least one geometrical attribute). The spatial measure stereotype extends the measure stereotype which in turn extends the UML “Property” metaclass. The spatial level stereotype extends the level stereotype which in turn extends the UML “Class” metaclass. In a similar way, [11] extends the Unified Object Constraint Model [31] by introducing two spatial concepts: spatial measure (a measure with a geometrical data type) and spatial identified class (a class having a geometrical attribute representing its shape). Reference [24] formalises the SOLAP concepts proposed by [2] by defining a UML profile that represents (spatial) hypercubes and (spatial) dimensions by UML packages, (spatial) levels by classes and measures by attributes. This profile also provides users with interesting graphical notations for some spatial and temporal MD elements.

Finally, only [20,24] implement their models as plug-ins in the Eclipse
                           5
                        
                        
                           5
                           
                              http://www.eclipse.org/.
                         IDE and the Objecteering
                           6
                        
                        
                           6
                           
                              http://www.objecteering.com/.
                         UML-based tool, respectively.

It is important to cite in this context [8] and [37] that propose some UML based models to represent logical spatio-multidimensional models and their implementation in some CASE tools. These works do not take into account aggregations and they concern only the SDW logical schema.

@&#DISCUSSION@&#

In this section, we discuss the limitations of existing conceptual models for both OLAP and SOLAP applications according to the modelling requirements presented in Section 4. Table 1
                         shows the evaluation of spatio-multidimensional models with a visual notation.

The existing models meet the main classical modelling requirements (e.g., measure set and descriptive attributes). However, only [19] represents hierarchies explicitly. In fact, most of these models support multiple aggregation paths per dimension; however, paths forming the different hierarchies of a dimension cannot be distinguished because the hierarchies are not graphically represented. This fact makes it very difficult to express hierarchy-related aggregation rules.

Moreover, regarding MD element typing requirements, the spatially extended MultiDim model [19] also appears as the model that better addresses this issue. This model meets measure, dimension, hierarchy and aggregation level typing requirements; however, graphical notations are not provided for some types (e.g., the spatial hierarchy and the spatial dimension).

Let us now examine the existing models according modelling indicators.

None of the existing models make the distinction between the measure (attribute which is subject to data aggregations) and the indicator (a combination of one measure and a set of aggregation rules; see Section 4.2). Consequently, explicit base indicator and derived indicator requirements are not met by most of them. Reference [13] proposes a concept that is in some respects similar to the indicator, KindOfMeasure. This concept specifies the aggregation mode of a set of measures by defining a set of dimension-related aggregation rules. The problem of this approach, in addition to the derived indicators not being supported, is that one cannot define multiple indicators per measure.

As explained in Section 4.2, the indicators may be defined by different types of aggregation rules (dimension-related, hierarchy-related and sub-hierarchy-related). Apart from [13], which express textually dimension-related aggregation rules, all of the existing proposals do not appropriately represent the aggregation rules at the conceptual abstraction level. References [15,26,27] consider general aggregation constraints rather than aggregation rules. In other words, they express what aggregations are wrong rather than how users expect to aggregate measures.

Moreover, expressing, understanding and implementing these rules can be very studious tasks for users and designers because of the use of inappropriate formalisms, such as non-standard formalisms [27], UML notes [15], and a new standard language [26].
                           7
                        
                        
                           7
                           To the best of our knowledge, the Production Rule Representation (PRR) language used by the authors is not integrated in any modelling tool yet.
                        
                     

Regarding aggregate functions, all of these models represent aggregate functions by simple labels and ignore their other properties (applicability and distributivity types; see Section 4.2). We suggest a more appropriate modelling of aggregate functions by extending the UML Operation metaclass with some tagged value definitions (e.g., applicableTo) and OCL constraints, see Section 6.2.2, thereby allowing for more sophisticated and automated treatments.

We must highlight here that spatial models provide worse support for these aggregation properties than conventional ones. Except for [4], which uses an ambiguous ad hoc formalism to define aggregate functions that link cells of different granularities, none of the existing proposals in SDWs provide support for conceptual modelling of these issues. At the logical abstraction level, [12] expresses different aggregation constraints using an ad hoc language (hybrid natural with pictograms), which leads to the same modelling and implementing difficulties.

Concerning the development of data modelling tools supporting the proposed MD models (or more precisely metamodels), some of these metamodels, especially ones based on UML, have been implemented as plug-ins in existing CASE tools [9]. Concerning the implementation of conceptual data cube models (the instances of these meta-models) in a SOLAP architecture, the mappings to well known ROLAP implementation schemas (star schema, snowflake schema, etc.) have already been investigated in many studies [19,20] and some automatic implementations have been proposed [19]. In the context of SDW, [19] investigates the mapping of complex hierarchies in Oracle, [3] extends the star schema to handle spatial measures and [37] defines the particular spatial dimensions in order to tackle with geometry redundancy (GDW schema).

Finally, all of the existing models whether spatial or not, standards-based or not, in addition to some limitations regarding static aspects (e.g., explicit hierarchies), provide only a partial support for dynamic aspects related to the aggregation of measures (i.e. they allow expressing only one aggregator along all dimensions and they do not support aggregator distributivity and applicability types).

About implementation, no work addresses the implementation of complex indicators (only [15] supports the generation of the Server OLAP schema for Oracle). The generation of the SDW tier model is partially supported as they do not support several logical schemas (star and snow-flake schemas).

In this section, we detail our profile for spatial data cube conceptual modelling (Section 6.2). This profile satisfies all of the requirements that are defined in Section 4. The UML profiling principles are introduced in Section 6.1.

UML can be extended in two ways: (a) with profiles to adapt it to specific platforms (e.g., J2EE/EJB) or domains (e.g., finance and telecommunications) or (b) by creating new metamodels (composed of metaclasses and metarelationships) that modify its metamodel [23].

Using profiles, existing UML metaclasses (e.g., property, class, and association) can be customised with three mechanisms: stereotypes, tagged values and constraints.


                        A stereotype is an extension of a UML metaclass that defines additional tagged values, constraints and optionally a new graphical notation (icon). At the model level, it can be visualised in two ways: using its icon or a string representing its name between a pair of guillemets (stereotype name). Tagged values represent properties of stereotypes. At the model level, each tagged value is attached to a model element to which a stereotype is applied. A tagged value is represented by its name and an associated value from its value domain and is placed between a pair of braces ({tagged value name
                        =
                        value}). The constraints refine the definitions of stereotypes and tagged values and prevent their arbitrary use by designers when defining models. They can be used, for example, to restrict the attribute value domains or the stereotype associations. These constraints are often formalised using OCL.

In our approach, both static and dynamic aspects of MD models are declaratively modelled by means of UML class diagram elements (e.g., class, package, property, and operation). In addition to well-known requirements (such as the modelling of measures and dimensional attributes as UML properties, facts and aggregation levels as UML classes, and multiple hypercubes and dimensions as packages), we explicitly represent aggregate functions and aggregation rules by operations, indicators by classes, and hierarchies by packages. Similar to [13], we make use of packages to organise the MD constructs into different levels of detail. This organisation facilitates the understanding of complex models.

Our proposal is formally defined as a UML profile that is implemented in the MagicDraw tool.
                           8
                        
                        
                           8
                           
                              http://www.magicdraw.com/.
                         To the best of our knowledge, MagicDraw is the only tool that enables the checking of OCL constraints of profiles. Our profile defines a set of stereotypes and tagged values for the conceptual modelling of spatial data cubes. It is organised into three main packages (see Fig. 4
                        ). The SDW core model package allows for representing the main static concepts of SDWs. The aggregation model package allows for representing the aggregation knowledge of SDWs (i.e., the indicators and their aggregation rules). In the constraints package, a set of OCL constraints is defined to prevent the arbitrary use of the stereotypes and tagged values of our profile. We present in this section some representative profile-inherent structural constraints. User-defined constraints are presented in Section 7.

We represent the metamodel of the SDW core model package in Fig. 5
                           . Each SDW model (“SDWCoreModel”) is viewed as a non-empty finite set of hypercubes (“Hypercube”) for which at least one is spatial.

The hypercubes represent subjects of analysis. Formally, each hypercube consists of a (possibly empty) finite set of measures (“Measure”) gathered into a fact class (“Fact”) and a non-empty finite set of dimensions (“Dimension”). It is considered spatial (isSpatial
                           =
                           true) if it contains at least one spatial dimension or at least one spatial measure.

In Fig. 6
                           , the SDW model of a retail company presented in Section 3 is defined by two hypercubes, “SupplyingHypercube” and “SalesHypercube”. The sales hypercube is spatial because it contains two spatial dimensions, “Stores” and “Customers” (see Fig. 7
                           ). The supplying hypercube is not spatial. These two hypercubes are represented by two UML packages and share two dimensions (“Time” and “Products”).

Measures are represented by the Measure stereotype, which is defined as an extension of the UML property metaclass (see Fig. 5). Dimensions are represented by the Dimension stereotype, which extends the UML package metaclass. Each dimension is defined by a non-empty finite set of hierarchies (see Fig. 5).

Hierarchies allow for analysing facts at different levels of detail. Formally, each hierarchy (“Hierarchy”) consists of one or more related aggregation levels that form a Directed Acyclic Graph (DAG) with exactly one bottom level and several top levels. All of the hierarchies of a dimension have the same bottom level, which should be related to the hypercube's Fact. Hierarchies can have a level “All” with a single instance (hasAll
                           =true). In contrast to existing models, we represent hierarchies explicitly as specific packages using the Hierarchy stereotype (see Fig. 5).


                           Fig. 7 shows the class diagram of the sales hypercube. This hypercube is described by five measures (e.g., “price” and “quantity_sold”) that are grouped into the “Sales” fact class. These measures are analysed following five dimensions, “Products”, “Stores”, “Orders”, “Customers” and “Time”. Each dimension is described by at least one hierarchy. For example, the “Products” dimension contains one hierarchy (“ProductCategory”), and the “Customers” dimension contains two hierarchies (“CustomerType” and “CustomerLocation”). We will provide details about the NumericalMeasure stereotype and its tagged values in the next sub-sections.

Aggregation levels (AggLevel) define interesting viewing levels of measures according to multidimensional analysis requirements. Each aggregation level may contain several dimensional attributes (“DimensionalAttribute”), which can be of different types, as we will see below. Aggregation levels as fact classes are represented by extensions of the UML class metaclass (see Fig. 5).

To form hierarchies, aggregation levels must be linked to each other using aggregating relationships (“AggRelationship”) that define full or partial containment relationships between their members.

For example, the “CustomerLocation” hierarchy consists of four related aggregation levels (“Customer”, “City”, “State” and “Country”), and the “CustomerType” hierarchy consists of two related aggregation levels (“Customer” and “Type”) (see Fig. 8
                           ). Each one of the aggregation levels is described by a number of attributes. For example, “City” contains four attributes (e.g., “city_id”, and “city_name”).

To define the grain of measures, the fact class should be related to aggregation levels using dimensioning relationships (“DimRelationship”) (see Fig. 5). In each hypercube, the Fact must be linked to at least a bottom aggregation level of each dimension. As shown in Fig. 8, the “Sales” Fact is related to six aggregation levels (“Order”, “Customer”, “Product”, “Store”, “Month” and “Quarter”) by the DimRelationship associations to define the grains of sales and their analysis context.

To avoid an arbitrary use of our profile, we formalise each stereotype and tagged value with a set of OCL constraints. At the model level (i.e., when the profile is used by designers), these constraints are checked by MagicDraw at the conceptual abstraction level; this prevents incorrect modelling. For example, to guarantee that each spatial hypercube contains at least one spatial dimension or at least one spatial measure, we define the following OCL constraint in the context of the Hypercube stereotype.


                           
                              
                           
                        

According to this constraint, if we label the conventional hypercube “SupplyingHypercube” as spatial (isSpatial
                           =
                           true), MagicDraw returns the error message: “A spatial hypercube must contain at least one spatial dimension or at least one spatial measure”. This is because this hypercube does not contain any spatial dimensions or any spatial measures (see Fig. 9
                           ).

As stated in Section 4.1, the precise typing of multidimensional elements is a very important requirement. In our profile, we propose a precise typing of measures, dimensions, hierarchies, aggregation levels and aggregate functions. We define for each type a specific graphical notation to increase the readability.

As previously described in Section 4.1, the representations of the using and the additivity types of measures are very important requirements because these two characteristics influence their aggregations. To meet the measure using type requirement, we specialise the Measure stereotype into five sub-types: NumericalMeasure, SpatialMeasure, BooleanMeasure, TextualMeasure and TemporalMeasure (Fig. 10
                           ).

Following their additivity type, measures are classified into flow, stock and value per unit measures. These three types are defined by the enumeration AdditivityType. The additivity type of each measure is captured by its addType tagged value definition.

In the sales hypercube of Fig. 7, all of the measures are numerical. Regarding their additivity, the measures “price”, “quantity_sold”, and “costs” are of a flow type (the addType tagged value is set to Flow); “quantity_stock” is of a stock type and “unit_price” is of a value per unit type.

Dimensional attributes are modelled as attributes owned by aggregation levels (Fig. 10). We distinguish four sub-types: (a) identifying attributes (“IDAttribute”), used for grouping purposes when performing Roll-up operations; (b) descriptive attributes (“DescriptiveAttribute”), used in predicate roles of Slice and Dice operations; (c) “LevelGeometry” attributes, used to represent geometrical shapes of spatial dimension members; and (d) “LevelTemporality” attributes, used to model temporal extents of temporal members. The LevelGeometry attributes must be of spatial data types (e.g., Point, and Polygon). The LevelTemporality attributes are characterised by their temporal data types (e.g., TimeInstant, and TimeInterval) and their time granularities (e.g., Second, and Minute) captured by the granule tagged value definition. The different time granularities are defined by the TimeGranularity enumeration.

To define data types of spatial and temporal MD attributes, we have created new data types by considering the MADS [35] spatial (e.g., Point, Line, Region, and RegionSet) and temporal (e.g., TimeInstant, TimeInterval, and TimeInstantSet) data types. These new data types are defined as extensions of the UML DataType metaclass. For thematic attributes, we consider the OCL and UML predefined data types (e.g., Real, String, and Boolean).

As presented in Fig. 5, we specialise dimensions, hierarchies and aggregation levels into three categories (thematic, spatial, and temporal). The spatial dimension (“SpatialDimension”) represents the locations of facts as an analysis axis and includes at least one spatial hierarchy. The temporal dimension (“TemporalDimension”) records time instants or time periods when facts occurred; it only contains temporal hierarchies. To be contrasted with the spatial and temporal ones, the thematic dimension (“ThematicDimension”) stores only members that are neither visualised on maps nor define time frames of facts.

The following OCL constraint guarantees that each spatial dimension contains at least one spatial hierarchy.


                           
                              
                           
                        

A spatial hierarchy (“SpatialHierarchy”) includes at least one spatial aggregation level, while a temporal hierarchy (“TemporalHierarchy”) contains only temporal aggregation levels. A thematic hierarchy (“ThematicHierarchy”) contains only thematic aggregation levels.

A thematic aggregation level “ThematicAggLevel” contains only identifying and descriptive attributes. In addition to the identifying and descriptive attributes, a spatial aggregation level (“SpatialAggLevel”) is characterised by its geometry (“LevelGeometry”), and a temporal aggregation level (“TemporalAggLevel”) by its temporality (“LevelTemporality”).

The following OCL constraint guarantees that each spatial aggregation level contains exactly one LevelGeometry attribute.


                           
                              
                           
                        

Thus, reconsidering the sales hypercube (see Fig. 7), “Orders” and “Products” are thematic dimensions; “Customers” and “Stores” are spatial dimensions; and “Time” is a temporal dimension. Each one of these dimensions is composed of specific types of hierarchies. For example, the spatial dimension “Customers” is composed of one thematic hierarchy (“CustomerType”) and one spatial hierarchy (“CustomerLocation”). The latter is defined by four related aggregation levels (one thematic level and three spatial levels), as shown in Fig. 8.

The aggregation levels are described by different types of dimensional attributes according to their nature (thematic, spatial or temporal). For example, the spatial aggregation level “City” contains one identifying attribute (“city_id”), two descriptive attributes (“city_name” and “founding_date”), and one LevelGeometry attribute (“geo”) having a RegionSet data type (see Fig. 8).

The aggregation model package represents the aggregation knowledge of spatial data cubes at the conceptual abstraction level. It extends UML with a set of new elements that reference some elements of the core SDW model (Section 6.2.1). Its metamodel is depicted in Fig. 11
                           .

In our approach, each hypercube (“Hypercube”) can be enriched with a finite set of indicators (“Indicator”), which can be derived (“DerivedIndicator”) or not (“BaseIndicator”).

Each base indicator involves either an SDW attribute (a measure or a dimensional attribute) or nothing. The latter (nothing) is particularly important when analysing factless facts.
                              9
                           
                           
                              9
                              Factless facts are described by empty sets of measures and are typically used for event tracking [27].
                            In this context, we can only count fact instances or aggregate attribute values of dimension members involved in facts.

The following OCL constraint verifies that the measure referenced by the base indicator exists in the SDW model (when it involves a measure).


                           
                              
                           
                        

For example, as shown in Fig. 13
                           
                           , the indicator “Total_Quantity_Sold” involves the measure “quantity_sold”; the indicator “Total_Nb_Orders” involves the dimensional attribute “order_id” and computes the total number of orders; and “Total_Nb_Sales” calculates the total number of sales and does not involve any element of the core model. In the remainder of this paper, we refer to the element that is subject to aggregations as the Aggregated Element.

Moreover, each basic indicator is defined by a finite ordered set of aggregation rules, and each aggregation rule is associated with an aggregator (an aggregate function), to conceptually define how the indicator should be calculated when navigating along dimension hierarchies.

In our proposal, aggregate functions are modelled as UML operations using the “Aggregator” stereotype (Fig. 11). Following the Aggregator definition, each aggregate function is characterised by a finite set of SDW data types to which it can be applied (in line with the applicability type requirement, Section 4.2), which is captured by the applicableTo tagged value that references the SDW data types defined in the SDW core model package.

For example, the Count aggregator can be applied to all SDW data types (applicableTo
                           =
                           SDWDType), Sum can be applied to only numerical data types, and the GeometricUnion can be applied to only spatial data types (Fig. 12).

In line with the distributivity type requirement (see Section 4.2), the Aggregator stereotype is specialised into three sub-types: (a) distributive (“DistributiveAggregator”), (b) algebraic (“AlgebraicAggregator”), and (c) holistic (“HolisticAggregator”) (see Fig. 11).

For example, GeometricIntersection is distributive (the applied stereotype is DistributiveAggregator), Centroid is algebraic, and EquiPartition is holistic (Fig. 12).

It is worth noting here that new aggregators (namely user-defined ones) can be easily added to the pre-defined aggregators (Fig. 12) to enable richer analysis.

An aggregation rule specifies the aggregate function that must be applied to aggregate values of the Aggregated Element along a given dimension or a given hierarchy or between two given aggregation levels of the same hierarchy. Each aggregation rule is characterised by its name and its precedence order (order) with respect to the other aggregation rules of the base indicator (see Fig. 11).

In our profile, aggregation rules are modelled by extensions of UML operations; the order and aggregator tagged values are their parameters. As described in Section 4.2, aggregation rules are classified into four categories (see Fig. 11). These categories are described in the following sub-sections.

Each one of these rules defines the aggregate function (aggregator tagged value) that should be applied to the aggregated element independently of any dimensions (i.e., along all dimensions) (see Fig. 11).

The following OCL constraint ensures that each base indicator must contain at most one aggregation rule of this type.


                           
                              
                           
                        

In Fig. 13, all of the base indicators are defined using AggRule aggregation rules (“R1” to “R6”). For example, “R1” states that the Sum must be applied to the “quantity_sold” to compute the “Total_Quantity_Sold” base indicator.

A DimensionAggRule defines an applicable aggregate function to the aggregated element involved by the base indicator when navigating along a non-empty set of the hypercube's dimensions (onDimension) (see Fig. 11). For example, to compute the “Stock_Level” indicator, we must first sum the measure “quantity_stock” on the dimensions “Customers”, “Orders”, “Products” and “Stores” (rule “R7” with precedence order=0), then apply Avg on “Time” (rule “R8” with a precedence order=1).

The following OCL constraint verifies that each base indicator does not contain conflicting DimensionAggRule rules that define different aggregate functions on the same dimension.


                           
                              
                           
                        

A rule of this type defines the applicable aggregate function on a non-empty set of hierarchies (Fig. 11). For example, the following base indicator (Fig. 15
                           
                           ) is defined by two aggregation rules: “R9” and “R10”. “R10” is a HierarchyAggRule, which states that “quantity-sold” values must be averaged (Avg) when navigating on the “CustomerLocation” hierarchy to compute this indicator. Sum is specified for the other hierarchies (“R9”).

A rule of this type defines the applicable aggregate function when navigating from an aggregation level to another aggregation level that is coarser but of the same hierarchy (Fig. 11). For example (Fig. 16
                           ), to compute the maxima of city turnovers (“MaxTurnoverPerCity”), we must sum the “price” values from the “Customer” level to the “City” level to calculate the turnovers per city (“R12”); subsequently, we apply Max (“R13”). On the other dimension hierarchies, Sum is stated (“R11”).

As stated in Section 4.2, indicators can also be calculated from other indicators. In our profile, a derived indicator (“DerivedIndicator”) is defined by its name and a finite algebraic expression over the other indicators (derived or not) (see Fig. 11). This expression is specified by a “derive” OCL 2.0 expression on an attribute named ‘formula’.

The DerivedIndicator definition is formalised using OCL constraints specified at the metamodel abstraction level. For example, the following OCL constraint guarantees that every derived indicator has exactly one attribute named formula with an OCL OpaqueExpression data type and a non-null default value.


                           
                              
                           
                        

In Fig. 17
                           , an example of a derived indicator is depicted (“Profit”). It is defined using an OCL 2.0 Opaque Expression (the formula tagged value) and computes the value difference of two base indicators, “Turnover” and “Total_Costs” (see Fig. 13), which are referenced by the operand tagged value.

In this section, we show how conceptual (spatial) MD models designed using our profile are automatically implemented using our tool SpatialDC Generator in the following ROLAP architecture composed of the spatial DBMS Oracle Spatial and the OLAP Server Mondrian (Fig. 18
                     ).

ROLAP architectures use relational DBMSs (e.g., Oracle Spatial) to maintain data in tables and OLAP servers (e.g., Mondrian) to build logical OLAP structures (e.g., data cubes and hierarchies) on the top of the DBMSs.

Oracle Spatial is a DBMS that provides a native support for spatial data allowing creating tables with spatial columns and indexes on these data.

Mondrian
                        10
                     
                     
                        10
                        
                           http://www.pentaho.com.
                      is an open-source OLAP server that is part of the Pentaho Business Intelligent Suite. Mondrian builds OLAP logical structures (e.g., data cubes, dimensions and measures) on top of any DBMS using a specific XML file. It is based on the pseudo-standard OLAP query language, MDX (MultiDimensional eXpressions language).
                        11
                     
                     
                        11
                        
                           http://msdn.microsoft.com/en-us/library/ms145506.aspx.
                      As described in Section 2.2 SOLAP tools rely on a SOLAP server tier that extends traditional OLAP functionalities to defines and query spatial dimensions and measures. To best of our knowledge [4] the only operational SOLAP server is GeoMondrian, which support GeoMDX that is an extension of MDX with topological operators. Despite supporting SOLAP issues, no SOLAP client on the top of GeoMondrian has been developed yet (expect some prototypes [18]). On the other hand, some commercial and free SOLAP clients have been developed (e.g. Map4Decision, JRubik). These tools (i) allow users to query data cubes defined using XMLA-compliant OLAP servers, and (ii) support cartographic displays by adapting the schema used by the OLAP server to represent the data cube. Thus, in this work we opt for a more general as possible SOLAP architecture by using the XMLA-compliant OLAP Server Mondrian.

Finally, SpatialDC Generator has been built on the top of Spatial OCL2SQL. The Spatial OCL2SQL is a Java open source tool which integrates the spatial extensions of OCL called OCL 9IM and OCL ADV [11]. It automatically generates SQL scripts for Oracle Spatial from Spatial OCL constraints. Its main inputs are: (i) a conceptual data model defined by an XMI schema, (ii) an OCL constraint file and (iii) a geometric metadata file. The tool outputs SQL scripts to create the SDW physical schema in the Oracle Spatial DBMS and a set of SQL queries and triggers to implement the OCL constraints allowing data integrity checks.

Thus, SpatialDC Generator takes as input the XMI (XML Metadata Interchange) file representing our UML profile class diagram. XMI is a standard used to represent and exchange UML models. It can be automatically generated by MagicDraw. Fig. 19b shows an excerpt of the XMI file representing our UML model. For example, the level class “Store” is represented using a tag with a unique identifier in the file.

A visual interface SpatialDC Generator allows users to load the XMI file and to choose the type of schema to use (star or snow-flake) (Fig. 19a); then the tool automatically generates (Fig. 18):
                        
                           -
                           A visual representation of SDW elements (Fig. 19c).

the star or snow-flake schema for Oracle that represents the persistent storage of MD data in terms of tables and columns (Section 7.1).

the XML Mondrian star or snow-flake schema representing spatio-multidimensional elements (facts, levels, etc.) and MDX-based calculated members for complex indicators (Section 7.2).

The following sub-sections describe the implementation of these two parts for the retail MD model designed using our profile in Section 6.2. A demo of our tool by using a real case study concerning energetic analysis of farms [14] is available at http://eric.univ-lyon2.fr/~sbimonte/SDWTool.mp4.

The user has chosen the SDW logical model (star or snow-flake schema) that should be generated and has loaded the XMI file (Fig. 19c), the original XMI of the SDW core model is then transformed according to the chosen logical model and it is passed to Spatial OCL2SQL that generates the Oracle SQL scripts.

In Fig. 20
                        , we present an excerpt of the star schema implementing the retail conceptual MD model in Oracle Spatial. It is important to note that in this type of implementation (star schema), every dimension is implemented by a denormalised table grouping all the dimension attributes — for example the table that implements the Stores dimension is shown in Fig. 20b.

In order to generate the SOLAP server model, SpatialDC Generator takes as input the SDW core model and the Aggregation model XMI files and automatically generates the Mondrian XML schema with dimensions according to the logical schema (star and snow-flake schema) previously chosen, and the indicators by means of MDX formula.


                        Fig. 21
                         shows an excerpt of the generated Mondrian schema representing the OLAP dimensions and the hierarchies of the sales hypercube modelled using the star schema. The mappings of these OLAP structures to the star DB schema tables and columns are also indicated.

In Fig. 22
                         is shown the Mondrian XML snow-flake schema. We can note that a new tag JOIN is used since aggregation levels are represented with different tables.

The novelty of our proposal is the implementation of complex indicators using MDX formulas. Indeed, to the best of our knowledge, only two studies [38,39] address the derivation of OLAP metadata from conceptual MD models; these studies assume the aggregate function Sum by default and do not address other aggregate functions.

Thus, we automatically generate the Mondrian schema and in particular it takes as input the XMI file of the spatial MD model designed using our profile and generates the Mondrian schema with an ad hoc MDX formula for each indicator and its aggregation rules (AggRule, DimensionAggRule, HierarchyAggRule and LevelToLevelAggRule).

In the rest of this section, we detail the MDX implementations of the different types of indicators that are designed for sales analysis. Note that these MDX formulas are part of the retail Mondrian schema (Fig. 21).
                           
                              A)
                              The base indicators with only one aggregation rule of type AggRule (see 
                                 
                                    Fig. 23
                                 ).

Each simple base indicator (e.g., “Total_Quantity_Sold”) is implemented as a Mondrian measure element by indicating the aggregated DB column (“QUANTITY_SOLD”) and the aggregator (Sum). These two XML properties correspond, respectively, to the aggregatedAttribute and aggregator tagged values of the conceptual base indicator (see Fig. 13).

The base indicators with at least one aggregation rule of type DimensionAggRule (see 
                                 
                                    Fig. 24
                                 ).

Each base indicator of this type (e.g., “Stock_Level” in Fig. 14) is implemented using a calculated member element. In Fig. 24, the MDX formula returns the average of “STOCK_QUANTITY” if the “Time” dimension is selected and its sum if others are selected. Note that this calculated member uses an intermediate measure element (“quantity_stock_Sum”) whose visibility is set to false.

The base indicators with aggregation rules of type HierarchyAggRule (see 
                                 
                                    Fig. 25
                                 ).

Like indicators of type B above, these indicators are implemented using calculated member elements. For the exemplified indicator (see Fig. 25), the MDX formula returns the average of sold quantities if the “CustomerLocation” hierarchy is selected and their sum if the others are selected; this computation is performed using the “Total_Quantity_Sold” measure element that has already been defined (Fig. 23
                                 ).

The base indicators with aggregation rules of type LevelToLevelAggRule (see Fig. 26).

These indicators are also defined as calculated member elements. For example, the “MaxTurnoverPerCity” base indicator represented in Fig. 16 (Section 6.2.2) is implemented by the calculated member shown in Fig. 26
                                 
                                 
                                 . The MDX formula returns the maxima of city turnovers if levels from “State” to “All” are selected; otherwise, it returns the “Turnover” measure defined above in Fig. 23.

The derived indicators (see Fig. 27).

Finally, we also implement derived indicators by calculated member elements. For example, the derived indicator “Profit”, whose conceptual design is shown in Fig. 17 (Section 6.2.2), is implemented by the calculated member depicted in Fig. 27
                                 . The MDX formula defines a subtraction of “Total_Costs” from “Turnover”. These two measure elements are defined in Fig. 23 above.

Data Warehouses (DWs) and OLAP tools are often used in BI applications in support of decision-making processes [1]. DWs provide OLAP tools with integrated and historical data stores that are structured in a manner that reveals the inherent multidimensionality of decisional data. Based on some metadata, OLAP tools query these data stores and construct analytical models (cubes, dimensions, statistical summaries or indicators) that transform raw business data into strategic business insights. These tools implement OLAP operators (e.g., Roll-up) to allow decision makers to navigate the constructed analytical models.

On the other hand, Spatial Data Warehouses (SDWs) and Spatial OLAP (SOLAP) tools were introduced with the aim of enriching OLAP with spatial analysis by taking into account the geographical part of the increasing volumes of geo-referenced data, which are generated by means of several technologies (e.g., sensor networks) [2]. SOLAP combines OLAP analysis with cartographic visualisations of GIS systems, allowing understanding of the geographical distributions of analytical data. SOLAP extends OLAP with spatial OLAP operators (e.g., Spatial Roll-up) to allow interactive spatio-multidimensional explorations of analytical data.

In the literature, the conceptual design of DW and SDW systems has been largely studied, and many MD models have been proposed. Mainly, extensions of standard formalisms of conceptual database modelling (ER and UML) are suggested. The reason is that these formalisms require much less learning and modelling effort than ad hoc ones. Nevertheless, an increasing number of authors introduce UML-based models because this language provides powerful constructs to better represent static and dynamic aspects of complex applications. Another outstanding advantage of UML is that it can be extended to adapt it to specific domains or platforms.

In general, all of the existing MD models (spatial or not) focus on the design of the warehouse structures and underestimate the aspects related to the aggregation of data, which are central to DW applications. In addition to some limitations concerning the modelling of the warehouse model part, these models do not provide the appropriate support for the conceptual design of the aggregation model part (indicators and their aggregation rules).

In this work, motivated by the lack of a standard formalism for the conceptual design of (spatial) data cubes that takes into account these two parts (warehouse and aggregation model parts), we have proposed a new UML profile, and we have implemented it in the UML-based tool called MagicDraw. This profile, in addition to satisfying the main classical modelling requirements identified in the literature (e.g., explicit complex hierarchies, and aggregate functions; see [6]), supports complex data aggregations.

Finally, we have proposed the automatic implementation of our profile in a ROLAP architecture that is able to support different representations (star and snow-flake schema) and implement complex indicators by means of ad-hoc MDX formulas.

Future works concern the extension of our tool for implementing other SDW and SOLAP server schemas [8]. We also want to formally show whether our proposal reduces modelling time and improves productivity during design.

@&#REFERENCES@&#

