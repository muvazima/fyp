@&#MAIN-TITLE@&#Resource allocation using Link State Propagation in OFDMA femto networks

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           RALP local scheduler – RALP uses messages exchanges and a global allocation algorithm to assign allocation units (AUs) to the various FAPs. In this article, we have proposed a local scheduling scheme that each FAP uses to assign AUs to the various user equipments (Ues). The algorithm uses the modulation and coding scheme (MCS) of the AUs to do the assignment.


                        
                        
                           
                           The global allocation algorithm assigns AUs to the various FAPs. However, one FAP might require more AUs than what it has been assigned. If the neighboring FAPs are not using all their assigned AUs, then this FAP can borrow AUs from the neighboring FAPs and use it to satisfy its requirements. The borrowing algorithm describes how FAPs can borrow AUs from other FAPs.


                        
                        
                           
                           RALP’s main disadvantage is its convergence time as the message exchange rounds depend on the neighborhood graph. In this article, we introduce the concept of clusters, where the data transfer can proceed after a certain number of message exchange rounds.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

OFDMA

Femtocells

Allocation

@&#ABSTRACT@&#


               
               
                  Femtocells offer many advantages in wireless networks such as improved cell capacity and coverage in indoor areas. As these femtocells can be deployed in an ad hoc manner by different consumers in the same frequency band, the femtocells can interfere with each other. To fully realize the potential of the femtocells, it is necessary to allocate resources to them in such a way that interference is mitigated. We propose a distributed resource allocation algorithm for femtocell networks that is modelled after link-state routing protocols. Resource allocation using Link State Propagation (RALP) consists of a graph formation stage, where individual femtocells build a view of the network, an allocation stage, where every femtocell executes an algorithm to assign OFDMA resources to all the femtocells in the network and local scheduling stage, where a femtocell assigns resources to all user equipments based on their throughput requirements. Our evaluation shows that RALP performs better than existing femtocell resource allocation algorithms with respect to spatial reuse and satisfaction rate of required throughput.
               
            

@&#INTRODUCTION@&#

Wireless capacity has increased significantly due to reduced cell sizes and transmission distance, making it possible for wireless networks to support high data-rate applications. The infrastructure needed for reducing the cell size, namely the macro base stations, is expensive. One possible alternative is to deploy femtocells [1], that are short range, low cost and low powered base stations, in homes or offices. Femtocells can be deployed in ad hoc manner by different consumers. Femtocells increase capacity and improve coverage by the short transmit-receive distance between base stations and users. This also improve macrocell reliability as some users are offloaded to femtocells, freeing up macrocell resources.

There are two kinds of interference that can occur when femtocells are deployed in a macrocell. Cross-tier interference occurs between femtocells and macrocell, whereas intra-tier interference takes place between multiple femtocells using the same frequency spectrum. We study resource allocation among femtocells to mitigate intra-tier interference in this article.

We focus on OFDMA femtocell networks where the frame consists of time–frequency slots. Our unit of allocation, which we refer to Allocation Unit (AU), may be a time-subchannel slot, as in WiMAX networks or a resource block, as in LTE networks. Any other resource allocation unit can be also referred to as an AU. AUs may have different rates for different femtocells, as an AU can have different modulation and coding parameters for different femtocells, due to the adaptive modulation and coding feature of OFDMA networks. Every femtocell consists of a femtocell base station, which we also refer to as a femtocell access point (FAP), and one or more user equipments (UEs). We use the terms femtocell BS and FAP interchangeably from now on.

The authors in [2] compared different resource allocation techniques and concluded that a centralized co-channel assignment, where every femtocell can use any of the resources, results in the best network performance. However, as large number of femtocells can be deployed randomly without any central coordination, a centralized resource allocation scheme is not practical. We propose the resource allocation using Link State Propagation (RALP) algorithm – a distributed and scalable framework where femtocells construct a global view of the network and derive an allocation map of resources to each femtocell that is consistent. Hence, our algorithm behaves as a centralized co-channel assignment algorithm, but it is distributed in reality and no centralized coordination is needed.

RALP works in three stages. In the first phase, user equipments (UEs) sense the channel and find out the interference patterns. This information is relayed to the serving femtocell and hence the femtocells knows about its neighbors. At regular intervals, a FAP broadcasts its ID and the IDs of all its neighbors. This infomation is conveyed to all the other FAPs in the macrocell via UE relaying. After this information is exchanged, each femtocell constructs a network graph with femtocells as nodes and interference between femtocells represented as edges. The entire network, with multiple femtocells under a single macro cell, is represented as a graph with one or more connected components. In the second stage of the RALP protocol, each femtocell independently executes an allocation algorithm to assign AUs to itself and other femtocells in its connected component. All the femtocells in a connected component of the graph must execute the same allocation algorithm, so that the AU allocation is consistent. This stage assumes that all the AUs have the same rate. In the last stage of RALP, the local scheduler at each FAP allocates AUs to UEs based on their throughput requirement and the modulation and coding scheme (MCS) of the AUs.

We evaluate our algorithm by comparing it with two existing algorithms that focus on femtocell interference management – Distributed random access scheme (DRA) [3] and Femtocell Cluster-Based Resource Allocation Scheme (FCRA) [4].

@&#RELATED WORK@&#

Resource allocation in wireless mesh and ad hoc networks has been widely studied [5,6]. The nodes in the network are assigned channels, and the number of channels assigned depends on the number of radios in a node. Two nodes are assigned the same channel if they want to communicate with each other. This is different from resource allocation in femtocells, where there is no data transfer between femtocells and a femtocell can be assigned as many AUs as possible.

Autonomous component carrier selection (ACCS) is a fully distributed, scalable and robust interference management scheme, where each cell selects the most attractive frequency configuration [7].

The authors in [8] study two classes of interference management techniques: semi-static interference management, where neighboring interfering cells coordinate resources over 100s of ms, and fast dynamic interference management, where resource coordination is done in the order of ms.

Fractional Frequency Reuse (FFR) mitigates interference by assigning different portions of the frequency to neighboring cell edge users. A graph-based framework for dynamic FFR in multicell OFDMA networks is described in [9]. A survey on the different resource allocation and interference management techniques is given in [10]. Some of the interference management approaches, like femto-aware spectrum management, and beam subset selection strategy, only deal with cross-tier interference, whereas clustering of femtocells, and fractional frequency reuse (FFR) mitigate both cross-tier and intra-tier interference. The paper compares the different schemes on different parameters like complexity, efficiency, and access mode, and proposes that FFR is the best approach with low complexity and high efficiency.

The authors in [2] discuss different subchannel allocation techniques in OFDMA femtocells that can be broadly divided into two classes – orthogonal channel assignment, and co-channel assignment. Orthogonal channel assignment divides the spectrum into two sets and only deals with cross-tier interference. Co-channel assignment can further be divided into three classes. The first co-channel assignment technique, 
                        
                           
                              
                                 FRS
                              
                              
                                 x
                              
                           
                        
                     , divides the spectrum into x fragments. Macrocells can use the entire spectrum, whereas each femtocell randomly selects a fragment that it can use. In Distributed-dynamic frequency planning (D-DFP), each femtocell uses measurement reports to sense the environment and sorts subchannels by priority based on interference. The subchannel lists are periodically updated by each femtocell. The centralized DFP (C-DFP) approach is similar to D-DFP, but here a centralized subchannel broker uses the measurement reports sent from the femtocells to plan the frequency usage. The paper shows that C-DFP provides the best network performance, as it uses a global viewpoint of the network. These results motivate us to propose RALP, a distributed approach that allocates resources using a global viewpoint of the network.

We compare our work with DRA [3] and FCRA [4], because they address femtocell resource allocation where each femtocell contain more than one user. Also, FCRA, DRA and RALP all assign time–frequency resources to femtocells, unlike the other proposals where either subcarrier or subband allocation is done. The authors in [3] consider two models: isolated and coupled. In the isolated model, the resources are split between the macro and femtocells so that there is no interference. In the coupled model, some resources can be shared between the macro and femtocells and hence some schedule information needs to communicated by the macro cell to the femtocell. The paper uses the distributed random access scheme (DRA) for resource allocation among femtocells in the isolated model. DRA uses hashing to allocate time–frequency slots (tiles) to interfering femtocells. Each femtocell divides the tiles into blocks based on its interference degree. In the first stage, each femtocell uses hashing to assign tiles to itself. Subsequent stages are used for collision resolution by rehashing. The authors assume the existence of a centralized entity for coordinating the hash function. They also propose an extension of DRA, DRA+, that senses idle tiles as well as collided tiles and rehashes based on the remaining free resources. Algorithm Femtocell-Macro Allocation (FMA1) splits resources between macro and femtocells by adapting to changes in user population. The authors also propose Location based Resource Allocation (LRA) and FMA2 algorithms for the coupled model. Although DRA is a fully distributed algorithm with an acceptable worse-case performance guarantee, it may not use all the available tiles, as shown in the paper.

Femtocell Cluster-Based Resource Allocation Scheme (FCRA) uses a hybrid centralized/distributed approach where the femtocells are partitioned into clusters; each cluster has a cluster head that allocates resources to all the nodes in the cluster [4]. FCRA consists of three stages. In the first stage, femtocells are assigned to clusters. A femtocell becomes a cluster head (CH) if it has the highest interference degree among its neighbors; otherwise, it becomes a cluster member (CM) and finds out which CH it should attach to. In the second stage of FCRA, each cluster tries to minimize the maximum difference between the tiles assigned and tiles requested by the femtocells. Interfering femtocells, belonging to different clusters, may still be assigned the same tiles; hence, each femtocell samples a Bernoulli distribution and decides whether it should keep using a tile or discard it in the third stage of the algorithm. Q-FCRA ([11]) modifies FCRA to distinguish between high priority and Best Effort users.

We consider a macro cell embedded with several femtocells. All the base stations (BSs) use OFDMA technology where the whole frame is divided into time–frequency slots called AUs. The macro and femto BSs have no direct coordination using the wireless medium. We denote the set of femto base stations by B and the set of users by U. We assume that the users are uniformly distributed within the femtocells and a user is associated with one femto base station. Thus 
                           
                              B
                              (
                              j
                              )
                              =
                              i
                           
                         denotes user j is associated with base station i. We assume every femtocell BS has a unique Identifier and the Identifiers can be sorted in some order.

The location of the FAPs are not fixed and can change from time to time when the consumer moves the FAP to a different location. The number of UEs associated with a FAP and their QoS requirements can also change; however, the number of UEs associated with a FAP is restricted to a maximum. The femtocells are closed access and have omni directional antennas.

We assume there is some scheme that handles interference between macrocell and femtocells. We only consider interference between femtocells in this article.

RALP is a framework where AUs are allocated to FAPs in a distributed manner, but each femtocell constructs a global view of the network. We represent the femtocells under a macrocell as a graph, where the femtocells form the nodes of the graph, and edges denote connections between the femtocells. If two nodes share an edge, that means they interfere with each other and cannot be assigned the same AU. The graph may have several connected components. Each node then assigns AUs to itself and other nodes so that interfering nodes are not assigned the same AUs. As each node executes the same algorithm that depends on the unique identifiers, the output of each node will be the same and there will not be any conflicts.

The goals of our algorithm are:
                           
                              •
                              assign AUs to femtocells such that interfering femtocells are not assigned the same AU

adapt to changes in channel conditions, femtocell additions and removals

try to maximize spatial reuse 
                                    
                                       max
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ,
                                             a
                                          
                                       
                                       
                                          
                                             X
                                          
                                          
                                             i
                                             ,
                                             a
                                          
                                       
                                    
                                  where 
                                    
                                       
                                          
                                             X
                                          
                                          
                                             i
                                             ,
                                             a
                                          
                                       
                                    
                                  indicates whether AU a is assigned to femtocell i
                              

try to ensure some amount of fairness in the resources allocated to the femtocells

deal with the unreliable nature of wireless networks

RALP consists of three stages - graph construction stage, allocation stage and local scheduling stage. These stages are described below.

Each UE associated with a FAP senses the wireless medium and finds out the interfering FAPs. This information is conveyed to the serving FAP of the UE. Thus, a FAP gets information from its neighbors in this manner. A FAP broadcasts its own ID and its view of the network at regular intervals. The broadcast message includes information about other FAP IDs, and the distance between this FAP and the other FAP (for example, whether the other FAP is a immediate neighbor, or 2-hop neighbor and so on). This is similar to ”Link State Advertisements” in link state protocol [12]. UEs act as relays and distribute this information across different femtocells. Thus, after some time, all the FAPs get the complete neighborhood information and can build the network graph.

The goal of the allocation stage is to assign AUs to femtocells such that the same AU is not assigned to interfering femtocells and two non-interfering femtocells can use the same AU. After every FAP builds the graph, its executes the allocation algorithm independently as each FAP has the complete view of the connected component of the graph it belongs to.

If an algorithm only tries to maximize spatial reuse, it might assign the AUs to only some nodes, and starve other nodes. The goals of RALP is to maximize throughput while ensuring some degree of fairness. One way to do this is to use proportionally fair scheduling algorithm. However, as the AUs can have different rates depending on which UE the AUs are assigned to, and as the AUs are assigned to specific UEs by the femtocell’s local scheduler, we assume all AUs have the least possible rate in this phase of the algorithm. At each AU allocation step i, that is, when AU i is being allocated, the scheduler looks at the FAP with the minimum assigned number of AUs and then allocates AU i to this FAP. The algorithm then considers all the other FAPs and checks whether this AU can be assigned to these other FAPs. The allocation algorithm loops through all the AUs and all the FAPs; hence, the time complexity is 
                              
                                 O
                                 (
                                 NT
                                 )
                              
                           , where N is the number of FAPs, and T is the number of AUs.
                              
                                 
                                    
                                    
                                       
                                          
                                             Algorithm 1: Global allocation algorithm
                                       
                                    
                                    
                                       
                                          N =number of FAPs;
                                       
                                       
                                          K =number of AUs;
                                       
                                       
                                          
                                             for 
                                             k 
                                             =1 to K 
                                             do
                                          
                                       
                                       
                                          
                                             Let i be the FAP with the least number of allocated
                                       
                                       
                                          
                                             AUs;
                                       
                                       
                                          
                                             assign AU k to FAP i;
                                       
                                       
                                          
                                             
                                             for 
                                             j 
                                             =1 to N 
                                             do
                                          
                                       
                                       
                                          
                                             
                                             if 
                                             FAP j does not interfere with FAP i 
                                             then
                                          
                                       
                                       
                                          
                                             
                                             assign AU k to FAP j;
                                       
                                       
                                          
                                             
                                             end
                                          
                                       
                                       
                                          
                                             
                                             end
                                          
                                       
                                       
                                          
                                             end
                                          
                                       
                                    
                                 
                              
                           
                        

RALP local scheduler allocates AUs to UEs in a particular femto cell. The scheduler first assigns AUs to the cell edge UEs as cell edge UEs are more susceptible to interference. So given the list of AUs allocated to FAP i by the global allocation algorithm, the local scheduler first assigns AUs to the cell edge UEs based on their requirements and the rate of the AUs. Once the requirements of the cell edge UEs have been met, the local scheduler starts assigning the cell center UEs. If after assignment of AUs to UEs, there are still some leftover AUs, then these AUs become eligible for borrowing by other neighboring FAPs. The FAP then constructs a message with the list of the AUs assigned to cell center and cell edge UEs and this message is relayed to the neighboring FAPs.

If, on the other hand, FAP j is not able to satisfy the throughput requirements of all its UEs, after its local scheduler finishes assigning all the AUs allocated to it by the global algorithm, it sends a message containing its schedule to the neighboring FAPs. Once FAP j receives scheduling messages from all its neighboring FAPs, it checks to see whether any AU is not being used by any of the neighboring FAPs. The AUs not being used can be borrowed by this FAP. These AUs are first assigned to cell edge UEs if any cell edge UEs require more AUs. If all the cell edge UEs have met their throughput requirement, these AUs are assigned to the cell center UEs. If there are no more AUs left to be allocated to the cell center UEs, the cell center UEs are assigned AUs that are assigned to other cell center UEs in neighboring FAPs.

The local schedule is valid for a particular number of frames called a scheduling period. After each scheduling period, the local schedule is recomputed and the messages are exchanged between neighboring FAPs. So the borrowing period is equal to the scheduling period. Algorithms 2 and 3 shows the local scheduler and borrowing algorithms.
                              
                                 
                                    
                                    
                                       
                                          
                                             Algorithm 2: Local scheduling algorithm
                                       
                                    
                                    
                                       
                                          A =List of AUs allocated to FAP i;
                                       
                                       
                                          M =list of cell edge UEs of FAP i;
                                       
                                       
                                          
                                             for 
                                             i 
                                             =1 to 
                                             
                                                
                                                   |
                                                   M
                                                   |
                                                
                                              
                                             do
                                          
                                       
                                       
                                          
                                             Let 
                                                
                                                   
                                                      
                                                         BW
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                              be the throughput requirement of UE i;
                                       
                                       
                                          
                                             
                                             while 
                                             
                                                
                                                   
                                                      
                                                         BW
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   >
                                                   0
                                                
                                              
                                             do
                                          
                                       
                                       
                                          
                                             Let AU j be the AU with the highest rate for UE i;
                                       
                                       
                                          
                                             assign AU j to UE i;
                                       
                                       
                                          
                                             delete j from A;
                                       
                                       
                                          
                                             
                                             if 
                                             A is empty 
                                             then
                                          
                                       
                                       
                                          
                                             
                                             exit;
                                       
                                       
                                          
                                             
                                             end
                                          
                                       
                                       
                                          
                                             decrease throughput requirement of UE i;
                                       
                                       
                                          
                                             
                                             end
                                          
                                       
                                       
                                          
                                             end
                                          
                                       
                                       
                                          A =list of unassigned AUs;
                                       
                                       
                                          N =list of cell center UEs;
                                       
                                       
                                          
                                             for 
                                             i 
                                             =1 to 
                                             
                                                
                                                   |
                                                   N
                                                   |
                                                
                                              
                                             do
                                          
                                       
                                       
                                          
                                             Let 
                                                
                                                   
                                                      
                                                         BW
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                              be the throughput requirement of UE i;
                                       
                                       
                                          
                                             
                                             while 
                                             
                                                
                                                   
                                                      
                                                         BW
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   >
                                                   0
                                                
                                              
                                             do
                                          
                                       
                                       
                                          
                                             Let AU j be the AU with the highest rate for UE i;
                                       
                                       
                                          
                                             assign AU j to UE i;
                                       
                                       
                                          
                                             delete j from A;
                                       
                                       
                                          
                                             
                                             if 
                                             A is empty 
                                             then
                                          
                                       
                                       
                                          
                                             
                                             exit;
                                       
                                       
                                          
                                             
                                             end
                                          
                                       
                                       
                                          
                                             decrease throughput requirement of UE i;
                                       
                                       
                                          
                                             
                                             end
                                          
                                       
                                       
                                          
                                             end
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             Algorithm 3: Borrowing algorithm
                                       
                                    
                                    
                                       
                                          B =list of AUs not being used by FAP i and any
                                       
                                       
                                          neighboring FAPs;
                                       
                                       
                                          M =list of cell edge UEs whose requirement is not met;
                                       
                                       
                                          
                                             for 
                                             i 
                                             =1 to 
                                             
                                                
                                                   |
                                                   M
                                                   |
                                                
                                              
                                             do
                                          
                                       
                                       
                                          
                                             Let 
                                                
                                                   
                                                      
                                                         BW
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                              be the throughput requirement of UE i;
                                       
                                       
                                          
                                             
                                             while 
                                             
                                                
                                                   
                                                      
                                                         BW
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   >
                                                   0
                                                
                                              
                                             do
                                          
                                       
                                       
                                          
                                             Let AU j be the AU with the highest rate for UE i;
                                       
                                       
                                          
                                             assign AU j to UE i;
                                       
                                       
                                          
                                             delete j from B;
                                       
                                       
                                          
                                             
                                             if
                                             B is empty 
                                             then
                                          
                                       
                                       
                                          
                                             
                                             exit;
                                       
                                       
                                          
                                             
                                             end
                                          
                                       
                                       
                                          
                                             decrease throughput requirement of UE i;
                                       
                                       
                                          
                                             
                                             end
                                          
                                       
                                       
                                          
                                             end
                                          
                                       
                                       
                                          
                                             if
                                             B not empty 
                                             then
                                          
                                       
                                       
                                          
                                             Assign remaining AUs from B to cell center mobiles;
                                       
                                       
                                          
                                             end
                                          
                                       
                                       
                                          
                                             else
                                          
                                       
                                       
                                          
                                             Assign AUs used by cell center mobiles of
                                       
                                       
                                          
                                             neighboring FAPs to cell center mobiles;
                                       
                                       
                                          
                                             end
                                          
                                       
                                    
                                 
                              
                           
                        

@&#DISCUSSION@&#

When a femtocell is added to the network, UEs in neighboring FAPs detect the presence of this femtocell and report the existence of this femtocell to the serving FAPs. The serving FAP then adds this FAP to the broadcast message and in this way, the existence of this FAP is known to all the nodes in the network. The FAPs then change the network graph and reassigns the AUs.

RALP operates in a conservative fashion. An edge is added to the graph when interference is reported; however, an edge does not get deleted easily. A FAP waits for some time period T before deciding that a neighboring FAP has changed location and is no longer in the interference range.

Convergence time is a drawback of RALP as information about the FAPs need to be exchanged throughout a connected component before the AU allocation stage can begin. The number of information exchange rounds is equal to the length of the longest path of the connected component. As DRA performs quite well with respect to convergence time, one possible approach to deal with the high convergence time in RALP is to use DRA in the initial stages of RALP. After each femtocell determines its interference degree, the femtocell can execute DRA to assign some AUs to itself, while continuing to obtain information from its neighbors. After each femtocell constructs the graph, it executes the allocation algorithm. Thus, the combined approach of using both DRA and RALP, where DRA is used when the network graph is getting constructed, yields good results and starts data transfer faster.

A second approach is use a cluster-based approach as in FCRA. Here the FAPs exhange information for a number of rounds depending on the maximum cluster size M. If M is less the current neighborhood graph, the Cluster based RALP (C-RALP) operates in the same way as the original RALP algorithm. However, if M is less than the connected component size, then after M exchange rounds, RALP begins the allocation phase. Once the allocation phase is complete, data transfer can begin. FAPs continue to update their view of the network as data transfer is going on and eventually each FAP has a full view of the connected component. One drawback of using a maximum cluster size M is that two interfering FAPs might be assigned the same AUs in the allocation phase. This will be detected by neighboring FAPs during the message exchange round of the local scheduler. The local scheduler then tries to rerun the algorithm and assign the common AUs to the cell center UEs. As time progresses, each FAP will discover more of its neighbors and ultimately the global allocaion algorithm will assign different AUs to neighboring FAPs.

@&#PERFORMANCE EVALUATION@&#

For evaluating our algorithm, we use the simulation framework similar to what is described in [4]. We consider an OFDMA frame with 100 AUs (time–frequency slots). We consider two network sizes with 50 and 200 femtocells, which are representative of small and large networks respectively. The femtocells are distributed in a rectangular area of 400m by 400m, with each femtocell randomly placed in a 10m by 10m grid. Users are uniformly distributed throughout the rectangular grid, with a maximum of 4 users attached to one femtocell. The users generate traffic demands, which is translated into a number of AUs varying from 0 to 25. We assume all the AUs have the same rates for all the FAPs in our simulations. We model the path loss based on Winner II channel model [13].

We compare our algorithm with the DRA algorithm proposed in [3] and the FCRA algorithm proposed in [4].

Let 
                        
                           
                              
                                 F
                              
                              
                                 a
                              
                           
                        
                      denote FAP a and let F be the set of all FAPs. Also, 
                        
                           
                              
                                 R
                              
                              
                                 a
                              
                           
                        
                      is the number of AUs requested by 
                        
                           
                              
                                 F
                              
                              
                                 a
                              
                           
                           ,
                           
                              
                                 X
                              
                              
                                 a
                              
                           
                           (
                           i
                           )
                        
                      is an indicator variable denoting whether AU i is assigned to FAP a and T is the number of AUs in the frame. We assume that all AUs can be indexed by a single variable i.

We use the throughput satisfaction rate (TSR) and the Spectrum Spatial Reuse (SSR) suggested in [4] to compare the different algorithms. These two parameters are described below.

For each femtocell 
                           
                              
                                 
                                    F
                                 
                                 
                                    a
                                 
                              
                              ,
                              TSR
                              (
                              
                                 
                                    F
                                 
                                 
                                    a
                                 
                              
                              )
                           
                         is defined as the ratio of the assigned number of allocated AUs to the total requested ones and can be expressed as follows:
                           
                              
                                 TSR
                                 (
                                 
                                    
                                       F
                                    
                                    
                                       a
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             (
                                             i
                                             )
                                          
                                       
                                       
                                          
                                             X
                                          
                                          
                                             a
                                          
                                       
                                       (
                                       i
                                       )
                                    
                                    
                                       
                                          
                                             R
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                                 ∀
                                 
                                    
                                       F
                                    
                                    
                                       a
                                    
                                 
                                 ∈
                                 F
                              
                           
                        
                        
                           
                              
                                 TSR
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             
                                                
                                                   F
                                                
                                                
                                                   a
                                                
                                             
                                             ∈
                                             F
                                          
                                       
                                       TSR
                                       (
                                       
                                          
                                             F
                                          
                                          
                                             a
                                          
                                       
                                       )
                                    
                                    
                                       |
                                       F
                                       |
                                    
                                 
                              
                           
                        
                     

SSR denotes the average portion of femtocells using the same AU within the network.
                           
                              
                                 SSR
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       T
                                       |
                                       F
                                       |
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                F
                                             
                                             
                                                a
                                             
                                          
                                          ∈
                                          F
                                       
                                    
                                 
                                 
                                    
                                       X
                                    
                                    
                                       a
                                    
                                 
                                 (
                                 i
                                 )
                              
                           
                        
                     


                        Figs. 1 and 2
                        
                         show the cumulative distributed function (CDF) of TSR in small-sized femtocell networks where the number of femtocells is 50 for three different patterns of interference degree −3,5, 8. Interference degree i means that the maximum number of interferers for a femtocell for that network is i. The results show that RALP performs better than both DRA and FCRA with respect to TSR. The interference degrees shown in the figures were chosen randomly. We do not show the results for FCRA for Interference degree 8 as we stopped the simulation when it failed to produce results after several minutes. We suspect that FCRA takes a large time to produce results because it has to solve a linear program to do resource allocation.


                        Figs. 3 and 4
                        
                         show the CDF of the TSR in large-sized femtocell networks (200 FAPs) for interference degree 2,3 and 5 respectively. The results show similar behavior of the different algorithms as in the small-sized networks.


                        Fig. 5
                         shows the results for SSR for small sized and large sized networks. We show the results for DRA and RALP as we were unable to obtain the results for FCRA for large interference degree. RALP performs much better than DRA in all the cases. As we expect, SSR decreases with increasing interference degree in both the cases. The decrease in SSR is much more gradual in DRA than in RALP. In both kinds of networks the SSR for RALP is about 0.9 for small interference degree of 1 or 2 and the SSR falls to 0.4 for larger interference degree. For DRA, the SSR is about 0.3 for small interference degree and then decreases to 0.1 for large interference degree. The results for RALP are as expected, as RALP tries to allocate all the AUs to a femtocell as long as it is not assigned to any interfering femtocell. Thus, the spatial reuse is very good if the interference degree is small.

It is worth noting that RALP can converge slower than DRA as the convergence time of RALP depends on the maximum path length in the femtocell network. DRA is better than RALP with respect to convergence time. In all our test cases, DRA took two rounds whereas the number of rounds taken by RALP varied widely. The maximum path length varied between 2–8 for low interference degree (
                           
                              ⩽
                              5
                           
                        ) in our test cases. As mentioned earlier, the computation time for the resource allocation stage for FCRA is very large for large interference degree. DRA can be used during the graph formation phase of RALP or RALP can use a maximum cluster size as mentioned in Section 3.3.

@&#CONCLUSION@&#

In this paper, we studied the resource allocation problem in OFDMA-based femtocell networks. We proposed Resource Allocation using Link State Propagation (RALP) algorithm for allocating OFDMA AUs to femtocells. We evaluate our algorithm by comparing with two existing femtocell resource allocation algorithms, DRA and FCRA. Our simulation shows RALP performs better than both DRA and FCRA with respect to throughput satisfaction rate for femtocells and spectrum spatial reuse.

One way to improve RALP is to assign the same AUs to all the cell center UEs. This can be done during the allocation phase by assigning a number of AUs to the cell center UEs of all the FAPs and then assigning the remaining AUs to the other FAPs. In our future work we will investigate how to assign the same AUs to the cell center UEs. We also plan to address interference between femtocells and macrocells in our future work.

@&#ACKNOWLEDGMENT@&#

The authors would like to thank An Chan and Pradosh Mohapatra for their helpful suggestions.

@&#REFERENCES@&#

