@&#MAIN-TITLE@&#Interoperating remote laboratory management systems (RLMSs) for more efficient sharing of laboratory resources

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We address the benefits of remote laboratories and Remote Laboratory Management Systems (RLMSs).


                        
                        
                           
                           We shed light on a major obstacle in RLMSs development.


                        
                        
                           
                           We address this issue and propose a novel Application Programming Interface (API) design pattern.


                        
                        
                           
                           We explain the capabilities of the proposed pattern using an illustrative case study scenario.


                        
                        
                           
                           We adopt the proposed standard to create an API for inter-communicating the two common RLMSs SAHARA and ISA.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Distance learning

Interfaces

Services architectures

Standards and interoperability

@&#ABSTRACT@&#


               
               
                  In this paper we propose a novel Application Programming Interface (API) design pattern for inter-communication between Remote Laboratory Management Systems (RLMSs) accommodating different levels of functional support and thereby allowing more efficient sharing of laboratory resources regardless of their hosting RLMS. Afterwards, we present initial results and demonstrate the feasibility and effectiveness of this pattern by developing an API for two common RLMSs, Sahara and the iLab shared Architecture (ISA). As a result, users logging into a Sahara server managed to access and manipulate a radio-activity experiment hosted on an ISA server.
               
            

@&#INTRODUCTION@&#

Laboratories are generally recognized as important tools for education and scientific research. The challenges in resourcing conventional laboratories [1] and the rapid evolution of computer technology and communication networks have supported the emergence of remote laboratories as a viable educational tool [2,3]. As a result, remote laboratories have strongly been adopted in many engineering disciplines, especially those oriented to control and industrial real world, such as industrial informatics [4–7] and industrial electronics [8,9]. Remote laboratories have become increasingly sophisticated, with a growing body of research considering aspects such as flexibility of access [10], ability to share resources and labs [11,12], security of users, data, and devices [13], and accessibility for disadvantaged users [14] among many others [15]. To a significant extent, many of these issues have been successfully overcome, with continuous, reliable and high quality services being maintained for much of the past decade.

Cross-institutional laboratory sharing is one of the most often raised justifications for the use of remote labs [11,16]. This can lead to improved utilization levels, shared costs, and access to a much broader range of laboratory apparatus. Thus, the focus of remote laboratory development is now moving towards more sustainable models that promote both institutional and individual engagement [16]. Rather than individual academics custom building equipment for their specialized subjects, remote laboratory development is increasingly being carried out by multi-institution consortia [16]. Despite its claimed benefits, the related initiatives have been historically very limited and struggled to achieve sustainability. Early examples of attempts to support shared access RLMSs include the World Wide Student Laboratory [17] and PEARL [18] projects. Similarly, the LearNet [19], ProLearn [14] and PEMCWebLab [20] projects were carried out during the early to mid-2000s with little success. More recently the LiLa [21], Sahara [11,16,22,23], ISA [24–26], Weblab-Deusto [27,28], NANSLO (Western Interstate Commission for Higher Education 2012) and UniSchooLabS [29] projects have continued to attempt to support laboratory sharing.

A key element of these developments is the creation of Remote Laboratory Management Systems (RLMSs) that provide a common online framework for accessing and administrating a wide pool of heterogeneous developed remote lab systems that might be distributed across different institutions and geographical locations [13]. They provide services such as booking, assessment, tracking, and synchronous and asynchronous communication tools, as shown in Fig. 1
                     .

RLMSs should be agnostic with regard to the remote laboratory design in order to support the widest range possible of remote laboratories. Examples of RLMSs that are specifically designed to directly manage a collection of remote laboratories include iLab Shared Architecture (ISA) [24–26], and Sahara [11,16,22,23]. Other systems have some related functionality but have a different focus. For example, LiLa [12] provides some laboratory services (such as location and booking services) but not others (such as monitoring the laboratory status), though it does extend into wider support for the experimental activities. Each of the different RLMSs has typically arisen from a different set of pedagogic and technical design parameters, and philosophical approaches. Each has different strengths and weaknesses, and potentially addresses a different set of needs. We argue that this diversity is an asset that should be encouraged rather than avoided. However the diversity does represent a challenge with regard to supporting cross-institutional sharing of laboratories between institutions using different RLMSs.

Currently, for a remote laboratory that is provided by one institution to be accessed by users from a different institution, typically those users must directly access either the laboratory itself or the providers RLMS (if one exists). This can represent a significant hurdle to effective sharing given that it potentially places a substantial burden on the provider of the laboratory to coordinate access for the users. It can also mean that students who access multiple laboratories (possibly shared from multiple providers) will need to manage numerous access accounts and system interfaces.

Common issues facing RLMS could be summarized as follows:
                        
                           •
                           Inability to achieve Inter-institutional sharing and interoperability with heterogeneous RLMSs in order to share learning objects (ex., courses, remote labs, etc.) among institution.

Lack of a standard design pattern, which increases the developing time for attaching the same remote laboratory to different RLMSs at different institutions.

Inability to access labs from different systems within a single interface as well as duplicated maintenance efforts for accounts on multiple systems.

This can be partially addressed by an architecture that uses federation and single sign-on technologies so that a student from institution A can access the RLMS from institution B through a mechanism defined by the federation and contracts between institution A and B. The downside of this is that the students must still access different remote laboratories through different systems. A common portal might address this to some extent, but the system would then potentially lack a consistent look-and-feel. An alternative, which we focus on in this paper, is to allow the home institution of the students to maintain their own RLMS, and for this system to be able to interoperate with other RLMSs so that students can directly access provider's experiments. In other words, consider the scenario shown in Fig. 2
                     , where the RLMS ISA is installed at the Massachusetts Institute of Technology (MIT) and providing access for the MIT users (MIT 1, MIT 2…) to experiments installed at MIT (MIT Exp A, MIT Exp B…). On the other hand, the RLMS Sahara is installed at the University of Technology, Sydney (UTS), providing access for the UTS users (UTS 1, UTS 2…) to experiments installed at UTS (UTS Exp A, UTS Exp B …). Adopting an Application Programming Interface (API) to communicate between both systems, it would be possible for a UTS user to gain access through Sahara to experiments installed at MIT and integrated in ISA if there is an agreement between both institutions and as long as both architectures support this API in order to interconnect with each other. Since API is meant to be language independent, any RLMS provider could implement them even if the RLMS architecture was not initially considering its provision in its designed. For instance, it could be provided as a plug-in. It is also necessary to mention that the API approach provides a solution for a higher level communication among RLMSs, and once the communication is established and access to a particular remote lab is granted, communication will be dictated by the lab itself.

In this paper we address this limitation and describe a novel API design pattern for inter-communication between RLMSs defining the underlying design principles, the supported profiles and the set of calls underlying each profile, as shown in Section 2. In the same section, we explain the capabilities of the proposed design using a sequence of illustrative scenarios. Afterwards, in Section 3, and basing on the proposed design pattern, we develop and implement an API to allow a radio-activity experiment hosted on the ISA server at the University of Queensland to be accessed by users logging into a Sahara server at the UTS. Finally, the conclusion and the future works are addressed in Section 4.

The proposed pattern was developed by the faculty of Engineering and IT at UTS with the aid of several partners from the Global Online Laboratory Consortium (GOLC) [30], which encompasses pioneers in remote laboratory development from all over the world. In this section the pattern is defined and discussed. However, it is anticipated that as the builders of RLMSs gain experience with this pattern further refinements will be required. The pattern was realized from a wide perspective in order to allow developing APIs that are adaptable with any existing RLMS. Thus, it was devised on the basis of the common basic functionality provided by most of the contemporary RLMSs. As well, it adopts common terminology used by most of the RLMSs developers. The purpose of the design pattern is to achieve a common interface between RLMSs rather than dictating how the functionality or web service calls are implemented internally to each system (this is left to the developers or maintainers of those systems).

In this section, a detailed definition for each term adopted in the design pattern is presented:
                           
                              ■
                              Rig instance (rig): A single instance of a physical system made from various devices (including associated software and hardware) that can be used by one or more students in carrying out a distinct and discrete learning activity.

Rig type: The class to which a rig belongs, and within which any rig can be used interchangeably. A given institution (or laboratory provider) will often have more than one rig type, and for each rig type they may have multiple rigs.

Rig set (pool): The collection of homogeneous rigs, all of the same rig type, which may be distributed across multiple physical locations and managed by different organizations, but which can be treated as a single logical collection for access purposes.


                                 Rig capability: A list of identifying tags which may be used to correlate rigs into collections to queue or book for. This allows, for example, multiple rig types to be collectively queued to get the first free rig in any of the rig types.

User: An individual uniquely identifiable within a remote laboratory system. The user must be able to be authenticated (by the consumer RLMS), but may be made anonymous to the provider RLMS.

Consumer user/organization/RLMS: A user/organization/RLMS that accesses remote laboratories that have been made available by a provider. It is up to the consumer RLMS to appropriately authenticate the user and determine which consumer groups they belong to.

Consumer group: A cohort of users from a consumer organization which corresponds to a particular usage agreement between a consumer organization and a provider organization, and which may have a specific set of access permissions and constraints (such as allowable periods during which the apparatus can be accessed, maximum session times, or allowable total usage for the cohort).

Provider organization/RLMS: An organization/RLMS that makes available remote laboratories for use by consumers.

In general terms, a provider (whether it is an organization or a RLMS) is responsible for making available rigs associated with a specific service policy. A consumer group is granted access to provider's rigs under an agreement with the provider, which is based on the provider's service policy. Consumers belonging to this group access the provider's rigs after getting authenticated through their group's RLMS (though the consumers' RLMS may rely on other systems to support such authentication). A provider will control access based on the identified consumer groups, not individual users, and only requires identification of the user in order to track usage.


                        
                           
                              ■
                              The design pattern is based on a set of underlying principles that establish an accepted baseline, and all ongoing development should be consistent with these principles.

The API shall provide for mandatory baseline profiles that must be supported in all RLMSs that adhere to it and additionally, optional profiles that define sets of functional capabilities beyond the baseline capabilities, e.g. support for lesson plans could be added in an optionally-supported profile. The API shall include a mechanism for querying which optional profiles a given RLMS supports.

The API shall accommodate interoperability between RLMSs that are compliant with any version of it.

Versions of this API shall, wherever possible, be upwardly compatible, i.e. a later version should not invalidate functionality specified in an earlier version. Where this is unavoidable the deprecated functionality should be clearly identified.

The API shall accommodate varying choices by laboratory providers regarding the level of service they wish to provide with regard to their RLMS (in terms of service availability, information security, quality, retention, etc.).

The API shall not address user-level authentication and authorization, but rather user consumer-level authentication and group-based authorization based on industry standard authentication mechanisms. The API shall support at least:
                                    
                                       a)
                                       Consumer-level authentication (i.e. identifying the institution that is requesting access—e.g. UTS—from a given provider—e.g. MIT).

Multiple agreements with the same consumer, e.g. multiple different UTS course conveners may have been given different access levels as part of the UTS access agreement with MIT.

Optional anonymous user-level identification by the consumer to the provider. The consumer may indicate that a given request for rig access is coming from a specific, but anonymous, user, e.g. UTS makes a request to MIT, indicating that the request is for user 37, in group B. Where unique users are not distinctly identified this should be made clear in the request.

Along with the underlying principles, the design pattern encompasses a set of profiles that defines the communication patterns between systems. The base-line profiles that are supported in this version of the standard and that should be common in most of the developed RLMSs are the following:
                           
                              ■
                              System Query profile: Supports basic system enquiries required to determine agreed supported services between consumers and providers (the baseline principles)

Rig Query profile: Supports basic system enquiries required to determine the rig sets that are made available by a lab provider.

Experiment Query profile: Supports basic system enquiries required to determine the executed experiments that have been carried out by a lab provider.

Basic Rig Access profile: This profile provides support for basic access to provided rig sets or specific rigs. Two primary modes of access are (optionally) supported by the provider: queuing, where the user can request access and they then enter a queue with access being granted when they reach the front of the queue and a rig becomes available; and booking, where the user can make a booking for a particular time slot.

Basic Batch Experiment profile: Basic support for execution of batch based laboratories using either provider-supplied or consumer-supplied experiment interface.

Basic Interactive Experiment profile: Basic support for execution of interactive based laboratories using either provider-supplied or consumer-supplied experiment interface.

Each base-line profile supports a collection of calls which, when used together can enable a range of different scenarios. Table 1
                         illustrates and defines the calls of each profile.

To illustrate the capabilities that are enabled by these profiles, and allow an evaluation of any potential limitations, we present an illustrative example shown in Fig. 3
                        . The example shows a sequence of interactions that collectively represent a specific scenario involving booking and then accessing an interactive experiment. In this example, it is assumed the consumer has contracted with the provider for access to numerous rig sets, but user groups 21 and 27 (to which user 20 belongs) only have access to numbers 6, 8, 14 and 19. In this case, the communication between consumer and provider can be classified into five main stages:
                           
                              1)
                              In the first stage, the consumer organization retrieves information on the profiles that are supported by the provider and the level of service associated with particular sets rigs, so that this can be used either to provide information to their users, or to adapt the subsequent requests. For example, the camera resolution may be retrieved so that the user interface can be adapted, or the policy on information retention might be checked so that the users can be warned when results might be removed by the provider.

In the second stage, the consumer user number 20 (who belongs to consumer groups 21 and 27) logs into the consumer system. Note that the consumer system is responsible for authenticating their own users and managing the groups that they belong to. Further, while the provider gives the consumer system access to certain agreed sets of rigs, it is the consumer systems responsibility to determine which users should be able to access which rigs. The user then enquires about the status of any experiments that they previously had created and executed. The consumer system retrieves the list of experiments for this user (43 and 92), and then requests information on each experiment, before presenting this back to the user. i.e., those numbers (43 and 92) are assigned randomly as an example.

In the third stage, the user wishes to carry out a new experiment. They begin by asking to see a list of the rigs to which they have access. They then select a specific rig (ID=6) and check its availability and access type. The response indicates that the rig is bookable and quotable, and while it is currently online it is unavailable at that moment.

In the fourth stage, the user wishes to make a reservation for Rig 6. The consumer system defaults to showing a booking calendar for the next 48h, so queries the provider system for availability over this period. The calendar is shown to the user by the consumer system, and the user requests a booking at a particular time. The consumer system attempts to make the booking which is then confirmed (bookingID=68). The Provider system also emails the user a confirmation of the booking. Note that the system had to first create an “Experiment” on the provider system that was associated with the booking. This is so that any information required prior to the user commencing a booked session can be incorporated. An example might be configuration or set-up details.

In the fifth stage, the user logs back into the system prior to the time of the booked session. They then redeem the booking at the appropriate time and are permitted access to the experiment interface through a URL. Once the experiment is completed the consumer system can request any recorded results from the provider system.

This scenario provides a brief example of how the proposed design pattern works. The range of interactions that are supported by this pattern are however much broader than shown in this scenario.

Sahara and ISA are considered to be leading extant RLMSs, owing to their successfully implementation and deployment across many universities [23,24,31]. Sahara and ISA offer similar functionalities but their architectures are significantly different [16,32]. ISA offers a relative comparative advantage in batched labs and its distributed architecture, whereas Sahara offers advantages for interactive labs, queuing, and seamless integration of new experiments. There are some elements (such as integration with LMSs) which are not well-supported by either system, but which are provided by other systems (such as LiLa). A comparison between both architectures is provided in Table 2
                     .

The goal is to allow both RLMSs to interconnect with each other and with any other RLMS as described in Fig. 2. As a final stage we test the proposed pattern by developing an API for connecting two RLMS, Sahara and ISA. In this case, a radio-activity experiment hosted in an iLab server at the University of Queensland has been accessed by a user logging into a Sahara server located at UTS as shown in Fig. 4
                     .

In order to create a communications API that supports interoperability between both RLMSs, we begin by considering common functionalities that are understood across both platforms can be categorized into the following areas: lab access, lab and experiment operations (encompassing status and execution), retrieval of results, queuing, and the ability for the laboratory manager or administrative staff to conduct maintenance activities if need be. An iLabs user will use the API interface as though it is an iLabs LabServer. Conversely, a Sahara user will use the API interface as though it is part of the scheduling server interface. The web interface across the API bridge is defined in a Web Service Definition Language (WSDL) file. The full list of Web services is derived from Table 1. An example of the WSDL used can be shown in Fig. 5
                      for the RigAccessType web method. Simple Object Access Protocol (SOAP) was adopted as the messaging protocol based on its common use in many existing RLMSs. There could also be performance and latency issues inherent with the use of web services and SOAP, but these should be able to be addressed by the adoption of optimization techniques such as reducing the size of the SOAP message or the number of SOAP messages that are sent between the systems. However, the proposed API accepts any web service-enabling technology even if such implementation wasn't provided by the RLMS itself by developing an API plug-in an extension.

The radio-activity experiment is registered in the Sahara scheduling server through the API layer and accessed from the Sahara Web interface as an experiment hosted within Sahara—while being hosted at an ISA server—to fulfill the parameter input values. The experiment is a batch experiment where user only submits the parameter values—such as radioactivity setup, source name, distance, duration and repeat—and retrieves results later when available. The results returned from this experiment submission (obtained by selecting “Experiment Results Available” button) are shown in Fig. 6
                     .

A recent survey was conducted among the most 10 active RLMS student users at UNED, by number of logins during the last month, who are using a different RLMS based on Moodle and completely anonymous to both SAHARA and iLab in order to avoid biasing. All the students are enrolled in a distance education master degree and they are from different countries (3 from Europe and 7 from Latin America). The students were asked through an online Google questionnaire. Only two of them discarded the idea for the following reasons:
                           
                              •
                              If a system server goes down or fail for any reason, all its associated remote laboratories would not operate and consequently all associated universities that are bridging to this server would be affected.

Excessive number of communication layers required to tunnel remote laboratories through two systems and consequently performance may be degraded.

Campus access restrictions on their installed systems, either technical or political.

Each RLMS was designed from a different perspective and outlook and each provides functions or features that are not supported by the other. Thus, this integration might result in accessing experiments but with limited features.

Since external provided experiments are designed by different teachers, these experiments might cause some confusion.

The rest of the users however were strongly in favor agreeing on the fact that this integration would allow them to access a wide range of experiments online beyond their institution capabilities and without extra login procedure. They also stated other advantages as follows:
                           
                              •
                              This integration will allow me to gain an international experience particularly when the external laboratories are provided along with instructions and/or evaluations from external teachers. Interestingly, if the experiment is collaborative and allows users from different universities to work together.

This integration will be a breeding ground for inter-institutional collaboration and will promote the provision of distributed programs. For instance, an engineering master degree program could be established among different universities each participating with a subject (along with remote lab access if required).

In this paper a novel API design pattern was proposed in order to address the current lack of communication and interoperability between different RLMSs, which is considered one of the major challenges in the future development and deployment of remote laboratories. Initial results derived from implementing this pattern in the API development were successfully achieved, where a user logging into Sahara server could access a batch radio-activity experiment hosted at an ISA server. These results addressed many features and capabilities identified in the proposed design pattern such as Experiment Query profile, Basic Rig Access profile, and Basic Batch Experiment profile. However, the pattern includes more capabilities since it was devised from a wider scope that could cope with most of the contemporary RLMSs and with the potential future RLMSs as well. Thus, future works will be carried out in order to integrate various types of experiments and to leverage all the capabilities of the pattern for further refining and enhancements. On the other hand, works will also be carried out on specifying the choice of the adopted communication protocol (e.g. considering which of REST, SOAP, JSON, or others might be appropriate), taking into account ease of migration/integration with existing systems, as well, on defining location of WSDL and XSD files, character en-coding, data types and formats, management of security, list of error codes, list of service level attributes, and list of rig set properties.

@&#ACKNOWLEDGMENTS@&#

The authors would like to acknowledge the support of the following projects: e-Madrid (S2013/ICE-2715), RIPLECS (517836-LLP-1-2011-1-ES-ERASMUS-ESMO), MUREE (530332-TEMPUS-1- 2012-1-JO-TEMPUS-JPCR) and Go-Lab (FP7-ICT-2011- 8/317601). As well, authors would like to acknowledge the support of the Spanish Ministry for Economy and Competitivity for the granted internship for Mr. Tawfik at UTS within the project s-Labs (TIN2008-06083-C03-01).

@&#REFERENCES@&#

