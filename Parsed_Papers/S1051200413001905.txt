@&#MAIN-TITLE@&#Automatic image segmentation using constraint learning and propagation

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Automatic image segmentation method using constraint learning and propagation.


                        
                        
                           
                           Two-step approach of over-segmentation and classification.


                        
                        
                           
                           Pair-wise constraints (must-link and cannot-link) generated from initial seeds.


                        
                        
                           
                           Effective learning of the constraints by kernel propagation.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Image segmentation

Constraint learning

Kernel propagation

Optimal seed selection

Pairwise constraints

Seed-kernel matrix learning

@&#ABSTRACT@&#


               
               
                  In this paper, we propose automatic image segmentation using constraint learning and propagation. Recently, kernel learning is receiving much attention because a learned kernel can fit the given data better than a predefined kernel. To effectively learn the constraints generated by initial seeds for image segmentation, we employ kernel propagation (KP) based on kernel learning. The key idea of KP is first to learn a small-sized seed-kernel matrix and then propagate it into a large-sized full-kernel matrix. By applying KP to automatic image segmentation, we design a novel segmentation method to achieve high performance. First, we generate pairwise constraints, i.e., must-link and cannot-link, from initially selected seeds to make the seed-kernel matrix. To select the optimal initial seeds, we utilize global k-means clustering (GKM) and self-tuning spectral clustering (SSC). Next, we propagate the seed-kernel matrix into the full-kernel matrix of the entire image, and thus image segmentation results are obtained. We test our method on the Berkeley segmentation database, and the experimental results demonstrate that the proposed method is very effective in automatic image segmentation.
               
            

@&#INTRODUCTION@&#

Image segmentation is a process of partitioning an image into multiple segments. More specifically, it is the process of assigning a label to every pixel in an image such that pixels with the same label share certain visual characteristics. It provides a set of segments that collectively cover the image or a set of contours extracted from the image. Thus, image segmentation results are widely used in many image processing and computer vision applications such as object recognition, image retrieval, medical image analysis, and video surveillance.

@&#RELATED WORK@&#

Up to the present, a number of studies have been conducted to deal with the image segmentation problem effectively [1–31]. They can be mainly classified into variational methods [26], level set methods [13,27], graph cut algorithms [28,29], convex relaxation methods [30,31], and clustering based approaches [1–5,11,14,19,21,22]. Among them, clustering-based approaches which convert image segmentation into a clustering problem are commonly used by researchers. Clustering aims to classify data into expected clusters, and thus data points in the same cluster have similar patterns or characteristics. However, data in feature space do not always maintain the compact coherence. Thus, if traditional clustering methods such as k-means and expectation-maximization (EM) are used, the image segmentation may fail to obtain a coherent and robust clustering results. In order to overcome this problem of traditional clustering methods, two-step approaches which consist of segmentation and classification have been actively studied. In the approaches, an image is first segmented into multiple segments called superpixels using over-segmentation methods in the segmentation step. Then, the superpixels are merged by partitional clustering methods such as normalized cut [1], spectral graph partitioning [2], semi-supervised discriminant analysis (SDA) [3], and dynamic region merging (DRM) [5] in the classification step. Tao et al. [1] proposed an effective and robust segmentation method which incorporates the advantages of the mean-shift segmentation and the normalized cut partitioning methods. In this method, superpixels, i.e., mean-shift segmentation results, are classified by normalized cut [6]. Thus, the method produces more precise and robust segmentation results because the normalized cut produces globally-optimized clustering results. Also, this method reduces the sensitivity to noise and the computational cost of image segmentation remarkably. Ersahin et al. [2] proposed a new image segmentation method of polarimetric synthetic aperture radar (POLSAR) based on spectral graph partitioning. In this method, superpixels are generated using contour and spatial information, and then they are classified by spectral graph partitioning. Huang et al. [3] proposed a novel image segmentation method using coherent clustering in 
                           
                              
                                 L
                              
                              
                                 ⁎
                              
                           
                           
                              
                                 a
                              
                              
                                 ⁎
                              
                           
                           
                              
                                 b
                              
                              
                                 ⁎
                              
                           
                         color space. In this method, superpixels are generated by the normalized cut algorithm, and then classified by the coherent clustering that mean-shift clustering and SDA are performed alternatively. Thus, the proposed method is able to maintain good coherence of data. Liu and Tao [4] proposed an iteratively unsupervised image segmentation method based on the multiphase multiple piecewise constant (MMPC) model and its graph cuts optimization. The MMPC model utilized multiple constants to model each phase instead of single constant, and thus was very useful in dealing with the heterogeneous image object segmentation problem. The segmentation results were achieved by iteratively changing between segmented region labeling and graph cuts energy minimizing. Peng et al. [5] proposed an automatic image segmentation method using DRM. This method deals with the image segmentation problem by iteratively merging superpixels according to a statistical test. A merging predicate for the evidence of a merging between two neighboring regions is used, and superpixels are grouped by the DRM based on dynamic programming.

@&#OVERVIEW@&#

In this paper, we adopt the two-step approach of segmentation–classification, to deal with the image segmentation problem as shown in Fig. 1
                        . In the segmentation step, an image is over-segmented into many superpixels using mean-shift segmentation as with the conventional two-step approaches (see Fig. 1(b)). In Fig. 1(b), red lines indicate boundaries of superpixels. Our main contributions to image segmentation lie in the classification step. In the classification step, we first select optimal initial seeds from the superpixels by global k-means clustering and self-tuning spectral clustering (SSC) (see Fig. 1(c)). In Fig. 1(c), colored superpixels are selected seeds while white ones are uncertain regions to be confirmed by seed propagation. Then, we generate pairwise constraints such as must-link and cannot-link from the initially selected seeds and make the seed-kernel matrix using them. Finally, we propagate the seed-kernel matrix into the full-kernel matrix of the entire image (see Fig. 1(d)), and thus image segmentation results are obtained. In the classification step, KP is employed for constraint learning and propagation to preserve characteristics of seeds and maintain data-coherence effectively. Our method is different from traditional seeded region growing methods [9,17,23] in that it uses a learned seed-kernel matrix from pairwise constraints for propagation. Moreover, the proposed method is distinct from [25] in employing the kernel learning strategy when propagating constraints, although our work is similar to it in pursuing segmentation using constraints. Experimental results on the Berkeley segmentation database show that the proposed method preserves accurate information about boundaries of objects and maintains data-coherence effectively.

The rest of the paper is organized as follows: In Section 2, we briefly review KP which is the basis of this paper. In Section 3, we describe the proposed image segmentation method based on KP in detail. In Section 4, some experimental results and the corresponding analysis are provided. Finally, we draw conclusions in Section 5.

Kernel propagation (KP) aims to learn a seed-kernel matrix first, and then propagate it into a large-sized full-kernel matrix [32–34]. For clarity, we list all the notations and their descriptions throughout this paper in Table 1
                     . As shown in Fig. 2
                     , if 
                        
                           
                              K
                           
                           
                              l
                              l
                           
                        
                      is a known seed-kernel matrix, KP aims to propagate 
                        
                           
                              K
                           
                           
                              l
                              l
                           
                        
                      to the other unknown sub-blocks 
                        
                           
                              K
                           
                           
                              l
                              u
                           
                        
                     , 
                        
                           
                              K
                           
                           
                              u
                              l
                           
                        
                     , and 
                        
                           
                              K
                           
                           
                              u
                              u
                           
                        
                     . Thus, the full-kernel matrix K is made to be known by KP. KP is formulated to be a minimization problem as follows:
                        
                           (1)
                           
                              
                                 
                                    
                                       
                                          min
                                          K
                                       
                                       :
                                    
                                    
                                       
                                          Tr
                                       
                                       (
                                       L
                                       K
                                       )
                                    
                                 
                                 
                                    
                                       
                                          s
                                          .
                                          t
                                          .
                                       
                                       :
                                    
                                    
                                       g
                                       K
                                       
                                          
                                             g
                                          
                                          
                                             T
                                          
                                       
                                       =
                                       
                                          
                                             K
                                          
                                          
                                             l
                                             l
                                          
                                       
                                       ,
                                       
                                       g
                                       =
                                       [
                                       
                                          
                                             I
                                          
                                          
                                             l
                                          
                                       
                                       ,
                                       0
                                       ]
                                    
                                 
                                 
                                    
                                    
                                       K
                                       ≽
                                       0
                                    
                                 
                              
                           
                        
                      where K is reorganized as 
                        K
                        =
                        
                           [
                           
                              
                                 
                                    
                                       
                                          K
                                       
                                       
                                          l
                                          l
                                       
                                    
                                 
                                 
                                    
                                       
                                          K
                                       
                                       
                                          l
                                          u
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          K
                                       
                                       
                                          l
                                          u
                                       
                                       
                                          T
                                       
                                    
                                 
                                 
                                    
                                       
                                          K
                                       
                                       
                                          u
                                          u
                                       
                                    
                                 
                              
                           
                           ]
                        
                     , of which the sub-part 
                        
                           
                              K
                           
                           
                              l
                              l
                           
                        
                        =
                        g
                        K
                        
                           
                              g
                           
                           
                              T
                           
                        
                      equals to a known seed-kernel matrix 
                        
                           
                              K
                           
                           
                              l
                              l
                           
                        
                      and 
                        
                           
                              I
                           
                           
                              l
                           
                        
                      is the identity matrix of proper size. In (1), K has the decomposition of 
                        K
                        =
                        B
                        
                           
                              B
                           
                           
                              T
                           
                        
                      due to its symmetry and positive semi-definiteness, where B is a real matrix. If we denote 
                        B
                        =
                        
                           [
                           
                              
                                 
                                    
                                       
                                          B
                                       
                                       
                                          l
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          B
                                       
                                       
                                          u
                                       
                                    
                                 
                              
                           
                           ]
                        
                     , 
                        L
                        =
                        
                           [
                           
                              
                                 
                                    
                                       
                                          L
                                       
                                       
                                          l
                                          l
                                       
                                    
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          l
                                          u
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          L
                                       
                                       
                                          u
                                          l
                                       
                                    
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          u
                                          u
                                       
                                    
                                 
                              
                           
                           ]
                        
                     , and 
                        Q
                        =
                        
                           [
                           
                              
                                 
                                    
                                       
                                          I
                                       
                                       
                                          l
                                       
                                    
                                 
                              
                              
                                 
                                    −
                                    
                                       
                                          L
                                       
                                       
                                          u
                                          u
                                       
                                       
                                          −
                                          1
                                       
                                    
                                    
                                       
                                          L
                                       
                                       
                                          l
                                          u
                                       
                                       
                                          T
                                       
                                    
                                 
                              
                           
                           ]
                        
                        
                           
                              B
                           
                           
                              l
                           
                        
                     , the solution of (1) is obtained by the following equation:
                        
                           (2)
                           
                              K
                              =
                              B
                              
                                 
                                    B
                                 
                                 
                                    T
                                 
                              
                              =
                              Q
                              
                                 
                                    B
                                 
                                 
                                    l
                                 
                              
                              
                                 
                                    B
                                 
                                 
                                    l
                                 
                                 
                                    T
                                 
                              
                              
                                 
                                    Q
                                 
                                 
                                    T
                                 
                              
                              =
                              Q
                              
                                 
                                    K
                                 
                                 
                                    l
                                    l
                                 
                              
                              
                                 
                                    Q
                                 
                                 
                                    T
                                 
                              
                              =
                              
                                 [
                                 
                                    
                                       
                                          
                                             
                                                K
                                             
                                             
                                                l
                                                l
                                             
                                          
                                       
                                       
                                          −
                                          
                                             
                                                K
                                             
                                             
                                                l
                                                l
                                             
                                          
                                          
                                             
                                                L
                                             
                                             
                                                l
                                                u
                                             
                                          
                                          
                                             
                                                L
                                             
                                             
                                                u
                                                u
                                             
                                             
                                                −
                                                1
                                             
                                          
                                       
                                    
                                    
                                       
                                          −
                                          
                                             
                                                L
                                             
                                             
                                                u
                                                u
                                             
                                             
                                                −
                                                1
                                             
                                          
                                          
                                             
                                                L
                                             
                                             
                                                l
                                                u
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                K
                                             
                                             
                                                l
                                                l
                                             
                                          
                                       
                                       
                                          
                                             
                                                L
                                             
                                             
                                                u
                                                u
                                             
                                             
                                                −
                                                1
                                             
                                          
                                          
                                             
                                                L
                                             
                                             
                                                l
                                                u
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                K
                                             
                                             
                                                l
                                                l
                                             
                                          
                                          
                                             
                                                L
                                             
                                             
                                                l
                                                u
                                             
                                          
                                          
                                             
                                                L
                                             
                                             
                                                u
                                                u
                                             
                                             
                                                −
                                                1
                                             
                                          
                                       
                                    
                                 
                                 ]
                              
                           
                        
                      Eq. (2) is the closed-form solution of (1), and thus 
                        
                           Tr
                        
                        (
                        L
                        K
                        )
                      can be reformulated as follows:
                        
                           (3)
                           
                              
                                 Tr
                              
                              (
                              L
                              K
                              )
                              =
                              
                                 Tr
                              
                              
                                 [
                                 
                                    (
                                    
                                       
                                          L
                                       
                                       
                                          l
                                          l
                                       
                                    
                                    −
                                    
                                       
                                          L
                                       
                                       
                                          l
                                          u
                                       
                                    
                                    
                                       
                                          L
                                       
                                       
                                          u
                                          u
                                       
                                       
                                          −
                                          1
                                       
                                    
                                    
                                       
                                          L
                                       
                                       
                                          l
                                          u
                                       
                                       
                                          T
                                       
                                    
                                    )
                                 
                                 
                                    
                                       K
                                    
                                    
                                       l
                                       l
                                    
                                 
                                 ]
                              
                           
                        
                      Thus, if we get the seed-kernel matrix 
                        
                           
                              K
                           
                           
                              l
                              l
                           
                        
                     , then we obtain the desired full-kernel matrix K. We denote 
                        
                           
                              
                                 
                                    X
                                 
                              
                           
                           
                              l
                           
                        
                      and 
                        
                           
                              
                                 
                                    X
                                 
                              
                           
                           
                              u
                           
                        
                      as labeled and unlabeled sample sets, respectively. That is, 
                        
                           
                              
                                 
                                    X
                                 
                              
                           
                           
                              l
                           
                        
                        =
                        {
                        
                           
                              x
                           
                           
                              i
                           
                        
                        |
                        (
                        
                           
                              x
                           
                           
                              i
                           
                        
                        ,
                        ⋅
                        )
                        ∈
                        
                           
                              M
                           
                        
                        ∪
                        
                           
                              C
                           
                        
                        }
                      consists of the samples with constraints where 
                        M
                      and 
                        C
                      are sets of must-link and cannot-link constraints, respectively. There are no constraints in 
                        
                           
                              
                                 
                                    X
                                 
                              
                           
                           
                              u
                           
                        
                     . In (3), 
                        
                           
                              K
                           
                           
                              l
                              l
                           
                        
                      is learned by solving the following equation:
                        
                           (4)
                           
                              
                                 
                                    
                                       
                                          min
                                          
                                             
                                                K
                                             
                                             
                                                l
                                                l
                                             
                                          
                                       
                                       :
                                    
                                    
                                       
                                          Tr
                                       
                                       
                                          (
                                          
                                             (
                                             
                                                
                                                   L
                                                
                                                
                                                   l
                                                   l
                                                
                                             
                                             −
                                             
                                                
                                                   L
                                                
                                                
                                                   l
                                                   u
                                                
                                             
                                             
                                                
                                                   L
                                                
                                                
                                                   u
                                                   u
                                                
                                                
                                                   −
                                                   1
                                                
                                             
                                             
                                                
                                                   L
                                                
                                                
                                                   l
                                                   u
                                                
                                                
                                                   T
                                                
                                             
                                             )
                                          
                                          
                                             
                                                K
                                             
                                             
                                                l
                                                l
                                             
                                          
                                          )
                                       
                                    
                                 
                                 
                                    
                                       
                                          s
                                          .
                                          t
                                          .
                                       
                                       :
                                    
                                    
                                       
                                          
                                             K
                                          
                                          
                                             l
                                             l
                                          
                                       
                                       (
                                       i
                                       ,
                                       j
                                       )
                                       =
                                       1
                                       ,
                                       
                                       ∀
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                       
                                       ∈
                                       
                                          
                                             
                                                
                                                   X
                                                
                                             
                                          
                                          
                                             l
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             K
                                          
                                          
                                             l
                                             l
                                          
                                       
                                       (
                                       i
                                       ,
                                       j
                                       )
                                       =
                                       1
                                       ,
                                       
                                       ∀
                                       (
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             x
                                          
                                          
                                             j
                                          
                                       
                                       )
                                       ∈
                                       
                                          
                                             M
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             K
                                          
                                          
                                             l
                                             l
                                          
                                       
                                       (
                                       i
                                       ,
                                       j
                                       )
                                       =
                                       0
                                       ,
                                       
                                       ∀
                                       (
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             x
                                          
                                          
                                             j
                                          
                                       
                                       )
                                       ∈
                                       
                                          
                                             C
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             K
                                          
                                          
                                             l
                                             l
                                          
                                       
                                       ≽
                                       0
                                    
                                 
                              
                           
                        
                     
                  

@&#PROPOSED METHOD@&#

As mentioned earlier, an image is first over-segmented into many superpixels using mean-shift segmentation. In general, the over-segmented results have usually several hundreds of superpixels. Superpixels have two desirable properties: (1) Each superpixel is a perceptually consistent unit, and all pixels in a superpixel are almost uniform in color or texture; (2) The superpixel map preserves most of the necessary structures for image segmentation such as boundaries of objects. From the two properties, if we obtain optimal labels of superpixels in feature space, then we get a good image segmentation results. Mean-shift segmentation is well known as a robust feature-space analysis approach which can be effectively applied to discontinuity-preserving smoothing and image segmentation [35]. It can significantly reduce the number of basic image entities, and due to the good discontinuity-preserving filtering characteristics, the salient features of the entire image are retained [1]. Also, it produces over-segmentation results, and thus we use the results as superpixels for classification. Then, features for image segmentation are extracted from the superpixels. Since the 
                           
                              
                                 L
                              
                              
                                 ⁎
                              
                           
                           
                              
                                 a
                              
                              
                                 ⁎
                              
                           
                           
                              
                                 b
                              
                              
                                 ⁎
                              
                           
                         color metric gives the best approximation to the human visual perception using the simple Euclidean distance, we extract features in the 
                           
                              
                                 L
                              
                              
                                 ⁎
                              
                           
                           
                              
                                 a
                              
                              
                                 ⁎
                              
                           
                           
                              
                                 b
                              
                              
                                 ⁎
                              
                           
                         color space [3]. We first convert the original RGB color space into the 
                           
                              
                                 L
                              
                              
                                 ⁎
                              
                           
                           
                              
                                 a
                              
                              
                                 ⁎
                              
                           
                           
                              
                                 b
                              
                              
                                 ⁎
                              
                           
                         color space, and then extract the 1st color moment, 
                           F
                           =
                           {
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                           ,
                           
                              
                                 f
                              
                              
                                 3
                              
                           
                           }
                        , where 
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                        , 
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                        , and 
                           
                              
                                 f
                              
                              
                                 3
                              
                           
                         are elements of the 
                           
                              
                                 L
                              
                              
                                 ⁎
                              
                           
                        , 
                           
                              
                                 a
                              
                              
                                 ⁎
                              
                           
                        , and 
                           
                              
                                 b
                              
                              
                                 ⁎
                              
                           
                         components, respectively, over the pixels in each superpixel. Thus, if we divide an image into n-superpixels using mean-shift segmentation, then we get the superpixel set 
                           
                              
                                 S
                              
                           
                           =
                           
                              
                                 {
                                 
                                    
                                       f
                                    
                                    
                                       i
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       f
                                    
                                    
                                       i
                                       2
                                    
                                 
                                 ,
                                 
                                    
                                       f
                                    
                                    
                                       i
                                       3
                                    
                                 
                                 }
                              
                              
                                 i
                                 =
                                 1
                              
                              
                                 n
                              
                           
                         with an ith superpixel.

We adopt a propagation strategy of the learned seed-kernel matrix. Thus, the seed selection is the key step of the proposed method because the seeds are used to generate pairwise constraints, i.e., must-link and cannot-link. To select the optimal seeds, we employ global k-means clustering (GKM) and self-tuning spectral clustering (SSC). To be specific, we select the initial seed set by GKM, and the seeds are labeled by SSC. GKM provides the optimal solution for the clustering problem because it is an incremental approach to clustering which dynamically adds one cluster at a time through a deterministic global search procedure [36]. To discover the underlying structure of the manifold from the seed set, we employ SSC for labeling seeds. SSC has been proposed to solve the sensitivity of scale parameters in the Gaussian kernel function [37], and is very effective in considering the manifold structure from data. The optimal seed selection is performed as follows. First, we select the seed set 
                           
                              
                                 
                                    
                                       S
                                    
                                 
                              
                              
                                 
                                    seed
                                 
                              
                           
                         from the superpixel set S by GKM. Features are extracted in 
                           
                              
                                 L
                              
                              
                                 ⁎
                              
                           
                           
                              
                                 a
                              
                              
                                 ⁎
                              
                           
                           
                              
                                 b
                              
                              
                                 ⁎
                              
                           
                         color space, and thus similarity between two features is computed using the simple Euclidean distance [3]. Cluster centers are selected as the seed set, 
                           
                              
                                 
                                    
                                       S
                                    
                                 
                              
                              
                                 
                                    seed
                                 
                              
                           
                           =
                           
                              
                                 {
                                 
                                    
                                       s
                                    
                                    
                                       j
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       j
                                       2
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       j
                                       3
                                    
                                 
                                 }
                              
                              
                                 j
                                 =
                                 1
                              
                              
                                 
                                    num_seed
                                 
                              
                           
                        , where num_seed indicates the number of seeds. Second, we assign labels to 
                           
                              
                                 
                                    
                                       S
                                    
                                 
                              
                              
                                 
                                    seeds
                                 
                              
                           
                         by SSC. In SSC, local scale parameters for each sample point are computed by 
                           σ
                           =
                           d
                           (
                           
                              
                                 x
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 x
                              
                              
                                 T
                              
                           
                           )
                        , where 
                           
                              
                                 x
                              
                              
                                 T
                              
                           
                         is the Tth neighbor of a point 
                           
                              
                                 x
                              
                              
                                 i
                              
                           
                        . Thus, the similarity between two points of 
                           
                              
                                 x
                              
                              
                                 i
                              
                           
                         and 
                           
                              
                                 x
                              
                              
                                 j
                              
                           
                         is computed by 
                           
                              
                                 W
                              
                              
                                 i
                                 j
                              
                           
                           =
                           exp
                           (
                           −
                           
                              
                                 
                                    
                                       ‖
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                       
                                       −
                                       
                                          
                                             x
                                          
                                          
                                             j
                                          
                                       
                                       ‖
                                    
                                    
                                       2
                                    
                                    
                                       2
                                    
                                 
                                 )
                              
                              
                                 
                                    
                                       σ
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       σ
                                    
                                    
                                       j
                                    
                                 
                              
                           
                        ). It has been reported that good results are obtained for high-dimensional data when 
                           T
                           =
                           7
                        , and thus we use it to construct a similarity matrix W. The seed labeling procedure is described in Algorithm 1
                        :

After selecting seeds, we obtain pairwise constraints for generating a seed-kernel matrix from them. In our method, two types of pairwise constraints are used: must-link and cannot-link. The must-link means that two samples must belong to the same cluster while the cannot-link means two samples cannot belong to the same cluster. Thus, pairwise constraints are generated from 
                           
                              
                                 
                                    
                                       S
                                    
                                 
                              
                              
                                 
                                    seed
                                 
                              
                              
                                 ′
                              
                           
                        . If two seeds have the same labels in 
                           
                              
                                 
                                    
                                       S
                                    
                                 
                              
                              
                                 
                                    seed
                                 
                              
                              
                                 ′
                              
                           
                        , then they belong to the must-link constraints. On the contrary, if two seeds have different labels in 
                           
                              
                                 
                                    
                                       S
                                    
                                 
                              
                              
                                 
                                    seed
                                 
                              
                              
                                 ′
                              
                           
                        , then they belong to the cannot-link constraints. For notational convenience, we still denote 
                           M
                         and 
                           C
                         as the set of the must-link constraints and set of cannot-link constraints, respectively. The seed-kernel matrix is generated by 
                           M
                         and 
                           C
                        . Then, we perform constraint learning and propagation using KP. KP for image segmentation consists of the two stages: (1) learn a seed-kernel matrix on the 
                           M
                         and 
                           C
                        ; (2) propagate the learned seed-kernel matrix into the full-kernel matrix to get the labels for all superpixels. We provide its detailed procedure in Algorithm 2
                        :

@&#EXPERIMENTAL RESULTS@&#

In this section, we demonstrate the segmentation results of the proposed method on natural images in the Berkeley segmentation database [38], which also contains benchmark segmentation results obtained from human subjects. We compare our method with conventional methods including the Nyström spectral clustering (NSC) [39], k-means clustering (KM), mean-shift and normalized-cut (MSNC) [1], and compression-based texture merging (CTM) [40] methods.

The proposed method is comprised of three main steps: superpixel generation by mean-shift segmentation, optimal seed selection by GKM and SSC, and learning and propagation of a seed-kernel matrix. Fig. 3
                         shows intermediate results of the proposed method including superpixel generation, seed selection, and image segmentation results. As shown in Fig. 3(b), we generate approximately 1000 superpixels which are sufficiently enough to preserve objective boundaries using the mean-shift algorithm [35]. Mean-shift performs the segmentation by clustering the data into several disjoint groups. The cluster centers are computed by first defining a spherical window and then shifting the window to the mean of the data points with a radius r. This shifting process repeats until convergence. The segmentation results are obtained by using the cluster labels. The mean-shift algorithm needs three input parameters of the range bandwidth 
                           
                              
                                 h
                              
                              
                                 r
                              
                           
                        , the spatial bandwidth 
                           
                              
                                 h
                              
                              
                                 s
                              
                           
                        , and the minimum region area m. In our experiments, we set 
                           (
                           
                              
                                 h
                              
                              
                                 r
                              
                           
                           ,
                           
                              
                                 h
                              
                              
                                 s
                              
                           
                           ,
                           m
                           )
                           =
                           (
                           6
                           ,
                           8
                           ,
                           20
                           )
                        . It can be observed in Fig. 3(c) that selected seeds are uniformly distributed over entire images. In Fig. 3(c), colored superpixels are selected seeds while white ones are uncertain regions to be confirmed by seed propagation. Finally, we get image segmentation results by learning and propagating the seed-kernel matrix as shown in Fig. 3(d). Representative segmentation results on natural images are shown in Figs. 4–6
                        
                        
                        . For better visual evaluations, we divide the test images into two categories. The one is test images which the number of clusters N is smaller than 5 as shown in Fig. 4. The other is ones which N is greater than 5 as shown in Fig. 5. Here, we select 10% of the number of superpixels as the initial seed set in the former case while we choose 20% in the latter case. Some other representative results are also shown in Fig. 6. In the figures, we also provide the image segmentation results by the Nyström spectral clustering (NSC) [39], k-means clustering (KM), mean-shift and normalized-cut (MSNC) [1], and compression-based texture merging (CTM) [40] methods. Here, the prescribed threshold γ is set to 0.2 in CTM [40]. Compared with the conventional methods, our method is very effective in preserving boundary information of objects. Also, it can be observed that KP is effectively applied to automatic image segmentation. In the figures, the red lines are the boundaries of segmented regions.

For more quantitative evaluations of image segmentation results, four measures are used for performance evaluation:
                           
                              (1)
                              The Boundary Displacement Error (BDE) [41]: The boundary-based approach evaluates segmentation results in terms of both localization and shape accuracy [41]. It defines the error of one boundary pixel as the distance between the pixel and the closest pixel in the other boundary image [40].

The Probabilistic Rand Index (PRI) [40]: It counts the fraction of pairs of pixels whose labels are consistent between the computed segmentation and the ground truth.

The Variation of Information (VoI) metric [42]: It defines the distance between two segmentations in items of average conditional entropy.

The Global Consistency Error (GCE) [38]: It measures the extent that one segmentation can be viewed as a refinement of the other.

BDE ranges between 
                           [
                           0
                           ,
                           ∞
                           )
                         in the unit of pixel, and lower is better. PRI ranges between 
                           [
                           0
                           ,
                           1
                           ]
                        , and higher is better. VoI ranges between 
                           [
                           0
                           ,
                           ∞
                           )
                        , and lower is better. GCE ranges between 
                           [
                           0
                           ,
                           1
                           ]
                        , and lower is better. All image segmentation results are evaluated by the publicly available benchmark source code provided in [40]. For more information, we run NSC with the number of samples 
                           
                              
                                 N
                              
                              
                                 s
                              
                           
                           =
                           100
                         as suggested in [40]. For MSNC [1], we also set 
                           (
                           
                              
                                 h
                              
                              
                                 r
                              
                           
                           ,
                           
                              
                                 h
                              
                              
                                 s
                              
                           
                           ,
                           m
                           )
                           =
                           (
                           6
                           ,
                           8
                           ,
                           20
                           )
                         and the scale parameter of Gaussian function 
                           σ
                           =
                           1
                        . Moreover, we obtain image segmentation results at 
                           γ
                           =
                           0.2
                         in CTM [40]. The number of clusters N is the same in NSC, MSNC, KM, and our method, while it is determined by itself in CTM.


                        Table 2
                         shows the average performance of the image segmentation results on the Berkeley segmentation dataset in term of the four measures. In the table, bold numbers indicate the best results among all the methods. As shown in Table 2, it can be seen that the proposed method achieves state-of-the-art performance. The performances of our method are similar to or better than those of the other four methods. In particular, our method significantly outperforms the others in preserving boundary information. Our method outperforms NSC and MSNC in all measures and is better than KM except PRI. CTM is better than our method in terms of PRI and GCE, while our method outperforms CTM in terms of BDE and VoI. It has been reported that PRI and VoI provide similar information to human segmentation in terms of visual perception [40]. As a result, the evaluation results show that our method produces segmentation results close to human perception.

To verify the effectiveness of the seed selection, i.e., GKM+SSC, we perform two kinds of experiments. First, we use the k-means clustering (KM) instead of the GKM, i.e., KM+SSC, and obtain the seed selection and segmentation results as shown in Fig. 7
                        . Since KM tends to converge to local minima during the iterations which may be far from the global optima, the selected seeds are concentrated in some local areas (Fig. 7(b)). Thus, segmentation results are far from satisfactory (Fig. 7(c)). However, GKM converges to the global optima in finding the seed set, and provides good segmentation performance (Figs. 7(d) and (e)). Second, we confirm the effects by SSC. In our method, we select the initial seed set by GKM and assign labels to the selected seeds by SSC. Thus, to verify the superiority of SSC in the labeling of the seeds, we compare it with KM as shown in Fig. 8
                        . SSC is more effective in segmenting the objects in images and preserving their boundary information than KM because of its capability of identifying the underlying manifold structure.

In our method, we determine three parameters: (1) the termination parameter m in mean-shift segmentation, (2) the number of clusters N, and (3) the number of initial seeds. First, the value of m directly affects selection of initial seeds and final segmentation results. In our approach, an appropriate value of m is chosen to yield 1000 superpixels in an image considering computational complexity and segmentation performances. Second, N is empirically estimated by the number of main colors and objects contained in an image. Third, the number of initial seeds is also very important parameter to influence the performance of the proposed method. To determine the appropriate number of the seeds, we obtain the eight test images from the Berkeley segmentation database as shown in Fig. 9
                        , and perform some experiments on them. Here, N is smaller than 5 in Figs. 9(a)–(d), and greater than 5 in Figs. 9(e)–(j). Tables 3 and 4
                        
                         list the average segmentation performance of the proposed method on the test images according to the percentage of superpixels. Specifically, Table 3 provides the segmentation performance when N is smaller than 5 while Table 4 gives the segmentation performance when N is greater than 5. If N is smaller than 5, 10% of superpixels are appropriate; otherwise, 20% are appropriate. The appropriate percentage of superpixels is related to N. It is due to the fact that an image with large N requires more constraint information than one with small N. The experimental results also show that the segmentation performance does not always be improved as the percentage of superpixels increases. That means the segmentation performance is not enhanced even if more constraints are used. In the constraints based methods, class labels are the supervisory information, and thus more constraints generally provide better data clustering performance. However, in our method, we automatically select the seeds to generate constraints, and thus a lot of the seeds cause confusion in data clustering. Therefore, when N is smaller than 5, we use 10% of the superpixels; and otherwise, 20% as seeds.

In this section, we analyze the computational complexity of our method. Computational costs are caused by three main parts: superpixel generation, optimal seed selection, learning and propagation of a seed-kernel matrix. In the optimal seed selection, computational cost depends on the number of initial seeds, and thus the corresponding complexity is 
                           O
                           (
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                           )
                           +
                           O
                           (
                           
                              num
                           
                           _
                           
                              
                                 seed
                              
                              
                                 2
                              
                           
                           )
                         where n is the number of superpixels and num_seed is the number of initial seeds. Overall, the computational complexity of our method is related to the number of constraints. Table 5
                         shows the average runtime of our method. Here, our method is implemented in Matlab and performed on a PC with Intel Core(TM)2 Duo CPU 3.0 GHz, 2 G RAM and Microsoft Windows XP (image size: 
                           481
                           ×
                           321
                         pixels). As can be seen, the computational costs of our method are strongly influenced by the number of constraints.

@&#CONCLUSION@&#

In this paper, we have proposed a novel image segmentation method using constraint learning and propagation. The proposed method is basically based on the two-step approach of over-segmentation and classification. Thus, an image is first over-segmented into many superpixels using mean-shift segmentation, and then the over-segmented superpixels are classified into expected clusters by KP. In KP, a small-sized seed-kernel matrix is learned using pairwise constraints obtained from initial seeds, and propagated into a large-sized full-kernel matrix. Because learning and propagation of a seed-kernel matrix is employed, the proposed method preserves characteristics of seeds and maintain data-coherence effectively. Experimental results show that the proposed method consistently achieves good performance on image segmentation tasks, outperforming the latest state-of-the art method in terms of the four evaluation measures including BDE, PRI, VoI, and GCE. The experimental results and performance comparisons are reported in detail, thereby confirming that the KP can be effectively employed for dealing with automatic image segmentation.

In this study, we have focused on automatic image segmentation based on KP. However, the proposed method can be extended to interactive image segmentation with simple user interaction [43–45]. Therefore, we will continue investigating it in the future.

@&#ACKNOWLEDGEMENTS@&#

The authors would like to thank the anonymous reviewers for their valuable comments that have led to improvements in the quality and presentation of the paper. This work was supported by the National Basic Research Program (973 Program) of China (No. 2013CB329402), the National Natural Science Foundation of China (Nos. 61271298 and 61050110144), the Fund for Foreign Scholars in University Research and Teaching Programs (the 111 Project) (No. B07048), and the Program for Cheung Kong Scholars and Innovative Research Team in University (No. IRT1170).

@&#REFERENCES@&#

