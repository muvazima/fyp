@&#MAIN-TITLE@&#Reconstructing gene regulatory networks from knock-out data using Gaussian Noise Model and Pearson Correlation Coefficient

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A method to reconstruct gene regulatory networks from knock-out data is proposed.


                        
                        
                           
                           The proposed method apply Normal Distributions and Pearson Correlation Coefficient.


                        
                        
                           
                           Indirect regulations generate many false positives.


                        
                        
                           
                           Most of the false negatives are mostly due to multiple genes input.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Bioinformatics

Probability and statistics

DREAM

Gene regulatory network

Gaussian model

Pearson Correlation Coefficient

@&#ABSTRACT@&#


               
               
                  A gene regulatory network (GRN) is a large and complex network consisting of interacting elements that, over time, affect each other’s state. The dynamics of complex gene regulatory processes are difficult to understand using intuitive approaches alone. To overcome this problem, we propose an algorithm for inferring the regulatory interactions from knock-out data using a Gaussian model combines with Pearson Correlation Coefficient (PCC). There are several problems relating to GRN construction that have been outlined in this paper. We demonstrated the ability of our proposed method to (1) predict the presence of regulatory interactions between genes, (2) their directionality and (3) their states (activation or suppression). The algorithm was applied to network sizes of 10 and 50 genes from DREAM3 datasets and network sizes of 10 from DREAM4 datasets. The predicted networks were evaluated based on AUROC and AUPR. We discovered that high false positive values were generated by our GRN prediction methods because the indirect regulations have been wrongly predicted as true relationships. We achieved satisfactory results as the majority of sub-networks achieved AUROC values above 0.5.
               
            

@&#INTRODUCTION@&#

A gene regulatory network (GRN) is a large and complex network consisting of interacting elements such as genes, transcription factors and other molecules that, over time, affect each other’s state. As transcription networks involve many components connected through interconnected positive and negative feedback loops, an intuitive understanding of their dynamics is difficult to attain. Changes of interactions due to perturbations and the stochastic nature of the transcription networks make them more difficult to infer. Consequently, computational methods for the modeling and simulation of transcription networks will be indispensable. Networks inference is an important and active research area with an ever-increasing number of algorithms and publications. The DREAM (Dialogue for Reverse Engineering Assessments and Methods Challenge) challenge has been organized with one of the key aims being the development of community-wide challenges for objective assessment of reverse engineering methods for biological networks (Marbach et al., 2009). Inferring GRNs remain challenging because of several limitations, including (1) the high dimensionality of living cells, where tens of thousands of genes act at different temporal and spatial combinations; (2) one gene or gene product may interact with multiple partners, either directly or indirectly, thus possible relationships are dynamic and non-linear; (3) current high-throughput technologies generate data that involve a substantial amount of noise (Zhang et al., 2013) and (4) the sample size is extremely low compared with the number of genes (Zhang et al., 2010; Xu et al., 2007).

In this work, we propose a method to improve the accuracy of GRN inference from gene expression data using noise elimination and relationships strength measuring method by combining the Gaussian Noise Model and the Pearson Correlation Coefficient (PCC). The main novelty of our approach is that the combination of Gaussian with Pearson Correlation Coefficient (PCC) captures the potential regulatory interactions as much possible by widening the acceptable range of 
                        
                           
                              p
                              
                                 a
                                 →
                                 b
                              
                           
                        
                      produced by Gaussian, without compromising the accuracy of prediction using relationships’ strength filteration process performed by PCC.

@&#BACKGROUND@&#

Modeling and simulation of transcription networks are the emerging bioinformatics areas that are currently drawing attention. Transcription networks have been modeled in many different ways and several reports have been devoted to deriving gene pathway and network from gene expression data (Irrthum et al., 2010; Zhang et al., 2013; Kentzoglanakis and Poole, 2012). In general, these GRN inference methods fall into two categories, namely model-based approaches and machine learning-based approaches (Zhang et al., 2013). The parameters generated from the model-based methods represent the regulation strengths of the regulators. Examples of algorithms in this category include multiple linear regression, singular value decomposition method, network component analysis and linear programming. Adding to the list of approaches are hybrid approaches (Smolen et al., 2000; Pahle, 2009; Yip et al., 2010; Zhang et al., 2012), in which researchers have developed a novel method by incorporating more than one method.

Regression analysis is a very flexible approach which can be used in a wide variety of situations (Miles and Shevlin, 2001). Regression is a statistical method frequently used in exploratory analyes, that is, in situations where the true model is not known. Hence, identification of one specific and appropriate model is important when using regression analysis in GRN inference (Freund and Wilson, 1998). Regression analysis is widely used for prediction and forecasting, where its use has substantial overlap with the field of machine learning. Over-fitting problem and choice of regression model are some of issues related to regression.

Multivariate regression is used due to the nature of GRNs that consists of simultaneous observation and analysis of more than one outcome variable. There are a number of methods in this category such as Multiple Linear Regression, Principle Component Regression, Partial Least Squares, LASSO and Canonical Correlation Analysis.

The linear regression model consists of a deterministic part and a random part, generally defined as
                        
                           (1)
                           
                              
                                 y
                                 =
                                 
                                    
                                       β
                                    
                                    
                                       0
                                    
                                 
                                 +
                                 
                                    β
                                    
                                       1
                                    
                                 
                                 x
                                 +
                                 ∈
                              
                           
                        
                     The deterministic portion of the model,
                        
                           (2)
                           
                              
                                 
                                    β
                                    
                                       0
                                    
                                 
                                 +
                                 
                                    β
                                    
                                       1
                                    
                                 
                                 x
                              
                           
                        
                     specifies that for any value of the independent variable, x, the population mean of the dependent or response variable, y, is described by the straight-line function 
                        
                           
                              β
                              0
                           
                           +
                           
                              β
                              1
                           
                           x
                        
                     .

The linear regression-based method developed by Dong et al. (2013) performs better in terms of power of detection, but requires a future work to decrease false discovery rate in high-noise context, and apply new strategies to handle large-size gene networks.

Structural Equation Model (SEM) produces results equivalent to any that regression techniques can produce. SEM has been applied to several research works such as (Dong et al., 2013; Xiong et al., 2004; Logsdon and Mezey, 2010). SEMs have a number of advantages including allowing feedback loops, differentiating direct relations from indirect relations (Chun et al., 2011), ability to correct for measurement error and SEM model can be tested, and is therefore falsifiable (able to be proved wrong) (Miles and Shevlin, 2001). Maximum Likelihood (ML), is the method to estimate the parameters in SEM. It works iteratively to find the best solution by searching through solutions and testing them until it finds the best one. The method that we compare in this paper (Madar et al., 2010) applies ML.

For the machine learning-based approaches, the network is inferred by measuring the dependencies or causalities between transcriptional factors (TFs) and target genes. Some methods in this category include the partial correlation coefficient, the Bayesian network (Godsey, 2013), mutual information (MI) (Kuo-Ching and Xiaodong, 2008), graph theory (Pinna et al., 2010) and neural network (Knott et al., 2010; Liu et al., 2011). Using Recurrent Neural Network (RNN) as an example, RNNs consists of feedback connections and dynamic memory units that make it suitable for modeling global gene regulatory networks (Mitra et al., 2011; Xu et al., 2007; Vohradsky, 2001). There are several methods used for RNN training such as back-propagation through time (BPTT), evolutionary algorithms and PSO (Particle Swarm Optimization) (Xu et al., 2007). The basic concepts of RNN begins with each node of the network represents a particular gene, and the wiring between the nodes defines regulatory interactions.

The previous set of hidden unit activations feeding back into the network along with the inputs. Note that one has to discretize the time and update the activations one time step at a time. This might correspond to the time scale at which real neurons operate, or for artificial systems it can be any time step size appropriate for the given problem. A delay unit is introduced which simply delays the signal/activation until the next time step (Bullinaria, 2013). Fig. 1
                      shows the basic concepts of RNN.

Studies performed by Mitra et al. (2011), Xu et al. (2007) and Vohradsky (2001) describe the RNN model of GRN inference using time-series expression data. The difference between static and time-series gene expression data is that, time-series gene expression data able to interpret complex temporal behaviour (Xu et al., 2007). RNN is sometimes restricted in performance by the limited number of samples (or time points) in DNA microarray experiments; their number generally being smaller than the number of attributes (or the parameters) to be estimated (Xu et al., 2007). This situation limits the application of many data-driven computational models and makes it very difficult to infer a fully determined large scale regulatory network and make accurate predictions of future expression levels.

Correlation based approaches such as Mutual Information (MI) has been proposed for extracting genetic networks (Roy et al., 2014). The MI of discrete random variables X and Y is defined as
                        
                           (3)
                           
                              
                                 I
                                 (
                                 X
                                 ,
                                 Y
                                 )
                                 =
                                 
                                    
                                       ∑
                                    
                                    
                                       x
                                       ∈
                                       X
                                       ,
                                       y
                                       ∈
                                       Y
                                    
                                 
                                 p
                                 (
                                 x
                                 ,
                                 y
                                 )
                                 log
                                 
                                    
                                       p
                                       (
                                       x
                                       ,
                                       y
                                       )
                                    
                                    
                                       
                                          p
                                          X
                                       
                                       (
                                       x
                                       )
                                       
                                          p
                                          Y
                                       
                                       (
                                       y
                                       )
                                    
                                 
                              
                           
                        
                     where pX, pY are the marginal probability mass functions of X and Y, respectively, and p is the joint probability mass function of (X,Y).

Methods such as ARACNE (Margolin et al., 2006), CLR (Faith et al., 2007), MRNET (Meyer et al., 2008) and PCA-CMI (Zhang et al., 2012) have succeeded in inferring the GRNs using MI-based methods (Guo et al., 2014). Even though the MI is quite popular, it still has its limits. MI works well with co-expressed or positively regulated patterns. However, it fails in handling gene profile with negative and mixed patterns (Roy et al., 2014). Moreover, MI is incapable of detecting edge directionality (Guo et al., 2014; Irrthum et al., 2010). MI discretizes the expression values before computation that may lead to information loss. Thus, MI may not able to identify the relationships accurately (Roy et al., 2014). GRNs inference using MI may result in low inference accuracy when applied to limited number of samples (Dong et al., 2013). Despite of the limitations, MI is further improved by using Conditional Mutual Information (CMI) which measures conditional dependency between two variables (genes) given other gene(s). The CMI of variables X and Y given Z is defined as
                        
                           (4)
                           
                              
                                 I
                                 (
                                 
                                    
                                       X
                                       ,
                                       Y
                                    
                                    |
                                 
                                 Z
                                 )
                                 =
                                 
                                    ∑
                                    
                                       x
                                       ∈
                                       X
                                       ,
                                       y
                                       ∈
                                       Y
                                       ,
                                       z
                                       ∈
                                       Z
                                    
                                 
                                 p
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 z
                                 )
                                 
                                    log
                                 
                                 
                                    
                                       p
                                       (
                                       
                                          
                                             x
                                             ,
                                             y
                                          
                                          |
                                       
                                       z
                                       )
                                    
                                    
                                       p
                                       (
                                       
                                          x
                                          |
                                       
                                       z
                                       )
                                       p
                                       (
                                       
                                          y
                                          |
                                       
                                       z
                                       )
                                    
                                 
                              
                           
                        
                     
                  

A review of the strengths and weaknesses of the past GRN inference methods have been discussed extensively in (Knott et al., 2010; Pahle, 2009; Noman and Iba, 2007; Schlitt and Brazma, 2007; Lesne, 2006; Finkelstein et al., 2004; Babu et al., 2004). Since 2010, the trend has changed where many researches starting to explore many techniques in order to improve the prediction performance to the highest possible accuracy. We select a few researches from the year 2010 untill 2014 from reputable journals in bioinformatics such as PLoS One, PLoS Biology, PLoS Computational Biology, BMC Bioinformatics, IEEE/ACM Transactions on Computational Biology and Bioinformatics and Oxford Journals: Bioinformatics. These recent researches apply methods such as random forests (Irrthum et al., 2010), multiple linear regression (Gregoretti et al., 2010), particle swarm optimization and ant colony optimization (Kentzoglanakis and Poole, 2012), double t-test (Qi and Michoel, 2012), ANOVA (Küffner et al., 2012), LASSO (Geeven et al., 2012), Markov logic network (Brouard et al., 2013), local expression pattern (Roy et al., 2014), univariate analysis (Flassig et al., 2013), Kalman filter (Samoilov et al., 2012), ordinary differential equation and distance correlation based (Guo et al., 2014). From our observations, more attentions have been given to the detail of the method implementation itself rather than the choice of method. This is inline with the analysis of DREAM3 challenge performance conducted by Marbach et al. (2009), that conclude that there was no correlation between the general type of inference method used by participants of DREAM3 challenge and the scores, hence, implying that success is more related to the details of implementation than the choice of general methodology.

Four problems have been identified, particularly in using knock-out data for GRN construction. First, is the need to identify the two important parameters in GRN construction that are affected by noise: (1) the unaffected genes and (2) the wild-type strain values, which are more difficult to identify when a larger number of genes are involved. Second, though past research has been conducted in reconstructing GRN, only a few researchers applied their methods to real experimental GRN datasets, as an addition to synthetic data (Guo et al., 2014; Flassig et al., 2013; Brouard et al., 2013; Xuan et al., 2012; Irrthum et al., 2010; Yuan et al., 2011; Zou and Conzen, 2005; Perrin et al., 2003; Ibrahim et al., 2011; Knott et al., 2010; Kentzoglanakis and Poole, 2012). Third, most past research have focused on GRN prediction, with only minor attention given to determining the directionality of the genes. Finally, many high false positive (FP) values are generated using the GRN prediction methods because the indirect regulations have been incorrectly predicted as true relationships. Despite various algorithms proposed by researchers to infer GRNs, there are very few algorithms that directly address the issue of distinguishing between the direct and indirect regulation (Yip et al., 2010). Some of the researches such as (Zhang et al., 2012) addressed the issue of indirect regulation but there was no specific evaluation conducted to prove the ability of their proposed method to solve the indirect regulations issue.


                     Table 1
                      shows the example of some parts of the E. coli2 expression data (Marbach et al., 2009), which are used to explain indirect regulations. Fig. 2
                      presents the graphical presentation of the data shown in Table 1. Based on the deviations between the gene measurements and the wild-type values, there are three possible genes that may have a connection with G4. However, only two (G1→G4 and G5→G4) have true connections with G4. Because numerous possible values may exist in the datasets, identifying one that is truly connected is a challenging task. We are likely to predict G9→G4 as one of the true connections, hence resulting in FP error. G9 is connected to G4, but through an indirect connection (G9→G1→G4). The same case occurs to G9, which may be wrongly predicted to have connection with G6, where G9 is only connected to G6 through indirect connection (G9→G1→G6). Out of three possible values, there are two true connections, which are at G1→G6 and G5→G6. The problem will become prominent when data are affected by noise and involve a large number of genes with more complex connections.

This paper describes how the first three problems are solved. The last problem relating to the indirect regulation will be discussed in our future publication.

Datasets generated by Marbach et al. (2009) and Prill et al. (2010) for the DREAM challenge were used in this work. The datasets used correspond to mRNA concentration levels that one would obtain from gene expression data. For every gene, the simulation of the expression data was performed using ordinary differential equations (ODEs). White noise with a SD of 0.05 was added to the generated gene expression data following the simulation. Network sizes of 10 and 50 genes from the DREAM3 challenge and network sizes of 10 from DREAM4 were used for the performance evaluation of this work. DREAM3 consists of five sub-networks representing E.coli1, E.coli2, Yeast1, Yeast2 and Yeast3. DREAM4 consists of five sub-networks, namely Network 1–Network 5. The number of possible edges in an N-gene network (N is the number of genes) without auto-regulatory interactions is N (N–1). Auto-regulatory interactions were removed; hence, the number of possible edges of network sizes of 10 and 50 genes is 90 and 2450, respectively.


                     Table 2
                      shows an example of both the noise-affected and noise-free knock-out data extracted from Marbach et al. (2009). Given 
                        
                           
                              G
                              b
                              a
                           
                        
                     , a corresponds to the gene being knocked out and b corresponds to the gene of which the expression is measured. The row labeled G
                     wt in Table 2 contains the wild-type (unperturbed) gene activities, which contain the steady-state levels of the wild-type (the unperturbed network).

@&#METHOD@&#

A Normal Distribution model has been identified as one of the suitable methods to be applied for the problems and datasets used. The terms “Gaussian” and “Gaussian Noise” have also sometimes been used to denote the Normal Distribution model. Gaussian Noise or Gaussian Probability Distribution is “A probability distribution describing random fluctuations in a continuous physical process; named after Karl Friedrich Gauss, an 18th century German physicist (Truax, 1978).” Normal Distribution models the random nature of the biological system and the measurement error (Brase and Brase, 2012). Normal Distributions are proposed in this work because the characteristics of the datasets that are random, continuous and normally distributed or normal deviate. Noise data follows a Normal Distribution with a mean of zero (Salkind, 2010). For consistency, the term Gaussian model is used in this whole document.

Gaussian model has been applied by Yip et al. (2010), in which the Gaussian model was combined with the Ordinary Differential Equation (ODE) method, applied on knock-out, knock-down and perturbation time-series data. While (Yip et al., 2010) combines the predictions of the different models learned from deletion and perturbation data, we rely solely on knock-out data.

Our method and (Yip et al., 2010) have different ways of combining prediction of the models: (Yip et al., 2010) make predictions in batches, with the first batch containing the most confident predictions, and each subsequent batch containing the most confident predictions that have not been covered by the previous batches; our method, instead, considers 
                        
                           
                              p
                              
                                 a
                                 →
                                 b
                              
                           
                        
                      value that was a bit lower than value set by Yip et al. (2010). Then, we verify the potential regulations from the first filtration with another method called PCC to ensure only the true regulations are captured.

We had conducted an experiment with Gaussian model only prior to the experiment described in this paper to assess the capability of using a single method of Gaussian to predict the GRN. The results of the Gaussian experiment shown in Table 3
                      reveals that the inference using Gaussian only appeared to have an acceptable level of performance for DREAM3 datasets but not for DREAM4 datasets, with majority of the subnetworks achieved AUPR below 0.5. These inconsistent results trigger us to improve the Gaussian model by adding one more method called PCC.

PCC describes the strength of a linear relationship between two variables (Freund and Wilson, 1998; Shipley, 2002). Since the partial correlation can be expressed as a simple correlation between two variables, it has the properties of a simple correlation; it takes a value from −1 to +1, with a value of 0 indicating no relationship and values of −1 and +1 indicating perfect relationship (Freund and Wilson, 1998). PCC has to be supported with the Gaussian model because PCC is unable to identify directionality in GRN. The main aim of our proposed approach was to identify whether deviation 
                        
                           
                              G
                              b
                              a
                           
                           −
                           
                              G
                              
                                 w
                                 t
                                 ∗
                              
                           
                        
                      is merely due to noise. This can be known if we obtain the variance (
                        
                           
                              σ
                              2
                           
                        
                     ) or standard deviation (σ). The standard deviation (SD) must be estimated from the data using data points that are not affected by the deleted genes. However, this poses two main problems. First, the unaffected genes are unknown. Second, the wild-type strain required for the calculation is also subjected to noise. There are two main parameters that must be obtained to calculate the probability of regulation: (1) initial mean of each 
                        
                           
                              G
                              b
                              
                                 w
                                 t
                              
                           
                        
                      and (2) variance (
                        
                           
                              σ
                              2
                           
                        
                     ).

We discovered two ways to implement the Gaussian model to obtain 
                        
                           
                              G
                              b
                              
                                 w
                                 t
                              
                           
                        
                      and 
                        
                           
                              σ
                              2
                           
                        
                      from the knock-out data.

The observed wild-type expression levels, 
                           
                              
                                 G
                                 b
                                 
                                    w
                                    t
                                 
                              
                           
                        , are almost at the same value as the actual wild-type expression levels, 
                           
                              
                                 G
                                 b
                                 
                                    w
                                    t
                                 
                              
                              ≈
                              
                                 G
                                 b
                                 
                                    w
                                    t
                                    ∗
                                 
                              
                           
                        . We calculated SD (σ) using Formula (5) to determine the usual fluctuation of the expression of a gene, assuming it is not affected by the various knock-outs.
                           
                              (5)
                              
                                 
                                    σ
                                    =
                                    
                                       
                                          
                                             
                                                ∑
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            G
                                                         
                                                         a
                                                      
                                                      −
                                                      
                                                         G
                                                         
                                                            
                                                               G
                                                               b
                                                            
                                                         
                                                         
                                                            w
                                                            t
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                             
                                                a
                                                −
                                                1
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where a
                        =number of the knock-out genes, b
                        =number of the measured genes and a
                        ≠
                        b
                     

We repeated the same calculations for all genes with measured quantified levels of gene expressions. Iterations were applied to refine the estimation of 
                           
                              
                                 
                                    G
                                 
                                 b
                                 
                                    w
                                    t
                                 
                              
                           
                         and 
                           
                              
                                 σ
                                 2
                              
                           
                        . SD estimations were performed until achieving the final estimated SD. Then, the final SD was used to estimate the wild-type values. With a 95% degree of confidence for estimations of both SD and wild-type values, a p
                        <0.05 or z-scores>1.96 is regarded as a potential regulation. The values that do not meet the condition are considered non-regulation; those values will be used to re-estimate the variance of the Gaussian Noise.

The basic concepts proposed by Yip et al. (2010) are similar to method 1 but differ because the estimations of SD and wild-type values were performed simultaneously. This method estimates SD and wild-type values using 68% and 95% confidence levels, respectively.

Final estimates of SD (
                           σ
                        ) and wild-type values 
                           
                              
                                 G
                                 
                                    w
                                    t
                                    ∗
                                 
                              
                           
                         were used for the calculation in Formula (6). The probability that the deviation is due to random chance is (Yip et al., 2010): 
                           
                              [
                              1
                              −
                              Φ
                              (
                              |
                              
                                 
                                    G
                                 
                                 
                                    b
                                    −
                                 
                                 a
                              
                              
                                 G
                                 
                                    w
                                    t
                                    ∗
                                 
                              
                              |
                              /
                              σ
                              )
                              ]
                           
                        . The complement,
                           
                              (6)
                              
                                 
                                    
                                       p
                                       
                                          a
                                          →
                                          b
                                       
                                    
                                    =
                                    1
                                    −
                                    2
                                    [
                                    1
                                    −
                                    Φ
                                    
                                       (
                                       
                                          
                                             
                                                |
                                                
                                                   
                                                      
                                                         G
                                                      
                                                      
                                                         b
                                                         −
                                                      
                                                      a
                                                   
                                                   
                                                      G
                                                      
                                                         w
                                                         t
                                                         ∗
                                                      
                                                   
                                                
                                                |
                                             
                                             σ
                                          
                                       
                                       )
                                       ]
                                    
                                    =
                                    2
                                    Φ
                                    
                                       (
                                       
                                          
                                             
                                                |
                                                
                                                   
                                                      
                                                         G
                                                      
                                                      
                                                         b
                                                         −
                                                      
                                                      a
                                                   
                                                   
                                                      G
                                                      
                                                         w
                                                         t
                                                         ∗
                                                      
                                                   
                                                
                                                |
                                             
                                             σ
                                          
                                       
                                       )
                                    
                                    −
                                    1
                                 
                              
                           
                        where Φ is a normal cumulative distribution function.

is a probability that the deviation is due to a regulation event. Then, we use a PCC (r) to combine with the Gaussian Noise Model.

The formula for PCC for two variables, xi
                         and yi
                        , is computed as:
                           
                              (7)
                              
                                 
                                    
                                       r
                                       
                                          x
                                          y
                                       
                                    
                                    =
                                    
                                       
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                n
                                             
                                          
                                          (
                                          
                                             x
                                             i
                                          
                                          −
                                          
                                             
                                                
                                                   x
                                                   ¯
                                                
                                             
                                          
                                          )
                                          (
                                          
                                             y
                                             i
                                          
                                          −
                                          
                                             
                                                
                                                   y
                                                   ¯
                                                
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   
                                                      n
                                                   
                                                
                                                
                                                   
                                                      (
                                                      
                                                         x
                                                         i
                                                      
                                                      −
                                                      
                                                         
                                                            
                                                               x
                                                               ¯
                                                            
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      2
                                                   
                                                
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   
                                                      n
                                                   
                                                
                                                
                                                   
                                                      (
                                                      
                                                         y
                                                         i
                                                      
                                                      −
                                                      
                                                         
                                                            
                                                               y
                                                               ¯
                                                            
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 x
                                 ¯
                              
                           
                         and 
                           
                              
                                 y
                                 ¯
                              
                           
                         are the means for xi
                         and yi.
                     

We then apply the following rules to identify the relationships of 
                           
                              
                                 G
                                 b
                                 a
                              
                           
                        :


                        
                           
                              
                           
                        
                     

The high value of 
                           
                              
                                 p
                                 
                                    a
                                    →
                                    b
                                 
                              
                           
                         (0.99) is set to reduce the number of FPs. Calculating r
                        
                           xy
                         is not required for the case of 
                           
                              
                                 p
                                 
                                    a
                                    →
                                    b
                                 
                              
                           
                         ≥ 0.99 because the high value of 
                           
                              
                                 p
                                 
                                    a
                                    →
                                    b
                                 
                              
                           
                         assures the relationship is exist. Then, the lower 
                           
                              
                                 p
                                 
                                    a
                                    →
                                    b
                                 
                              
                           
                         value (0.95) is set to discover more potential regulations. Here, r
                        
                           xy
                        
                        ≥0.4 is included to attest the relationships.

In general, the higher the correlation coefficient, the stronger the relationship. There is no specific rule for determining what size of correlation is considered strong, moderate or weak. The interpretation of the coefficient depends on the things we study. The correlation coefficients shall be expected to be lower for the things that are difficult to measure such as health-gain from an operation. Due to that, the categorisation in correlation coefficients are also varied, for example, Dancey and Reidy’s (2007) defines their categorisation (r
                        
                           xy
                        ) as shown in Table 4
                         (Dancey and Reidy, 2007), where Evans (1996) suggests for the absolute value of r
                        
                           xy
                         to be slightly different as shown in Table 5
                         (Evans, 1996).

We rarely see correlations above 0.6 in our data, hence, we consider correlations above 0.4 to be relatively strong. Since 0.4 is relatively low compare to common categorisation proposed by Dancey and Reidy (2007) and Evans (1996), we add another rule 0.99≥
                        
                           
                              
                                 p
                                 
                                    a
                                    →
                                    b
                                 
                              
                           
                        
                        ≥0.95 to ensure only a true gene relationships will be captured. Fig. 3
                         shows how we combine predictions from Gaussian with PCC.

We transformed the proposed method for codes and executed in MATLAB. Using a regular processor (processor 1.80GHz and 4GB RAM), our predictions for size 10 and size 50 networks took approximately 5.3s and 6min, respectively.

Network structures can be signed or unsigned. Unsigned networks are directed graphs without any information about the regulatory effect (enhancing or inhibitory) of the interactions. In signed networks, the regulatory effect of the interactions is specified. The type of interaction is either enhancing/activation (+) or inhibitory (−) (Schaffter et al., 2011). It is an activation state if the gene expression data is higher than the estimated wild-type expression. If the gene expression data are lower than the estimated wild-type expression, it is a suppression state (Yip et al., 2010). Table 6
                         shows the performance of the states' prediction. As seen in Table 6, the proposed method shows a low performance in predicting the states for some sub-networks. Unlike other experiments explained previously, the edges prediction performance seems to have an unclear correlation with the network's complexity. Our method discovered 61% correct states (27 out of 44 correct predicted edges).


                        Table 7
                         shows how the proposed method determines the states.

@&#RESULTS AND ANALYSIS@&#

We applied our proposed method to several simulation datasets. The method was tested on network sizes of 10 and 50 genes from DREAM3 and network size of 10 from DREAM4 (Marbach et al., 2009). Each prediction performance must be evaluated to determine whether it is truly significant or only better than random by chance. Madar et al. (2010) presented a methodology that addresses this uncertainty with ROC curves (Fawcett, 2004). We evaluated each network prediction using area under the ROC curve (AUROC) metrics complemented with area under the precision-recall curve (AUPR). These complementary assessments enable researchers to obtain valuable insights about the performance of the algorithm. For example, the precision–recall curves indicate whether the first few edge predictions at the top of the prediction list are correct (Prill et al., 2010). The ROC curve does not provide this information.

With AUROC and AUPR, there is no need to use a threshold to binarize the predictions; rather a continuous prediction score can be used. Conversely, AUROC and AUPR consider all predictions, whereas sometimes it is helpful to consider only the most confident predictions. The higher the AUPR and AUROC values, the more significant the network prediction. The AUROC value will always be between 0 and 1.0. However, because random guessing produces the diagonal line between (0, 0) and (1, 1), which has an area of 0.5, no realistic classifier should have an AUROC of less than 0.5 (Fawcett, 2004).

If the edge occurs in both the true and the predicted network, the prediction is called a true positive (TP); if the edge is predicted, but does not occur in the true network, it is called a FP; if the edge neither occurs in the true network nor in the predicted network, it is called a true negative (TN); and, if the edge occurs in the true network, but is not predicted, it is called a false negative (FN). Once the TP, TN, FN and FP events are counted, the true positive rate (TPR) and the false positive rate (FPR) are calculated, as shown next. AUPR is a single number that summarizes the precision–recall tradeoff. Precision is a measure of fidelity and recall is a measure of completeness.
                        
                           
                              
                                 TPR
                                 =
                                 
                                    
                                       TP
                                    
                                    
                                       TP
                                       +
                                       FN
                                    
                                 
                                  
                                   FPR
                                 =
                                 
                                    FP
                                    
                                       FP
                                       +
                                       TN
                                    
                                 
                              
                           
                        
                     
                     
                        
                           
                              
                                 Precision
                                 =
                                 
                                    
                                       TP
                                    
                                    TP+FP
                                 
                                  
                                  
                                  
                                 Re
                                 call
                                 =
                                 
                                    TP
                                    
                                       TP
                                       +
                                       FN
                                    
                                 
                              
                           
                        
                     
                  

The detailed algorithms to calculate AUROC and AUPR are presented in (Fawcett, 2004, 2006; Davis and Goadrich, 2006). We use a program called GeneNetWeaver (Marbach et al., 2009) to calculate AUROC and AUPR values for all sub-networks. In GeneNetWeaver, for each sub-network, the final values 
                        
                           
                              p
                              
                                 a
                                 →
                                 b
                              
                           
                        
                      are ordered in descending order, validated against the gold standards. Table 8
                      shows example of the format of regulations discovered by our program. Fig. 4
                      shows the gold standards of E.coli1 (size 10) from DREAM3 datasets that have been transformed into a graphical representation. Fig. 5
                      shows AUROC and AUPR generated by GeneNetWeaver for DREAM3 datasets size 10.


                     Fig. 6
                      shows the comparison between method 1 and method 2 described in Section 5. At this stage, only the Gaussian model was applied because the experiment was aimed at assessing the method of calculating the 
                        
                           
                              G
                              b
                              
                                 w
                                 t
                              
                           
                        
                      and 
                        
                           
                              σ
                              2
                           
                        
                     . This testing reveals that both methods did not show significant differences for predictions of networks size 10. However, a very different result is shown for prediction of networks size 50, where method 2 outperforms method 1 greatly in both AUROC and AUPR. These results indicate that method 2 is more suitable to be applied in the Gaussian Noise Model to achieve better prediction performance.

Using method 2 and PCC, Table 9
                         shows AUPR and AUROC values for prediction of all sub-networks sizes 10 and 50 from DREAM3. As evidenced by the experiment results, all classifiers have AUROC values greater than 0.5. However, the AUPR scores are reduced below 0.5 for the two sub-networks size 10 and four sub-networks size 50. Consequently, this indicates that while the overall prediction accuracy is acceptable, the predictions with the highest scores (
                           
                              
                                 p
                                 
                                    a
                                    →
                                    b
                                 
                              
                           
                        ) are less accurate. We conducted a detailed study to test our hypotheses by identifying the number of possible genes that may have correlations with the gene of which the expression is measured (see Table 10
                        , row named Possible Regulators).

Referring to Table 13, the numbers of edges and regulators for Yeast2 and Yeast3 increase to almost double the numbers of edges and regulators for E.coli1, E.coli2 and Yeast1. The experiment results suggest that the prediction performance is reduced when the number of edges and regulators increases. Despite the reduced performance for some of the sub-networks, reasonable AUPR and AUROC values are achieved for E.coli1, E.coli2 and Yeast1 in network size 10 and E.coli1 in network size 50.

Based on the results, we found that the decreased performance for the prediction of Yeast2 and Yeast3 is due to the large number of possible regulators. Multiple genes inputs were also detected in Yeast3. The effect of large number of possible regulators is more apparent in networks size 50 prediction, where the performance decreases for Yeast2 and Yeast3 that both have larger number of possible regulators compared to the other networks.
                           
                              1)
                              False negatives: We specifically examined the sub-network with the lowest AUROC value (Yeast3) to assess the effect of multiple genes input. Table 11
                                  demonstrates the gene expression measurements of the three marked genes shown in Fig. 7
                                 . We scrutinized our prediction performance specifically at the three marked genes in Fig. 7 and found that our method generates many FNs (see Fig. 8
                                 ).

The FNs were generated because of multiple genes that have small deviations between the wild-type values and the gene expressions, hence complicating the process of identifying true relationships.

False positives: High FPs cause FPR to be high, hence decreasing the AUROC scores. From the overall analysis performed on DREAM3 datasets size 10, we found that most FPs generated by our proposed method were caused by indirect regulations (see Table 12
                                 
                                 ). Because our proposed method predicts most TNs correctly, we feel strongly that solving the indirect regulation problems will reduce the FPs, thereby improving the prediction performance.

Using the DREAM3 datasets, we compared our predictions’ performances with Madar et al. (2010) and Chun et al. (2011). Madar et al. (2010) used MI and ODE methods. Chun et al. (2011) used relevance networks, Gaussian graphical models and Bayesian networks to predict the same datasets used in this research. The comparison of our predictions is shown in Figs. 9 and 10
                        
                        . For the networks size 10, our method scored higher AUROC values than (Madar et al., 2010) in E.coli1, E.coli2 and E.coli3. In comparison with (Pahle, 2009), our AUROC values were slightly decreased in all sub-networks except for Yeast1, where our method and (Pahle, 2009) have similar values. As seen in Fig. 10, our AUPR significantly outperformed (Madar et al., 2010) in all sub-networks but was lower than (Chun et al., 2011) in all sub-networks. For the networks size 50, our method outperforms (Madar et al., 2010) greatly in all sub-networks for AUROC and AUPR values. Prediction by (Chun et al., 2011) for networks size 50 is not available. As seen in Table 10, Yeast2 and Yeast3 had the highest number of edges and regulators in both network sizes of DREAM3 datasets. In general, the performance of all methods (including our proposed method) in DREAM3 datasets decreased when the number of edges and regulators increased.

The experiment was further extended to the DREAM4 challenge 2 datasets. Network size 50 was unavailable for this challenge. The statistical properties of the DREAM4 challenge 2 datasets are shown in Table 13. We compare our method with Chun et al. (2011) and Pinna et al. (2010).


                        Chun et al. (2011) used relevance networks, Gaussian graphical models and Bayesian networks, whereas Pinna et al. (2010) used graph analysis. The results are shown in Table 14
                        . The evaluation conducted for DREAM4 datasets was more detailed than the one conducted for DREAM3, where the p-AUROC and p-AUPR were calculated. The results shown that our AUROC score is higher than (Pinna et al., 2010) and lower than (Chun et al., 2011). Our AUPR is the lowest, indicating that some development is required to improve our method’s precision and recall.

The overall score is calculated by using Formula (8):
                           
                              (8)
                              
                                 
                                    Overall score
                                    =
                                    −
                                    
                                       
                                          1
                                       
                                       
                                          2
                                       
                                    
                                    ×
                                    
                                       log
                                       
                                          10
                                       
                                    
                                    
                                       (
                                       p-AUPR
                                    
                                    ×
                                    
                                       p-AUROC
                                       )
                                    
                                 
                              
                           
                        where p-AUROC/p-AUPR is defined as the p-value of AUROC/AUPR based on the distribution of AUROC/AUPR values in 100,000 random network link permutations. If the p-value was computed using 100,000 permuted networks, the procedure changed the input list of predictions in a controlled manner for many times, each time with an AUROC computed. The p-value is then determined by asking what fraction of these AUROC values is smaller than the actual one. For example, suppose there are four objects {o1, o2, o3, o4} and each prediction is an edge between any two. If our prediction is {o1→o2, o4→o3}, and the real edges are {o1→o2, o4→o1}, then we will get one correct and one incorrect. We can compute the AUROC correspondingly. Then, we randomly generate predictions, such as {o1→o4, o2→o1}, {o1→o2, o2→o4} and so on. For each one, we also compute an AUROC. After generating many of these AUROC values, we check whether the one based on our predictions is difficult to obtain, which gives us a p-value. Assume the AUROC value from our predictions is 0.8 and the AUROC values from the random networks are {0.4, 0.55, 0.6, 0.75, 0.78, 0.82}, then among the six random networks, one has an AUROC value higher than ours, so the p-value can be computed as 1/6, which is about 0.16. For the calculation of p-AUROC and p-AUPR, we use a MATLAB program by Schaffter et al. (2011) to generate 100,000 random network link permutations. We calculate the overall p-AUROC using Formula (9):
                           
                              (9)
                              
                                 
                                    Overall p-AUROC
                                    =
                                    
                                       
                                          (
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   1
                                                   
                                                      
                                                      *
                                                   
                                                
                                             
                                             
                                                P
                                                
                                                   
                                                      
                                                         2
                                                      
                                                      *
                                                   
                                                
                                             
                                             
                                                P
                                                
                                                   
                                                      
                                                         3
                                                      
                                                      *
                                                   
                                                
                                             
                                             
                                                P
                                                
                                                   
                                                      
                                                         4
                                                      
                                                      *
                                                   
                                                
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                1
                                             
                                             
                                                5
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where pAUPR uses the same formula. The following formula calculates the AUROC and AUPR score using Formula (10):
                           
                              (10)
                              
                                 
                                    AUROC score
                                    =
                                    −
                                    
                                       
                                          mean
                                          (
                                          log
                                       
                                       
                                          10
                                       
                                    
                                    
                                       (
                                       pAUROC
                                       )
                                       )
                                    
                                 
                              
                           
                        The larger the score, the smaller the p-value and the better the prediction.

@&#DISCUSSION@&#

We chose to make predictions using knock-out data instead of knock-down data because, from our previous study (not described in this paper), knock-out data resulted in more correct predictions. The regulation signals are found to be less clear in the knock-down cases because deleting only one copy of a regulator gene may induce only a mild effect on its targets (Yip et al., 2010; Madar et al., 2010). However, knock-out data are good for detecting simple and direct regulatory events, but may not be sufficient for decoding more complicated regulatory processes. In a knock-out datasets, both copies of gene in the genome are deleted, hence, resulting the strong responses to the expression level at each gene in the datasets. Another finding is that the performance of this proposed method is dependent on the properties of the network that is being inferred and therefore, a single method is unable to fit all types of data features (Rice et al., 2005; Zhang et al., 2013). From the results of experiments conducted in this work, we found that the indirect regulations are the main source of FPs (Zhang et al., 2013) and FNs mostly due to multiple genes input.

In this study, with predictions using only one type of data and achieving AUROC and AUPR values above 0.5 in the majority of the predictions, we consider that our proposed method has achieved satisfactory results. We now discuss some limitations of this proposed method. The performance of edges prediction is considerably low. We believe the edges predictions will be improved if more relationships between genes are discovered and defined. The inconsistent performance shown by each of the predictions instigates us to improve the method in all aspects. From the experiment that compares the two different methods of implementing the Gaussian model, we learned that the choice of method is important, but that the implementation of the method is far more important. This is because inaccurate implementation will affect the prediction performance. It would also be useful to incorporate one additional different data feature, such as perturbation time series data, to improve the performance of the proposed method until it is able to provide the highest quality results. The possibility of getting more accurate required parameters is higher with a larger number of datasets. Our AUPR scores are below 0.5 in some sub-networks. Reducing FPs and FNs will increase the precision and recall, respectively. When precision and recall are increased, AUPR scores will be improved.

The number of genes for humans total up to at least 20,000. Since it is not possible to carry out human knock experiments, data for such work have been collected from experiments on models systems such as Drosophila, mouse and lately, human cell lines. Using such parallels as models have yielded many major breakthroughs in discovering novel drug targets for the treatment of human diseases including cancer. Nevertheless, no single GRN inference method is able to fit all types of data features (Rice et al., 2005; Zhang et al., 2013). To the best of our knowledge, all the current methods have been developed to reconstruct GRN from types of data specified by the researcher. Our proposed approach is designed specifically to infer knock-out data for any organism. In the case of humans, data from a suitable model organism or human cell lines can be used for GRN inference,

Although the size of our test dataset has been limited, the program used to simulate the algorithm has been designed to enable scaling up that will allow for the inference of different numbers of genes that are substantially larger than our dataset. However, inference of larger numbers of genes such as those from mouse or human cell lines will of course require longer processing time and should ideally be scaled across multiple processors with larger memory overheads being required. Inherent with such approaches is the possibility of an incomplete network where a crucial component may be missing or the model system used does not have a human homolog and such possibilities therefore require care on the part of the investigator when inferrences are made for a human system.

@&#CONCLUSION@&#

In summary, the goal of this research was to develop an algorithm for GRN reconstruction using knock-out data that are affected by non-systematic noise. The Gaussian model distinguished real signals from random fluctuations using an iterative method. Our proposed method is supported by PCC, which measures the strength of the association between the two variables. We investigated the ability of the proposed method to predict the presence of regulatory interactions between genes, the directionality and the states (activation or suppression). From the experiments, we learned that even though we can identify the correct method for GRN predictions, we will not be able to achieve the desired results if we implement the method inaccurately. Despite the limitations, our proposed method clearly has some worthy advantages over other previously reported. Using the datasets described in this work, our chosen method can reconstruct a wide variety of network sizes and topologies with a reasonable number of errors. One direction toward strengthening and expanding the conclusions of this research lies in improving the proposed method, particularly in solving indirect regulations problems and application to a real GRN datasets of a well-studied species. We learned many valuable lessons from this work that makes us believe that a better understanding of the capabilities and limitations of our currently tested method will assist us in developing a better GRN inference method in future.

@&#ACKNOWLEDGEMENTS@&#

FHMS was funded by the MyBrain15 program and Universiti Tenaga Nasional. This work was supported in part by the Fundamental Research Grant Scheme (FRGS) FRGS/2/2013/ICT02/UKM/02/2 from the Ministry of Education of Malaysia (MOE) to SMA and the ICONIC-2013-007 grant from Universiti Kebangsaan Malaysia to MF-R. The authors would also like to thank the anonymous reviewers for their insightful comments and constructive criticism.

@&#REFERENCES@&#

