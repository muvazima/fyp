@&#MAIN-TITLE@&#The k-dissimilar vehicle routing problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A new NP-hard combinatorial optimization problem is proposed and named kd-VRP.


                        
                        
                           
                           The goal of the kd-VRP is to generate a set of k dissimilar VRP solutions.


                        
                        
                           
                           A similarity index is designed based on the literature on dissimilar shortest-paths.


                        
                        
                           
                           A mathematical formulation for the kd-VRP is proposed.


                        
                        
                           
                           An iterative metaheuristic to solve the kd-VRP is described, implemented and tested.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Decision support systems

Combinatorial optimization

Metaheuristic

Logistics

Risk management

@&#ABSTRACT@&#


               
               
                  In this paper we define a new problem, the aim of which is to find a set of k dissimilar solutions for a vehicle routing problem (VRP) on a single instance. This problem has several practical applications in the cash-in-transit sector and in the transportation of hazardous materials. A min–max mathematical formulation is proposed which requires a maximum similarity threshold between VRP solutions, and the number k of dissimilar VRP solutions that need to be generated. An index to measure similarities between VRP solutions is defined based on the edges shared between pairs of alternative solutions. An iterative metaheuristic to generate k dissimilar alternative solutions is also presented. The solution approach is tested using large and medium size benchmark instances for the capacitated vehicle routing problem.
               
            

@&#INTRODUCTION@&#

In many European countries, cash-in-transit companies must by law determine several alternative routes for each of their vehicles when transporting cash. The aim of this measure is to allow a firm to easily change its plans in case of unforeseen circumstances (e.g., accidents, road works) and to increase security by making the vehicle routes more unpredictable. In this paper, we define a new vehicle routing problem—the k-dissimilar vehicle routing problem or kd-VRP—to support this optimization problem.

A solution of this novel problem consists of k feasible solutions of a single capacitated vehicle routing problem (VRP). Each of these VRP solutions (which we will consistently call alternative solutions) must obey the traditional constraints of the VRP: all customers are visited exactly once, all vehicles begin and end at the depot, and the capacity of the vehicle is not exceeded. The quality of an alternative solution is measured as the total distance travelled by all vehicles.

Assuming that a similarity metric can be calculated between any pair of alternative solutions, a feasible solution to the kd-VRP is a set of k feasible alternative solutions for which the difference between each pair of alternative solutions is larger than a certain threshold. The objective of the kd-VRP is to minimize the cost of the worst alternative solution in the set. To the best of our knowledge, this problem has never been studied before in the literature.

The kd-VRP is closely related to the m-peripatetic vehicle routing problem (m-PVRP) studied in Ngueveu, Prins, and Wolfler Calvo (2010a); 2010b). This problem consists in finding a set of edge-disjoint routes of minimal total cost over m periods so that each customer is visited exactly once per period and the edge between a pair of customers can be used at most once during the m periods. “Periods” in the m-PVRP are essentially the same concept as “alternative solutions” in the kd-VRP. The difference between the kd-VRP and the m-PVRP is twofold. In a feasible solution of the m-PVRP, no edge is used twice, while in the kd-VRP the multiple usage of an edge is not explicitly forbidden, but rather limited by a constraint on the similarity between alternative solutions. Second, the m-PVRP minimizes the total cost over all periods, while the kd-VRP minimizes the worst-case cost over all alternative solutions. The motivation for the kd-VRP is that for some real-life applications (e.g., money collection, transportation of hazardous materials), the constraint that imposes k edge-disjoint VRP solutions in which not a single edge is shared between the alternative solutions might be too stringent. The min–max objective function of the kd-VRP is a design choice, that can easily be changed to a total cost objective, in which case the kd-VRP generalizes the m-PVRP.


                     Fig. 1
                      shows an example of a solution for the kd-VRP with k = 3, for which a set containing three dissimilar, but not disjoint, alternative solutions (see Fig. 1(a)–(c)) has been generated.

The kd-VRP has many practical applications. A first application, which provided the motivation for this work, can be found in the context of money collection and distribution, also known as the cash-in-transit sector. In this context, a set of customers (e.g., banks, shops, casinos, jewellers) needs to be visited to pick up valuables and cash. As mentioned, companies in the cash-in-transit sector are often required by law (see e.g., the Belgian law reported in SPFI Service Public Federal Interieur, 2003 for more details) to determine several alternative solutions in advance. Additionally, the same alternative solution cannot be used more than two consecutive times. On the other hand, the travel costs of each of these alternative solutions should be minimized for obvious economic reasons. The aim is thus to decrease the predictability of the chosen alternative solution, reducing the risk to be assaulted, while maintaining economic viability.

A second application can be found in the transportation of dangerous materials (e.g., the routing of tankers which must serve a set of petrol stations). In this case a limitation of the number of shared edges between the routes might be required in order to better share and mitigate the risk of accidents and spread the risk equitably among the geographical regions crossed by vehicles along different routes (Gopalan, Kolluri, Batta, and Karwan, 1990). In addition, supposing that the probability of an accident increases considerably in case of adverse weather conditions and/or depending on the type of road segment, it is crucial to have several dissimilar routing plans to reduce the risk of potential fatalities (Akgün, Erkut, and Batta, 2000; Sattayaprasert, Taneerananon, Hanaoka, and Pradhananga, 2008).

A third application concerns the design of patrol routes for security agents who must follow partially different routes over time (Wolfler Calvo and Cordone, 2003). The design of (spatial and/or temporal) dissimilar patrol routes, that are not necessarily disjoint, might help companies to guarantee high security standards, minimizing at the same time their operative costs.

The contributions of this paper are the following: (1) A new NP-hard combinatorial optimization problem is proposed, the k-dissimilar vehicle routing problem or kd-VRP. The kd-VRP requires a similarity measure that can calculate the difference between alternative solutions. We define such an index, starting from the similarity index used for the dissimilar k-shortest path problem. (2) A mathematical formulation for the kd-VRP is presented. (3) A metaheuristic to solve medium and large instances of the kd-VRP is described, implemented and tested.

The remainder of the paper is organized as follows. In Section 2, the literature on the peripatetic VRP and similar problems such as the dissimilar k paths problem and the disjoint paths problem is presented. In Section 3, some indices used to measure the (dis)similarity between paths and alternative solutions are introduced. In Section 4, the k-dissimilar vehicle routing problem (kd-VRP) is described in detail and a mathematical formulation is developed. In Section 5, an iterative metaheuristic to find solutions for the kd-VRP is developed. In Section 6 the solution approach is tested using 51 benchmark instances from the VRP library. Finally, Section 7 concludes the paper and provides some suggestions for future research.

@&#LITERATURE REVIEW@&#

The problem of finding dissimilar solutions within the transportation sector has received some attention in the literature on shortest path problems and, more recently, on vehicle routing problems.

The first attempt to introduce the concept of similar solutions within shortest path problems is the k-shortest paths problem (k-SPP) in which the shortest, the second shortest, until the kth shortest path from an origin to a destination node are sought, in increasing order of length (see, e.g., Di Puglia Pugliese and Guerriero, 2013; Gotthilf and Lewenstein, 2009; Hershberger, Maxel, and Suri, 2007; Yen, 1971). However, the k shortest paths are likely to share a large number of edges, and tend to be very similar to each other. For some applications in which dissimilar alternatives are needed, a different approach is required.

To find dissimilar paths, the disjoint-path problem (DPP), introduced by Suurballe (1974), can be used. Differently from the classical k shortest paths problem, the DPP allows no common edges (edge-disjoint paths) or shared vertices (vertex-disjoint paths) among alternative paths. However, for many real-life applications (e.g., hazardous material transportation, couriers, routing in congested network) the constraint imposing no edges in common among paths may be too stringent and, due to the impossibility to reuse all the shortest edges employed in the previous solutions, the resulting disjoint paths may be impractically long (Kuby, Zhongyi, and Xiaondon, 1997). In fact, in the majority of real-life transportation applications, in which a minimum number of dissimilar solutions, not necessarily disjoint, is required, the cost of each alternative should be as small as possible. Therefore, a valid alternative to the DPP is represented by the path dissimilarity problem (PDP) in which a set of dissimilar solutions with minimum costs are generated. The PDP is a bi-objective routing problem in which a set of k paths, from an origin to a destination, must be generated with a minimum length and a maximum dissimilarity (see, e.g., Akgün et al., 2000; Dell’Olmo, Gentili, and Scozzari, 2005).

In the PDP a set of k alternative paths from an origin to a destination is generated, by using specific indices to measure the similarity between alternative solutions. In Park, Sharma, Rilett, and Chang (2002) dissimilarities among alternative paths are analysed by evaluating, from an individual perspective, multiple attributes (e.g., distance, travel time, variability) associated to the edges. In the domain of hazardous materials transportation, spatially dissimilar paths which minimize the risk of accidents (distributing the risk over all regional zones to be crossed uniformly) need to be obtained. However, for routing hazardous materials, the spatial dissimilarity between alternative paths may depend on how localized the effects of a spill are.

Only few papers in the literature address the issue of finding dissimilar solutions in the context of vehicle routing problems. The goal of this paper is to contribute to this research area by proposing a general model that we named the kd-VRP. It shares several properties with a set of routing problems called peripatetic. A solution of the m-peripatetic vehicle routing problem (m-PVRP) consists of a set of m different VRP solutions for which it holds that each pair of alternative solutions is edge-disjoint. In other words, each edge is used at most in one of the m VRP solutions. The m-PVRP generalizes two well-known NP-hard problems: the vehicle routing problem (VRP) and the m-peripatetic salesman problem (m-PSP). The latter is a special case of the m-PVRP with one single vehicle of infinite capacity.

An approach suggested in the literature for cash-in-transit applications attempts to reduce the risk of being attacked by generating dissimilar solutions. These solutions are most likely to be “unpredictable” for criminals and can be obtained by solving a specific m-PVRP problem. In Ngueveu et al. (2010a); 2010b), customers are visited several times during a fixed planning horizon, but the use of the same arc twice is explicitly forbidden.

In Wolfler Calvo and Cordone (2003) and Michallet, Prins, Amodeo, Yalaoui, and Vitry (2014) the dissimilarity between m-PVRP solutions is enforced by introducing time windows with a minimum and maximum time lag between two consecutive visits of the same customer. In this way it is possible to generate a wide variety of solutions, as required for security reasons. In Yan, Wang, and Wu (2012) a specific application of a m-PVRP to the cash-in-transit sector is proposed aimed at reducing operating costs and ensuring safe cash conveyance. A model, that incorporates a new concept of similarity by considering both temporal and spatial measures, is developed. In this model, dissimilarities between the m vehicle routes are incorporated into the m VRP solutions by imposing different visit times of the same customer during the planning horizon.

The m-PVRP can be extended and generalized by making the constraint that two solutions cannot have any edge in common less stringent. Some attempts in this direction are followed in the literature on VRP applications in which specific indices have been defined and used to measure similarities between solutions.

For example, in Løkketangen, Oppen, Oyola, and Woodruff (2012), a multiobjective decision support system tool is developed to produce a set of k dissimilar VRP solution. The dissimilarity between the k VRP solutions is based on an attribute distance function. The distance function includes some measures typical of the decision process and comprise, for example, road accessibility, type and amount of load, road length, road quality, vehicle, and driver.

In Sörensen (2006) a multiobjective optimization approach is proposed in order to find a set of k VRP solutions that are “close” (in the solution space) to a given baseline VRP solution and at the same time have a high quality in the sense that their total distance travelled is small. In particular a memetic algorithm with population management is implemented in order to offer to the decision maker a choice of Pareto-optimal solutions, allowing him to make a trade-off between changing his existing solution (i.e., baseline VRP solution) and allowing a longer travel distance.

In order to measure the dissimilarities between solutions several methods and indices have been proposed in the literature on shortest path problems in which the concept of dissimilarity between solutions has been widely studied. The dissimilarity measure, that is used in this paper, is discussed in Section 4 and can be found in Eq. (6).

In Lombard and Church (1993) the concept of “area under the path” is introduced. If the network is assumed to be representable on a plane, the “area under the path” is the area between the path and the x-axis. Therefore, the dissimilarity between two paths is measured by the absolute difference between the areas under the paths. In Martí, González-Velarde, and Duarte (2009) the dissimilarity Dis(Pi, Pj
                     ) between two paths Pi
                      and Pj
                     , is computed as the average of the distances between each vertex in Pi
                      to the path Pj
                      plus the average of the distances between each vertex in Pj
                      to the path Pi
                     . The dissimilarity measure is given by the formula:

                        
                           (1)
                           
                              
                                 Dis
                                 
                                    (
                                    
                                       P
                                       i
                                    
                                    ,
                                    
                                       P
                                       j
                                    
                                    )
                                 
                                 =
                                 
                                    1
                                    2
                                 
                                 
                                    [
                                    
                                       
                                          
                                             ∑
                                             
                                                
                                                   v
                                                   l
                                                
                                                ∈
                                                
                                                   P
                                                   i
                                                
                                             
                                          
                                          ϕ
                                          
                                             (
                                             
                                                v
                                                l
                                             
                                             ,
                                             
                                                P
                                                j
                                             
                                             )
                                          
                                       
                                       
                                          
                                             |
                                          
                                          
                                             P
                                             i
                                          
                                          
                                             |
                                          
                                       
                                    
                                    +
                                    
                                       
                                          
                                             ∑
                                             
                                                
                                                   v
                                                   l
                                                
                                                ∈
                                                
                                                   P
                                                   j
                                                
                                             
                                          
                                          ϕ
                                          
                                             (
                                             
                                                v
                                                l
                                             
                                             ,
                                             
                                                P
                                                i
                                             
                                             )
                                          
                                       
                                       
                                          
                                             |
                                          
                                          
                                             P
                                             j
                                          
                                          
                                             |
                                          
                                       
                                    
                                    ]
                                 
                              
                           
                        
                     where the value ϕ(v, Pj
                     ) represents the Euclidean distance from a vertex v to a path Pj
                      = {v
                     1, v
                     2, …, vn
                     } expressed as:

                        
                           (2)
                           
                              
                                 ϕ
                                 
                                    (
                                    v
                                    ,
                                    
                                       P
                                       j
                                    
                                    )
                                 
                                 =
                                 
                                    min
                                    
                                       
                                          v
                                          l
                                       
                                       ∈
                                       
                                          P
                                          j
                                       
                                    
                                 
                                 ϕ
                                 
                                    (
                                    v
                                    ,
                                    
                                       v
                                       l
                                    
                                    )
                                 
                              
                           
                        
                     The similarity index in Eq. (1) considers spatial information hence the resulting paths will be dispersed to each other from a spatial point of view. In Akgün et al. (2000) and Vanhove (2012) the dissimilarity is measured in terms of shared edges between paths, without considering spatial information concerning the physical location of the vertices. The expression to compute the dissimilarity between two paths Pi
                      and Pj
                     , considering only the length (denoted by letter L) of the shared edges, is as follows:

                        
                           (3)
                           
                              
                                 Dis
                                 
                                    (
                                    
                                       P
                                       i
                                    
                                    ,
                                    
                                       P
                                       j
                                    
                                    )
                                 
                                 =
                                 1
                                 −
                                 
                                    1
                                    2
                                 
                                 
                                    [
                                    
                                       
                                          L
                                          (
                                          
                                             P
                                             i
                                          
                                          ∩
                                          
                                             P
                                             j
                                          
                                          )
                                       
                                       
                                          L
                                          (
                                          
                                             P
                                             i
                                          
                                          )
                                       
                                    
                                    +
                                    
                                       
                                          L
                                          (
                                          
                                             P
                                             i
                                          
                                          ∩
                                          
                                             P
                                             j
                                          
                                          )
                                       
                                       
                                          L
                                          (
                                          
                                             P
                                             j
                                          
                                          )
                                       
                                    
                                    ]
                                 
                              
                           
                        
                     In Dell’Olmo et al. (2005) the concept of “buffer zone” is included in Eq. (3) to embed spatial information in the measure of similarity. The “buffer zone” is an area determined by moving a circle along the path, whose center is the vehicle on the path itself and whose radius is proportional to the impact area due to a possible accident.

In Thyagarajan, Batta, Karwan, and Szczerba (2005) an extension of the dissimilarity measure in Eq. (3) is proposed considering the time context. This is useful in military missions, in which the time difference between routes must be considered. Other works include the temporal dimension into the similarity index (see, e.g., Michallet et al., 2014; Wolfler Calvo and Cordone, 2003; Yan et al., 2012). Supposing that each customer must be visited several times during a given time horizon, the hours of any two visits to the same customer, over the planning horizon, must be spread in the customer’s time window.

In order to find k dissimilar alternative solutions a distance measure to calculate the difference (or similarity) between two given solutions is required. Besides measuring the dissimilarity between two alternative solutions based on the number (or the length) of the common edges, the edit distance might be adopted (Levenshtein, 1966). The edit distance can be used for permutation problems i.e., problems of which the solutions are most naturally represented as a permutation of a set of items (i.e., problem attributes), representing the order in which the items appear in each solution. For example a VRP solution can be represented as a set of permutations, one for each trip. Each trip is determined by the order in which the customers appear in it. This distance measure is based on the idea that the distance between two solutions is equal to the “cost” required to transform the first solution into the second one.

A comparison between these distance measures is beyond the scope of this paper. For a more elaborate discussion of some issues related to distance measures, including some other distance measures for permutation problems, we refer to Sörensen (2007) and Løkketangen et al. (2012).

In this section a mathematical formulation of the kd-VRP is proposed, based on an MIP formulation for the VRP. The VRP is seen as a subproblem, the solutions of which are the input of a master problem in which the k dissimilar alternative solutions are selected.

The VRP is defined on a graph G = (V, E) with vertex set V = {0, …, n} and edge set E. Vertices {1, …, n} correspond to the customers, while vertex 0 corresponds to the depot. A non-negative cost dij
                      is associated with each edge (i, j) ∈ E. The cost structure is assumed to be symmetric, i.e., dij
                      = dji
                      ∀i, j ∈ V. Moreover with each customer i ∈ V∖{0} a known demand mi
                      ≥ 0 is associated, which represents the quantity of goods to be delivered. A set N of identical vehicles, each with capacity C, is available at the depot. It is assumed that mi
                      ≤ C, ∀i ∈ {1, …, n}.

A general MIP formulation of the VRP (see, e.g., Van Leeuwen and Volgenant, 1983 for more details) is presented in Eqs. (4a)–(4f). This formulation uses a three-index decision variable 
                        
                           
                              x
                              
                                 i
                                 j
                              
                              h
                           
                           ,
                        
                      which assumes value 1 if edge (i, j) is traversed by vehicle h, and 0 otherwise.

                        
                           (4a)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          min
                                          
                                             ∑
                                             
                                                h
                                                ∈
                                                N
                                             
                                          
                                          
                                             ∑
                                             
                                                (
                                                i
                                                ,
                                                j
                                                )
                                                ∈
                                                E
                                             
                                          
                                          
                                             d
                                             
                                                i
                                                j
                                             
                                          
                                          
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                             h
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4b)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          s.t.
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                          
                                             ∑
                                             
                                                j
                                                ∈
                                                V
                                                ∖
                                                {
                                                0
                                                }
                                             
                                          
                                          
                                             x
                                             
                                                0
                                                j
                                             
                                             h
                                          
                                          =
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                V
                                                ∖
                                                {
                                                0
                                                }
                                             
                                          
                                          
                                             x
                                             
                                                i
                                                0
                                             
                                             h
                                          
                                          =
                                          1
                                          
                                          ∀
                                          h
                                          ∈
                                          N
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4c)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                          
                                             ∑
                                             
                                                h
                                                ∈
                                                N
                                             
                                          
                                          
                                             ∑
                                             
                                                j
                                                ∈
                                                V
                                             
                                          
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                             h
                                          
                                          =
                                          
                                             ∑
                                             
                                                h
                                                ∈
                                                N
                                             
                                          
                                          
                                             ∑
                                             
                                                j
                                                ∈
                                                V
                                             
                                          
                                          
                                             x
                                             
                                                j
                                                i
                                             
                                             h
                                          
                                          =
                                          1
                                          
                                          ∀
                                          i
                                          ∈
                                          V
                                          ∖
                                          
                                             {
                                             0
                                             }
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4d)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                V
                                             
                                          
                                          
                                             ∑
                                             
                                                j
                                                ∈
                                                V
                                                ∖
                                                {
                                                0
                                                }
                                             
                                          
                                          
                                             m
                                             j
                                          
                                          
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                             h
                                          
                                          ≤
                                          C
                                          
                                          ∀
                                          h
                                          ∈
                                          N
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4e)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                          
                                             ∑
                                             
                                                h
                                                ∈
                                                N
                                             
                                          
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                Q
                                             
                                          
                                          
                                             ∑
                                             
                                                j
                                                ∉
                                                Q
                                             
                                          
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                             h
                                          
                                          ≥
                                          1
                                          
                                          ∀
                                          Q
                                          ⊂
                                          V
                                          ;
                                          Q
                                          ≠
                                          ∅
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4f)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                             h
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                          
                                          ∀
                                          
                                             (
                                             i
                                             ,
                                             j
                                             )
                                          
                                          ∈
                                          E
                                          ;
                                          ∀
                                          h
                                          ∈
                                          N
                                       
                                    
                                 
                              
                           
                        
                     
                  

The objective function (4a) minimizes the total travel costs of all vehicles combined. Constraints (4b) force each vehicle to start and finish its route at the depot, visiting at least one vertex along its tour. Constraints (4c) state that every vertex must be visited exactly once, implying that only one vehicle may arrive at a given vertex and depart from it. Constraints (4d) impose a restriction on the maximum load of each vehicle. Finally constraints (4e) ensure that no subtour occurs in the solution. Constraints (4f) limit the domain of the decision variables.

The output of the VRP subproblem in Eqs. (4a)–(4f) is the input of the master problem in Eqs. (5a)–(5c). The latter requires two more parameters to be set: the value of the similarity threshold TS
                      and the number of alternative solutions (k > 1). TS
                      represents the maximum similarity between alternative solutions and it is a parameter of the problem that should be defined as an input by the user. We also define a similarity index δ(yi, yj
                     ) that measures the similarity between pairs (yi, yj
                     ) of VRP solutions.

A mathematical formulation of the kd-VRP is:

                        
                           (5a)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          min
                                          
                                             max
                                             
                                                i
                                                ∈
                                                {
                                                1
                                                ,
                                                ⋯
                                                ,
                                                k
                                                }
                                             
                                          
                                          f
                                          
                                             (
                                             
                                                y
                                                i
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (5b)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          s.t.
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                          δ
                                          
                                             (
                                             
                                                y
                                                i
                                             
                                             ,
                                             
                                                y
                                                j
                                             
                                             )
                                          
                                          ≤
                                          
                                             T
                                             S
                                          
                                          
                                          ∀
                                          i
                                          ,
                                          j
                                          ∈
                                          
                                             {
                                             1
                                             ,
                                             ⋯
                                             ,
                                             k
                                             }
                                          
                                          ;
                                          i
                                          ≠
                                          j
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (5c)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                          
                                             y
                                             i
                                          
                                          ∈
                                          Ω
                                          
                                          ∀
                                          i
                                          ∈
                                          
                                             {
                                             1
                                             ,
                                             ⋯
                                             ,
                                             k
                                             }
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

A feasible solution for the kd-VRP consists of a set S = {y
                     1, …, yk
                     } containing k alternative solutions y
                     1, …, yk
                      ∈ Ω with Ω being the set of all the feasible VRP solutions that satisfy constraints in Eqs. (4b)–(4f). The objective function (5a) minimizes the cost of the worst alternative solution in S. Constraints (5b) impose that all the pairs of alternative solutions in S are dissimilar. More specifically, similarities among alternative solutions can be at most equal to the threshold TS
                     . In the remainder of the paper we refer to constraints (5b) as similarity constraints. Since the concepts of similarity and dissimilarity are perfectly complementary, for the sake of clarity, from here on, we will adopt the point of view of similarity. The dissimilarity between alternative solutions can be trivially derived from the similarity measure if required. Finally constraints (5c) restrict the domain of the decision variables.

In principle, if the objective function in Eq. (5a) is replaced with the minimization of the total cost of the alternative solutions (∑
                        i ∈ {1, …, k}
                     f(yi
                     )) then the kd-VRP can be considered as the generalization of the k disjoint VRP problem. In addition, when the similarity threshold in Eq. (5b) is equal to zero the kd-VRP is reduced to a standard m peripatetic vehicle routing problem (m-PVRP). For this reason, the same considerations about the feasibility of the m-PVRP are also valid for the kd-VRP. More specifically, for each alternative solution, the total minimal number of routes necessary to satisfy the total demand of customers in V∖{0} is equal to 
                        
                           τ
                           =
                           ⌈
                           
                              ∑
                              
                                 i
                                 ∈
                                 V
                                 ∖
                                 {
                                 0
                                 }
                              
                           
                           
                              
                                 m
                                 i
                              
                              C
                           
                           ⌉
                        
                     . Given a complete graph, any instance of the kd-VRP with n customers may admit a feasible solution if 
                        
                           k
                           ⩽
                           
                              n
                              
                                 2
                                 τ
                              
                           
                        
                     . The reader is referred to Ngueveu, Prins, and Wolfler Calvo (2010b) for further details.

Both the mathematical model in Eqs. (5a)–(5c) and the solution approach (developed in Section 5) are independent of the specific similarity index used. Hence, all of the similarity indices discussed in Section 2 could be used in both the formulation and the heuristic optimization algorithm.

The similarity index used in this paper is derived from Eq. (3) described in Section 3. This index can be used to measure similarities between alternative solutions by comparing the structure of the routes contained in these solutions. Given two alternative solutions yi
                      and yj
                     , this index compares each route of yi
                      with each route of yj
                     . Let 
                        
                           r
                           
                              
                                 y
                                 i
                              
                           
                           l
                        
                      and 
                        
                           r
                           
                              
                                 y
                                 j
                              
                           
                           m
                        
                      be the lth route of yi
                      and the mth route of yj
                      respectively, the similarity between these routes is calculated as follows:

                        
                           (6)
                           
                              
                                 δ
                                 
                                    (
                                    
                                       y
                                       i
                                    
                                    ,
                                    
                                       y
                                       j
                                    
                                    )
                                 
                                 =
                                 
                                    max
                                    
                                       l
                                       ,
                                       m
                                       ∈
                                       N
                                    
                                 
                                 
                                    
                                       1
                                       2
                                    
                                    
                                    
                                       [
                                       
                                          
                                             
                                                c
                                                s
                                             
                                             
                                                (
                                                
                                                   r
                                                   
                                                      
                                                         y
                                                         i
                                                      
                                                   
                                                   l
                                                
                                                ,
                                                
                                                   r
                                                   
                                                      
                                                         y
                                                         j
                                                      
                                                   
                                                   m
                                                
                                                )
                                             
                                          
                                          
                                             c
                                             
                                                (
                                                
                                                   r
                                                   
                                                      
                                                         y
                                                         i
                                                      
                                                   
                                                   l
                                                
                                                )
                                             
                                          
                                       
                                       +
                                       
                                          
                                             
                                                c
                                                s
                                             
                                             
                                                (
                                                
                                                   r
                                                   
                                                      
                                                         y
                                                         i
                                                      
                                                   
                                                   l
                                                
                                                ,
                                                
                                                   r
                                                   
                                                      
                                                         y
                                                         j
                                                      
                                                   
                                                   m
                                                
                                                )
                                             
                                          
                                          
                                             c
                                             
                                                (
                                                
                                                   r
                                                   
                                                      
                                                         y
                                                         j
                                                      
                                                   
                                                   m
                                                
                                                )
                                             
                                          
                                       
                                       ]
                                    
                                 
                              
                           
                        
                     
                  

The term 
                        
                           
                              c
                              s
                           
                           
                              (
                              
                                 r
                                 
                                    
                                       y
                                       i
                                    
                                 
                                 l
                              
                              ,
                              
                                 r
                                 
                                    
                                       y
                                       j
                                    
                                 
                                 m
                              
                              )
                           
                        
                      represents the cost of the edges shared between routes 
                        
                           r
                           
                              
                                 y
                                 i
                              
                           
                           l
                        
                      and 
                        
                           
                              r
                              
                                 
                                    y
                                    j
                                 
                              
                              m
                           
                           ,
                        
                      while 
                        
                           c
                           (
                           
                              r
                              
                                 
                                    y
                                    i
                                 
                              
                              l
                           
                           )
                        
                      (or 
                        
                           c
                           (
                           
                              r
                              
                                 
                                    y
                                    j
                                 
                              
                              m
                           
                           )
                        
                     ) is the cost of route 
                        
                           r
                           
                              
                                 y
                                 i
                              
                           
                           l
                        
                      (or 
                        
                           r
                           
                              
                                 y
                                 j
                              
                           
                           m
                        
                     ).

According to Eq. (6), the similarity between two VRP solutions δ(yi, yj
                     ) is a value between 0 and 1. For this reason, TS
                      should also be chosen in the interval [0, 1]. If TS
                      = 0, the alternative solutions are forbidden to have any shared edge like in the m-PVRP. If TS
                      = 1, identical k alternative solutions may be generated. It would be also possible to define a multi-objective version of the kd-VRP in which the similarity threshold represents an objective to be minimized. In Section 6.3 we tested various scenarios considering different values of TS
                     .

The cost values used to compute δ(yi, yj
                     ) rely on the cost dij
                      that is defined for each edge (i, j) ∈ E. The value of dij
                      is commonly interpreted in the literature on VRP as either a time, a cost, or a distance. However, the measure used to calculate the objective function and that to calculate δ(yi, yj
                     ) does not necessarily have to be the same. In other words, an additional attribute not related to dij
                      may be assigned to each edge in G and used to compute the value δ(yi, yj
                     ). For example, the similarity between alternative solutions could be calculated based on the distance between edges, while the objective function could use the travel costs. A different option (which is not considered in the remainder of this paper) could consider the number of shared edges between routes instead of their cost.

For the sake of simplicity we computed the similarities between alternative solutions on a graph G = (V, E). We are aware that in real-life vehicles do not travel on this graph but on a road network, where arcs between nodes do not always correspond to independent road segments. Therefore, it may happen that two different edges in graph G correspond to almost the same path on the road network, which may be problematic from a security point of view. To overcome this problem, the similarity between any couple of routes 
                        
                           r
                           
                              y
                              i
                           
                           l
                        
                      and 
                        
                           r
                           
                              y
                              j
                           
                           m
                        
                      should be computed by first analysing the corresponding physical paths on the street network and then evaluating function 
                        
                           
                              c
                              s
                           
                           
                              (
                              
                                 r
                                 
                                    
                                       y
                                       i
                                    
                                 
                                 l
                              
                              ,
                              
                                 r
                                 
                                    
                                       y
                                       j
                                    
                                 
                                 m
                              
                              )
                           
                        
                      with respect to these paths. This would correctly account for the real overlap between routes 
                        
                           r
                           
                              y
                              i
                           
                           l
                        
                      and 
                        
                           r
                           
                              y
                              j
                           
                           m
                        
                     . An alternative approach consists in exploiting the freedom degree in the definition of the path corresponding to each arc of graph G so as to reduce the overlapping, though increasing the arc cost.

Another potential problem is highlighted by Martí et al. (2009), who found that the similarity measure in Eq. (3), from which Eq. (6) is derived, might generate routes that are not spatially dispersed. This may represent a problem in applications such as hazmat transportation, where the effects of a disastrous event may spread over a relatively large area. In cash-in-transit applications, however, this issue does not present a problem since an attack on a vehicle is a localized event the consequences of which do not spread out. For applications in the chemical sector, it may be appropriate to incorporate spatial or/and temporal information into the similarity index in order to adequately evaluate the exposure to accidents of the population that lives in the areas traversed by the routes (see, e.g., Dell’Olmo et al., 2005; Martí et al., 2009; Thyagarajan et al., 2005).

Another potential disadvantage of the similarity index in Eq. (6) is that it theoretically allows the same edge to appear in all the alternative solutions. If this is unacceptable, a different measure should be used. However in cash-in-transit applications alternative solutions presenting all a certain edge in common are considered admissible as long as: (a) the edge is traversed by a different vehicle, (b) the edge is traversed by the same vehicle in a different time frame, (c) the routes with the common edge contain different customers to be visited (or the same customers in a different order). Moreover it should be noticed that the penalty function adopted inside the solution approach, described in Section 5, discourages the selection of edges already used in other alternative solutions. In so doing the use of the same edge within all the alternative solutions is unlikely to happen.

In the remainder of the paper we use the similarity index in Eq. (6) because of its advantages such as: (a) it does not require extra parameters, and (b) it is easy to compute. The algorithm developed in the next section, however, does not depend in any way on the chosen distance measure.

In this section an iterative metaheuristic to solve the kd-VRP is presented. The metaheuristic developed in this paper is similar to the iterative penalty method used in Johnson, Joy, and Clarke (1992) and Barra, Perez, and Anez (1993) to find k dissimilar shortest paths. We call this method the iterative penalty method for the kd-VRP (IPM_kd).

Our version of the iterative penalty method differs from the one proposed in Johnson et al. (1992) and Barra et al. (1993) because at each iteration alternative solutions are selected under the conditions of a maximum degree of similarity. To this end the metaheuristic examines solution cost and solution overlaps simultaneously while searching for k alternative solutions. The IPM_kd metaheuristic is schematically shown in Algorithm 1
                     .

The IPM_kd algorithm sequentially generates k alternative solutions, forming together a solution S for the kd-VRP. At the end of each iteration, the current solution S is compared with the best solution found so far (S*). This comparison is done by evaluating the costs of solutions S and S* following the objective function described in Eq. (5a) and denoted by F = min  max 
                        i ∈ {1, …, k}
                     f(yi
                     ). At the end of the algorithm, after I iterations, S* is reported.

The generation of each alternative solution is done in two consecutive steps. In the first step an iterative local search approach is used. An initial solution (yi
                     ) is generated by the Lin–Kernighan heuristic followed by the Prins splitting procedure (see Section 5.1). This solution is then improved by using the Variable Neighbourhood Descent (VND) heuristic (see Section 5.3) that is repeated P times starting from a new solution obtained after a diversification mechanism (see Section 5.4) to escape from local optima.

The best alternative solution (
                        
                           y
                           
                              i
                           
                           *
                        
                     ) found during this step represents the input of the second stage of the procedure. If S is empty 
                        
                           y
                           
                              i
                           
                           *
                        
                      is added directly to S otherwise a similarity check is performed following the similarity constraints in Eq. (5b). If 
                        
                           y
                           
                              i
                           
                           *
                        
                      does not satisfy the similarity constraints a penalization function is used to increase the cost of the edges that 
                        
                           y
                           
                              i
                           
                           *
                        
                      shares with the previously generated alternative solutions (
                        
                           
                              y
                              h
                              *
                           
                           ,
                        
                      ∀h ∈ 1, …, i − 1). Subsequently a VND heuristic replaces costly edges with edges that have a lower cost, guiding the algorithm towards an alternative solution that satisfies the similarity constraints. When the best alternative solution 
                        
                           y
                           
                              i
                           
                           *
                        
                      is added to S, the cost matrix of the underlying VRP is updated, by penalizing all edges that have been used in 
                        
                           y
                           
                              i
                           
                           *
                        
                     . The procedure is repeated until k alternative solutions are added in S.

The internal parameters used by the IPM_kd algorithm (referred to as heuristic parameters) as well the kd-VRP key controls (referred to as kd-VRP parameters) are summarized in Table 1
                     .

Four basic heuristic components, described in the following sections, are applied in the solution approach: (1) The Lin–Kernighan heuristic followed by the Prins splitting procedure; (2) a Penalization function; (3) a Variable Neighbourhood Descent (VND) heuristic; (4) a Perturbation.

To find an initial alternative solution yi
                         the algorithm implements the Lin–Kernighan heuristic, followed by the Prins splitting procedure, both using the current cost matrix.

The Lin–Kernighan heuristic described in Lin and Kernighan (1973) is a deterministic approach generally considered to be one of the most effective methods to generate optimal or near-optimal solutions for the symmetric travelling salesperson problem (TSP). The Lin–Kernighan heuristic employed in this paper uses the modified version as implemented in Helsgaun (2000).

To transform this TSP solution into a VRP solution the Prins splitting procedure is used. This algorithm generates a feasible VRP solution by splitting the giant TSP tour into feasible routes for which the capacity of the vehicle is not violated. For a more detailed explanation of this procedure we refer to Prins (2004).

The Penalization function is employed to update the cost matrix of the VRP, using a multiplicative penalty structure, i.e., the new cost of each edge is based on the current cost (which may have been penalized before) multiplied by (1 + β) where β represents a penalty factor. The aim of the Penalization function is twofold:

                           
                              (1)
                              Once the best alternative solution 
                                    
                                       y
                                       
                                          i
                                       
                                       *
                                    
                                  is added to set S, the Penalization function increases the cost of all edges used in 
                                    
                                       y
                                       
                                          i
                                       
                                       *
                                    
                                 . In doing so, the search process is forced to move to a different part of the search space. In order to speed up the search for a new feasible (with regards to the similarity constraints) alternative solution y
                                 
                                    i + 1 (with i < k), the Penalization function also penalizes the edges that can be obtained by combining the vertices which are in each route of 
                                    
                                       y
                                       
                                          i
                                       
                                       *
                                    
                                  by half of the penalty (i.e., the cost of these edges is multiplied by (1 + β/2)).

If the alternative solution 
                                    
                                       y
                                       
                                          i
                                       
                                       *
                                    
                                  does not respect the similarity constraints, the Penalization function penalizes the use of the edges which are in common between 
                                    
                                       y
                                       
                                          i
                                       
                                       *
                                    
                                  and the alternative solutions that are already contained in S (
                                    
                                       
                                          y
                                          h
                                          *
                                       
                                       
                                       ∀
                                       h
                                       ∈
                                       
                                          1
                                          ,
                                          ⋯
                                          ,
                                          i
                                          −
                                          1
                                       
                                    
                                 ). This operation forces the algorithm to discard the shared edges, guiding the VND heuristic (see Section 5.3) towards a feasible solution.

It should be noted that if a relatively large value of β is chosen, edges that appear in the alternative solutions already contained in S are discouraged more heavily, while a smaller penalty allows for more frequent recurrence of edges in the k alternative solutions.

The VND heuristic has a dual purpose. First, it is used every time a current alternative solution is generated in order to improve it. Second, it is applied after the Penalization function to guide the algorithm towards a best alternative solution that satisfies the similarity constraints. Our implementation of the VND heuristic uses seven different local search operators:

                           
                              •
                              
                                 Intra Route Local Search Operators which attempt to improve a single route: Internal Or-Opt and Internal Relocate, Internal 2-Opt (shown in Fig. A.1
                                  contained in Appendix A).


                                 Inter Route Local Search Operators which change more than one route simultaneously: External Exchange, External Relocate, External 2-Opt and External Cross-Exchange (shown in Fig. A.2
                                  in Appendix A).

The VND heuristic, shown in Algorithm 2
                        , stops when the current solution cannot be further improved by any of the local search operators, and thus a local optimum has been reached. Each local search operator uses a first-improvement descent strategy, accepting a move that improves the current solution as soon as it is found and restarting the VND heuristic from the new current solution.

Finding the right order in which the local search operators are used in a deterministic VND heuristic may be of considerable importance for the quality of the solution. We tested different configurations and on average, the most promising order of neighbourhoods is reported in Table 2
                        .

The perturbation heuristic is used inside the IPM_kd algorithm as a diversification mechanism to escape from local optima, while looking for the best ith alternative solution. During the perturbation heuristic a destroy-and-repair operator, similar to the one described in Talarico, Sörensen, and Springael (2013), is used.

First, the best alternative solution found so far (
                           
                              y
                              
                                 i
                              
                              *
                           
                        ) is partially destroyed and then it is repaired obtaining a new current solution (yi
                        ). The destroy-and-repair operator takes ω as a parameter, which is the number of routes to be destroyed from 
                           
                              
                                 y
                                 
                                    i
                                 
                                 *
                              
                              ,
                           
                         as a percentage of the total number of routes. The solution is then repaired with new routes that are generated by using a greedy randomized nearest neighbourhood heuristic. In this heuristic parameter α controls the balance between greediness and randomness. During the generation of a new route r, the next vertex to be added in r is randomly selected from a restricted candidate list. This list contains the first α closest unvisited vertices passing all a feasibility check with respect to the capacity constraint.

After the application of the destroy-and-repair operator, the newer generated solution yi
                         is saved as the current alternative solution and is improved by using the VND heuristic.

The IPM_kd metaheuristic, described in Section 5, has been coded in Java language. In this section we report the results of the experiments performed using a machine with an Intel core i7-2760QM 2.40 gigahertz processor with 4 gigabytes RAM. The test instances used to run the experiments are described in Section 6.1.

The results of the experiments are carried out in three different phases. In the first phase we tune the IPM_kd metaheuristic by identifying the best settings for the heuristic parameters (see Section 6.2). In the second phase we examine the effects of the kd-VRP parameters on the solutions (see Section 6.3). In the third phase (see Section 6.4) we analyse the performance of the IPM_kd metaheuristic by solving all the test instances.

Since the kd-VRP has not been studied before, no test instances are available in the literature. Real-life problem instances could be generated by using the publicly accessible information (e.g., the geographical information system) to locate potential customers. However, since no benchmark solutions (or satisfactory upper/lower bounds) are known, the analysis of the IPM_kd metaheuristic, based on the quality of the obtained solutions, could not be performed. Moreover, real problems faced by cash-in-transit companies, whether available, might unlikely be made publicly available due to security and non-disclosure reasons.

For these reasons the IPM_kd metaheuristic has been extensively tested using a large set of benchmark instances taken from the VRP library. We used 51 medium and large instances from different sources (Augerat et al., 1998; Christofides, Mingozzi, Toth, and Sandi, 1979; Fisher, 1994; Golden, Wasil, Kelly, and Chao, 1998; Taillard, 1993)
                           1
                        
                        
                           1
                           The instances are available at http://neo.lcc.uma.es/vrp.
                         ranging from 45 to 484 nodes. The characteristics of the instances are reported in Table 3
                        . As mentioned, given a similarity measure between alternative solutions, an instance of the VRP can easily be transformed into an instance of the kd-VRP by adding only two parameters: the number of alternative solutions k and the similarity threshold TS
                        .

The computational experiments performed on the VRP instances are aimed at validating our proposed metaheuristic in a general setting. Further studies can be addressed at involving companies in the cash-in-transit and/or in the chemical sectors in order to incorporate additional sector specific insights into the kd-VRP and into the related solution approach.

In the first phase of the computational experiment the heuristic parameters of the IPM_kd are tuned by running a full factorial experiment on a subset of the benchmark instances called sample set.
                           2
                        
                        
                           2
                           This subset contains 10 percent of all the test instances. In particular one instance has been randomly selected from each source. The resulting sample set is made by the following instances: A-n53-k7; vrpnc1; F-n72-k4; tai100a and kelly5.
                         The heuristic parameters are tuned to obtain on average, the best possible solutions (lower values of the objective functions measured by the cost of the worst solution in the set of k alternative solutions where k has been chosen equal to 3 and TS
                         = 0.2) over the sample set. A summary of the heuristic parameters, as well as the tested values, the number of tested values, and the best parameter configuration is given in Table 4
                        .

As shown in Fig. 2
                        , if both the number of times that the IPM_kd algorithm is restarted (I) and the number of times that the Perturbation heuristic is applied (P) are increased, the quality of the solutions improves, but at the expense of increasing the running time. However, there is a point from which the marginal reduction of the objective function due to the increasing of these parameters diminishes while the running time increases. An analysis of convergence has been performed using the sample set showing that after a value of I = 50 and P = 10 the results are stable. Moreover the running time increases with higher values of I, while for values of P smaller than 10 the running time appears stable.

The penalty factor β presents a significant impact on both the quality of the solutions and the running times. On the one hand, smaller values of β encourage alternative solutions with lower costs to be generated. However, given that edges which are already used may still be selected, the similarity between the alternative solutions may be close to TS
                        . On the other hand, larger values of β discourage the selection of already used edges, supporting lower similarities between the alternative solutions at the expense of generating solutions with higher cost. The lower the penalty is, the longer is the search for feasible solutions and the better is the quality of the solutions (see Fig. 3
                         on the left). Higher penalties might allow to escape from infeasible solutions in shorter time by strongly penalizing edges already used in the current alternative solutions. Given a fixed computational time (8 seconds) the best solutions are obtained with β = 0.05. It should be noted that on average the quality of solutions is really similar for values of β between 0.025 and 0.20 as shown in the right panel of Fig. 3.

In the second step of the computational experiments, by using the best configuration of the heuristic parameters, we test the IPM_kd algorithm on the sample set (described before), using different values of the kd-VRP parameters: (1) k (number of alternative solutions to be generated) and (2) TS
                         (similarity threshold). Parameters k and TS
                         are part of the problem input data and on a tactical level, their related values can be changed to test a different scenario by generating a different instance (less or more constrained) with a different optimal solution.

The computational time needed to generate an additional alternative solution increases with k, and depending on the similarity threshold, the cost of the kth alternative solution increases as well. If TS
                         assumes higher values, the cost of the kth alternative solution decreases, as well as the computational time (see Fig. 4
                        ). In fact, the higher the similarity threshold is, the less constrained is the problem. If TS
                         is set equal to zero, the kd-VRP problem is reduced to find k disjoint alternative solutions. If TS
                         assumes values close to 1, the resulting k alternative solutions will share a high number of edges and the cost of the kth alternative solution will tend to the cost of the best known VRP solution.

A final remark concerns the kd-VRP problem described in Eqs. (5a) and (5b) where a min–max objective function, aimed at reducing the cost of the worst alternative solution, is used. The impact of such an objective on the solutions is shown in Fig. 5
                         where the quality of the best, the average and the worst alternative solution among the set of k alternative solutions is represented for different values of k. These results have been averaged over all the solved instances and the percentage gaps are computed considering the best, the average and the worst alternative solution within the set of k alternative solutions and the best known solution for the underlying VRP instance. As expected, when k increases the quality of the best alternative solution in the set of k alternative solutions remains stable, while the values of the average and the worst alternative solutions worsen due to a higher number of alternative solutions in the set.

@&#RESULTS@&#

In the third step of the computational experiments, using the best configuration for the heuristic parameters (see Table 4), we solve the benchmark instances described in Section 6.1. For each instance we execute 15 runs fixing the similarity threshold TS
                         = 0.20 (and thus the k alternative solutions must be different from each other by at least 80 percent).

The results obtained are summarized in Table 5
                        , where for each value of k and for each instance we report: the percentage gap between the best kd-VRP solution (i.e., the worst alternative solution with the highest cost within the set of k alternative solutions) obtained after 15 runs and the best known VRP solution (column percent BestGap); the percentage gap between the average cost of the kd-VRP solution obtained over 15 runs and the best known VRP solution (column percent AvgGap); the average computational time in seconds (column AvgTime).

In order to evaluate the effectiveness of our solution approach we also reported the results obtained for k = 1 (see Table 5). In this case the kd-VRP is reduced to a standard capacitated vehicle routing problem for which the IPM_kd appears to be a competitive solution approach. On average the optimal gap from best known VRP solutions is only 1.79 percent with an average running time of 1.283 seconds. Moreover if we focus on the VRP instances for which the optimal solutions are known (instances denoted with an asterisk in Table 5), we obtained 2 optimal solutions (highlighted in bold) over 11 instances, with an average optimal gap of 0.58 percent.

As shown in Table 5, instances having a smaller number of vertices present higher gaps between the cost of the kth alternative solution (with k > 1) and the best known VRP solution than bigger instances. In fact, when the number of vertices increases, the number of potential edges (E = V × V) increases even more. Hence the possibility to select non-shared edges, with a relative low cost, is much higher for larger instances.

As expected, the average computational time grows with k (see Fig. 6
                         on the right). The average running times needed to solve an instance in the benchmark set, when k = 5 and TS
                         = 0.20, is below 16 seconds. The relationship between the quality of solutions and k is shown in Fig. 6 on the left.

Considering all the 51 benchmark instances, the average percentage gap from the best known VRP solutions is only 22.8 percent when 5 alternative solutions (that differ by 80 percent from each other) are generated. The algorithm also presents a good level of robustness since the average difference between the costs of the best and the average kd-VRP solutions remains limited to 3.8 percent.

Finally, given the best setting for the IPM_kd metaheuristic, the effect of the different components of the algorithm on the solutions is investigated. We observed that on average the VND heuristic is able to improve the quality of the current alternative solutions by 26 percent while the perturbation heuristic is shown to be an effecting way to escape from local optima by improving the quality of the initial alternative solutions by on average 3 percent.

@&#CONCLUSIONS@&#

In this paper we have presented a new combinatorial optimization problem, including a mathematical formulation the aim of which is to generate a set of k alternative solutions of a single vehicle routing problem instance, in such a way that each alternative solution differs from all the others by at least a given threshold. A distance metric between alternative solutions has also been defined. A min–max objective function minimizes the cost of the worst solution in this set.

The kd-VRP is applicable in several practical situations. In the cash-in-transit sector, the kd-VRP can be used to define a set of alternative routes to collect or deliver cash and valuables, something which is often required by law as a preventive measure to add variability and increase unpredictability for crime organizations.

Other applications can be found in the fuel distribution or in the transportation of dangerous goods, in which all customers must be served and for specific reasons (e.g., accidents, unavailability of some route edges, security reasons), several alternative routes need to be generated.

To solve this problem, we have developed an iterative method (IPM_kd) based on a similar method for the k dissimilar shortest paths problem. The IPM_kd metaheuristic has been tested using 51 VRP benchmark instances varying the number of alternative solutions that need to be generated. The results obtained are encouraging. In a limited computational time we have generated k alternative solutions also for large and medium VRP instances, being k ∈ {1, …, 5}. In particular, for k = 5 and a maximum similarity threshold TS
                      = 0.20, the VRP alternative presenting the highest cost is, on average, only 22.7 percent worse than the best known solutions of the original VRP problems.

In the future, we plan to investigate extensions of the kd-VRP, e.g., by including more sophisticated similarity indices (that include spatial and temporal information) and/or additional real-life constraints such as time windows, route length restrictions, and precedence relations between vertices. In addition, more robust metaheuristics which use complex inter-solution local search operators can be developed and compared with the iterative algorithm that is presented in this paper. The development of exact methods based e.g., on a column generation approach and the definition of optimal solutions and bounds for the kd-VRP problem, both present promising research avenues.

Here we report some illustrative examples of the intra route (Fig. A.1) and inter route (Fig. A.2) local search operators that are used inside the VND heuristic. Each figure shows a VRP solution before (left side) and after (right side) the application of the corresponding local search operator. The depot is represented by a black square while black circles denote the customers. The length of the edges is proportional to their cost.

@&#REFERENCES@&#

