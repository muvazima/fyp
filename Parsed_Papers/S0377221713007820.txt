@&#MAIN-TITLE@&#Threshold-based preprocessing for approximating the weighted dense k-subgraph problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We model the selection of key owners in forestry regions as dense k-subgraph problem.


                        
                        
                           
                           By a chain-reaction of vertex deletions, the size of the input graph is reduced.


                        
                        
                           
                           The reduced graph contains a (1+1/k)-approximate solution.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

(I) Graph theory

OR in forestry

Dense subgraph

Approximation algorithms

@&#ABSTRACT@&#


               
               
                  Based on an application in forestry, we study the dense k-subgraph problem: Given a parameter 
                        
                           k
                           ∈
                           N
                        
                      and an undirected weighted graph G, the task is to find a subgraph of G with k vertices such that the sum of the weights of the induced edges is maximized. The problem is well-known to be NP-hard and difficult to approximate if the underlying graph does not satisfy the triangle inequality.
                  In the present paper, we develop a fast preprocessing routine which results in a graph still containing a 
                        
                           
                              
                                 
                                    1
                                    +
                                    
                                       
                                          1
                                       
                                       
                                          k
                                       
                                    
                                 
                              
                           
                        
                     -approximation for the problem. The key idea is to identify vertices which are of low interest to an optimal solution for the problem due to falling below a special ‘threshold’. Using this information, we initiate a chain-reaction of vertex eliminations to reduce the number of vertices in the input graph without losing a lot of information. This graph reduction step runs in polynomial time.
                  The success of this preprocessing step mainly depends on finding a large threshold, which ensures that many vertices can be removed. For this purpose, we devise an efficient algorithm which yields a provably optimal threshold.
                  Finally, we present empiric studies for our application. Even though the graphs tied to our application in forestry have several hundred vertices and do not satisfy the triangle inequality, they exhibit special properties which yield a very favorable performance of our approach. The pruning step typically removes more than 90% of the vertices, and thus enables an optimal solution of the problem on the reduced graph.
               
            

@&#INTRODUCTION@&#

The problem of identifying a subgraph with maximal weight subject to some sort of size constraint in a given graph is a well-known and widely studied problem in Operational Research with applications in such diverse fields as facility location (Pisinger, 2006) and (social) network analysis (Andersen & Chellapilla, 2009). Various interpretations of this problem setting have been investigated in the literature.

In the present paper, we consider the (weighted) dense 
                     k
                     -subgraph (DkS) problem. It is a natural generalization of the maximum clique problem (readily implying NP-hardness), and has therefore been subject to a substantial amount of research. It asks for the densest subgraph with exactly k vertices of a weighted or unweighted graph.
                        Problem
                        
                           Dense k-subgraph (DkS)
                        


                           Input: Graph G
                           =(V,
                           E), weight function 
                              
                                 w
                                 :
                                 E
                                 →
                                 N
                              
                           , and 
                              
                                 k
                                 ∈
                                 N
                              
                           .


                           Output: Induced subgraph G′=(V′,
                           E′) of G such that ∣V′∣=
                           k and 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       e
                                       ∈
                                       
                                          
                                             E
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 w
                                 (
                                 e
                                 )
                              
                            is maximal.

Variations of this particular problem, asking for the densest subgraph with at least (DalkS) or at most (DamkS) k vertices have also been considered.

In recent years, at lot of attention has been attracted by weighted versions of this problem where both edge weights and vertex weights are considered. The so-called maximal weighted k-clique problem (abbreviated in the literature as MEWCP, WCP
                        k
                     ) asks for a k-clique of maximal weight in a complete weighted graph.

In the context of location problems, the weighted DkS problem is also often referred to as maximal dispersion (or 1-dispersion) problem. As these problems usually arise from weighted graphs representing distances in a Euclidean space, the weights are often assumed to satisfy the triangle inequality. Conversely, our interest in the DkS problem is motivated by a real-world application in forestry, for which this is not the case. Let us provide some basic notation, before turning to this application.

In the following, we consider (undirected) graphs G
                     =(V,
                     E) with a vertex set V
                     ={v
                     1,…,
                     v
                     
                        n
                     } and a set of undirected edges E
                     ={e
                     1,…,
                     e
                     
                        m
                     }. We denote the edges as sets e
                     ={v
                     
                        i
                     ,
                     v
                     
                        j
                     }. For the addition of edge e to an edge set E, we use the wording E
                     ←
                     E
                     ∪{e}. When adding the vertices v
                     
                        i
                     , v
                     
                        j
                      of e
                     ={v
                     
                        i
                     ,
                     v
                     
                        j
                     } to a vertex set V, we write V
                     ←
                     V
                     ∪
                     e. The number of elements in a vertex or edge set is denoted as ∣V∣, ∣E∣ respectively. To emphasize that a subgraph has size exactly k, we sometimes denote it as k-subgraph (e.g., a k-forest is a forest on exactly k vertices). The neighborhood of a vertex v or a set of vertices A is referred to as N(v) or N(A) respectively. Here, N(A)={v′∈
                     V⧹A : {v,
                     v′}∈
                     E} does not contain any vertices in A.

We will study sequences 
                        
                           S
                           =
                           (
                           
                              
                                 v
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 v
                              
                              
                                 t
                              
                           
                           )
                        
                      of vertices. For a convenient notation, we use 
                        
                           S
                           ←
                           S
                           ∪
                           v
                        
                      to denote that we append vertex v to the end of the sequence, and 
                        
                           S
                           ←
                           S
                           ∪
                           e
                        
                      to denote that we append the vertices of edge e to 
                        
                           S
                        
                      in arbitrary, but fixed order. When performing set operations on such a sequence, we use 
                        
                           S
                        
                      to also refer to the set of vertices in the sequence, when the context is clear. In particular, we use 
                        
                           S
                           ⊆
                           V
                        
                      to denote that 
                        
                           S
                        
                      only contains vertices in V, and for A
                     ⊂
                     V, 
                        
                           S
                           ⧹
                           A
                        
                      is the subsequence of 
                        
                           S
                        
                      for which all v
                     ∈
                     A are deleted.

In many cases, we have a weight function 
                        
                           w
                           :
                           E
                           →
                           N
                        
                     , and then also refer to the graphs as weighted graphs G
                     =(V,
                     E,
                     w). We use the canonical wording V(E′) for the set of vertices covered by a set of edges E′, and the wording E(V′) for the edge set induced by a vertex set V′. For the sake of simplicity, we refer to subgraphs (V(E′),
                     E′) by their inducing edge set E′, and refer to subgraphs (V′,
                     E(V′)) by the inducing vertex set V′.

Further, w(E′) denotes the sum of weights of the edges in E′ and w(V′) the sum of weights of edges in E(V′). Finally, we talk about the potential or weighted degree of a vertex v with respect to a subgraph G′ of G by using 
                        
                           
                              
                                 p
                              
                              
                                 
                                    
                                       G
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                           (
                           v
                           )
                           =
                           
                              
                                 ∑
                              
                              
                                 
                                    
                                       v
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 N
                                 (
                                 v
                                 )
                                 ∩
                                 V
                                 (
                                 
                                    
                                       G
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                           
                           w
                           (
                           {
                           v
                           ,
                           
                              
                                 v
                              
                              
                                 ′
                              
                           
                           }
                           )
                        
                     , or shorter p(v) if the subgraph G′ is clear from the context. For v
                     
                        i
                     
                     ∈
                     V, we also write p(i) if it allows a simpler notation. For the additional graph-theoretical standard terms and notation used, see e.g., Diestel (2005).

Let us now describe the real-world application at hand.

@&#MOTIVATION@&#

In many forestry regions in Northern Bavaria, an efficient cultivation has become impossible due to heritage law and the frequent change of ownership: The average sizes of the owners’ lots have become less than 0.3 hectares. Further, the lots themselves often are of a shape badly suited for cultivation (e.g., several dozens of meters long, but only few meters wide). Finally, even in small regions, there typically are several hundred different owners of very small lots. Fig. 1
                         depicts an example. It consists of 560 lots that belong to 227 owners.
                           1
                           The figure was created using the licensed software “Arborchange”. To respect data privacy, the figure does not depict the ownership structure of a real-world region, but instead an example specifically created for visualization purposes. It shares all of the common and representative properties of the real-world regions investigated.
                        
                        
                           1
                        
                     

With so many different owners, a classical land consolidation approach is difficult to implement in practice. Instead, one initiates what is called a voluntary land exchange. In such a process, the structural partition of the forestry region into lots remains unchanged, but the ownership of the existing lots may be redistributed combinatorially. This approach is similar to the exchange of lend-lease agreements in agricultural regions. See Borgwardt, Brieden, and Gritzmann (2011) and Brieden and Gritzmann (2004).

To improve the cost-effective structure of the region, by means of such a redistribution, larger connected areas of lots that belong to a single owner should be created, i.e., lots that are adjacent to each other should be assigned to the same owner. Of course, the total value of the lots of the owners has to remain about the same in the redistribution process.

Due to the extreme number of owners even in small forestry regions, it is not possible to contact or negotiate with all owners in practice. Thus, one selects a small number of k owners that are asked to participate on a voluntary basis. The criterion by which this choice is made is very important. A natural approach is to try to find the k owners which provide maximal room for improvement of the cost-effective structure in the region.

As mentioned above, the most significant measure for the improvement of the cost-effective structure is the creation of larger areas of lots that belong to the same owner during such a redistribution process. An intuitive way to judge how much potential an owner contributes to a redistribution process is the total length of boundary of his own lots towards other owners’ lots: Consider two owners in a forestry region. One of them has only a single, huge area of connected lots, and thus only shares a rather low total length of boundary with other owners. Conversely, the second one owns many small lots that, in total, have the same size as the other owner’s area of lots. But the fragmented nature of these small lots typically means that the boundary to other lots will be much longer. In this case, the second owner would be the better choice for participation in the land exchange process.

By assigning adjacent lots to the same owner, one might be able to get rid of their common boundary. Further, large boundary lengths are often connected to unfavorable lot shapes – a very long lot that is only a couple of meters wide may have a small area, but nonetheless have a very large boundary to another lot owned by a different owner. By preferring owners with large total boundary lengths, one also implicitly tries to improve on these bad lot shapes.

The underlying mathematical problem can be modeled as follows. Let G
                        =(V,
                        E,
                        w) be an undirected weighted graph. Its vertices V
                        ={v
                        1,…,
                        v
                        
                           n
                        } correspond to the n owners in the region. Further, there is an edge {v
                        
                           i
                        ,
                        v
                        
                           j
                        }∈
                        E if and only if the owners v
                        
                           i
                         and v
                        
                           j
                         have at least one common boundary between their lots. The weight function 
                           
                              w
                              :
                              E
                              →
                              N
                           
                         denotes the total length of all boundaries in between the respective owners’ lots.

As we will see in our empiric studies, the graphs we construct in this way share some special properties. E.g., the number of edges is low in relation to the number of vertices, and they contain vast differences in the edge weights and potential of their vertices. On the other hand, the edge weights do not satisfy the triangle inequality. In addition to such a graph, we are given a 
                           
                              k
                              ∈
                              N
                           
                        , and have to select a subset of vertices S
                        ⊆
                        V with ∣S∣=
                        k such that its induced edge set is of maximal total weight. In the next section, we briefly survey the literature and state of the art for this problem.

From a theoretical point of view, it is known that the DkS problem is NP-hard even for bipartite graphs of maximal degree 3 (Feige & Seltser, 1997), comparability graphs, chordal graphs (Corneil & Perl, 1984) and planar graphs (Keil & Brecht, 1991). While Khot (2006) showed that there can be no PTAS for the dense k-subgraph problem under standard complexity theoretic assumptions, no stronger bound on the approximability is known. In particular, it is an open question whether an approximation ratio better than O(n
                        
                           α
                        ), α
                        >0 can be achieved, for example it is unknown whether the problem is in APX or not.

Several approaches to solving the DkS problem exactly have been investigated. Macambira and de Souza (2000) and subsequently Sørensen (2004) considered a mixed integer formulation for the problem of finding a k-clique of maximal weight in a vertex- and edge-weighted complete graph. They derive several facets of the underlying k-clique polytope, which are incorporated in a branch-and-cut algorithm. Hunting, Faigle, and Kern (2001) proposed an approach using cutting planes in a Lagrangian relaxation of the integer programming formulation while Billionnet, Elloumi, and Plateau (2009) use a tight convex reformulation of a quadratic formulation of the problem. Due to the difficulty of the problem, exact solutions are in general only possible for small instances, Hunting et al. (2001) and Macambira and de Souza (2000) consider weighted complete graphs with up to 48 vertices, while Sørensen (2004) reports results for graphs with at most 61 vertices and Billionnet et al. (2009) consider instances with up to 100 vertices with varying densities. Therefore, there have been several attempts to design efficient approximation algorithms. Asahiro, Iwama, Tamaki, and Tokuyama (2000) designed and analyzed a greedy algorithm for the maximal weight k-clique problem, achieving an approximation ratio of 
                           
                              O
                              
                                 
                                    
                                       
                                          
                                             n
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        . Feige and Langberg (2001) present an algorithm based on an SDP relaxation which achieves an approximation ratio of 
                           
                              
                                 
                                    n
                                 
                                 
                                    k
                                 
                              
                           
                        , which was further improved by Han, Ye, and Zhang (2002), for a range of values of 
                           
                              
                                 
                                    n
                                 
                                 
                                    k
                                 
                              
                           
                        .

Starting with Kortsarz and Peleg (1993), a series of algorithms with approximation ratio O(n
                        
                           α
                        ) for some α
                        >0 for the unweighted DkS problem have been designed by combining several algorithms which achieve good results on specific instances. The algorithms and analysis have subsequently been refined by Feige, Peleg, and Kortsarz (2001) and Goldstein (2009). The currently best known approximation ratio independent of k is achieved by Bhaskara, Charikar, Chlamtac, Feige, and Vijayaraghavan (2010) in the form of n
                        1/4+∊
                        . In Feige et al. (2001), it is also mentioned that an approximation algorithm for the unweighted DkS problem can be generalized to the weighted version, incurring an additional factor of log(n) for the approximation ratio.

However, constant factor approximations are known for slight variations of the DkS problem: Goldstein (2009) proposed a 2-approximation for the problem of finding the densest subgraph with at least k vertices (DalkS) by transforming a relaxed version into a submodular function minimization problem, which can be solved in polynomial time. This result also generalizes to the weighted version with non-negative edge weights.


                        Hassin, Rubinstein, and Tamir (1997) construct a 2-approximation algorithm for the problem of finding l disjoint induced subgraphs, each of size k, of a weighted graph satisfying the triangle inequality, such that the sum of their weights is maximized. In Liazi, Milis, and Zissimopoulos (2008), a 3-approximation algorithm for the DkS problem on chordal graphs is introduced. Furthermore, the problem without size constraint can be transformed to a flow problem and is therefore solvable in polynomial time (Goldberg, 1984).

All of the approaches in the literature benefit significantly from smaller instances. In this paper, we present a preprocessing routine which reduces the size of original the graph while retaining a 
                           
                              
                                 
                                    
                                       1
                                       +
                                       
                                          
                                             1
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        -approximation for the DkS problem on graphs that do not satisfy the triangle inequality. E.g., for k
                        =10, we obtain a reduced subgraph containing a 1.1-approximation, i.e., a selection of vertices with more than 90% 
                           
                              
                                 
                                    
                                       
                                          
                                             1
                                          
                                          
                                             1.1
                                          
                                       
                                       >
                                       0.9
                                    
                                 
                              
                           
                         of the total weight of an optimal solution.

The key idea is to apply a threshold-based pruning strategy which allows us to delete vertices from the original graph that fall below a certain threshold. Informally, such a threshold is a value that is put into relation with a best-case edge weight contribution of a vertex in the selection of a k-vertex subset of the graph. The simplest measure for this contribution would be the potential of a vertex, but we use a more sophisticated measure. As we will show, a vertex whose possible contribution lies below the threshold is ‘not of high interest’ to an optimal solution for the DkS problem, and thus can be dropped from the input graph without losing a lot of information.

With enough vertex deletions, this enables us to find an exact solution (or approximate solution with low error) to the problem on the reduced graph. We show that the graph reduction itself runs in polynomial time. Thus the running time of finding an approximate solution for the DkS problem in this way depends almost solely on the number of vertices in the reduced graph. Due to this, it is important to find a large threshold for the graph reduction: The larger the threshold, the more vertices can be eliminated. For this purpose, we devise an efficient algorithm that computes a provably optimal threshold.

While one cannot guarantee the existence of vertices below such a threshold for general graphs, the special graphs of our application perform very favorably with respect to these, often allowing 90–95% of all vertices to be removed from consideration. Let us outline the contents of the present paper.

In Section 2, we begin with a formal definition and an informal interpretation of the threshold of a vertex sequence in a graph. Then, we turn to what we call threshold-based pruning: We provide Algorithm 1 to demonstrate how a threshold can be used to obtain a chain-reaction of special vertex deletions from an input graph. Our main result is that the resulting subgraph still contains a 
                           
                              
                                 
                                    
                                       1
                                       +
                                       
                                          
                                             1
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        -approximation for the DkS problem. Algorithm 1 runs in time O(m
                        +
                        n).

We close the section by summing up all the steps necessary for the (non-polynomial time) Algorithm 2, which computes a solution with approximation error at most 
                           
                              
                                 
                                    
                                       1
                                       +
                                       
                                          
                                             1
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        . Its key part is to find a large threshold. In Section 3, we present how to obtain an optimal threshold, by means of Algorithm 3. Our Algorithm starts with the vertices of an edge of the largest weight in the graph, and then greedily adds either a best vertex or best pairs of vertices to the current subset of vertices, with respect to maximizing the total weight of edges in the induced subgraph of these vertices. We prove that the constructed sequence yields an optimal threshold and show that the algorithm can be implemented in O(kn
                        2) in the arithmetic model of computation.

Finally, we provide some empiric results for our real-world application, in Section 4. In the discussion of these results, we focus on the special properties of the graphs arising in our application, which explain its favorable performance.

Throughout the present paper, the threshold of a vertex sequence in a graph will take a central role, as we can use it to identify vertices which cannot contribute a lot of edge weight to a subgraph induced by k vertices – such vertices are not ‘interesting’ for a solution of the DkS problem. Let us begin by providing a formal definition of this term:
                        Definition 1
                        Let 
                              
                                 S
                                 =
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       k
                                    
                                 
                                 )
                              
                            be a sequence of k vertices in a weighted graph G
                           =(V,
                           E,
                           w), and let V
                           
                              i
                           
                           ≔{v
                           1,…,
                           v
                           
                              i
                           }. The threshold 
                           
                              
                                 Δ
                                 =
                                 Δ
                                 (
                                 S
                                 )
                              
                            of this sequence is defined as
                              
                                 
                                    Δ
                                    (
                                    S
                                    )
                                    
                                    ≔
                                    
                                    
                                       
                                          
                                             min
                                          
                                          
                                             i
                                             =
                                             1
                                             ,
                                             …
                                             ,
                                             k
                                             -
                                             1
                                          
                                       
                                    
                                    
                                       
                                          δ
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                    where
                                    
                                    
                                       
                                          δ
                                       
                                       
                                          i
                                       
                                    
                                    
                                    ≔
                                    
                                    
                                       max
                                    
                                    
                                       
                                          
                                             w
                                             (
                                             
                                                
                                                   V
                                                
                                                
                                                   i
                                                
                                             
                                             )
                                             -
                                             w
                                             (
                                             
                                                
                                                   V
                                                
                                                
                                                   i
                                                   -
                                                   1
                                                
                                             
                                             )
                                             ,
                                             
                                                
                                                   1
                                                
                                                
                                                   2
                                                
                                             
                                             (
                                             w
                                             (
                                             
                                                
                                                   V
                                                
                                                
                                                   i
                                                   +
                                                   1
                                                
                                             
                                             )
                                             -
                                             w
                                             (
                                             
                                                
                                                   V
                                                
                                                
                                                   i
                                                   +
                                                   1
                                                
                                             
                                             ⧹
                                             {
                                             
                                                
                                                   v
                                                
                                                
                                                   i
                                                
                                             
                                             }
                                             )
                                             )
                                          
                                       
                                    
                                    .
                                 
                              
                           
                        

If the sequence 
                        
                           S
                        
                      is clear from the context, we use the shorter notation Δ for the threshold. When we have to distinguish sequences 
                        
                           
                              
                                 S
                              
                              
                                 1
                              
                           
                           ,
                           
                           
                              
                                 S
                              
                              
                                 2
                              
                           
                        
                      or 
                        
                           
                              
                                 S
                              
                              
                                 o
                              
                           
                           ,
                           
                           
                              
                                 S
                              
                              
                                 g
                              
                           
                        
                     , we will use the notation 
                        
                           
                              
                                 δ
                              
                              
                                 i
                              
                              
                                 1
                              
                           
                           ,
                           
                           
                              
                                 δ
                              
                              
                                 i
                              
                              
                                 2
                              
                           
                        
                      and 
                        
                           
                              
                                 δ
                              
                              
                                 i
                              
                              
                                 o
                              
                           
                           ,
                           
                           
                              
                                 δ
                              
                              
                                 i
                              
                              
                                 g
                              
                           
                        
                      to refer to the corresponding values of δ
                     
                        i
                     .

There is an intuitive informal interpretation of the threshold. First, it corresponds to the minimal value among δ
                     1,…,
                     δ
                     
                        k−1, where δ
                     
                        i
                      is a measure for vertex v
                     
                        i
                      in the sequence. Note that the value for the last vertex in the sequence is ignored, in the sense that there is no computation of a value δ
                     
                        k
                     .

For each vertex v
                     
                        i
                     , we take the larger of two values: The difference w(V
                     
                        i
                     )−
                     w(V
                     
                        i−1) represents the additional edge-weight gained by adding vertex v
                     
                        i
                      to V
                     
                        i−1, which is precisely what happens at the ith step of the sequence 
                        
                           S
                        
                     . The second term 
                        
                           
                              
                                 1
                              
                              
                                 2
                              
                           
                           (
                           w
                           (
                           
                              
                                 V
                              
                              
                                 i
                                 +
                                 1
                              
                           
                           )
                           -
                           w
                           (
                           
                              
                                 V
                              
                              
                                 i
                                 +
                                 1
                              
                           
                           ⧹
                           {
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                           }
                           )
                           )
                        
                      expresses the weight lost by removing v
                     
                        i
                      from V
                     
                        i+1, which is a lower bound for (one-half) the contribution of v
                     
                        i
                      and v
                     
                        i+1 combined.

This implies that the vertices of a sequence with a large threshold Δ do not necessarily form a connected component: Instead, the vertex v
                     
                        i
                      may be disconnected from the preceding vertices (or have very low potential towards them), and this may be compensated by a vertex v
                     
                        i+1 when the addition of both v
                     
                        i
                      and v
                     
                        i+1 contributes at least 2Δ. Due to this, the threshold may be seen as a ‘per vertex gain’ in total edge weight during the sequence.

This section is dedicated to showing that by pruning vertices from a graph which have potential less than a threshold cannot contribute significantly to a solution for the DkS problem, so that the remaining graph still provably contains a 
                        
                           
                              
                                 
                                    1
                                    +
                                    
                                       
                                          1
                                       
                                       
                                          k
                                       
                                    
                                 
                              
                           
                        
                     -approximation for the problem. As we will see, this pruning step is more involved than only removing vertices whose incident edges have low total weight. In the second subsection, we then sum up our algorithmic approach.

In this subsection, we introduce Algorithm 1, which uses a threshold to remove vertices from a graph such that the reduced graph still contains a 
                           
                              
                                 
                                    
                                       1
                                       +
                                       
                                          
                                             1
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        -DkS approximate solution. This bound depends greatly on the fact that, for the induced subgraph of a sequence of vertices with a threshold Δ, removing a subset of m vertices implies a loss of at least edge weight (m
                        −1)Δ. In fact, if this subset does not contain the last vertex of the sequence, we obtain a loss of at least mΔ. We begin by stating and proving this property formally.
                           Lemma 2
                           
                              Let 
                              
                                 
                                    S
                                    =
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          k
                                       
                                    
                                    )
                                 
                               
                              be a sequence of vertices, Δ the corresponding threshold, and let 
                              
                                 
                                    A
                                    ⊆
                                    S
                                    ⧹
                                    {
                                    
                                       
                                          v
                                       
                                       
                                          k
                                       
                                    
                                    }
                                 
                              
                              . Then we have
                              
                                 
                                    
                                       w
                                       (
                                       S
                                       )
                                       ⩾
                                       w
                                       (
                                       A
                                       )
                                       +
                                       |
                                       S
                                       ⧹
                                       A
                                       |
                                       Δ
                                       .
                                    
                                 
                              
                           

Let 
                                 
                                    t
                                    
                                    ≔
                                    
                                    |
                                    S
                                    ⧹
                                    A
                                    |
                                 
                               and j
                              1
                              <⋯<
                              j
                              
                                 t
                               such that 
                                 
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                t
                                             
                                          
                                       
                                    
                                    )
                                    =
                                    S
                                    ⧹
                                    A
                                 
                               and V
                              
                                 i
                              
                              ≔{v
                              1,…,
                              v
                              
                                 i
                              }. Consider i
                              ∈{1,…,
                              t}. By definition of the threshold, we have either 
                                 
                                    w
                                    (
                                    
                                       
                                          V
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                    )
                                    -
                                    w
                                    (
                                    
                                       
                                          V
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                             
                                          
                                          -
                                          1
                                       
                                    
                                    )
                                    ⩾
                                    Δ
                                 
                               or 
                                 
                                    w
                                    (
                                    
                                       
                                          V
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                             
                                          
                                          +
                                          1
                                       
                                    
                                    )
                                    -
                                    w
                                    (
                                    
                                       
                                          V
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                             
                                          
                                          +
                                          1
                                       
                                    
                                    ⧹
                                    {
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                    }
                                    )
                                    ⩾
                                    2
                                    Δ
                                 
                              . In the first case, adding vertex 
                                 
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                               increases the weight of 
                                 
                                    A
                                    ∪
                                    {
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                                -
                                                1
                                             
                                          
                                       
                                    
                                    }
                                 
                               by at least Δ. In the second case, if 
                                 
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                             
                                          
                                          +
                                          1
                                       
                                    
                                    ∈
                                    A
                                 
                              , the weight of 
                                 
                                    A
                                    ∪
                                    {
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                                -
                                                1
                                             
                                          
                                       
                                    
                                    }
                                 
                               is augmented by at least 2Δ by adding 
                                 
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                              . If 
                                 
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                             
                                          
                                          +
                                          1
                                       
                                    
                                    
                                    ∉
                                    
                                    A
                                 
                              , we have j
                              
                                 i
                              
                              +1=
                              j
                              
                                 i+1 and therefore adding vertices 
                                 
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                i
                                                +
                                                1
                                             
                                          
                                       
                                    
                                 
                               increases the weight by at least 2Δ. Since v
                              
                                 k
                              
                              ∉
                              A, i.e., j
                              
                                 t
                              
                              <
                              k, this argument holds for all i
                              ∈{1,…,
                              t}. □

Let us now take a closer look at Algorithm 1. It begins with a weighted graph G
                        =(V,
                        E,
                        w), and a sequence of k vertices 
                           
                              S
                           
                         in V and the corresponding threshold Δ. We construct a subgraph G′=(V′,
                        E′) of G by removing vertices (and their incident edges) in the following way:


                        G′ is initialized as G′=
                        G. The vertices in 
                           
                              S
                           
                         are guaranteed to remain in G′, as we only consider vertices in the set T initialized with 
                           
                              T
                              =
                              V
                              ⧹
                              S
                           
                         (line 1), and do not add any vertices in 
                           
                              S
                           
                         to T at a later stage (consider line 9). Further, for each vertex v
                        ∈
                        T, we initialize its potential p(v) as the sum of all of its edges (lines 2–4). Trivially, the potential is an upper bound on how much this vertex can contribute to the total edge weight of an induced k-vertex subgraph.

In the main while-loop (lines 5–16), we iterate until T contains no vertices anymore. In each of the iterations, we choose and remove an arbitrary vertex v from the set. If its potential is below the threshold (line 8), we remove it from V′ (line 14), but only after readding all of its neighbors v′ (that are not in 
                           
                              S
                           
                        ) to set T, removing the edges {v,
                        v′}, and updating the potentials of v′ (lines 9–13).

Due to readding the neighbors of deleted vertices to T, we obtain a chain-reaction of deletions: At first, only vertices with a potential less than our input threshold are deleted. But with the deletion of a vertex, the potentials of some of the remaining vertices are reduced, and may drop below the threshold, as well. A vertex incident to many vertices of low potential may be deleted at a late stage of the algorithm.

Let us consider the absolute loss of edge weight with respect to a set of vertices that we may introduce by performing these vertex deletions.
                           Lemma 3
                           
                              Let G
                              
                              =
                              
                              (V,
                              
                              E,
                              
                              w) with ∣V∣
                              =
                              
                              n, let 
                              
                                 
                                    w
                                    :
                                    E
                                    →
                                    N
                                 
                              
                              , and let S
                              ⊂
                              V. Finally, let G′
                              =
                              
                              (V′,
                              
                              E′)
                              ⊆
                              G be the graph as computed by 
                              
                                 Algorithm 1 
                              for a threshold Δ. Then
                              
                                 
                                    
                                       w
                                       (
                                       S
                                       ∩
                                       
                                          
                                             V
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                       ⩾
                                       w
                                       (
                                       S
                                       )
                                       -
                                       |
                                       S
                                       ⧹
                                       
                                          
                                             V
                                          
                                          
                                             ′
                                          
                                       
                                       |
                                       ·
                                       Δ
                                    
                                 
                              
                           

First, note that ∣S⧹V′∣≕
                              t is the number of vertices in S that were deleted during the run of Algorithm 1. Let 
                                 
                                    D
                                    =
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          t
                                       
                                    
                                    )
                                 
                               be a sequence of these vertices, in the order in which they were deleted. We prove the claim by induction on i
                              =1,…,
                              t, by showing that 
                                 
                                    w
                                    (
                                    (
                                    S
                                    ∩
                                    
                                       
                                          V
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    ∪
                                    
                                       
                                          ⋃
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          i
                                       
                                    
                                    {
                                    
                                       
                                          v
                                       
                                       
                                          j
                                       
                                    
                                    }
                                    )
                                    ⩽
                                    w
                                    (
                                    S
                                    ∩
                                    
                                       
                                          V
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    +
                                    i
                                    ·
                                    Δ
                                 
                              .

For i
                              =1, we know that w((S
                              ∩
                              V′)∪{v
                              1})⩽
                              w(S
                              ∩
                              V′)+Δ, as 
                                 
                                    
                                       
                                          p
                                       
                                       
                                          
                                             
                                                G
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    <
                                    Δ
                                 
                              . Let us assume that the claim holds for i
                              −1, and consider i. At the time that vertex v
                              
                                 i
                               is deleted during the course of Algorithm 1, its remaining potential p(v
                              
                                 i
                              ) (line 8) in particular satisfies Δ>
                              p(v
                              
                                 i
                              )⩾
                              w(E
                              
                                 i
                              ), where 
                                 
                                    
                                       
                                          E
                                       
                                       
                                          i
                                       
                                    
                                    
                                    ≔
                                    
                                    {
                                    {
                                    
                                       
                                          v
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    v
                                    }
                                    :
                                    v
                                    ∈
                                    (
                                    S
                                    ∩
                                    
                                       
                                          V
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    ∪
                                    
                                       
                                          ⋃
                                       
                                       
                                          j
                                          =
                                          i
                                          +
                                          1
                                       
                                       
                                          t
                                       
                                    
                                    {
                                    
                                       
                                          v
                                       
                                       
                                          j
                                       
                                    
                                    }
                                    }
                                 
                              . Informally, E
                              
                                 i
                               consists of the edges that connect v
                              
                                 i
                               to those vertices in S which have not been deleted yet.

Thus, deleting vertex v
                              
                                 i
                               after v
                              1,…,
                              v
                              
                                 i−1 already have been deleted, imposes only an additional error of Δ, i.e.,
                                 
                                    
                                       w
                                       (
                                       (
                                       S
                                       ∩
                                       
                                          
                                             V
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                       ∪
                                       
                                          
                                             
                                                ⋃
                                             
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                i
                                             
                                          
                                       
                                       {
                                       
                                          
                                             v
                                          
                                          
                                             j
                                          
                                       
                                       }
                                       )
                                       ⩽
                                       w
                                       (
                                       (
                                       S
                                       ∩
                                       
                                          
                                             V
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                       ∪
                                       
                                          
                                             
                                                ⋃
                                             
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                i
                                                -
                                                1
                                             
                                          
                                       
                                       {
                                       
                                          
                                             v
                                          
                                          
                                             j
                                          
                                       
                                       }
                                       )
                                       +
                                       Δ
                                       ⩽
                                       w
                                       (
                                       S
                                       ∩
                                       
                                          
                                             V
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                       +
                                       (
                                       i
                                       -
                                       1
                                       )
                                       ·
                                       Δ
                                       +
                                       Δ
                                       =
                                       w
                                       (
                                       S
                                       ∩
                                       
                                          
                                             V
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                       +
                                       i
                                       ·
                                       Δ
                                       .
                                       
                                       □
                                    
                                 
                              
                           

threshold-based DkS-approximate pruning
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                
                                                Input: 
                                                   
                                                      k
                                                      ∈
                                                      N
                                                   
                                                , weighted graph G
                                                =(V,
                                                E,
                                                w) with 
                                                   
                                                      w
                                                      :
                                                      E
                                                      →
                                                      N
                                                      ,
                                                      S
                                                      ⊆
                                                      V
                                                   
                                                 with 
                                                   
                                                      |
                                                      S
                                                      |
                                                      =
                                                      k
                                                   
                                                , threshold 
                                                   
                                                      Δ
                                                      =
                                                      Δ
                                                      (
                                                      S
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                
                                                Output: G′=(V′,
                                                E′)⊆
                                                G
                                             
                                          
                                          
                                             1
                                                V′←
                                                V, E′←
                                                E, 
                                                   
                                                      T
                                                      ←
                                                      V
                                                      ⧹
                                                      S
                                                   
                                                ;
                                          
                                          
                                             2
                                                for 
                                                
                                                   v
                                                   ∈
                                                   T
                                                 
                                                do
                                             
                                          
                                          
                                             3
                                                
                                                
                                                   
                                                      p
                                                      (
                                                      v
                                                      )
                                                      ←
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            
                                                               
                                                                  v
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            ∈
                                                            N
                                                            (
                                                            v
                                                            )
                                                         
                                                      
                                                      w
                                                      (
                                                      {
                                                      v
                                                      ,
                                                      
                                                         
                                                            v
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      }
                                                      )
                                                   
                                                ;
                                          
                                          
                                             4
                                                end
                                             
                                          
                                          
                                             5
                                                while 
                                                
                                                   T
                                                   ≠∅ 
                                                do
                                             
                                          
                                          
                                             6
                                                choose vertex v
                                                ∈
                                                T;
                                          
                                          
                                             7
                                                
                                                T
                                                ←
                                                T⧹{v};
                                          
                                          
                                             8
                                                
                                                if 
                                                
                                                   p(v)<Δ 
                                                then
                                             
                                          
                                          
                                             9
                                                
                                                for 
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  v
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            ∈
                                                            N
                                                            (
                                                            v
                                                            )
                                                            ⧹
                                                            S
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             10
                                                
                                                
                                                p(v′)←
                                                p(v′)−
                                                w({v,
                                                v′});
                                          
                                          
                                             11
                                                
                                                
                                                T
                                                ←
                                                T
                                                ∪{v′};
                                          
                                          
                                             12
                                                
                                                
                                                E′←
                                                E′⧹{{v,
                                                v′}};
                                          
                                          
                                             13
                                                
                                                end
                                             
                                          
                                          
                                             14
                                                
                                                V′←
                                                V′⧹{v};
                                          
                                          
                                             15
                                                
                                                end
                                             
                                          
                                          
                                             16
                                                end
                                             
                                          
                                          
                                             17
                                                return 
                                                
                                                   G′=(V′,
                                                   E′)
                                             
                                          
                                       
                                    
                                 
                              
                           

Using Lemma 3, we are now ready to prove that the subgraph remaining after a run of Algorithm 1 still contains a 
                           
                              
                                 
                                    
                                       1
                                       +
                                       
                                          
                                             1
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        -approximate solution for the DkS problem.
                           Theorem 4
                           
                              Let G
                              
                              =
                              
                              (V,
                              
                              E,
                              
                              w) with ∣V∣
                              =
                              
                              n, let 
                              
                                 
                                    w
                                    :
                                    E
                                    →
                                    N
                                    ,
                                    
                                    k
                                    ∈
                                    N
                                 
                              
                              , and 
                              
                                 
                                    S
                                 
                               
                              a k-vertex sequence in G with threshold Δ. Then 
                              
                                 Algorithm 1 
                              computes a graph G′
                              =
                              
                              (V′,
                              
                              E′)
                              ⊆
                              G which contains a 
                              
                                 
                                    
                                       
                                          
                                             1
                                             +
                                             
                                                
                                                   1
                                                
                                                
                                                   k
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              -approximate solution for the DkS problem.
                           

Let (V
                              
                                 O
                              ,
                              E
                              
                                 O
                              ) be an optimal induced subgraph on k vertices for the DkS problem on graph G. Further, let 
                                 
                                    (
                                    S
                                    ,
                                    
                                       
                                          E
                                       
                                       
                                          S
                                       
                                    
                                    )
                                 
                               be the induced subgraph for 
                                 
                                    S
                                    =
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          k
                                       
                                    
                                    )
                                 
                              . Finally, let (V
                              
                                 C
                              ,
                              E
                              
                                 C
                              ) be an optimal DkS vertex set for the subgraph G′=(V′,
                              E′)⊆
                              G.

If V
                              
                                 O
                              
                              ⊆
                              V′, we have w(V
                              
                                 O
                              )=
                              w(V
                              
                                 C
                              ), and are done. Otherwise there is a set V
                              
                                 D
                              
                              =
                              V
                              
                                 O
                              ⧹V′≠∅ of t vertices that were pruned. By Lemma 3, we lose at most total edge weight t
                              ·Δ by removing these vertices from V
                              
                                 O
                              , i.e., w(V
                              
                                 O
                              ⧹V
                              
                                 D
                              )⩾
                              w(V
                              
                                 O
                              )−
                              tΔ. Let further 
                                 
                                    S
                                    ⧹
                                    
                                       
                                          V
                                       
                                       
                                          O
                                       
                                    
                                    =
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                l
                                             
                                          
                                       
                                    
                                    )
                                 
                              , where j
                              
                                 s
                              
                              <
                              j
                              
                                 s′ for s
                              <
                              s′. We know that 
                                 
                                    
                                       
                                          V
                                       
                                       
                                          D
                                       
                                    
                                    ⊆
                                    
                                       
                                          V
                                       
                                       
                                          O
                                       
                                    
                                    ⧹
                                    S
                                 
                               and therefore 
                                 
                                    l
                                    =
                                    |
                                    S
                                    ⧹
                                    
                                       
                                          V
                                       
                                       
                                          O
                                       
                                    
                                    |
                                    =
                                    |
                                    
                                       
                                          V
                                       
                                       
                                          O
                                       
                                    
                                    ⧹
                                    S
                                    |
                                    ⩾
                                    |
                                    
                                       
                                          V
                                       
                                       
                                          D
                                       
                                    
                                    |
                                    =
                                    t
                                 
                              .

Then we have 
                                 
                                    {
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                t
                                             
                                          
                                       
                                    
                                    }
                                    ⊆
                                    (
                                    
                                       
                                          V
                                       
                                       
                                          O
                                       
                                    
                                    ⧹
                                    
                                       
                                          V
                                       
                                       
                                          D
                                       
                                    
                                    )
                                    ∪
                                    {
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                t
                                             
                                          
                                       
                                    
                                    }
                                 
                               and 
                                 
                                    {
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                t
                                                -
                                                1
                                             
                                          
                                       
                                    
                                    }
                                    ⊆
                                    S
                                    ⧹
                                    {
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                t
                                             
                                          
                                       
                                    
                                    }
                                 
                              . Lemma 2 applied to the sequence 
                                 
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                t
                                                -
                                                1
                                             
                                          
                                       
                                    
                                    )
                                 
                               (with threshold 
                                 
                                    Δ
                                    (
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                t
                                                -
                                                1
                                             
                                          
                                       
                                    
                                    )
                                    )
                                    ⩾
                                    Δ
                                    (
                                    S
                                    )
                                    =
                                    Δ
                                 
                              ) yields
                                 
                                    
                                       w
                                       (
                                       (
                                       
                                          
                                             V
                                          
                                          
                                             O
                                          
                                       
                                       ⧹
                                       
                                          
                                             V
                                          
                                          
                                             D
                                          
                                       
                                       )
                                       ∪
                                       {
                                       
                                          
                                             v
                                          
                                          
                                             
                                                
                                                   j
                                                
                                                
                                                   1
                                                
                                             
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             
                                                
                                                   j
                                                
                                                
                                                   t
                                                
                                             
                                          
                                       
                                       }
                                       )
                                       ⩾
                                       w
                                       (
                                       (
                                       
                                          
                                             V
                                          
                                          
                                             O
                                          
                                       
                                       ⧹
                                       
                                          
                                             V
                                          
                                          
                                             D
                                          
                                       
                                       )
                                       ∪
                                       {
                                       
                                          
                                             v
                                          
                                          
                                             
                                                
                                                   j
                                                
                                                
                                                   1
                                                
                                             
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             
                                                
                                                   j
                                                
                                                
                                                   t
                                                   -
                                                   1
                                                
                                             
                                          
                                       
                                       }
                                       )
                                       ⩾
                                       w
                                       (
                                       
                                          
                                             V
                                          
                                          
                                             O
                                          
                                       
                                       )
                                       -
                                       t
                                       Δ
                                       +
                                       (
                                       t
                                       -
                                       1
                                       )
                                       Δ
                                       =
                                       w
                                       (
                                       
                                          
                                             V
                                          
                                          
                                             O
                                          
                                       
                                       )
                                       -
                                       Δ
                                       .
                                    
                                 
                              The worst possible error is the additive absolute error of Δ. Note that
                                 
                                    
                                       (
                                       
                                          
                                             V
                                          
                                          
                                             O
                                          
                                       
                                       ⧹
                                       
                                          
                                             V
                                          
                                          
                                             D
                                          
                                       
                                       )
                                       ∪
                                       {
                                       
                                          
                                             v
                                          
                                          
                                             
                                                
                                                   j
                                                
                                                
                                                   1
                                                
                                             
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             
                                                
                                                   j
                                                
                                                
                                                   t
                                                
                                             
                                          
                                       
                                       }
                                       ⊆
                                       
                                          
                                             V
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                    
                                 
                              and thus w(V
                              
                                 C
                              )⩾
                              w(V
                              
                                 O
                              )−Δ. As w(V
                              
                                 C
                              )⩾
                              k
                              ·Δ, the relative error is bounded above by 
                                 
                                    (
                                    1
                                    +
                                    
                                       
                                          1
                                       
                                       
                                          k
                                       
                                    
                                    )
                                 
                              , which proves the claim. □

As a byproduct, in the proof of Theorem 4, we showed that an optimal solution for the DkS problem may only use at most one vertex contributing less than the threshold. If a solution contains such a set of ‘bad’ vertices, all but one can be replaced by a set of vertices contributing at least Δ in total edge weight each, recall Lemma 2.
                           Corollary 5
                           
                              Let G
                              
                              =
                              
                              (V,
                              
                              E,
                              
                              w) with ∣V∣
                              =
                              
                              n, let 
                              
                                 
                                    w
                                    :
                                    E
                                    →
                                    N
                                    ,
                                    
                                    k
                                    ∈
                                    N
                                 
                              
                              , let Δ be the threshold of a k-vertex sequence in G, and let V
                              
                                 O
                               
                              be the optimal solution for the DkS problem (and G
                              
                                 O
                              
                              
                              =
                              
                              (V
                              
                                 O
                              
                              ,
                              
                              E
                              
                                 O
                              
                              ) its induced subgraph). Then there is at most one vertex v
                              ∈
                              V
                              
                                 O
                               
                              with 
                              
                                 
                                    
                                       
                                          p
                                       
                                       
                                          
                                             
                                                G
                                             
                                             
                                                O
                                             
                                          
                                       
                                    
                                    (
                                    v
                                    )
                                    <
                                    Δ
                                 
                              
                              .
                           

Finally, let us briefly turn to the running time of Algorithm 1.
                           Theorem 6
                           
                              There is an implementation of 
                              
                                 Algorithm 1 
                              in O(m
                              
                              +
                              
                              n) in the arithmetic model of computation.
                           

The initialization of the potentials in lines 2–4 is possible in O(m
                              +
                              n) in the arithmetic model of computation, as each edge only contributes to the potentials of its two vertices. Further, T starts with n
                              −
                              k vertices, and during the algorithm, at most m edges are removed as a result of losing one of its vertices. Due to this, the while-loop (lines 5–16) is iterated at most n
                              −
                              k
                              +
                              m times. Thus, the set operations in lines 6, 7 and 14 and the comparison in line 8 are each only performed at most n
                              −
                              k
                              +
                              m times.

The for-loop in lines 9–12 is only performed at most m times during a run of the algorithm, initiated by the deletion of an edge. It consists of a single subtraction, and two set operations. This proves the claim.□

For the sake of a simple notation, we used a simplified definition of the potential in our proofs and in Algorithm 1. In fact, a better way to define the potential of vertices is to only count the k
                        −1 largest incident edges. Note that we then have to invest additional effort to identify whether the removed edge was one of the k
                        −1 largest ones or not. This information also has to be updated. In practice, this extra effort is worthwhile, as it allows for the deletion of more vertices, while the approximation ratio is maintained. In many cases, it is a much better (i.e., lower) estimate for how much this vertex can contribute to the total edge weight of an induced k-vertex subgraph in a best-case.

In this section, we showed that – given a vertex sequence in a graph with a threshold Δ – one can efficiently prune vertices from the graph which contribute at most Δ to the total edge weight of an induced k-subgraph, such that the reduced graph still contains a 
                           
                              
                                 
                                    
                                       1
                                       +
                                       
                                          
                                             1
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        -approximation for the DkS problem.

By combining threshold-based pruning with an exact solution algorithm in a single framework, we obtain a (non-polynomial time) algorithm for the DkS problem with approximation error at most 
                           
                              (
                              1
                              +
                              
                                 
                                    1
                                 
                                 
                                    k
                                 
                              
                              )
                           
                         in the form of Algorithm 2. We determine a vertex sequence and a corresponding threshold, and use these in an application of Algorithm 1, to reduce the size of the graph G before entering a traditional branch-and-cut algorithm or solving a direct quadratic model of the DkS problem. Note that it suffices to pass the vertex set of sequence 
                           
                              S
                           
                         as input for Algorithm 1.
                           Algorithm 2
                           
                              
                                 
                                    (
                                    1
                                    +
                                    
                                       
                                          1
                                       
                                       
                                          k
                                       
                                    
                                    )
                                 
                              -approximate DkS 
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                
                                                Input: 
                                                   
                                                      k
                                                      ∈
                                                      N
                                                   
                                                , weighted graph G
                                                =(V,
                                                E,
                                                w) with 
                                                   
                                                      w
                                                      :
                                                      E
                                                      →
                                                      N
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                
                                                Output: k-vertex set S′ which is a 
                                                   
                                                      
                                                         
                                                            
                                                               1
                                                               +
                                                               
                                                                  
                                                                     1
                                                                  
                                                                  
                                                                     k
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                -DkS approximation for G
                                             
                                          
                                          
                                             1construct a k-vertex sequence 
                                                   
                                                      S
                                                      ⊆
                                                      V
                                                   
                                                 with threshold 
                                                   
                                                      Δ
                                                      =
                                                      Δ
                                                      (
                                                      S
                                                      )
                                                   
                                                ;
                                          
                                          
                                             2perform Algorithm 1 for 
                                                   
                                                      (
                                                      G
                                                      ,
                                                      S
                                                      ,
                                                      Δ
                                                      )
                                                   
                                                 to obtain G′=(V′,
                                                E′)⊆
                                                G;
                                          
                                          
                                             3solve the DkS problem exactly for G′ directly to obtain S′⊆
                                                V′;
                                          
                                          
                                             4return S′;
                                          
                                       
                                    
                                 
                              
                           


                              Let G
                              
                              =
                              
                              (V,
                              
                              E,
                              
                              w) and let 
                              
                                 
                                    w
                                    :
                                    E
                                    →
                                    N
                                    ,
                                    k
                                    ∈
                                    N
                                 
                              
                              . Then 
                              
                                 Algorithm 2 
                              computes a 
                              
                                 
                                    
                                       
                                          
                                             1
                                             +
                                             
                                                
                                                   1
                                                
                                                
                                                   k
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              -approximation for the DkS problem.
                           

In line 3, the algorithm solves the DkS problem exactly for the reduced graph G′, which implies that it suffices to know that G′ still contains a 
                                 
                                    
                                       
                                          
                                             1
                                             +
                                             
                                                
                                                   1
                                                
                                                
                                                   k
                                                
                                             
                                          
                                       
                                    
                                 
                              -approximate solution. Thus the claim follows by Theorem 4. □

Generally, the running time of the algorithm is dominated by this exact solution of the problem for the reduced graph in line 3, and thus it depends greatly on the size of the threshold as computed in line 1. The next section is dedicated to how to find a provably optimal threshold in polynomial time.

In this section, we devise an algorithm for the construction of a vertex sequence with optimal threshold. Consider Algorithm 3, which describes the approach in pseudocode.

The algorithm begins by adding the largest edge in the graph to the sequence 
                        
                           S
                        
                      (line 1). For all vertices which are not covered by the sequence, we compute the ‘
                        
                           S
                        
                     -potential’ p(i) (lines 2–4). This value represents the difference 
                        
                           w
                           (
                           S
                           ∪
                           {
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                           }
                           )
                           -
                           w
                           (
                           S
                           )
                        
                     . Then, in lines 5–7, we compute the 
                        
                           S
                        
                     -potentials p(i,
                     j), which represent the differences 
                        
                           w
                           (
                           S
                           ∪
                           {
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 v
                              
                              
                                 j
                              
                           
                           }
                           )
                           -
                           w
                           (
                           S
                           )
                        
                     . This value is the sum of the potentials p(i), p(j) and of w({v
                     
                        i
                     ,
                     v
                     
                        j
                     }).

In the main while-loop (lines 8–27), we iteratively add vertices to 
                        
                           S
                        
                     . To do so, we find the vertex v
                     
                        i
                      with highest 
                        
                           S
                        
                     -potential p(i) and the pair of vertices v
                     
                        j
                     , v
                     
                        l
                      with maximal p(j,
                     l) (lines 9–10). If v
                     
                        i
                      contributes more potential than 
                        
                           
                              
                                 1
                              
                              
                                 2
                              
                           
                           p
                           (
                           j
                           ,
                           l
                           )
                        
                     , we append v
                     
                        i
                      to the end of the sequence and update the potentials of the other vertices 
                        
                           V
                           ⧹
                           S
                        
                      according to the edges incident with v
                     
                        i
                      (lines 12–17).

Else, i.e., if appending v
                     
                        j
                      and v
                     
                        l
                      yields at least twice the potential of p(i), we instead add these two to the end of the sequence. When appending v
                     
                        i
                     , v
                     
                        j
                      to 
                        
                           S
                        
                     , it does not matter whether v
                     
                        i
                      or v
                     
                        j
                      is added first. Again, the potentials of the other vertices 
                        
                           V
                           ⧹
                           S
                        
                      are updated according to the edges incident with the vertices which have been added to 
                        
                           S
                        
                      (lines 18–23). In both cases, we also update the joint potential of all pairs of vertices not in 
                        
                           S
                        
                      (lines 24–26).

Note that by comparing the addition of a best single vertex with that of a best pair of vertices, the operations in the main loop are tailored towards providing a greedy currently-best value δ
                     
                        i
                      in the constructed sequence.

After leaving the while-loop, the sequence 
                        
                           S
                        
                      contains either k or k
                     −1 vertices. If it contains k vertices, we are done. Otherwise, we add a final vertex, best with respect to p(i) (lines 28–31). The sequence 
                        
                           S
                        
                      and threshold Δ are returned.
                        Algorithm 3
                        max-threshold k-potential set 
                              
                                 
                                    
                                    
                                       
                                          
                                             
                                             
                                             Input: 
                                                
                                                   k
                                                   ∈
                                                   N
                                                
                                             , weighted graph G
                                             =(V,
                                             E,
                                             w) with 
                                                
                                                   w
                                                   :
                                                   E
                                                   →
                                                   N
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                             
                                             Output: vertex sequence 
                                                
                                                   S
                                                
                                             , threshold Δ
                                       
                                       
                                          1find maximum-weight edge e
                                             1
                                             ={v
                                             
                                                i
                                             ,
                                             v
                                             
                                                j
                                             }∈
                                             E, 
                                                
                                                   S
                                                   ←
                                                   (
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                   )
                                                   ,
                                                   
                                                   Δ
                                                   ←
                                                   
                                                      
                                                         1
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   w
                                                   (
                                                   
                                                      
                                                         e
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   )
                                                
                                             ;
                                       
                                       
                                          2
                                             for 
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         ∈
                                                         V
                                                         ⧹
                                                         S
                                                      
                                                      
                                                         ̲
                                                      
                                                   
                                                
                                              
                                             do
                                          
                                       
                                       
                                          3
                                             
                                             
                                                
                                                   p
                                                   (
                                                   i
                                                   )
                                                   ←
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         v
                                                         ∈
                                                         S
                                                      
                                                   
                                                   w
                                                   (
                                                   {
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   v
                                                   }
                                                   )
                                                
                                             ;
                                       
                                       
                                          4
                                             end
                                          
                                       
                                       
                                          5
                                             for 
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               j
                                                            
                                                         
                                                         ∈
                                                         V
                                                         ⧹
                                                         S
                                                         
                                                         with
                                                         
                                                         i
                                                         <
                                                         j
                                                      
                                                      
                                                         ̲
                                                      
                                                   
                                                
                                              
                                             do
                                          
                                       
                                       
                                          6
                                             
                                             p(i,
                                             j)←
                                             p(i)+
                                             p(j)+
                                             w({v
                                             
                                                i
                                             ,
                                             v
                                             
                                                j
                                             };
                                       
                                       
                                          7
                                             end
                                          
                                       
                                       
                                          8
                                             while 
                                             
                                                
                                                   
                                                      
                                                         |
                                                         S
                                                         |
                                                         ⩽
                                                         k
                                                         -
                                                         2
                                                      
                                                      
                                                         ̲
                                                      
                                                   
                                                
                                              
                                             do
                                          
                                       
                                       
                                          9
                                             find 
                                                
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ∈
                                                   V
                                                   ⧹
                                                   S
                                                
                                              with maximal p(i);
                                       
                                       
                                          10
                                             find 
                                                
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         l
                                                      
                                                   
                                                   ∈
                                                   V
                                                   ⧹
                                                   S
                                                
                                              with j
                                             <
                                             l, with maximal p(j,
                                             l);
                                       
                                       
                                          11
                                             Δ1
                                             ←
                                             p(i), 
                                                
                                                   
                                                      
                                                         Δ
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   ←
                                                   
                                                      
                                                         1
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   p
                                                   (
                                                   j
                                                   ,
                                                   l
                                                   )
                                                
                                             ;
                                       
                                       
                                          12
                                             
                                             if 
                                             Δ1
                                                >Δ2
                                              
                                             then
                                          
                                       
                                       
                                          13
                                             
                                             
                                                
                                                   S
                                                   ←
                                                   S
                                                   ∪
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             , Δ←min{Δ,Δ1};
                                       
                                       
                                          14
                                             
                                             for 
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               i
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         ∈
                                                         V
                                                         ⧹
                                                         S
                                                      
                                                      
                                                         ̲
                                                      
                                                   
                                                
                                              
                                             do
                                          
                                       
                                       
                                          15
                                             
                                             
                                             
                                                
                                                   p
                                                   (
                                                   
                                                      
                                                         i
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                   ←
                                                   p
                                                   (
                                                   
                                                      
                                                         i
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                   +
                                                   w
                                                   (
                                                   {
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         
                                                            
                                                               i
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                   }
                                                   )
                                                
                                             ;
                                       
                                       
                                          16
                                             
                                             end
                                          
                                       
                                       
                                          17
                                             
                                             end
                                          
                                       
                                       
                                          18
                                             
                                             else
                                          
                                       
                                       
                                          19
                                             
                                             
                                                
                                                   S
                                                   ←
                                                   S
                                                   ∪
                                                   {
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                   }
                                                
                                             , Δ←min{Δ,Δ2};
                                       
                                       
                                          20
                                             
                                             for 
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               i
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         ∈
                                                         V
                                                         ⧹
                                                         S
                                                      
                                                      
                                                         ̲
                                                      
                                                   
                                                
                                              
                                             do
                                          
                                       
                                       
                                          21
                                             
                                             
                                             
                                                
                                                   p
                                                   (
                                                   
                                                      
                                                         i
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                   ←
                                                   p
                                                   (
                                                   
                                                      
                                                         i
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                   +
                                                   w
                                                   (
                                                   {
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         
                                                            
                                                               i
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                   }
                                                   )
                                                   +
                                                   w
                                                   (
                                                   {
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         
                                                            
                                                               i
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                   }
                                                   )
                                                
                                             ;
                                       
                                       
                                          22
                                             
                                             end
                                          
                                       
                                       
                                          23
                                             
                                             end
                                          
                                       
                                       
                                          24
                                             
                                             for 
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               
                                                                  
                                                                     i
                                                                  
                                                                  
                                                                     ′
                                                                  
                                                               
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               
                                                                  
                                                                     j
                                                                  
                                                                  
                                                                     ′
                                                                  
                                                               
                                                            
                                                         
                                                         ∈
                                                         V
                                                         ⧹
                                                         S
                                                         
                                                         with
                                                         
                                                         
                                                            
                                                               i
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         <
                                                         
                                                            
                                                               j
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                      
                                                         ̲
                                                      
                                                   
                                                
                                              
                                             do
                                          
                                       
                                       
                                          25
                                             
                                             
                                                
                                                   p
                                                   (
                                                   
                                                      
                                                         i
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         j
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                   ←
                                                   p
                                                   (
                                                   
                                                      
                                                         i
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                   +
                                                   p
                                                   (
                                                   
                                                      
                                                         j
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                   +
                                                   w
                                                   (
                                                   {
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         
                                                            
                                                               i
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         
                                                            
                                                               j
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                   }
                                                   )
                                                
                                             ;
                                       
                                       
                                          26
                                             
                                             end
                                          
                                       
                                       
                                          27
                                             end
                                          
                                       
                                       
                                          28
                                             if 
                                             
                                                
                                                   
                                                      
                                                         |
                                                         S
                                                         |
                                                         =
                                                         k
                                                         -
                                                         1
                                                      
                                                      
                                                         ̲
                                                      
                                                   
                                                
                                              
                                             then
                                          
                                       
                                       
                                          29find 
                                                
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ∈
                                                   V
                                                   ⧹
                                                   S
                                                
                                              with maximal p(i);
                                       
                                       
                                          30
                                             
                                             
                                                
                                                   S
                                                   ←
                                                   S
                                                   ∪
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          31
                                             end
                                          
                                       
                                       
                                          32
                                             return 
                                             
                                                
                                                   
                                                      
                                                         S
                                                         ,
                                                         
                                                         Δ
                                                      
                                                      
                                                         ̲
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Let us now prove that Algorithm 3 in fact computes an optimal threshold for a given graph.
                        Theorem 8
                        
                           Let 
                           
                              
                                 k
                                 ∈
                                 N
                              
                           
                           , and let G
                           
                           =
                           
                           (V,
                           
                           E,
                           
                           w) be a weighted graph. Then 
                           
                              Algorithm 3 
                           computes a sequence 
                           
                              
                                 
                                    
                                       S
                                    
                                    
                                       g
                                    
                                 
                              
                            
                           of k vertices with maximal threshold among all sequences of k vertices from the graph.
                        

Let 
                              
                                 
                                    
                                       S
                                    
                                    
                                       o
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       w
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       k
                                    
                                 
                                 )
                              
                            be a sequence with maximal threshold 
                              
                                 Δ
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       o
                                    
                                 
                                 )
                              
                           , and 
                              
                                 
                                    
                                       S
                                    
                                    
                                       g
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       k
                                    
                                 
                                 )
                              
                            and 
                              
                                 Δ
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       g
                                    
                                 
                                 )
                              
                            the sequence and threshold computed by Algorithm 3. Suppose 
                              
                                 Δ
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       g
                                    
                                 
                                 )
                                 <
                                 Δ
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       o
                                    
                                 
                                 )
                              
                            and let i
                           ∈{1,…,
                           k
                           −1} be the minimal index such that 
                              
                                 
                                    
                                       δ
                                    
                                    
                                       i
                                    
                                    
                                       g
                                    
                                 
                                 <
                                 Δ
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       o
                                    
                                 
                                 )
                              
                            and 
                              
                                 S
                                 =
                                 (
                                 
                                    
                                       w
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             1
                                          
                                       
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             t
                                          
                                       
                                    
                                 
                                 )
                              
                            the sequence obtained from 
                              
                                 
                                    
                                       S
                                    
                                    
                                       o
                                    
                                 
                              
                            by removing all occurences of v
                           
                              j
                            for all j
                           ∈{1,…,
                           i
                           −1}. Note that 
                              
                                 S
                              
                            contains at least two vertices. Then 
                              
                                 
                                    
                                       S
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       w
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 )
                              
                            is a subsequence of 
                              
                                 
                                    
                                       S
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       -
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             1
                                          
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 )
                              
                            and therefore 
                              
                                 
                                    
                                       δ
                                    
                                    
                                       i
                                    
                                    
                                       2
                                    
                                 
                                 ⩾
                                 
                                    
                                       δ
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             2
                                          
                                       
                                       -
                                       1
                                    
                                    
                                       1
                                    
                                 
                                 ⩾
                                 Δ
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       o
                                    
                                 
                                 )
                              
                           , which is a contradiction to the greedily-best choice of vertices in the while loop of the algorithm. □

Next, let us consider the running time of an implementation of the algorithm along the lines of the given pseudocode.
                        Theorem 9
                        
                           There is an implementation of 
                           
                              Algorithm 3 
                           in O(kn
                           
                              2
                           
                           ) in the arithmetic model of computation.
                        

Finding the largest edge in the graph and computing the potentials of the vertices can be done in O(m
                           +
                           n), as each edge has to be considered at most twice. Initialization of the potential of the edges is in O(n
                           2), as each pair of vertices and each edge have to be considered at most once.

Further, each iteration of the main while-loop can be done in O(n
                           2): Finding the maximal p(i) can be done in O(n), finding the maximal p(i,
                           j) can be done in O(n
                           2), and the potential-updates are possible in O(n
                           2). In each iteration, at least one vertex is appended to the sequence. Thus the while-loop is iterated at most k
                           −1 times resulting in time O((k
                           −1)n
                           2) for the operations of the while loop. Appending a final vertex to the sequence is possible in O(n).

In total, the running time is dominated by the initialization (O(n
                           2)) and the while-loop (O((k
                           −1)n
                           2)), yielding a total running time of O(kn
                           2).□

Let us conclude this section by taking a closer look at the set of vertices in the sequence 
                        
                           S
                        
                      computed by Algorithm 3. 
                        
                           S
                        
                      actually is a k-approximation for the DkS problem by itself: By definition of the threshold Δ, it induces a total edge weight of at least (k
                     −1)Δ. Noting that 
                        
                           Δ
                           ⩽
                           
                              
                                 1
                              
                              
                                 2
                              
                           
                           
                              
                                 max
                              
                              
                                 e
                                 ∈
                                 E
                              
                           
                           w
                           (
                           e
                           )
                        
                     , and that a graph on k vertices has at most 
                        
                           
                              
                                 
                                    
                                       
                                          
                                             k
                                          
                                       
                                       
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                           
                        
                      edges yields this lower bound.

Further, it is easy to see that this bound is tight: Suppose k is odd and the graph consists of a matching of size k
                     −1 with maximal edge weights equal to 1, and a complete subgraph of size k with all edges having edge weight 1, as well. Algorithm 3 then may choose the matching plus an arbitrary final vertex for a total weight of 
                        
                           
                              
                                 k
                                 -
                                 1
                              
                              
                                 2
                              
                           
                        
                     , while an optimal solution to the problem is the complete subgraph with weight 
                        
                           
                              
                                 
                                    
                                       
                                          
                                             k
                                          
                                       
                                       
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                           
                        
                     . Of course, such an extreme case typically does not arise in practice, and an approximation error of k for the DkS problem is trivial to achieve – just collect the vertices of the largest 
                        
                           ⌊
                           
                              
                                 k
                              
                              
                                 2
                              
                           
                           ⌋
                        
                      edges.

By Theorems 8 and 9, Algorithm 3 is an efficient way of computing a provably optimal threshold as necessary in line 1 of Algorithm 2. In the following empiric studies, we always performed Algorithm 2 using Algorithm 3 as a subroutine. For graphs with properties like in our practical application, this approach works very well, as we will see.

We applied Algorithm 2 on a total of 62 forestry regions in Northern Bavaria. The graphs G
                     =(V,
                     E) constructed as described in Section 1.2 range from n
                     =64 to 684 vertices. They share an interesting property in that their number of edges typically is bounded above by 10n. This small number comes from the special way in which they are constructed:

Recall that there is an edge in between two vertices in our graph if the two owners corresponding to these vertices have lots that share a common boundary. The lot structure of forestry regions allows us to model these neighbor-relations as a planar graph (from which the graph in question can be derived by identification of vertices). To do so, each lot is represented by its center of gravity (or any arbitrary point in its interior), and there is an edge in between two such points if the corresponding lots share a common boundary. Let s be the number of lots in the region. This planar graph then contains at most 3s
                     −6 edges, which also is an upper bound on the number of edges ∣E∣.

The number s is indirectly connected to ∣V∣=
                     n, as in most regions about 30–40% of the lots are owned by owners that only have this single lot. On average for all regions, each owner has about 5 lots, i.e., 
                        
                           n
                           ≈
                           
                              
                                 1
                              
                              
                                 5
                              
                           
                           s
                        
                     . Note further that many neighborhood relations are in between the same owners, so that the lengths of these boundaries contribute to the weight of a single edge, and do not induce multiple ones. In practice, one arrives at the typical number of edges mentioned above. Recall that, by this construction, this graph does not satisfy the triangle inequality.

We performed Algorithm 2 for these graphs on a standard laptop.
                        2
                        The laptop uses Windows 7, 64 bit, 4gigabyte of RAM and an Intel Core i7-2630QM CPU at 2.00/2.00gigahertz. The basic framework for the algorithm was implemented in Java 1.6.
                     
                     
                        2
                      
                     Fig. 2
                      depicts the result of such a DkS approximation for k
                     =10, by only showing the selected k owners in color. The figure depicts an expected result: Some of the selected owners have very large and many lots, e.g., the brown or purple one. These are complemented by owners that have a long common boundary with these owners’ lots, as well as lots with bad shape. Good examples for this are the yellow and green owner (in the center of the figure, and to the upper right hand, respectively).

In these computations, the running time of our threshold-based pruning step never exceeded one second. In this context, recall the running time bound of O(kn
                     2) for our threshold algorithm, which we apply to obtain threshold Δ.

In general, the total running time of Algorithm 2 depends almost solely on the final step, and thus on the number of vertices remaining after the pruning. In other words, it depends greatly on the size of the computed thresholds, put into relation against the number of vertices whose potential falls below these thresholds.

All of these vertices of low potential are pruned during a first iteration of Algorithm 1, and during the later iterations of the algorithm we then are also able to ‘rule out’ many of the vertices with a rather large original potential.

The key reason as to why this approach works so well for the graphs in our real-world application is depicted in Figs. 3 and 4
                     
                     . The black graph depicts the cumulative distribution of edge weights and potentials in a representative selection of regions, i.e., the percentage of edge weights (resp. potentials) less than or equal to edge weight w, respectively potential p. In Fig. 4, the corresponding threshold is illustrated by a black vertical line. A cumulative exponential distribution fitted to the data via a maximum likelihood estimator is shown in red and reveals a tight correspondence.

This ‘exponential character’ of the distribution of edge weights is a key feature for the success of our pruning approach. Even low thresholds with respect to the maximal potential already cut off a significant portion of the graphs. Recall also that due to the iterative nature of our pruning approach, many vertices whose potential in the original graph is much higher than the threshold can be removed at a later stage of the algorithm if their potential has decreased enough.

Therefore, in practice, we remove a lot more vertices than indicated by the black line in Fig. 4. For 55 of our 62 instances, using k
                     =10, the graph-size reduction steps performed in Algorithm 2 yielded a graph G′=(V′,
                     E′) for which our final exact computation terminated in at most one minute. For 13 of these 55 ‘successful’ instances, our pruning algorithms already reduced the final graph to vertex-size exactly k, so that the final step was not entered at all. In most other cases, we obtained a reduction of the number of vertices in between 90% and 95%.

When exceeding the running time of a minute (for the 7 remaining instances), we returned the greedy solution computed by Algorithm 3 for practical purposes. Even in these cases, the a posteriori approximation error was less than 2.5.


                     Table 1
                      sums up the reduction in the number of vertices of the graphs for 16 anonymized representative regions. n denotes the original number of owners and n
                     
                        P
                      the number of owners after the pruning step, m denotes the number of edges in the original graph, and m
                     
                        P
                      the number of edges in the induced subgraph after pruning. Note that for 14 of these 16 regions, we ended up with at most 48 vertices, so that the value of n
                     
                        P
                      was small enough for an exact solution of the problem for the reduced graph.

In conclusion, the empiric results exhibit that the special properties of the graphs derived from our forestry application allow our threshold-based approximation algorithm to solve the DkS problem with a very good approximation ratio for almost all of our instances, despite their very large number of vertices.

While for general graphs one cannot expect similar numbers, our pruning steps are computationally cheap, and may prove helpful in many applications. In general, the total running time is dominated by the solution of the reduced problem, for which a sophisticated implementation along the lines of state-of-the-art literature (see Section 1.2) is of central importance.

@&#REFERENCES@&#

