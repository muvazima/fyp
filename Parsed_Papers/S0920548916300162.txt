@&#MAIN-TITLE@&#Performance assessment and tuning for exchange of clinical documents cross healthcare enterprises

@&#HIGHLIGHTS@&#


               Highlight
               
                  
                     
                        
                           
                           We conducted performance testing to investigate the performance and limitations of this EHR/OpenXDS system.


                        
                        
                           
                           The performance testing was conducted for three use cases, EHR submissions, queries, and retrievals, based on the IHE XDS.b profile for EHR sharing.


                        
                        
                           
                           We retrieved the transaction logs and also monitored the consuming of hardware resources during the test cases execution to detect more details of the EHR/OpenXDS system's limitations.


                        
                        
                           
                           From the testing results, we provided tuning suggestions and future works for the following implementers/studies to keep improving the EHR/OpenXDS system.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Electronic health records (EHRs)

System interoperability

Integrating the healthcare enterprise (IHE)

Cross-enterprise document sharing (XDS.b)

Performance testing

OpenXDS

@&#ABSTRACT@&#


               
               
                  Background
                  To integrate electronic health records (EHRs) from diverse document sources across healthcare providers, facilities, or medical institutions, the IHE XDS.b profile can be considered as one of the solutions. In this research, we have developed an EHR/OpenXDS system which adopted the OpenXDS, an open source software that complied with the IHE XDS.b profile, and which achieved the EHR interoperability.
               
               
                  Objective
                  We conducted performance testing to investigate the performance and limitations of this EHR/OpenXDS system.
               
               
                  Methodology
                  The performance testing was conducted for three use cases, EHR submission, query, and retrieval, based on the IHE XDS.b profile for EHR sharing. In addition, we also monitored the depletion of hardware resources (including the CPU usage, memory usage, and network usage) during the test cases execution to detect more details of the EHR/OpenXDS system's limitations.
               
               
                  Results
                  In this EHR/OpenXDS system, the maximum affordable workload of the EHR submissions were 400 EHR submissions per hour, the DSA CPU usage was 20%, memory usage was 1380MB, the network usages were 0.286KB input and 7.58KB output per minute; the DPA CPU usage was 1%, memory usage was 1770MB, the network usages were 7.75KB input and 1.54KB output per minute; the DGA CPU usage was 24%, memory usage was 2130MB, the network usages were 1.3KB input and 0.174KB output per minute. The maximum affordable workload of the EHR queries were 600 EHR queries per hour, the DCA CPU usage was 66%, the memory usage was 1660MB, the network usages were 0.230KB input and 0.251KB output per minute; the DGA CPU usage was 1%, the memory usage was 1890MB, the network usages were 0.273KB input and 0.22KB output per minute. The maximum affordable workload of the EHR retrievals were 2000 EHR retrievals, the DCA CPU usage was 79%, the memory usage was 1730MB, the network usages were 19.55KB input and 1.12KB output per minute; the DPA CPU usage was 3.75%, the memory usage was 2310MB, and the network usages were 0.956KB input and 19.57KB output per minute.
               
               
                  Discussion and conclusion
                  From the research results, we suggest that future implementers who deployed the EHR/OpenXDS system should consider the following aspects. First, to ensure how many service volumes would be provided in the environment and then to adjust the hardware resources. Second, the IHE XDS.b profile is adopted by the SOAP (Simple Object Access Protocol) web service, it might then move onto the Restful (representational state transfer) web service which is more efficient than the SOAP web service. Third, the concurrency process ability should be added in the OpenXDS source code to improve the hardware usage more efficiently while processing the ITI-42, ITI-18, and ITI-43 transactions. Four, this research suggests that the work should continue on adjusting the memory usage for the modules of the OpenXDS thereby using the memory resource more efficiently, e.g., the memory configuration of the JVM (Java Virtual Machine), Apache Tomcat, and Apache Axis2. Fifth, to consider if the hardware monitoring would be required in the implementing environment. These research results provided some test figures to refer to, and it also gave some tuning suggestions and future works to continue improving the performance of the OpenXDS.
               
            

@&#INTRODUCTION@&#

Population aging and chronic disease have gradually grown throughout the world [1]. Electronic health records (EHRs) are integrated from different document sources across healthcare providers, hospitals, and/or medical institutions, and can be used to enhance disease management, facilitate communications, and improve the quality of care [1–3]. Naturally, the sharing and exchanging of the EHRs across healthcare facilities and institutions in different geographical regions are now attracting a lot of attention [4]. Integrating the healthcare enterprise (IHE) [5] is promoted by healthcare professionals and industries to improve the way computer systems in healthcare services share information through organizing the established standards, such as the DICOM and HL7, to comprehend specific clinical needs in supporting optimal patient care [5]. One of the IHE profiles, the cross-enterprise document sharing profile (XDS.b) [6], defines the generic architecture on how to share clinical information, provide a standards-based specification for managing the sharing of patient's EHRs between health enterprises, such as hospitals, physician's offices, and clinics. There are many third party open source systems released for implementation of the IHE XDS.b profile. Bruno [7] surveyed nine IHE XDS related open source systems, and found that the OpenXDS system, which is a server side implementation of the IHE XDS.b profile, provides the capacity of good implementation and easy deployment [8]. The OpenXDS has been widely used as a solution in many EHR integrating projects [9]. Several technical and consultant reports also suggested that the OpenXDS could be a component to use in the construction of the Health Information Exchange (HIE) related products [10], and an open source tool to address interoperability framework implementation needs [11]. In this research, we built the EHR system which adopted the OpenXDS as a component to achieve the IHE XDS.b based clinical document sharing. Due to the need for the exchange of the EHRs across health care facilities and/or institutions during their patient encounters, the high performance online transaction processing (OLTP) systems are critical. Therefore, it is very important to know the system performance and service quality of the EHR system based on the OpenXDS framework, or by the abbreviated name of EHR/OpenXDS system. However, there were only a few studies that have investigated the performance issues of the OpenXDS system for exchanges of the EHRs across different systems. Therefore, this research mainly focused on the evaluation of the performance and service quality of the EHR/OpenXDS systems and provided recommendations for system tuning and implementation strategies based on the evaluation.

@&#RELATED WORK@&#

Many studies have indicated that one of the most important factors of patients' satisfaction to the healthcare service is the waiting time [12–14]. Therefore, an inefficient healthcare information system prolongs the waiting period and thereby decreases the patients' satisfaction of the healthcare service. Moreover, an efficient healthcare information system cannot only improve the physicians' work efficiency, but also increases the physicians' acceptance of the healthcare information system. To understand the performance of the healthcare information system before being adopted into the healthcare environment is an important and required work. Thus, in this section, we review the performance testing of the web application for a healthcare information system, and the performance is then used to verify if the target system is fulfilling the specific performance goals from the users [15,16]. Generally speaking, at the beginning of the performance testing, the researchers will set up a benchmark for performance objectives to reflect the users' expectations and needs.

Performance failures happened due to the lack of performance considerations in the early stages of the system's development, and thereby instigated the system to be redesigned, and caused the cost overruns [16]. There are a lot of performance testing methods, such as implementing the Software Performance Engineering (SPE) methodology to develop the system, and then run the testing to achieve the performance goals [16]. To assess the diverse software systems, such as the web application system, the cloud based application, etc., some studies have developed different performance testing methods for these specific software systems [17–23]. However, this is mostly based on the load and stress testing. The goal of load testing is usually conducted to validate a systems reaction under both normal and anticipated peak load conditions. It is also used to distinguish the system service quality under certain workloads. The web application load testing helps to identify the maximum operating capacity of an application as well as any bottlenecks that might interfere when operating at capacity [23]. Stress testing is able to determine or validate the performance characteristics, or the behavior of the system, when subjected to either conditions beyond normal or peak loading conditions. Stress testing is also able to reveal the application bugs that surface only under high load conditions, identify the application's weak points, evaluate an application's behavior when it is pushed beyond normal or peak load conditions, and shows how the application behaves under extreme load conditions [22,23].

Many studies have used several performance objectives to describe the system performance characteristics, that include ‘request–response time’, ‘throughput’, ‘hardware resource utilization’, ‘workload’, and ‘scalability’ [20,24,25]. For example, a number of systematic performance testing approaches focus on the observation of the ‘request–response time’, ‘hardware resources utilization’, and ‘bottleneck’ under certain workloads. Therefore, the researchers can use these designed performance testing models to collect the testing results and then compare them with the performance goals. The study [16] states that the ‘request–response time’ estimation is a basic factor to validate the performance objective. For the web application system performance, many studies believe that the end-user web system quality awareness, also referred to as the web system QoE (Quality of Experience), is able to assess through the ‘request–response time’ [26,27]. If the request–response time of a web application system is inadequate, users may lose interest even if the function of the web application is correct [20]. Many scholars believe that the longer system waiting time caused dissatisfaction of the web application system, and the increased time the users have to wait for the web page to arrive (or transactions to be completed), the more dissatisfied they tended to become with the service [26,28]. As indicated in the previous studies [26,28,29], the request–response time of a web application system commonly accepted by web users is up to 15s. While the web application system request–response time that exceeds 15s can impede productivity, it may account for the longer waiting time to not only affect the satisfaction of the user to the web application system, but also decrease the staff's work efficiency and thereby affect the company's operations. Nonetheless, other studies have also proposed a different ideal request–response time, such as the three kinds of response-time limits [30], two seconds [26], etc. However, whilst we considered that the mechanism of the cross enterprise EHR exchange is complex, the performance goal of the request–response time of the EHR/OpenXDS system being set to 15s will be more appropriate.

The IHE XDS.b profile constrains the OASIS ebXML 3.0 standard in order to build a system to exchange the EHRs through the web services [31]. Referring to Fig. 1
                        , there are five actors and five transactions in the XDS.b profile. The Document Source Actor (DSA) submits a document set (with an episode of the EHRs) to the Document Repository Actor (DPA) through an ITI-41 transaction [32]. Once the DPA receives and processes the ITI-41 transaction, it registers the metadata of the episode of the EHRs to the Document Registry Actor (DGA) through an ITI-42 transaction [32]. The ITI-41 and ITI-42 transactions define how to embed the EHRs into the IHE XDS.b metadata message format and then transfer through the web service [6]. The Document Consumer Actor (DCA) supports two activities, one is the query on the metadata of the EHRs in the DGA through the ITI-18 transaction, and the other is the retrieval of the EHRs from the DPA through the ITI-43 transaction. When retrieving an episode of a patient's EHRs stored in the DPA, the DCA must query the DGA to find where the EHR is stored (the metadata) by initiating the ITI-18 first, and then by using the returned link to retrieve the EHR through the ITI-43. Finally, both the ITI-8 and the ITI-44 transactions are used to communicate the patients' identification information, corroborating patients' demographic data, and then modify or merge the key corroborating demographic data between the DGA and the Patient Identity Source Actor (PISA). The ITI-41, ITI-42, ITI-43, ITI-18, and ITI-44 are implemented through the Simple Object Access Protocol (SOAP) web service which has complied with the specific format of the XDS.b specification. The ITI-8 is implemented by the Lower Layer Protocol (LLP) with the HL7 V2.x messages.

To facilitate the implementation of the EHR system based on the IHE XDS.b profile, we adapt an open source software, the OpenXDS version 1.0.1, now abbreviated to the EHR/OpenXDS system. The OpenXDS is a java based web application and it mainly supports the DPA and DGA actors. The OpenXDS Repository/Registry is designed with three horizontal layers. On the top is a web service framework with security enforcement, followed by a message validation and repository business logics layer, and at the bottom is a pluggable DPA/DGA service layer [8]. The Apache Axis2 module [8,33,34] is implemented in the OpenXDS to process the SOAP message. We built the other two IHE XDS.b Actors (DSA and DCA), and also used the Apache Axis2 (client side) to transact with the DPA and the DGA in this research. An ideal application should provide the required functionality and performance for the users [22], to ensure that the functionality of the actors is working properly, as all the actors and transactional functions were validated through the Gazelle IHE Testing Tools [35], the Mesa Tools [36], and all the DSA, DCA and the OpenXDS (DPA, DGA) systems have passed the IHE-China Connectathon in March and September 2013 in Beijing, and have been proven to meet the IHE XDS.b” integrating profile.

The performance testing environment of our EHR/OpenXDS system was installed in a laboratory environment and described as in Fig. 2
                        . We used one physical machine (an AMD Operon(tm) Processor 6136 2.4GHz, 32GB RAM, 32 core), with a Microsoft Windows Server 2008 Hyper-V [37], to create and manage four virtual machines (VMs) in this performance testing environment. The VM-1 and the VM-2 were installed with 2GB RAM and 4 logical processors in each server, and installed in a Microsoft Server 2008 R2 64 bit operating system. The VM-3 and VM-4 were installed with 4GB RAM and 4 logical processors in each server, and installed in a Microsoft Server 2008 R2 64 bit operating system. The network connection among these VMs was a closed network with a 1GB bandwidth intranet hub. In our research, we mainly focused on the ITI-41, ITI-42, ITI-18, and ITI-43, transactions' performance (which were related to the EHR exchange), therefore, the PISA had not been deployed in this simulation environment. On the VM-3, the OpenXDS DPA was deployed on the Apache Tomcat 6 web application server (TWAS) with a JDK 6 (setting the heap size to 1GB), and an Oracle 11g database was installed as its database. The OpenXDS DGA was deployed on the VM-4, and the same software configurations as the VM-3 were settled on the VM-4 as well. The DSA and DCA were deployed on the VM-2. In order to automatically initiate the ITI-41, ITI-18, and ITI-43, requests fitting to the Poisson distribution, the Uncommons Maths Java API [38] was used on the DSA and DCA. All of the IHE XDS.b transactions were under the HTTPS secure connection. To record, trace, and monitor the application state and hardware usability during the performance testing, the software logger (Java Log4j loggers), and a hardware resource consuming monitoring software “CACTI” (version 0.8.8a) [39], have been used. The Java Log4j loggers were added in all the java classes of the DSA, DCA, DPA, and DGA, to record each transaction timestamp (including each request initiating and receiving timestamp, response initiating and receiving timestamp). Finally, the CACTI server was deployed on the VM-1 to monitor the hardware resource consuming of the VM-2, VM-3, and VM-4, during the execution of the test cases through the SNMP protocol. The monitored items included the CPU utilization, memory usage, and network traffic usage.

In order to recognize the quality of service under certain workloads, and to explore its maximum affordable service loading, the load testing is required. In this study, we conducted web application load testing on the EHR/OpenXDS system, as this allowed us to measure the request–response time, throughput rates, hardware resource-utilization, as well as identifying the maximum affordable workload of the target application [23]. However, before load testing, a threshold limit (the performance benchmark) should first be defined. Moving forward, we then start the test with a small number of workloads, and gradually increase them to the peak load. When reaching the threshold limit, we can reveal the maximum affordable workload, and then stop the testing. As indicated in studies [26,28,29], the request–response time of a web system commonly accepted by web users is up to 15s. Therefore, we set the threshold limit as 15s in our load testing.

As mentioned in Section 3.1, there are three use cases for sharing the EHRs across different systems: submission, query on metadata of the EHRs, and retrieval of the EHR. The EHR Submission involve the following activities, as shown in Fig. 3
                        .
                           
                              (1)
                              The DSA prepares the XDS.b metadata of the EHR and the EHR itself, which is encoded as a Base64 formatted document, then sends the message by invoking the ITI-41 SOAP web service on the DPA.

The DPA receives and parses the SOAP message from the ITI-41 transaction to get the EHR and the metadata, then deposits the EHR into the repository database.

The DPA sends the metadata of the EHR to the DGA through the ITI-42 transaction.

The acknowledgements of the EHR submissions and the metadata registration through the ITI-41 and ITI-42 transactions, respectively.

Let's the total time for submission of an EHR as TSubmission. Then TSubmission can be defined as:

TSubmission
                        =T1
                        + T2
                        +T3
                        +T4
                        +T5
                        +T6
                        +T7, where,
                           T1
                           
                           
                              the time for the DSA to send an ITI-41 SOAP message with a formatted EHR to the DPA through the ITI-41 transaction.

the time for the DPA to process the ITI-41 transaction, includes storing the EHR and preparing the SOAP message for the transaction ITI-42.

the time for the DPA to send the ITI-42 SOAP message to the DGA through an ITI-42 transaction.

the time for the DGA to process the ITI-42 transaction, includes storing the metadata of the EHR and preparing an acknowledgment message for the ITI-42 transaction.

the time for the DGA to send the ITI-42 acknowledgment message to the DPA through the ITI-42 transaction.

the time for the DPA to process the ITI-42 acknowledgment message and prepare an acknowledgment message for the ITI-41 transaction to the DSA through the ITI-41 transaction.

the time for the DPA to send the ITI-41 acknowledgment message to the DSA through the ITI-41 transaction.

Secondly, the EHR query involves the following activities, as shown in Fig. 4
                        .
                           
                              (1)
                              The DCA prepares the ITI-18 formatted SOAP EHR queries message, and then sends this message by invoking the ITI-18 SOAP web service on the DGA.

The DGA receives the ITI-18 SOAP message, processes the query message and executes the query.

The DGA packs the queried results in the ITI-18 SOAP acknowledgment message back to the DCA through the ITI-18 transaction.

Let's the total time for EHR query as TQuery
                        . Then TQuery can be defined as:

TQuery
                        =T1
                        +T2
                        +T3, where,
                           T1
                           
                           
                              the time for the DCA to send an ITI-18 SOAP message with the ITI-18 formatted query message to the DGA through the ITI-18 transaction.

the time for the DGA to process the ITI-18 query message and execute the query.

the time for the DGA to send the ITI-18 acknowledgment message to the DCA through the ITI-18 transaction.

Finally, the EHR retrieval includes the following activities, and the transaction sequence is as shown in Fig. 5
                        .
                           
                              (1)
                              The DCA prepares the ITI-43 formatted SOAP EHR retrievals message, and sends this message by invoking the ITI-43 SOAP web service on the DPA.

The DPA receives the ITI-43 SOAP message, processes the EHR retrievals message and retrieves the EHR.

The DPA packs the requested EHR in the ITI-43 SOAP acknowledgment message back to the DCA through the ITI-43 transaction.

Let's the total time for EHR retrieval as TRetrieval
                        . Then TRetrieval can be defined as:

TRetrieval
                        =T1
                        + T2
                        +T3, where,
                           T1
                           
                           
                              the time for the DCA to send an ITI-43 SOAP message with the ITI-43 formatted EHR retrieval message to the DPA through the ITI-43 transaction.

the time for the DPA to process the ITI-43 EHR retrieval message and execute the EHR retrieval.

the time for the DPA to send the ITI-43 acknowledgment message to the DCA through the ITI-43 transaction.

Three use cases (EHR submission, EHR query, and EHR retrieval) with their transactions were defined in the previous section. We conducted three test cases with different workloads to the system during one hour until the request–response time was beyond our threshold (15s), the details were described as follows, with Table 1
                         indicating the testing configurations.
                           
                              ●
                              On the EHR submission test case, the DSA submitted a submission set with one 50KB HL7 CDA R2 formatted EHR with different patient's ID in the XDS metadata. The size of test files can be adjusted to suit various cases. In Taiwan, most exchanged electronic health records were mainly plain text and had an average size of 50KB, and we set the EHR size to 50KB accordingly.

On the EHR query test case, the DCA queried the DGA with the patient's ID through the ITI-18 registry stored query (FindDocument, leafClass).

On the EHR retrieval, the DCA initiated the ITI-43 message to download the queried EHR by the ITI-18 returned download link.

The load testing helped us to find the service quality (the total request–response time, included the TSubmission, the TQuery, and the TRetrieval) under certain workloads, and also explored its maximum affordable workloads. After the test cases were conducted and the total service time was calculated, we obtained the performance measures as shown from Tables 2 to 4
                     
                     
                     , and Figs. 6 to 8
                     
                     
                     . The CACTI server monitored the DSA/DCA (VM-2), the DPA (VM-3), and the DGA (VM-4) server during the test cases executing simultaneously and results were shown in Tables 5 to 7
                     
                     
                     . We were able to understand the more details of the software bottleneck from these experiment results.

First of all, Table 2 described each of the testing results for EHR submission. As described in Section 4.1, the total time for EHR submission (TSubmission) was defined as: TSubmission
                        =T1
                        +T2
                        +T3
                        +T4
                        +T5
                        +T6
                        +T7. In Table 2, their test results were indicated in the corresponding column. The first column was the test number, the second column described how many submissions per hour, the columns from T1 to T7 indicated the average time consumed in each steps of the transaction, and the TSubmission was the summation of T1 to T7 (equal to the average request–response time of each test). Secondly, Fig. 6 used the stacked column chart to describe the results of Table 2 so as to compare them with the tests more easily. Finally, Table 5 showed the hardware resources consumption during the implementation of each test.

Referring to Table 2, the DSA submitted 400 documents per hour (Test 4), the TSubmission was about 15s. The DSA submitted 500 documents per hour (Test 5), the TSubmission was up to 20.276s. The results made it clear that the stable service ability of this system was approximately 400 EHR submissions per hour. Fig. 6 showed that the T1 and T4 apparently dominated the total processing time (TSubmissio) in every test, and the TSubmission of Test 1 spent more time than the Test 2, these findings would be discussed in Section 6. To discover what issues limited the process ability of T1 and T4, we compared Table 5 to the DSA, and the DGA system CPU usage rate apparently increased, but not to 100% until Test 5. In addition, the DSA system memory usage did not fill to capacity (2GB), the DPA system and the DGA system did not fill to capacity (4GB) either, with the processing time soaring, and this meant that the DPA and the DGA did not fully use the hardware resources, therefore, we will also further discuss this issue in Section 6. Discussion. Finally, Table 5 also indicated the network usage of Test 5, the input/output of the DSA were 0.366/9.7KB; the input/output of the DPA were 9.93/1.97KB; the input/output of the DGA were 1.65/0.227KB. The total network usages were under 1GB.

First of all, Table 3 described each of the testing results for EHR query. As described in Section 4.1, the total time for EHR query (TQuery) was defined as: TQuery
                        =T1
                        + T2
                        +T3. In Table 3, their test results were indicated in the corresponding column. The first column was the test number, the second column described how many queries per hour, the columns from T1 to T3 indicated the average time consumed in each steps of the transaction, and the TQuery was the summation of T1 to T3 (equal to the average request–response time of each test). Second, Fig. 7 used the stacked column chart to describe the results of Table 3 so as to compare them with the tests more easily. Finally, Table 6 showed the hardware resources consumption during the implementation of each test.


                        Table 3 indicated that the DCA submitted the query message to the DGA through the ITI-18 transaction within one hour. The TQuery was more than 15s from the 700Queries/h (Test 7). The results made it clear that the maximum affordable service workload of test case was 600 ITI-18 query transactions per hour. Fig. 7 showed that the T2 apparently dominated the total processing time (TQuery). Referring to Table 3 and compared to Table 6, the DCA system CPU usage was raised along with the increasing workloads. Test 7 in Table 3 indicated that the request–response time was greatly raised, but Test 7 of the DGA in Table 6 showed that the CPU usage and memory consumed did not apparently increase. In addition, the DGA system memory usage did not fill to capacity (4GB) either, but the processing time was soaring, and this meant that the DGA did not fully use the hardware resources, therefore, we will further discuss this issue in Section 6. Finally, Table 6 also indicated that the network usage of Test 7 input/output of the DCA was 0.2/0.214KB; the input/output of the DGA were 0.241/0.192KB. The total network usages were under 1GB.

First of all, Table 4 described each of the testing results for EHR retrieval. As described in Section 4.1 the total time for EHR retrieval (TRetrieval) was defined as: TRetrieval
                        =T1
                        + T2
                        +T3. In Table 4, the test results were indicated in the corresponding column. The first column was the test number, the second column described how many retrievals per hour, the columns from T1 to T3 indicated the average time consumed in each steps of the transaction, and the TRetrieval was the summation of T1 to T3 (equal to the average request–response time of each test). Second, Fig. 8 used the stacked column chart to describe the results of Table 4 so as to compare them with the tests more easily. Finally, Table 7 showed the hardware resources consumption during the implementation of each test.


                        Table 4 showed that the DCA initiated the EHR retrieval requests to the DPA through the ITI-43 transaction. Table 4 indicated that the total EHR retrieval time (TRetrieval) exceeded 15s from the retrieval rate of 2500 EHRs per hour (Test 13). The results made it clear that the maximum affordable workload of this system combination was about 2000 EHR retrievals per hour (Test 12). Fig. 8 showed that the T2 apparently dominated the TRetrieval. When compared to Table 7, the DCA system CPU usage was raised along with the increasing workloads. Until Test 13, the DCA CPU usage rate was up to nearly 100%. Test 13 in Table 4 indicated that the T2 processing time was greatly raised, but the DPA did not increase the CPU usage rate. In addition, Test 13 in Table 7, the DPA system did not fill to capacity (4GB) either, but the TRetrieval was soaring, and this meant that the DPA did not fully use the hardware resources, therefore, we will further discuss this issue in Section 6. Finally, Table 7 also indicated that the network usage of Test 13, the input/output of the DCA was 14.24/1.57KB; the input/output of the DGA were 0.705/14.16KB. The total network usages were under 1GB.

@&#DISCUSSION@&#

In this research, load testing was conducted for these three test cases. We calculated the processing time of each transaction and monitored the CPU usage, memory usage, and network usage, by the CACTI server during the executing of the test cases.

From the load testing, we found that the maximum affordable workload of the EHR submission is 400 EHRs during one hour. We can estimate that under this hardware resource setting, it was able to support about 3200 EHR submission requests during eight working hours. We also noticed that the T1 and T4 which were in the EHR submission (refer to Table 2) consumed most of the total processing time. T1 was the time for the DSA sending an ITI-41 SOAP message with a formatted EHR to the DPA through the ITI-41 transaction. Since we know the ITI-41 transaction is defined as the SOAP web service, and this SOAP message includes a lot of information, the SOAP header, the SOAP body, other required items of the SOAP message, XDS.b metadata, and the Base64 formatted EHRs. In addition, many studies attest that the SOAP web service is more complicated than the Representational State Transfer (Restful) web service, and that the SOAP web service in terms of response performance, is slower than the Restful web service [40–43]. Therefore, we believe the following version of the IHE XDS.b profile might change the SOAP web service to the Restful web service. We also noticed that some of the IHE profiles start to adopt the Restful web service, e.g. the IHE Mobile access to the Health Documents (MHD) profile also provide a simple HTTP interface to an XDS like environment [44–46] that implemented the Restful web service with the HL7 Fast Healthcare Interoperability Resources (FHIR) to improve the transaction performance. Therefore, we believe that the IHE XDS.b profile will move on to adopt the Restful web service in a future EHR sharing framework, and the processing time of T1 and T4 will decrease. In addition, the most time consuming work of the EHR submission was the T4, which was the time for the DGA to process the ITI-42 transaction, persisting with the metadata of the EHR, and preparing an acknowledgment message for the ITI-42 transaction. Table 5 indicated that the memory usage of the DGA in the five tests showed very little change, and the memory usage was not to the capacity of (4GB), while the memory usage remained at 2GB. On the other hand, the CPU increased from 11% to 31% usage rate, but not to 100% usage rate. The results showed us that if we can improve the DGA of the OpenXDS to use the hardware more efficiently while processing the ITI-42 transaction (such as concurrent programming, multithread programming), then we would be able to decrease the time of T4. Moreover, in Fig. 6, the TSubmission of Test 1 was greater than the TSubmission of Test 2, and we found the main reason is T4, therefore, we checked Table 5 to fully comprehend the main reason through the hardware resource utilization. At first, we checked the CPU consumption, the usage between Test 1 and Test 2 was both equal to 11%, and then we checked the RAM consumption, Test 1 (2110MB) was less than Test 2 (2120MB), and the result was therefore reasonable. Finally, we checked the network usage, the network inflows of Test 1 (0.539KB) were less than Test 2 (0.63), but the network usage outflows of Test 1 (0.123KB) were greater than Test 2 (0.098), and this result showed that the respond message of Test 1 was more than Test 2. We checked the DGA transaction log, but there was no error message, or any additional respond message, that occurred during the transaction, thus, we thought this may be caused by the other application while the server was initially operating, although this might have affected the result of Test 1, however, because Test 1 was the first testing, it did not affect the identification of the maximum affordable workload.

In the EHR query test case, the maximum affordable workload of the EHR queries was 600 queries per hour. This meant that under this hardware setting, we can provide about 4800 query requests during eight working hours. Referring to Table 3, we noticed that the T2 of the EHR query test case consumed more than half of each test's total processing time. The T2 is the time for the DGA processing the ITI-18 query message and executing the EHR query. Referring to Table 6, we found that the memory usage of the DGA in the seven tests were slightly increased (mostly remained between 1830MB to 1900MB), and the memory usage rate was not to the capacity of (4GB). In addition, the CPU usage rate did not change a lot (mostly kept to 1% usage rate). These results showed us that while the OpenXDS playing the DGA to process the ITI-18 transaction should be improved to make use of the hardware more efficiently, and to increase the maximum affordable workload of the EHR query.

Finally, the EHR retrieval test case, the maximum affordable workload of the EHR retrieval was 2000 retrieval requests per hour. This meant that under this hardware setting, we can provide 16,000 EHR retrieval requests during eight working hours. Referring to Table 4, the T2 of the EHR retrieval test case consumed more than half of each test's total processing time. T2 was the time for the DPA processing the ITI-43 EHR retrieval message and executing the EHR retrieval. Referring to Table 7, this indicated the memory usage rate of the DPA in the 13 tests did not change too much (mostly remained between 2220MB to 2310MB), and the memory usage did not reach the capacity of (4GB). In addition, the CPU usage rate did not change a lot (mostly remained at 1% to 3.75% usage rate). These results showed us that while the OpenXDS playing the DPA actor to process the ITI-43 transaction should be improved to make use of the CPU, and the memory resources more efficiently, to increase the maximum affordable workload of the EHR retrieval.

In addition, due to the EHR/OpenXDS system being deployed under a 1GB local area network (LAN), it did not have any interference by other web applications which were not related to the EHR/OpenXDS system, and we also noticed that there was not any performance limitation caused from the network bandwidth (refer to Tables 5–7, the total bandwidth usage of each test case were lower than 1GB).

From the research results, we suggested that future implementers who deploy the OpenXDS system should consider the following aspects:
                        
                           1.
                           To ensure how many service volumes we need in our affinity domain, and consider how many workloads should be provided by the OpenXDS before implementation.

If the IHE XDS.b profile is adopted by the SOAP web service, it might move onto the Restful web service which is more efficient than the SOAP web service.

From the three test cases, we found the DPA, and the DGA did not use the CPU and memory hardware resources efficiently. Therefore, we suggested modifying the OpenXDS to support the multithread (concurrency) process ability, or deploy on a load balance hardware setting, to improve the ITI-42, ITI-43, and ITI-18, transaction processing. We also suggest evaluating the performance of the DGA and the DPA of manipulating the data persisting and query of the database, as this might help to discovery many more details of the processing bottleneck of the OpenXDS.

Since OpenXDS is a java based web application, it uses several open source modules, eg., JVM, Apache Tomcat, Apache Axis2. These modules have several configuration settings to control their memory usage. For example, the heap size and garbage collection of the JVM [47], the memory management settings of the Apache Tomcat [48], and the memory management of the Apache Axis2, etc. Therefore, we suggest that future research can focus on those configurations and discuss what kind of combination of the memory management settings will improve the memory usage more efficiently to increase the OpenXDS performance.

In this study, we implemented the CACTI to monitor the hardware usage of each actor through the SNMP transaction. This adoption was only required in this research to monitor the system hardware consumed during the executing of the test case. This adoption might consume the hardware resources of the VM 2–4 and indirectly affect our experimental results. Therefore, the implementers should consider that if the adoption environment needs to install the CACTI monitoring software to watch their system hardware resources.

Finally, to monitor each transaction status and provide patient information confidentiality, data integrity, and user accountability, for the real EHR sharing environment is important. The IHE provides an ATNA (Audit Trail and Node Authentication) profile [6,49] to trace and audit each XDS transaction, and is therefore able to achieve the above jobs. In our study, we didn't include the ATNA profile because we would have prefered to measure the EHR/OpenXDS system performance without any interference. In our future work, we will include the ATNA profile (e.g., adopt OpenATNA [50]) and also discuss more safety issues for patient's information.

@&#CONCLUSION@&#

The OpenXDS is an open source web application which is able to decrease the implementation time and comply with the IHE XDS.b profile to achieve the EHR interoperability. In order to ensure the original OpenXDS service performance under certain workloads, and provide a number of software tuning suggestions for the implementers to consider if this web application is able to meet their service volume, this research conducted the performance testing on the OpenXDS open source web application. We deployed the CACTI server to monitor the hardware resource usage during the conducting of the load testing, and to thereby discover the reasons which affect the service performance of the OpenXDS. These research results provided some test figures for the implementers to trade off the adoption, and gave tuning suggestion and future work for their follow-up research, so as to keep improving the performance of the OpenXDS.

@&#ACKNOWLEDGEMENTS@&#

This research was partially supported by the Ministry of Science and Technology Taiwan under the Grant No. NSC 101-2622-E-038-003-CC2, NSC 102-2622-E-038-001-CC2, MOST 103-2622-E-038-001-CC2 and 103-2917-I-038-009. We would like to express our appreciation to the OpenXDS, CACTI, and Uncommons Maths open source software developers. We would also like to extend our thanks to the DATACOM TECHNOLOGY CORP. for their partial technical support, and their financial support for joining the 2013 IHE China Connectathon.

@&#REFERENCES@&#

