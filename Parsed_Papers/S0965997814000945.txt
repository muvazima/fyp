@&#MAIN-TITLE@&#CAD based model of ultrasonic shot peening for complex industrial parts

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A model of the shot dynamics in ultrasonic shot peening is presented.


                        
                        
                           
                           Complex geometries and process parameters of industrial interest are supported.


                        
                        
                           
                           The computational performances of the model are studied.


                        
                        
                           
                           A comparison with results from the scientific literature is conducted.


                        
                        
                           
                           A case study on a spur gear is presented with numerical and experimental results.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Ultrasonic shot peening

Simulation

Shot dynamics

Complex geometries

Spur gear

CAD

@&#ABSTRACT@&#


               
               
                  This paper presents a numerical model developed specifically for ultrasonic shot peening (USP). It allows simulating the shot dynamics (trajectories in the chamber and impacts on the peened sample) in industrial configurations. The model supports complex 3D geometries, rotating parts and employs efficient collision detection algorithms for short computation times. The aim is to improve peening chamber designs and the choice of process parameters. The algorithm and main assumptions are presented. Numerical studies are then conducted to determine the performances of the model, in terms of computation time. Finally, a case study on a spur gear tests the model in an industrial configuration and shows a high correlation between the numerical results and experimental data.
               
            

@&#INTRODUCTION@&#

Ultrasonic shot peening (USP) is a mechanical surface treatment process, developed by SONATS (Stressonic® technology) [1], that enhances the mechanical strength [2,3], the fatigue life span [4,5] and the resistance to stress corrosion cracking [6] of the high-added value metallic components, such as bladed disks, compressors, gears and nuclear power plants pressure vessels. This is achieved by projecting spherical shot onto the surface of a component (part), at high velocities (up to 20m/s), with the help of a sonotrode. The latter is part of an acoustic system that vibrates at ultrasonic frequencies (generally 20kHz). In an industrial context, customized peening chambers are usually designed for each type of components. It allows holding the part in place and contains the bouncing shot, thus influencing its flow and dynamics. The parts that are shot peened with an ultrasonic process are usually high added value components, like components of airplane engines, with very complex geometries. The measurements of shot velocities are difficult, although it is necessary that it should be well distributed to ensure an adequate residual stress field. The peening chambers are thus designed with trial and error processes to verify the impact density with, for example a coverage analysis. It is thus of interest to construct a predictive model of the shot dynamics for ultrasonic shot peening in any chamber geometry. It is important to specify that the induced residual stresses highly depend on the shot diameter [7] and total mass, the amplitude of the sonotrode [8], the peening time [9], as well as the shot impact velocities [7] and angles [10]. Although the commonly expected outcome of shot peening is subsurface compressive residual stresses, it might be just as important to optimize surface characteristics: hardening or grain size like in the SMAT process [8,11]. In other words, the main expected outcome of pre-stressing processes is an increase in fatigue life.

In conventional shot peening (CSP), a continuous flow of shot (many kilograms per minute) is projected onto the peened part, making the measurements of shot velocities and angles relatively straight forward [12]. However, in ultrasonic shot peening the few grams of spheres, propelled by the sonotrode, bounce around in the peening chamber. This results in complex and repetitive interactions between the spheres and the rest of the peening setup, i.e. sonotrode, chamber and part. This particular feature of USP makes it difficult to measure experimentally the shot velocities and angles. As a result, the design of USP chambers and the choice of process parameters remain empirical, making it time consuming and partially optimized especially for complex parts.

Modeling such processes, from peening parameters to fatigue optimization, can be reached with two types of approaches. The first type consists on chaining models (usually simple ones) and optimizing each step to reach the expected fatigue life. The second type of approaches is dedicated to one specific aspect of the chain, usually more evolved models that allow an improved understanding of the process and the optimization of the models aforementioned. The model proposed in the manuscript is of the second kind and enables to answer industrial concerns on the treatment homogeneity, when designing the shot peening chambers. This is the first step toward a good surface treatment. The second objective is to offer the possibility to optimize all the material parameters. Indeed, a given residual stress profile may be obtained with different sets of process parameters, leading to different surface states, different grain sizes, etc. These last parameters have also a strong influence on fatigue strength. It is thus our objective to propose an accurate model to predict the impact fields (velocities, angles, energies). The model can then eventually be used as a boundary condition to model the state of the material after shot peening, itself being an initial condition for fatigue strength models.

Therefore, a dedicated model of USP, capable of simulating the process for complex parts in industrial conditions, is developed while keeping the computation times to a minimum. The objective of the model is to facilitate the design of shot peening chambers, as well as the choice of the process parameters. Existing models capable of modeling partially or completely the USP process are analyzed in Section ‘Background’. The research objectives are presented in Section ‘Research objectives’. The developed USP model is detailed in Section ‘USP model’ and then tested for its performances, in terms of computation times in Section ‘Performances study’. Section ‘Case study on a spur gear’ provides a case study of a spur gear, submitted to ultrasonic shot peening in industrial conditions, which enables to compare the model predictions with experimental data.

@&#BACKGROUND@&#

Event-driven molecular dynamics (EDMD) can be used to model and study the behavior of granular systems, such as non-vibrated [13–15] and vibrated [16–18] granular gases. The latter presents a striking analogy with ultrasonic shot peening. It corresponds to a finite number of hard spheres (shot) driven by a vibrating boundary (sonotrode) and contained within well-defined boundaries (chamber and part). Most of the existing studies on vibrated granular gases are conducted at low frequencies (from 20 to 300Hz) and with millimetric amplitudes. Although these models or their results cannot be directly transposed to USP (ultrasonic frequencies and micrometric amplitudes), they seem to offer solid bases for studying the process numerically. In fact, Micoulaut et al. [19] use a model derived from granular gases to simulate ultrasonic shot peening in a cylindrical chamber (Fig. 1
                     ). This represents one of the first steps towards the understanding of heterogeneities that can sometimes be generated by the process. Further studies on the effects of chamber geometries and process parameters on the properties of vibrated granular gases, within USP conditions, were conducted by Badreddine et al. [20–22] (Fig. 1). Event-driven molecular dynamics models give the possibility to conduct efficient 3D simulations in short computing times, achieving a 1:1 ratio between computing time and simulated time [22]. Such performances are achieved on one CPU of a personal laptop computer. One can clearly see the potential of such model as a viable option for a daily industrial use. However, the main drawback comes from the need to have an analytical description of the boundaries (chamber, part and sonotrode), but this is rarely the case for most ultrasonically shot peened industrial parts (gears, compressors, blisks, etc), which are defined by a 3D CAD model.

Other models, using discrete element method (DEM) and/or finite element method (FEM), can be found for conventional shot peening, in the scientific literature [23–25]. DEM is used to simulate the shot flow in conventional shot peening, then provide to a FEM model the required data needed to predict the residual stress distribution in the peened part. To our knowledge, Nouguier-Lehon et al. [26] are the first to apply this approach to ultrasonic shot peening. The peening of a cylindrical rod (part), placed in a rectangular chamber, is modeled. Prior FEM calculations are used to obtain the residual stress field generated by a single impact at various impact speeds. It seems that the ideal model for simulating ultrasonic shot peening exists, since the shot dynamics can be modeled and used to predict the induced residual stress field. However, DEM requires large computing resources in terms of disk space and computation times [25,26]. For instance, in the work of Nouguier-Lehon et al. [26] the simulated peening time was set to 1s due to long computation times (about four hours), forcing them to neglect the effects of initial conditions (transitory phase). It was shown by Badreddine et al. [21] that, depending on the chosen process parameters, the transition time can vary from milliseconds to several seconds. Based on these results, it is important to simulate relatively long peening times in order to insure consistent results.

EDMD offers the possibility to simulate long peening times, for very reasonable computation costs. However, the lack of support for complex geometries strongly limits its use for studying USP on complex parts. Hybrid DEM/FEM approaches are very interesting in terms of predicting the compressive residual stress field, starting from the process parameters.

However, due to very long computation times, multiprocessor computation and high performances hardware, as demonstrated by [25] in the case of air blast shot peening, they are not well suited for an industrial use on a daily basis. At this stage, it becomes clear that none of the presented models bring, on their own, a complete solution to the industrial need in the field of ultrasonic shot peening. Hence, this has motivated the development of a dedicated model (Section ‘USP model’) that supports complex geometries, has low computation costs and generates data allowing a better:
                        
                           •
                           
                              Choice of process parameters: data about the shot dynamics can give crucial clues on the coverage and intensity of the process. If coupled with the appropriate residual stress prediction models [24,27,28], the prediction of the stress field generated by USP could be predicted in the entire peened structure. However this topic lies beyond the scope of this manuscript and will be the focus of future work.


                              Design of the peening chambers: providing the designer with both visual and quantitative feedbacks on the shot dynamics will allow conducting numerical iterations on the chamber design, before creating costly prototypes.

In order to represent the USP process realistically in industrial conditions, the model must integrate and comply with the following conditions:
                        
                           •
                           
                              3D representation of the USP setup: the geometry of each component of the setup (sonotrode, peening chamber and peened part) must be faithfully modeled.


                              Rotating part: some parts rotate during the treatment to insure the homogeneity of the process. This movement must to be considered in such cases.


                              Realistic process parameters: the quantity and diameter of shot, the amplitude and frequency of vibration of the sonotrode, as well as the total peening time.


                              Collision related data: energy dissipation and material properties must be integrated in the model for each colliding pair. Colliding pairs always involve one sphere with another sphere, a static mesh or a moving mesh).


                              3D real-time visualization: it should be reminded that 3D rendering of spheres and involved geometries might require greater computation resources then the rest of the algorithm. As a result, two versions of the model are proposed. The first version “3D_mode” supports real-time 3D visualization. It can be demanding in computation times and should mainly be used for exploratory purposes and visual feedback. The second version “Console_mode” excludes 3D rendering and is suited for simulating long peening times in very short computation times.


                              Global computation time: simulating 60s of USP must take, in most cases, less than 12h to complete, in “Console_mode”. This would allow conducting multiple simulations overnight, for different peening configurations, and access the results the next morning.

At the end of a simulation, impact related data from the peened part are saved in a file, i.e. the ID of the impacted triangle, the instant of impact, the 3D coordinate of the impact, the impact velocity and the rebound velocity. Such data can afterwards be used to provide an insight on process control parameters, such as:
                        
                           •
                           
                              Surface coverage: corresponds to the percentage of indented surface with respect to the total surface to be shot peened. Its evaluation is governed by the SAE standard J2277 [29].


                              Almen intensity: is determined by measuring the arc height of an Almen strip, made of SAE 1070 steel. This intensity is determined by measuring the arc height of the peened strip and was proven to be linked to the induced compressive residual stresses [9,30]. Its evaluation is governed by other SAE standards [31,32].

The developed CAD based model takes into account physical phenomena commonly found in the vibrated granular gas models. In particular, the model presented by Micoulaut et al. [19] was used as a foundation for the present model, i.e.:
                           
                              •
                              
                                 Rigid spheres: all spheres have the same mass and diameter. They are positioned randomly at the sonotrode surface, while insuring no overlap, at the start of each simulation. Initial velocities can also be attributed to the spheres, as initial conditions.


                                 External forces: in free flight, the spheres are only submitted to the gravitational acceleration 
                                    
                                       
                                          
                                             g
                                          
                                          
                                             →
                                          
                                       
                                    
                                 . Their trajectory can be described analytically, as expressed bellow: 
                                    
                                       (1)
                                       
                                          
                                             
                                                
                                                   
                                                      U
                                                   
                                                   
                                                      k
                                                   
                                                
                                             
                                             
                                                →
                                             
                                          
                                          (
                                          t
                                          +
                                          Δ
                                          t
                                          )
                                          =
                                          
                                             
                                                1
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                g
                                             
                                             
                                                →
                                             
                                          
                                          .
                                          
                                             
                                                (
                                                Δ
                                                t
                                                )
                                             
                                             
                                                2
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   
                                                      V
                                                   
                                                   
                                                      k
                                                   
                                                
                                             
                                             
                                                →
                                             
                                          
                                          (
                                          t
                                          )
                                          .
                                          Δ
                                          t
                                          +
                                          
                                             
                                                
                                                   
                                                      U
                                                   
                                                   
                                                      k
                                                   
                                                
                                             
                                             
                                                →
                                             
                                          
                                          (
                                          t
                                          )
                                       
                                    
                                  where 
                                    
                                       
                                          
                                             
                                                
                                                   V
                                                
                                                
                                                   k
                                                
                                             
                                          
                                          
                                             →
                                          
                                       
                                       (
                                       t
                                       )
                                    
                                  and 
                                    
                                       
                                          
                                             
                                                
                                                   U
                                                
                                                
                                                   k
                                                
                                             
                                          
                                          
                                             →
                                          
                                       
                                       (
                                       t
                                       )
                                    
                                  are respectively the velocity and position of a sphere k, at a given time t, and 
                                    
                                       Δ
                                       t
                                    
                                  the time laps between two consecutive positions.


                                 Binary collisions: no impacts between 3 or more spheres.


                                 Single contact point: since all collisions are binary and involve a rigid sphere, the contact area is reduced to a single point.


                                 Inelastic impacts: for each colliding pair, energy dissipation due to yielding, vibrations, heat transfer and other physical phenomena, as well as material properties are taken into account through:


                                 Tangential restitution coefficient μk
                                 : applied to the tangential component of the shot rebound velocity. A constant value is attributed to each Sphere–Mesh colliding pair.


                                 Normal restitution coefficient Ck
                                 (V): concerns Sphere–Sphere and Sphere–Mesh colliding couples. It is velocity dependent [33,34] and is applied to the normal component of the shot rebound velocity [35]: 
                                    
                                       (2)
                                       
                                          
                                             
                                                C
                                             
                                             
                                                k
                                             
                                          
                                          (
                                          V
                                          )
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  C
                                                               
                                                               
                                                                  0
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                         
                                                         
                                                            if
                                                         
                                                         
                                                            V
                                                            <
                                                            
                                                               
                                                                  V
                                                               
                                                               
                                                                  0
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                            (
                                                            Elastic
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  C
                                                               
                                                               
                                                                  0
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           
                                                                              V
                                                                           
                                                                           
                                                                              
                                                                                 
                                                                                    V
                                                                                 
                                                                                 
                                                                                    0
                                                                                 
                                                                                 
                                                                                    k
                                                                                 
                                                                              
                                                                           
                                                                        
                                                                     
                                                                  
                                                               
                                                               
                                                                  -
                                                                  0.25
                                                               
                                                            
                                                         
                                                         
                                                            if
                                                         
                                                         
                                                            V
                                                            ⩾
                                                            
                                                               
                                                                  V
                                                               
                                                               
                                                                  0
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                            (
                                                            Inelastic
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 where V is the relative normal impact speed of the sphere, with respect to the impacted object; 
                                    
                                       
                                          
                                             V
                                          
                                          
                                             0
                                          
                                          
                                             k
                                          
                                       
                                    
                                  is a threshold speed marking the beginning of important yielding in the impacted material; 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             0
                                          
                                          
                                             k
                                          
                                       
                                    
                                  is the low speed constant normal restitution coefficient; and k
                                 ={S, SM, MM} correspond to the nature of the impacted object (Sphere, Static Mesh, Moving Mesh).


                                 Coulomb friction coefficient fk
                                 : applied to the tangential component of the shot velocity with respect to the concerned triangle, in the case of a rolling sphere on a mesh. A constant value is attributed to each Sphere–Mesh colliding couple.


                                 Instantaneous impacts: the rebound of a colliding sphere is dealt with by applying the appropriate collision rule:

Sphere–Sphere collisions:


                        
                           
                              Sphere–Static Mesh:


                        
                           
                              Sphere–Moving Mesh collisions:


                        
                           
                              •
                              
                                 Time-Stepping scheme: is used instead of the event-driven scheme found in the model of Micoulaut et al. [19]. The time step 
                                    
                                       Δ
                                       t
                                    
                                  is calculated such that the distance travelled by the fastest sphere is equal to a quarter of its radius, and is obtained by solving Eq. (6). Hence, the time step depends on the spheres diameter D and the speed of the fastest sphere Vmax
                                 , as expressed in Eq. (7). In the case of a rotating part, its angular speed is taken into account to determine the best value of the time step. By doing so, it is insured that no collisions are missed and the possibility of large interferences is reduced. This results in time steps of the order of 10−5–10−4
                                 s, depending on the spheres dynamics. In comparison, DEM simulations are usually incremented with time steps of the order of 10−6
                                 s [26].


                        
                           
                              •
                              
                                 Rotation of the part: some mechanical parts rotate during USP, with a constant angular speed 
                                    
                                       ω
                                    
                                 , to insure a homogeneous treatment. In such cases the rotating part is defined in a local frame 
                                    
                                       (
                                       A
                                       ,
                                       
                                          
                                             a
                                          
                                          
                                             →
                                          
                                       
                                       ,
                                       
                                          
                                             b
                                          
                                          
                                             →
                                          
                                       
                                       ,
                                       
                                          
                                             c
                                          
                                          
                                             →
                                          
                                       
                                       )
                                    
                                  attributed to it (part), as illustrated in Fig. 2. A rotation matrix [B
                                 1] is then used to express spheres coordinates in the part local frame and to update the part orientation in the global reference frame 
                                    
                                       (
                                       O
                                       ,
                                       
                                          
                                             x
                                          
                                          
                                             →
                                          
                                       
                                       ,
                                       
                                          
                                             y
                                          
                                          
                                             →
                                          
                                       
                                       ,
                                       
                                          
                                             z
                                          
                                          
                                             →
                                          
                                       
                                       )
                                    
                                 .

In the model, the impacted geometries do not change under the effects of the impacts, during the peening simulation. On a real peened component, the multiple impacts on its surface will continuously modify its geometry and surface roughness. Such changes of the material properties, during the peening process, are not taken into account in the current version of the model, but correspond to the next stage of developments. It is true that this aspect can have a great influence on the shot dynamics, thus on the effects of the process on the peened material. However, numerical studies were conducted with the model in order to determine the influence of an evolution of each restitution coefficient on the overall shot dynamics. The results from these preliminary studies show that an evolution of material properties of the sample, chamber, sonotrode or shot does not have equivalent effects on the overall shot dynamics. Ongoing research is being conducted to enrich the model, from this point of view and will be subject to future publications.

The model workflow, presented in Fig. 3
                        , is
                           1
                           For interpretation of color in Figs. 3 and 10, the reader is referred to the web version of this article.
                        
                        
                           1
                         divided into 4 main stages: initialization (blue), 3D rendering (red), main loop (orange) and data extraction (green). The first stage consists on reading all required parameters and generating the needed structures to conduct the simulation. The second stage is only implemented in the “3D_mode” version of the model, in which 3D rendering is supported. The third stage corresponds to the core of the algorithm. This is where all collision detections and management are conducted. The last stage allows extracting the required raw data, generated by the simulation, into files for further analysis. Each of the four stages is detailed below.


                        Initialization is divided into the following steps:
                           
                              a.
                              
                                 Reading mesh files: each component of the USP setup (sonotrode, chamber and part) is discretized using a triangular mesh. This choice complies with the first requirement (Section ‘Research objectives’) and has the advantage to be easy to implement.


                                 Constructing collision trees: the choice of a mesh based representation of the different geometries also offers the possibility of using efficient collision detection [36,37] and space hashing [38] algorithms. The C++ library OPCODE is used in the model. It allows constructing an Aligned Axis Bounding Box (AABB)
                                    2
                                    Although developed to be memory-friendly, OPCODE out performs in many cases other collision detection algorithms, such as RAPID [44].
                                 
                                 
                                    2
                                  based collision tree [37], for each of the three components of the USP setup and conduct fast Sphere–Mesh collision detection queries. The reader may refer to the OPCODE website [39] for more details about this library and its performances [40].


                                 Reading input related data about:

Process parameters –

Total peening time T to be simulated.

Coordinates of the center of rotation A of the part in the global frame.

Angular speed 
                                    
                                       ω
                                    
                                  and unit rotation vector 
                                    
                                       
                                          
                                             u
                                          
                                          
                                             →
                                          
                                       
                                    
                                 .

Number N and diameter D of spheres.

The sonotrode vibrates at ultrasonic frequency F with an amplitude 
                                    
                                       
                                          
                                             A
                                          
                                          
                                             0
                                          
                                       
                                    
                                  that follows a sinusoidal signal 
                                    
                                       
                                          
                                             A
                                          
                                          
                                             sono
                                          
                                       
                                       (
                                       t
                                       )
                                    
                                 , similarly to the industrial USP equipment, as expressed bellow: 
                                    
                                       (9)
                                       
                                          
                                             
                                                A
                                             
                                             
                                                sono
                                             
                                          
                                          (
                                          t
                                          )
                                          =
                                          
                                             
                                                A
                                             
                                             
                                                0
                                             
                                          
                                          .
                                          sin
                                          (
                                          2
                                          π
                                          .
                                          F
                                          .
                                          t
                                          )
                                       
                                    
                                 
                              

Materials – specific restitution and friction coefficients are attributed to each colliding pair of materials.


                                 Applying an AABB to each sphere: this is used for conducting coarse collision detections between spheres, using OPCODE. Their size is set slightly larger than the spheres diameter.


                                 Setting initial conditions: the spheres are randomly distributed on the sonotrode surface with a procedure insuring that no overlapping occurs. In certain peening conditions, compressed air is used to put the spheres into motion in the chamber, before becoming self-sustained. In such cases, initial velocities are assigned to the spheres to be more representative of the real process.


                        3D rendering is conducted using the OpenGL C++ library [41,42] is used for rendering the mesh of each component (part, chamber and sonotrode), the spheres and their velocities, as well as all inelastic impacts taking place on the peened part. Additional rendering options can be added to the model when needed.


                        Main loop is divided in the following steps:
                           
                              a.
                              Sphere – Sphere collisions:

Coarse detection – a pruning algorithm, imbedded in the OPCODE library, is used for a fast and coarse bipartite collision detection queries between the generated AABBs. A list of intersecting AABB pairs is then obtained and used for conducting finer tests.

Fine detection – the corresponding pairs of spheres are each tested for actual intersections.

If the test is positive, intersections are eliminated and the adequate collision rule (Eq. (3)) is applied for computing the rebound velocities.

If the test is negative, the next pair of spheres is examined.


                                 Sphere – Mesh collisions: for each sphere, a collision detection query
                                    3
                                    Collision detection queries are conducted by OPCODE and return the ID of all touched triangles, listed in the order in which they were intersected, for a given sphere.
                                 
                                 
                                    3
                                  is conducted with:

Chamber – apply the collision rule for a static mesh (Eq. (4)) to the colliding spheres.

Sonotrode – apply the collision rule for a moving mesh (Eq. (5)) to the colliding spheres.

Sample –

If rotating: the spheres position and velocity are expressed in the local frame of the sample, using the rotation matrix [B
                                 1] (Eq. (8)). A collision query is then conducted, followed by the collision rule for a moving mesh (Eq. (5)). Finally, the updated position and velocity of the colliding sphere are expressed back into the global frame.

If static: apply the collision rule for a static mesh (Eq. (4)) to the colliding spheres.

Computing time-step Δt: using Eq. (7).

Updating spheres trajectories: using Eq. (1).

Updating the sonotrode oscillation: using Eq. (9) and its time derivate.

Updating the part orientation: if the part is rotating, its local frame is updated using the rotation matrix 
                                    
                                       [
                                       
                                          
                                             B
                                          
                                          
                                             1
                                          
                                       
                                       ]
                                    
                                  expressed in Eq. (8).

End of simulation: test whether the current simulated peening time is greater than the total peening time, initially set by the user.

If the test is positive:

The end of the simulation is reached and the algorithm jumps straight to the third stage (data extraction).

If the test is negative:

The simulation continues and the algorithm jumps straight to step (a).


                        Data extraction consists of exporting into files all required impact related data, like the ones listed in Fig. 3. This data can be obtained for each collision type.

In this section the performances of the developed CAD-based model are tested with respect to computation times. A laptop PC, equipped with a Quad-core Intel® Core™ i7 processor (1.73GHz), is used for the following studies and all simulations are executed on one core only.

The first study focuses on the “query time” needed to conduct collision detections between all spheres and meshes, at each iteration. Spheres are positioned between two square meshes: a flat upper mesh and a terrain like bottom mesh that behaves like an oscillating sonotrode (inset of Fig. 4
                        ). Lateral boundary conditions are added to restrain the spheres from dispersing outside the area of interest. The query time is then plotted in Fig. 4 as a function of the global mesh size, i.e. the total number of triangles, and for different amounts of spheres. Each data point on the figure corresponds to an average query time obtained over thousands of iterations. The figure shows, as expected, that an increase in the number of spheres will demand higher query times. Increasing the number of spheres results in an increase in the sphere-mesh interactions, for a given mesh size, thus increasing the time query. However, the query time is constant, for a fixed number of spheres. This means that the use of large meshes does not affect the query time. However, rendering such meshes requires important computation resources, thus increasing the global computation time of a given simulation. Hence, large meshes can be used to finely describe the peening setup without increasing the global computation time, only if simulations are conducted in “Console_mode”, i.e. without 3D rendering.

All simulations conducted in this subsection correspond to an ultrasonic shot peening operation on a spur gear (red mesh) which is mounted on a horizontal support axel (blue horizontal mesh). The whole is placed in a cylindrical peening chamber (blue vertical mesh), under which a sonotrode is positioned (green mesh), as illustrated in Fig. 5
                        . The material related parameters used in the simulations are listed in Table 1
                        .

The second study looks at the computation time required by different parts of the algorithm, as a function of number of spheres N. The parts of the algorithm that are looked at are: the Sphere–Sphere (S–S) and Sphere–Mesh (S–M) collision detection and management, with and without OPCODE; the update of the spheres trajectories and their 3D rendering. In Fig. 6
                        , the computation time required for detecting the collisions between spheres using OPCODE (green curve) is two orders of magnitude smaller than with a straight forward approach (black curve), i.e. conducting N(N−1)/2 tests. The figure also shows that the S–M collision detection and management with OPCODE requires similar computation times than for the S–S (red curve). In terms of updating the spheres trajectories (blue curve), the required computation time varies very little with the number of spheres and is very small compared with the other parts of the algorithm. The time required for rendering the spheres (magenta curve) increases rapidly with N and is one order of magnitude larger than the time needed to conduct collision detection and management, using OPCODE. Similar results, yet more pronounced, are to be expected for rendering the meshes.

In the third study, the global computation time, i.e. the time needed to complete a simulation from start to end, is studied as a function of the spheres diameter D and number N; the sonotrode amplitude A
                        0 and the simulated peening time P. The aim is to determine the behavior of the model in an industrial configuration. This means using a peening setup with realistic geometries and process parameter values of industrial interest. Fig. 7
                        a and b present the global computation time as a function of the number of spheres N and the simulated time P, respectively. Both plots show a linear relationship, where doubling the value of N or P doubles the global computation time. Fig. 8
                        a and b presents, the computation time as a function of the sonotrode amplitude A
                        0 and the spheres diameter D, respectively. When the spheres diameter increases, the computation time decreases according to a power law. However, when the sonotrode amplitude increases, the computation increases according to a logarithmic law. This can be explained by the way the time stepping is conducted. In fact, the time step, with which the simulation is incremented, is calculated according to the spheres diameter and the speed of the fastest sphere. The latter is mainly governed by the sonotrode oscillation. In ultrasonic shot peening, the frequency of the sonotrode being generally fixed, the sonotrode amplitude becomes the influent parameter.

Simulating long times of ultrasonic shot peening, using a lot of spheres with a small diameter and a high amplitude of vibration, will result in high computation times. For instance, it takes 1600s (27min) to simulate 10s of USP, using 512 spheres with 1mm diameter and an amplitude of 80μm. According to Figs. 7 and 8, if 3072 spheres of the same diameter are needed instead (multiplying by a factor of 6), the computation will be multiplied by the same factor and will take a total of 9600s (2h 40min) to complete. Simulating 60s of USP with the last configuration will demand 16h of computation time on a single core of a 1.73GHz intel® Core™ i7 processor. The same simulation has been conducted on a processor twice as fast (3.4GHz intel® Core™ i7) and demanded a computation time of 8h. Hence, conducting a same simulation on a processor twice as fast will divide the computation time by two. In doing so, the global computation time can then be kept smaller than the 12h mentioned in the model requirements (Section ‘Research objectives’).

In this sub-section, a comparison is made between the results given by Nouguier-Lehon et al. [26] and the ones obtained by the presented model in terms of computation time and impact velocities. We would like to specify that the comparison was carried out only with a DEM simulation. In their paper, a copper rod is placed in a rectangular chamber and submitted to ultrasonic shot peening, using 512 spheres of 2mm in diameter. Only the case with a hardened steel chamber is considered for this comparison. Using a discrete element model, the authors simulate 1s of USP which takes about four hours to complete. However, the hardware used to conduct the simulation is not known.

In comparison with the CAD based model, the same
                           4
                           The same geometries and parameters used by Nouguier-Lehon et al. [26], in the DEM simulation, are used in the CAD based model.
                        
                        
                           4
                         simulation takes 45s to complete in “Console_mode”, against 13min and 44s in “3D_mode” (Fig. 9
                        a). In both cases, the computation time remains small and reasonable. The average impact velocities on the tube are then analyzed in 2.5mm×180mm rectangular areas. The latter are located at the circumference of the copper rod, as illustrated by the red marks in Fig. 9b [26]. Their results (black filled circles) are reported in Fig. 9c, along with the ones predicted by the CAD based model (blue line). Although both numerical approaches are different, the predictions are very close, as seen for the impact velocities. The CAD based model predicts similar results as the DEM simulation, but for a fraction of the computation time. The reader may refer to video no 1 of the online supplementary material for visualizing a portion of the simulation in “3D_mode”.

Ultrasonic shot peening of an aluminum spur gear is considered as a case study for testing the CAD based model. A 2000 series aluminum alloy was chosen for its high ductility, which allows seeing clearly the indent marks. The gear is then mounted firmly onto a high-density polyethylene (HDPE) axel and placed in a high strength steel cylindrical peening chamber, composed of two sections. The five lower teeth of the gear (numbered from 1 to 5 in Fig. 10
                        ) are painted in blue, for an increased visibility of the indents, and are placed facing the sonotrode. The latter, made of TA6V titanium alloy, is placed under the chamber, facing upwards. The total peening time, during which the gear remains static, is set to 5s to avoid reaching 100% coverage on the lower teeth. This allows a better visualization of the impacts. The experimental setup is presented in Fig. 10, along with the process parameters.


                        Fig. 11
                         illustrates the steps required to run a simulation of the shot dynamics. The first step starts with the CAD assembly of the peening setup. On an industrial level, this is always available. The second step consists of extracting all functional surfaces, in direct contact with the spheres. These surfaces are grouped according to their material and to the component to which they belong, i.e. the part (Gear), the peening chamber (Chamber and Axel) or the sonotrode. At this stage, the process parameters, presented in Section ‘Experimental setup and parameters’, are used. The restitution and Coulomb friction coefficients assigned to each colliding pair of the setup are listed in Table 2
                        . In step 3, the various required mesh and input files are generated and the simulation can begin. The end user has the choice between the two available versions of the model: “3D_mode” or “Console_mode”.

For the case study, the simulation of 5s of USP was conducted on a laptop personal computer (Intel® Core™ i7 CPU, at 1.73GHz). The simulation ran on one CPU core and used a total of 8Mb of RAM. It took respectively 30s and 7.5min to complete in “Console_mode” and in “3D_mode”. Once again, such performances make the model a suitable tool a viable candidate for an industrial use. The reader may refer to video no 2 of the online supplementary material for visualizing a portion of the simulation in “3D_mode”.


                        Fig. 12
                         confronts the numerical results with the experimental ones. The analysis of the coverage and impact velocities is qualitative and is based on the spatial distribution of the impacts and indentation size. The attention is focused on the lower half of the gear, i.e. the teeth painted in blue in Fig. 10. The inset of Fig. 12 presents a projection of all registered inelastic impacts (7450 in total) onto 3 orthogonal plans. A disk is attributed to each impact point, with a size and color directly proportional to its normal impact speed. Around the inset are photographs, numbered from (a) to (e), corresponding to each of the five teeth.

Numerically, the impacts that would result in a large indent (high normal impact speeds) are found on the surfaces facing or exposed to the sonotrode, i.e. (see Fig. 12):
                           
                              •
                              Tooth 1: T
                                 1-L.

Tooth 2: T
                                 2 et T
                                 2-L.

Tooth 3: T
                                 3.
                              

Tooth 4: T
                                 4-R et T
                                 4.

Tooth 5: T
                                 5-R.

Between the teeth 2–3 and 3–4.

If the model’s predictions are correct, the corresponding faces on the real gear should be marked with indents of large diameter. Their numbers should also be the highest on the tooth no 3, lower on teeth no 2 and 4 and even lower on teeth no 1 and 5. Experimentally, the faces that are submitted to the highest normal impact speeds (large indents) are exactly the same than the ones predicted by the CAD based model. The spatial distribution of the indents on the five studied teeth, with respect to their size, shows a high correlation between the simulation and the experimental observations.

For a more quantitative analysis, the first three teeth (T
                        1, T
                        2 and T
                        3) of the gear are considered. Using a high resolution photograph of each tooth, taken with a microscope, each visible indent diameter is measured. This allows counting their number and plotting their distributions (dashed plots in Fig. 13
                        ), in terms of indent diameter. Table 3
                         presents, for each tooth, the number of indents measured experimentally and predicted by the model. The committed error is then calculated. It can be observed that the model slightly underestimates the experimental results. This might be due to the choice of the restitution coefficients. Nevertheless, the committed errors are smaller than 5%.

As mentioned before, the model allows predicting the impact speeds on the peened gear. In order to compare the numerical results to the experimental distribution of indent diameters, a relation between impact speeds and indent diameter is needed. Ideally, such relation is determined experimentally for a specific study. For the current study, a model proposed by Johnson [43] is used for this purpose (Eq. (10)). It applies to low velocity elastoplastic indentations (smaller than 100m/s) between a sphere and plane. Both the sphere and the target are considered to be made with isotropic materials, free of any initial residual stresses.
                           
                              (10)
                              
                                 
                                    
                                       ϕ
                                    
                                    
                                       num
                                    
                                 
                                 =
                                 D
                                 .
                                 
                                    
                                       
                                          
                                             
                                                
                                                   8
                                                   .
                                                   ρ
                                                   .
                                                   
                                                      
                                                         V
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                                
                                                   9
                                                   .
                                                   
                                                      
                                                         σ
                                                      
                                                      
                                                         y
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       1
                                       /
                                       4
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    ϕ
                                 
                                 
                                    num
                                 
                              
                           
                         is the predicted indent diameter; D is the diameter of the sphere, 
                           
                              ρ
                           
                         its density and V its normal impact speed; 
                           
                              
                                 
                                    σ
                                 
                                 
                                    y
                                 
                              
                           
                         is the yield stress of the impacted material.


                        Fig. 13 corresponds to three stacked plots of the experimental and numerical indent diameter distributions. The upper plot corresponds to the tooth no 1; the middle plot to the tooth no 2 and the bottom plot to the tooth no 3. The inset of each plot is to the experimental distribution of the indents on its corresponding tooth. The plots show a peak in the experimental distributions shifting towards the high indent diameters, when moving from tooth no 1–3. This translates the fact that normal impact speeds are the highest when the surface is facing the sonotrode. The further a tooth is positioned from the sonotrode, the lower the impact speeds are. These results translate the observations made on the gear and correlates strongly with the model predictions, as presented in Fig. 12. As for the numerical results, the predicted plots (Fig. 13) show similar behaviors than the experimental ones. The model seems to supply fair predictions of the impact speeds seen by the gear, hence describing well the shot dynamics. However, some differences are noticeable. Such differences can be explained by Johnson’s model (Eq. (10)), used for predicting the indent diameter, which can be considered as a rough approximation of the indent diameter. In addition, the differences can also arise from an insufficient amount of data (indents), used for constructing the distributions. Indeed, few hundreds of data points per distribution might not be enough to achieve good statistical results. Nevertheless, the model seems highly capable of predicting consistent results and in very short computation times. And such performances are required in an industrial context, where a fast access to reliable data is crucial.

@&#CONCLUSIONS@&#

This paper presents a CAD based model of the shot dynamics in ultrasonic shot peening. The ever increasing industrial need for reliable information on the shot dynamics, in industrial configurations, makes it crucial to simulate long enough peening treatments in reasonable computation times.

The main contribution of the model is providing a fast and reliable simulation tool for the shot dynamics, with realistic process parameters and parts with complex geometries. Short computation times are achieved with the use of OPCODE, for fast and efficient collision detections. OpenGL is used to provide real-time visualization of the peening setup, sphere trajectories and impacts. In contrast with event-driven molecular dynamics and discrete element models, the proposed model manages to combine the best of both worlds, in the case of ultrasonic shot peening, while keeping the computation costs to a minimum. In addition, the predictions strongly correlate with experimental observations, made on an ultrasonically shot peened gear, which makes it a viable tool for the industry.

The main contribution of the CAD-based model is providing consistent data for optimizing the peening chamber designs and better tuning the process parameters. As a matter of fact, the model has been implemented in SONATS and has already helped optimizing peening parameters and/or chamber design for few industrial applications. More extensive testing on other applications is ongoing and will be the subject of future publications. Another contribution comes from the information that the model can provide, as input data, to the residual stresses prediction models. As for ways to couple our model to residual stress prediction models, ongoing research is being conducted on this particular issue [28], providing a first set of promising results.

@&#ACKNOWLEDGEMENTS@&#

It is a pleasure to acknowledge ongoing discussions with F. Chateau and G. Doubre-Baboeuf. It is also a pleasure to acknowledge M. Kozemjakin da Silva for her careful reading of the manuscript.

SNECMA (SAFRAN Group), SONATS (Europe Technologies Group) and ANRT (French National Association for Research and Technology) are gratefully acknowledged for their financial support.

Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.advengsoft.2014.05.010.


                     
                        
                           Supplementary video 1
                           
                        
                     
                     
                        
                           Supplementary video 2
                           
                        
                     
                  

@&#REFERENCES@&#

