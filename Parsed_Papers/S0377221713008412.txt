@&#MAIN-TITLE@&#The distance constrained multiple vehicle traveling purchaser problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We study the distance constrained multiple vehicle traveling purchaser problem.


                        
                        
                           
                           We analyze and test alternative mathematical formulations.


                        
                        
                           
                           We devise a branch-and-price algorithm embedding a restricted master heuristic.


                        
                        
                           
                           We solve instances with up to 100 markets and 200 products.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Multiple vehicle traveling purchaser problem

Distance constraint

Formulations

Branch-and-price

Column generation

@&#ABSTRACT@&#


               
               
                  In the Distance Constrained Multiple Vehicle Traveling Purchaser Problem (DC-MVTPP) a fleet of vehicles is available to visit suppliers offering products at different prices and with different quantity availabilities. The DC-MVTPP consists in selecting a subset of suppliers so to satisfy products demand at the minimum traveling and purchasing costs, while ensuring that the distance traveled by each vehicle does not exceed a predefined upper bound. The problem generalizes the classical Traveling Purchaser Problem (TPP) and adds new realistic features to the decision problem. In this paper we present different mathematical programming formulations for the problem. A branch-and-price algorithm is also proposed to solve a set partitioning formulation where columns represent feasible routes for the vehicles. At each node of the branch-and-bound tree, the linear relaxation of the set partitioning formulation, augmented by the branching constraints, is solved through column generation. The pricing problem is solved using dynamic programming. A set of instances has been derived from benchmark instances for the asymmetric TPP. Instances with up to 100 suppliers and 200 products have been solved to optimality.
               
            

@&#INTRODUCTION@&#

In many business environment, as those involved in raw materials and components purchase, the selection of suppliers is a key procurement decision. Different aspects influence this decision and different contributions appeared in the literature where purchasing costs are optimized assuming that demand is either deterministic or stochastic. Interested readers are referred to Benton (1991) for a procurement problem with quantity discounts, to Rosenblatt, Herer, and Hefter (1998) for policies on supplier selection, purchase frequency and quantity setting, Chauhan and Proth (2003) for a procurement problem with concave purchase cost and to Zhang and Zhang (2011) for an extension of the traditional setting to include holding and shortage costs, a fixed cost for each selected supplier as well as stochastic demand. More recently, extensions of the so called Total Quantity Discount Problem (TQDP) introduced in Benton (1991) are investigated by Goossens, Maas, Spieksma, and Van de Klundert (2007) who develop an exact method for the problem. Finally, Manerba and Mansini (2012) study the generalization of TQDP where the quantity offered for each product by a supplier is limited. They introduce different valid inequalities for a formulation of the problem and use them in a branch-and-cut algorithm.

Interestingly, all the cited contributions mainly focus on the pricing aspect of the procurement problem. Nevertheless, procurement costs are not just determined by purchasing costs. Typically, transportation cost is a substantial component of the procurement costs that needs to be optimized as well. A procurement setting that explicitly incorporates both purchasing and transportation costs has been studied in Mansini, Savelsbergh, and Tocchella (2012). The authors consider the case of a company that has to select a set of suppliers offering discounts based on the total quantity purchased. The transportation costs are modeled as truckload shipping costs, and thus depend on the total quantity purchased as well.

The transportation cost structure described in Mansini et al. (2012) is appropriate when the transportation service is outsourced to a carrier company. In this paper, we study a procurement setting where the purchaser company needs specified quantities of a variety of products from a set of suppliers and is involved in the direct collection of the purchased products with a fleet of vehicles based at a common depot. Each supplier offers a subset of products at possibly different prices and having different availabilities. The company has to select a set of suppliers and construct a set of routes so that total traveling and purchasing costs are minimized. A distance constraint is set on the route traveled by each vehicle. Such a constraint is determined by the working time of vehicle drivers and imposes that the length of the route (defined in terms of mileage or time) must not exceed a predefined bound. The distinction between mileage and time is irrelevant if all vehicles in the fleet are assumed to travel at the same average speed.

Let K
                     ≔{1, …, n} be the set of products to be purchased, let M
                     ≔{1, …, m} be the set of suppliers to choose from, and a depot indexed by 0, and let F
                     ≔{1, …, l} be the fleet of identical vehicles available for the service. Each product k,
                     k
                     ∈
                     K, can be purchased at a subset M
                     
                        k
                     
                     ⊆
                     M of suppliers at a non-negative price p
                     
                        ki
                     , i
                     ∈
                     M
                     
                        k
                     . A discrete demand d
                     
                        k
                      is specified for each product k
                     ∈
                     K, and a product availability q
                     
                        ki
                     
                     >0 is defined for each product k
                     ∈
                     K and each supplier i
                     ∈
                     M
                     
                        k
                      such that 
                        
                           
                              
                                 ∑
                              
                              
                                 i
                                 ∈
                                 
                                    
                                       M
                                    
                                    
                                       k
                                    
                                 
                              
                           
                           
                              
                                 q
                              
                              
                                 ki
                              
                           
                           ⩾
                           
                              
                                 d
                              
                              
                                 k
                              
                           
                        
                     . A distance bound C
                     
                        max
                      is imposed on each vehicle route. Let G
                     =(V, A) be a directed graph where V
                     ≔
                     M
                     ∪{0} is the node set and A
                     ≔{(i, j): i
                     ≠
                     j, i, j
                     ∈
                     V} is the arc set. We indicate as c
                     
                        ij
                      the cost (distance) of traveling from node i to node j. Each route starts and ends at node 0. The problem looks for a set of routes visiting a subset of nodes in such a way that the total traveling and purchasing costs are minimized while satisfying products demand and the distance bound on each route.

The problem generalizes the well-known Asymmetric Traveling Purchaser Problem (see Riera-Ledesma & Salazar-Gonzalez (2006)) since a fleet, instead of a single vehicle, is available to visit suppliers. Due to the distance bound associated with each vehicle and the fleet of vehicles, we call this generalization the Distance Constrained Multiple Vehicle Traveling Purchaser Problem (DC-MVTPP).

Following the literature on the TPP we refer to the special case with unlimited supplies, i.e. q
                     
                        ki
                     
                     ⩾
                     d
                     
                        k
                      for all k
                     ∈
                     K and i
                     ∈
                     M
                     
                        k
                     , as the unrestricted DC-MVTPP, and to the more general case as restricted DC-MVTPP. Notice that the unrestricted case is equivalent to assuming that d
                     
                        k
                     
                     =1 and q
                     
                        ki
                     
                     =1 for all k
                     ∈
                     K and i
                     ∈
                     M
                     
                        k
                     .

On one hand, the TPP and its variants have been exhaustively studied in the literature. See, for instance, Laporte, Riera-Ledesma, and Salazar-Gonzalez (2003), and more recently, Mansini and Tocchella (2009) for the TPP with budget constraint, Angelelli, Mansini, and Vindigni (2009) and Angelelli, Mansini, and Vindigni (2011) for a dynamic version with quantities decreasing over time, Angelelli, Mansini, and Vindigni (submitted for publication) for a dynamic and stochastic variant, Gouveia, Paias, and Voss (2011) for the TPP with additional side-constraints, and Cambazard and Penz (2012) for a constraint programming solution method to the problem. On the other hand, very few contributions can be found where the TPP is generalized to the multiple vehicle case. In Choi and Lee (2011) the authors introduce a reliability optimization problem as variant of the multi-vehicle TPP. In Riera-Ledesma and Salazar-Gonzalez (2012) the authors analyze the generalization of the asymmetric unrestricted TPP to the multiple vehicle case with capacity constraint. The problem is described as a location routing problem in the context of school bus routing where each student can be seen as a product available at any bus stop he/she can reach by walking. A non-negative cost is associated with the assignment of a student to a stop. This cost can be seen as the distance walked by the student to reach the stop from home. The aim of the problem is to assign each student to a stop so that the total length of routes plus the total assignment cost is minimized while guaranteeing that the number of students assigned to the stops of a route does not exceed the vehicle capacity. The authors propose a model based on a single commodity flow formulation and provide valid inequalities to strengthen its linear programming (LP) relaxation. A branch-and-cut algorithm is also introduced and tested on a large set of randomly generated instances. Then, very recently, the same authors proposed in Riera-Ledesma and Salazar-Gonzalez (2013) a branch-and-cut-and-price approach to address a generalization of the problem described in Riera-Ledesma and Salazar-Gonzalez (2012), taking into account bounds not only on the loading capacity but also on other resources.

The DC-MVTPP is NP-hard, as, other than the TPP, it generalizes also the Distance Constrained VRP (DC-VRP). Indeed, any DC-VRP instance can be solved as an unrestricted DC-MVTPP instance where each supplier offers a product that is not available from the remaining ones, and all products have to be purchased. To the best of our knowledge the problem has never been studied before. Nevertheless, it finds application in different relevant contexts. In addition to the procurement domain already described, the unrestricted DC-MVTPP can also be seen as a variant of the school bus routing problem described in Riera-Ledesma and Salazar-Gonzalez (2012), where instead of a limit on the capacity a time threshold is imposed on each vehicle route corresponding to the hard time window associated with school entrance.

The aim of this paper is to analyze the DC-MVTPP comparing different problem formulations requiring a polynomial number of constraints and to propose and test a branch-and-price approach, based on column generation, for the solution of a set partitioning formulation. The branch-and-price approach is compared with the solution found by the polynomial size formulations when solved with a state-of-the-art commercial solver.

The paper is organized as follows. In Section 2 we present different mathematical formulations of the problem, including a multi-commodity flow formulation, two different single commodity flow formulations, a three-index formulation using the Miller-Tucker-Zemlin generalization of subtour elimination constraints, and a set partitioning formulation. Section 3 is devoted to the description of the branch-and-price algorithm for the solution of the set partitioning formulation. Variables, representing feasible routes with respect to the distance bound, are dynamically generated. At each node of the branch-and-bound tree, while solving the LP relaxation of the problem, columns are priced out by means of a label setting algorithm addressing a Shortest Path Problem with Resource Constraints (SPPRC). Routes are imposed to be elementary at the set partitioning model level. An effective restricted master heuristic is used to prune the tree.

We tested the branch-and-price algorithm and the best performing polynomial size formulations solved with CPLEX on a new set of benchmark instances derived from those proposed in Riera-Ledesma and Salazar-Gonzalez (2006) for the asymmetric TPP (ATPP). For each ATPP instance, four DC-MVTPP instances have been generated in such a way that the average number of vehicles required in the solution of the ith instance, i
                     =1, 2, 3, is 2
                        i
                     . Section 4 reports all the computational results and shows the effectiveness of the proposed solution approaches. We have been able to optimally solve asymmetric instances both restricted and unrestricted with up to 100 suppliers and 200 products, setting a maximum running time of one hour. Notably, the optimality gap is very small for all unsolved instances. We notice that the Miller-Tucker-Zemlin formulation is more effective than the multi-commodity flow formulation allowing CPLEX to massively use internal heuristics and to quickly converge towards good feasible solutions when the number of vehicles is low. The multi-commodity flow formulation, due to its large number of variables, usually takes a lot of time even to find a feasible solution. On the contrary, the single commodity flow formulations may result to be a better compromise in practice, allowing to get more quickly good feasible solutions. In Section 5 final considerations are drawn.

In this section we analyze alternative formulations for the DC-MVTPP. We start with a three-index vehicle flow formulation. Then we introduce different polynomial size formulations including a multi-commodity and two single commodity flow formulations, as well as a three-index formulation using a Miller-Tucker-Zemlin (MTZ) generalization of subtour elimination constraints. Finally, we terminate the section with a set partitioning formulation.

The three-index vehicle flow formulation uses O(m
                        2∣F∣) binary variables x to indicate whether an arc is traversed in a feasible solution and by which vehicle, and O(m∣F∣) binary variables to indicate which suppliers are visited by which vehicle. More precisely, the following decision variables are defined:
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                x
                                             
                                             
                                                ij
                                             
                                             
                                                f
                                             
                                          
                                          ≔
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            1
                                                         
                                                         
                                                            if
                                                            
                                                            arc
                                                            
                                                            (
                                                            i
                                                            ,
                                                            j
                                                            )
                                                            
                                                            is
                                                            
                                                            selected
                                                            
                                                            in
                                                            
                                                            route
                                                            
                                                            of
                                                            
                                                            vehicle
                                                            
                                                            f
                                                         
                                                      
                                                      
                                                         
                                                            0
                                                         
                                                         
                                                            otherwise
                                                            ;
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                          ,
                                          f
                                          ∈
                                          F
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                    
                                       f
                                    
                                 
                                 ≔
                                 
                                    
                                       
                                          
                                             
                                                
                                                   1
                                                
                                                
                                                   if
                                                   
                                                   supplier
                                                   
                                                   i
                                                   
                                                   is
                                                   
                                                   visited
                                                   
                                                   by
                                                   
                                                   vehicle
                                                   
                                                   f
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   otherwise
                                                   ;
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                 i
                                 ∈
                                 M
                                 ,
                                 f
                                 ∈
                                 F
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 ≔
                                 
                                    
                                       
                                          
                                             
                                                
                                                   1
                                                
                                                
                                                   if
                                                   
                                                   supplier
                                                   
                                                   i
                                                   
                                                   is
                                                   
                                                   selected
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   otherwise
                                                   ;
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                 i
                                 ∈
                                 M
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       z
                                    
                                    
                                       ki
                                    
                                 
                                 ⩾
                                 0
                                 
                                 quantity
                                 
                                 of
                                 
                                 product
                                 
                                 k
                                 
                                 purchased
                                 
                                 from
                                 
                                 supplier
                                 
                                 i
                                 
                                 
                                 k
                                 ∈
                                 K
                                 ,
                                 
                                 i
                                 ∈
                                 
                                    
                                       M
                                    
                                    
                                       k
                                    
                                 
                              
                           
                        
                     

For any S
                        ⊂
                        V, let δ
                        +(S) (δ
                        −(S)) denote the set {(i, j)∈
                        A: i
                        ∈
                        S, j
                        ∈
                        V⧹S} ({(i, j)∈
                        A: i
                        ∈
                        V⧹S, j
                        ∈
                        S}). The DC-MVTPP can be formulated as follows:
                           
                              (1)
                              
                                 
                                    min
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          f
                                          ∈
                                          F
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                    
                                       f
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          
                                             
                                                M
                                             
                                             
                                                k
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       ki
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       ki
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 s
                                 .
                                 t
                                 .
                                 :
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          f
                                          ∈
                                          F
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          0
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       0
                                       j
                                    
                                    
                                       f
                                    
                                 
                                 =
                                 ϕ
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          {
                                          i
                                          }
                                          )
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                    
                                       f
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          j
                                          ,
                                          i
                                          )
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                -
                                             
                                          
                                          (
                                          {
                                          i
                                          }
                                          )
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ji
                                    
                                    
                                       f
                                    
                                 
                                 =
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                    
                                       f
                                    
                                 
                                 
                                 i
                                 ∈
                                 M
                                 ,
                                 f
                                 ∈
                                 F
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          f
                                          ∈
                                          F
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                    
                                       f
                                    
                                 
                                 
                                 i
                                 ∈
                                 M
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          S
                                          )
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                    
                                       f
                                    
                                 
                                 ⩾
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                    
                                       f
                                    
                                 
                                 
                                 S
                                 ⊆
                                 M
                                 ,
                                 S
                                 ≠
                                 ∅
                                 ,
                                 i
                                 ∈
                                 S
                                 ,
                                 f
                                 ∈
                                 F
                              
                           
                        
                        
                           
                              (6)
                              
                                 (
                                 DC
                                 -
                                 MVTPP
                                 )
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                    
                                       f
                                    
                                 
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       max
                                    
                                 
                                 
                                 f
                                 ∈
                                 F
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          
                                             
                                                M
                                             
                                             
                                                k
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       ki
                                    
                                 
                                 ⩾
                                 
                                    
                                       d
                                    
                                    
                                       k
                                    
                                 
                                 
                                 k
                                 ∈
                                 K
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       z
                                    
                                    
                                       ki
                                    
                                 
                                 ⩽
                                 
                                    
                                       q
                                    
                                    
                                       ki
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 
                                 k
                                 ∈
                                 K
                                 ,
                                 i
                                 ∈
                                 
                                    
                                       M
                                    
                                    
                                       k
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 1
                                 ⩽
                                 ϕ
                                 ⩽
                                 |
                                 F
                                 |
                                 
                                 and
                                 
                                 integer
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                    
                                       f
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                                 ,
                                 f
                                 ∈
                                 F
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                    
                                       f
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 i
                                 ∈
                                 M
                                 ,
                                 f
                                 ∈
                                 F
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 i
                                 ∈
                                 M
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                    
                                       z
                                    
                                    
                                       ik
                                    
                                 
                                 ⩾
                                 0
                                 
                                 k
                                 ∈
                                 K
                                 ,
                                 i
                                 ∈
                                 
                                    
                                       M
                                    
                                    
                                       k
                                    
                                 
                              
                           
                        
                     

Objective function (1) establishes the minimization of the routing and purchasing costs. The set of constraints (2)–(4) ensures that exactly ϕ vehicles will be used for the service and that each supplier i belonging to the solution (i.e. y
                        
                           i
                        
                        =1) will be visited exactly once and by only one vehicle 
                           
                              
                                 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             i
                                          
                                       
                                       =
                                       
                                          
                                             ∑
                                          
                                          
                                             f
                                             ∈
                                             F
                                          
                                       
                                       
                                          
                                             y
                                          
                                          
                                             i
                                          
                                          
                                             f
                                          
                                       
                                    
                                 
                              
                           
                        . Constraints (5) impose the connectivity of the route performed by vehicle f, whereas inequalities (6) are distance constraints on the routes. Inequality (9) establishes that the number of used vehicles cannot exceed the fleet size. Constraints (7) guarantee that the demand d
                        
                           k
                         is satisfied for each product k
                        ∈
                        K, whereas due to inequalities (8) it is not possible to purchase a product k from an unvisited supplier or to buy an amount greater than the quantity available q
                        
                           ki
                         at a visited one. Constraints (10)–(13) are binary, integer and non-negativity conditions on the variables.

Note that variable ϕ and variables y
                        
                           i
                        , i
                        ∈
                        M, are introduced for the sake of clarity. They are not strictly necessary and could be eliminated from the formulation.

Connectivity constraints (5) are exponential in number. Since it is not computationally possible to introduce all such constraints in a MIP solver model, they are usually removed from the formulation and a separation algorithm solving a min-cut max-flow problem (see, for instance, Goldberg & Tarjan (1988)) is used to add only violated inequalities. In the following subsections we present alternative formulations for the DC-MVTPP where the number of constraints, although large, remains polynomial thus avoiding the recourse to separation algorithms.

In the commodity flow models, the connectivity requirement expressed by constraints (5) is imposed through a set of continuous variables representing the flow of one or more “commodities” from the depot to the suppliers.

In the multi-commodity flow formulation each supplier can be seen as a terminal for a specific commodity. The commodity flow variables v
                           
                              ft
                            describe the unitary flow path for commodity t (i.e. the unitary flow path for the commodity that has to be sent to terminal/supplier t
                           ∈
                           M) when the commodity is transported by vehicle 
                              
                                 f
                                 ∈
                                 F
                                 
                                    
                                       
                                          
                                             
                                                v
                                             
                                             
                                                ft
                                             
                                          
                                          =
                                          
                                             
                                                v
                                             
                                             
                                                ij
                                             
                                             
                                                ft
                                             
                                          
                                          ,
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                              
                           . The feasible region defined by the connectivity constraints (5) can be described by constraints:
                              
                                 (14)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   +
                                                
                                             
                                             (
                                             {
                                             i
                                             }
                                             )
                                          
                                       
                                    
                                    
                                       
                                          v
                                       
                                       
                                          ij
                                       
                                       
                                          ft
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   -
                                                
                                             
                                             (
                                             {
                                             i
                                             }
                                             )
                                          
                                       
                                    
                                    
                                       
                                          v
                                       
                                       
                                          ji
                                       
                                       
                                          ft
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            t
                                                         
                                                         
                                                            f
                                                         
                                                      
                                                   
                                                   
                                                      if
                                                      
                                                      i
                                                      =
                                                      0
                                                   
                                                
                                                
                                                   
                                                      0
                                                   
                                                   
                                                      if
                                                      
                                                      i
                                                      ≠
                                                      0
                                                      ,
                                                      i
                                                      ≠
                                                      t
                                                   
                                                
                                                
                                                   
                                                      -
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            t
                                                         
                                                         
                                                            f
                                                         
                                                      
                                                   
                                                   
                                                      if
                                                      
                                                      i
                                                      =
                                                      t
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                    f
                                    ∈
                                    F
                                    ,
                                    t
                                    ∈
                                    M
                                    ,
                                    i
                                    ∈
                                    V
                                 
                              
                           
                           
                              
                                 (15)
                                 
                                    
                                       
                                          v
                                       
                                       
                                          ij
                                       
                                       
                                          ft
                                       
                                    
                                    ⩽
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                       
                                       
                                          f
                                       
                                    
                                    
                                    f
                                    ∈
                                    F
                                    ,
                                    t
                                    ∈
                                    M
                                    ,
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    A
                                 
                              
                           
                           
                              
                                 (16)
                                 
                                    0
                                    ⩽
                                    
                                       
                                          v
                                       
                                       
                                          ij
                                       
                                       
                                          ft
                                       
                                    
                                    ⩽
                                    1
                                    
                                    f
                                    ∈
                                    F
                                    ,
                                    t
                                    ∈
                                    M
                                    ,
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    A
                                 
                              
                           For a vehicle f
                           ∈
                           F and a commodity t
                           ∈
                           M, constraints (14) are the flow conservation constraints for the unitary flow path of commodity t if the commodity is transported by vehicle f (i.e. if the supplier t is served by vehicle f). For a given vehicle f, these constraints characterize a tree rooted at the depot. Thanks to the degree constraints (3), together with constraints (15), the tree associated with each vehicle due to constraints (14) is imposed to be part of an elementary tour starting and ending at the depot. In the following we will refer to model (1)–(4), (6)–(13), (14)–(16) as (MCF) formulation.

The problem can also be modeled as three-index single commodity formulation. With respect to (MCF) formulation the number of variables reduces and the connectivity constraints (5) are now described by constraints:
                              
                                 (17)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   +
                                                
                                             
                                             (
                                             {
                                             i
                                             }
                                             )
                                          
                                       
                                    
                                    
                                       
                                          v
                                       
                                       
                                          ij
                                       
                                       
                                          f
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   -
                                                
                                             
                                             (
                                             {
                                             i
                                             }
                                             )
                                          
                                       
                                    
                                    
                                       
                                          v
                                       
                                       
                                          ji
                                       
                                       
                                          f
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               ∑
                                                            
                                                            
                                                               r
                                                               ∈
                                                               M
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            r
                                                         
                                                         
                                                            f
                                                         
                                                      
                                                   
                                                   
                                                      if
                                                      
                                                      i
                                                      =
                                                      0
                                                   
                                                
                                                
                                                   
                                                      -
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            i
                                                         
                                                         
                                                            f
                                                         
                                                      
                                                   
                                                   
                                                      if
                                                      
                                                      i
                                                      ∈
                                                      M
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                    f
                                    ∈
                                    F
                                    ,
                                    i
                                    ∈
                                    V
                                 
                              
                           
                           
                              
                                 (18)
                                 
                                    0
                                    ⩽
                                    
                                       
                                          v
                                       
                                       
                                          ij
                                       
                                       
                                          f
                                       
                                    
                                    ⩽
                                    |
                                    M
                                    |
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                       
                                       
                                          f
                                       
                                    
                                    
                                    f
                                    ∈
                                    F
                                    ,
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    A
                                 
                              
                           For each vehicle f
                           ∈
                           F, the flow conservation constraints (17) establish that a commodity flow equal to the number of suppliers visited in the path by vehicle f will leave the depot, and that exactly one unit will be absorbed by each visited supplier in such a path. Constraints (18) imply that a flow for a given vehicle f can be sent along an arc (i, j) only if the arc has been traversed (i.e. only if 
                              
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                    
                                       f
                                    
                                 
                                 =
                                 1
                              
                           ). We will refer to model (1)–(4), (6)–(13), (17) and (18) as (SCF) formulation.

An alternative single commodity flow formulation can be obtained assuming that a single product is sent from the depot in an amount equal to the total demand 
                              
                                 D
                                 =
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       ∈
                                       K
                                    
                                 
                                 
                                    
                                       d
                                    
                                    
                                       k
                                    
                                 
                              
                            and is absorbed by each visited supplier i in an amount equal to the quantity purchased 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       ∈
                                       K
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       ki
                                    
                                 
                              
                           . This formulation has been analyzed in Riera-Ledesma and Salazar-Gonzalez (2012) for the unrestricted multi-vehicle TPP with capacity constraint. We generalize it to the restricted case, replacing the connectivity constraints (5) with the following set of constraints:
                              
                                 (19)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   +
                                                
                                             
                                             (
                                             {
                                             i
                                             }
                                             )
                                          
                                       
                                    
                                    
                                       
                                          v
                                       
                                       
                                          ij
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   -
                                                
                                             
                                             (
                                             {
                                             i
                                             }
                                             )
                                          
                                       
                                    
                                    
                                       
                                          v
                                       
                                       
                                          ji
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      if
                                                      
                                                      i
                                                      =
                                                      0
                                                   
                                                
                                                
                                                   
                                                      -
                                                      
                                                         
                                                            
                                                               ∑
                                                            
                                                            
                                                               k
                                                               ∈
                                                               K
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            z
                                                         
                                                         
                                                            ki
                                                         
                                                      
                                                   
                                                   
                                                      if
                                                      
                                                      i
                                                      ∈
                                                      M
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                    i
                                    ∈
                                    V
                                 
                              
                           
                           
                              
                                 (20)
                                 
                                    0
                                    ⩽
                                    
                                       
                                          v
                                       
                                       
                                          ij
                                       
                                    
                                    ⩽
                                    D
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             f
                                             ∈
                                             F
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                       
                                       
                                          f
                                       
                                    
                                    
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    A
                                 
                              
                           
                        

Each variable v
                           
                              ij
                            represents the commodity flow along arc (i, j)∈
                           A that, when positive, will be associated to exactly one vehicle through constraints (20) and (3), (4), (11), (12). Constraints (19) are usual flow balance constraints. The flow variables will define a number of paths stemming from the depot exactly equal to the number of optimal routes and each path will establish a sequence of suppliers that will be imposed to be part of an elementary tour starting and ending at the depot. In the following we will refer to model (1)–(4), (6)–(13), (19) and (20) as (SCF-D) formulation, where D stands for the total demand involved in the formulation.

A further alternative to the use of an exponential number of constraints as in (5) is to use polynomial size Miller–Tucker–Zemlin subtour elimination constraints (see Miller, Tucker, & Zemlin, 1960). These constraints have been introduced for the Traveling Salesman Problem but can be easily generalized to the multiple vehicle case applying them to each vehicle f
                        ∈
                        F as follows:
                           
                              (21)
                              
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                    
                                       f
                                    
                                 
                                 -
                                 
                                    
                                       u
                                    
                                    
                                       j
                                    
                                    
                                       f
                                    
                                 
                                 +
                                 |
                                 M
                                 |
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                    
                                       f
                                    
                                 
                                 ⩽
                                 |
                                 M
                                 |
                                 -
                                 1
                                 
                                 i
                                 ,
                                 j
                                 ∈
                                 M
                                 ,
                                 i
                                 ≠
                                 j
                              
                           
                        where 
                           
                              
                                 
                                    u
                                 
                                 
                                    i
                                 
                                 
                                    f
                                 
                              
                              ,
                              i
                              ∈
                              M
                           
                        , is a continuous variable representing the total number of suppliers visited by vehicle f when leaving supplier i.

In our implementation we introduce C
                        
                           max
                         in constraints (21) substituting both the connectivity constraints (5) and the distance bound constraints (6) with the following constraints defined for each f
                        ∈
                        F:
                           
                              (22)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                   u
                                                
                                                
                                                   i
                                                
                                                
                                                   f
                                                
                                             
                                             -
                                             
                                                
                                                   u
                                                
                                                
                                                   j
                                                
                                                
                                                   f
                                                
                                             
                                             +
                                             (
                                             
                                                
                                                   C
                                                
                                                
                                                   max
                                                
                                             
                                             +
                                             
                                                
                                                   c
                                                
                                                
                                                   ij
                                                
                                             
                                             )
                                             
                                                
                                                   x
                                                
                                                
                                                   ij
                                                
                                                
                                                   f
                                                
                                             
                                             ⩽
                                             
                                                
                                                   C
                                                
                                                
                                                   max
                                                
                                             
                                             
                                             i
                                             ,
                                             j
                                             ∈
                                             M
                                             ,
                                             i
                                             ≠
                                             j
                                             :
                                             
                                                
                                                   c
                                                
                                                
                                                   0
                                                   i
                                                
                                             
                                             +
                                             
                                                
                                                   c
                                                
                                                
                                                   ij
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                             +
                                             
                                                
                                                   c
                                                
                                                
                                                   j
                                                   0
                                                
                                             
                                             ⩽
                                             
                                                
                                                   C
                                                
                                                
                                                   max
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (23)
                              
                                 
                                    
                                       c
                                    
                                    
                                       0
                                       i
                                    
                                 
                                 ⩽
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                    
                                       f
                                    
                                 
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       max
                                    
                                 
                                 -
                                 
                                    
                                       c
                                    
                                    
                                       i
                                       0
                                    
                                 
                                 
                                 i
                                 ∈
                                 M
                              
                           
                        where each variable 
                           
                              
                                 
                                    u
                                 
                                 
                                    i
                                 
                                 
                                    f
                                 
                              
                           
                        , i
                        ∈
                        M, represents now the time duration of the route assigned to vehicle f when leaving supplier i. Variable 
                           
                              
                                 
                                    u
                                 
                                 
                                    i
                                 
                                 
                                    f
                                 
                              
                           
                         cannot assume a value greater than C
                        
                           max
                        
                        −
                        c
                        
                           i0 due to constraint (23). This means that the duration of the route assigned to vehicle f will be never greater than C
                        
                           max
                        . In the following we will refer to model (1)–(4), (7)–(13), (22) and (23) as (MTZ) formulation.

The set partitioning formulation makes use of an exponential number of variables, each associated with a different feasible route. In order to define the set partitioning model for the DC-MVTPP, we adopt the following notation. We define R as the set of all feasible routes. A route corresponds to a non-empty circuit in graph G from/to the depot. A route is thus defined as a set of arcs. For each route r
                        ∈
                        R, let 
                           
                              
                                 
                                    c
                                 
                                 
                                    r
                                 
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    r
                                 
                              
                              
                                 
                                    c
                                 
                                 
                                    ij
                                 
                              
                           
                         be the distance (travel time) associated with the route. Then let 
                           
                              
                                 
                                    a
                                 
                                 
                                    i
                                 
                                 
                                    r
                                 
                              
                           
                         and 
                           
                              
                                 
                                    b
                                 
                                 
                                    ij
                                 
                                 
                                    r
                                 
                              
                           
                         be binary coefficients equal to 1 if, along route r, supplier i
                        ∈
                        M is visited and arc (i, j)∈
                        A is traversed, respectively, and 0 otherwise. The DC-MVTPP can be formulated as follows:
                           
                              (24)
                              
                                 
                                    min
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       r
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          
                                             
                                                M
                                             
                                             
                                                k
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       ki
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       ki
                                    
                                 
                              
                           
                        
                        
                           
                              (25)
                              
                                 s
                                 .
                                 t
                                 .
                                 :
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       a
                                    
                                    
                                       i
                                    
                                    
                                       r
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 =
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 
                                 i
                                 ∈
                                 M
                              
                           
                        
                        
                           
                              (26)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       b
                                    
                                    
                                       ij
                                    
                                    
                                       r
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 =
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                              
                           
                        
                        
                           
                              (27)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 =
                                 ϕ
                              
                           
                        
                        
                           
                              (28)
                              
                                 1
                                 ⩽
                                 ϕ
                                 ⩽
                                 |
                                 F
                                 |
                                 
                                 and
                                 
                                 integer
                              
                           
                        
                        
                           
                              (29)
                              
                                 
                                    
                                       z
                                    
                                    
                                       ki
                                    
                                 
                                 ⩽
                                 
                                    
                                       q
                                    
                                    
                                       ki
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 
                                 k
                                 ∈
                                 K
                                 ,
                                 i
                                 ∈
                                 
                                    
                                       M
                                    
                                    
                                       k
                                    
                                 
                              
                           
                        
                        
                           
                              (30)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          
                                             
                                                M
                                             
                                             
                                                k
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       ki
                                    
                                 
                                 ⩾
                                 
                                    
                                       d
                                    
                                    
                                       k
                                    
                                 
                                 
                                 k
                                 ∈
                                 K
                              
                           
                        
                        
                           
                              (31)
                              
                                 
                                    
                                       z
                                    
                                    
                                       ki
                                    
                                 
                                 ⩾
                                 0
                                 
                                 k
                                 ∈
                                 K
                                 ,
                                 i
                                 ∈
                                 
                                    
                                       M
                                    
                                    
                                       k
                                    
                                 
                              
                           
                        
                        
                           
                              (32)
                              
                                 0
                                 ⩽
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 ⩽
                                 1
                                 
                                 r
                                 ∈
                                 R
                              
                           
                        
                        
                           
                              (33)
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 i
                                 ∈
                                 M
                              
                           
                        
                        
                           
                              (34)
                              
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                              
                           
                        where binary variables x
                        
                           ij
                         are equal to 1 if the corresponding arcs are traversed by a vehicle, and 0 otherwise, and variables λ
                        
                           r
                         represent the flow of the vehicles along routes r
                        ∈
                        R. In particular, constraints (26), (32), and (34) imply the λ
                        
                           r
                         variable be equal to 1 if route r
                        ∈
                        R is assigned to a vehicle, and 0 otherwise. The objective function (24) aims at minimizing the routing and purchasing costs. Constraints (25), together with (33), ensure that each supplier i belonging to the solution (y
                        
                           i
                        
                        =1) will be visited exactly once. Constraints (27) and (28) bound the number of vehicles that can be used. Finally, constraints (29) guarantee the feasibility of the purchasing process, whereas constraints (30) ensure to meet the demand for all the products.

In the following we illustrate the algorithm used to address the set partitioning formulation described in Section 2.4. From now on, we will refer to model (24)–(34) as the master problem (MP). The number of λ
                     
                        r
                      variables characterizing the MP, i.e. the number of feasible routes that can be assigned to the vehicles, is exponential and, even for small size instances, solving the problem explicitly is impractical. We thus design a branch-and-price algorithm (see Barnhart, Johnson, Nemhauser, Savelsbergh, & Vance (1998) and Desaulniers, Desrosiers, & Solomon (2005)). At each node of the branch-and-bound tree, λ
                     
                        r
                      variables are generated by means of column generation while addressing the linear relaxation of the problem associated with the node. We denote the linear relaxation of the MP, restricted to a subset of columns, as RLMP. At each column generation iteration, a pricing problem, also called subproblem, is solved in order to generate negative reduced cost variables to be added to the RLMP. When no negative reduced cost variable is found it means that the linear relaxation of the MP (LMP) has been solved to optimality and the column generation algorithm ends. Branching rules are applied to recover feasibility when the solution of the LMP is fractional. In the following subsections, the main components of the algorithm will be illustrated in detail.

Given the solution values for the dual variables μ
                        
                           i
                        , ρ
                        
                           ij
                        , and η associated with constraints (25), (26), and convexity constraint (27) of the RLMP, respectively, the pricing subproblem at the root node can be modeled as follows:
                           
                              (35)
                              
                                 
                                    min
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             c
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       X
                                    
                                    
                                       ij
                                    
                                 
                              
                           
                        
                        
                           
                              (36)
                              
                                 s
                                 .
                                 t
                                 .
                                 :
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          M
                                       
                                    
                                 
                                 
                                    
                                       X
                                    
                                    
                                       0
                                       j
                                    
                                 
                                 =
                                 1
                              
                           
                        
                        
                           
                              (37)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          {
                                          i
                                          }
                                          )
                                       
                                    
                                 
                                 
                                    
                                       X
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          j
                                          ,
                                          i
                                          )
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                -
                                             
                                          
                                          (
                                          {
                                          i
                                          }
                                          )
                                       
                                    
                                 
                                 
                                    
                                       X
                                    
                                    
                                       ji
                                    
                                 
                                 =
                                 
                                    
                                       Y
                                    
                                    
                                       i
                                    
                                 
                                 
                                 i
                                 ∈
                                 M
                              
                           
                        
                        
                           
                              (38)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          S
                                          )
                                       
                                    
                                 
                                 
                                    
                                       X
                                    
                                    
                                       ij
                                    
                                 
                                 ⩾
                                 
                                    
                                       Y
                                    
                                    
                                       i
                                    
                                 
                                 
                                 S
                                 ⊆
                                 M
                                 ,
                                 S
                                 ≠
                                 ∅
                                 ,
                                 i
                                 ∈
                                 S
                              
                           
                        
                        
                           
                              (39)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       X
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 
                                    
                                       C
                                    
                                    
                                       max
                                    
                                 
                              
                           
                        
                        
                           
                              (40)
                              
                                 
                                    
                                       Y
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 i
                                 ∈
                                 M
                              
                           
                        
                        
                           
                              (41)
                              
                                 
                                    
                                       X
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                              
                           
                        where 
                           
                              
                                 
                                    
                                       
                                          c
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    ij
                                 
                              
                           
                         is the reduced cost of arc (i, j)∈
                        A (
                           
                              
                                 
                                    
                                       
                                          c
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    ij
                                 
                              
                              =
                              
                                 
                                    c
                                 
                                 
                                    ij
                                 
                              
                              -
                              
                                 
                                    ρ
                                 
                                 
                                    ij
                                 
                              
                              -
                              
                                 
                                    μ
                                 
                                 
                                    j
                                 
                              
                           
                         if j
                        ≠0, 
                           
                              
                                 
                                    
                                       
                                          c
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    ij
                                 
                              
                              =
                              
                                 
                                    c
                                 
                                 
                                    ij
                                 
                              
                              -
                              
                                 
                                    ρ
                                 
                                 
                                    ij
                                 
                              
                              -
                              η
                           
                         if j
                        =0), X
                        
                           ij
                         is a binary variable equal to 1 if arc (i, j)∈
                        A is traversed, 0 otherwise, and Y
                        
                           i
                         is a binary variable equal to 1 if supplier i
                        ∈
                        M is visited, 0 otherwise. The objective function (35) aims at minimizing the reduced cost of the route. Constraints (36) and (37) are the degree constraints. Constraints (38) are subtour elimination constraints while (39) impose the distance constraint for the route. The pricing problem corresponds to an Elementary Shortest Path Problem with Resource Constraint (ESPPRC). For the basic concepts concerning the ESPPRC, as well as its solution techniques, the reader is referred to Feillet, Dejax, Gendreau, and Gueguen (2004) and to Irnich and Villeneuve (2006).

As the ESPPRC is NP-hard in the strong sense (see Dror (1994)), we decided to allow paths containing cycles by relaxing constraints (38). This does not affect the correctness of the overall approach and generates a remarkable decrease of the computational time. The resulting Shortest Path Problem with Resource Constraints (SPPRC) is solved by means of a label setting dynamic programming algorithm. With each partial path reaching node i a label (σ, τ, C, i) is associated, where σ is the number of suppliers visited along the path, τ is the distance covered up to node i, and C is the reduced cost of the partial path. The partial path is feasible if σ
                        ⩽∣M∣ and τ
                        ⩽
                        C
                        
                           max
                        . Partial paths that cannot be extended into Pareto-optimal paths are discarded by applying dominance rules. Partial path (σ′, τ′, C′, i) is said to dominate partial path (σ″, τ″, C″, i) if σ′⩽
                        σ″, τ′⩽
                        τ″, and C′⩽
                        C″.

In the label setting algorithm extended labels are kept without modification until the end of the labeling process. We implemented the set of the efficient labels associated with each node by means of an array of ∣M∣+1 buckets, where each bucket is a doubly linked list in which labels are kept in non-decreasing order according to their cost. The ith bucket of the array includes labels associated with partial paths characterized by a number of visited suppliers equal to i. Then, with each array element we also associated the minimum and the maximum cost of the labels in the corresponding list. The algorithm performs ∣M∣ iterations and at each iteration i
                        ∈{0, …, ∣M∣−1}, all partial paths associated with a number of visited suppliers equal to i are extended. Thanks to this implementation, when a new label is created, we can save a significant amount of time while looking for dominant and dominated labels.

In order to strength the computed solution value, we embedded in the label setting algorithm the 2-cycle elimination technique proposed in Christofides, Mingozzi, and Toth (1981).

Finally, in order to speed up the convergence process of the column generation algorithm we provided a pricing problem heuristic solution scheme. It consists in applying the label setting algorithm to a subgraph G′, obtained from G, where, for each supplier node, only 
                           
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    a
                                 
                              
                           
                         outgoing arcs, those associated with lowest reduced cost values, towards other supplier nodes are considered.

At each node of the branch-and-bound tree we initialize the RLMP with a high cost dummy column through which all the MP constraints are satisfied. This column is kept in the RLMP until feasibility is reached. At the root node we insert a column for each feasible path visiting a single supplier or pairs of suppliers. In non-root nodes we insert instead all the columns generated so far that are feasible with respect to the branching constraints.

The set 
                           
                              
                                 
                                    R
                                 
                                 
                                    ∼
                                 
                              
                           
                         of negative reduced cost columns found by solving the pricing problem, and to be added to the RLMP, is defined as follows. 
                           
                              
                                 
                                    R
                                 
                                 
                                    ∼
                                 
                              
                           
                         is initialized with the best column found. Then, at most 
                           
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    S
                                 
                              
                           
                         subsets of negative reduced columns are included in 
                           
                              
                                 
                                    R
                                 
                                 
                                    ∼
                                 
                              
                           
                        , with a maximum number 
                           
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    m
                                 
                              
                           
                         of columns. Each subset is defined as follows. The columns that are not in 
                           
                              
                                 
                                    R
                                 
                                 
                                    ∼
                                 
                              
                           
                         are considered in non-decreasing order of their reduced costs. A column is inserted in the subset if it has at least one node that is not covered (visited) by the columns previously inserted in the subset. The process stops when all nodes are covered by the columns in the subset, 
                           
                              |
                              
                                 
                                    R
                                 
                                 
                                    ∼
                                 
                              
                              |
                              =
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    m
                                 
                              
                           
                         or when there are no more available columns.

When no negative reduced cost column is found by solving the pricing problem to optimality, the column generation algorithm ends providing the optimal solution for the current RLMP and for the LMP as well. All the columns generated are stored in a pool to be used for subsequent RLMP initializations.

The column generation algorithm ends calling a restricted master heuristic. The heuristic will be described in detail in Section 3.4. The idea is to take advantage of the columns generated so far in order to obtain feasible solutions to the addressed problem.

The pseudo-code of the column generation algorithm is described in Algorithm 1.
                           Algorithm 1
                           Column generation algorithm for the solution of the LMP 
                                 
                                    
                                       
                                       
                                          
                                             
                                                Step 1. Initialize the RLMP with the subset 
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  R
                                                               
                                                               
                                                                  ∼
                                                               
                                                            
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                .
                                          
                                          
                                             
                                                Step 2. Solve the RLMP.
                                          
                                          
                                             
                                                Step 3. Solve the pricing problem heuristically. Let 
                                                   
                                                      
                                                         
                                                            R
                                                         
                                                         
                                                            ∼
                                                         
                                                      
                                                   
                                                 be the set of negative reduced cost columns found.
                                          
                                          
                                             
                                                if 
                                                
                                                   
                                                      
                                                         
                                                            R
                                                         
                                                         
                                                            ∼
                                                         
                                                      
                                                      ≠
                                                      ∅
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                Step 4. 
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  R
                                                               
                                                               
                                                                  ∼
                                                               
                                                            
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ←
                                                      
                                                         
                                                            
                                                               
                                                                  R
                                                               
                                                               
                                                                  ∼
                                                               
                                                            
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ∪
                                                      
                                                         
                                                            R
                                                         
                                                         
                                                            ∼
                                                         
                                                      
                                                   
                                                .
                                          
                                          
                                             
                                                
                                                Step 5. Go to Step 2.
                                          
                                          
                                             
                                                end if
                                             
                                          
                                          
                                             
                                                Step 6. Solve the pricing problem to optimality. Let 
                                                   
                                                      
                                                         
                                                            R
                                                         
                                                         
                                                            ∼
                                                         
                                                      
                                                   
                                                 be the set of negative reduced cost columns found.
                                          
                                          
                                             
                                                if 
                                                
                                                   
                                                      
                                                         
                                                            R
                                                         
                                                         
                                                            ∼
                                                         
                                                      
                                                      ≠
                                                      ∅
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                Step 7. 
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  R
                                                               
                                                               
                                                                  ∼
                                                               
                                                            
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ←
                                                      
                                                         
                                                            
                                                               
                                                                  R
                                                               
                                                               
                                                                  ∼
                                                               
                                                            
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ∪
                                                      
                                                         
                                                            R
                                                         
                                                         
                                                            ∼
                                                         
                                                      
                                                   
                                                .
                                          
                                          
                                             
                                                
                                                Step 8. Go to Step 2.
                                          
                                          
                                             
                                                end if
                                             
                                          
                                          
                                             
                                                Step 9. Store the optimal solution of the current RLMP, which is optimal for the LMP.
                                          
                                          
                                             
                                                Step 10. Apply the restricted master heuristic.
                                          
                                       
                                    
                                 
                              
                           

As the optimal solution of the LMP may be fractional, branching may be needed. To this aim three types of branching rules are hierarchically evaluated, namely, branching on the total number of vehicles used, on the visit to a supplier, and on the total flow on an arc. In all rules, two nodes are created by performing a dichotomized branching.

Let 
                           
                              (
                              
                                 
                                    ϕ
                                 
                                 
                                    ˆ
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    ˆ
                                 
                              
                              ,
                              
                                 
                                    x
                                 
                                 
                                    ˆ
                                 
                              
                              )
                           
                         be the optimal fractional solution of the current LMP. We first evaluate the possibility to branch on the number of vehicles. If 
                           
                              
                                 
                                    ϕ
                                 
                                 
                                    ˆ
                                 
                              
                           
                         is integer, then we check whether 
                           
                              
                                 
                                    
                                       
                                          y
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                           
                         is fractional for some i
                        ∈
                        M. If a fractional 
                           
                              
                                 
                                    
                                       
                                          y
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                           
                         exists, branching is performed on the visit to a supplier setting y
                        
                           i
                        
                        =1 in one case, and y
                        
                           i
                        
                        =0 in the other one. In particular, when y
                        
                           i
                         is set to 1, if supplier i offers product k at the lowest price we set z
                        
                           ki
                        
                        =min{d
                        
                           k
                        , q
                        
                           ki
                        } and, if q
                        
                           ki
                        
                        ⩾
                        d
                        
                           k
                        , we remove all variables 
                           
                              
                                 
                                    z
                                 
                                 
                                    
                                       
                                          ki
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                        , i′≠
                        i, from the master problem. When the former branching rules cannot be applied, we finally evaluate the possibility to branch on the flow on an arc. If 
                           
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    ij
                                 
                              
                           
                         is fractional for some (i, j)∈
                        A, branching is performed and the graph G on which we solve the pricing problem is modified accordingly. Again, when x
                        
                           ij
                         is set to 1, for each of the corresponding arc endpoints representing a supplier node, we check whether it is possible to fix variables in the same way as when y
                        
                           i
                         is set to 1.

When multiple fractional values exist while evaluating the second and the third branching rule, the one closest to 0.5 is selected. Moreover, it is worth noting that the last branching rule is sufficient to guarantee the integrality of all the variables. Finally, the search tree is explored according to a best-first strategy.

In order to speed up the convergence of the branch-and-price algorithm, as shown in Section 3.2, we embed in the column generation algorithm a restricted master heuristic (Joncour, Michel, Sadykov, Sverdlov, & Vanderbeck, 2010). The basic idea behind restricted master heuristics is to solve the MP, restricted to any subset of the generated columns, by means of a general solver. The solutions obtained give primal bounds which help in pruning the tree. The main issue to address while designing restricted master heuristics is to identify a suitable set of columns over which the MP is solved. To this aim we adopt the same technique described in (Archetti, Bianchessi, & Speranza, 2013).

Let 
                           
                              
                                 
                                    R
                                 
                                 
                                    ‾
                                 
                              
                           
                         denote the set of columns used in the restricted master heuristic. 
                           
                              
                                 
                                    R
                                 
                                 
                                    ‾
                                 
                              
                           
                         includes at most 
                           
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    O
                                 
                              
                           
                         subsets of columns. Each subset is defined as follows. Columns in RLMP and not yet inserted in 
                           
                              
                                 
                                    R
                                 
                                 
                                    ‾
                                 
                              
                           
                         are considered in non-decreasing order of reduced cost. A column is inserted in the subset if it has at most one supplier node that is visited by the columns previously inserted in the subset. The inclusion of columns into a subset ends when either all supplier nodes are covered by the columns inserted or when there are no more columns available. A postprocessing is applied to make the routes in 
                           
                              
                                 
                                    R
                                 
                                 
                                    ‾
                                 
                              
                           
                         cycle-free.

Parameter 
                           
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    O
                                 
                              
                           
                         is dynamically adjusted after each restricted master heuristic run. If the problem has been found infeasible, solved to optimality, or the solution found is close to the corresponding dual bound, 
                           
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    O
                                 
                              
                           
                         is increased. Otherwise, 
                           
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    O
                                 
                              
                           
                         is decreased. Increasing and decreasing are allowed provided that 
                           
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    O
                                 
                              
                           
                         does not assumes values less than 
                           
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    min
                                 
                              
                           
                         or greater than 
                           
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    max
                                 
                              
                           
                        .

The proposed models have been tested on a large set of instances. Since no instances are available in the literature for the DC-MVTPP we have modified two classes of benchmark instances introduced by Riera-Ledesma and Salazar-Gonzalez (2006) for the Asymmetric TPP.

The first class refers to unrestricted benchmark instances (i.e. d
                     
                        k
                     
                     =1 and q
                     
                        ki
                     
                     =1, k
                     ∈
                     K, i
                     ∈
                     M
                     
                        k
                     ), where c
                     
                        ij
                     , (i, j)∈
                     A, is randomly generated in [1, τ], with τ uniformly distributed in [15, 140]. Each supplier provides a number of products randomly generated in [1, ∣K∣], whereas purchasing prices are randomly generated in [0, ω] where ω is generated in [5, 75] for each supplier. The number of suppliers is set to {50, 100}, whereas the number of products ∣K∣ takes one of the following four values: 50, 100, 150, 200. For each pair 〈∣V∣, ∣K∣〉 5 instances are defined. This implies 2×4×5=40 instances. The second class considers restricted instances that differ from the previous ones since q
                     
                        ki
                      is now randomly generated in [1, 15] and 
                        
                           
                              
                                 d
                              
                              
                                 k
                              
                           
                           =
                           ⌈
                           λ
                           
                              
                                 max
                              
                              
                                 i
                                 ∈
                                 
                                    
                                       M
                                    
                                    
                                       k
                                    
                                 
                              
                           
                           
                              
                                 q
                              
                              
                                 ki
                              
                           
                           +
                           (
                           1
                           -
                           λ
                           )
                           
                              
                                 ∑
                              
                              
                                 i
                                 ∈
                                 
                                    
                                       M
                                    
                                    
                                       k
                                    
                                 
                              
                           
                           
                              
                                 q
                              
                              
                                 ki
                              
                           
                           ⌉
                        
                     , with λ
                     ∈{0.5, 0.8, 0.9, 0.99}. Again for each triplet 〈∣V∣, ∣K∣, λ〉 5 instances are defined. This implies 2×4×4×5=160 instances.

To transform these instances in new benchmark instances for the DC-MVTPP, for each pair 〈∣V∣, ∣K∣〉 of the first class and each triplet 〈∣V∣, ∣K∣, λ〉 of the second class we define the distance bound as 
                        
                           
                              
                                 C
                              
                              
                                 max
                              
                           
                           =
                           (
                           ⌈
                           ν
                           ∗
                           β
                           ⌉
                           +
                           1
                           )
                           ∗
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       (
                                       i
                                       ,
                                       j
                                       )
                                       ∈
                                       A
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                              
                              
                                 |
                                 A
                                 |
                              
                           
                        
                      and the number of vehicles 
                        
                           |
                           F
                           |
                           =
                           
                              
                                 
                                    
                                       
                                          ν
                                       
                                       
                                          ⌈
                                          ν
                                          ∗
                                          β
                                          ⌉
                                       
                                    
                                 
                              
                           
                        
                     , where ν is the average number of suppliers visited in the optimal solutions of the instances of the ATPP and β is, in percentage over ν, the expected average number of suppliers visited by each vehicle in the corresponding DC-MVTPP instance solutions, with β
                     ∈{0.5, 0.25, 0.125} (
                        
                           
                              
                                 1
                              
                              
                                 β
                              
                           
                        
                      is thus the expected number of vehicles to use in the corresponding DC-MVTPP instance solutions). The total number of solved unrestricted instances is 40×3=120 and of restricted ones is 160×3=480.

The branch-and-price algorithm was implemented in C++. The algorithm was run on Windows 7 operating system and compiled in release mode under Visual C++ 2010 Express Edition (32-bit version). The experiments were carried out on an Intel Xeon processor W3680, 3.33GHz machine with 12GB of RAM. CPLEX 12.2.0.2 (32-bit version) was used to solve the linear relaxation of the MPs and the restricted MPs of the restricted master heuristic. The overall execution time limit for each run was set to 1hour.

According to a preliminary testing phase we set the parameters of the branch-and-price algorithm as follows. The parameter 
                        
                           
                              
                                 
                                    
                                       n
                                    
                                    
                                       ¯
                                    
                                 
                              
                              
                                 a
                              
                           
                        
                     , considered while defining the subgraphs in the heuristic column generation phase, has been set to 12. The parameters 
                        
                           
                              
                                 
                                    
                                       n
                                    
                                    
                                       ¯
                                    
                                 
                              
                              
                                 S
                              
                           
                        
                      and 
                        
                           
                              
                                 
                                    
                                       n
                                    
                                    
                                       ¯
                                    
                                 
                              
                              
                                 m
                              
                           
                        
                     , that is the maximum number of column subsets and the maximum number of columns to insert in the RLMP after each solution of the pricing problem, have been set to 5 and to 
                        
                           
                              
                                 
                                    
                                       
                                          max
                                          (
                                          |
                                          K
                                          |
                                          ,
                                          |
                                          M
                                          |
                                          )
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                           
                        
                     . The time limit for a restricted master heuristic run has been set to 300 seconds. The parameter 
                        
                           
                              
                                 
                                    
                                       n
                                    
                                    
                                       ¯
                                    
                                 
                              
                              
                                 O
                              
                           
                        
                     , that is the maximum number of column subsets to be included in 
                        
                           
                              
                                 R
                              
                              
                                 ‾
                              
                           
                        
                     , is initially set to 150, with 
                        
                           
                              
                                 
                                    
                                       n
                                    
                                    
                                       ¯
                                    
                                 
                              
                              
                                 max
                              
                           
                        
                      and 
                        
                           
                              
                                 
                                    
                                       n
                                    
                                    
                                       ¯
                                    
                                 
                              
                              
                                 min
                              
                           
                        
                      equal to 15 and 150, respectively. When required, 
                        
                           
                              
                                 
                                    
                                       n
                                    
                                    
                                       ¯
                                    
                                 
                              
                              
                                 O
                              
                           
                        
                      is increased or decreased by 5. A feasible solution to the restricted MP is considered close to the corresponding dual bound if the gap is less than 5%.

All the polynomial size formulations have been addressed by using CPLEX 12.2.0.2, 32-bit version, with its default setting.

We decided to run some preliminary tests to identify the best performing formulations among those requiring a polynomial number of constraints. Since polynomial size formulations involve a large number of variables that grow with the number of suppliers and vehicles, we compared them on a small set of instances with few suppliers and possibly involving few vehicles.

We started with a subset of unrestricted instances with 50 suppliers, 50 and 100 products and up to 7 vehicles. Results are reported in Table 1
                        . The table provides results for all the tested basic formulations (namely, (MTZ), (SCF-D), (SCF), (MCF)) and for some variants. The first variant adds to the Miller-Tucker-Zemlin formulation the following valid inequalities:
                           
                              (42)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          0
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       0
                                       j
                                    
                                    
                                       f
                                    
                                 
                                 ⩾
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                    
                                       f
                                    
                                 
                                 
                                 i
                                 ∈
                                 M
                                 ,
                                 f
                                 ∈
                                 F
                              
                           
                        Constraints (42) impose that if a vehicle f is used (i.e. at least one supplier i is visited by vehicle f and 
                           
                              
                                 
                                    y
                                 
                                 
                                    i
                                 
                                 
                                    f
                                 
                              
                              >
                              0
                           
                        ) then the same vehicle has to leave the depot. We refer to the (MTZ) formulation with the addition of (42) as formulation (MTZ)+(42).

The other variants try to improve the performance of the single and multi-commodity flow formulations with the introduction of the following symmetry-breaking constraints that impose that vehicle f
                        +1 can be used only if vehicle f is used:
                           
                              (43)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          0
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       0
                                       j
                                    
                                    
                                       f
                                    
                                 
                                 ⩾
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          0
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       0
                                       j
                                    
                                    
                                       f
                                       +
                                       1
                                    
                                 
                                 
                                 f
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 |
                                 F
                                 |
                                 -
                                 1
                              
                           
                        We indicate such formulations as (SCF)+(43) and (MCF)+(43), respectively.

In Table 1, columns ‘
                           
                              
                                 
                                    
                                       
                                          z
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    ∗
                                 
                              
                           
                        ’ and ‘t’ provide the best upper bound (if the value corresponds to the optimal solution value, then the entry is highlighted in bold) and the time required to the branch-and-price algorithm to obtain it. Since we set a threshold computing time of 1 hour, a computational time lower than 3600 seconds corresponds to an optimal solution. Given a polynomial size formulation, we indicate as 
                           
                              
                                 
                                    z
                                 
                                 
                                    ¯
                                 
                              
                           
                         and 
                           z
                         the best integer solution value found within the time threshold and the optimal solution value of its linear programming (LP) relaxation, respectively. Then, columns ‘Δ%’ and ‘(gap%)’ show the percentage deviation of 
                           
                              
                                 
                                    z
                                 
                                 
                                    ¯
                                 
                              
                           
                         and 
                           z
                         with respect to 
                           
                              
                                 
                                    
                                       
                                          z
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    ∗
                                 
                              
                           
                        , computed as 
                           
                              (
                              
                                 
                                    z
                                 
                                 
                                    ¯
                                 
                              
                              -
                              
                                 
                                    
                                       
                                          z
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    ∗
                                 
                              
                              )
                              /
                              
                                 
                                    
                                       
                                          z
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    ∗
                                 
                              
                           
                         and 
                           
                              (
                              
                                 
                                    
                                       
                                          z
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    ∗
                                 
                              
                              -
                              
                                 
                                    z
                                 
                                 
                                    ̲
                                 
                              
                              )
                              /
                              
                                 
                                    
                                       
                                          z
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    ∗
                                 
                              
                           
                        , respectively. We indicate in column ‘t’ the time required to get the optimal solution. A symbol ‘–’ used in column ‘t’ means that the time limit of 1 hour has been reached, whereas in column ‘Δ%’ that no feasible solution has been found within such a time limit and thus no percentage deviation can be computed.

For all tested instances of Table 1 the branch-and-price approach is able to find the optimal solution. On the contrary, the basic formulation (MTZ) does not seem to be so effective. While solving this formulation with a time limit of 1 hour, CPLEX is unable to find the optimal solution (entries of column ‘Δ%’ are all different from zero) even if a feasible solution is usually found quite soon. The basic multi-commodity flow formulation (MCF) does not perform better usually taking a lot of time to find an optimal solution. While addressing this formulation, in most of the cases CPLEX is even unable to find a feasible solution within 1 hour. However, in the few cases where a feasible solution was found this was either the optimal solution or a very good one, thus confirming that the root relaxation of this formulation is quite strong. The introduction of symmetry-breaking constraints (43) for this formulation does not seem to have a well-defined effect. While using the (MCF)+(43) formulation, CPLEX solves three more instances to optimality and finds some new feasible solutions, but the time required to obtain the optimal solution is increased in one case (see first line of the table) and two previously solved instances are now unsolved. On the contrary the introduction of valid inequalities (42) provides a strong enforcement to the (MTZ) formulation allowing us to find the optimal solution in all but two instances within a very short computational time. In the instances not solved to optimality the feasible solutions found are already the optimal ones (the percentage deviation Δ% of the (MTZ)+(42) formulation solution is null for both these instances). Interestingly, the (SCF) performs very well also without symmetry breaking constraints, getting the optimal solutions in all but four instances. The introduction of inequalities (43) allows the formulation to close also these four instances and has a clear impact in terms of reduction of the computational time. Formulation (SCF-D), also with symmetry breaking constraints, does not perform as well as (SCF). The strongest bounds are provided by the (MCF) and (SCF-D) formulations. While the introduction of (42) has a strong effect on linear relaxation (compare (gap%) for (MTZ) and (MTZ)+(42)), the use of symmetry breaking does not seem to impact on linear relaxation.

Given the results shown in Table 1, we further tested the formulations finding the best results (namely, (MTZ)+(42), (SCF)+(43), (SCF-D)+(43) and (MCF)+(43)) on a subset of restricted instances involving 50 suppliers, all possible numbers of products from 50 to 200, λ
                        =0.9 and 2 vehicles. Results are shown in Table 2
                         and confirm (MTZ)+(42) and (SCF)+(43) as the best formulations getting the optimal solution in all instances in few seconds and with a time performance slightly better for formulation (MTZ)+(42). For three instances these formulations have been able to improve the solution found by the branch-and-price algorithm (see negative value for ‘Δ%’).

In this section we compare the results over all the instances obtained by the branch-and-price algorithm against those computed by CPLEX when addressing the two formulations (MTZ)+(42) and (SCF)+(43).


                        Table 3
                         concerns the unrestricted instances. Each row summarizes the results of 5 random instances with the same setting. The first three columns report the name of the setting, the average number of vehicles (column ‘∣F∣’) and the distance bound (column ‘C
                        
                           max
                        ’). The subsequent six columns provide information concerning the branch-and-price algorithm. Column ‘
                           z
                        
                        ∗(%)’ indicates the average percentage of the optimal value of the LMP at the root node of the branch-and-bound tree with respect to the best lower bound. Column ‘t’ gives the average root-node solution time. Column ‘# opt.’ indicates the number of instances solved to optimality, while the subsequent column ‘t’ reports the average solution time in seconds. Column ‘gap (%)’ gives the average percentage gap between the best lower and upper bounds for the not optimally solved instances. The number of instances not optimally solved, and associated with lower and upper bounds, appears in brackets next to the gap. Finally, column ‘# best’ gives the number of times the solution found by the branch-and-price algorithm is not worse than the solutions found by solving the (MTZ)+(42) and (SCF)+(43) formulations for the same instance. The last six columns of the table are divided into two groups of three columns (‘# opt.’, ‘t’, and ‘# best’) that refer to the results obtained by CPLEX while addressing the formulations (MTZ)+(42) and (SCF)+(43), respectively. As far as the branch-and-price algorithm is concerned, it can be noticed that the lower bound generated at the root node is always very close to the optimal value. This can be seen whenever all the 5 instances of a setting are solved to optimality. The solution time of the root node increases when the number of potential assignments of products to suppliers increases. In particular, the time is more affected by the increase in the number of suppliers than of products. The branch-and-price algorithm has been able to solve to optimality 92 instances out of 120, and for the remaining instances only in one case the average optimality gap is above 1%. By solving the (MTZ)+(42) and the (SCF)+(43) formulations, CPLEX was able to compute the optimal solution for fewer instances: 85 and 89, respectively. In particular, although CPLEX performs better by solving the (SCF)+(43) formulation than the (MTZ)+(42) formulation in terms of optimal solutions found, in the former case it is unable to find a feasible solution within the time limit for four instances. On the contrary, while addressing the (MTZ)+(42) formulation, CPLEX always terminates with a feasible solution. The number of best feasible solutions computed by the branch-and-price algorithm and by CPLEX when solving the (MTZ)+(42) and (SCF)+(43) formulations is 101, 101 and 96, respectively. All the approaches allow to solve to optimality instances with up to 100 suppliers and 200 products.


                        Table 4
                         has the same structure of Table 3 and refers to the results obtained for the restricted instances. These instances turned out to be the most difficult ones. For a given pair 〈∣V∣, ∣K∣〉, looking at the number of instances solved to optimality when λ increases, it seems that the different scenarios of products availability do not affect the solution process. On the contrary, the number of instances optimally solved slightly decreases at the increase of the number of products and dramatically goes down moving from instances with 50 suppliers to instances with 100 suppliers. While addressing these instances, CPLEX performs definitely better when solving the (MTZ)+(42) formulation than the (SCF)+(43) formulation. When the fleet size is equal to 2, for example, CPLEX is able to compute the optimal solution for all but one instance in the former case and for only 138 out of 160 instances in the latter. For ∣M∣=50, the branch-and-price algorithm was able to solve to optimality 188 instances out of 240, whereas 166 instances were solved to optimality when ∣M∣=100. On the other hand, while addressing the (MTZ)+(42) formulation, CPLEX was able to find 198 best feasible solutions against the 195 solutions computed by the branch-and-price algorithm. Moving to the instances with 100 suppliers, using CPLEX to address the (MTZ)+(42) formulation seems to perform very well. This is indeed true but only for instances with a fleet size equal to 2 where the optimal solution has been found in all cases except one. Actually, when the fleet size is equal to 2, most of the times only one vehicle is used in the optimal solution.


                        Table 5
                        , which further aggregates the results reported in Tables 3 and 4 according to the expected number of vehicles, shows how the branch-and-price algorithm and (MTZ)+(42) solved with CPLEX seem to complement each other. The branch-and-price algorithm represents the best solution approach when the expected number of vehicles to use is greater than 4. When the expected number of vehicles to use is 2, solving the (MTZ)+(42) by means of CPLEX has to be preferred. For a fleet size equal to 4 vehicles no approach dominates the other one.

Then, in order to understand the behavior of the branch-and-price algorithm, for samples of unrestricted instances we report some performance indicators in Table 6
                        . The first three columns indicate the name of the instance, the number of vehicles and the distance bound. Columns ‘Nodes’ and ‘Columns’ give the number of nodes explored and the total number of columns generated by the branch-and-price algorithm, respectively. The average number of nodes explored and the average number of columns generated tend to shrink when the number of vehicles available increases. Columns 6 - 10 show how the total computational time (column ‘Total’) has been used by the different components of the algorithm, i.e. solving the continuous relaxation of the master problem (column ‘LMPs’), heuristically solving the pricing problem (column ‘PPs – Heur.’), solving to optimality the pricing problem (column ‘PPs – Ex.’), running the restricted master heuristic (column ‘RMHs’). The value in column ‘Total’ is below 100% because of side procedures such us management of the columns pool and of the branch-and-bound tree. If we consider the instances with 50 suppliers (all solved to optimality) we can notice how the percentage of time in column ‘LMPs’ increases with the number of vehicles, whereas the time in column ‘PPs – Ex.’ decreases. Interestingly, the exact solution of the pricing problem is not the bottleneck of the algorithm. The most time consuming component is, in almost all the cases, the restricted master heuristic (see column ‘RMHs’). The last six columns of the table contain information about the feasible solutions found by the algorithm. The first three columns refer to feasible solutions obtained by the branch-and-price algorithm independently of the restricted master heuristic, while the last three columns refer to solutions computed with the restricted master heuristic. In both cases, column ‘#’ indicates how many feasible solutions have been computed. The following columns report data about the first and the best feasible solution found. In particular, column ‘Value’ gives the value of the solution expressed as a percentage of the corresponding final dual bound, while column ‘Time’ gives the seconds required to compute the solution, expressed as a percentage of the total computing time. In almost all the cases, the value of the first feasible solution is usually quite good and not so far from the value of the best solution that is usually found by means of the restricted master heuristic. The search in the branch-and-bound tree allows us to find a feasible solution only in seven cases.

Similar conclusions can be drawn for the results obtained on restricted instances and reported in Table 7
                        . The main difference here is that the best final feasible solution (possibly the optimal one) is usually found by the search in the branch-and-bound tree.

The detailed results for the unrestricted and restricted instances that have been shown in aggregated form in Tables 3 and 4 can be found in Bianchessi, Mansini, and Speranza (2013).

@&#CONCLUSIONS@&#

We have extended the well known Traveling Purchaser Problem by considering a fleet of vehicles with a constraint on the distance traveled by each vehicle, and studied alternative formulations.

As it is the case for all routing problems, the connectivity condition on each route has to be enforced. At present the most used formulations for routing problems include an exponential number of subtour elimination constraints. This makes necessary the implementation of a branch-and-cut algorithm where the subtour elimination constraints are separated and included when violated. The most common and successful alternative approach is based on a set partitioning formulation and the design of an ad hoc branch-and-price algorithm. In both cases, an implementation effort is requested, although the implementation of a branch-and-cut algorithm is much easier than the implementation of a branch-and-price algorithm, given the technology available nowadays.

In this paper we compared two extreme approaches in terms of implementation effort, that is the solution by means of a commercial solver of polynomial size formulations, and a set partitioning formulation solved with a branch-and-price algorithm. The polynomial size formulations are a multi-commodity flow formulation, two single commodity flow formulations strengthened with the inclusion of symmetry breaking constraints, and a three-index flow formulation using Miller–Tucker–Zemlin generalization of subtour elimination constraints strengthened with simple valid inequalities. The computational results show that the multi-commodity flow formulation, while providing a stronger LP relaxation, is more cumbersome than the single commodity flow formulations and than Miller–Tucker–Zemlin formulation. Solving the latter formulation by means of CPLEX turned out to be very effective when the number of routes is small (2–4), whereas the branch-and-price algorithm is effective with a larger number of routes (4–8). These two solution approaches seem to complement each other. We solved to optimality instances with up to 100 suppliers and 200 products.

@&#ACKNOWLEDGEMENTS@&#

We wish to acknowledge the contribution of two anonymous reviewers whose comments and suggestions helped us improve a former version of this paper.

@&#REFERENCES@&#

