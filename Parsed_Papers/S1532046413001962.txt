@&#MAIN-TITLE@&#Decision support from local data: Creating adaptive order menus from past clinician behavior

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Local wisdom can complement expert-curated decision support to reduce workload.


                        
                        
                           
                           We reconstruct physician decisions by aggregating events in medical record systems.


                        
                        
                           
                           Our approach finds complex data relationships and creates dynamic order menus.


                        
                        
                           
                           We simulate the menus in a test set; many scenarios show strong performance (AUC>.9).


                        
                        
                           
                           Our approach increasingly outperforms a simpler approach as orders become rarer.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Clinical Decision Support

Data mining

Bayesian analysis

@&#ABSTRACT@&#


               
               
                  Objective
                  Reducing care variability through guidelines has significantly benefited patients. Nonetheless, guideline-based Clinical Decision Support (CDS) systems are not widely implemented or used, are frequently out-of-date, and cannot address complex care for which guidelines do not exist. Here, we develop and evaluate a complementary approach – using Bayesian Network (BN) learning to generate adaptive, context-specific treatment menus based on local order-entry data. These menus can be used as a draft for expert review, in order to minimize development time for local decision support content. This is in keeping with the vision outlined in the US Health Information Technology Strategic Plan, which describes a healthcare system that learns from itself.
               
               
                  Materials and methods
                  We used the Greedy Equivalence Search algorithm to learn four 50-node domain-specific BNs from 11,344 encounters: abdominal pain in the emergency department, inpatient pregnancy, hypertension in the Urgent Visit Clinic, and altered mental state in the intensive care unit. We developed a system to produce situation-specific, rank-ordered treatment menus from these networks. We evaluated this system with a hospital-simulation methodology and computed Area Under the Receiver–Operator Curve (AUC) and average menu position at time of selection. We also compared this system with a similar association-rule-mining approach.
               
               
                  Results
                  A short order menu on average contained the next order (weighted average length 3.91–5.83 items). Overall predictive ability was good: average AUC above 0.9 for 25% of order types and overall average AUC .714–.844 (depending on domain). However, AUC had high variance (.50–.99). Higher AUC correlated with tighter clusters and more connections in the graphs, indicating importance of appropriate contextual data. Comparison with an Association Rule Mining approach showed similar performance for only the most common orders with dramatic divergence as orders are less frequent.
               
               
                  Discussion and conclusion
                  This study demonstrates that local clinical knowledge can be extracted from treatment data for decision support. This approach is appealing because: it reflects local standards; it uses data already being captured; and it produces human-readable treatment-diagnosis networks that could be curated by a human expert to reduce workload in developing localized CDS content. The BN methodology captured transitive associations and co-varying relationships, which existing approaches do not. It also performs better as orders become less frequent and require more context. This system is a step forward in harnessing local, empirical data to enhance decision support.
               
            

@&#INTRODUCTION@&#

A currently popular approach to improving the quality of health care is to make sure that similar cases are handled in similar ways, i.e., to reduce the variability of care [1]. Frequently this is accomplished through propagation of external protocols into practice, through mechanisms such as Clinical Decision Support (CDS) [2].

Unfortunately, computable CDS content is extremely expensive and time-consuming to create [3], maintain [4], and localize [5]. Consequently CDS has been much more slowly adopted than other components of Health Information Technology (HIT) [6]. Even when CDS available, the content is frequently inappropriate or incorrect [7]. Various projects are being undertaken to standardize computable CDS content in order to reduce the local implementer’s work (e.g., [8]).

Still, standardized CDS does not address the following issues: the frequency of content change in medicine, physician attitudes toward guidelines, and terminology challenges. First, much content, both routine and complex, is not distilled into guidelines [9]. This might be quite common; in one study, the literature provided answers to primary care providers’ routine clinical questions only 56% of the time [10]. Second, studies have shown that physicians value colleagues’ advice at least as much as guidelines [11]. This might be because medicine is locally situated, and colleagues can provide a local frame of reference through which to decide if and how external guidelines relate to particular local cases [12]. Third, standardized content databases require translation of codes into standard terminologies, which is difficult and frequently causes failures in interoperability.

Electronic Medical Record (EMR) data is rapidly proliferating [13], in part due to the Meaningful Use incentive program [14]. These data offer the opportunity to harness local physician wisdom – how care is actually delivered – to augment and suggest protocols, vastly decreasing human effort in developing CDS content and making knowledge available in complex scenarios. It is possible to partially reconstruct physician decisions by aggregating the millions of treatment events in medical record systems. Such locally generated CDS content avoids the three issues discussed above. This fits into the Office of the National Coordinator for HIT’s strategic plan, which centers on building a “learning healthcare system” that can perform dynamic analysis of existing healthcare data to glean various information, including best practices [15].

Despite the incompleteness of guidelines and poor maintenance of expert-curated CDS, individual physician behavior is not reliable either. Studies show that care continues to be widely variable and that physicians’ treatment does not align well with guidelines [16]. Therefore we suggest two important goals in the design of a CDS tool based on local wisdom.

First, the average behavior of many physicians is usually much better than any individual physician. Condorcet’s jury theorem, upon which voting theory is grounded, proves that when each member in a group of independent decision makers is more than 50% likely to make the correct decision, averaging those decisions ultimately leads to the right answer [17]. If we believe that a physician is more likely than chance to make the correct decision, we can trust the averaged decision. The theorem does have two important caveats. First, it is only guaranteed to apply to binary choices (plus an unlimited number of irrelevant alternatives) [18]. Thankfully, many high-level medical decisions are of this type (e.g., “do I anticoagulate this patient or not?”). Second, crowd wisdom can become crowd madness when decision-makers are not truly independent but are influenced by some outside entity [19]. And of course, practitioners are influenced by colleagues, formularies, available equipment, local culture, etc. The Dartmouth Atlas project has found that the quality of care in a region is profoundly influenced by the ‘ecology’ of healthcare in that region, including resources and capacity, social norms, and the payment environment [20].

This leads to our second design requirement. Even when averaging decisions, it is impossible to guarantee that results are not influenced by these caveats. Therefore we do not seek to replace manual content development with automatically generated CDS content. Instead, our goal is to complement content development with knowledge distilled from EMR data. To this end, it was important to choose a data mining approach which produces output that a human expert could understand and update before inserting it into a clinical system.

A handful of studies have explored methods to abstract treatment decisions captured in EMR data into knowledge bases [21–24] or to find knowledge on-demand [26]. The majority of work in abstracting EMR data have used variations of Amazon.com’s pairwise Association Rule Mining (ARM) algorithm [27], which has shown good results when capturing global linkages where little variability exists (e.g., drugs used for HIV treatment) [28]. However, researchers have struggled with both transitive associations and the long, static lists of associations that do not take context into account. In one case, the results of such an approach required a great deal of manual editing before incorporation into a decision support system [29]. Other studies have used this approach only as a rudimentary starting point for content developers. For example, the condition-treatment linkages in the National Drug File Reference Terminology (NDF-RT) were ‘jumpstarted’ by this approach [24].

Bayesian Networks (BNs) are an appealing alternative for mining wisdom from EMR data. BNs are a powerful multivariate, probabilistic reasoning paradigm that naturally model interactions among associations. BNs have a two-phase lifecycle. First, they are constructed, either by hand – which has been widespread in medical informatics research (see e.g., [30]) – or more recently from databases of observational data [31]. Such ‘structure learning algorithms’, as they are called, take into account transitive associations and co-varying relationships that pairwise rule mining cannot. Therefore, BN structure learning might be able to make sense out of the tangled correlations in clinical data that have hampered other approaches. The second phase of the BN lifecycle is its use – rather than being static networks or rules, BNs enable rapid, iterative exploration of decisions as context evolves.

In a previous study, we piloted a BN approach to produce static order menus for complications of inpatient pregnancy [32]. Our results were very promising, but our scenarios were fixed, they only explored one small domain of medicine, and they relied on the opinion of a single nurse practitioner to evaluate our results. In this study, we more fully flesh out our previous work to use BNs to learn the typical successions of orders made by clinicians for a variety of types of cases. Next, we build a recommendation system that responds adaptively to suggest the most common next orders based on what has been ordered and diagnosed previously. Third, we evaluate this system on hospitalization order-entry data in a multitude of scenarios across four domains. Finally, we undertake a brief comparison of this dynamic approach to a static ARM-like approach.

Our goal was to develop a methodology to produce adaptive, patient-tailored, situation-specific treatment advice from order-entry data, which can be used as a draft for expert review, in order to minimize development time for local decision support content. We used Bayesian Networks because of their adaptive nature and their ability to account for transitive associations and co-varying relationships. Also, they are human-readable and could therefore be curated by a human expert. We built and evaluated a recommendation system that dynamically suggests the most common next order based on what has been ordered previously. We also compared it to a static ARM-like approach.

@&#MATERIAL AND METHODS@&#

A BN is a directed graph of vertices (nodes) and edges connecting those vertices. Embedded in each node is a Conditional Probability Table (CPT), which specifies the probability of each node state given the state of each parent. In this work, we induce BNs that represent the probabilistic relationships among orders and diagnoses. Then, as specific orders are placed and diagnoses made in a specific case, we instantiate the variables corresponding to those actions in the network (known as evidence), which revises the probabilities for other orders in the BN to the posterior probability that they would be placed conditioned on the previous actions. This allows us to rank remaining orders by their probability of occurring. In our interface, we present these ranked order menus to the user as orders are placed, in descending order of probability. We do not present diagnoses on the order menus, because the goal is to suggest treatments, leaving diagnosis to clinicians. An example of a simple BN, the underlying probabilistic relationships, and the revised posterior probabilities given evidence is shown in Fig. 1
                        . The methodology, Iterative Treatment Suggestion (ITS), is summarized in Table 1
                        . We implemented this methodology in Java using the SMILE toolkit [33], a freely available toolkit for network inference. A prototype of this interface can be seen in Fig. 2
                        .

A common approach to induce a Bayesian Network from data (called structure learning) is a greedy search-and-score methodology. From a set of disconnected nodes, edges are added, removed, and reversed until a network is found that best explains a training dataset according to a scoring function. Here we used the BDeu scoring function [34]. A greedy search is used because a complete exploration of all possible graphs is combinatorial, and so is therefore not possible on networks of more than a few nodes [35].

The most powerful greedy search is arguably the Greedy Equivalence Search (GES) [36]. Rather than searching Bayesian Networks, it searches what are known as ‘equivalence classes’ of Bayesian Networks. These are groups of Bayesian Networks that all are probabilistically equivalent. If an optimal Bayesian Network exists for the given dataset, GES will always find it. Therefore, we used a GES implementation in the freely available Tetrad toolkit [37].

To evaluate ITS in the myriad of evolving clinical situations, we chose to compare how well the suggestion menus predict the actual next action taken in a hospitalization. Therefore we wrote a program to simulate hospitalizations on our test set using the ITS methodology. As in ITS (Table 1), our program places each order in the hospitalization in succession, adding it to the ‘evidence’ in the network, and recalculating the posterior probabilities for variables in the network. It also adds diagnoses as evidence at the appropriate time step in the hospitalization. After each order in the hospitalization, our program records the posterior probabilities in the menu (step 2), in order to calculate performance in predicting the next order. To determine order succession within each hospitalization, we used the time and session information in our order-entry data. Where two orders had the same recorded time, we used both possible orderings and kept the higher-scoring combination. In the event an order was placed more than once, subsequent placements were ignored (because our system allows orders to be entered as evidence only once).

Using the recorded posterior probabilities and the actual next order placed, we were able to compute the Area Under the Receiver–Operator Curve (AUC). This measures discriminability, equivalent to the probability that when an order is placed, it will be ranked higher than at previous times. We used the approach in Hanley and McNeil [38] to calculate the AUC directly without first calculating the full ROC curve. The formula is as follows:
                           
                              (1)
                              
                                 AUC
                                 (
                                 
                                    
                                       T
                                    
                                    
                                       →
                                    
                                 
                                 ,
                                 
                                    
                                       F
                                    
                                    
                                       →
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             t
                                          
                                          
                                             
                                                
                                                   T
                                                
                                                
                                                   →
                                                
                                             
                                          
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             f
                                          
                                          
                                             
                                                
                                                   F
                                                
                                                
                                                   →
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         1
                                                      
                                                      
                                                         t
                                                         >
                                                         f
                                                      
                                                   
                                                   
                                                      
                                                         0.5
                                                      
                                                      
                                                         t
                                                         =
                                                         f
                                                      
                                                   
                                                   
                                                      
                                                         0
                                                      
                                                      
                                                         t
                                                         <
                                                         f
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       ‖
                                       
                                          
                                             T
                                          
                                          
                                             →
                                          
                                       
                                       ‖
                                       ∗
                                       ‖
                                       
                                          
                                             F
                                          
                                          
                                             →
                                          
                                       
                                       ‖
                                    
                                 
                              
                           
                        Here 
                           
                              
                                 
                                    T
                                 
                                 
                                    →
                                 
                              
                           
                         is a list of posterior probabilities for true instances of a particular order, and 
                           
                              
                                 
                                    F
                                 
                                 
                                    →
                                 
                              
                           
                         is the corresponding list for false instances.

We also computed the average position an order appears in the menu at the time it is selected. This measures accuracy by reporting the average list length required for 100% precision. The value is between one and the total number of orders in the network, where one is the top of the menu (and is therefore the best outcome).

To compare our approach to pairwise Association Rule Mining (ARM), we developed a variant of the ITS hospital simulation methodology. It performs the same analysis of average menu position but it uses a static menu of orders, which are arranged in descending frequency of co-occurrence with the main diagnosis in each domain (e.g., pregnancy in inpatient pregnancy). To facilitate direct comparison, the orders selected by GES were used to generate the menu in each domain.

@&#EVALUATION@&#

For evaluation, we chose four modalities of medicine: inpatient medicine, the emergency department (ED), the Urgent Visit Clinic (UVC), and the intensive care unit (ICU). Each modality reflects a different aspect of medicine. Inpatient care focuses more on treatment than diagnosis in a longer-term stay, the ED involves a shorter stay involving both diagnosis and treatment, the UVC involves a very brief ‘stay’ focused on diagnosis, and the ICU involves tightly-correlated actions for very specific care.

We extracted data for four domain-specific BNs from the four selected modalities as follows:
                              
                                 1.
                                 
                                    Choosing chief diagnosis: We focused our domains on the most frequent diagnosis/complaint for the four modalities: visits involving pregnancy in inpatient medicine, back pain in the ED, hypertension in the UVC, and ‘altered mental state’ in the Medical ICU (MICU).


                                    Data extraction: We extracted and de-identified 3years of inpatient order-entry data from the local county hospital in Indianapolis (2007–2009) and chose visits that corresponded with each domain. This involved 9228 ED back pain, 1821 UVC hypertension, 4843 inpatient pregnancy, and 1546 ‘altered mental state’ MICU visits.


                                    Variable selection: For each domain, we selected 50 variables: the 40 most frequent orders and the 10 most frequent co-occurring diagnoses and complaints. Orders were of low granularity, which ensured sufficient data for predictive power; for example, medication orders only included the type of medicine (e.g., vancomycin), not the route, dose, or frequency. The diagnoses and complaints used in our networks can be seen in Table 2
                                    . Note that sometimes less than ten are shown because fewer than ten diagnoses/complaints co-occurred with the diagnosis.


                                    Train/test split: We split each data set into a training (2/3 of admissions) and test set (1/3).

Using these four data sets, we applied and evaluated the BN and ARM methods as follows:
                              
                                 1.
                                 
                                    Network induction: Via GES (Section 2.2), we induced four Bayesian Networks using each of the four training sets. Because GES will discard nodes that do not have predictive power, sometimes the resulting networks contained fewer than 50 nodes. This was most notable in the ICU network, where only 25 orders were retained.


                                    Hospitalization simulation: We ran our ITS hospital-simulation program (Section 2.3) on each the each of the four networks using their corresponding test set, which collected statistics on AUC and average position in the menu at time of selection.


                                    Visualization: We wrote a program to export the networks into Gephi format. Gephi is an open-source network visualization tool [39]. We wrote a Gephi script to select the Markov Blankets for a set of nodes. A Markov Blanket of a node is its parents, children, and siblings, and is frequently used as a heuristic for the set of most relevant variables in prediction [40]. This allowed us to visually examine nodes in a graph and their most important neighbors.


                                    Comparison to Association Rule Mining: We ran our ARM-based hospital-simulation (Section 2.4), which collected statistics on average position in a static menu at time of selection.

@&#RESULTS AND DISCUSSION@&#

A standard desktop computer induced each network (step 1) in less than 30min and ran the ITS hospital-simulation program (step 2) in an average of 5min. Table 3
                      shows summary statistics: average AUC and average menu position, weighted by the frequency of each order. Fig. 3
                      shows trendlines of the average position vs. order rank by frequency. For each domain, the 10 orders in which the system performed best and worst (by AUC) are shown in Table 4
                     .


                     Figs. 4–6
                     
                     
                      show portions of the graph structure (step 3). Fig. 4 shows the Markov Blankets around some nodes in the pregnancy network with high AUC. Fig. 5 shows nodes with high AUC and their parents and children in the other three networks. Fig. 6 does the same with nodes of low AUC. Note that arrow directions should not be interpreted as showing causality, only a statistical association.

Finally, Table 5
                      and Fig. 7
                      compare the BN approach (step 2) to an ARM approach (step 4). Table 5 shows the weighted and unweighted average difference in list length between ARM and BN. Fig. 7 shows average menu position vs. order rank by frequency using ARM. It is directly comparable to Fig. 3 for the BN approach.

The evaluation of our treatment suggestion system on four domain-specific BNs against test cases drawn from the same environments showed fairly strong overall performance. In particular, our treatment suggestion menus correctly suggest common orders in a short list: 3.91–5.83 items (Table 3). A length of five accurately suggests more than the top 20 inpatient pregnancy orders and emergency department back pain orders (Fig. 3). Also, the system’s average AUC is high (74–84%, also in Table 3), meaning that common orders are ranked higher at the time they are ordered than prior to ordering.

There was high variance in performance on individual orders (AUC 0.5–0.99), both across and within domains (Tables 3 and 4). Within a domain, some orders are suggested almost exactly when they should be, such as a cold pack in pregnancy visits and a pelvis CT in the ED. Other orders appear at the bottom of long menus and are not predicted much better than chance, such as a neurology consult in the ED. Performance varied across domains as well. Inpatient pregnancy had a weighted average AUC .884 and menu position 3.91 (Table 3), and even the least frequent orders required a menu length of only half the total orders (Fig. 3). In the other domains, average AUC and menu length were notably worse and the least frequent orders required a menu length containing at least 75% of possible orders.


                        Figs. 4–6 shed light on this phenomenon. For high AUC nodes (Figs. 4 and 5), the network diagrams are tight clusters with connections that make intuitive sense. For example, postpartum is directly connected to adjuncts like simethicone, toothache is connected to a dental consult, and related tests like magnesium and phosphorus levels are linked. This clustering and intuitiveness indicates that the correct amount of context was provided for these nodes. The pregnancy network formed one giant cluster, which likely explains its high overall performance. The low-performing nodes in the other networks were either part of smaller subnetworks, or, in the case of the MICU, relied on infrequent diagnoses that were not in the test set (Fig. 6). Relationships among low-performing nodes were frequently almost linear and had non-intuitive connections, indicating transitive associations due to missing context. For example, restaints is directly connected to vancomycin (see Fig. 6, MICU) – both might be appropriate when a patient has an infection causing delirium, but they are not predictive of each other. Also a general medicine consult does not directly predict a diagnosis of diabetes (see Fig. 6, UVC), nor does a lumbar spine X-ray directly suggest a knee X-ray. The context needed likely includes: additional well-chosen orders and diagnoses, external information about patient health status, test results, and family history. This points to the need for additional data sources and more principled feature selection.

Another interesting discovery is that AUC is not always strongly correlated with menu position. Two examples can be seen in Table 4. A peripheral blood smear in the emergency department has high AUC but an average menu position of 11.6, and an order for Lortab (a narcotic painkiller) in inpatient pregnancy appears near the top of the suggestion menus but has AUC of only 0.60. In the first case, we suspect that although the blood smear’s probability increases just prior to it actually being ordered, it is never high enough to outweigh other orders. In the second case, we believe the order stays at the top of the menu until it is picked because it has a high prior probability. We therefore conclude that choosing order-specific probability thresholds might be appropriate.

Our results confirm previous results regarding ARM approaches: while an ARM approach can readily detect the most common associations, the strength of less common associations depend on context (e.g., previous orders and diagnoses) that ARM cannot capture.

In Table 5, there is a relatively small difference in weighted average menu length between the two approaches (Table 5), especially in smaller domains like the ICU (difference +0.23 items). This indicates similar performance for the most common orders. However, the unweighted difference is larger (+1.14 to +7.64 items), suggesting that the BN approach is having more impact on less common orders.

Comparing Fig. 7 (ARM) to Fig. 3 (BN) confirms this. Fig. 3 displays a slow increase in menu length as more orders are included, but Fig. 7 shows a much steeper rise. With the BN approach, a length of five accurately suggests an average of 16 orders (Fig. 3). The same menu length with the ARM approach accurately suggests only 9 orders on average (Fig. 7). Performance degrades rapidly as menu length increases. This confirms the BN approach’s overall superior performance.

This research is predicated on the assumption that average patterns in the data represent reasonably good care for future patients. As detailed in the Section 1.1, in many decision-making problems, average patterns do in fact represent ‘crowd wisdom’ [41], but ‘crowd madness’ – the domination of bad decisions in a group – can occur as well. Automatically discriminating wisdom from madness is important future work. Presently the ‘wisdom’ discovered should be reviewed by experts and aligned with guidelines before deployment.

The other principal limitation is that our models currently rely only on a small set of orders and diagnoses. We do not include other important factors such as test outcomes and physiologic changes. Also, we evaluated the networks using time-stamped data but the algorithm we used to learn networks does not utilize time information. Additionally, among orders and diagnoses, we choose the most frequent. All of this biases our system to short-term decisions that can be made with minimal context. We believe accuracy will be improved significantly with context-aware feature selection and temporal extensions to BN structure learning.

Our system and evaluation do not currently accommodate multiple orders of the same item within a hospitalization. Upon examination of our training sets, only orders in the ICU occurred multiple times on average per hospitalization. However, in the ICU, 16 orders (e.g. ventilator protocol changes, IV fluids, and common tests) do occur with multiplicity, and for this we need to develop a more complex methodology. We are exploring use of a ‘temporal window’ around the actual occurrence of the order in which we consider it a true instance.

The BN approach requires networks to remain relatively small, or data requirements and computational complexity become intractable [42]. We do not believe this makes them unattractive to ‘big data’ problems, but it will require an approach to intelligently create sets of largely independent domain-specific networks. We also plan to explore structure-learning algorithms that scale to larger data sets.

Our comparison to ARM was a side-by-side comparison that might have unfairly benefitted ARM. For one, only items chosen by GES were used in the menu – and some of the dropped associations might have been incorrect transitive associations. Also, including less common orders might show even more difference between BN and ARM. Further comparison is important future work.

Finally, our evaluation measures – AUC and menu position – only capture two aspects of the approach’s predictive performance – discriminability and precision. There are many other classification evaluation measures (see for example [43]). For this methodology, it would also be valuable to measure the menu’s utility as a decision-making aid. This could be done computationally using a decision-theoretic approach like decision curve analysis [44], or by soliciting feedback regarding sample menus from potential users.

@&#CONCLUSION@&#

The proliferation of medical data in EMRs offers an opportunity to abstract these data for use in Clinical Decision Support. Both the challenges associated with creating localized decision support and the incompleteness of guideline recommendations make this an important task. Existing approaches using pairwise Association Rule Mining produce long static lists that accurately capture only common, direct associations.

In this work, we have developed and implemented a system using Bayesian Network learning to discover the typical successions of orders made by clinicians from local order-entry data, which we have used as an adaptive recommendation system to suggest the most common next orders based on what has been ordered and diagnosed previously. We used a hospitalization-simulation evaluation methodology to determine how well our system reproduces reasonable behavior in four medical domains.

Our system performed fairly well on average in all domains but had variance that suggested future improvements. It performed best in inpatient pregnancy (weighted average AUC .844, weighted average menu position 3.91) and worst in the Urgent Visit Clinic (weighted average AUC .741, weighted average menu position 4.88). Our system had near-perfect performance on some orders (e.g., cold pack in inpatient pregnancy) but very poor performance on others (e.g., arterial blood gas monitoring in the medical intensive care unit). Higher performance appears to correlate with the presence of more factors needed to predict the order.

Comparing our system to an ARM-based equivalent, we found that only the most common orders are accurately suggested by both systems, and that a menu length of five suggested only about half as many orders accurately in ARM vs. BN. This confirms that despite the future work needed in our system, it does outperform existing approaches.

This study is a step forward in clinical knowledge-abstraction systems. Such a system could eventually be part of the envisioned “learning health system,” in which a variety of clinical users – including researchers, administrators, and physicians – could dynamically analyze vast amounts of data for improved decision-making. This could be used for e.g., workload reduction in developing localized CDS, or as a method to quickly analyze local practice patterns.

Dr. Klann designed and implemented the study and wrote the manuscript.

The other authors served as advisors, helping to conceptually devise portions of the study, revise the methodology and implementation strategy, and provide feedback on the study design. The authors each offered particular expertise: Dr. Szolovits in machine learning approaches on clinical data; Dr. Downs in decision modeling and Bayesian Networks, and Dr. Schadow in clinical data mining and data analysis.

All authors also edited, contributed to, and approved the manuscript.

@&#ACKNOWLEDGMENTS@&#

Thanks to Jeff Warvel for providing both data and expertise regarding the county-hospital order-entry system; and to Siu Hui for her insights into statistics and evaluation approaches. This work was performed at the Regenstrief Institute, Indianapolis, IN and at the Massachusetts General Hospital Laboratory for Computer Science, Boston, MA. This work was supported in part by Grant 5T15 LM007117-14 from the National Library of Medicine.

@&#REFERENCES@&#

