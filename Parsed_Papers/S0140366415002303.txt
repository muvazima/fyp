@&#MAIN-TITLE@&#Private surveys on VoIP

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose an eVoting framework to preserve the privacy of the voters.


                        
                        
                           
                           The voters will receive questions depending on their answers to previous questions.


                        
                        
                           
                           The platform is built upon a cloud computing system, VoIP technologies and a new eVoting platform.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Privacy

Audio streaming

eVoting

Survey

@&#ABSTRACT@&#


               
               
                  In a question-driven survey, the answers to one question may decide which question is presented next. In this case, encrypting the answers of the participants is not enough to protect their privacy since the system is able to learn them by inspection of the next question the participants request.
                  In this article, we explore the technologies involved in surveys performed through a mobile phone. Participants receive the questions using VoIP technologies and, since their answers affect which questions are presented next, they must protect the selection of the relevant questions. In addition, this paper considers the performance of the proposed encryption technologies in mobile phones. Finally, the answers to the poll must be sent to the server. This paper proposes an eVoting framework to preserve the privacy of the users while sending the answers to the system.
                  Such a scenery involves many different communication channels and technologies. As we will show, the decisions taken in some of the modules force some technologies and decisions in the others.
               
            

@&#INTRODUCTION@&#

Privacy concerns modify how people answer surveys, resulting in emotional reactions and biased responses. Researchers in the social science field reported [1–3] that falsification of responses about sensitive matters is a common problem in social surveys and undercut their usefulness. The concerns about how the data collected by the system is managed is one of the main reasons to provide a false answer. In order to circumvent this psychological reaction, we propose a system to perform private opinion polls using state-of-the-art technologies in VoIP and eVoting.

Our research is focused on surveys run through a phone line. In this case, the poller calls to the participants and asks them questions. The participants will provide a ballot to the poller with their answers at the end of the survey. In some cases, the next question depends on the answer to the previous one. For example, a survey about the religious knowledge of US citizens had different questions according to the self-declared religion of those polled [4]. Another example is the periodic labor force survey run by many European governments [5] (EU LFS). In this survey, the answer to some questions such as the number of family members or whether the person was actively seeking for a job in the last week directly modifies the next question. Another example of this kind of opinion surveys for a traditional eVoting scenario is the self-determination referendum proposed by the Catalan government [6]. In this referendum, there are two questions with NO/YES answers. Answering the second question only makes sense if the answer to the first was a YES. 
                        1
                     
                     
                        1
                        At the moment of writing this article, the referendum was halted by Spain’s constitutional court.
                     
                  

In all these examples, even if the answers to the questions are kept in secret, the provider is able to learn private information about a participant just by inspection of the question requested to the system. For example, if a participant request a question about how many times he/she attends the Mass, the poller learns that the participant is a religious person. In an official survey, such as the one of the Catalan government, requesting the second question leaks to the system that the voter answered YES to the first question.

The system we will describe involves two steps. They are both shown in Fig. 1
                      and analyzed in this paper.

                        
                           1.
                           Users get the questions from the server while preserving privacy. This will be explored in Section 2. Section 2.1 presents the schemes of private streaming that we will use in this article, and analyzes the use they make of the network. Section 2.3 describes how these schemes are implemented on a VoIP system where servers are organized as a tree in a cloud computing environment. The description of this step is the main contribution of this paper.

Users send their answers to the poller. This will be described in Section. 3, which deals with the problem of sending the answers of the users to the poller while preserving his privacy. This step is only hinted in this paper. It is still under development and it will be described in depth in a future work.

We will describe a survey service that can provided as a VoIP service and the participants in the survey will use their personal phones. The questions are not presented by a human operator, but by an automatic system that stream pre-recorded questions as requested. The main interest of the system described in this article is the protection of the privacy of the answers. If the participants are convinced their answers are really private, they are expected to provide better and more accurate answers. Hence, participants will see the pollers as opponents. Participants want to answer the questions but they do not want to leak their specific answer if some questions depend on the answer to previous questions.

During this article, we will organize questions as a K-ary tree where the next question to be presented to the participant depends on the answer to the previous question. An example of a simple question is shown in Fig. 2
                        .

There are two alternatives to control the voter navigation through the question tree during the voting phase:

                           
                              1.
                              The voting client receives the full tree of questions from the voting server at the beginning of the voting process and decides which question present to the voter depending on the answer she provided at the previous one. Depending of the size of the set of questions and possible ways to rephrase them (for example, due to the different income brackets, or different available languages), the amount of data the phone must download from the Internet before starting the questionnaire may be significant. This is the case of the EU LFS [5].

The voting client requests to the server the next question to be presented to the user, based on the answer provided at the previous question. This second alternative raises privacy risks, since the server could infer, from the requests made by the voting client, which are the answers given by the participant.

If the user downloads directly from the database the audio file of each question after answering the last one, the database learns immediately the user’s answer to the last question, and this is the behavior that we wish to avoid. We aim to develop a system where the user downloads the ith question from the database, without the database learning the index i. As a result, the attacker of our system is the question database, and he is successful if he learns the index i of the question requested by the participant.

This objective is in line with the objectives of an eVoting system. In an eVoting systems, voters want to participate without leaking their vote. To do so, the voters submit their opinions using specific cryptographic mechanisms. We will adapt one of these eVoting systems to VoIP polls. Participants in the surveys will receive the questions from pollers by means of VoIP technologies, and they will make use of a Private Information Retrieval system (PIR) to not leak any information about the questions they are currently answering.

During this work, we will assume the participants download and install an application on their phones to answer these polls. We are aware the use of and external application is undesirable. How this could be done without installing an application on the personal mobile phone is a very interesting open issue. At the time being, we will focus our efforts on providing a secure system to answer polls even if it involves installing an application. The provision of smart, advanced services on VoIP systems without the need of an external application will remain an open issue.

For the sake of simplicity, a full K-ary tree is considered and during the development of this article every question has the same number k of sub-questions. In order to simplify the management of the answers, we define that the possible answers for each question are in a well-knows, closed set. For example, yes-no, Jew–Christian–Muslim–Atheist. We assume that the server organizes the N different audio files of the questions in an ordered database 
                           
                              
                                 a
                                 ¯
                              
                              =
                              
                                 {
                                 
                                    a
                                    1
                                 
                                 ,
                                 …
                                 ,
                                 
                                    a
                                    N
                                 
                                 }
                              
                           
                        . To model the relation between the questions, there is an inner reference such as if the user answers b to question number 2, question number 5 should be presented and if he answers c, then question 7 is next.

We define an attacker model where users and databases follow the protocols, and attackers are only passive observers of the communication. Indeed, a misbehaving database can be immediately detected. For example, if the user does not receive a playable file of the received question does not make sense.

@&#RELATED WORK@&#

Some works, such as [7,8] explore the problem of private streaming in VoIP by means of anonymizing the participants of the poll using mix-networks. Zhang, Yang, and Gao [9] explore private streaming from the point of view of communication, that is, to prevent linking of streams and actors with the help of specialized hardware. Refs. [10–12] propose collaboration of a set of clients to offer privacy while downloading a stream from a server, but we feel that due to the sensitive nature of the data involved in our scenario, users will see other participants as potential attackers and these approaches are not suitable for our scenario.

Many PIR systems were proposed in the literature [13–15]. Most of these systems use homomorphic encryption, as we will do in this work. Usually, the approach to solve the PIR problem involves minimization of the communication for a single run of the protocol. As we will see during this work, in a streaming environment we can accept higher communication costs for a single bit that are compensated after considering the whole stream. A different approach to the PIR problem is taken in [16] to provide a PIR system without considering homomorphic encryption. In their work, authors propose forging special queries and using noise addition to prevent the identification of the client desires. In the scope of social studies and participation in official referendums, we strongly believe adding noise is not acceptable and must be avoided.

The Paillier cryptosystem [17] is a probabilistic and additive homomorphic encryption using asymmetric keys. Both plain and encrypted texts are integers and some operations (additions, products) can be performed with them. We will represent as [x] the encryption of the integer x. The encryption can be performed by anyone in possession of the public key, but decryption requires the private key. We represent as ⊗ the operator i the ciphered space to get a product of two integers in the plain text space, and ⊕ the operator in the ciphered to get an addition of two integers in the plain text space. In the practical implementation of these operators, ⊗ is computed as power in the encrypted space while ⊕ is as a product in the encrypted space. Using the properties of the Paillier’s cryptosystem, these operations can be computed by anyone in possession of the public key, which includes the configuration parameter n:

                           
                              (1)
                              
                                 
                                    
                                       
                                          ⊗
                                       
                                       
                                          
                                             :
                                             
                                                [
                                                x
                                                ]
                                             
                                             ⊗
                                             a
                                             =
                                             
                                                
                                                   [
                                                   x
                                                   ]
                                                
                                                a
                                             
                                             
                                             mod
                                             
                                             
                                                n
                                                2
                                             
                                             =
                                             
                                                [
                                                a
                                                x
                                                
                                                mod
                                                
                                                n
                                                ]
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    
                                       
                                          ⊕
                                       
                                       
                                          
                                             :
                                             
                                                [
                                                x
                                                ]
                                             
                                             ⊕
                                             
                                                [
                                                y
                                                ]
                                             
                                             =
                                             
                                                [
                                                x
                                                ]
                                             
                                             
                                                [
                                                y
                                                ]
                                             
                                             
                                             mod
                                             
                                             
                                                n
                                                2
                                             
                                             =
                                             
                                                [
                                                x
                                                +
                                                y
                                                
                                                mod
                                                
                                                n
                                                ]
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

In this example, x and y are integers only known by the user in possession of the private key, and a is an integer known by anyone in possession of the public key. Anyone in possession of the public key is able to calculate 
                           
                              x
                              +
                              y
                           
                         and ax, but only a user in possession of the private key can decrypt the result of this calculation.

For example, anyone with two encrypted values [2] and [5] and a value in clear 3, is able to calculate, among others, these operations: 
                           
                              [
                              2
                              ]
                              ⊕
                              [
                              5
                              ]
                              =
                              [
                              2
                              +
                              5
                              ]
                              =
                              [
                              7
                              ]
                              ,
                           
                        
                        
                           
                              3
                              ⊗
                              [
                              5
                              ]
                              =
                              [
                              3
                              *
                              5
                              ]
                              =
                              [
                              15
                              ]
                              ,
                           
                        
                        
                           
                              3
                              ⊗
                              [
                              2
                              ]
                              ⊕
                              [
                              5
                              ]
                              =
                              [
                              3
                              *
                              2
                              +
                              5
                              ]
                              =
                              [
                              11
                              ]
                           
                         even if he is not able to decrypt these results. The encrypted result should not be greater than n
                        2 while the plain text must be less than n. In the Paillier system, the number of bits to represent the encrypted texts is twice the number of bits of the plain text.

In this section, we define the mechanism used to request questions from the server without leaking their identifier to the poller. First, the encryption system is introduced in Section 2.1 and analyzed in Section 2.2 Then, this mechanism is used to develop a real streaming system on VoIP during Section 2.3.

In our system, we wish to provide access to a database of questions organized as audio files. The user of this database wishes to download the integer in the ith position. During this section, we will describe these multimedia as integers. In this case, multimedia files are cut down in packets and then each packet is represented as an unsigned integer. For example, a 64 KB file can be divided into 64000 packets of integers from 0 to 255.

In this section, we organize the database as a vector and next as a matrix. We will compare their efficiency during Section 2.2.

The database of questions stores N different integers less than 2
                           n
                         for a known n, and the participant in the survey wants to select the one with index j without leaking j to the database. To achieve this, the participant prepares an array 
                           
                              
                                 s
                                 ¯
                              
                              
                                 (
                                 j
                                 )
                              
                           
                         where each element is the Paillier encryption of 0, except the element j, that is the encryption of 1. That is to say,

                           
                              (3)
                              
                                 
                                    
                                       
                                          
                                             
                                                s
                                                ¯
                                             
                                             
                                                (
                                                j
                                                )
                                             
                                          
                                       
                                       
                                          
                                             =
                                             {
                                             
                                                s
                                                0
                                             
                                             ,
                                             
                                                s
                                                1
                                             
                                             ,
                                             …
                                             ,
                                             
                                                s
                                                N
                                             
                                             }
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       
                                          
                                             where
                                             
                                             
                                                s
                                                i
                                             
                                          
                                       
                                       
                                          
                                             =
                                             
                                                {
                                                
                                                   
                                                      
                                                         
                                                            [
                                                            1
                                                            ]
                                                         
                                                      
                                                      
                                                         
                                                            if
                                                            
                                                            i
                                                            =
                                                            j
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                            [
                                                            0
                                                            ]
                                                         
                                                      
                                                      
                                                         
                                                            if
                                                            
                                                            i
                                                            ≠
                                                            j
                                                            .
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

We call this vector 
                           
                              
                                 s
                                 ¯
                              
                              
                                 (
                                 j
                                 )
                              
                           
                         the selection vector of the element j. The participant sends this selection vector to the database of questions. Next, the database multiplies each element si
                         by the ith element of the database in the encrypted space, and adds all the resulting values. If the database is represented as a vector, 
                           
                              
                                 b
                                 ¯
                              
                              =
                              
                                 {
                                 
                                    b
                                    0
                                 
                                 ,
                                 …
                                 ,
                                 
                                    b
                                    N
                                 
                                 }
                              
                              ,
                           
                         it computes the next operations:

                           
                              (5)
                              
                                 
                                    
                                       
                                          
                                             S
                                             (
                                             j
                                             )
                                          
                                       
                                       
                                          
                                             =
                                             ∑
                                             
                                                s
                                                i
                                             
                                             ⊗
                                             
                                                b
                                                i
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       
                                          
                                             
                                             =
                                             
                                                [
                                                0
                                                ]
                                             
                                             ⊗
                                             
                                                b
                                                0
                                             
                                             ⊕
                                             …
                                             ⊕
                                             
                                                [
                                                1
                                                ]
                                             
                                             ⊗
                                             
                                                b
                                                j
                                             
                                             ⊕
                                             …
                                             ⊕
                                             
                                                [
                                                0
                                                ]
                                             
                                             ⊗
                                             
                                                b
                                                N
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       
                                          
                                             
                                             =
                                             (
                                             Π
                                             
                                                (
                                                
                                                   s
                                                   i
                                                   
                                                      b
                                                      i
                                                   
                                                
                                                
                                                mod
                                                
                                                
                                                   n
                                                   2
                                                
                                                )
                                             
                                             )
                                             
                                             mod
                                             
                                             n
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       
                                          
                                             
                                             =
                                             [
                                             
                                                b
                                                j
                                             
                                             ]
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Finally, the database sends back the result S(j) to the participant, that decrypts this value using his private key to get bj
                        .

For the sake of clarity, we include next an example of this process. As a first approach, consider a vector without encryption 
                           
                              
                                 
                                    s
                                    ¯
                                 
                                 ′
                              
                              
                                 (
                                 j
                                 )
                              
                              =
                              
                                 {
                                 0
                                 ,
                                 0
                                 …
                                 1
                                 …
                                 0
                                 ,
                                 0
                                 }
                              
                           
                        . After computing the inner product, the database obtains a vector 
                           
                              
                                 S
                                 ¯
                              
                              
                                 (
                                 j
                                 )
                              
                              =
                              
                                 
                                    s
                                    ¯
                                 
                                 ′
                              
                              
                                 (
                                 j
                                 )
                              
                              
                                 
                                    b
                                    ¯
                                 
                                 T
                              
                              =
                              
                                 {
                                 0
                                 ,
                                 0
                                 …
                                 
                                    b
                                    j
                                 
                                 …
                                 0
                                 }
                              
                              ,
                           
                         and after the addition of all elements, 
                           
                              S
                              
                                 (
                                 j
                                 )
                              
                              =
                              sum
                              
                                 (
                                 
                                    S
                                    ¯
                                 
                                 )
                              
                              =
                              
                                 b
                                 j
                              
                           
                        . Eqs. (3)–(7) show these same operations with a encrypted selection vector, and products and additions are on the encrypted text, as Eq. (5) shows. The result of this process is the integer bj
                         that only the user that owns the private key of the Paillier’s cryptosystem is able to decrypt.

The interested reader can find an analysis of this approach in [13]. Next, we adapt a proposal that was presented in [13] to our scenario. This involves the organization of the database in a two-dimensional space, in the form of a matrix.

In this case, the database organizes its elements using a square matrix of 
                           
                              N
                           
                         rows and columns. To simplify the description of the system, we will define that 
                           
                              N
                           
                         is an integer. Then, the database has 
                           
                              N
                           
                         different rows 
                           
                              
                                 b
                                 ¯
                              
                              =
                              
                                 {
                                 
                                    r
                                    1
                                 
                                 ,
                                 …
                                 
                                    r
                                    
                                       N
                                    
                                 
                                 }
                              
                           
                         where each row is a vector of 
                           
                              N
                           
                         integers 
                           
                              
                                 r
                                 i
                              
                              =
                              
                                 (
                                 
                                    a
                                    
                                       i
                                       1
                                    
                                 
                                 …
                                 
                                    a
                                    
                                       i
                                       
                                          N
                                       
                                    
                                 
                                 )
                              
                           
                        . The participant follows the protocol that was described in Section 2.1 to get not a single element, but a row of 
                           
                              N
                           
                         elements. Now, the selection vector has 
                           
                              N
                           
                         elements and it captures the row that the user is interested in. The system works as described next:

                           
                              (9)
                              
                                 
                                    
                                       
                                          
                                             S
                                             (
                                             j
                                             )
                                          
                                       
                                       
                                          
                                             =
                                             ∑
                                             
                                                s
                                                i
                                             
                                             ⊗
                                             
                                                File
                                                
                                                   j
                                                   ,
                                                   i
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       
                                          
                                             
                                             =
                                             (
                                             S
                                             
                                                (
                                                j
                                                ,
                                                
                                                   File
                                                   
                                                      j
                                                      ,
                                                      1
                                                   
                                                
                                                )
                                             
                                             ,
                                             …
                                             ,
                                             S
                                             
                                                (
                                                j
                                                ,
                                                
                                                   File
                                                   
                                                      j
                                                      ,
                                                      
                                                         N
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       
                                          
                                             
                                             =
                                             (
                                             
                                                [
                                                
                                                   a
                                                   
                                                      j
                                                      ,
                                                      1
                                                   
                                                
                                                ]
                                             
                                             ,
                                             …
                                             ,
                                             
                                                [
                                                
                                                   a
                                                   
                                                      j
                                                      ,
                                                      
                                                         N
                                                      
                                                   
                                                
                                                ]
                                             
                                             )
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Where, abusing the notation, 
                           
                              File
                              
                                 j
                                 i
                              
                           
                         is the set of blocks that forms a file in the position i, j of the matrix. In this same sense, [a
                        
                           j, i
                        ] is the set of encrypted blocks of File
                           j, i
                        .

This scheme is graphically represented in Fig. 3.

The privacy of our system is based on the fact that the Paillier system could be used as a PIR system. Many PIR systems exist in the literature. Ref. [13] is a recent survey of many of them. Ref. [14] is the PIR system that as far as we know is more efficient for a single petition. Most of them are conceptually complex and difficult to code. The advantage of the Paillier system is that calculations are easy both in the database and the mobile phone. The main problem of the Paillier system is the amount of data the participants must share. In the next section, we will show that these simple schemes works acceptable and their implementation are fast in the scenario under study.

Also, the Paillier cryptosystem is semantically secure and we assume that this property is enough for our system. The reader should notice that this cryptosystem is probabilistic, and two encryptions of the same value 0 will output two different integers with high probability. Hence, an observer cannot decide whether two instances of [0] are in fact an encryption of the same plain text 0.

Files are cut down in pieces and all these packets share the same index inside the database. Calculating the selection vector with many encryptions of a [0] is a long process for a mobile phone, but the participants only need to provide a single selection vector to download the 64000 packets while preserving his privacy. Since the system already knows that all files are cut down in pieces, reusing the same selection vector for all these packets does not leak any addition information. In this sense, the selection vector must be computed only once for a file.

If the parameters of the audio file recommend organizing the database as a matrix, it could be tempting to take advantage of the additional questions the user gets from each query. Indeed, some previously downloaded rows may already include the new questions the user is interested in. In our opinion, the gain of efficiency in this situation does not pay off an unacceptable loss of privacy. We will see this with an example. During a survey about religions, let us imagine the database organize audio files in such a way that every question related to the Catholic religion is in the same row, while questions related to other religions are spread evenly on other rows of the database. If the user only performs one query to the database and makes use of the fact that every interesting question was included in the answer, then the database learns that the user is Catholic. As a result, we conclude that the participant must issue a query for every question and must not take advantage of previously downloaded rows.

This section analyzes the protocol described in Section 2.1 from the point of view of the network use. We define three different scenarios. In scenario A, the application uses the private streaming that was initially designed in Section 2.1, organizing the database of integers as vector. scenario B organizes the database of integers as a matrix. Finally, scenario C is a control scenario using the naive solution. In scenario C, the automatic poller sends every question to the application before the survey starts.

We define that the survey has N audio files, and all of them have the same size of L bits. Each file can be divided exactly in q blocks of l bits each, and thus 
                              
                                 L
                                 =
                                 q
                                 l
                              
                           . The reader will notice that, since we are describing a system based on the Paillier cryptosystem, the length of bits of each of the blocks cannot be larger than the length of the private key n. l and n are independent configuration parameters and they can have any value, given that l ≤ n. In addition, maximizing the value of l will maximize the amount of information per block in the Paillier system. For this reason, from this moment on, we will define that the number of bits of each block is equal to the length of the private key, i.e. 
                              
                                 l
                                 =
                                 n
                                 ,
                              
                            since this is the optimal point to configure the system.

In scenario C, the machine (m) sends TA
                            bits, and the participant (u) sends nothing.

                              
                                 (12)
                                 
                                    
                                       
                                          
                                             
                                                m
                                                →
                                                u
                                             
                                          
                                          
                                             
                                                :
                                                
                                                N
                                                q
                                                l
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (13)
                                 
                                    
                                       
                                          
                                             
                                                T
                                                C
                                             
                                          
                                          
                                             
                                                =
                                                N
                                                q
                                                l
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

In scenario A, the participant sends the selection vector, the poller operates on the database and returns the multimedia file. Pailler’s encrypted texts use twice more bits than the plain texts. The total size is hence:

                              
                                 (14)
                                 
                                    
                                       
                                          
                                             
                                                u
                                                →
                                                m
                                             
                                          
                                          
                                             
                                                :
                                                
                                                N
                                                2
                                                l
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (15)
                                 
                                    
                                       
                                          
                                             
                                                m
                                                →
                                                u
                                             
                                          
                                          
                                             
                                                :
                                                2
                                                l
                                                q
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (16)
                                 
                                    
                                       
                                          
                                             
                                                T
                                                A
                                             
                                          
                                          
                                             
                                                =
                                                N
                                                2
                                                l
                                                +
                                                2
                                                l
                                                q
                                                =
                                                2
                                                l
                                                (
                                                N
                                                +
                                                q
                                                )
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

We define parameter 
                              
                                 Δ
                                 
                                    T
                                    
                                       C
                                       −
                                       A
                                    
                                 
                              
                            as the difference in exchanged bytes that participant needs for scenarios C and A. 
                              
                                 Δ
                                 
                                    T
                                    
                                       C
                                       −
                                       A
                                    
                                 
                              
                            can be negative. In this case, the proposed system will use more bandwidth than sending the whole database to the user

                              
                                 (17)
                                 
                                    
                                       
                                          
                                             
                                                Δ
                                                
                                                   T
                                                   
                                                      C
                                                      −
                                                      A
                                                   
                                                
                                                =
                                                
                                                   T
                                                   C
                                                
                                                −
                                                
                                                   T
                                                   A
                                                
                                                =
                                                l
                                                
                                                   (
                                                   N
                                                   q
                                                   −
                                                   2
                                                   
                                                      (
                                                      N
                                                      +
                                                      q
                                                      )
                                                   
                                                   )
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

An interesting value is 
                              
                                 L
                                 =
                                 q
                                 l
                                 ≫
                                 l
                              
                           . That is, the audio files are divided in a lot of blocks, and the overall size of the audio file is much larger than the size of any of its blocks. In this case, we can use the approximation:

                              
                                 (18)
                                 
                                    
                                       
                                          
                                             
                                                Δ
                                                
                                                   T
                                                   
                                                      C
                                                      −
                                                      A
                                                   
                                                
                                                =
                                                l
                                                q
                                                
                                                   (
                                                   N
                                                   −
                                                   2
                                                   )
                                                
                                                −
                                                2
                                                l
                                                N
                                                ≈
                                                l
                                                q
                                                
                                                   (
                                                   N
                                                   −
                                                   2
                                                   )
                                                
                                                =
                                                L
                                                
                                                   (
                                                   N
                                                   −
                                                   2
                                                   )
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

If we use this approximation, the protocol described in Section 2.1 only has to be sent the equivalent to two audio files to reach the same amount of privacy than scenario C sending every single file of the database. In the simple case of less than two files available, scenario C saves bandwidth.

We define GAC
                            as the gain in bandwidth sending the files as in scenario A relative to C,

                              
                                 
                                    
                                       
                                          G
                                          
                                             A
                                             C
                                          
                                       
                                       =
                                       
                                          
                                             T
                                             A
                                          
                                          
                                             T
                                             C
                                          
                                       
                                       =
                                       
                                          
                                             2
                                             (
                                             N
                                             +
                                             q
                                             )
                                          
                                          
                                             N
                                             q
                                          
                                       
                                       =
                                       
                                          2
                                          q
                                       
                                       +
                                       
                                          2
                                          N
                                       
                                       .
                                    
                                 
                              
                           
                        

Next, we calculate parameters 
                              
                                 Δ
                                 
                                    T
                                    
                                       B
                                       −
                                       A
                                    
                                 
                              
                            and GAB
                           . For the scenario B:

                              
                                 (19)
                                 
                                    
                                       
                                          
                                             
                                                u
                                                →
                                                m
                                             
                                          
                                          
                                             
                                                :
                                                
                                                
                                                   N
                                                
                                                2
                                                l
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (20)
                                 
                                    
                                       
                                          
                                             
                                                m
                                                →
                                                u
                                             
                                          
                                          
                                             
                                                :
                                                2
                                                l
                                                q
                                                
                                                   N
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (21)
                                 
                                    
                                       
                                          
                                             
                                                T
                                                B
                                             
                                          
                                          
                                             
                                                =
                                                2
                                                l
                                                
                                                   N
                                                
                                                
                                                   (
                                                   1
                                                   +
                                                   q
                                                   )
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

And then,

                              
                                 (22)
                                 
                                    
                                       
                                          
                                             
                                                Δ
                                                
                                                   T
                                                   
                                                      B
                                                      −
                                                      A
                                                   
                                                
                                             
                                          
                                          
                                             
                                                =
                                                2
                                                l
                                                [
                                                
                                                   N
                                                
                                                +
                                                q
                                                
                                                   (
                                                   
                                                      N
                                                   
                                                   −
                                                   1
                                                   )
                                                
                                                −
                                                N
                                                ]
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (23)
                                 
                                    
                                       
                                          
                                             
                                                G
                                                
                                                   A
                                                   B
                                                
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   
                                                      T
                                                      A
                                                   
                                                   
                                                      T
                                                      B
                                                   
                                                
                                                =
                                                
                                                   
                                                      N
                                                      +
                                                      q
                                                   
                                                   
                                                      
                                                         N
                                                      
                                                      
                                                         (
                                                         1
                                                         +
                                                         q
                                                         )
                                                      
                                                   
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

If files are of a big size but there are not many of them, we face another interesting situation. In this case, q ≫ N and 
                              
                                 
                                    G
                                    
                                       A
                                       C
                                    
                                 
                                 ≈
                                 
                                    2
                                    N
                                 
                              
                           .

For example, if the database stores 
                              
                                 N
                                 =
                                 1000
                              
                            files of size 
                              
                                 L
                                 =
                                 80
                                 
                                 KB
                              
                           
                           
                              2
                           
                           
                              2
                              A WAV audio file of 10 s sampled at 8 KHz with 8bits by sample.
                            and we use keys of 
                              
                                 l
                                 =
                                 516
                                 b
                                 ,
                              
                            we will need 
                              
                                 q
                                 =
                                 16000
                              
                            file blocks. Under these circumstances, L ≫ l and q ≫ N, we can use the proposed approximations and 
                              
                                 Δ
                                 
                                    T
                                    
                                       A
                                       −
                                       B
                                    
                                 
                                 ≈
                                 80
                                 
                                 MB
                              
                            (the scenario A saves 80 MB) and GAC
                            ≈ 2% (the scenario A uses 2% the bandwidth of scenario C).


                           Fig. 4
                            shows 
                              
                                 Δ
                                 
                                    T
                                    
                                       B
                                       −
                                       A
                                    
                                 
                              
                            for a several number of the number of blocks q. Except in simple cases where files are small, the scenario A saves bandwidth after comparison to scenario B. For example, for the values of the last example, (
                              
                                 N
                                 =
                                 1000
                                 ,
                              
                           
                           
                              
                                 L
                                 =
                                 80
                                 
                                 ,
                              
                           
                           
                              
                                 l
                                 =
                                 516
                                 b
                              
                           ), 
                              
                                 Δ
                                 
                                    T
                                    
                                       B
                                       −
                                       A
                                    
                                 
                                 =
                                 4
                                 
                                 MB
                              
                            and the scenario A saves 4 MB of information.

The protocol described in Section 2.1 saves bytes when it is compared to the other protocols. Unfortunately, it uses a huge selection vector, as big as the number of questions N. This will be a drawback during the implementation of the final system, as we will analyze in the next section.

In this section, we make use of the private schemes proposed during Section 2.1 to develop a complete VoIP system that is going to be deployed on a cloud distributed system. An initial version of this system is described in [18]. Fig. 5
                         outlines the main elements of the proposed system.

On the left of Fig. 5, we present the poller system. It involves a SIP server to control and manage the connections between the user’s mobile phone and the other servers of the system, a VoIP server to provide assistance on those issues that do not present a threat against the user’s privacy, as general help about the system or questions that will be presented to every user, and finally an MSRP server that controls the communication between the user and the question databases. This MSRP server is aware of the streaming streams that were presented in the last section.

MSRP (Message Session Relay Protocol, [19]) is a session-oriented protocol that supports the exchange of related instant messages in the context of a SIP session (Session Initiation Protocol). MSRP is used for instant messaging, file transfer and images sharing. MSRP uses a SIP offer/answer exchange to establish a SIP session between two users (using the INVITE method, as in an audio or video RTP -Real-time Transport Protocol- session) by offering an SDP session (Session Description Protocol) which indicates the establishment of an MSRP session. MSRP messages are either SEND requests, which carry a message which reports on the status of a previous message. MSRP allows large messages to be sent by breaking the message into chunks which are sent in separate SEND requests. The MSRP protocol is used over TCP and, to get a secure connection, TLS (Transport Layer Security) is used to authenticate devices and to provide integrity and confidentiality for the header fields being transported.

An integration of audio, video and instant messaging unified into a single session can be done through interaction between a SIP Proxy which handles SIP signaling (Kamailio or OpenSIPS are some different open source SIP Proxies available), an RTP server that implements the functionalities of a PBX such as Asterisk, is a free software program that can be used for voice applications, A complete solution such as SylkServer allows an interaction of SIP sessions with different data streams as RTP or MSRP. In regard to the possible SIP clients, Blink supports all services offered by Sylkserver and works with Windows, Linux and Mac.

This MSRP server controls the cloud of databases. These databases are structured as a cloud, as will be justified in next section, and make use of the private streaming schemes that were presented in the last section.

The process goes as follows:

                           
                              1.
                              The poller calls to the participant of the survey, and requests a configuration of the process, such as the calculation of the values for the selection vector.

The participant connects to the pollers. As a result, they create a SIP session with a VoIP channel and MSRP channel. The VoIP channel is going to be used for general voice communication that does not involve any private information.

When the question-answer game begins, the participant asks for the index of a question to the MSRP server. The data private streaming schemes described in the last section take place, and the user gets the audio file from the MSRP server. The user will get the references to the index of the next questions, encrypted in a way similar to the audio stream.

This audio file is played on the mobile phone, and the user selects the next question.

The process goes on until that the user finishes the survey.

The first test of the schemes provided in Section 2.3 showed that even with a single database with many file entries, it was possible to manage a stream of as much as 10Mbps from a single, common computer. Since 10Mbps is way more than needed by an audio stream, the complexity of the protocol presented in this paper is not a limitation for its implementation.

The main drawback of this approach is that even a large computer needs the order or minutes to create the initial selection vector 
                           
                              
                                 S
                                 ¯
                              
                              
                                 (
                                 j
                                 )
                              
                           
                         of several thousand entries, and decrypt the resulting stream. A clever buffering policy of encryptions of [0] may improve speed at the run time at the expense of an extremely slow creation of these initial values. This problem is much more evident when moving the system to a smartphone, due to its constraints in processing power. Since the large size of the selection vector is the main problem for its implementation, we aimed for some deployment to reduce the size of this vector. At the same time, the initial level of privacy provided by the protocol must not be reduced.

To solve these issues, we propose the creation of smaller databases that store evenly spaced questions inside the total space. In this way, the user can look for a specific question in any of these databases, without leaking any information about its order.

Questions must be organized into a tree structure, as Fig. 6
                         shows. We will simplify the description assuming that every question has the same number of sub-questions, k. Te reader will notice this organization is artificial and only for the sake of simplicity. Actually, several questions could be repeated in the tree depending on the specific path the user takes to arrive to them. For example, question 3 in level 5 could be the same question than question 8 in level 2, but the user took a longer path to arrive to that specific question. The optimal organization of questions in a tree and the implications on privacy is an interesting issue not covered in this specific paper, but the user must take into account the privacy considerations in Section 2.2.

In this way, for a tree of depth L and N questions, this relation is verified:

                           
                              (24)
                              
                                 
                                    N
                                    =
                                    
                                       ∑
                                       
                                          i
                                          =
                                          0
                                       
                                       
                                          L
                                          −
                                          1
                                       
                                    
                                    
                                       k
                                       i
                                    
                                    =
                                    
                                       
                                          
                                             k
                                             L
                                          
                                          −
                                          1
                                       
                                       
                                          k
                                          −
                                          1
                                       
                                    
                                    .
                                 
                              
                           
                        
                     

For each level, we provide k databases. Each database stores an item of each one of the branches, as Fig. 6 shows. In this way, when a user downloads a specific question of a level, he first identifies the database that stores the item, and uses the PIR scheme of Section 2.1 to obfuscate the branch that is following at this moment. The reader should notice that guessing the level of the question in general is not a hard task for the database of the original proposal, for example, by counting the number of queries from the user.

This issue can be fixed by using a complex organization of the databases in the tree. How this tree is organized is out of the scope of this paper. The interested reader is referred to [20], where we discuss several mechanisms to protect the privacy of the queries and the most optimal way to organize databases in trees. These mechanisms are included in the implementation of the system described in this paper.

The structure that is presented in this section needs k databases in each level of the questions’ tree, and a total of kL databases. This structure of databases should be organized as a cloud, as Fig. 5 shows, that is managed by the MSRP server. In this scenario, the query of the user includes the level of the question that is downloading from the system, the group inside this level, and the selection vector. The reader will remember that minimizing the size of this selection vector is a mandatory step in order to have a useful system. With this new proposal, the user already limits the available questions by telling the system about the level of the question he is requesting. Since each question has k sub-questions, for a level i, 
                           
                              k
                              
                                 i
                                 −
                                 1
                              
                           
                         questions are available. Hence, the selection vector has now a size of 
                           
                              k
                              
                                 i
                                 −
                                 1
                              
                           
                         items. This is a huge improvement over the complete size of the database that is calculated in Eq. 24, and the privacy of the user is still protected.

After the process described in the last section, the participant has filled a form with the answers to the questions. Next, this answers must be submitted to the poller. The answers should not be leaked to the poller, and the privacy and anonymity of the form must be warranted. In this section, we explore a eVoting scheme the participant runs to send the answers to the poller.

Although the voter navigation may or may not be controlled at the server-side, the voter choices are kept at the voting client and never transferred in clear to the server. The selection method introduced in Section 2.3 sends the identifier of the next question secured, and the server is never aware of which question is the user requesting. In addition, the server never gets a hint about the answer to some questions, such as the case when the next question does not depend on the previous one.

Hence, the answers the voter gives to the surveys are kept local. An electronic voting protocol such as the one described in [21] is used to cast the vote. Pnyx.core is a general eVoting solution that ensures the authenticity of ballots, privacy of voters, accuracy of election results, secrecy of intermediate results, verifiability of election results by voters, and uncoercibility (the prevention of vote-selling and coercion of voters). The framework maintains the privacy of the voter in front of the voting platform components, election administrators and third parties; as well as its integrity.

The system is shown in Fig. 7
                      and involves the next steps:

                        
                           1.
                           Vote casting: The voter issues a vote, a timestamp and a vote receipt. The data that compose the vote is stored in the ballot box of the voting center.

Publication in Local Bulletin Board (LBB): As the votes are cast or periodically, the vote receipts are published into the LBB sorted by timestamp. In addition, as new receipts are published a Merkle tree is created. This produces intermediate hashes (the nodes of the tree) that are also published.

Transmission over DTN: When an observer appears to be in the radio range of the LBB, a certain amount of audit data (receipts and Merkel tree intermediate hashes) are packed and sent to the observer. Different packaging, transmission policies and security mechanism can be applied.

Publication in Global Bulletin Board (GBB): Once the data arrives to the GBB it is published. It must be decided what is going to be published, e.g. all the data that arrives, only data that differs, intermediate checkpoints created by the transmissions nodes, etc.

After the poll ends, all the ballot boxes are gathered and sent to the Central Counting Centre (CCC). In CCC all the information required to validate the integrity of the ballot boxes is available: the ballot boxes of each voting center and the audit data published in the GBB. Therefore, the voting receipts and Merkle tree of each ballot box can be regenerated and compared with the ones published. If the marks are equal, the ballot boxes are considered valid. If the marks do not match the data must be analyzed to determine the reason of it.

This module involves computerized devices and systems used by voters to interact with the service. They are the end-points of the system, and the same devices used during the VoIP communication. We will assume these devices are owned by the voter, and they are smart phones or any other communication device able to process data with custom applications.

In the particular case considered in this article, the questions are structured in a k-ary tree where each answer determines the following questions the voter has right to answer to. Therefore, it has to be verified that the choices recovered from each decrypted vote correspond to a valid branch/path of the tree. Different encodings for the voter choices can be used in order to make these verifications as efficient as possible. In case of a binary tree, each node represents a question. For each question, the left child is the next question the voter will be presented if she asks NO, and the right one is the next question that the voter will be presented if she asks YES. Each of the two possible paths is differentiated by adding a 0 or a 1 to the question identifier.

In this case, it would be enough to put the leaf (the last) question identifier and the answer in the vote, to be able to recover all the selections made by the voter: from a decrypted vote with Question ID = 010 and Answer = YES, it can be inferred, according to the question tree, that the voter voted NO for the first question, YES for the second question with Question ID = 0, NO for the third question with Question ID = 01, and that for the last question with Question ID = 010 the answer YES was provided.

In case the question tree has some answers for different questions that bring to the same next question (that is, some branches of the tree meet in the same node), the full set of Question ID and Answer should be included in the vote to be encrypted, and verified after decryption against the full question tree.

The eVoting process uses the keys described next.


                              
                                 
                                    
                                       TS
                                    
                                    Timestamp mark that indicates when the audit data is created.

Authentication token that links the vote with a voter and voting session.

Data that represent the voting options selected by the voter.

Ballot Box Public key for signing

Ballot Box Secret key for signing

Election public key

Election secret key (or shares)

The vote casting comprises the following steps:

                                 
                                    1.
                                    Vote creation: The voter generates a ciphered vote with the answers to the poll (VO). E
                                       kpe{VO}.

Vote transmission: The signed and encrypted vote is sent to the ballot box along the authentication token (ta
                                       ). {ta|E
                                       kpe{VO}}. The data that compose the vote is stored in the ballot box of the voting center, controlled by the operator of the VoIP system.

Vote casting: The ballot box stores the signed and encrypted vote along with the authentication token (ta
                                       ) and a time stamp (TS). {ta|E
                                       kpe{VO}|TS}.

Vote receipt generation: A vote receipt (R) is generated and signed by the ballot box server. The receipt R is returned to the voter as a proof for later recorded as cast verification. 
                                          
                                             R
                                             =
                                             
                                                Hash
                                                (
                                                {
                                                t
                                                a
                                                |
                                             
                                             
                                                E
                                                kpe
                                             
                                             
                                                
                                                   {
                                                   V
                                                   O
                                                   }
                                                
                                                |
                                                T
                                                S
                                                }
                                                )
                                                ,
                                             
                                          
                                       
                                       
                                          
                                             
                                                R
                                                sig
                                             
                                             =
                                             Sign
                                             
                                                (
                                                
                                                   K
                                                   s
                                                
                                                ,
                                                R
                                                )
                                             
                                             
                                                }
                                             
                                          
                                       .

Using this module, the voter issues a vote associated to his/her identity, a timestamp and a vote receipt. The data that compose the vote is stored in the ballot box of the voting center.

This is the module responsible for collecting and storing the ballots cast by voters. As part of the electronic voting protocol, the voting choices collected at the voting client are encrypted using a public key cryptosystem, and digitally signed prior to sending them to the voting server.

One of the submodules of the ballot box server is the Local Bulletin Board (LBB). The LBB has a two-fold functionality. On one hand, LBB allows the voters to check whether their vote has been correctly cast. On the other hand, LBB can be used as a source of information for the observers that gather the audit data. LBB can be updated periodically, under a predefined time interval, or each time a voter casts a vote. The published audit data (A) may contain vote receipts (R), that contain more information than the regular one delivered to the voter, and intermediate Merkle tree hash values.

The vote receipts are published into the ballot box server sorted by timestamp. In addition, as new receipts are published a Merkle tree is created [22]. A Merkle tree is a tree of hashes that allows efficient verification of large data structures. The advantage is that it allows verifying the data with different levels of granularity depending on the number of hashes available. This can be applied to the verification of the integrity of the ballot box and its votes. This produces intermediate hashes (the nodes of the tree) that are also published.

The ballot box server stores the encrypted votes and signatures until the end of the voting phase, when they will be exported to start with the counting phase. For each voter, the ballot box server stores the tuple {TS|ta
                              |VO|Sign(KSb, R)}.

This server is in charge of opening the digital ballots and counting the results. During the counting phase, the encrypted votes are first detached from their signatures, and then entered into a Mix-Net. Mix-Nets where first proposed by Chaum in [23]s, and they are a standard tool used in electronic voting in order to uncorrelate votes from their senders (the voters) [24,25]. The Mix-Net therefore shuffles the encrypted votes, breaking their correlation with the digitally signed votes which were received at the voting server. Once this correlation is broken, the votes can then be decrypted without breaking the voter’s privacy.

Upon vote decryption, the set of choices made by the voter is recovered. The correctness of this set of choices has to be verified against the election rules. Otherwise, a mis-formed vote could be included in the count and corrupt the election results (a naive example would be a voter who votes twice for a candidate). In the tallying server, all the information required to validate the integrity of the ballot boxes is available: the ballot boxes of each voting center and the audit data published in the ballot box server. Therefore, the voting receipts and Merkle tree of each ballot box can be regenerated and compared with the ones published. If the marks are equal, the ballot boxes are considered valid. If the marks do not match, the data must be analyzed to determine the reason of it.

The validation of the proofs consists of:

                                 
                                    1.
                                    Checking the signature of each message proof validates with the audit data provided by the proof and its timestamp.

Checking the audit data provided matches the sequence of data to which the message proof refers.

Checking the message proof timestamps are consistent with the timestamps of the data they refer to.

Checking additional information coherence, e.g. the VO corresponds to a valid branch of the question tree.

This is the server system that publishes the results of the questionnaire. Any security mechanism related to this module is outside the scope of this work.

@&#CONCLUSIONS AND FUTURE WORK@&#

This article presents a mesh-up of different technologies to provide privacy during a poll performed over VoIP. If the next question depends on the answer to previous questions, even if the answers are not sent to the poller in clear, the index of the question the participant requests may leak enough data to the poller to learn private information.

The system provided in this paper is based on state-of-the-art Private Information Systems and eVoting. It explores some current proposals in the literature about efficiency of the PIR system, and concludes that the PIR protocol used to select questions depends on the size of the audio files of the system and how the system is configured to cut down these files for streaming. Simple approaches are more suitable for the needs of the application than complex organizations of queries. The system must be aware of the size of the question file, and select one mechanism or the other depending on this size. Initial simulations of the system showed that an important bottleneck was present at the client side. That is, the encryption mechanisms need the calculation of large vectors and these calculations are slow on current mobile phones as our initial implementations showed.

To address this issue, we have described a cloud system to organize databases in a tree that minimizes the size of the selection vector for the participants in the survey and makes the system more efficient and feasible. Despite our initial simulations and analysis, the cloud of databases was not implemented. We are especially concerned about the creation of the selection vector in a smartphone with constrained memory and processing power. Even if we feel that the results provided by the theoretical analysis are promising, an implementation of the final system to validate our ideas is very convenient. Currently, we are working on this implementation.

Finally, we presented a system to send back the answers to the survey to the poller. This system is based on eVoting technologies, and warrants the privacy of the user and the anonymity of each one of the ballots issued by the participants. This system is already implemented and will be fully described in future papers.

@&#ACKNOWLEDGMENTS@&#

This article describes part of the Ubiquitous Secure Electronic Voting (u-SEV), an INNPACTO project (IPT-2012-0598-430000) co-funded by the Ministerio de Economia y Competitividad of the Spanish Government and the European Fund for the Regional Development (FEDER).

@&#REFERENCES@&#

