@&#MAIN-TITLE@&#A sparse evaluation technique for detailed semantic analyses

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           We propose a new sparse evaluation technique.


                        
                        
                           
                           The proposed technique can be effectively applicable to abstract interpretation-based semantic analyses.


                        
                        
                           
                           We show that our technique effectively improves the scalability of an industrial-strength static analyzer.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Static analysis

Abstract interpretation

Sparse evaluation

Data-flow analysis

@&#ABSTRACT@&#


               
               
                  We present a sparse evaluation technique that is effectively applicable to a set of elaborate semantic-based static analyses. Existing sparse evaluation techniques are effective only when the underlying analyses have comparably low precision. For example, if a pointer analysis precision is not affected by numeric statements like x≔1 then existing sparse evaluation techniques can remove the statement, but otherwise, the statement cannot be removed. Our technique, which is a fine-grained sparse evaluation technique, is effectively applicable even to elaborate analyses. A key insight of our technique is that, even though a statement is relevant to an analysis, it is typical that analyzing the statement involves only a tiny subset of its input abstract memory and the most are irrelevant. By exploiting this sparsity, our technique transforms the original analysis into a form that does not involve the fine-grained irrelevant semantic behaviors. We formalize our technique within the abstract interpretation framework. In experiments with a C static analyzer, our technique improved the analysis speed by on average 14×.
               
            

@&#INTRODUCTION@&#

In static analysis, the technique of sparse evaluation has been widely used to optimize the analysis performance [4,27,11,26,17,14]. Sparse evaluation is based on the observation that static analysis sometimes aggressively abstracts program semantics and therefore a number of program statements are irrelevant to the analysis. For instance, typical pointer analyses (e.g., [14,15]) have comparably low precision and not affected by numeric statements such as 
                        
                           x
                        
                        ≔
                        
                           1
                        
                     . The goal of existing sparse evaluation is to remove such irrelevant statements, which makes the analysis problem smaller and improves the analysis׳ scalability. In the literature, sparse evaluations have been effectively used to improve the performance of pointer analysis [14,30] and classical data-flow analyses [4,27].

However, existing sparse evaluation techniques are not effective for elaborate semantic analyses in general. Note that the basic assumption of existing sparse evaluation is that the given analysis problem is simple-minded and hence a number of program statements are irrelevant to the analysis. However, in general semantic analyses, it is not uncommon that the analysis is so detailed that the assumption of sparse evaluation does not hold. That is, such an analysis considers all types of values (e.g., including both numbers and pointers) and almost all statements in the program are relevant to the underlying analysis. For instance, consider an elaborate pointer analysis that considers not only pointers but also numeric values. Then statements like 
                        
                           x
                        
                        ≔
                        
                           1
                        
                     , which would be irrelevant to simple pointer analyses, are no longer irrelevant and cannot be removed by existing sparse evaluation techniques.

In this paper, we present a new sparse evaluation technique for such detailed static analyses. The intuition behind our technique is that, even though an analysis is detailed and a statement is relevant, the analysis is still sparse in a fine-grained way: analyzing the statement uses only small part of its abstract memory. For example, consider analyzing the statement 
                        
                           x
                        
                        ≔
                        
                           1
                        
                     . The abstract semantics for the statement would update only the value of x but other values, say y, are not involved in the analysis of the statement. To exploit this sparsity, we first reformulate the analysis problem into an equivalent form that is more fine-grained in that semantic equations are expressed explicitly in terms of individual abstract locations. We call this step decomposition. Then, we define two elimination procedures (which we call no-change and no-contribution eliminations, respectively) that remove the fine-grained irrelevant behaviors of the analysis. We present our technique in the abstract interpretation framework [8,6] and prove that the decomposition and elimination procedures are semantics-preserving, which means that our technique maintains the original analysis׳ soundness and precision.

Our work provides a general and flexible alternative to the recent sparse analysis framework [23]. Although the goal of ours and the sparse analysis in [23] is the same (i.e., making the analysis sparse), the techniques used are different: the technique in [23] constructs def-use dependencies while we eliminate unnecessary dependencies. This difference makes our technique flexible in controlling the sparseness of the final analysis. We discuss this point in Section 8 in more detail. Furthermore, we generalize the idea of sparse technique in the abstract interpretation framework with arbitrary trace partitioning.

We show the effectiveness of our technique in a realistic setting. We implemented our technique on top of Sparrow, an interval domain-based abstract interpreter [18,16,21,22,24]. In experiments, our technique improved the analysis speed from 2 to 59 times, on average 14 times, and reduced peak memory consumption by 29–80%, on average 56%, for a variety of open-source C benchmarks (6K–111K LOC).


                     Overview: We illustrate our technique with an example. Suppose that we analyze the program in Fig. 1
                     (a) with a non-relational analysis: the abstract state of the analysis is a map from the set of abstract locations (simply variables x and y in this example) to abstract values, say numeric intervals [8]. During the analysis, the first statement defines the value of x, the second statement defines y, and the last statement updates y with the value of x. Observe that existing sparse evaluation techniques remove no statements in this example, because all the three statements have some effects on the analysis. On the other hand, our technique works as follows:
                        
                           1.
                           We reformulate the analysis (Fig. 1(a)) into the decomposed form (Fig. 1(b)) in which values of each abstract location are computed separately: each instruction c in Fig. 1(a) is split into (c, x) and (c, y) that hold the values of x and y, respectively. For instance, at node 
                                 (
                                 1
                                 ,
                                 x
                                 )
                              , the value of x at instruction 1 is stored and value for y at instruction 1 is stored at 
                                 (
                                 1
                                 ,
                                 y
                                 )
                              . Edge 
                                 (
                                 c
                                 ,
                                 x
                                 )
                                 →
                                 (
                                 c
                                 ′
                                 ,
                                 x
                                 ′
                                 )
                               means that the value of 
                                 x
                                 ′
                               at 
                                 c
                                 ′
                               may depend on the value of x at c.

In Fig. 1(b), we eliminate nodes that have no effect on the analysis, which we call no-change elimination. Note that, among the six nodes in Fig. 1(b), values are actually updated at nodes 
                                 (
                                 1
                                 ,
                                 x
                                 )
                              , 
                                 (
                                 2
                                 ,
                                 y
                                 )
                              , and 
                                 (
                                 3
                                 ,
                                 y
                                 )
                              . At other nodes (dotted ones in Fig. 1(b)), values are not changed. The goal of this step is to remove such “no-change” nodes from the analysis. We simply remove the nodes and short-circuit their in/outflows, which results in Fig. 1(c). Observe that, after no-change elimination, the value of x from 
                                 (
                                 1
                                 ,
                                 x
                                 )
                               is directly propagated to 
                                 (
                                 3
                                 ,
                                 y
                                 )
                              .

In Fig. 1(c), we remove irrelevant input flows, which we call no-contribution elimination. In Fig. 1(c), only the value of x is necessary to update the value of y at 
                                 (
                                 3
                                 ,
                                 y
                                 )
                              ; the value of y is not used at 
                                 (
                                 3
                                 ,
                                 y
                                 )
                              . So, we remove the “no-contribution” flow 
                                 (
                                 2
                                 ,
                                 y
                                 )
                                 →
                                 (
                                 3
                                 ,
                                 y
                                 )
                              . Other unnecessary flows are also removed, leading to Fig. 1(d).

With our technique, the original analysis problem (Fig. 1(a)) is reduced to a smaller problem (Fig. 1(d)). Obviously, fixpoint computation for the smaller problem will be cheaper than the original analysis.


                     Outline: Section 2 describes the family of static analyses that this paper considers. Section 3 defines the decomposition step. Section 4 defines two semantic independence involved in the static analysis defined in Section 2. Section 5 formally presents no-contribution and no-elimination procedures. Section 6 shows how to apply our technique to an example analysis. Section 7 presents the experimental results. Section 8 discusses related work. Section 9 concludes the paper.


                     Notation: In this paper, all functions are considered partial functions. We consider functions that are of type 
                        f
                        ∈
                        A
                        →
                        B
                     , where A is a set and B is a complete partial order (cpo). We write 
                        dom
                        (
                        f
                        )
                        ⊆
                        A
                      for the domain of f. we write 
                        f
                        
                           
                              |
                           
                           
                              C
                           
                        
                      for the restriction of function f to the domain 
                        dom
                        (
                        f
                        )
                        ∩
                        C
                     . We write 
                        f
                        
                           
                              \
                           
                           
                              C
                           
                        
                      for the restriction of f to the domain 
                        dom
                        (
                        f
                        )
                        −
                        C
                     . We abuse the notation 
                        f
                        
                           
                              |
                           
                           
                              a
                           
                        
                      and f\
                        a
                      for the domain restrictions on singleton set 
                        {
                        a
                        }
                      and 
                        dom
                        (
                        f
                        )
                        −
                        {
                        a
                        }
                     , respectively. We write 
                        f
                        [
                        a
                        ↦
                        b
                        ]
                      for the function constructed from function f by changing the value for a to b. We write 
                        f
                        [
                        
                           
                              a
                           
                           
                              1
                           
                        
                        ↦
                        
                           
                              b
                           
                           
                              1
                           
                        
                        ,
                        …
                        ,
                        
                           
                              a
                           
                           
                              n
                           
                        
                        ↦
                        
                           
                              b
                           
                           
                              n
                           
                        
                        ]
                      for 
                        f
                        [
                        
                           
                              a
                           
                           
                              1
                           
                        
                        ↦
                        
                           
                              b
                           
                           
                              1
                           
                        
                        ]
                        ⋯
                        [
                        
                           
                              a
                           
                           
                              n
                           
                        
                        ↦
                        
                           
                              b
                           
                           
                              n
                           
                        
                        ]
                     . We write 
                        f
                        [
                        {
                        
                           
                              a
                           
                           
                              1
                           
                        
                        ,
                        …
                        ,
                        
                           
                              a
                           
                           
                              n
                           
                        
                        }
                        
                           
                              ↦
                           
                           
                              w
                           
                        
                        b
                        ]
                      for 
                        f
                        [
                        
                           
                              a
                           
                           
                              1
                           
                        
                        ↦
                        f
                        (
                        
                           
                              a
                           
                           
                              1
                           
                        
                        )
                        ⊔
                        b
                        ,
                        …
                        ,
                        
                           
                              a
                           
                           
                              n
                           
                        
                        ↦
                        f
                        (
                        
                           
                              a
                           
                           
                              n
                           
                        
                        )
                        ⊔
                        b
                        ]
                      (weak update). We write 
                        [
                        a
                        ↦
                        b
                        ]
                        ∈
                        A
                        →
                        B
                      for a function 
                        [
                        a
                        ↦
                        b
                        ]
                        (
                        x
                        )
                        =
                        b
                      if a=x, otherwise undefined, i.e., 
                        [
                        a
                        ↦
                        b
                        ]
                        (
                        x
                        )
                        =
                        ⊥
                     . For all domains (cpos), we assume an implicit join operator ⊔, ordering relation ⊑, and appropriate 
                        ⊤
                      and 
                        ⊥
                      elements. In particular, we define 
                        ⊔
                        ,
                        ⊑
                        ,
                        ⊤
                        ,
                        ⊥
                      for functions in a pointwise fashion, e.g., 
                        f
                        ⊔
                        g
                        =
                        λ
                        x
                        .
                        f
                        (
                        x
                        )
                        ⊔
                        g
                        (
                        x
                        )
                     . We write 
                        e
                        .
                        A
                     , 
                        e
                        .
                        B
                      to denote the first and the second element of 
                        e
                        ∈
                        A
                        ×
                        B
                     , respectively.

In this section, we define a class of static analysis that we consider in this paper. We consider transition systems as a program model so that the analysis is general for arbitrary programming language. Thus, our technique is generally applicable to any language.

In Sections 2.1 and 2.2, we define the program and its collecting semantics, respectively. In Section 2.3, we abstract the collecting semantics and derive the abstract semantics that we consider. We suppose basic knowledge of the abstract interpretation framework [8,6] and the trace partitioning [19].

We describe a program P as a transition system 
                           (
                           S
                           ,
                           →
                           ,
                           
                              
                                 S
                              
                              
                                 ι
                              
                           
                           )
                        , where 
                           S
                         is the set of states of the program, 
                           (
                           →
                           )
                           ⊆
                           S
                           ×
                           S
                         is the transition relation describing how the program execution progresses from one state to the next state, and 
                           
                              
                                 S
                              
                              
                                 ι
                              
                           
                           ⊆
                           S
                         denotes the set of initial states.

We write 
                           
                              
                                 S
                              
                              
                                 ⋆
                              
                           
                         for the set of all finite non-empty sequences of states. When σ is a finite sequence of states, σ
                        
                           i
                         denotes the 
                           (
                           i
                           +
                           1
                           )
                         th state of the sequence, σ
                        0 the first state, and 
                           
                              
                                 σ
                              
                              
                                 ⊣
                              
                           
                         the last state. Given a sequence σ and a state s, 
                           σ
                           ·
                           s
                         denotes a sequence obtained by appending s to σ. A sequence σ is said to be a trace of the program P if σ is a partial execution sequence of P, i.e., 
                           
                              
                                 σ
                              
                              
                                 0
                              
                           
                           ∈
                           
                              
                                 S
                              
                              
                                 ι
                              
                           
                           ∧
                           ∀
                           i
                           .
                           
                              
                                 σ
                              
                              
                                 i
                              
                           
                           →
                           
                              
                                 σ
                              
                              
                                 i
                                 +
                                 1
                              
                           
                        . We abuse the notion of transition relation 
                           →
                         for traces, i.e., 
                           σ
                           ′
                           →
                           σ
                           
                           ⟺
                           
                           ∃
                           s
                           .
                           σ
                           =
                           σ
                           ′
                           ·
                           s
                           ∧
                           
                              
                                 σ
                              
                              
                                 ⊣
                              
                              
                                 ′
                              
                           
                           →
                           s
                        .

The collecting semantics 
                           〚
                           P
                           〛
                           ∈
                           P
                           (
                           
                              
                                 S
                              
                              
                                 ⋆
                              
                           
                           )
                         of the program P is the set of all traces of P: 
                           
                              
                                 〚
                                 P
                                 〛
                                 =
                                 {
                                 σ
                                 ∈
                                 
                                    
                                       S
                                    
                                    
                                       ⋆
                                    
                                 
                                 ∣
                                 
                                    
                                       σ
                                    
                                    
                                       0
                                    
                                 
                                 ∈
                                 
                                    
                                       S
                                    
                                    
                                       ι
                                    
                                 
                                 ∧
                                 ∀
                                 i
                                 .
                                 
                                    
                                       σ
                                    
                                    
                                       i
                                    
                                 
                                 →
                                 
                                    
                                       σ
                                    
                                    
                                       i
                                       +
                                       1
                                    
                                 
                                 }
                              
                           
                        Note that the semantics 
                           〚
                           P
                           〛
                         is the least fixpoint of the semantic function 
                           F
                           ∈
                           P
                           (
                           
                              
                                 S
                              
                              
                                 ⋆
                              
                           
                           )
                           →
                           P
                           (
                           
                              
                                 S
                              
                              
                                 ⋆
                              
                           
                           )
                        , i.e., 
                           〚
                           P
                           〛
                           =
                           lfp
                           F
                        , defined as follows: 
                           
                              
                                 F
                                 (
                                 Σ
                                 )
                                 ≜
                                 I
                                 ∪
                                 {
                                 σ
                                 ·
                                 s
                                 ∣
                                 σ
                                 ∈
                                 Σ
                                 ∧
                                 
                                    
                                       σ
                                    
                                    
                                       ⊣
                                    
                                 
                                 →
                                 s
                                 }
                              
                           
                        where 
                           I
                           =
                           {
                           s
                           ∣
                           s
                           ∈
                           
                              
                                 S
                              
                              
                                 ι
                              
                           
                           }
                         is the set of singleton traces of initial states.

We consider the abstract semantics that are obtained from the collecting semantics of the program P by the following Galois connections: 
                           
                              
                                 P
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       ⋆
                                    
                                 
                                 )
                                 
                                    
                                       ⇆
                                    
                                    
                                       
                                          
                                             α
                                          
                                          
                                             1
                                          
                                       
                                    
                                    
                                       
                                          
                                             γ
                                          
                                          
                                             1
                                          
                                       
                                    
                                 
                                 (
                                 Δ
                                 →
                                 P
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       ⋆
                                    
                                 
                                 )
                                 )
                                 
                                    
                                       ⇆
                                    
                                    
                                       
                                          
                                             α
                                          
                                          
                                             2
                                          
                                       
                                    
                                    
                                       
                                          
                                             γ
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 (
                                 Δ
                                 →
                                 
                                    
                                       S
                                    
                                    
                                       ^
                                    
                                 
                                 )
                              
                           
                        The abstract domain (
                           Δ
                           →
                           
                              
                                 S
                              
                              
                                 ^
                              
                           
                        ) is obtained by applying the following two abstractions in order.
                           
                              1.
                              
                                 Partitioning abstraction 
                                 
                                    (
                                    
                                       
                                          α
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          γ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                 : we abstract the set of traces 
                                    (
                                    P
                                    (
                                    
                                       
                                          S
                                       
                                       
                                          ⋆
                                       
                                    
                                    )
                                    )
                                  into partitioned sets of traces (
                                    Δ
                                    →
                                    P
                                    (
                                    
                                       
                                          S
                                       
                                       
                                          ⋆
                                       
                                    
                                    )
                                 , where 
                                    Δ
                                  is the set of partitioning indices, e.g., 
                                    Δ
                                  is the set of control points in the program). Suppose we are given a well-chosen partitioning function 
                                    δ
                                    ∈
                                    Δ
                                    →
                                    P
                                    (
                                    
                                       
                                          S
                                       
                                       
                                          ⋆
                                       
                                    
                                    )
                                  such that δ is a partition, i.e., 
                                    
                                       
                                          S
                                       
                                       
                                          ⋆
                                       
                                    
                                    =
                                    
                                       
                                          ⋃
                                       
                                       
                                          x
                                          ∈
                                          Δ
                                       
                                    
                                    δ
                                    (
                                    x
                                    )
                                  and 
                                    ∀
                                    x
                                    ,
                                    y
                                    ∈
                                    Δ
                                    .
                                    x
                                    ≠
                                    y
                                    ⇒
                                    δ
                                    (
                                    x
                                    )
                                    ∩
                                    δ
                                    (
                                    y
                                    )
                                    =
                                    ∅
                                 . Then, α
                                 1 and γ
                                 1 are defined as follows: (It is well-known that such α
                                 1 and γ
                                 1 form a Galois-connection [19].) 
                                    
                                       
                                          
                                             
                                                α
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          Σ
                                          )
                                          ≜
                                          λ
                                          c
                                          ∈
                                          Δ
                                          .
                                          Σ
                                          ∩
                                          δ
                                          (
                                          c
                                          )
                                          
                                             
                                                γ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ϕ
                                          )
                                          ≜
                                          
                                             
                                                ⋃
                                             
                                             
                                                c
                                                ∈
                                                Δ
                                             
                                          
                                          ϕ
                                          (
                                          c
                                          )
                                       
                                    
                                 By choosing a suitable δ, we can define various partitioning strategies [19]. For example, in imperative languages, a state is often decomposed into a control point in 
                                    C
                                  and a memory state in 
                                    M
                                 , i.e., 
                                    S
                                    =
                                    C
                                    ×
                                    M
                                 . We use 
                                    C
                                  as the set of partitioning indices and let 
                                    
                                       
                                          δ
                                       
                                       
                                          C
                                       
                                    
                                    ∈
                                    C
                                    →
                                    P
                                    (
                                    
                                       
                                          S
                                       
                                       
                                          ⋆
                                       
                                    
                                    )
                                  partition 
                                    
                                       
                                          S
                                       
                                       
                                          ⋆
                                       
                                    
                                  based on the final control point: 
                                    
                                       
                                          δ
                                       
                                       
                                          C
                                       
                                    
                                    (
                                    c
                                    )
                                    ≜
                                    {
                                    σ
                                    ∈
                                    
                                       
                                          S
                                       
                                       
                                          ⋆
                                       
                                    
                                    ∣
                                    ∃
                                    m
                                    .
                                    
                                       
                                          σ
                                       
                                       
                                          ⊣
                                       
                                    
                                    =
                                    (
                                    c
                                    ,
                                    m
                                    )
                                    }
                                 . Then, 
                                    
                                       
                                          δ
                                       
                                       
                                          C
                                       
                                    
                                  defines the usual flow-sensitive analysis. Likewise, we can define any other trace partitioning such as flow-insensitivity, context-(in)sensitivity, and path-(in)sensitivity by choosing an appropriate δ.


                                 State abstraction 
                                 
                                    (
                                    
                                       
                                          α
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    
                                       
                                          γ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 : for each partition, we suppose that the associated set of traces is abstracted into an abstract state (
                                    
                                       
                                          S
                                       
                                       
                                          ^
                                       
                                    
                                 ) that over-approximates the reachable states of the traces. α
                                 2 and γ
                                 2 are defined as follows: 
                                    
                                       
                                          
                                             
                                                α
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          ϕ
                                          )
                                          ≜
                                          λ
                                          c
                                          ∈
                                          Δ
                                          .
                                          
                                             
                                                α
                                             
                                             
                                                S
                                             
                                          
                                          (
                                          ϕ
                                          (
                                          c
                                          )
                                          )
                                          
                                             
                                                γ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          
                                             
                                                ϕ
                                             
                                             
                                                ^
                                             
                                          
                                          )
                                          ≜
                                          λ
                                          c
                                          ∈
                                          Δ
                                          .
                                          
                                             
                                                γ
                                             
                                             
                                                S
                                             
                                          
                                          (
                                          
                                             
                                                ϕ
                                             
                                             
                                                ^
                                             
                                          
                                          (
                                          c
                                          )
                                          )
                                       
                                    
                                 where 
                                    
                                       
                                          α
                                       
                                       
                                          S
                                       
                                    
                                  and 
                                    
                                       
                                          γ
                                       
                                       
                                          S
                                       
                                    
                                  are abstraction and concretization functions for set of traces such that 
                                    P
                                    (
                                    
                                       
                                          S
                                       
                                       
                                          ⋆
                                       
                                    
                                    )
                                    
                                       
                                          ⇆
                                       
                                       
                                          
                                             
                                                α
                                             
                                             
                                                S
                                             
                                          
                                       
                                       
                                          
                                             
                                                γ
                                             
                                             
                                                S
                                             
                                          
                                       
                                    
                                    
                                       
                                          S
                                       
                                       
                                          ^
                                       
                                    
                                 . We assume that 
                                    
                                       
                                          α
                                       
                                       
                                          S
                                       
                                    
                                  abstracts the traces in a way that 
                                    
                                       
                                          S
                                       
                                       
                                          ^
                                       
                                    
                                  is a function cpo (complete partial order) 
                                    
                                       
                                          L
                                       
                                       
                                          ^
                                       
                                    
                                    →
                                    
                                       
                                          V
                                       
                                       
                                          ^
                                       
                                    
                                  where 
                                    
                                       
                                          L
                                       
                                       
                                          ^
                                       
                                    
                                  is a finite set of abstract locations, and 
                                    
                                       
                                          V
                                       
                                       
                                          ^
                                       
                                    
                                  is an arbitrary cpo for representing abstract values. All non-relational analyses are expressible in this domain. For example, in numerical analysis that uses interval domain, the abstract memory state is a map from all abstract locations to interval values. In addition, the packed relational domain [7,20,31,2] also fits to this domain. Let 
                                    Packs
                                    ⊆
                                    P
                                    (
                                    Var
                                    )
                                  be a set of variable groups (i.e., packs) such that 
                                    ⋃
                                    Packs
                                    =
                                    Var
                                 , and 
                                    R
                                  be a relational abstract domain such as the octagon domain [20]. Then, the packed relational domain has the form of 
                                    Packs
                                    →
                                    R
                                 , which associates each pack with constraints among the variables in the pack. In our framework, we impose that 
                                    
                                       
                                          L
                                       
                                       
                                          ^
                                       
                                    
                                  is fixed prior to the analysis, which means that our technique is not applicable to analyses with, for example, dynamic variable packing.

We consider abstract semantics that is characterized by the least fixpoint of abstract semantic function 
                           
                              
                                 F
                              
                              
                                 ^
                              
                           
                           ∈
                           (
                           Δ
                           →
                           
                              
                                 S
                              
                              
                                 ^
                              
                           
                           )
                           →
                           (
                           Δ
                           →
                           
                              
                                 S
                              
                              
                                 ^
                              
                           
                           )
                         defined as
                           
                              (1)
                              
                                 
                                    
                                       F
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 λ
                                 c
                                 ∈
                                 Δ
                                 .
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       c
                                    
                                 
                                 (
                                 
                                    
                                       
                                          ⨆
                                       
                                       
                                          c
                                          ′
                                          ↪
                                          c
                                       
                                    
                                    
                                       
                                          X
                                       
                                       
                                          ^
                                       
                                    
                                    (
                                    c
                                    ′
                                    )
                                 
                                 )
                                 .
                              
                           
                        where 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 c
                              
                           
                           ∈
                           
                              
                                 S
                              
                              
                                 ^
                              
                           
                           →
                           
                              
                                 S
                              
                              
                                 ^
                              
                           
                         is the semantic function at partitioning index c and ↪ is the transition relation between partitioning indices such that 
                           
                              
                                 (
                                 ↪
                                 )
                                 ⊇
                                 {
                                 (
                                 c
                                 ′
                                 ,
                                 c
                                 )
                                 ∈
                                 Δ
                                 ×
                                 Δ
                                 ∣
                                 ∃
                                 σ
                                 ′
                                 ∈
                                 δ
                                 (
                                 c
                                 ′
                                 )
                                 .
                                 σ
                                 ′
                                 →
                                 σ
                                 ∧
                                 σ
                                 ∈
                                 δ
                                 (
                                 c
                                 )
                                 }
                              
                           
                        Transition relation ↪includes all the possible transitions between partitioning indices: ↪includes a flow 
                           (
                           c
                           ′
                           ,
                           c
                           )
                         if there exists a trace 
                           σ
                           ′
                         in partition 
                           c
                           ′
                         and the next of 
                           σ
                           ′
                         belongs to partition c. Note that transition → is generally unknown prior to the analysis and this is why ↪ is a superset of the possible transition flows. For example, suppose we analyze an imperative language and we use 
                           
                              
                                 δ
                              
                              
                                 C
                              
                           
                         as the partitioning function. Then, ↪ is identical to the control flow relation of the program, which is often given before the program execution. When analyzing a functional program, for another example, the transition flows can be approximated before the analysis; ↪ can be given by a separate pre-analysis.

The abstract semantic function 
                           
                              
                                 F
                              
                              
                                 ^
                              
                           
                         should be designed to satisfy 
                           α
                           ○
                           F
                           ⊑
                           
                              
                                 F
                              
                              
                                 ^
                              
                           
                           ○
                           α
                         (
                           α
                           =
                           
                              
                                 α
                              
                              
                                 2
                              
                           
                           ○
                           
                              
                                 α
                              
                              
                                 1
                              
                           
                        ), then the soundness of the abstract semantics is guaranteed by the fixpoint transfer theorem [9].

The first step of our approach is to re-formulate the analysis equation (1) into a fine-grained form, which we call “decomposition”. Note that it is not obvious to identify independencies (irrelevant semantic behaviors) directly from the original analysis given in (1), because the semantic function 
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              c
                           
                        
                        ∈
                        
                           
                              S
                           
                           
                              ^
                           
                        
                        →
                        
                           
                              S
                           
                           
                              ^
                           
                        
                      works for abstract states but the independencies are usually defined in terms of individual abstract locations. Thus, we first decompose the original analysis so that the analysis is expressed in terms of each abstract location rather than the entire abstract states. In the case of packed relational analyses, the analysis can be expressed in terms of each variable pack rather than each abstract location. With this decomposition, the elimination procedures, which will be defined in Section 5, become simpler.

We first decompose the partitioning indices: 
                        Δ
                      is refined by 
                        
                           
                              L
                           
                           
                              ^
                           
                        
                     , yielding Δ
                     
                        d
                      
                     
                        
                           
                              
                                 
                                    Δ
                                 
                                 
                                    d
                                 
                              
                              ≜
                              Δ
                              ×
                              
                                 
                                    L
                                 
                                 
                                    ^
                                 
                              
                           
                        
                     Then, the transition relation ↪ is decomposed into 
                        
                           
                              ↪
                           
                           
                              d
                           
                        
                     : 
                        
                           
                              
                                 
                                    ↪
                                 
                                 
                                    d
                                 
                              
                              ≜
                              {
                              (
                              (
                              c
                              ′
                              ,
                              l
                              ′
                              )
                              ,
                              (
                              c
                              ,
                              l
                              )
                              )
                              ∈
                              
                                 
                                    Δ
                                 
                                 
                                    d
                                 
                              
                              ×
                              
                                 
                                    Δ
                                 
                                 
                                    d
                                 
                              
                              ∣
                              c
                              ′
                              ↪
                              c
                              }
                           
                        
                     That is, each partitioning index (e.g., control point) 
                        c
                        ∈
                        Δ
                      is split by the number (
                        |
                        
                           
                              L
                           
                           
                              ^
                           
                        
                        |
                     ) of elements in 
                        
                           
                              L
                           
                           
                              ^
                           
                        
                     . One transition 
                        c
                        ′
                        ↪
                        c
                      in the original analysis is represented by 
                        |
                        
                           
                              L
                           
                           
                              ^
                           
                        
                        
                           
                              |
                           
                           
                              2
                           
                        
                      flows 
                        {
                        (
                        (
                        c
                        ′
                        ,
                        l
                        ′
                        )
                        ,
                        (
                        c
                        ,
                        l
                        )
                        )
                        ∣
                        l
                        ,
                        l
                        ′
                        ∈
                        
                           
                              L
                           
                           
                              ^
                           
                        
                        }
                      in the decomposed analysis.

Next, we suppose that each semantic function 
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              c
                           
                        
                        ∈
                        
                           
                              S
                           
                           
                              ^
                           
                        
                        →
                        
                           
                              S
                           
                           
                              ^
                           
                        
                      is defined with decomposed functions 
                        {
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              (
                              c
                              ,
                              l
                              )
                           
                        
                        ∈
                        
                           
                              S
                           
                           
                              ^
                           
                        
                        →
                        
                           
                              V
                           
                           
                              ^
                           
                        
                        ∣
                        l
                        ∈
                        
                           
                              L
                           
                           
                              ^
                           
                        
                        }
                      such that
                        
                           (2)
                           
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    c
                                 
                              
                              (
                              
                                 
                                    s
                                 
                                 
                                    ^
                                 
                              
                              )
                              =
                              λ
                              l
                              .
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    (
                                    c
                                    ,
                                    l
                                    )
                                 
                              
                              (
                              
                                 
                                    s
                                 
                                 
                                    ^
                                 
                              
                              )
                           
                        
                     In contrast to 
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              c
                           
                        
                        (
                        
                           
                              s
                           
                           
                              ^
                           
                        
                        )
                      that computes the entire output state for index c, 
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              (
                              c
                              ,
                              l
                              )
                           
                        
                        (
                        
                           
                              s
                           
                           
                              ^
                           
                        
                        )
                      computes the value for abstract location l only. Other values, say 
                        l
                        ′
                        ∈
                        
                           
                              L
                           
                           
                              ^
                           
                        
                     , are handled by their respective semantic functions, 
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              (
                              c
                              ,
                              l
                              ′
                              )
                           
                        
                     .

Finally, we define the abstract semantics of decomposed analysis, which is characterized by the least fixpoint of abstract semantic function 
                        
                           
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              d
                           
                        
                        ∈
                        (
                        
                           
                              Δ
                           
                           
                              d
                           
                        
                        →
                        
                           
                              V
                           
                           
                              ^
                           
                        
                        )
                        →
                        (
                        
                           
                              Δ
                           
                           
                              d
                           
                        
                        →
                        
                           
                              V
                           
                           
                              ^
                           
                        
                        )
                      defined as
                        
                           (3)
                           
                              
                                 
                                    
                                       
                                          F
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    d
                                 
                              
                              (
                              
                                 
                                    
                                       
                                          X
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    d
                                 
                              
                              )
                              =
                              λ
                              (
                              c
                              ,
                              l
                              )
                              ∈
                              
                                 
                                    Δ
                                 
                                 
                                    d
                                 
                              
                              .
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    (
                                    c
                                    ,
                                    l
                                    )
                                 
                              
                              (
                              
                                 
                                    
                                       ⨆
                                    
                                    
                                       (
                                       c
                                       ′
                                       ,
                                       l
                                       ′
                                       )
                                       
                                          
                                             ↪
                                          
                                          
                                             d
                                          
                                       
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 [
                                 l
                                 ′
                                 ↦
                                 
                                    
                                       
                                          
                                             X
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                                 (
                                 c
                                 ′
                                 ,
                                 l
                                 ′
                                 )
                                 ]
                              
                              )
                           
                        
                     
                  

The following lemma ensures that the decomposed analysis (3) is essentially the same as the original analysis (1). 
                        Lemma 1
                        
                           
                              ∀
                              c
                              ∈
                              Δ
                              ,
                              
                              l
                              ∈
                              
                                 
                                    L
                                 
                                 
                                    ^
                                 
                              
                              .
                              
                              (
                              lfp
                              
                                 
                                    
                                       
                                          F
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    d
                                 
                              
                              )
                              (
                              c
                              ,
                              l
                              )
                              =
                              (
                              lfp
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                              )
                              (
                              c
                              )
                              (
                              l
                              )
                           .

We prove the lemma by showing that the semantic function 
                              
                                 
                                    
                                       
                                          F
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    d
                                 
                              
                            is equivalent to 
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                           . Because 
                              
                                 
                                    Δ
                                 
                                 
                                    d
                                 
                              
                              =
                              Δ
                              ×
                              
                                 
                                    L
                                 
                                 
                                    ^
                                 
                              
                           , we can change the type of 
                              
                                 
                                    
                                       
                                          F
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    d
                                 
                              
                              ∈
                              (
                              
                                 
                                    Δ
                                 
                                 
                                    d
                                 
                              
                              →
                              
                                 
                                    V
                                 
                                 
                                    ^
                                 
                              
                              )
                              →
                              (
                              
                                 
                                    Δ
                                 
                                 
                                    d
                                 
                              
                              →
                              
                                 
                                    V
                                 
                                 
                                    ^
                                 
                              
                              )
                            into 
                              
                                 
                                    
                                       
                                          F
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    d
                                 
                              
                              ∈
                              (
                              Δ
                              →
                              
                                 
                                    L
                                 
                                 
                                    ^
                                 
                              
                              →
                              
                                 
                                    V
                                 
                                 
                                    ^
                                 
                              
                              )
                              →
                              (
                              Δ
                              →
                              
                                 
                                    L
                                 
                                 
                                    ^
                                 
                              
                              →
                              
                                 
                                    V
                                 
                                 
                                    ^
                                 
                              
                              )
                            as follows: 
                              
                                 
                                    
                                       
                                          
                                             
                                                F
                                             
                                             
                                                ^
                                             
                                          
                                       
                                       
                                          d
                                       
                                    
                                    (
                                    
                                       
                                          X
                                       
                                       
                                          ^
                                       
                                    
                                    )
                                    =
                                    λ
                                    c
                                    ∈
                                    Δ
                                    .
                                    λ
                                    l
                                    ∈
                                    
                                       
                                          L
                                       
                                       
                                          ^
                                       
                                    
                                    .
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                ^
                                             
                                          
                                       
                                       
                                          (
                                          c
                                          ,
                                          l
                                          )
                                       
                                    
                                    (
                                    
                                       
                                          
                                             ⨆
                                          
                                          
                                             (
                                             c
                                             ′
                                             ,
                                             l
                                             ′
                                             )
                                             
                                                
                                                   ↪
                                                
                                                
                                                   d
                                                
                                             
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       [
                                       l
                                       ′
                                       ↦
                                       
                                          
                                             X
                                          
                                          
                                             ^
                                          
                                       
                                       (
                                       c
                                       ′
                                       )
                                       (
                                       l
                                       ′
                                       )
                                       ]
                                    
                                    )
                                 
                              
                           Then, we can transform 
                              
                                 
                                    
                                       
                                          F
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    d
                                 
                              
                            into 
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                            as follows:
                              
                                 
                                    
                                       
                                          
                                             
                                                F
                                             
                                             
                                                ^
                                             
                                          
                                       
                                       
                                          d
                                       
                                    
                                    (
                                    
                                       
                                          X
                                       
                                       
                                          ^
                                       
                                    
                                    )
                                    =
                                    λ
                                    c
                                    .
                                    λ
                                    l
                                    .
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                ^
                                             
                                          
                                       
                                       
                                          (
                                          c
                                          ,
                                          l
                                          )
                                       
                                    
                                    (
                                    
                                       
                                          
                                             ⨆
                                          
                                          
                                             (
                                             c
                                             ′
                                             ,
                                             l
                                             ′
                                             )
                                             
                                                
                                                   ↪
                                                
                                                
                                                   d
                                                
                                             
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       [
                                       l
                                       ′
                                       ↦
                                       
                                          
                                             X
                                          
                                          
                                             ^
                                          
                                       
                                       (
                                       c
                                       ′
                                       )
                                       (
                                       l
                                       ′
                                       )
                                       ]
                                    
                                    )
                                    =
                                    λ
                                    c
                                    .
                                    λ
                                    l
                                    .
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                ^
                                             
                                          
                                       
                                       
                                          (
                                          c
                                          ,
                                          l
                                          )
                                       
                                    
                                    (
                                    
                                       
                                          
                                             ⨆
                                          
                                          
                                             c
                                             ′
                                             ↪
                                             c
                                          
                                       
                                       
                                          
                                             ⨆
                                          
                                          
                                             l
                                             ′
                                             ∈
                                             
                                                
                                                   L
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                       
                                       [
                                       l
                                       ′
                                       ↦
                                       
                                          
                                             X
                                          
                                          
                                             ^
                                          
                                       
                                       (
                                       c
                                       ′
                                       )
                                       (
                                       l
                                       ′
                                       )
                                       ]
                                    
                                    )
                                    
                                    ⋯
                                    
                                    def.
                                    
                                    of
                                    
                                    
                                       
                                          ↪
                                       
                                       
                                          d
                                       
                                    
                                    =
                                    λ
                                    c
                                    .
                                    λ
                                    l
                                    .
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                ^
                                             
                                          
                                       
                                       
                                          (
                                          c
                                          ,
                                          l
                                          )
                                       
                                    
                                    (
                                    
                                       
                                          
                                             ⨆
                                          
                                          
                                             c
                                             ′
                                             ↪
                                             c
                                          
                                       
                                       λ
                                       l
                                       ′
                                       .
                                       
                                          
                                             X
                                          
                                          
                                             ^
                                          
                                       
                                       (
                                       c
                                       ′
                                       )
                                       (
                                       l
                                       ′
                                       )
                                    
                                    )
                                    
                                    ⋯
                                    
                                    def.
                                    
                                    of
                                    
                                    
                                       
                                          ⊔
                                       
                                       
                                          
                                             
                                                L
                                             
                                             
                                                ^
                                             
                                          
                                          →
                                          
                                             
                                                V
                                             
                                             
                                                ^
                                             
                                          
                                       
                                    
                                    =
                                    λ
                                    c
                                    .
                                    λ
                                    l
                                    .
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                ^
                                             
                                          
                                       
                                       
                                          (
                                          c
                                          ,
                                          l
                                          )
                                       
                                    
                                    (
                                    
                                       
                                          
                                             ⨆
                                          
                                          
                                             c
                                             ′
                                             ↪
                                             c
                                          
                                       
                                       
                                          
                                             X
                                          
                                          
                                             ^
                                          
                                       
                                       (
                                       c
                                       ′
                                       )
                                    
                                    )
                                    
                                    ⋯
                                    
                                    λ
                                    l
                                    ′
                                    .
                                    
                                       
                                          X
                                       
                                       
                                          ^
                                       
                                    
                                    (
                                    c
                                    ′
                                    )
                                    (
                                    l
                                    ′
                                    )
                                    =
                                    
                                       
                                          X
                                       
                                       
                                          ^
                                       
                                    
                                    (
                                    c
                                    ′
                                    )
                                    =
                                    λ
                                    c
                                    .
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                ^
                                             
                                          
                                       
                                       
                                          c
                                       
                                    
                                    (
                                    
                                       
                                          
                                             ⨆
                                          
                                          
                                             c
                                             ′
                                             ↪
                                             c
                                          
                                       
                                       
                                          
                                             X
                                          
                                          
                                             ^
                                          
                                       
                                       (
                                       c
                                       ′
                                       )
                                    
                                    )
                                    
                                    ⋯
                                    
                                    
                                       (2)
                                    
                                    
                                    □
                                 
                              
                           
                        

Note that the abstract semantic function given in (3) involves some independencies. For example, when we analyze statement 
                        x
                        ≔
                        y
                     , we surely know that the abstract semantic function changes the abstract value of variable x but the function causes no changes for other variables. In addition, in order to change the value of x, only the value of y is necessary and other variables have no contributions to the change. Nonetheless, the function given in (3) naively follows the transition flows of the program, propagating the entire abstract states from all predecessors to the current partitioning index. In this section, we formally define such independencies (no-changes and no-contributions) involved in the analyses.

We say a decomposed index 
                           (
                           c
                           ,
                           l
                           )
                           ∈
                           
                              
                                 Δ
                              
                              
                                 d
                              
                           
                         is a no-change if the semantic function 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                         does not define new information during the analysis. The most obvious case is when 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                         has identity transference for all input states, i.e., 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                         satisfies the condition 
                           ∀
                           
                              
                                 s
                              
                              
                                 ^
                              
                           
                           ∈
                           
                              
                                 S
                              
                              
                                 ^
                              
                           
                           .
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                           (
                           
                              
                                 s
                              
                              
                                 ^
                              
                           
                           )
                           =
                           
                              
                                 s
                              
                              
                                 ^
                              
                           
                           (
                           l
                           )
                        . That is, 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                         does not modify the value of l but always produces the same value as the value in the input state, 
                           
                              
                                 s
                              
                              
                                 ^
                              
                           
                           (
                           l
                           )
                        . However, 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                         needs not to have identity transference for all inputs; instead, it is sufficient for 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                         to have identity transference only for those inputs that would occur during the analysis. For example, consider statement 
                           ⁎
                           p
                           ≔
                           1
                        . The semantic function for the statement is not identity for all input states. However, suppose p points to at most location b during the analysis, then, we know that the decomposed semantic functions for other locations 
                           a
                           (
                           ≠
                           b
                           )
                         all have identity transference during the analysis because p does not point to other location than b. Thus, in general, 
                           (
                           c
                           ,
                           l
                           )
                         is a no-change if it satisfies the following condition:
                           
                              (4)
                              
                                 ∀
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 ⊑
                                 
                                    
                                       lfp
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 .
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 l
                                 )
                              
                           
                        where 
                           
                              
                                 lfp
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                         denotes the input state to 
                           (
                           c
                           ,
                           l
                           )
                         at the fixpoint: 
                           
                              
                                 
                                    
                                       lfp
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 ≜
                                 
                                    
                                       ⨆
                                    
                                    
                                       (
                                       c
                                       ′
                                       ,
                                       l
                                       ′
                                       )
                                       
                                          
                                             ↪
                                          
                                          
                                             d
                                          
                                       
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 [
                                 l
                                 ′
                                 ↦
                                 (
                                 lfp
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                                 )
                                 (
                                 c
                                 ′
                                 ,
                                 l
                                 ′
                                 )
                                 ]
                              
                           
                        Note that 
                           
                              
                                 s
                              
                              
                                 ^
                              
                           
                         quantifies over the set of states that possibly occur at index 
                           (
                           c
                           ,
                           l
                           )
                         during the course of the analysis. Thus, condition (4) means that the semantic function 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                         does not generate new information during the analysis. We write 
                           NChg
                         for the set of all no-change indices, i.e., 
                           
                              
                                 NChg
                                 ≜
                                 {
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 ∈
                                 
                                    
                                       Δ
                                    
                                    
                                       d
                                    
                                 
                                 ∣
                                 ∀
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 ⊑
                                 
                                    
                                       lfp
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 .
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 l
                                 )
                                 }
                              
                           
                        Note that the above definition is mathematical but not finitely computable. At the moment, suppose that we have 
                           NChg
                         before the analysis. In Section 5.4, we will show how to approximate 
                           NChg
                         so that it is computable in practice.

We say that an abstract location 
                           l
                           ′
                         is a no-contribution to 
                           (
                           c
                           ,
                           l
                           )
                         if the value of 
                           l
                           ′
                         does not contribute to changing the value for 
                           (
                           c
                           ,
                           l
                           )
                        , i.e.,
                           
                              (5)
                              
                                 ∀
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 ⊑
                                 
                                    
                                       lfp
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 .
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 
                                    
                                       \
                                    
                                    
                                       l
                                       ′
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                              
                           
                        which means that the value of 
                           l
                           ′
                         is not necessary to produce the value of 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                         during the course of the analysis. We write 
                           NCon
                           (
                           c
                           ,
                           l
                           )
                         for the set of all no-contributions to index 
                           (
                           c
                           ,
                           l
                           )
                        , i.e., 
                           
                              
                                 NCon
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 ≜
                                 {
                                 l
                                 ′
                                 ∈
                                 
                                    
                                       L
                                    
                                    
                                       ^
                                    
                                 
                                 ∣
                                 ∀
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 ⊑
                                 
                                    
                                       lfp
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 .
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 
                                    
                                       \
                                    
                                    
                                       l
                                       ′
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 }
                              
                           
                        Note that the above definition is mathematical but not finitely computable. At the moment, suppose that we have 
                           NCon
                         before the analysis. In Section 5.4, we will show how to approximate 
                           NCon
                        .

Our goal is to transform the semantic function 
                        
                           
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              d
                           
                        
                      to a sparse version 
                        
                           
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              s
                           
                        
                      that does not involve no-changes and no-contributions. As a result, when we analyze a statement, only the relevant input values are involved in the analysis and only the meaningful values are generated from the statement.

In this section, we show how to eliminate the independencies. By eliminating them, the original analysis 
                        
                           
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              d
                           
                        
                      is transformed into its sparse version 
                        
                           
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              s
                           
                        
                     . What are actually transformed is 
                        
                           
                              ↪
                           
                           
                              d
                           
                        
                     ; we transform 
                        
                           
                              ↪
                           
                           
                              d
                           
                        
                      into its sparse version 
                        
                           
                              ↪
                           
                           
                              s
                           
                        
                      by eliminating no-changes and no-contributions involved in 
                        
                           
                              ↪
                           
                           
                              d
                           
                        
                     . With 
                        
                           
                              ↪
                           
                           
                              s
                           
                        
                     , sparse abstract semantic function 
                        
                           
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              s
                           
                        
                        ∈
                        (
                        
                           
                              Δ
                           
                           
                              d
                           
                        
                        →
                        
                           
                              V
                           
                           
                              ^
                           
                        
                        )
                        →
                        (
                        
                           
                              Δ
                           
                           
                              d
                           
                        
                        →
                        
                           
                              V
                           
                           
                              ^
                           
                        
                        )
                      is defined as follows:
                        
                           (6)
                           
                              
                                 
                                    
                                       
                                          F
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    s
                                 
                              
                              (
                              
                                 
                                    
                                       
                                          X
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    s
                                 
                              
                              )
                              =
                              λ
                              (
                              c
                              ,
                              l
                              )
                              ∈
                              
                                 
                                    Δ
                                 
                                 
                                    d
                                 
                              
                              .
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    (
                                    c
                                    ,
                                    l
                                    )
                                 
                              
                              (
                              
                                 
                                    
                                       ⨆
                                    
                                    
                                       (
                                       c
                                       ′
                                       ,
                                       l
                                       ′
                                       )
                                       
                                          
                                             ↪
                                          
                                          
                                             s
                                          
                                       
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 [
                                 l
                                 ′
                                 ↦
                                 
                                    
                                       
                                          
                                             X
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       s
                                    
                                 
                                 (
                                 c
                                 ′
                                 ,
                                 l
                                 ′
                                 )
                                 ]
                              
                              )
                           
                        
                     Note that 
                        
                           
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              s
                           
                        
                      is only different from 
                        
                           
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              d
                           
                        
                      in that it is defined over 
                        
                           
                              ↪
                           
                           
                              s
                           
                        
                      rather than 
                        
                           
                              ↪
                           
                           
                              d
                           
                        
                     . Thus, we can reuse abstract semantic function 
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              (
                              c
                              ,
                              l
                              )
                           
                        
                      and its soundness results from the original analysis design.

We define no-change-elimination and no-contribution-elimination. Because these two transformations remove only the must-independences that do not affect the analysis results, 
                        
                           
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              s
                           
                        
                      should preserve both soundness and precision of original analysis 
                        
                           
                              
                                 
                                    F
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              d
                           
                        
                     .

Suppose we are given a no-change index (c, l). Eliminating such a no-change sacrifices neither the analysis’ correctness nor precision because, no-change indices are just placeholders that do not generate new information during the analysis.

When (c, l) is a no-change, we remove (c, l) and rearrange the remaining flow edges properly. For example, consider Fig. 2
                        : the leftmost (respectively, rightmost) figure represents the flow relation (
                           
                              
                                 ↪
                              
                              
                                 d
                              
                           
                        ) before (respectively, after) applying no-change-elimination to (c, l). In Fig. 2, suppose (c, l) is a no-change point. Then, we observe its two implications: (1) the abstract value associated with (p, l), a predecessor of (c, l), is the only one that is needed to generate the value for (c, l) because the semantic function 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                         simply propagates the value of (p, l) without any change (in other words, other values such as 
                           (
                           p
                           ,
                           l
                           ′
                           )
                         are not necessary); (2) in order for the value of (p, l) to be propagated to (s, l) and 
                           (
                           s
                           ,
                           l
                           ′
                           )
                        , the value needs not pass through (c, l) because the value is not changed by 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                        . From these observations, we directly connect the input flow 
                           (
                           (
                           p
                           ,
                           l
                           )
                           ,
                           (
                           c
                           ,
                           l
                           )
                           )
                         into all the successors of (c, l), adding the thick flows in Fig. 2(b). Then, we remove (c, l) as well as flow edges connected to (c, l), leading to Fig. 2(c).

Formally, given a no-change point (c, l), the no-change-elimination is defined by transformation 
                           
                              
                                 T
                              
                              
                                 noChg
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                           ∈
                           P
                           (
                           
                              
                                 Δ
                              
                              
                                 d
                              
                           
                           ×
                           
                              
                                 Δ
                              
                              
                                 d
                              
                           
                           )
                           →
                           P
                           (
                           
                              
                                 Δ
                              
                              
                                 d
                              
                           
                           ×
                           
                              
                                 Δ
                              
                              
                                 d
                              
                           
                           )
                         defined as follows:
                           
                              
                                 
                                    
                                       T
                                    
                                    
                                       noChg
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 (
                                 ↪
                                 )
                                 ≜
                                 (
                                 ↪
                                 )
                                 ∪
                                 {
                                 (
                                 (
                                 p
                                 ,
                                 l
                                 )
                                 ,
                                 (
                                 s
                                 ,
                                 l
                                 ′
                                 )
                                 )
                                 ∣
                                 (
                                 p
                                 ,
                                 l
                                 )
                                 ↪
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 ∧
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 ↪
                                 (
                                 s
                                 ,
                                 l
                                 ′
                                 )
                                 }
                                 
                                 ⋯
                                 
                                 
                                    
                                       
                                    
                                 
                                 \
                                 {
                                 (
                                 (
                                 p
                                 ,
                                 l
                                 ′
                                 )
                                 ,
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 )
                                 ∣
                                 (
                                 p
                                 ,
                                 l
                                 ′
                                 )
                                 ↪
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 }
                                 
                                 ⋯
                                 
                                 
                                 
                                 
                                 
                                    
                                       
                                    
                                 
                                 \
                                 {
                                 (
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 ,
                                 (
                                 s
                                 ,
                                 l
                                 ′
                                 )
                                 )
                                 ∣
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 ↪
                                 (
                                 s
                                 ,
                                 l
                                 ′
                                 )
                                 }
                                 
                                 ⋯
                                 
                                 
                                 
                                 
                                 
                                 
                                    
                                       
                                    
                                 
                              
                           
                        Given a no-change point (c, l), 
                           
                              
                                 T
                              
                              
                                 noChg
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                         performs three operations: 
                           
                              
                                 
                              
                           
                         it connects (p, l) to all of the successors of (c, l); 
                           
                              
                                 
                              
                           
                         it removes all the inflows 
                           (
                           (
                           p
                           ,
                           l
                           ′
                           )
                           ,
                           (
                           c
                           ,
                           l
                           )
                           )
                        ; and 
                           
                              
                                 
                              
                           
                         it removes all the outflows 
                           (
                           (
                           c
                           ,
                           l
                           )
                           ,
                           (
                           s
                           ,
                           l
                           ′
                           )
                           )
                        . In effect, after the elimination, the no-change point (c, l) is ignored during the analysis. The following lemma ensures the correctness of 
                           
                              
                                 T
                              
                              
                                 noChg
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                        . 
                           Lemma 2
                           
                              Let 
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 ∈
                                 
                                    
                                       Δ
                                    
                                    
                                       d
                                    
                                 
                               
                              be a no-change point. Let 
                              
                                 
                                    
                                       ↪
                                    
                                    
                                       d
                                    
                                 
                               
                              and 
                              
                                 
                                    
                                       ↪
                                    
                                    
                                       d
                                    
                                    
                                       ′
                                    
                                 
                               
                              be flow relations such that 
                              
                                 (
                                 
                                    
                                       ↪
                                    
                                    
                                       d
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       T
                                    
                                    
                                       noChg
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 (
                                 
                                    
                                       ↪
                                    
                                    
                                       d
                                    
                                 
                                 )
                              . Let 
                              
                                 S
                                 ′
                               
                              and 
                              
                                 S
                               
                              be 
                              
                                 lfp
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                                 ′
                               
                              and 
                              
                                 lfp
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                              , respectively, where
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   F
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             d
                                          
                                       
                                       ′
                                       (
                                       
                                          
                                             X
                                          
                                          
                                             ^
                                          
                                       
                                       )
                                       =
                                       λ
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       ∈
                                       
                                          
                                             Δ
                                          
                                          
                                             d
                                          
                                       
                                       .
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       
                                          
                                             
                                                ⨆
                                             
                                             
                                                (
                                                c
                                                ′
                                                ,
                                                l
                                                ′
                                                )
                                                
                                                   
                                                      ↪
                                                   
                                                   
                                                      d
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                (
                                                c
                                                ,
                                                l
                                                )
                                             
                                          
                                          [
                                          l
                                          ′
                                          ↦
                                          
                                             
                                                X
                                             
                                             
                                                ^
                                             
                                          
                                          (
                                          c
                                          ′
                                          ,
                                          l
                                          ′
                                          )
                                          ]
                                       
                                       )
                                       
                                          
                                             
                                                
                                                   F
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             d
                                          
                                       
                                       (
                                       
                                          
                                             X
                                          
                                          
                                             ^
                                          
                                       
                                       )
                                       =
                                       λ
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       ∈
                                       
                                          
                                             Δ
                                          
                                          
                                             d
                                          
                                       
                                       .
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       
                                          
                                             
                                                ⨆
                                             
                                             
                                                (
                                                c
                                                ′
                                                ,
                                                l
                                                ′
                                                )
                                                
                                                   
                                                      ↪
                                                   
                                                   
                                                      d
                                                   
                                                
                                                (
                                                c
                                                ,
                                                l
                                                )
                                             
                                          
                                          [
                                          l
                                          ′
                                          ↦
                                          
                                             
                                                X
                                             
                                             
                                                ^
                                             
                                          
                                          (
                                          c
                                          ′
                                          ,
                                          l
                                          ′
                                          )
                                          ]
                                       
                                       )
                                       .
                                    
                                 
                              
                              Then, 
                                 
                                    
                                       ∀
                                       (
                                       c
                                       ′
                                       ,
                                       l
                                       ′
                                       )
                                       ∈
                                       
                                          
                                             Δ
                                          
                                          
                                             d
                                          
                                       
                                       
                                       s
                                       .
                                       t
                                       .
                                       
                                       (
                                       c
                                       ′
                                       ,
                                       l
                                       ′
                                       )
                                       ≠
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       .
                                       S
                                       ′
                                       (
                                       c
                                       ′
                                       ,
                                       l
                                       ′
                                       )
                                       =
                                       S
                                       (
                                       c
                                       ′
                                       ,
                                       l
                                       ′
                                       )
                                       .
                                    
                                 
                              
                           

We prove the lemma by showing that the fixpoint equation of 
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                                 ′
                               is equivalent to the equation of 
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                               up to the points that remain after the transformation. For simplicity, consider the case with the following assumptions: 
                                 
                                    
                                       L
                                    
                                    
                                       ^
                                    
                                 
                                 =
                                 {
                                 l
                                 }
                               and 
                                 
                                    
                                       ↪
                                    
                                    
                                       d
                                    
                                 
                                 =
                                 {
                                 (
                                 (
                                 p
                                 ,
                                 l
                                 )
                                 ,
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 )
                                 ,
                                 (
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 ,
                                 (
                                 s
                                 ,
                                 l
                                 )
                                 )
                                 }
                               (it is easy to extend this proof to the general case.). Then, the fixpoint equations of 
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                               are as follows:
                                 
                                    (7)
                                    
                                       S
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       =
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       [
                                       l
                                       ↦
                                       S
                                       (
                                       p
                                       ,
                                       l
                                       )
                                       ]
                                       )
                                       S
                                       (
                                       s
                                       ,
                                       l
                                       )
                                       =
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             s
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       [
                                       l
                                       ↦
                                       S
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       ]
                                       )
                                    
                                 
                              We can transform the equation into the fixpoint equation of 
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                                 ′
                               as follows:
                                 
                                    
                                       S
                                       (
                                       s
                                       ,
                                       l
                                       )
                                       =
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             s
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       [
                                       l
                                       ↦
                                       S
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       ]
                                       )
                                       
                                       ⋯
                                       
                                       by
                                       
                                       
                                          (7)
                                       
                                       =
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             s
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       [
                                       l
                                       ↦
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       [
                                       l
                                       ↦
                                       S
                                       (
                                       p
                                       ,
                                       l
                                       )
                                       ]
                                       )
                                       ]
                                       )
                                       
                                       ⋯
                                       
                                       by
                                       
                                       
                                          (7)
                                       
                                       =
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             s
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       [
                                       l
                                       ↦
                                       S
                                       (
                                       p
                                       ,
                                       l
                                       )
                                       ]
                                       )
                                       
                                       ⋯
                                       
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       
                                          
                                             s
                                          
                                          
                                             ^
                                          
                                       
                                       )
                                       =
                                       
                                          
                                             s
                                          
                                          
                                             ^
                                          
                                       
                                       (
                                       l
                                       )
                                    
                                 
                              By the definition of 
                                 
                                    
                                       T
                                    
                                    
                                       noChg
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                              , 
                                 
                                    
                                       ↪
                                    
                                    
                                       d
                                    
                                    
                                       ′
                                    
                                 
                               is 
                                 {
                                 (
                                 (
                                 p
                                 ,
                                 l
                                 )
                                 ,
                                 (
                                 s
                                 ,
                                 l
                                 )
                                 )
                                 }
                              . Thus, the fixpoint equation of 
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                                 ′
                               is 
                                 S
                                 ′
                                 =
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       (
                                       s
                                       ,
                                       l
                                       )
                                    
                                 
                                 (
                                 [
                                 l
                                 ↦
                                 S
                                 (
                                 p
                                 ,
                                 l
                                 )
                                 ]
                                 )
                              , which is equivalent to the equations of 
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                               as derived above. □

The second one removes no-contributions from the analysis. It is enough to apply the no-contribution elimination only to the change points where values are ever changed during the analysis, because independencies involved in no-changes are all removed by the no-change elimination.

Suppose we are given a flow 
                           (
                           (
                           p
                           ,
                           l
                           ′
                           )
                           ,
                           (
                           c
                           ,
                           l
                           )
                           )
                           ∈
                           (
                           
                              
                                 ↪
                              
                              
                                 d
                              
                           
                           )
                         to a change point. We say the flow is no-contribution flow if 
                           l
                           ′
                           ∈
                           NCon
                           (
                           c
                           ,
                           l
                           )
                        . The goal of the no-contribution-elimination is to remove all such flows, which is also safe because no-contribution flows are, by definition, unnecessary in generating new information during the course of the analysis.

For each no-contribution flow 
                           (
                           (
                           p
                           ,
                           l
                           ′
                           )
                           ,
                           (
                           c
                           ,
                           l
                           )
                           )
                        , we simply remove it from 
                           
                              
                                 ↪
                              
                              
                                 d
                              
                           
                        . For example, consider Fig. 3
                        : the left (respectively, right) figure represents the flow relation (
                           
                              
                                 ↪
                              
                              
                                 d
                              
                           
                        ) before (respectively, after) applying no-contribution-elimination to 
                           (
                           (
                           p
                           ,
                           l
                           ′
                           )
                           ,
                           (
                           c
                           ,
                           l
                           )
                           )
                        . In Fig. 3, suppose (c, l) is a change point, i.e., 
                           ∃
                           
                              
                                 s
                              
                              
                                 ^
                              
                           
                           ⊑
                           
                              
                                 lfp
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                           .
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                           (
                           
                              
                                 s
                              
                              
                                 ^
                              
                           
                           )
                           ≠
                           
                              
                                 s
                              
                              
                                 ^
                              
                           
                           (
                           l
                           )
                        , and 
                           (
                           (
                           p
                           ,
                           l
                           ′
                           )
                           ,
                           (
                           c
                           ,
                           l
                           )
                           )
                         is a no-contribution flow. In this case, we can safely remove the flow because it is unnecessary to generate the value of (c, l).

Formally, given a no-contribution flow 
                           (
                           (
                           p
                           ,
                           l
                           ′
                           )
                           ,
                           (
                           c
                           ,
                           l
                           )
                           )
                        , the no-contribution-elimination is simply defined by transformation 
                           
                              
                                 T
                              
                              
                                 noCon
                              
                              
                                 (
                                 (
                                 p
                                 ,
                                 l
                                 ′
                                 )
                                 ,
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 )
                              
                           
                         as follows: 
                           
                              
                                 
                                    
                                       T
                                    
                                    
                                       noCon
                                    
                                    
                                       (
                                       (
                                       p
                                       ,
                                       l
                                       ′
                                       )
                                       ,
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       )
                                    
                                 
                                 (
                                 ↪
                                 )
                                 ≜
                                 (
                                 ↪
                                 )
                                 \
                                 {
                                 (
                                 (
                                 p
                                 ,
                                 l
                                 ′
                                 )
                                 ,
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 )
                                 }
                                 .
                              
                           
                        
                        
                           Lemma 3
                           
                              Let 
                              
                                 (
                                 (
                                 p
                                 ,
                                 l
                                 ′
                                 )
                                 ,
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 )
                               
                              be a no-contribution flow. Let 
                              
                                 
                                    
                                       ↪
                                    
                                    
                                       d
                                    
                                 
                               
                              and 
                              
                                 
                                    
                                       ↪
                                    
                                    
                                       d
                                    
                                    
                                       ′
                                    
                                 
                               
                              be flow relations such that 
                              
                                 (
                                 
                                    
                                       ↪
                                    
                                    
                                       d
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       T
                                    
                                    
                                       noCon
                                    
                                    
                                       (
                                       (
                                       p
                                       ,
                                       l
                                       ′
                                       )
                                       ,
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       )
                                    
                                 
                                 (
                                 
                                    
                                       ↪
                                    
                                    
                                       d
                                    
                                 
                                 )
                              . Let 
                              
                                 S
                                 ′
                               
                              and 
                              
                                 S
                               
                              be 
                              
                                 lfp
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                                 ′
                               
                              and 
                              
                                 lfp
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                              , respectively, where
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   F
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             d
                                          
                                       
                                       ′
                                       (
                                       
                                          
                                             X
                                          
                                          
                                             ^
                                          
                                       
                                       )
                                       =
                                       λ
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       ∈
                                       
                                          
                                             Δ
                                          
                                          
                                             d
                                          
                                       
                                       .
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       
                                          
                                             
                                                ⨆
                                             
                                             
                                                (
                                                c
                                                ′
                                                ,
                                                l
                                                ′
                                                )
                                                
                                                   
                                                      ↪
                                                   
                                                   
                                                      d
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                (
                                                c
                                                ,
                                                l
                                                )
                                             
                                          
                                          [
                                          l
                                          ′
                                          ↦
                                          
                                             
                                                X
                                             
                                             
                                                ^
                                             
                                          
                                          (
                                          c
                                          ′
                                          ,
                                          l
                                          ′
                                          )
                                          ]
                                       
                                       )
                                       
                                          
                                             
                                                
                                                   F
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             d
                                          
                                       
                                       (
                                       
                                          
                                             X
                                          
                                          
                                             ^
                                          
                                       
                                       )
                                       =
                                       λ
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       ∈
                                       
                                          
                                             Δ
                                          
                                          
                                             d
                                          
                                       
                                       .
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       
                                          
                                             
                                                ⨆
                                             
                                             
                                                (
                                                c
                                                ′
                                                ,
                                                l
                                                ′
                                                )
                                                
                                                   
                                                      ↪
                                                   
                                                   
                                                      d
                                                   
                                                
                                                (
                                                c
                                                ,
                                                l
                                                )
                                             
                                          
                                          [
                                          l
                                          ′
                                          ↦
                                          
                                             
                                                X
                                             
                                             
                                                ^
                                             
                                          
                                          (
                                          c
                                          ′
                                          ,
                                          l
                                          ′
                                          )
                                          ]
                                       
                                       )
                                    
                                 
                              
                              Then, 
                                 
                                    
                                       ∀
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       ∈
                                       
                                          
                                             Δ
                                          
                                          
                                             d
                                          
                                       
                                       .
                                       S
                                       ′
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       =
                                       S
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       .
                                    
                                 
                              
                           

We prove the lemma by showing that the fixpoint equation of 
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                                 ′
                               is equivalent to the equation of 
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                              . For simplicity, consider the case with the following assumptions: 
                                 
                                    
                                       ↪
                                    
                                    
                                       d
                                    
                                 
                                 =
                                 {
                                 (
                                 (
                                 p
                                 ,
                                 l
                                 )
                                 ,
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 )
                                 ,
                                 (
                                 (
                                 p
                                 ,
                                 l
                                 ′
                                 )
                                 ,
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 )
                                 }
                               and 
                                 l
                                 ′
                                 ∈
                                 NCon
                                 (
                                 c
                                 ,
                                 l
                                 )
                               (it is easy to extend this proof to the general case.). Then, the fixpoint equations of 
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                               are as follows:
                                 
                                    (8)
                                    
                                       S
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       =
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       [
                                       l
                                       ↦
                                       S
                                       (
                                       p
                                       ,
                                       l
                                       )
                                       ]
                                       ⊔
                                       [
                                       l
                                       ′
                                       ↦
                                       S
                                       (
                                       p
                                       ,
                                       l
                                       ′
                                       )
                                       ]
                                       )
                                    
                                 
                              We can transform the equation into the fixpoint equation of 
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                                 ′
                               as follows:
                                 
                                    
                                       S
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       =
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       (
                                       l
                                       ↦
                                       S
                                       (
                                       p
                                       ,
                                       l
                                       )
                                       )
                                       ⊔
                                       (
                                       l
                                       ′
                                       ↦
                                       S
                                       (
                                       p
                                       ,
                                       l
                                       ′
                                       )
                                       )
                                       )
                                       =
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       [
                                       l
                                       ↦
                                       S
                                       (
                                       p
                                       ,
                                       l
                                       )
                                       ,
                                       l
                                       ′
                                       ↦
                                       S
                                       (
                                       p
                                       ,
                                       l
                                       ′
                                       )
                                       ]
                                       )
                                       
                                       ⋯
                                       
                                       def.
                                       
                                       of
                                       
                                       ⊔
                                       =
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       [
                                       l
                                       ↦
                                       S
                                       (
                                       p
                                       ,
                                       l
                                       )
                                       ,
                                       l
                                       ′
                                       ↦
                                       S
                                       (
                                       p
                                       ,
                                       l
                                       ′
                                       )
                                       ]
                                       
                                          
                                             \
                                          
                                          
                                             l
                                             ′
                                          
                                       
                                       )
                                       
                                       ⋯
                                       
                                       l
                                       ′
                                       ∈
                                       NCon
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       =
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ^
                                                
                                             
                                          
                                          
                                             (
                                             c
                                             ,
                                             l
                                             )
                                          
                                       
                                       (
                                       [
                                       l
                                       ↦
                                       S
                                       (
                                       p
                                       ,
                                       l
                                       )
                                       ]
                                       )
                                       
                                       ⋯
                                       
                                       def.
                                       
                                       of
                                       
                                       \
                                    
                                 
                              By the definition of 
                                 
                                    
                                       T
                                    
                                    
                                       noCon
                                    
                                    
                                       (
                                       (
                                       p
                                       ,
                                       l
                                       ′
                                       )
                                       ,
                                       (
                                       c
                                       ,
                                       l
                                       )
                                       )
                                    
                                 
                              , 
                                 
                                    
                                       ↪
                                    
                                    
                                       d
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 {
                                 (
                                 (
                                 p
                                 ,
                                 l
                                 )
                                 ,
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 )
                                 }
                              . Thus, the fixpoint equation of 
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                                 ′
                               is 
                                 S
                                 ′
                                 =
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       (
                                       c
                                       ,
                                       l
                                       )
                                    
                                 
                                 (
                                 [
                                 l
                                 ↦
                                 S
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 ]
                                 )
                              , which is equivalent to the equations of 
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       d
                                    
                                 
                               as derived above. □

The final flow relation 
                           
                              
                                 ↪
                              
                              
                                 s
                              
                           
                         is obtained by applying the two eliminations to 
                           
                              
                                 ↪
                              
                              
                                 d
                              
                           
                         until stabilized. No-change-elimination and no-contribution-elimination do not interfere with each other because no-change-elimination is applied only to no-change points and the no-contribution-elimination is applied only to change points. Thus, we can repeatedly apply the transformations in any order. Both transformations eventually terminate because the space Δ
                        
                           d
                         is finite. With 
                           
                              
                                 ↪
                              
                              
                                 s
                              
                           
                        , we obtain the final sparse semantic function (6).

Note that we do not need to apply the transformations until stabilized. Because the analysis semantics is preserved over the elementary step of both transformations (
                           
                              
                                 T
                              
                              
                                 noChg
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                         and 
                           
                              
                                 T
                              
                              
                                 noCon
                              
                              
                                 (
                                 (
                                 p
                                 ,
                                 l
                                 ′
                                 )
                                 ,
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 )
                              
                           
                        ), we can stop the elimination procedures at any desired point.

In practice, we need to approximate 
                           NChg
                         and 
                           NCon
                        . Our method presented so far serves as a purpose of defining a mathematically correct analysis; it does not yet serve for practical uses. The main reason is that 
                           NChg
                         and 
                           NCon
                         are defined with the original fixpoint 
                           lfp
                           
                              
                                 F
                              
                              
                                 ^
                              
                           
                         computed; thus, in order to compute 
                           NChg
                         and 
                           NCon
                        , we need to first compute 
                           lfp
                           
                              
                                 F
                              
                              
                                 ^
                              
                           
                        , the analysis that we actually want to make sparse. Therefore, we should use approximations of 
                           NChg
                         and 
                           NCon
                        , which, from now on, we denote 
                           
                              
                                 NChg
                              
                              
                                 ^
                              
                           
                         and 
                           
                              
                                 NCon
                              
                              
                                 ^
                              
                           
                        , respectively. Then, no-change-elimination and no-contribution-elimination are also approximated in that they operate with 
                           
                              
                                 NChg
                              
                              
                                 ^
                              
                           
                         and 
                           
                              
                                 NCon
                              
                              
                                 ^
                              
                           
                         instead of 
                           NChg
                         and 
                           NCon
                        .

For correctness, 
                           
                              
                                 NChg
                              
                              
                                 ^
                              
                           
                         and 
                           
                              
                                 NCon
                              
                              
                                 ^
                              
                           
                         should be under-approximations of 
                           NChg
                         and 
                           NCon
                        , respectively. This condition is intuitive and we can easily find a counterexample if the condition is not satisfied. Suppose 
                           (
                           c
                           ,
                           l
                           )
                           ∈
                           
                              
                                 NChg
                              
                              
                                 ^
                              
                           
                         and 
                           (
                           c
                           ,
                           l
                           )
                           ∉
                           NChg
                         for abstract location (c, l). Performing the no-change-elimination with 
                           
                              
                                 NChg
                              
                              
                                 ^
                              
                           
                         is unsafe because (c, l) is not an actual no-change point (
                           (
                           c
                           ,
                           l
                           )
                           ∉
                           NChg
                        ).

It is easy to check that the analysis obtained by removing approximated independencies are still correct and precision-preserving. We already proved that eliminating no-changes and no-contributions is safe. The approximated independencies are subsets of concrete ones, i.e., 
                           
                              
                                 NChg
                              
                              
                                 ^
                              
                           
                           ⊆
                           NChg
                         and 
                           ∀
                           (
                           c
                           ,
                           l
                           )
                           ∈
                           
                              
                                 Δ
                              
                              
                                 d
                              
                           
                           .
                           
                              
                                 NCon
                              
                              
                                 ^
                              
                           
                           (
                           c
                           ,
                           l
                           )
                           ⊆
                           NCon
                           (
                           c
                           ,
                           l
                           )
                        , and therefore they are clearly no-changes and no-contributions and removing them is safe. However, because of the approximation, some no-changes and no-contributions would be still present in the final analysis.

In this section, we show how our technique is applied to a non-relational static analysis. In Section 6.1, we describe a framework for a simple class of non-relational abstract interpretation, and in Section 6.2, we show how to find 
                        
                           
                              NChg
                           
                           
                              ^
                           
                        
                      and 
                        
                           
                              NCon
                           
                           
                              ^
                           
                        
                      for the analysis.


                        Language: We assume that the partitioning indices 
                           Δ
                         are control points of the program and each partitioning index 
                           c
                           ∈
                           Δ
                         is associated with a command. We consider a simple imperative language that has integers and pointers as values. The syntax of the language is as follows:
                           
                              
                                 cmd
                                 →
                                 assign
                                 (
                                 x
                                 ,
                                 e
                                 )
                                 ∣
                                 assign
                                 (
                                 
                                    *
                                 
                                 x
                                 ,
                                 e
                                 )
                                 ∣
                                 assume
                                 (
                                 x
                                 <
                                 n
                                 )
                                 e
                                 →
                                 n
                                 ∣
                                 x
                                 ∣
                                 &
                                 x
                                 ∣
                                 
                                    *
                                 
                                 x
                                 ∣
                                 e
                                 +
                                 e
                              
                           
                        Command 
                           assign
                           (
                           x
                           ,
                           e
                           )
                         assigns the value of expression e to variable x. 
                           assign
                           (
                           
                              *
                           
                           x
                           ,
                           e
                           )
                         performs indirect assignments; the value of e is assigned to the location that x points to. 
                           assume
                           (
                           x
                           <
                           n
                           )
                         makes the program continue only when the condition is satisfied.


                        Abstract semantics: Note that our framework requires abstract states to be maps from abstract locations to values (Section 2.3). Consider the following abstract domains: 
                           
                              
                                 
                                    
                                       S
                                    
                                    
                                       ^
                                    
                                 
                                 =
                                 
                                    
                                       L
                                    
                                    
                                       ^
                                    
                                 
                                 →
                                 
                                    
                                       V
                                    
                                    
                                       ^
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       L
                                    
                                    
                                       ^
                                    
                                 
                                 =
                                 Var
                                 ,
                                 
                                 
                                    
                                       V
                                    
                                    
                                       ^
                                    
                                 
                                 =
                                 
                                    
                                       Z
                                    
                                    
                                       ^
                                    
                                 
                                 ×
                                 
                                    
                                       P
                                    
                                    
                                       ^
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ^
                                    
                                 
                                 =
                                 P
                                 (
                                 
                                    
                                       L
                                    
                                    
                                       ^
                                    
                                 
                                 )
                              
                           
                        An abstract state (
                           
                              
                                 S
                              
                              
                                 ^
                              
                           
                        ) is a map from a set of abstract locations (
                           
                              
                                 L
                              
                              
                                 ^
                              
                           
                        ) to a domain of abstract values (
                           
                              
                                 V
                              
                              
                                 ^
                              
                           
                        ). We treat each program variable as an abstract location. An abstract value is a pair of an abstract integer (
                           
                              
                                 Z
                              
                              
                                 ^
                              
                           
                         such that 
                           P
                           (
                           Z
                           )
                           
                              
                                 ⇆
                              
                              
                                 
                                    
                                       α
                                    
                                    
                                       Z
                                    
                                 
                              
                              
                                 
                                    
                                       γ
                                    
                                    
                                       Z
                                    
                                 
                              
                           
                           
                              
                                 Z
                              
                              
                                 ^
                              
                           
                        ) and an abstract pointer (
                           
                              
                                 P
                              
                              
                                 ^
                              
                           
                        ). An abstract pointer is a set of abstract locations. Note that the domain is generic so we can freely choose any non-relational numeric domains for 
                           
                              
                                 Z
                              
                              
                                 ^
                              
                           
                        , such as intervals [8].

The abstract semantics is defined by the least fixpoint of semantic function 
                           
                              
                                 F
                              
                              
                                 ^
                              
                           
                         as described in Eq. (1), where the abstract semantic function 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 c
                              
                           
                           ∈
                           
                              
                                 S
                              
                              
                                 ^
                              
                           
                           →
                           
                              
                                 S
                              
                              
                                 ^
                              
                           
                         is defined as follows: (Notation: we write 
                           e
                           .
                           A
                        , 
                           e
                           .
                           B
                         to denote the first and the second element of 
                           e
                           ∈
                           A
                           ×
                           B
                        , respectively.) 
                           
                              
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       c
                                    
                                 
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 {
                                 
                                    
                                       
                                          
                                             
                                                
                                                   s
                                                
                                                
                                                   ^
                                                
                                             
                                             [
                                             x
                                             ↦
                                             
                                                
                                                   E
                                                
                                                
                                                   ^
                                                
                                             
                                             (
                                             e
                                             )
                                             (
                                             
                                                
                                                   s
                                                
                                                
                                                   ^
                                                
                                             
                                             )
                                             ]
                                          
                                          
                                             c
                                             =
                                             assign
                                             (
                                             x
                                             ,
                                             e
                                             )
                                          
                                       
                                       
                                          
                                             
                                                
                                                   s
                                                
                                                
                                                   ^
                                                
                                             
                                             [
                                             
                                                
                                                   s
                                                
                                                
                                                   ^
                                                
                                             
                                             (
                                             x
                                             )
                                             .
                                             
                                                
                                                   P
                                                
                                                
                                                   ^
                                                
                                             
                                             
                                                
                                                   ↦
                                                
                                                
                                                   w
                                                
                                             
                                             
                                                
                                                   E
                                                
                                                
                                                   ^
                                                
                                             
                                             (
                                             e
                                             )
                                             (
                                             
                                                
                                                   s
                                                
                                                
                                                   ^
                                                
                                             
                                             )
                                             ]
                                          
                                          
                                             c
                                             =
                                             assign
                                             (
                                             ⁎
                                             
                                             x
                                             ,
                                             e
                                             )
                                          
                                       
                                       
                                          
                                             
                                                
                                                   s
                                                
                                                
                                                   ^
                                                
                                             
                                             [
                                             x
                                             ↦
                                             〈
                                             
                                                
                                                   s
                                                
                                                
                                                   ^
                                                
                                             
                                             (
                                             x
                                             )
                                             .
                                             
                                                
                                                   Z
                                                
                                                
                                                   ^
                                                
                                             
                                             
                                                
                                                   ⊓
                                                
                                                
                                                   
                                                      
                                                         Z
                                                      
                                                      
                                                         ^
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   α
                                                
                                                
                                                   Z
                                                
                                             
                                             (
                                             {
                                             z
                                             ∈
                                             Z
                                             |
                                             z
                                             <
                                             n
                                             }
                                             )
                                             ,
                                             
                                                
                                                   s
                                                
                                                
                                                   ^
                                                
                                             
                                             (
                                             x
                                             )
                                             .
                                             
                                                
                                                   P
                                                
                                                
                                                   ^
                                                
                                             
                                             〉
                                             ]
                                          
                                          
                                             c
                                             =
                                             assume
                                             (
                                             x
                                             <
                                             n
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        The abstract effect of 
                           assign
                           (
                           x
                           ,
                           e
                           )
                         is to update the value of x with the evaluation result of e. 
                           assign
                           (
                           
                              *
                           
                           x
                           ,
                           e
                           )
                         weakly updates the value of abstract locations that 
                           
                              *
                           
                           x
                         denotes.
                           1
                        
                        
                           1
                           For brevity, we consider only weak updates. Applying strong update is orthogonal to our sparse analysis design.
                         
                        
                           assume
                           (
                           x
                           <
                           n
                           )
                         prunes the numeric value of x according to the condition. The abstract value of expression e is computed by an auxiliary function 
                           
                              
                                 E
                              
                              
                                 ^
                              
                           
                           ∈
                           e
                           →
                           
                              
                                 S
                              
                              
                                 ^
                              
                           
                           →
                           
                              
                                 V
                              
                              
                                 ^
                              
                           
                        , defined as follows:
                           
                              
                                 
                                    
                                       E
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 n
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 〈
                                 
                                    
                                       α
                                    
                                    
                                       Z
                                    
                                 
                                 (
                                 {
                                 n
                                 }
                                 )
                                 ,
                                 ⊥
                                 〉
                                 
                                    
                                       E
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 x
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 x
                                 )
                                 
                                    
                                       E
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 &
                                 x
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 〈
                                 ⊥
                                 ,
                                 {
                                 x
                                 }
                                 〉
                                 
                                    
                                       E
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 
                                    *
                                 
                                 x
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 ⨆
                                 {
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 a
                                 )
                                 ∣
                                 a
                                 ∈
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 x
                                 )
                                 .
                                 
                                    
                                       P
                                    
                                    
                                       ^
                                    
                                 
                                 }
                                 
                                    
                                       E
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 +
                                 
                                    
                                       e
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 〈
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                                 .
                                 
                                    
                                       Z
                                    
                                    
                                       ^
                                    
                                 
                                 
                                    
                                       
                                          
                                             +
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       
                                          
                                             Z
                                          
                                          
                                             ^
                                          
                                       
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       2
                                    
                                 
                                 .
                                 
                                    
                                       Z
                                    
                                    
                                       ^
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                                 .
                                 
                                    
                                       P
                                    
                                    
                                       ^
                                    
                                 
                                 ∪
                                 
                                    
                                       v
                                    
                                    
                                       2
                                    
                                 
                                 .
                                 
                                    
                                       P
                                    
                                    
                                       ^
                                    
                                 
                                 〉
                                 where
                                 
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       E
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 ,
                                 
                                 
                                    
                                       v
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 
                                    
                                       E
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                              
                           
                        
                     

To approximate 
                           
                              
                                 NChg
                              
                              
                                 ^
                              
                           
                         and 
                           
                              
                                 NCon
                              
                              
                                 ^
                              
                           
                        , we use a conservative pre-analysis. The pre-analysis we use is a flow-insensitive version of the baseline analysis:
                           
                              
                                 Δ
                                 →
                                 
                                    
                                       S
                                    
                                    
                                       ^
                                    
                                 
                                 
                                    
                                       ⇆
                                    
                                    
                                       
                                          
                                             α
                                          
                                          
                                             p
                                          
                                       
                                    
                                    
                                       
                                          
                                             γ
                                          
                                          
                                             p
                                          
                                       
                                    
                                 
                                 
                                    
                                       S
                                    
                                    
                                       ^
                                    
                                 
                                 
                                    
                                       α
                                    
                                    
                                       p
                                    
                                 
                                 =
                                 λ
                                 
                                    
                                       X
                                    
                                    
                                       ^
                                    
                                 
                                 .
                                 ⨆
                                 {
                                 
                                    
                                       X
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 c
                                 )
                                 ∣
                                 c
                                 ∈
                                 dom
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 }
                                 
                                    
                                       
                                          
                                             F
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       p
                                    
                                 
                                 =
                                 λ
                                 
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 .
                                 
                                    
                                       ⨆
                                    
                                    
                                       c
                                       ∈
                                       C
                                    
                                 
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       c
                                    
                                 
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                              
                           
                        Other than the above pre-analysis, any sound approximation of the original analysis can be used as a pre-analysis.

Let 
                           
                              
                                 
                                    
                                       T
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 p
                              
                           
                           ∈
                           
                              
                                 S
                              
                              
                                 ^
                              
                           
                         be the pre-analysis results. Using 
                           
                              
                                 
                                    
                                       T
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 p
                              
                           
                        , we approximate no-changes and no-contributions in the analysis. For each partitioning index c, we compute 
                           
                              
                                 NChg
                              
                              
                                 ^
                              
                           
                         by excluding abstract locations whose values are possibly modified at c
                        
                           
                              
                                 
                                    
                                       NChg
                                    
                                    
                                       ^
                                    
                                 
                                 =
                                 {
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 ∈
                                 Δ
                                 ×
                                 
                                    
                                       L
                                    
                                    
                                       ^
                                    
                                 
                                 ∣
                                 l
                                 ∈
                                 (
                                 
                                    
                                       L
                                    
                                    
                                       ^
                                    
                                 
                                 −
                                 {
                                 x
                                 }
                                 )
                                 ∧
                                 (
                                 c
                                 =
                                 assign
                                 (
                                 x
                                 ,
                                 e
                                 )
                                 
                                 or
                                 
                                 assume
                                 (
                                 x
                                 <
                                 n
                                 )
                                 )
                                 }
                                 ∪
                                 {
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 ∈
                                 Δ
                                 ×
                                 
                                    
                                       L
                                    
                                    
                                       ^
                                    
                                 
                                 ∣
                                 l
                                 ∈
                                 (
                                 
                                    
                                       L
                                    
                                    
                                       ^
                                    
                                 
                                 −
                                 
                                    
                                       
                                          
                                             T
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       p
                                    
                                 
                                 (
                                 x
                                 )
                                 .
                                 
                                    
                                       P
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 ∧
                                 c
                                 =
                                 assign
                                 (
                                 
                                    *
                                 
                                 x
                                 ,
                                 e
                                 )
                                 }
                              
                           
                        
                     

According to the definition of 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 (
                                 c
                                 ,
                                 l
                                 )
                              
                           
                        , 
                           assign
                           (
                           x
                           ,
                           e
                           )
                         and 
                           assume
                           (
                           x
                           <
                           n
                           )
                         do not define any abstract locations except x. 
                           assign
                           (
                           
                              *
                           
                           x
                           ,
                           e
                           )
                         may change values of abstract locations in 
                           
                              
                                 
                                    
                                       T
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 p
                              
                           
                           (
                           x
                           )
                           .
                           
                              
                                 P
                              
                              
                                 ^
                              
                           
                        . Because the pre-analysis is conservative, we ensure that all abstract locations in 
                           
                              
                                 L
                              
                              
                                 ^
                              
                           
                           −
                           
                              
                                 
                                    
                                       T
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 p
                              
                           
                           (
                           x
                           )
                           .
                           
                              
                                 P
                              
                              
                                 ^
                              
                           
                         are never modified during the actual analysis.

We compute 
                           
                              
                                 NCon
                              
                              
                                 ^
                              
                           
                           (
                           c
                           ,
                           l
                           )
                         by excluding abstract locations that are possibly used when analyzing control point c: 
                           
                              
                                 
                                    
                                       NCon
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 c
                                 ,
                                 l
                                 )
                                 =
                                 {
                                 
                                    
                                       
                                          
                                             
                                                
                                                   L
                                                
                                                
                                                   ^
                                                
                                             
                                             −
                                             U
                                             (
                                             e
                                             )
                                             (
                                             
                                                
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         ^
                                                      
                                                   
                                                
                                                
                                                   p
                                                
                                             
                                             )
                                          
                                          
                                             c
                                             =
                                             assign
                                             (
                                             x
                                             ,
                                             e
                                             )
                                          
                                       
                                       
                                          
                                             
                                                
                                                   L
                                                
                                                
                                                   ^
                                                
                                             
                                             −
                                             (
                                             {
                                             x
                                             }
                                             ∪
                                             
                                                
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         ^
                                                      
                                                   
                                                
                                                
                                                   p
                                                
                                             
                                             (
                                             x
                                             )
                                             .
                                             
                                                
                                                   P
                                                
                                                
                                                   ^
                                                
                                             
                                             ∪
                                             U
                                             (
                                             e
                                             )
                                             (
                                             
                                                
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         ^
                                                      
                                                   
                                                
                                                
                                                   p
                                                
                                             
                                             (
                                             c
                                             )
                                             )
                                             )
                                          
                                          
                                             c
                                             =
                                             assign
                                             (
                                             ⁎
                                             
                                             x
                                             ,
                                             e
                                             )
                                          
                                       
                                       
                                          
                                             
                                                
                                                   L
                                                
                                                
                                                   ^
                                                
                                             
                                             −
                                             {
                                             x
                                             }
                                          
                                          
                                             c
                                             =
                                             assume
                                             (
                                             x
                                             <
                                             n
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           U
                           (
                           e
                           )
                           (
                           
                              
                                 s
                              
                              
                                 ^
                              
                           
                           )
                         computes the set of abstract locations that are used during the evaluation of 
                           
                              
                                 E
                              
                              
                                 ^
                              
                           
                           (
                           e
                           )
                           (
                           
                              
                                 s
                              
                              
                                 ^
                              
                           
                           )
                        :
                           
                              
                                 U
                                 (
                                 n
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 ∅
                                 U
                                 (
                                 x
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 {
                                 x
                                 }
                                 U
                                 (
                                 &
                                 x
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 ∅
                                 U
                                 (
                                 
                                    *
                                 
                                 x
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 {
                                 x
                                 }
                                 ∪
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 x
                                 )
                                 .
                                 
                                    
                                       P
                                    
                                    
                                       ^
                                    
                                 
                                 U
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 +
                                 
                                    
                                       e
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 =
                                 U
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 ∪
                                 U
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       ^
                                    
                                 
                                 )
                              
                           
                        
                     

The definition of 
                           
                              
                                 NCon
                              
                              
                                 ^
                              
                           
                           (
                           c
                           ,
                           l
                           )
                         is also naturally derived from the definition of 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 c
                              
                           
                        . When 
                           cmd
                           (
                           c
                           )
                         is 
                           assign
                           (
                           x
                           ,
                           e
                           )
                        , all locations except those in 
                           U
                           (
                           e
                           )
                           (
                           
                              
                                 
                                    
                                       T
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 p
                              
                           
                           )
                         are unnecessary. Analyzing 
                           assign
                           (
                           
                              *
                           
                           x
                           ,
                           e
                           )
                         requires location x (because of semantic definition of weak updates), the points-to set of x (
                           
                              
                                 
                                    
                                       T
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 p
                              
                           
                           (
                           x
                           )
                           .
                           
                              
                                 P
                              
                              
                                 ^
                              
                           
                        ), and 
                           U
                           (
                           e
                           )
                           (
                           
                              
                                 
                                    
                                       T
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 p
                              
                           
                           )
                        . Note that in the above definition, for simplicity, we aggressively approximated 
                           NCon
                           (
                           c
                           ,
                           l
                           )
                         even without considering the current location l. If this is unsatisfactory, we can design 
                           NCon
                           (
                           c
                           ,
                           l
                           )
                         more precisely, discriminating each l, which increases the sparseness of the final sparse analysis.

@&#EXPERIMENTS@&#

In this section, we check the performance of our technique in practice. We implemented our technique on top of our Sparrow analysis framework [18,16,21,22,24]. The analyzer is for detecting memory safety violations such as buffer overruns in C programs, based on flow-sensitive abstract interpretation with the interval domain [8]. Essentially, the abstract domain of the analyzer is the same with that presented in the previous section, but we use intervals for the value domain (
                        
                           
                              V
                           
                           
                              ^
                           
                        
                     ).


                     Setting: We used 15 open source softwares as benchmarks (Table 1
                     ). The benchmarks are various open-source applications, and most of them are from GNU open-source projects. Standard library calls are summarized using handcrafted function stubs. For other unknown procedure calls to external code, we assume that the procedure returns arbitrary values and has no side-effect. Procedures that are unreachable from the main procedure, such as callbacks, are made to be explicitly called from the main procedure. All experiments were done on a Linux 2.6 system running on a single core of Intel 3.07GHz box with 24GB of main memory.

The baseline analyzer, 
                        Baseline
                     , is a version of Sparrow that performs the access-based localization. With the access-based localization technique [22], each code block is analyzed with only the to-be-accessed parts of its input state, reducing a lot of analysis time and memory consumption. It has been reported that the technique is faster by up to 50 times than the conventional, reachability-based localization technique [25]. More details on the baseline analysis are available at [25].

We applied our technique to 
                        Baseline
                      and derived 
                        Sparse
                     . In implementing 
                        Sparse
                     , we do not need to explicitly perform the decomposition step. Instead, we distinguish decomposed control points implicitly by tagging every edge with a relevant set of abstract locations between the control points and manipulate the edges. When we remove a no-change 
                        (
                        c
                        ,
                        l
                        )
                        ∈
                        
                           
                              NChg
                           
                           
                              ^
                           
                        
                     , we draw a new edge between a predecessor and a successor of c, tag the edge with 
                        {
                        l
                        }
                     , and remove l from the original set. Likewise, when we remove a no-contribution 
                        l
                        ′
                        ∈
                        
                           
                              NCon
                           
                           
                              ^
                           
                        
                        (
                        c
                        ,
                        l
                        )
                     , we just remove 
                        l
                        ′
                      from the set on the incoming edge of c. We applied our technique intraprocedurally: only the nodes inside procedures are made sparse and interprocedural edges remain unchanged.


                     Results: Table 1 shows the impact of our technique. We compare analysis time and peak memory consumption of the two analyzers. Because all of the analyzers share the same front-end, we only measure analysis time.

Our technique definitely improves the analysis performance in terms of both time and memory. 
                        Sparse
                      is faster by 2–59 times and saves memory consumption by 29–80% compared to 
                        Baseline
                     . Furthermore, 
                        Sparse
                      is able to analyze large and complex programs. In our experiments, the most complex program in the benchmarks, screen-4.0.2, can be analyzed within 3h and 1.8GB of memory.


                     
                        Sparse
                      outperforms 
                        Baseline
                      because 
                        Sparse
                      more frequently localizes abstract memories and skips meaningless propagations. In our experiments, 97.4–99.9% of abstract locations were no-changes or no-contributions at each control point. Moreover, the improvement is more outstanding in analyzing large programs: 2–7× speed-up and 29–60% of memory reduction for small programs (less than 45K LOC) but 9–59× speed-up and 58–80% of memory reduction for the larger programs (more than 45K LOC).

Our key contribution, and the main difference from the existing sparse evaluation techniques [4,27], is that we combine the “decomposition” and “sparsification” procedures together within the abstract interpretation framework. Although the basic ideas of those two procedures (decomposition and sparsification) are not entirely new individually, they have not been used together in the previous literature.

Previous sparse evaluation techniques [4,27] are primarily concerned with the sparsification process only. Thus, existing approaches are not effective “as is” for semantic analyses that we consider in this paper. In other words, previous sparse evaluation techniques are effective only when the input analysis problem is already defined in a sparse form to which the sparsification process is directly applicable. On the other hand, our technique employs a decomposition step and make sparsification effective even when the original analysis is not favorable for the sparsification process.

The program dependence graph (PDG) [13] also does not utilize the decomposition step and hence not suitable for detailed semantic analyses. PDGs are an intermediate representation that makes explicit the data and control dependences of the program. However, as in the previous sparse evaluation techniques, PDGs do not provide fine-grained dependences that are essential for sparsifying the class of detailed semantic analyses, as described in this paper.

The decomposition idea has also been used previously but for different purposes. For example, in [29], the domain of abstract environment, which is a map from abstract locations to abstract values, is decomposed into the “exploded graph” representation, which is similar to our decomposition step. In this paper, we put the decomposition and sparsification ideas together within the abstract interpretation framework and show that the sparse evaluation idea can be used more broadly than before.

In the literature, there exist two approaches to make an analysis sparse. One approach is sparse evaluation 
                     [4,27] and the other is sparse analysis 
                     [28,32,12,3,14,15,23]. While conventional static analyses propagate abstract values along control flows of the program, sparse analysis techniques use def-use dependencies (often in the SSA form) of the program and directly propagate abstract values from their definition points to their use points.

Both approaches have their own merits and hence can be complementarily used in practice. For example, the sparse analysis approach may be more convenient to implement than the sparse evaluation approach, because there exist many practical algorithms for dependency generation and manipulation (such as SSA algorithms [10,1,5]) and therefore the sparsifying process can be effectively realized on top of the off-the-shelf implementations [14,15]. On the other hand, the sparse evaluation approach is more flexible in controlling the analysis׳ sparseness than the sparse analysis approach. Note that, with the sparse analysis method, a safe sparse analysis is obtained only after the sparsifying process is completely finished because the method gathers may-dependencies and all the dependencies are required for soundness. By contrast, in a sparse evaluation approach, it is always safe to stop the sparsifying process at any desired point during the analysis because the approach eliminates only the must-independencies. This flexibility would be useful in practice when tuning the balance of costs between sparsifying process and actual analysis.

Given that sparse evaluation and sparse analysis approaches may have different merits in practice, it would be good if analysis designers can freely choose the most appropriate method depending on their situations, or combine the merits of both approaches. Unfortunately, analysis designers could not use the sparse evaluation approach when developing detailed static analyses. Our technique can be considered as an effort to give analysis designers more flexibility when choosing sparse analysis techniques.

Our work improves the access-based localization technique [22] in two ways. The access-based localization reduces the cost of interprocedural analysis by analyzing procedures with only the portion of the abstract states that will be accessed by the procedures. Similar to our technique, the access information is computed by a flow-insensitive pre-analysis. Theoretically, our no-contribution elimination (Section 5.2) can be understood as a fine-grained version of the localization technique: while the previous technique [22] applies localization only at procedure entries, we localize abstract states at every statement (including procedure entries). Furthermore, our technique also applies the no-change elimination (Section 5.1), which is entirely new compared to the access-based localization technique.

@&#CONCLUSION@&#

In this paper, we have presented a new sparse evaluation technique and showed that the sparse evaluation ideas can be applicable even to elaborate static analyses in general. Compared to existing sparse evaluation techniques, our technique introduces a new preprocessing step (called “decomposition”) that reformulates the original analysis into a form where semantic irrelevance is explicitly represented. After the decomposition, our technique makes analysis sparse by eliminating semantic independencies (called “no-changes” and “no-contributions”) involved in the usual abstract interpretation. The elimination process is semantics-preserving in that both correctness and precision of the analysis are preserved. We show the effectiveness of the technique by demonstrating the achieved speed-up of a realistic C global analyzer with open-source C benchmarks.

@&#REFERENCES@&#

