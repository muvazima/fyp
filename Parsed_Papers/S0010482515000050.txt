@&#MAIN-TITLE@&#Development and validation of an open source quantification tool for DSC-MRI studies

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We have developed an open source tool for DSC-MRI quantification.


                        
                        
                           
                           The software runs as a plugin for the multiplatform public domain software ImageJ.


                        
                        
                           
                           It contains an open API that allows external users to implement new methods.


                        
                        
                           
                           It was validated, with good results, against a clinical tool, Philips IntelliSpace.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Magnetic resonance imaging

Perfusion

ImageJ

Open source

Software tool

@&#ABSTRACT@&#


               
               
                  Motivation
                  This work presents the development of an open source tool for the quantification of dynamic susceptibility-weighted contrast-enhanced (DSC) perfusion studies. The development of this tool is motivated by the lack of open source tools implemented on open platforms to allow external developers to implement their own quantification methods easily and without the need of paying for a development license.
               
               
                  Materials and methods
                  This quantification tool was developed as a plugin for the ImageJ image analysis platform using the Java programming language. A modular approach was used in the implementation of the components, in such a way that the addition of new methods can be done without breaking any of the existing functionalities. For the validation process, images from seven patients with brain tumors were acquired and quantified with the presented tool and with a widely used clinical software package. The resulting perfusion parameters were then compared.
               
               
                  Results
                  Perfusion parameters and the corresponding parametric images were obtained. When no gamma-fitting is used, an excellent agreement with the tool used as a gold-standard was obtained (R
                     2>0.8 and values are within 95% CI limits in Bland–Altman plots).
               
               
                  Conclusion
                  An open source tool that performs quantification of perfusion studies using magnetic resonance imaging has been developed and validated using a clinical software package. It works as an ImageJ plugin and the source code has been published with an open source license.
               
            

@&#INTRODUCTION@&#

Dynamic susceptibility-weighted contrast-enhanced (DSC) perfusion studies in magnetic resonance imaging (MRI) provide valuable data for brain function research and clinical practice. This image modality is based on the analysis of signal intensity changes in the MRI signal following the intravenous injection of a bolus of a paramagnetic contrast agent, such as Gd-DTPA [24]. When the bolus passes through the brain, the signal intensity drops on T2⁎-weighted images due to small variations in the local magnetic field. Modeling the time course of this tracer through the brain tissue makes it possible to obtain functional information regarding perfusion-related parameters such as cerebral blood flow (CBF), mean transit time (MTT) and cerebral blood volume (CBV).

The correct quantification of these parameters has several clinical applications, such as detection and assessment of ischemic stroke prior to treatment [3], characterization of multiple sclerosis lesions [7], tumor diagnosis [1,13,4,12,9,6] or as indicators on the progress of Alzheimer’s disease [8]. As this technique is also widely used in preclinical studies [20,25,26,15], it is therefore interesting to have a tool that performs the quantification process in a fast and reliable way for research purposes. To the extent of our knowledge, the only other comprehensive and open tool for this kind of analysis is LUPE [11]. However, we have not been able to find a validation of this tool compared with a clinical one. Furthermore, LUPE has been coded in the IDL programming language, which will force authors who wish to implement their own methods to acquire an IDL development license.

In this study we present the implementation of an open source DSC quantification tool developed as an ImageJ [22] plugin using the Java programming language and validated against Philips IntelliSpace, a widely used clinical tool. Our tool has been developed in a modular way to allow external researchers easily include their own quantification or preprocessing algorithms.

The mathematical approach behind the quantification process has been extensively reviewed in the literature [10,17,16,21] and here we will provide a brief summary of the basic concepts.

For each voxel in the image, the signal drop after the contrast injection depends on the tracer concentration and can be modeled as
                           
                              (1.1)
                              
                                 S
                                 (
                                 t
                                 )
                                 =
                                 
                                    
                                       S
                                    
                                    
                                       0
                                    
                                 
                                 ×
                                 
                                    
                                       e
                                    
                                    
                                       −
                                       (
                                       
                                          
                                             C
                                          
                                          
                                             m
                                          
                                       
                                       (
                                       t
                                       )
                                       /
                                       k
                                       )
                                    
                                 
                              
                           
                        where S(t) is the change over time of the image signal for any given voxel, S
                        0 is the baseline signal before the contrast bolus arrival, 
                           
                              
                                 C
                              
                              
                                 m
                              
                           
                           (
                           t
                           )
                         is the measured concentration of gadolinium as a function of time and 
                           k
                         is a constant that depends on the scanner used to acquire the image series and on the TE of the acquisition sequence. Since the parameter k appears simultaneously in the numerator and denominator in the equations that compute the parametric maps, it cancels out and a value of 
                           k
                           =
                           1
                         is used on the next equations for simplification purposes.

From the previous formula, the expression for the contrast concentration can be obtained:
                           
                              (1.2)
                              
                                 
                                    
                                       C
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 t
                                 )
                                 =
                                 
                                 
                                 −
                                 
                                 ln
                                 
                                 
                                    
                                       S
                                       (
                                       t
                                       )
                                    
                                    
                                       
                                          
                                             S
                                          
                                          
                                             0
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The shape of this concentration curve is heavily influenced by the way the tracer bolus is injected into the patient. To achieve an accurate quantification it is necessary to eliminate this effect from the concentration curve. The arterial input function (AIF) describes the way the tracer bolus reaches the main vessels; therefore, the concentration in a region can be expressed mathematically as the convolution of the AIF with an idealized contrast bolus (C(t)), as follows:
                           
                              (1.3)
                              
                                 
                                    
                                       C
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 t
                                 )
                                 =
                                 C
                                 (
                                 t
                                 )
                                 ⊗
                                 AIF
                                 (
                                 t
                                 )
                              
                           
                        
                     

The AIF is obtained from the image data via manual delineation, typically from the carotid arteries, if they are present in the field of view. Also, there are available robust algorithms to select automatically the relevant AIF voxels and avoid the manual delineation process [21]. Once the input function has been obtained, it is possible to compute the idealized contrast bolus for each voxel using deconvolution techniques, such as the one published by [10]. Please note that we follow the notation from [10], commonly used in nuclear medicine, but in other contexts C(t) is referred to as R(t) [27].

With all these curves computed, three parametric maps of interest, CBV, MTT and CBF, can be calculated. The expression for CBV is [10]:
                           
                              (1.4)
                              
                                 CBV
                                 =
                                 
                                 
                                 
                                    
                                       
                                          
                                             κ
                                          
                                          
                                             H
                                          
                                       
                                    
                                    ρ
                                 
                                 ×
                                 
                                    
                                       ∫
                                       
                                          
                                             
                                                C
                                             
                                             
                                                m
                                             
                                          
                                          (
                                          t
                                          )
                                       
                                    
                                    
                                       ∫
                                       
                                          AIF
                                          (
                                          t
                                          )
                                       
                                    
                                 
                              
                           
                        
                     

In the last equation, the constant 
                           
                              
                                 κ
                              
                              
                                 H
                              
                           
                         corrects for the different hematocrit between large and small vessels and has a value of 0.73, and 
                           ρ
                         is the density of brain tissue (1.04g/ml) [23].

The MTT is defined as
                           
                              (1.5)
                              
                                 MTT
                                 =
                                 
                                    
                                       ∫
                                       
                                          C
                                          (
                                          t
                                          )
                                       
                                    
                                    
                                       
                                          
                                             C
                                          
                                          
                                             max
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 C
                              
                              
                                 max
                              
                           
                         is the maximum of 
                           C
                           (
                           t
                           )
                        , the contrast measurement after deconvolution with the AIF, for that voxel.

Finally, the CBF parametric map is obtained by dividing the previous ones:
                           
                              (1.6)
                              
                                 CBF
                                 =
                                 
                                    
                                       CBV
                                    
                                    
                                       MTT
                                    
                                 
                              
                           
                        
                     

While these steps describe the basic process, there are some preprocessing steps that can be applied in order to reduce the influence of noise or undesired effects such as tracer recirculation or leakage through the blood–brain-barrier. These effects can also be considered in the model: it is a common practice to simply remove them by fitting each contrast curve to a gamma function that takes into account only the first pass of the tracer and assumes no leakage [19,5,28]. This function is defined by the following equation:
                           
                              (1.7)
                              
                                 
                                    
                                       C
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 t
                                 )
                                 =
                                 
                                 
                                 K
                                 
                                    
                                       (
                                       t
                                       −
                                       
                                          
                                             t
                                          
                                          
                                             0
                                          
                                       
                                       )
                                    
                                    α
                                 
                                 
                                    
                                       e
                                    
                                    
                                       −
                                       
                                          
                                             t
                                             −
                                             
                                                
                                                   t
                                                
                                                
                                                   0
                                                
                                             
                                          
                                          β
                                       
                                    
                                 
                              
                           
                        for any moment t>t
                        0, where t
                        0 is defined as the contrast injection time. Once the contrast concentration curve for each voxel has been fitted to this function, the fitted data are used for the rest of the quantification process.

This work presents an open DSC quantification tool. The development platform chosen, ImageJ [22], is an imaging analysis and processing tool created by the National Institutes of Health (Bethesda, Maryland, USA) in the Java programming language (Oracle Corporation, Santa Clara, California, USA). ImageJ source code is available under a public domain license, which allows developers to implement new algorithms easily with the help of its well-documented application programming interface (API). This also allows concentrating on algorithm implementation, as the common imaging handling and processing functions (opening and saving image files, displaying them on screen, different basic filtering approaches…) are already implemented. For some mathematical computations as SVD (Singular Value Decomposition) or linear regression, we have used the Apache Commons Math libraries (http://commons.apache.org/proper/commons-math/).

The implementation of the DSC quantification process has been made in a modular way. This allows modifying the quantification workflow so as to easily replace or include new steps (for instance, new preprocessing algorithms or fitting models).

The processing workflow, from the moment the image has been loaded into ImageJ, is the following:
                           
                              1.
                              The image is masked to eliminate from the parametric computation all the voxels outside the subject body area. This masking process is done using a simple thresholding method.

The voxels from which the AIF should be computed are automatically detected using the algorithm detailed in [21]. This algorithm searches for those voxels that present contrast concentration curves with an earlier peak value, higher maximum amplitudes and smaller full-width half-maximum (FHWM). Intuitively, it tries to detect those voxels that carry contrast before it interacts with any of the tissues present in the image. Once the appropriate voxels have been selected, they are presented to the user as an overlay to the original image. If the automatic selection is not satisfactory to the user, it is possible to go back and choose a different AIF calculation mode. The present program version includes two other methods: manual delineation, in which the AIF is computed by averaging selected voxels, and importing the AIF from a text file. Other automatic or semi-automatic AIF calculation methods could be easily integrated.

As an optional preprocessing step, the contrast curves can be fitted to a gamma function. This is done using a preprocessing class that can be extended to facilitate future implementation of new preprocessing steps. This particular fitting process (gamma fit) has been included as a proof of concept in order to test the modular design.

After the AIF extraction and the optional preprocessing step, the three parametric maps are computed and shown on screen.

The implemented gamma fitting was based on an adaptive minimum-norm total linear least square method [10] that linearizes the gamma function, performs a linear fit and then undoes the linear transformation. This fitting process needs to find the initial (t
                        0) and final (t
                        
                           e
                        ) moments of the first pass of the contrast bolus to fit only that part of the curve. To choose t
                        0 and t
                        
                           e
                         we used a method derived from that published on [10]. This method looks along the contrast curve for all possible pairs of points with the constraint that the second point needs to have at least a third of the maximum contrast curve amplitude for the whole volume; when these points are found, the first one is set to be t
                        0. The search for the final point works in an analogous way. The contrast curve is then fitted to a gamma function for t
                        0
                        <t<t
                        
                           e
                         and 0 otherwise.

The fitting algorithm output can be used to decide whether a given pixel should be excluded from the analysis: if the contrast signal curve can be properly fitted to a gamma function, then that pixel is marked as containing contrast. On the fitted curve the signal is forced to 0 before t
                        0 and after t
                        
                           e
                        . These modelled curves are then used to obtain the perfusion parameters, discarding the original ones.

The class hierarchy implemented can be seen in 
                        Fig. 1. Briefly, a ImagePlusHyp class, which allows to read dynamic voxel values in a convenient way, has been adapted from jClustering [14] and combined with an Iterator object (VoxIterator) in order to quickly read the contrast curves from each voxel. Each voxel is then modeled using a VoxelT2 class that contains the raw contrast measurement, the fitted contrast (using a Fitter interface that can be implemented to develop different fitting algorithms), the AIF (using the AIFCalculation interface) and the final parameters CBV, CBF and MTT.

To validate the method we used a dataset of seven patients with brain tumors (four males and three females; age range 25–80, age mean and standard deviation 58.29±19.18), recruited in the Radiology Department of our institution with no prior selection. Written informed consent was obtained and the Institutional review board approved the study.

Perfusion studies were acquired following a regular protocol: an echo-planar sequence (EPI factor 61) with a gradient echo preparation (flip angle 40°; TR 1692ms; TE 30ms). 40 frames (volumes) of 128×128×28 voxels with a voxel size of 1.8×1.8×5mm were acquired. 14ml of Gadovist, 1.0mmol/ml (Schering AG, Berlin, Germany) were injected using an automated injector (Spectris Solaris MR Injection System, Medrad, PA, USA) at a rate of 3ml/s. After the contrast injection, the line was flushed with 61ml of saline solution using the same injection rate. The images were acquired using a Philips Intera magnetic resonance scanner, with field strength of 1.5T (Philips Medical Systems, Best, The Netherlands). All studies were visually checked and no study had to be discarded due to patient movement artifacts.

All studies were quantified using Philips IntelliSpace Portal, obtaining CBV, CBF and MTT parametric images.

At least two regions of interest (ROIs) were manually drawn on each acquired image for quantification purposes by an experienced radiologist. One was drawn inside the tumor area and another one, or two, depending on the study, on the contralateral white matter for reference purposes. Tumor to healthy white matter ratios were computed for each parametric map using their average ROI values. As more than one reference ROI was drawn in some of the patients, a total of 13 ratios were computed. The AIF was calculated from voxels selected manually by the radiologist.

CBV, CBF and MTT maps were also obtained with the tool developed in the present work using the automatic AIF extraction algorithm implemented, with and without the preprocessing gamma fitting step. Parametric images were also obtained both with and without gamma fitting preprocessing. The tumor ROIs drawn by the radiologist were replicated manually in the contralateral hemisphere and the tumor to healthy white matter ratios were computed. To check the agreement between both tools, the Pearson correlation score was computed for each pair of measurements, followed by a Bland–Altman plot to detect possible biases in the results.

@&#RESULTS@&#

The tool developed works as a plugin under the ImageJ platform and has been published under a free software license (GNU GPL). Source code and binary downloads are available at https://github.com/HGGM-LIM/imagej-perfusion-plugin.

Our tool successfully generated and displayed all the parametric images using ImageJ internal procedures, as seen in 
                     Fig. 2. The algorithm for automatic AIF selection was also successfully employed in the generation of all the parametric maps; 
                     Fig. 3 shows a screenshot of one of the analyzed brains that shows the voxels selected for the AIF calculation.

Regarding quantitative analysis, the correlation and Bland–Altman analysis showed good results when no prior fitting is used (
                     
                     Figs. 4 and 5). Fig. 4 includes the correlation values for each type of comparison; p-values <0.05 for all computed correlation scores.

@&#DISCUSSION@&#

The DSC quantification tool developed in this work performs the basic mathematical steps to generate CBV, CBF and MTT parametric maps and includes a commonly used preprocessing step by fitting the data to a gamma function in order to remove the effects of both noise and contrast recirculation. The tool works as a plugin under the ImageJ platform and has been published under a free software license (GNU GPL).

For the validation of the tool we made use of a Philips IntelliSpace workstation as the gold standard, as it is a software platform widely used in clinical environments. Our software yielded excellent results in terms of agreement, with a R
                     2 value higher than 0.80 for all measured parameters when no gamma fitting was used. The agreement for CBF is higher than for MTT; one possible explanation is that CBV and MTT are similarly affected by several factors such as mathematical and computational errors, and errors due to localization and manual delineation of ROIs. In the case of MTT, it is also affected by the deconvolution operation, which is a mathematical operation very sensitive to noise or the minimum eigenvalue accepted when computing the pseudoinverse matrix. As CBF is a ratio and the above-mentioned issues are then partially canceled when the ratio is computed.

The obtained parametric maps are correctly displayed on ImageJ (Fig. 2) and can be stored in a file using any of the standard image formats supported by this platform in order to carry out posterior analyses. Fig. 2 uses the “Fire” color look-up-table (LUT), but ImageJ enables the user to select different LUTs.

The computational load of this algorithm is minimal in current desktop computing systems. In our tests, parametric images are generated in 1–2s per study.

Class structure has been defined with flexibility and modularity in mind. Though in the present implementation there is only one fitting algorithm, several more have been proposed in the literature [18,19]. Implementing another one just requires the user to implement the necessary math in its own class extending the fitter class and add another selection in the GUI to let the user select it. As this project has been published with an open source license, any third party may extend or change any functionality. Therefore, it is also possible to easily develop and integrate new automatic AIF selection routines [2] by implementing new AIFCalculation interfaces, as it is demonstrated with the current AIFFromTextFile class.

This work has a number of limitations. On the one hand, the details of the algorithms used by Philips IntelliSpace are unknown. Pre or post-processing steps, if any, performed by this platform are not replicated by our tool, so we cannot rule out an effect on the final numerical values. Due to the low agreement obtained in the MTT values when using the gamma fitting option (R
                     2=0.49), it can be deducted that the gold standard tool does not use this preprocessing step prior to computing the parametric values. In that sense, the validation necessarily worked against a “black box” for which only agreement metrics can be computed when no gamma fitting is used. Also, the ROIs used in the two tools might differ slightly, as they were originally drawn by an experienced radiologist on IntelliSpace and then replicated on our tool. Furthermore, in our case the input function was obtained automatically, a functionality not provided by IntelliSpace. This can also account for some of the differences observed in the regression analysis.

No validation has been made of the results obtained with gamma fitting. While a validation can been made, provided a gold standard tool that performs the analysis in this way could be obtained, these results are included only as a proof of concept for the modular design of the tool; they show that the preprocessing filter is indeed processing the data as expected.

It has to be noted that our tool currently performs DSC analyses only. The models that quantify dynamic contrast enhanced MRI studies (DCE-MRI, acquired using the T1 field and processed with software such as the one presented in [29]) are quite different from those used here, but in principle it would be possible to modify this tool so that both types of analyses can be performed; the proposed class architecture allows it and it may be included in future lines of work with this software, along with the already mentioned implementation of additional fitting models.

@&#CONCLUSIONS@&#

In this work we present an open source DSC quantification tool that runs under ImageJ and which has been validated against approved clinical software. The tool is able to obtain the AIF either automatically or manually. Furthermore, it follows a modular design that allows third parties to include their own quantification and preprocessing steps in an easy way using a public API. The results obtained on seven patients were consistent with those offered by the gold standard tool when no prior fitting was used.

@&#ACKNOWLEDGEMENTS@&#

This work was partially supported by the Human Frontier Science Program (Research Grant 2013).

@&#REFERENCES@&#

