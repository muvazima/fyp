@&#MAIN-TITLE@&#Adaptive linear combination of heuristic orderings in constructing examination timetables

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We focus on the difficulty of examinations assignment.


                        
                        
                           
                           We obtained scores using linear combination of heuristic(s) and heuristic modifier.


                        
                        
                           
                           Each heuristic was assigned with weight values.


                        
                        
                           
                           Combination of multiple heuristics is the effective way for good solution quality.


                        
                        
                           
                           Combinations are most effective when the weight of HM is very high.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Examination timetabling

Constructive heuristic

Linear combinations

Graph colouring

@&#ABSTRACT@&#


               
               
                  In this paper, we investigate adaptive linear combinations of graph coloring heuristics with a heuristic modifier to address the examination timetabling problem. We invoke a normalisation strategy for each parameter in order to generalise the specific problem data. Two graph coloring heuristics were used in this study (largest degree and saturation degree). A score for the difficulty of assigning each examination was obtained from an adaptive linear combination of these two heuristics and examinations in the list were ordered based on this value. The examinations with the score value representing the higher difficulty were chosen for scheduling based on two strategies. We tested for single and multiple heuristics with and without a heuristic modifier with different combinations of weight values for each parameter on the Toronto and ITC2007 benchmark data sets. We observed that the combination of multiple heuristics with a heuristic modifier offers an effective way to obtain good solution quality. Experimental results demonstrate that our approach delivers promising results. We conclude that this adaptive linear combination of heuristics is a highly effective method and simple to implement.
               
            

@&#INTRODUCTION@&#

The examination timetabling problem has been much studied and a wide variety of approaches have been taken across a variety of associated problem descriptions. In general, the task is NP hard (Schindl, 2005). The real world problem is rich and varied, involving significant levels of information (Burke, Elliman, Ford, & Weare, 1996). The manual solution of this problem is typically suboptimal (feasible but not a very good solution) since the exploration of the space for high quality solutions is beyond the scope of ad hoc search. Examination timetabling problems have been well documented in the academic literature with a good coverage of various methods and strategies (Carter, Laporte, & Lee, 1996; Qu, Burke, Mccollum, Merlot, & Lee, 2009).

The examination timetabling problem can be defined as the assignment of a finite set of examinations to a finite set of time-slots whilst, at the same time, satisfying various problem constraints. It involves two types of constraints; hard constraints and soft constraints. The hard constraints are strictly required to be adhered to in any circumstances. Satisfying the hard constraints produces a feasible solution. For example, students cannot sit two examinations at the same time. On the other hand, soft constraints do not affect the feasibility of the solution but they need to be satisfied as much as possible for the solution to be of high quality. Of course, soft constraints usually have to be violated to some degree in a real world situation. The extent to which the defined soft constraints are satisfied reflects the quality of the obtained timetable. An example of a soft constraint is that students should have as much time as possible between examinations. An example of real-world application of automated examination timetabling is reported in Kahar and Kendall (2010).

Timetabling approaches have been widely investigated at the interface of Artificial Intelligence and Operations Research over the last few decades or so. The examination timetabling problem can be mapped through an identity relationship onto a graph colouring mathematical formalism. Indeed, this observation underpins some of the earliest and most well known approaches to examination timetabling problems (Carter, 1986). In the graph colouring formalism, the vertices represent examinations and the edges connecting vertices represent hard constraint, i.e. conflicts between the examinations. For more details on graph representation in timetabling see Burke, Kingston, and de Werra (2004).

Many other approaches such as meta-heuristics and hybridisations have been successfully investigated. Examples include evolutionary algorithms (Ersoy, Özcan, & Sima Uyar, 2007), tabu search (White, Xie, & Zonjic, 2004), ant algorithms (Naji Azimi, 2005), the Great Deluge approach (Burke, Bykov, Newall, & Petrovic, 2004) and simulated annealing (Thompson & Dowsland, 1996).

Recently, other variants of local search approaches have been widely explored within the context of examination timetabling. These include variable neighbourhood search (Burke, Eckersley, McCollum, Petrovic, & Qu, 2010) and iterated local search (Caramia, Dell’Olmo, & Italiano, 2008). Some recent approaches have been motivated b the goal of developing more general algorithms. Examples include hyper-heuristics (Burke, Mccollum, Meisels, Petrovic, & Qu, 2007), case-based reasoning (Burke, Petrovic, & Qu, 2006), fuzzy approaches (Asmuni, Burke, Garibaldi, McCollum, & Parkes, 2009) and granular information processing (Abdul Rahim, Bargiela, & Qu, 2009). A review of the major approaches in examination timetabling can be found in Carter et al. (1996) and Qu et al. (2009).

The successful assignment of an examination to a time-slot is closely related to the initial ordering strategy in which all examinations are processed. Consequently, examinations are first ordered according to the perceived difficulty of being scheduled in the available time-slots. The examinations are then taken one by one to be assigned to the time-slot. The examination deemed to be the most difficult is scheduled first in the timetable. This is a constructive process. Such processes are often used during the initialisation strategy of a meta-heuristic technique. In the past, there have been various ordering strategies employed in the context of examination timetabling (Carter, 1986; Burke et al., 2004). Commonly used ordering strategies are: saturation degree, largest degree, largest weighted degree, largest enrolment and colour degree.

Since none of the ordering strategies provides a guarantee of successful scheduling, there has been some attention on ordering heuristics within adaptive approaches in the academic literature. In our previous study (Abdul Rahman, Bargiela, Burke, McCollum, & Özcan, 2009), we introduced several strategies to choose examinations and time-slots using ordering heuristics within the framework of squeaky wheel optimisation. This work is an extension of the adaptive heuristic orderings technique proposed by Burke and Newall (2004) where the approach promotes early scheduling of difficult examinations based on a heuristic modifier. Another study, Qu, Burke, and McCollum (2009) implemented an adaptive approach to examination timetabling by hybridising the low level graph heuristics based on a learning mechanism and modifying the solutions by high-level heuristic indirectly.

With most of the approaches taken within the overall family of constructive methods, it is often the case that a single heuristic is used during the initial ordering phase. In considering the difficulty of an examination, it is useful to take into account other factors that affect the ordering of examinations. Considering many factors at once represents the real world situation. The difficulty of scheduling an examination can be approximated more reliably if several heuristics lend support to the final ordering of examinations. Consequently, the constructive study by Burke, Pham, Qu, and Yellen (2010) combined graph colouring heuristics with weights within a linear approach as to measure the difficulty of a vertex of weighted graph. The study used the vertex-selection heuristics to represent the difficulty of a vertex which is continually updated throughout the timetabling process. Studies by Johnson (1990) and Asmuni et al. (2009) have also deployed this strategy by considering more than one heuristic at one time and it has been shown to have an effect on the ordering of the examinations. Based on the ‘difficulty factor’, Johnson (1990) used graph colouring heuristics, i.e. the combination of largest enrolment and largest degree as an ordering strategy for assigning examinations to time slots. Several variations of relative weight of each criterion were considered in order to produce a number of different feasible timetables. Furthermore, Asmuni et al. (2009) combined two graph colouring heuristics within the framework of fuzzy methodology in order to deal with uncertainty in ordering the examination based on its difficulties. Three graph colouring heuristics were used, i.e. largest degree, largest enrolment and saturation degree with three combinations of two heuristics. The study indicated that the solution quality was superior compared with using only a single heuristic.

Encouraged by these studies, we extend this work by combining heuristics with a heuristic modifier and adapting different weights to each heuristic to analyse its effectiveness. The aim is to obtain new difficulty estimates that are extracted from the combination of graph colouring heuristics with a heuristic modifier using a linear approach. Different weights are assigned to each parameter and the effect of weights associated with ordering using different heuristics on the quality of the examination schedules is investigated. It is worth noting that the use of information from these heuristics and a heuristic modifier can lead to improvements in the obtained solution. This approach has been tested on two datasets, i.e. Toronto and ITC2007 (The Second International Timetabling Competition) benchmark datasets and has shown to produce high quality solutions that are comparable to other approaches in the literature (Qu et al., 2009).

An overview of adaptive ordering heuristics is presented in Section 2. Section 3 provides the implementation, the instances focused on as part of this study and an analysis of the results. Finally a conclusion is provided in Section 4.

An adaptive approach to examination timetabling based on priorities was proposed in Burke and Newall (2004). This approach was extended in Rahman et al. (2009) by introducing additional strategies to improve the solution quality. This involved including methods to choose the ordering of examinations and their assignment to time-slots. The method is based on the idea of squeaky wheel optimisation initiated by Joslin and Clements (1999). Squeaky wheel optimisation is a greedy approach and works by iteratively cycling around three procedures: Constructor, Analyzer and Prioritizer. In relation to the examination timetabling problem, the procedures are as follows:
                        
                           •
                           
                              Constructor. First, the constructor generates an initial solution for a set of unscheduled examinations based on the initial ordering (which can be generated by a chosen graph colouring heuristic). The unscheduled examinations are individually assigned to the best time-slot, i.e. whichever generates the least penalty. During the assignment, there is a possibility that some of the examinations cannot be assigned to a time-slot due to the existence of conflicts with other examinations. In this case, such examinations remain unscheduled.


                              Analyzer. Once the constructor has completed the assignment, each examination is analysed to check whether there was a problem with the assignment, i.e. whether there is a conflict with other examinations during the assignment. A strategy is used to increase the priority of problematic examinations so that they will be given a higher priority in the next iteration. A certain value is added to the difficulty value of the unscheduled examination in order to indicate that this unscheduled examination is more difficult to handle than other examinations. This difficulty value will therefore increase at the end of each iteration if an examination remains unscheduled during the assignment.


                              Prioritizer. Increasing the difficulty by adding a certain value to a heuristic may change the ordering of examinations. At this stage, the updated difficulty value will be ranked in a decreasing order and the most difficult examination will be chosen to be scheduled first in the next iteration. The process continues until some stopping criterion is met and finally the best solution is returned.

This approach constructs the solution considering the hard constraints of the tested problem and the quality of the constructed solution is measured based on the soft constraint violation. The type of hard and soft constraints and the evaluation of the quality of the constructed timetable differ across different problem instances. For further detail on hard and soft constraint evaluation on the tested benchmark datasets see Qu et al. (2009) and McCollum, McMullan, Burke, Parkes, and Qu (2008).

In order to modify the difficulty value of an examination over time, the idea of a heuristic modifier introduced by Burke and Newall (2004) is used. The formula for examination difficulty is presented in Eq. (1). The difficulty of examination i at iteration t is a discrete variable that is an estimation of the difficulty of scheduling the examination after completing the iteration, while the heuristic of examination i is a chosen graph colouring heuristic value that estimates the difficulty. heurmod
                     
                        i
                     (t) for examination i at iteration t is a heuristic modifier value. At each iteration, heurmod
                     
                        i
                     (t) is increased by a modify function whenever examination i cannot be scheduled (illustrated in Eq. (1)). This approach can be considered as an online learning algorithm where the feedback from the search process while solving the problem is used to construct the next solution during the iteration.
                        
                           (1)
                           
                              
                                 
                                    difficulty
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                              =
                              
                                 
                                    heuristic
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    heurmod
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                        
                     where
                        
                           
                              
                                 
                                    heurmod
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              +
                              1
                              )
                              =
                              
                                 
                                    
                                       
                                          
                                             
                                                modify
                                                (
                                                
                                                   
                                                      heurmod
                                                   
                                                   
                                                      i
                                                   
                                                
                                                (
                                                t
                                                )
                                                )
                                             
                                             
                                                ,
                                                if
                                                
                                                examination
                                                
                                                i
                                                
                                                cannot
                                                
                                                be
                                                
                                                scheduled
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      heurmod
                                                   
                                                   
                                                      i
                                                   
                                                
                                                (
                                                t
                                                )
                                             
                                             
                                                ,
                                                otherwise
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

An adaptive linear combination of heuristic orderings in this study is a combination of a number of normalised graph colouring heuristics with normalised difficulty measures from the heuristic modifier. This constitutes a flexible approach as different weights can be assigned to different parameters used within the combination. Information from the chosen heuristics and heuristic modifier are used to identify new orderings of examination to be scheduled. The new ordering of an examination based on an adaptive linear combination of heuristic orderings is represented by the following equation:
                        
                           (2)
                           
                              difficulty
                              _
                              
                                 
                                    score
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       n
                                    
                                 
                              
                              
                                 
                                    w
                                 
                                 
                                    j
                                 
                              
                              ×
                              
                                 
                                    heuristicN
                                 
                                 
                                    ij
                                 
                              
                              +
                              
                                 
                                    w
                                 
                                 
                                    HM
                                 
                              
                              ×
                              
                                 
                                    heurmod
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                        
                     where,
                        
                           (3)
                           
                              
                                 
                                    heuristicN
                                 
                                 
                                    ij
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          heuristic
                                       
                                       
                                          ij
                                       
                                    
                                 
                                 
                                    
                                       
                                          maxheuristic
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    heurmodN
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                              =
                              
                                 
                                    
                                       
                                          heurmod
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    t
                                    )
                                 
                                 
                                    choosemax
                                    (
                                    heurmod
                                    (
                                    t
                                    )
                                    )
                                 
                              
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       n
                                    
                                 
                              
                              
                                 
                                    w
                                 
                                 
                                    j
                                 
                              
                              +
                              
                                 
                                    w
                                 
                                 
                                    HM
                                 
                              
                              =
                              1
                           
                        
                     
                  

The difficulty_score
                     
                        i
                     (t) is used as a difficulty measure for examination i at iteration t based on the information evaluated. In the present study, a zero-one normalisation method is used to obtain the normalised value between 0 and 1 for each heuristicN
                     
                        ij
                      and heurmodN
                     
                        i
                     (t) to ensure a simple generalisation characteristic of the problem data. The heuristicN
                     
                        ij
                      in Eq. (3) is the normalised graph colouring heuristic j for examination i, while heurmodN
                     
                        i
                     (t) in Eq. (4) is the normalised heuristic modifier for examination i at iteration t. The maxheuristic
                     
                        j
                      is the maximum identified value of heuristic j, while the choosemax function is provided to give an alternative to the heuristic modifier to change dynamically or statically. Given in Eq. (5) is the sum of weight for heuristic j, w
                     
                        j
                      and heuristic modifier, w
                     
                        HM
                      is equal to 1.

Two types of graph colouring heuristics were used in this suite of experiments. In order to compare their contribution to solution quality, a series of experiments has been carried out, at first, using each single heuristic separately, and subsequently combining both heuristics with and without a heuristic modifier. The purpose is to compare the performance of single and multiple heuristics and to identify the most effective combination of heuristics with the heuristic modifier. It should be noted that, although not investigated here, more graph colouring heuristics can be used within this approach.
                           
                              •
                              
                                 Largest Degree (LD). The ordering of examinations is based on the number of conflicting examinations where the examination with the largest conflict will be scheduled first. The heuristic
                                 
                                    ij
                                  holds the number of conflicting examinations of heuristic j (e.g. largest degree) for examination i. The heuristicN
                                 
                                    ij
                                  is the normalised value of heuristic
                                 
                                    ij
                                  with maxheuristic, i.e. the largest number of conflicting examination. This heuristic is classified as a static heuristic because of the heuristic value for each examination remains unchanged throughout the iteration. In solving the un-capacitated problem, the examination to be scheduled is checked whether they are conflicted with other examinations in assigning the time-slot and room. If the assignment cannot be made, then the heurmod
                                 
                                    i
                                 (t) is increased twice. Subsequently, it also increased the difficulty score of examination i.


                                 Saturation Degree (SD). The ordering of examinations is based on the number of remaining time-slots where the examination with the smallest number of available time-slots is scheduled first. The number of remaining time-slots of unscheduled examinations will keep changing as the conflicting examinations are assigned to time-slot. This heuristic is classified as a dynamic heuristic. The number of remaining time-slots of unscheduled examination will keep changing as the conflicting examinations are assigned to time-slots. The ordering of unscheduled examinations may change due to the current successive assignment. Since the saturation degree value of an examination decreases from time to time, it requires an adjustment. In this study, the complement of an examination is used where the saturation degree of an examination is (max_number_of_time_slot
                                 − 
                                 saturation_degree_of_an_examination). The saturation degree value is initialised with 0 and keeps increasing until the maximum number of time-slots is reached if the examination cannot be scheduled during the iteration. The complement of saturation degree is used to increase the difficulty of an examination by adding it to the heuristic modifier. As for the capacitated problem (i.e. the problem with room capacity requirement), its saturation degree value also considers the availability of rooms for the remaining time-slot. For example, the number of remaining time-slots of an examination that can be used to schedule is seven. Assuming that three of the remaining time-slots are considered invalid due to the unavailability of rooms. In these circumstances, the number of remaining time-slots of an examination that can be scheduled is reduced to four considering room availability at the same time. Using this heuristic, the priority of choosing an examination is given to the higher value of difficulty. The next examination to be scheduled is determined by the difficulty_score of the remaining unscheduled examination, where the largest value of the difficulty_score is scheduled first. In this approach, heuristic
                                 
                                    ij
                                  holds the complement of the number of remaining time-slot of examination i. The maxheuristic of saturation degree is the total number of time-slot given for the dataset.

In our previous study Rahman et al. (2009), we used various modify functions for heuristic modifiers to change the order of examinations based on their difficulty value. The difficulty values were updated and increased with four strategies: custom, additive, multiplicative and exponential. The examination ordering was based on only one graph colouring heuristic during the timetabling. In this study, the same modify functions, i.e. additive and exponential are employed as in Rahman et al. (2009) and the linear approach adapts the normalisation strategy in order to generalise the ordering of difficulty_score by combining a number of graph colouring heuristic with a heuristic modifier.
                           
                              •
                              
                                 Additive (AD). The modifier is increased by one at each iteration, if an examination cannot be scheduled. This strategy has a modest effect on the difficulty of a given examination. If the difference between the heuristic value of a given examination i and its predecessor in the priority list is large, then it will take longer in using this approach to reorder the given examination i, emphasizing that this examination i is difficult to schedule:
                                    
                                       (6)
                                       
                                          modify
                                          (
                                          
                                             
                                                heurmod
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          t
                                          )
                                          )
                                          =
                                          
                                             
                                                heurmod
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          t
                                          -
                                          1
                                          )
                                          +
                                          1
                                          ,
                                          
                                             
                                                heurmod
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          0
                                          )
                                          =
                                          0
                                       
                                    
                                 
                              


                                 Exponential (EX). This modifier will upgrade the priority significantly, if the examination is difficult to schedule. The examination order will change significantly due to the large increment in the difficulty value.
                                    
                                       (7)
                                       
                                          modify
                                          (
                                          
                                             
                                                heurmod
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          t
                                          )
                                          )
                                          =
                                          c
                                          ×
                                          
                                             
                                                heurmod
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          t
                                          -
                                          1
                                          )
                                          ,
                                          
                                             
                                                heurmod
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          0
                                          )
                                          =
                                          1
                                          ,
                                       
                                    
                                 where c
                                 =2.

Once the heuristic modifier and the difficulty of an examination have been updated, the difficulty value of the heuristic modifier is normalised statically or dynamically based on the choosemax function. After all the heuristic values and the heuristic modifier have been updated with the chosen weights, all the values are summed up to obtain difficulty_score. The examinations are then ordered decreasingly based on difficulty_score before an assignment is made. The pseudocode of the implemented approach for the Toronto benchmark datasets is described in Algorithm 1. Note that the Toronto benchmark datasets represent an un-capacitated problem.
                           Algorithm 1
                           Constructing an examination timetable based on adaptive linear combinations of heuristic orderings for the Toronto benchmark datasets
                                 
                                    
                                       
                                       
                                          
                                             Choose heuristic(s) and do the initial ordering based on LD
                                          
                                          
                                             Assign weight for each of the chosen heuristics
                                          
                                          
                                             
                                                for 
                                                t
                                                =1 to number of iterations do
                                             
                                          
                                          
                                             
                                                
                                                if Saturation_degree then
                                             
                                          
                                          
                                             
                                                Set the saturation degree for each examination as 0
                                          
                                          
                                             
                                                
                                                end if
                                             
                                          
                                          
                                             
                                                
                                                for 
                                                i
                                                =1 to number of examinations do
                                             
                                          
                                          
                                             
                                                
                                                for 
                                                j
                                                =
                                                i to number of examinations do
                                             
                                          
                                          
                                             
                                                
                                                Calculate the normalise value of chosen heuristics: choosemax(heurmodN
                                                
                                                   j
                                                (t)), HeuristicN
                                                
                                                   LD,j
                                                , HeuristicN
                                                
                                                   SD,j
                                                 (refer Eqs. (2)–(4)) with weight value
                                          
                                          
                                             
                                                
                                                Calculate the difficulty_score
                                                
                                                   j
                                                (t) for each examination according to the chosen heuristics using Eq. 1
                                             
                                          
                                          
                                             
                                                
                                                end for
                                             
                                          
                                          
                                             
                                                Sort (difficulty_score(t)) in a decreasing order
                                          
                                          
                                             
                                                Choose examination i that has the highest difficulty score to be scheduled
                                          
                                          
                                             
                                                
                                                if 
                                                i can be scheduled then
                                             
                                          
                                          
                                             
                                                
                                                Schedule i in the time-slot with the least penalty
                                          
                                          
                                             
                                                
                                                In the case of the availability of multiple time-slots with the same penalty, choose one randomly
                                          
                                          
                                             
                                                
                                                else
                                             
                                          
                                          
                                             
                                                
                                                Increase and modify heuristic modifier of i (refer Eqs. (6) and (7))
                                          
                                          
                                             
                                                
                                                end if
                                             
                                          
                                          
                                             
                                                
                                                if Saturation_degree then
                                             
                                          
                                          
                                             
                                                
                                                Update the Saturation_degree
                                          
                                          
                                             
                                                
                                                end if
                                             
                                          
                                          
                                             
                                                
                                                end for
                                             
                                          
                                          
                                             
                                                Evaluate solution, store if it is the best found so far
                                          
                                          
                                             
                                                end for
                                             
                                          
                                       
                                    
                                 
                              
                           

The initial ordering of examinations at the beginning of the timetabling process is set based on the largest degree graph colouring heuristic. The saturation degree value of each examination i is set to be equal to 0 at the beginning of each iteration if it is chosen as the heuristic of the algorithm. This saturation degree value will keep increasing up to the maximum number of time-slots. Once the timetabling process begins, the normalised value for each of the chosen heuristics for each examination j is calculated using Eqs. (2)–(4). Next, the new difficulty score for each examination j is obtained and they are sorted in decreasing order. The most difficult examination (examination i) with the highest difficulty score is chosen first for time-slot assignment and is checked for the hard constraint violation. If examination i can be scheduled, then it is scheduled with the least penalty time-slot. In the case of more than one same least penalty time-slot being available, then the best time-slot is selected randomly from the list. In the case of examination i being violated, then it is left unassigned and at this stage the heuristic modifier of examination i is increased based on the identified type of modify function of the heuristic modifier. For the saturation degree heuristic, the saturation degree value for each examination i is updated after each successive examination assignment. The process of the examination assignment using adaptive linear combination of heuristic orderings continues until all examinations i has been assigned to time-slot. At the end of the process, the solution quality of the constructed timetable is evaluated and the best solution quality is stored.

The normalised value of the heuristic modifier is determined by the choosemax function that gives significant modification to the heurmodN
                        
                           i
                        (t).
                           
                              •
                              
                                 Static (S). The heurmod
                                 
                                    i
                                 (t) is normalised with the total number of iterations used in the algorithm. The larger the heurmod
                                 
                                    i
                                 (t), the more significant the value of heurmodN
                                 
                                    i
                                 (t).


                                 Dynamic (D). The heurmod
                                 
                                    i
                                 (t) is normalised with the current maximum number of heurmod of all examinations that change during the iteration. This value continues to change until the end of the iteration.

Since this approach requires weight assignment for each parameter, this study needs a strategy to assign the weight value. Each of the heuristics and the heuristic modifiers is assigned with different weight values. Using this approach, the weight values are assigned to each heuristic and heuristic modifier with the value from 0 to 1 with a 0.1 increment for each variable. The total of all weight values is equal to 1 (Eq. (6)). The combination of these weight values is tested for each of the variables in order to assess the performance of the heuristics and the heuristic modifier when different weight values are incorporated. It is important to know which heuristic is performing well by obtaining good quality solutions and to note the importance of the heuristic modifier in this combination, so that the higher weight value is given to the appropriate parameters.

The present study employed the shuffling strategy with top-window (TW) as discussed in our previous study Rahman et al. (2009). The examinations are ordered based on the difficulty_score and are chosen randomly from a fixed size top-window. The focus of this strategy is enhance the possibility of an examination being chosen from a group of difficult examinations. An appropriate examination to be chosen might appear in a certain size of grouped examinations that has been ordered based on the difficulty_score. The initial test has shown that the incorporation of the shuffling strategy could assist in finding a better ordering of examinations. This study uses the top-window size from two to nine, as suggested by Rahman et al. (2009). Since there is also a possibility that examinations have the same difficulty score, another strategy introduces a random preference (REQ) in order to choose different examinations when several sequences of examinations have equal scores.

Once an examination is chosen, it is assigned to the most appropriate time-slot. The assignment is made to ensure the smallest penalty cost from among all the available time-slot assignments. Previous studies Burke and Newall (2004) and Burke, Qu, and Soghier (2012) have adopted a greedy approach with the first time-slot giving the least penalty being chosen for an assignment. Since there is a possibility that some time-slots generate the same least penalty, a random element is incorporated in making this choice, introducing a variation of assignments in the timetable. In such a situation, there is a possibility of an examination being assigned to a different time-slot during another iteration, even though the order of examinations in the current iteration is the same as in the previous iteration.


                        Tables 1 and 2
                        
                         show an example of how the ordering is achieved using various combinations of heuristics after a certain number of iterations. In this example, the total number of time-slots is 10. Table 1 illustrates the ordering using a single heuristic. Since we want to use only one heuristic for the ordering, then the weight value for the single heuristic that is chosen is set to 1.0 and the weight for other heuristics are set as 0. Referring to column 2 of an unordered list in Table 1, the values are assumed as largest degree values. In that case, the maxheuristic for largest degree is equal to 19. The calculation of the difficulty_score value for the single ordering of LD in column 5 is based on Eq. (1) where the difficulty score for e4=(1.0)19/19=1.0, e1=(1.0)17/19=0.89 and so on.

The example for SD is shown in column 3 of Table 1. The single ordering for SD is dynamic. After each assignment of a time-slot, the new examination ordering is obtained. Initially, as implemented by Rahman et al. (2009), the saturation degree value is set to 0 for all examinations. We assume that e2 is chosen as the first examination to be assigned to a time-slot. Once e2 is assigned to a time-slot, the saturation degree value for the unscheduled examinations is updated by considering the conflict with other examinations in a previous assignment. Assuming that e4, e6 and e10 have conflicts with e2, then the saturation degree of these examinations are increased by one and the difficulty_score (using Eq. (1)) for e4=(1.0)1/10=0.1, e6=(1.0)1/10=0.1 and e10=(1.0)1/10=0.1, while the difficulty value for the rest of the examinations are zero due to no conflict with e2. The calculation of the difficulty value for each unassigned examination continues until no more examinations are to be assigned to a time-slot. The ordering by a single heuristic modifier (HM) in column 8 in Table 1 is based on the number of times an examination cannot be scheduled during the previous iterations. It is assumed that the figures in column 3 are the number of times these examinations cannot be assigned into a timetable during the previous iterations. By considering Eq. (1), the difficulty_score for ordering by single HM for e2=(1.0)20/20=1.0, e4=(1.0)15/20=0.75, e6=(1.0)14/20=0.70 and so on.


                        Table 2 illustrates the example of combinations of more than one heuristic. It is assumed that the total number of time-slot to be assigned is 10. The ordering by LDSD is a dynamic ordering. Considering the weight for LD, w
                        
                           LD
                        
                        =0.2 and the weight for SD, w
                        
                           SD
                        
                        = 0.8. Furthermore, it is assumed that e2 is the first examination to be assigned to a time-slot and assuming also that e2 has conflict only with e4 and e1. In this case, the saturation degree values for e4 and e1 are increased by 1. By using Eq. (1) and considering the largest degree value from Table 1, the difficulty_score for this combination for e4=(0.2)(19/19)+(0.8)(1/10)=0.280, for e1=(0.2)(17/19)+(0.8)(1/10)=0.258, e3=(0.2)(16/19)+(0.8)(0/10)=0.168 and so on, where these calculations are based on the combination of information from the largest degree and saturation degree heuristics. Let us consider the weight for LD, wLD=0.2 and the weight for HM, wHM =0.8 for ordering the examinations using combination of LDHM. Considering the largest degree and HM values from Table 1, the difficulty_score (Eq. (1)) for e4=(0.2)(19/19)+(0.8)(15/20)=0.800, e6=(0.2)(11/19)+(0.8)(14/20)=0.676, e10=(0.2)(16/19)+(0.8)(12/20)=0.648, etc. In the next combination of heuristics, let us consider the weight for LD, wLD=0.2, the weight for SD, wSD=0.4 and the weight HM, wHM=0.4 for ordering the examinations with combination of LDSDHM. It is assumed that e2 is the first examination to be chosen for assignment at certain iteration and it has been assigned to a time-slot and has conflict only with e4 and e1. Considering the information in Table 2, the difficulty_score for e=(0.2)(19/19)+(0.4)(1/10)+(0.4)(15/20)=0.500, e10=(0.2)(16/19)+(0.4)(0/10)+(0.4)(12/20)=0.408, e6=(0.2)(11/19)+(0.4)(0/10)+(0.4)(14/20)=0.396, etc.

@&#EXPERIMENTS@&#

We have used two standard benchmark data sets for the evaluation of the proposed method. Due to the stochastic nature of the proposed approaches, 50 different timetables were constructed for each dataset from the Toronto and ITC2007 benchmarks with each combination of heuristic(s) and heuristic modifier. Various combinations of heuristic(s) and heuristic modifier were considered in order to determine and compare the performance of the proposed approaches. Different weights were also assigned to each heuristic and heuristic modifier with the sum of weights being equal to one for each combination. The stopping condition for this approach was set to 2000 iterations for the Toronto datasets, while the experiment for ITC2007 was based on the running time given in the competition. The best penalty value obtained from 50 runs is highlighted in bold for each problem instance.

The Toronto benchmark datasets used in this study were introduced by Carter et al. (1996) and are widely used as a test bed in the examination timetabling community with different problem dimensions and characteristics. These datasets can be accessed at ftp://ftp.mie.utoronto.ca/pub/carter/testprob/. Since there is a problem relating to the circulation of datasets under the same name, Qu et al. (2009) introduced a notation to differentiate between various versions of the datasets. In this study, the notation introduced is used to specify the datasets and version I is used as a test bed to the proposed approaches.

The objective of the Toronto benchmark problem is to create a feasible timetable so that no student is required to sit two examinations at any one time. To achieve a high quality timetable, the soft constraints need to be satisfied as much as possible. Thus, during the timetable construction, it is required that student’s examinations are assigned as far apart as possible in order to give a wider student spread in the timetable. The proximity cost function introduced in Carter et al. (1996) in conjunction with the introduced datasets was used in order to measure the quality of the obtained timetable and to describe the average penalty of students distributed in the examination schedule.

The ITC2007 datasets are used for the evaluation of the approach proposed in this paper, where the focuses are on the examination timetabling track of the competition. It differs from the Toronto datasets in that ITC2007 is a capacitated problem that requires room assignment for each examination. Moreover, time-slot-related constraints and room-related constraints are also considered as hard constraints to be adhered to. In order to obtain a good quality timetable, several new soft constraints are also taken into account to fulfill the real world requirements; there are seven soft constraints to be satisfied simultaneously with their contribution to the quality of the obtained timetable. For more details on the constraints and the mathematical formulation of the ITC2007 datasets, see McCollum et al. (2008).

The results of the experiments for different combinations of graph colouring heuristics are provided in Table 3
                           . The results show the best penalty value obtained from 50 runs for different combinations of heuristics. The comparison shows that the combination of LDSDHM performed the best with ten out of thirteen datasets and one tie with SDHM, whilst SDHM obtained best results for two datasets. This experimental result shows that by considering information from more than one parameter simultaneously, the new difficulty measure can be obtained and at the same time a new ordering of examinations can be generated. It can be seen that the single SD performed well in comparison with the single LD and this may be because of the dynamic nature of this heuristic. The single HM also performed well and obtained the best results for six out of thirteen datasets when compared with the other single heuristics.


                           Table 4
                            illustrates the combination of weights and algorithmic approaches for the best results obtained from the experiments. It shows that most of the best results are obtained using the dynamic heuristic modifier. The value of the dynamic heuristic modifier is updated by finding the highest value of heuristic modifier each time the assignment process is completed. Taking the shuffling strategy into account, best results are obtained for ten out of thirteen datasets using the top-window strategy, while random preference works more effectively with three out of thirteen datasets. As documented in the table, the weight for HM is the highest for six of the datasets, while four of the dataset obtained the best result with high weight value for SD and the other three datasets performed well with LD as highest value of weight.

The best approaches so far for Toronto benchmark datasets are described by Caramia et al. (2008), Burke et al. (2010) and Turabieh and Abdullah (2011). The study by Caramia et al. (2008) investigated a multi phase local search based algorithms that start with a greedy scheduler to create a feasible timetable by allowing the number of time-slots to be increased. A penalty-decreaser and penalty-trader were then used to improve the solution quality. The method described in Burke et al. (2010) employed VNS and a hybridisation with a genetic algorithm. The method presented in Turabieh and Abdullah (2011) hybridised the great deluge algorithm with a heuristic procedure based on particle swam optimisation.


                           Table 5
                            reports the comparison of results for the thirteen problem instances of the Toronto benchmark for three different groups of approaches, i.e. constructive heuristic, hyper-heuristic and other improvement. The comparisons are made with other approaches that have been published in journal articles. A comparison with constructive heuristic approaches shows that the adaptive linear combination approach obtained one best result for sta83 I. Meanwhile, some other results of the adaptive linear combination approach are very close to the best of constructive approaches such as ute92 and yor83 I. Comparison to other hyper-heuristic approaches shows that the adaptive linear combination approach obtained two best results out of thirteen problem instances on rye92 and ute92. The other results are very close to the best solution of hyper-heuristic approaches. Note that some of the hyper-heuristic approaches may incorporate a two phase algorithm, i.e. construction and improvement and the study by Burke et al. (2012) is an example of a two phase hyper-heuristics approach.

The adaptive linear combination approach is purely a constructive algorithm that constructs the examination timetables using heuristic ordering. On the other hand, comparison with other improvement approaches indicates that most of the results from the adaptive linear combination approach are far from the best results.

The weight combinations are divided into four different groups based on the heuristic contribution. The initial test of the weight combinations reveals that there is only little difference when using different type of weight combinations with 0.1 increment. For instance, the weight combination of (0.1, 0.1, 0.8) is not very different from the weight combination of (0.2, 0.1, 0.7) in terms of the performance of solution quality since these weight combinations are almost identical. In this case, the weight combinations are divided into four different groups, i.e. high LD, high SD, high HM and balance. The group of high LD consists of weights (0.8, 0.1, 0.1), (0.7, 0.2, 0.1), (0.7, 0.1, 0.2); weights for high SD (0.1, 0.8, 0.1), (0.1, 0.7, 0.2), (0.2, 0.7, 0.1); weights for high HM (0.1, 0.1, 0.8), (0.1, 0.2, 0.7), (0.2, 0.1, 0.7) and weights for balance (0.3, 0.3, 0.4), (0.4, 0.3, 0.3), (0.3, 0.4, 0.3).

In order to see the difference in solution quality when using various top-window sizes and different groups of weight combination, a two-way analysis of variance is performed. From the statistical analysis, F
                           (31,58156)
                           =18.750 and ρ(0.000)<0.05, it is clear that there are significant differences to solution quality when different top-window sizes and groups of weight combination are employed. Table 6
                            illustrates the effect of different top-window sizes. In most cases different top-window sizes performed significantly differently to one another. However, the top-window size 2 is not significantly different from size 3, while the size 3 is not significantly different from sizes 2 and 4. The result from the two-way analysis of variance shows that the solution quality of each group is statistically different where ρ(0.000)<0.05 for each group comparison. In these circumstances, the solution quality that is tested with the weight combination from any different group of heuristics is statistically different.


                           Fig. 1
                           (a) and (b) illustrate the best performance of LDSDHM for car92 I and tre92 considering all combinations of weights. It demonstrated a pattern in the performance of best solution quality obtained for each of the combinations. By looking at the median value, when the weight value of HM is high enough then the solution quality value rapidly drop. On the other hand, whenever the weight value of HM is gradually decreased, then the solution quality also decreases progressively. Most of the peaks are obtained from the lowest weight value of HM while most of the slumps are obtained from the highest weight value of HM. This shows that the existence of the heuristic modifier in this adaptive linear combination of heuristics has an effect on the solution quality. Furthermore, by using the information from the other two heuristics it has increased the effectiveness of the new ordering. The results indicate that the combinations are most effective when the weight of HM is very high, whilst the other heuristics may vary in certain ways.


                           Fig. 2
                            illustrates the average performance of each top-window size and different group of weight combination for LDSDHM. It indicates that the group of highLD contributes a higher penalty value at each top-window size while the highSD, highHM and balance are almost identical in terms of penalty value during smaller size of top-window performance. However, the average performance for highSD, highHM and balance started to differ when the top-window size is 6 and above. In these circumstances, this indicates that by using a smaller chunk of top-window size with a good choice of weight combinations may lead to a better quality solution.

From a comparison of the performance of the presented approach with other methods as applied to the Toronto benchmark datasets, it is evident that it does not perform extremely well. However, it should be noted that the presented approach is purely a constructive approach and yet it still managed to obtain a number of best results for some instances among different types of approaches, including constructive, hyper-heuristics and improvement approaches. We fixed the rate of increment at 0.1 while updating difficulty of scheduling an exam. We plan to investigate different dynamic strategies to update this weight. Furthermore, more graph colouring heuristics can be employed with the heuristic modifier in order to improve the ordering of examinations and this can be incorporated or enhanced with a hyper-heuristic approach in identifying the best combination of weights for each heuristic.

As shown by Burke et al. (2007), using constructive heuristics might not be able to locate global optima. Thus, the situation was resolved by employing perturbative heuristics on the timetable solution generated to improve it further. Due to this reason, we intend to look into this possibility, and particularly look into the possibility of using the results from our presented approach as initial solutions into multistage approaches and see whether any improvement to the solution quality can be obtained.

The experiments using the twelve problem instances of ITC2007 employ several combinations of weights with top-window sizes of 3 and 5. The heuristic modifier is increased using additive and exponential with dynamic modification of the heuristic modifier value. Table 7
                            illustrates the best penalty value obtained from 50 runs and each solution is provided with the information of weight combination and algorithmic approach. In Table 7, we can see diverse patterns of the weight combination of each heuristic for different instances. About half of the problem instances obtained good quality solutions when the weight of the SD is high. Meanwhile, the weight LD and HM are varied in specific ways. Since the ITC2007 benchmark datasets are tested with only certain parameter settings, unlike the Toronto benchmark datasets, and with time limitation, these datasets might not show the exact pattern of the whole weight behaviour. Moreover, the ITC2007 benchmark datasets represent a capacitated timetabling problem and therefore, they differ from the Toronto benchmark datasets in terms of various hard and soft constraint requirements.

So far, most of the ITC2007 approaches have concentrated on the multiple phases of solution that construct and improve the solution quality in sequence. The adaptive linear combination approach in this paper is presented as a purely constructive approach that iteratively constructs the examination timetable. In order to make a fair comparison, the constructed solutions are then improved using an approach introduced by McCollum, McMullan, Parkes, Burke, and Abdullah (2009) that employed a reheat mechanism to the great deluge algorithm. This approach is an effective method that has obtained two best results out of the twelve problem instances whilst other problem instances are close to the best.


                           Table 8
                            shows the comparison of the best penalty values of the adaptive linear combination approach compared with other approaches from the competition and post-competition. The results of the constructed solutions of the adaptive linear combination approach cannot beat the best results obtained so far and are quite far from them. However, the constructed solutions of the adaptive linear combination approach are able to produce a feasible solution for all problem instances and are better than some of the approaches from the competition and post-competition. The proposed approach is able to produce better results compared with Müller et al. (2008) for Exam_10, Turabieh and Abdullah (2011) for Exam_4 and also Burke et al. (2012) for Exam_4, Exam_6 and Exam_8. On the other hand, some of the approaches do not have solutions for some of the problem instances for example Burke et al. (2012) and Turabieh and Abdullah (2011) do not have solution for Exam_9, Exam_10, Exam_11 and Exam_12.

When comparing the previous results with our improved solutions, it can be seen that the method obtained promising results such as Exam_3 and Exam_11 where they are placed as the third and second best approaches. On the other hand, the results of other problem instances did not perform well. On average, the approach is placed as the fifth best out of eleven approaches published in the literature. Note that the results are obtained with only one run for comparison purposes, as opposed to other approaches that were obtained with multiple runs.

@&#CONCLUSION@&#

In this paper, an adaptive linear combination of heuristics with a heuristic modifier under the framework of adaptive strategies has been proposed for solving examination timetabling problems. Two graph colouring heuristics with a heuristic modifier are employed with different weights for each parameter. Each parameter is normalised in order to simply generalise the implemented problem data. A difficulty_score is used to determine the ordering of the examinations and the most difficult examination with the highest difficulty_score is scheduled first based on two strategies. This approach is tested with single and multiple heuristics with and without a heuristic modifier on the Toronto benchmark datsets while the ITC2007 benchmark datasets are tested with only multiple heuristics with heuristic modifier. The results show that by combining multiple heuristics with a heuristic modifier, good solution quality can be obtained. Furthermore, the results from the combination of LDSDHM are comparable to the results of other constructive approaches published in the literature within the Toronto benchmark problems. Meanwhile, the results on the highly constrained ITC2007 problems are feasible and some are comparable to the previous approaches. In this study, the combination of weight values that are invoked for the heuristics and heuristic modifier could significantly change the examination ordering based on the difficulty score value. It was found that by changing the weight values of the heuristic and heuristic modifier, good approximate solutions could be obtained. We also saw that the best top-window size to use for this approach is six. It is concluded that this approach is simple and effective, and hence has potential for practical use.

@&#REFERENCES@&#

