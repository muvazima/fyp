@&#MAIN-TITLE@&#A multi-level clustering scheme based on cliques and clusters for wireless sensor networks

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           This paper presents a hierarchical scheme for sensor networks clustering.


                        
                        
                           
                           The solution proposed combines clustering into cliques and clusters.


                        
                        
                           
                           It takes into account the sizes of cliques and clusters for scalability and energy saving purposes.


                        
                        
                           
                           It improves the end-to-end delay compared to existing works.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Wireless sensor networks

Hierarchical scheme

Clique

Cluster

QoS

Energy

@&#ABSTRACT@&#


               
               
                  Wireless sensor networks (WSNs) have a wide range of applications in our lifetime. Indeed, WSNs perform a various missions and tasks in odor localization, firefighting, medical service, surveillance and security. In order to accomplish these tasks, the sensors have to perform partitioning protocols to form an organization into clusters and cliques. The hierarchical clustering is the key solution for WSNs to deal with the scalability problems in a network composed of millions of nodes. In this paper, a new hierarchical partitioning scheme is presented, named MCCC. It is cliques and clusters based hierarchical scheme that takes into account the size of cliques and clusters, it also minimizes the number of hops between the cluster head and its nodes. The proposed scheme is motivated by the need to have minimum and maximum size for cliques and clusters. This hierarchical scheme is proposed to respond to the energy and memory constraints for WSNs.
               
            

@&#INTRODUCTION@&#

Wireless sensor networks (WSNs) have started to receive growing attention from the research and engineering communities in recent years. Potential applications of WSNs include detecting and countering pollution in coastal areas, performing oceanic studies of bird/fish migration and weather phenomena, detection and prevention of forest fires, deterring terrorist threats to ships in ports, destruction of mines in different environments facilitating/conducting urban search and rescue (USAR), detecting suspiciously active chemical/biological agents, etc., [1].

Sensor nodes are generally equipped with data processing and communication capabilities. The sensing circuit measures parameters from the environment surrounding the sensor and transforms them into an electric signal. Processing such a signal reveals some properties about objects located and/or events happening in the vicinity of the sensor. The sensor networks generally employ a large number of miniaturized devices that have the task of measuring ambient conditions and reporting such measurements to some sinks nodes using wireless communication links. Each sensor has an on-board radio that can be used to communicate with its neighbors and to send the collected data to sinks which communicate the aggregated information to a processing center, [1,2]. Due to the resource limitation, a solution for an application in WSNs should take into account the limited capabilities of these devices by using a few amount of memory and energy, whilst maximize the life time [3].

WSNs have the capability to do their tasks in unattended and rough environments where the contemporary human-in-the-loop cannot do the task due to the risk, inefficiency and infeasibility. Therefore, sensor nodes are deployed randomly in the area by a relatively uncontrolled means, and together form a network in an ad hoc manner with hundreds or even thousands of sensor nodes will be involved [4,5]. To do these tasks, sensor nodes have to perform self-organization protocols by partitioning the network into cliques and clusters to achieve the scalability, enhance the lifetime of the network and improve the QoS. A clique is a network where every node can communicate directly with every node, the size of a clique is the number of nodes in it. In a clique, the cluster head will be automatically at one hop from the sensor nodes of its clique. In each clique/cluster, the cluster head should register the identities and manage the tasks of routing, data aggregation and queries dispatch with the members of its cluster [6,7]. Therefore, if the number of nodes of the clique/cluster is very large, the cluster head needs a large memory capacity and high amount of energy capacity to manage its members for a given period of time. Since this is not always feasible, we should introduce the size of the cluster/clique as a new parameter in clustering protocols [8]. The hierarchical routing or cluster based routing protocols have been proposed in order to meet the energy efficiency and scalability requirement of the WSNs. The main issue is forming sub network clusters, encouraging multi-hop transmission and enabling data fusion [9].

Partitioning of WSNs plays a vital role in improving network performance on the resource management as routing delay, bandwidth consumption and throughput. After clustering, the network is divided into disjoint clusters. The goal therefore of the clustering is to organize sensor nodes into cliques and/or clusters to facilitate certain network operations such as data aggregation and routing. Indeed, clustering allows to split data transmission into intra-cluster within a cluster, and inter-cluster between clusterheads and the sink. This separation leads to significant energy saving since the radio unit is the major energy consumer in a sensor node [8].

Clustering is usually adopted by the research community to fulfill the scalability purpose and typically to reach very high energy efficiency and prolong the lifetime of the WSN. In addition, the clustering has other side benefits and the corresponding objectives [10]. Grouping the nodes into cluster limits the scope of intercluster interactions to clusterheads and avoids redundant exchange of messages among sensor nodes consequently it conserves the communication bandwidth. It can also be used to localize the route setup within the cluster and therefore decrease the size of the routing table stored at each node in the network. Besides, clustering can stabilize the network topology at the level of sensors and thus cuts on topology maintenance overhead. Sensors would care only for connecting with their clusterheads and would not be affected by changes at the level of inter-cluster head tier. The corresponding hierarchical routing and data gathering protocols imply cluster-based organization of the sensor nodes in order that data fusion and aggregation are possible, thus leading to significant energy savings [11].

In this paper, a new partitioning scheme is proposed; this scheme is motivated by the need to have a minimum and a maximum size for cliques and clusters. In fact, this size of clusters and cliques has a direct effect on the energy consumption [11]. The cluster head must register the identities of all nodes in its cluster. But that it may not be always feasible for large cluster because sensors have a limited memory capacity. In addition, the energy consumed to manage a large number of nodes will be very high, which involves a large number of election algorithms. Clustering with taking into account the size of cliques and clusters avoids a significant number of election algorithms because when the cluster/clique has a moderate size the cluster head may survive longer to manage its cluster. Within the hierarchical scheme the sensor nodes are organized into levels. In each level, there are normal sensor nodes and cluster heads of sensor nodes. A normal sensor node in a level L cannot be considered as a normal sensor for level 
                        
                           L
                           +
                           1
                        
                     . The cluster heads in a level L are considered for the clustering procedure in level 
                        
                           L
                           +
                           1
                        
                      
                     [8,12]. We call the super cluster head the cluster head of last level. The super cluster head manages the nodes via the normal cluster heads.

In the hierarchical partitioning methods available in the literature (see the next section), the cluster head can belong to another different geographic area in term of number of hops compared to its nodes. Therefore, the change of messages between the cluster head and its nodes is time-consuming. In our algorithm, we impose on the cluster head to belong to the same region by partitioning the network into cliques at the root level (level 0). Then, we partition the network with a hierarchical scheme into cliques, each clique will have a size between k and 
                        
                           2
                           k
                        
                     . The parameter k is a positive integer that refers to the size of the clusters and cliques. More precisely, the clusters and cliques will have size according to the parameter k, exactly sizes between k and 
                        
                           2
                           k
                        
                     . The choice of k depends on the memory capacity of the sensor nodes and the energy capacity of the cluster heads. If the sensor nodes can store a great number of nodes and the cluster heads has enough energy to manage a great number of nodes therefore k can be chosen large. Otherwise, it should be chosen small. To generate these cliques of level 0 we must goes through three steps in which we try to have a maximal cliques having size upper than k. The cluster head will be automatically at one hop to nodes, so every node can communicate directly with every node. In another step the cliques of the level 0 are divided into cliques having sizes between k and 
                        
                           2
                           k
                        
                     . This partitioning is repeated hierarchically every time that the number of cluster heads obtained is greater than 
                        
                           2
                           k
                        
                     . The procedure is repeated for the cluster heads, which are in the same clique to form new cliques for the next level. Once this procedure is finished, another procedure to maintain the hierarchy of the scheme is invoked; it is a hierarchical partitioning into clusters.

The remainder of this paper is organized as follows: the next section presents a brief description of related works. The Section 3 describes the contributions and the objectives. Section 4 presents the model of the sensor network. In Section 5, the proposed protocol is presented. In Section 6 we present how to manage the dynamicity of nodes for the proposed protocol. In Section 7, a discussion about the worst case message complexity is given. The evaluation of the performances of the presented scheme is presented in Section 8. The last section is for the conclusion and the suggestion for the future works.

@&#RELATED WORKS@&#

A growing body of research devoted to the clustering problems for wireless sensor networks is proposed in the literature. That is, because partitioning sensor nodes into cliques and clusters is an effective topology control approach which can increase network scalability and lifetime. In order to maintain a certain degree of service quality, a reasonable system lifetime and a reasonable end-to-end delay, energy needs to be optimized at every stage of the system operation.

The clustering protocols available in the literature can be partitioned into two categories, centralized clustering and distributed clustering. Centralized clustering protocols require the global network knowledge. Banerjee and Khuller developed a hierarchical clustering scheme based on a spanning tree [8]. This method requires the knowledge of network topology, which may not be always available. Furthermore, this solution aims to partition the nodes into clusters with sizes between k and 
                        
                           2
                           k
                        
                     , but does not take into account the delay to delay conditions to improve the communication between the clusterhead and its nodes and between the nodes and the super clusterhead.

Distributed clustering algorithms usually make decisions based on localized information [7,11,13–15]. In general, distributed clustering schemes introduce less communication cost compared to centralized schemes. Sun and All proposed a secure distributed cluster formation protocol to organize sensor networks into mutually disjoint cliques [11]. In this method, the authors proposed a Cluster-First, secure and distributed cluster formation protocol. By exchanging information with 1-hop neighbors, normal sensor nodes are divided into mutually disjoint cliques. However, this solution is not scalable for WSNs, it is not hierarchical and does not take into account the size of the cliques. If the size of the clique is too large the cluster head cannot register all the identities of its cluster. Furthermore, the managing of its members will be energy-consuming. That is implying that the cluster head will die in a short time. The Linked Cluster Algorithm (LCA) proposed in [6] constructs clusters using the node ID. The Weighted Clustering Algorithm (WCA) constructs clusters based on several node properties, including the number of neighbor nodes, the transmission power, the battery-life and the node mobility [16]. The distributed Clustering Algorithm (DCA) constructs clusters based on the weight associated with each node [7]. The distributed and Mobility-Adaptive Clustering Algorithm (DMAC) improves DCA by adding mobility support [7]. The Max–Min d-cluster Algorithm constructs clusters consisting of the nodes that are not more than d hops away from the clusterhead [17]. Some other clustering protocols use probability based approaches and heuristics to elect clusterheads [12,18–20]. All these efforts are not a hierarchical control for the clustering. Also, they did not deal with the memory capacity of the cluster head. In [21] the authors propose a Position-based Aggregator Node Election (PANEL) in WSNs. PANEL is an energy-efficient protocol that ensures load balancing in the sense that each node is elected aggregator (CH) nearly equally frequently. However, this protocol uses the geographical position information of the nodes to determine which of them should be the aggregator, which is a restriction in WSNs, since the geographical position is difficult to obtain without the use of GPS-like hardware or central coordination. In [22], the authors propose a new energy-efficient clustering approach (EECS) for single-hop wireless sensor networks, which is more suitable for the periodical data gathering applications. EECS extends LEACH algorithm by dynamic sizing of clusters based on cluster distance from the base station. EECS protocol does not consider the structural characteristics of network topology and thus cluster heads are elected on the basis of residual energy. Youssef et al. [23] proposed MOCA, a randomized, distributed multi-hop overlapping clustering algorithm for organizing the sensors into overlapping clusters. However, the major goal of the clustering process is to ensure that each node is either a cluster head or within h hops of at least one cluster head, where h is a preset cluster radius. The authors in [24] proposed a novel distributed clustering algorithm where CHs are elected following a three-way message exchange between each sensor and its neighbors.

In [25] the authors proposed a solution that depends on the central base position. The protocol forms a distributed sensor nodes into spatially uneven clusters according to local network conditions, the nodes nearby the central base are grouped into smaller clusters, while the distant nodes are clustered into larger. This solution deals with the memory capacities of some cluster heads, however other cluster heads may have clusters with a very large size, which poses scalability problems. Furthermore, this solution is not hierarchical.

A preliminary version of this paper appears in [26]. In this paper I detail and analyze the solution and I show how to manage the dynamicity of nodes.

This paper presents a new hierarchical scheme for sensor networks partitioning using only local information. The objective of our clique/cluster formation protocol is, first, to divide the sensor nodes in a sensor network into mutually disjoint cliques, so that all the nodes in the same cliques can directly communicate with each other. Each node should individually compute its view of clique based on the information exchanged with its 1-hop neighbors. After, a second procedure for partitioning hierarchically the cliques into sub cliques and clusters having size between k and 
                        
                           2
                           k
                        
                      is invoked. The new parameter k is introduced to form cliques and clusters having size between k and 
                        
                           2
                           k
                        
                     , in order to deal with the resources conditions for sensor nodes which have low memory and energy capacities.

Military applications are very closely related to the concept of wireless sensor networks. WSNs can be an integral part of military command, control, communications, computing, intelligence, surveillance, reconnaissance and targeting systems. In a deployment for military applications it is required for the sensor nodes to self-organize themselves in a scheme where there is a hierarchy in decision making. That is, there is a set of heads that manage sets of nodes in a level L and the heads of level L are managed by a set of nodes of level 
                        
                           L
                           +
                           1
                        
                      such that the number of heads in a level 
                        
                           L
                           +
                           1
                        
                      is less than the number of heads in a level L, exactly like in the military systems. Therefore, the decision making is organized in a hierarchy. In military application the heads are responsible for small groups having a reasonable size; the reasonable sizes are for efficiency and security purposes. This which explain the need to have cliques and cluster with sizes between k and 
                        
                           2
                           k
                        
                      and the need to have a hierarchy in decision making in clustering protocols. Furthermore, within our proposed scheme, in the first levels, the cluster head will be automatically at one hop to its members. And the clusters heads are also at one hop between them. This is improving the delay to delay conditions. Our protocol is the first that gives a partitioning scheme with such characteristics. The proposed distributed algorithm is implemented using OPNET (Optimum Performance Network). I present simulation results and comparison with related works to show the performance of this protocol.

WSN comprises a large number of sensor nodes, dispersed in a sensor field. We assume that n is the total number of sensor nodes. In addition, no assumptions are made on the network diameter and network density. We consider the following properties of the sensor network:
                        
                           •
                           Sensor nodes are static: deployed to perform measurements (temperature …).

Initially all the sensor nodes are charged with the same amount of energy.

Links between nodes are bidirectional.

Each sensor has an Id known to its neighbors and the sensor itself.

The computation and communication capabilities are the same for all network nodes. Moreover, it is not feasible to recharge the batteries of nodes.

Sensor nodes do not require GPS-like hardware. So, they are not location aware.

All sensors have the same sensing range.

The proposed hierarchical clustering algorithm is divided into four major steps. The steps 1, 2 and 3 are used to obtain the cliques of the root level (Level 0) whilst the last step invokes a hierarchical partitioning, firstly into cliques and after into clusters.
                        
                           •
                           Step 1: In this step, we calculate the maximal cliques or a group of cliques taking into account the parameter k, during this phase we try to avoid if possible cliques of size less than k.

Step 2: In this step, each node exchanges its local maximum cliques with its neighbors, and updates its maximum clique according to its neighbor nodes local maximum cliques.

Step 3: In this step, each node exchanges the updated information about the clique with its neighbors, and derives its final clique. At the end of this step each node will belong to one clique.

Step 4: This last step consists of two stages, the stage 1 called Hierarchical Partitioning into Cliques in Depth (HPCD) and the stage 2 named Hierarchical Partitioning into Clusters in Width (HPCW). In the last step, we partition the network hierarchically. Starting from the cliques obtained after Step 1, 2 and 3, a hierarchical partitioning procedure is invoked to make cliques and clusters of size between k and 
                                 
                                    2
                                    k
                                 
                              . Firstly, we partition the network hierarchically into cliques, after we partition hierarchically into clusters.

Next the steps 1, 2, 3 are explained in detail using the example shown in Fig. 1
                      which presents a sensor network with 13 sensor nodes. Fig. 2
                      shows the results of cliques formation with 
                        
                           k
                           =
                           4
                        
                     . Fig. 3
                      shows the results of cliques formation in Level 0, with 
                        
                           k
                           =
                           3
                        
                     . I give after explanation and details about the step 4.


                     Step 1
                  

During the first step, each node i can acquire a neighbor list 
                        
                           
                              
                                 L
                              
                              
                                 i
                              
                           
                        
                      that holds the IDs of its one-hop neighbor nodes, the node i exchanges 
                        
                           
                              
                                 L
                              
                              
                                 i
                              
                           
                        
                      with its neighbors by sending a message to them.

After receiving the lists that we note as 
                        
                           Lvi
                           =
                           
                              
                                 
                                    
                                       
                                          L
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          L
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          L
                                       
                                       
                                          n
                                       
                                    
                                 
                              
                           
                        
                     , each node i can build a neighbor matrix NM that records the connectivity between its neighbor nodes. Each element in neighbor matrix is either 1 or 0. The element in the ith row and jth column of the neighbor matrix is 1 if node i contains node j in its neighbor list, 0 otherwise. We assume that the message exchange is guaranteed to reach its destination. Such that each node then symmetries its neighbor matrix by considering bidirectional links.

Based on node i’s neighbor matrix, we can construct a graph 
                        
                           Gi
                           =
                           Vi
                           ,
                           Ei
                        
                     , where Vi consists of node i and its neighbors, and Ei consists of the bidirectional edges between nodes in Vi. It is well known that finding the maximum clique in a random graph is an NP-complete problem [27].

For node i, it is also NP-complete [28] to find the maximum clique containing node i in Gi. To reduce the computation complexity, we propose a heuristic algorithm for node i to compute its local maximum clique, as shown in Algorithm 1. The aim of this step is to calculate cliques with size as possible greater than or equal to k. The node having the same neighbors with its neighbors will have one clique, and a group of cliques for node that has some neighbors different with the neighbors of its neighbors. A node in clique greater than k adds itself to another clique having a size less than k, else if all sizes are superior than k, the algorithm seeks the maximal clique. Fig. 2 shows an example where the node 1 chooses the clique 
                        
                           
                              
                                 
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                      because 
                        
                           k
                           =
                           4
                        
                      and 
                        
                           
                              
                                 
                                    
                                       
                                          
                                             2
                                             ,
                                             3
                                             ,
                                             4
                                          
                                       
                                    
                                 
                              
                           
                           <
                           k
                        
                     . But in Fig. 3, with 
                        
                           k
                           =
                           3
                        
                      because 
                        
                           
                              
                                 
                                    
                                       
                                          
                                             2
                                             ,
                                             3
                                             ,
                                             4
                                          
                                       
                                    
                                 
                              
                           
                           ⩽
                           3
                        
                     , the node 1 chooses the second clique 
                        
                           
                              
                                 
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                      since it is maximal.

In order to simplify the explanation of the Algorithm 1, we divide it into two parts. Part 1 begins from line 1 and finishes at line 8 and Part 2 begins from line 9 and finishes at line 29.


                     
                        Part 1
                     
                  

Initially, all neighbors of node i are included in 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                        
                      (line 1), and 
                        
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                        
                      contains only node i itself (line 1). 
                        
                           
                              
                                 L
                              
                              
                                 i
                              
                           
                        
                      contains node i’s one-hop neighbor nodes that are authorized to be in the same clique as node i. In each round, node i chooses one neighbor node and adds it into its local maximum clique 
                        
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                        
                      (line 5 and line 6). Node i keeps a set 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                        
                      containing its neighbor nodes that are eligible (line 7) to be chosen in the next round. In the first round, node i calculates the number of common neighbors between itself and each neighbor, and finds a neighbor p with the maximum common neighbors 
                        
                           
                              
                                 
                                    
                                       
                                          L
                                       
                                       
                                          i
                                       
                                    
                                    ∩
                                    
                                       
                                          L
                                       
                                       
                                          p
                                       
                                    
                                 
                              
                           
                        
                      (line 4). If it finds more than one node with the same maximum cliques it chooses the node p that has the lowest ID. Node i also eliminates the nodes that are not directly connected with p from the set 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                        
                      (line 7). In the second round, from the updated 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                        
                     , node i finds the neighbor node that has the maximum number of common neighbors with all nodes in 
                        
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                        
                      (i.e., nodes i and p). Node i then eliminates this node from 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                        
                      and adds it into 
                        
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                        
                     . Those nodes that are not directly connected with this node will then be eliminated from 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                        
                     . Node i continues this process until the set 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                        
                      is empty.

Let us see how Part 1 works on node 1 using the example in Fig. 1. Initially, 
                        
                           
                              
                                 C
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 
                                    1
                                 
                              
                           
                           ,
                           
                              
                                 L
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                    ,
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                      and 
                        
                           
                              
                                 S
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                    ,
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                     . In each round, node 1 has the maximum of common neighbors with 
                        
                           z
                           ∈
                           
                              
                                 
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                      equal to 4 neighbors 
                        
                           
                              
                                 L
                              
                              
                                 1
                              
                           
                           ∩
                           
                              
                                 L
                              
                              
                                 z
                              
                           
                           =
                           
                              
                                 L
                              
                              
                                 1
                              
                           
                           -
                           
                              
                                 
                                    1
                                    ,
                                    z
                                 
                              
                           
                        
                     . In each round we add z to 
                        
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                        
                      and we delete it from 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                        
                     , so the clique of node 1 is 
                        
                           
                              
                                 C
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                     . As discussed before if the node finds the same maximum number of common neighbors with node 1, we prefer the lowest ID to break the tie, then with the same process we find 
                        
                           
                              
                                 C
                              
                              
                                 2
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 3
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 4
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                           ,
                           
                              
                                 C
                              
                              
                                 5
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 6
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 7
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                           ,
                           
                              
                                 C
                              
                              
                                 8
                              
                           
                           =
                           
                              
                                 
                                    8
                                    ,
                                    9
                                 
                              
                           
                           ,
                           
                              
                                 C
                              
                              
                                 9
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 11
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 12
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 13
                              
                           
                           =
                           
                              
                                 
                                    9
                                    ,
                                    11
                                    ,
                                    12
                                    ,
                                    13
                                 
                              
                           
                           ,
                           
                              
                                 C
                              
                              
                                 10
                              
                           
                           =
                           
                              
                                 
                                    9
                                    ,
                                    10
                                 
                              
                           
                        
                     .

In fact, some nodes are not allowed to continue the rest of the algorithm, there are only a few nodes that can continue Part 2. Those are the nodes that will have a group of cliques; they will enter the loop of (line 14). In our example, the nodes that are considered in Part 2 are 1, 8, and 9. First, we explain Part 2, after we provide an example with the nodes 1 and 9 for further clarifications.


                     
                        Part 2
                     
                  

In Part 2, the node i computes in 
                        
                           
                              
                                 L
                              
                              
                                 m
                              
                           
                        
                      (line 12) the neighbors that are in the clique and do not have elsewhere of this clique a neighbor in common with i. After, in line 13 it computes in 
                        
                           
                              
                                 L
                              
                              
                                 t
                              
                           
                        
                      the list of neighbors that it can have with them another clique. It checks if it can have another clique with the instruction of line 14, then it joins the loop, and it performs the same execution of the Part 1 with updated variables (line 25–28), in each round of this loop. Each time it finds a new clique, it adds it into the group of clique 
                        
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                        
                      (line 24).

Let us see how Part 2 works using node 1 as an example. We have, 
                        
                           
                              
                                 L
                              
                              
                                 m
                              
                           
                           =
                           
                              
                                 
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                           ,
                           
                              
                                 L
                              
                              
                                 t
                              
                           
                           =
                           
                              
                                 
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                     , and 
                        
                           
                              
                                 L
                              
                              
                                 si
                              
                           
                           =
                           
                              
                                 L
                              
                              
                                 i
                              
                           
                           =
                           
                              
                                 
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                      (line 2) as 
                        
                           
                              
                                 L
                              
                              
                                 t
                              
                           
                           
                           ≠
                           
                           
                              
                                 L
                              
                              
                                 si
                              
                           
                        
                      the node 1 enters the loop in line 14. In lines 15, 16, and 17 we save the variables to be used in the next round. Using the same process of Part 1 we get the new clique 
                        
                           
                              
                                 C
                              
                              
                                 newof
                                 1
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                      and the node adds it to the group 
                        
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          C
                                       
                                       
                                          newof
                                          1
                                       
                                    
                                    =
                                    
                                       
                                          
                                             1
                                             ,
                                             2
                                             ,
                                             3
                                             ,
                                             4
                                          
                                       
                                    
                                 
                              
                           
                        
                     . In the second round of the loop (line 14), it finds 
                        
                           
                              
                                 L
                              
                              
                                 m
                              
                           
                           =
                           ø
                        
                      and 
                        
                           
                              
                                 L
                              
                              
                                 t
                              
                           
                           =
                           
                              
                                 
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                     . We have 
                        
                           
                              
                                 L
                              
                              
                                 si
                              
                           
                           =
                           
                              
                                 
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                      as 
                        
                           
                              
                                 L
                              
                              
                                 t
                              
                           
                           =
                           
                              
                                 L
                              
                              
                                 si
                              
                           
                        
                      the node 1 does not enter in the loop. Node 8 and 9 obtain 
                        
                           
                              
                                 G
                              
                              
                                 9
                              
                           
                           =
                           
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          9
                                       
                                    
                                    ,
                                    
                                       
                                          C
                                       
                                       
                                          newof
                                          9
                                       
                                    
                                    =
                                    
                                       
                                          
                                             9
                                             ,
                                             10
                                          
                                       
                                    
                                 
                              
                           
                        
                     , 
                        
                           
                              
                                 G
                              
                              
                                 8
                              
                           
                           =
                           
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          8
                                       
                                    
                                    ,
                                    
                                       
                                          C
                                       
                                       
                                          newof
                                          8
                                       
                                    
                                    =
                                    
                                       
                                          
                                             8
                                             ,
                                             9
                                          
                                       
                                    
                                 
                              
                           
                        
                      using the same process.


                     Step 2
                  


                     
                        
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                        
                      denotes a clique of node i that has a single clique and 
                        
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                           =
                           
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          i
                                          ,
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          C
                                       
                                       
                                          i
                                          ,
                                          2
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          C
                                       
                                       
                                          i
                                          ,
                                          m
                                       
                                    
                                 
                              
                           
                        
                      denotes the group of m cliques of node i. In the case where node i has m cliques, i belongs to m cliques. In this step the node chooses the best clique with running the Function 1 or Function 2. This best clique depends on the parameter k. An edge node is a node that has a group of cliques, and a center node is a node that has a single clique. A sharp clique is a clique where all member nodes have the same neighbors.

The edge node i composes the sharp cliques in each group of cliques 
                        
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                           =
                           
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          i
                                          ,
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          C
                                       
                                       
                                          i
                                          ,
                                          2
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          C
                                       
                                       
                                          i
                                          ,
                                          m
                                       
                                    
                                 
                              
                           
                        
                      based on the list of neighbors 
                        
                           
                              
                                 L
                              
                              
                                 j
                              
                           
                           ,
                           1
                           ⩽
                           j
                           ⩽
                           m
                        
                      and by checking whether a node may have at least two cliques. I introduced the definitions, edge node, center node and sharp clique because the node does not have a global view on the network and it does not know what is the decision of non-neighbor nodes that may form with its neighbors a clique, it does not know if these nodes will join the clique or not.

For example, a node that has the group 
                        
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          1
                                          ,
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          G
                                       
                                       
                                          1
                                          ,
                                          2
                                       
                                    
                                 
                              
                           
                        
                      where 
                        
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 1
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                     , and 
                        
                           
                              
                                 C
                              
                              
                                 1.2
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                     , the sharp cliques are 
                        
                           
                              
                                 cn
                              
                              
                                 1
                                 ,
                                 1
                              
                           
                           =
                           
                              
                                 
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                      and 
                        
                           
                              
                                 cn
                              
                              
                                 1
                                 ,
                                 2
                              
                           
                           =
                           
                              
                                 
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                     . For node 5 the sharp clique is 
                        
                           
                              
                                 cn
                              
                              
                                 5
                              
                           
                           =
                           
                              
                                 
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                 
                              
                           
                        
                     . Obviously, the edge node will have at least two sharp cliques. We can write the sharp cliques of node i under the form: 
                        
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                           =
                           
                              
                                 
                                    
                                       
                                          c
                                       
                                       
                                          i
                                          ,
                                          1
                                       
                                    
                                    ∪
                                    
                                       
                                          cn
                                       
                                       
                                          i
                                          ,
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          c
                                       
                                       
                                          i
                                          ,
                                          2
                                       
                                    
                                    ∪
                                    
                                       
                                          cn
                                       
                                       
                                          i
                                          ,
                                          2
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          c
                                       
                                       
                                          i
                                          ,
                                          m
                                       
                                    
                                    ∪
                                    
                                       
                                          cn
                                       
                                       
                                          i
                                          ,
                                          m
                                       
                                    
                                 
                              
                           
                        
                      where 
                        
                           
                              
                                 c
                              
                              
                                 i
                                 ,
                                 p
                              
                           
                           ∪
                           
                              
                                 cn
                              
                              
                                 i
                                 ,
                                 p
                              
                           
                           =
                           Ci
                           ,
                           p
                        
                      and 
                        
                           
                              
                                 c
                              
                              
                                 i
                                 ,
                                 p
                              
                           
                           ∩
                           
                              
                                 cn
                              
                              
                                 i
                                 ,
                                 p
                              
                           
                           =
                           ø
                        
                     , for all 
                        
                           p
                           ,
                           1
                           ⩽
                           p
                           ⩽
                           m
                        
                     , and where 
                        
                           
                              
                                 cn
                              
                              
                                 i
                                 ,
                                 m
                              
                           
                        
                      is a sharp clique.

The nodes perform the ordering using the Function 1 if the size of all sharp cliques are greater than k (i.e. For all 
                        
                           j
                           ,
                           
                              
                                 cn
                              
                              
                                 i
                                 ,
                                 j
                              
                           
                           >
                           k
                           )
                        
                     . But if there is at least one sharp clique has size less than k, the node will perform the ordering using Function 2.
                        
                           
                              
                              
                                 
                                    
                                       Function 1:
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   C
                                                
                                                
                                                   i
                                                   ,
                                                   a
                                                
                                             
                                             ≺
                                             
                                                
                                                   C
                                                
                                                
                                                   i
                                                   ,
                                                   b
                                                
                                             
                                          
                                        if and only if:
                                 
                                 
                                    A: 
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            a
                                                         
                                                      
                                                   
                                                
                                             
                                             <
                                             
                                                
                                                   
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            b
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                        OR
                                 
                                 
                                    B: 
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            a
                                                         
                                                      
                                                   
                                                
                                             
                                             =
                                             
                                                
                                                   
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            b
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       , but 
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   a
                                                
                                             
                                             <
                                             
                                                
                                                   c
                                                
                                                
                                                   b
                                                
                                             
                                          
                                       ,
                                 
                                 
                                    where 
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   a
                                                
                                             
                                             =
                                             min
                                             
                                                
                                                   
                                                      ai
                                                      |
                                                      ai
                                                      ∈
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            a
                                                         
                                                      
                                                      ∧
                                                      ai
                                                      
                                                      ∉
                                                      
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            b
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    and 
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   b
                                                
                                             
                                             =
                                             min
                                             
                                                
                                                   
                                                      bi
                                                      |
                                                      bi
                                                      ∈
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            b
                                                         
                                                      
                                                      ∧
                                                      bi
                                                      
                                                      ∉
                                                      
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            a
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                        OR
                                 
                                 
                                    C: 
                                          
                                             
                                                
                                                   cn
                                                
                                                
                                                   i
                                                   ,
                                                   a
                                                
                                             
                                             =
                                             
                                                
                                                   cn
                                                
                                                
                                                   i
                                                   ,
                                                   b
                                                
                                             
                                             ,
                                             buta
                                             <
                                             b
                                          
                                       .
                                 
                              
                           
                        
                     
                     
                        
                           
                              
                              
                                 
                                    
                                       Function 2:
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   C
                                                
                                                
                                                   i
                                                   ,
                                                   a
                                                
                                             
                                             ≺
                                             
                                                
                                                   C
                                                
                                                
                                                   i
                                                   ,
                                                   b
                                                
                                             
                                          
                                        if and only if:
                                 
                                 
                                    A: 
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            a
                                                         
                                                      
                                                   
                                                
                                             
                                             ⩾
                                             k
                                          
                                        and 
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            b
                                                         
                                                      
                                                   
                                                
                                             
                                             <
                                             k
                                          
                                        OR
                                 
                                 
                                    B: 
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            a
                                                         
                                                      
                                                   
                                                
                                             
                                             <
                                             k
                                          
                                        and 
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            b
                                                         
                                                      
                                                   
                                                
                                             
                                             <
                                             k
                                          
                                        and 
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            a
                                                         
                                                      
                                                   
                                                
                                             
                                             <
                                             
                                                
                                                   
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            b
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                        OR
                                 
                                 
                                    C: 
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            a
                                                         
                                                      
                                                   
                                                
                                             
                                             =
                                             
                                                
                                                   
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            b
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       , but 
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   a
                                                
                                             
                                             <
                                             
                                                
                                                   c
                                                
                                                
                                                   b
                                                
                                             
                                          
                                       ,
                                 
                                 
                                    where 
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   a
                                                
                                             
                                             =
                                             min
                                             
                                                
                                                   
                                                      ai
                                                      |
                                                      ai
                                                      ∈
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            a
                                                         
                                                      
                                                      ∧
                                                      ai
                                                      
                                                      ∉
                                                      
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            b
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    and 
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   b
                                                
                                             
                                             =
                                             min
                                             
                                                
                                                   
                                                      bi
                                                      |
                                                      bi
                                                      ∈
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            b
                                                         
                                                      
                                                      ∧
                                                      bi
                                                      
                                                      ∉
                                                      
                                                      
                                                         
                                                            cn
                                                         
                                                         
                                                            i
                                                            ,
                                                            a
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                        OR
                                 
                                 
                                    D: 
                                          
                                             
                                                
                                                   cn
                                                
                                                
                                                   i
                                                   ,
                                                   a
                                                
                                             
                                             =
                                             
                                                
                                                   cn
                                                
                                                
                                                   i
                                                   ,
                                                   b
                                                
                                             
                                             ,
                                             buta
                                             <
                                             b
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

To clarify this step further we take an example (Fig. 1) with the node 1. We unroll the ordering with node 1 for both cases (Function 1 and Function 2). In the case where 
                        
                           k
                           =
                           2
                        
                     , regarding the sharp cliques, the node 1 will choose the Function 1. But if we take 
                        
                           k
                           =
                           4
                        
                     , regarding the sharp cliques, the node 1 will run the Function 2. We start with the first case 
                        
                           k
                           =
                           2
                        
                     . Node 1 has a group of cliques 
                        
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 
                                    
                                       
                                          C
                                       
                                       
                                          1
                                          ,
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          C
                                       
                                       
                                          1
                                          ,
                                          2
                                       
                                    
                                 
                              
                           
                        
                      where 
                        
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 1
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 
                                    
                                       
                                          
                                             1
                                             ,
                                             5
                                             ,
                                             6
                                             ,
                                             7
                                             ,
                                             8
                                          
                                       
                                    
                                 
                              
                           
                        
                     , and 
                        
                           
                              
                                 C
                              
                              
                                 newof
                                 1
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 2
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                     , of size 4 and 5 respectively so it uses Function 1 for the ordering as 
                        
                           
                              
                                 cn
                              
                              
                                 1
                                 ,
                                 1
                              
                           
                        
                      and 
                        
                           
                              
                                 cn
                              
                              
                                 1
                                 ,
                                 2
                              
                           
                        
                      having size superior than 
                        
                           k
                           =
                           2
                        
                     . So it gets: 
                        
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 2
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                           ≺
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 1
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                      since the sharp clique 
                        
                           
                              
                                 cn
                              
                              
                                 1
                                 ,
                                 2
                              
                           
                           =
                           
                              
                                 
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                           <
                           
                              
                                 cn
                              
                              
                                 1
                                 ,
                                 1
                              
                           
                           =
                           
                              
                                 
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                      (by performing Function 1.B) therefore the best is 
                        
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 1
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                     . Now, for the second case with 
                        
                           k
                           =
                           4
                        
                     , there is in node’s 1 list one sharp clique with size inferior than k. That is, the clique 
                        
                           
                              
                                 
                                    
                                       
                                          cn
                                       
                                       
                                          1
                                          ,
                                          2
                                       
                                    
                                 
                              
                           
                           =
                           
                              
                                 
                                    
                                       
                                          
                                             2
                                             ,
                                             3
                                             ,
                                             4
                                          
                                       
                                    
                                 
                              
                           
                           <
                           k
                        
                     , therefore node 1 orders using Function 2. It gets: 
                        
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 1
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                           ≺
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 2
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                      because the clique 
                        
                           
                              
                                 cn
                              
                              
                                 1
                                 ,
                                 1
                              
                           
                           =
                           
                              
                                 
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                           ≺
                           
                              
                                 cn
                              
                              
                                 1
                                 ,
                                 2
                              
                           
                           =
                           
                              
                                 
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                     . So the best clique is 
                        
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 2
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                     . After finding the best clique, the node broadcasts it to its neighbor nodes. On the reception of this message each node uses this information to select the final clique (Step 3).


                     Step 3
                  

The goal of this step is to inform the center nodes about the clique chosen by the edge node, so they update on their cliques too. The edge node sends its clique chosen and obtained in the last step to its neighbors. On receiving this information the neighbor verifies if it is a member or not in this clique. If it does not appear, it removes this edge node from the clique of the node that sent the clique. In this step, each node i broadcasts its single clique updated and obtained in the last step to its neighbors. For every node j in 
                        
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                        
                      node i checks if it is included in j’s clique 
                        
                           
                              
                                 C
                              
                              
                                 j
                              
                           
                        
                     . Otherwise, node i removes j from its clique 
                        
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                        
                     . After this step, each node i obtains its final clique 
                        
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                        
                     . If node i does not receive node j’s updated clique, node i simply keeps node j in its clique.

To illustrate this step we consider also the example shown in Fig. 1, with 
                        
                           k
                           =
                           4
                        
                     . Node 1 broadcasts its final clique 
                        
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 2
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                      obtained in the last step to its neighbors 
                        
                           
                              
                                 L
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                    ,
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                     . For every node 
                        
                           j
                           ∈
                           
                              
                                 L
                              
                              
                                 1
                              
                           
                        
                     , node 2 on receiving this information 
                        
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 2
                              
                           
                        
                      it verifies if it is a member of 
                        
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 2
                              
                           
                        
                      or not. In this case nodes 5, 6, 7, and 8 are not in 
                        
                           
                              
                                 C
                              
                              
                                 1
                                 ,
                                 2
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                     . Therefore, each of these nodes removes node 1 from its clique obtained in Step 1, consequently 
                        
                           
                              
                                 C
                              
                              
                                 5
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 6
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 7
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 8
                              
                           
                           =
                           
                              
                                 
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                      and 
                        
                           
                              
                                 C
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 2
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 3
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 4
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                        
                     . With the same process, we find 
                        
                           
                              
                                 C
                              
                              
                                 9
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 11
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 12
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 13
                              
                           
                           =
                           
                              
                                 
                                    9
                                    ,
                                    11
                                    ,
                                    12
                                    ,
                                    13
                                 
                              
                           
                           ,
                           
                              
                                 C
                              
                              
                                 10
                              
                           
                           =
                           
                              
                                 
                                    10
                                 
                              
                           
                        
                     . In the case where k is 2, we obtain 
                        
                           
                              
                                 C
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 5
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 6
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 7
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 8
                              
                           
                           =
                           
                              
                                 
                                    1
                                    ,
                                    5
                                    ,
                                    6
                                    ,
                                    7
                                    ,
                                    8
                                 
                              
                           
                        
                      and 
                        
                           
                              
                                 C
                              
                              
                                 2
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 3
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 4
                              
                           
                           =
                           
                              
                                 
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                 
                              
                           
                           ,
                           
                              
                                 C
                              
                              
                                 11
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 12
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 13
                              
                           
                           =
                           
                              
                                 
                                    11
                                    ,
                                    12
                                    ,
                                    13
                                 
                              
                           
                        
                     , and 
                        
                           
                              
                                 C
                              
                              
                                 9
                              
                           
                           =
                           
                              
                                 C
                              
                              
                                 10
                              
                           
                           =
                           
                              
                                 
                                    9
                                    ,
                                    10
                                 
                              
                           
                        
                     .


                     Step 4
                  

Steps 1, 2 and 3 are used to obtain the cliques of level 0. The size of some of these cliques is less than k. We have tried to avoid composing these kinds of cliques in the previous steps. As matter of fact partitioning a network into cliques of size greater than k is NP-complete problem we were unable to find an algorithm for the first 3 steps that returns cliques, all with size superior than k, since we find this a NP-complete problem. We minimized by adding a node can belong to two cliques of a size 
                        
                           >
                           2
                           k
                        
                      and the other of size 
                        
                           <
                           k
                        
                     , to the clique of size 
                        
                           <
                           k
                        
                     . In this step, we partition hierarchically the cliques into sub-cliques, after to clusters. Fig. 4
                      represents a scheme for the step 4 (see Figs. 5 and 6
                     
                     ).

This step consists of two stages, the stage 1 called Hierarchical Partitioning into Cliques in Depth (HPCD) and the stage 2 named Hierarchical Partitioning into Clusters in Width(HPCW).

During the stage 2, we partition the sensor nodes obtained at the end of the first three steps into sub cliques. Each clique has size greater than 
                        
                           2
                           k
                        
                      is concerned by HPCD. We partition these cliques having size greater than 
                        
                           2
                           k
                        
                      into sub-cliques of size between k and 
                        
                           2
                           k
                        
                     , each clique contains a cluster head that manages the clique. The cluster head nodes are nodes of level 
                        
                           l
                           +
                           1
                        
                     , where l represents the current level, they are concerned by HPCD if the number of sub-cliques obtained in the previous level is greater than 
                        
                           2
                           k
                        
                     . In other words, HPCD is invoked each time the number of cluster heads of the new levels is greater than 
                        
                           2
                           k
                        
                     . Knowing that, these hierarchical cliques are nodes that were in the same clique in level 0. That is, for reasons of time processing and number of hops traversed when it comes to transmission between the cluster head and its nodes. In other words, the cluster head is in the same geographic area of its nodes (in term of number of hops). The detail of this stage is in the algorithm HPCD. This algorithm, in one round divides the clique into sub-cliques each one will have a size between k and 
                        
                           2
                           k
                        
                     .
                        
                           
                              Stage1:
                           
                           
                              Hierarchical Partitioning into Cliques in Depth (HPCD)
                           

Lines 5–6 are execute if the rank of the node i (
                        
                           R
                           (
                           i
                           )
                           )
                        
                      is a multiple of k. If it is the case, the node i adds its identity to the clique 
                        
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                        
                      and it adds to this clique the 
                        
                           k
                           -
                           1
                        
                      nodes that have a rank before it. Therefore the clique i will have a size of k.

Lines 8–9 are executed by nodes that do not have a rank multiple of k. Each node running these lines adds two sets to its clique. The first set is composed of nodes that have a rank lower than the rank of the node i, this set ends at the node that the rest of its division by k gives 1. That is for avoiding having nodes that overlap in cliques. The second set is composed of nodes that have a rank upper than the rank of the node i, the set ends at the node that is multiple of k.

Lines 10–11 are executed if the size of the clique C is not a multiple of k. The aim of this instruction is to add the 
                        
                           
                              
                                 
                                    C
                                 
                              
                           
                        
                      mod k nodes to the last clique. The last clique has a size k and 
                        
                           
                              
                                 
                                    C
                                 
                              
                           
                        
                      mod k is inferior than k therefore the size of the new clique has size between k and 
                        
                           2
                           k
                        
                     . Fig. 7
                      depicts an example of execution of HPCD on clique of 14 nodes in a given level.
                        
                           
                              
                                 Stage2
                              :
                           Hierarchical Partitioning into Clusters in Width (HPCW)

At the end of stage 1, there will be no clique to be decomposed into sub-cliques of size between k and 
                        
                           2
                           k
                        
                      because all cliques have size less than k. That is, the network will be modeled as a tree or a graph without any cycle. At this stage we use the algorithm of Banerjee [8] based on a tree (hierarchical grouping clusters). This protocol is based on a spanning tree. The authors apply a spanning tree on the network and clustering procedure begins from leaf nodes. Each cluster will have a size between k and 
                        
                           2
                           k
                        
                     . At this level we may find nodes with several hops from each other in the same cluster.

In this section we present how to manage the dynamicity of nodes. The scheme given above does not deal with the dynamicity of the nodes, when a node joins the network and when a node leaves the network. The objective is to avoid rerunning the overall protocol to keep all the characteristics of a hierarchical partitioning which takes into account the size of the cliques and clusters as described before. There are two points to deal with: Joining the network and Leaving the network.

When the node d joins the network it will establish its neighbors list 
                           
                              N
                              (
                              v
                              )
                           
                        . This new node receives the cliques of level 0 of its neighbors in a list LN.
                           
                              (A)
                              
                                 If the node can join an existing clique in level 0:

First, based on the list LN if the node finds a clique in the level 0 with a size <k, it joins it. This joining will not cause modification on the other cliques/clusters of level >0. The node can know if it can join an existing clique based the list LN, the node checks if the nodes of a given existing clique are all in its neighbors list 
                           
                              N
                              (
                              v
                              )
                           
                        .

If the node finds several cliques having size <k then it chooses the largest clique. This is to minimize further the number cliques of size <k in level 0. If the node finds cliques in the level 0 with a size <2k and 
                           
                              ⩾
                              k
                           
                         then it joins largest clique having size <2k and 
                           
                              ⩾
                              k
                           
                        .

After choosing the clique, the node sends a message to its neighbors so they can know its clique chosen and update their cliques. If each clique in the level 0 has a size 
                           
                              ⩾
                              2
                              k
                           
                         then the node joins the largest cliques. In this case we have to deal with the cliques of level L with 
                           
                              L
                              >
                              0
                           
                         for the new node. Given that each clique/cluster in the level L has a size between k and 
                           
                              2
                              k
                           
                        , therefore, in each level the node joins the clique having the smallest size. If the node joins a clique having a size 
                           
                              2
                              k
                           
                        , therefore this clique will be divided into two cliques in one step by performing the algorithm HPCD. When a clique is divided into two levels the cluster head will be considered as a new node for the level 
                           
                              L
                              +
                              1
                           
                         and the same procedure is invoked by adding it to the clique/cluster having the smallest size in the level 
                           
                              L
                              +
                              1
                           
                        . We perform also the stage 2 of Step 4 to divide the cluster having a size greater than 
                           
                              2
                              k
                           
                         after adding this new node.
                           
                              (B)
                              
                                 If the node cannot join an existing clique in level 0:

In this case the node will join directly an existing clique. The new node d can join an existing clique if it has all the member of this clique in its neighbor list LN. Let 
                           
                              
                                 
                                    C
                                 
                                 
                                    1
                                 
                              
                           
                        , …, 
                           
                              
                                 
                                    C
                                 
                                 
                                    r
                                 
                              
                           
                         be the cliques where exists at least a node in 
                           
                              N
                              (
                              v
                              )
                           
                         in each 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                           
                        , with 
                           
                              1
                              ⩽
                              i
                              ⩽
                              r
                           
                        . The node cannot join a given clique 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                           
                         in the level 0 if it does not has in 
                           
                              N
                              (
                              v
                              )
                           
                         all the nodes of 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                           
                        , with 
                           
                              1
                              ⩽
                              i
                              ⩽
                              r
                           
                        . On receiving the cliques of its neighbors in the list LN, the new node will calculate a new cliques trying to avoid creating a new clique having size less than k whilst creating maximal cliques in the levels 0.

A new clique 
                           
                              
                                 
                                    C
                                 
                                 
                                    new
                                 
                              
                           
                         will be created by the node d in the level 0. The node d, firstly, calculates a candidate cliques 
                           
                              
                                 
                                    c
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    c
                                 
                                 
                                    2
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    c
                                 
                                 
                                    r
                                 
                              
                           
                        , with 
                           
                              1
                              ⩽
                              i
                              ⩽
                              r
                           
                         where the elements of each clique 
                           
                              
                                 
                                    c
                                 
                                 
                                    i
                                 
                              
                           
                         are in the clique 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                           
                        . Let 
                           
                              
                                 
                                    T
                                 
                                 
                                    i
                                 
                              
                           
                         be the size of the clique 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                           
                         and 
                           
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                           
                         the size of the new clique 
                           
                              
                                 
                                    c
                                 
                                 
                                    i
                                 
                              
                           
                         computed by the new node d with neighbors in 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                           
                        , with 
                           
                              
                                 
                                    c
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    
                                       d
                                    
                                 
                              
                              ∈
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                           
                        . The node d chooses its new clique following these instructions:
                           
                              •
                              
                                 
                                    
                                       If
                                       
                                       (
                                       ∀
                                       i
                                       ,
                                       
                                          
                                             T
                                          
                                          
                                             i
                                          
                                       
                                       -
                                       
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                       ⩾
                                       k
                                       )
                                       
                                       then
                                    
                                 
                              


                                 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             new
                                          
                                       
                                       =
                                       
                                          
                                             c
                                          
                                          
                                             i
                                          
                                       
                                    
                                 , with 
                                    
                                       MAX
                                       
                                          
                                             
                                                
                                                   
                                                      t
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                    
                                 .


                                 
                                    
                                       if
                                       
                                       (
                                       ∀
                                       i
                                       ,
                                       
                                          
                                             T
                                          
                                          
                                             i
                                          
                                       
                                       -
                                       
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                       ⩽
                                       k
                                       )
                                       
                                       then
                                    
                                 
                              


                                 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             new
                                          
                                       
                                       =
                                       
                                          
                                             c
                                          
                                          
                                             i
                                          
                                       
                                    
                                 , with 
                                    
                                       Min
                                       
                                          
                                             
                                                
                                                   
                                                      t
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              


                                 
                                    
                                       If
                                       
                                       (
                                       ∃
                                       j
                                       ,
                                       
                                          
                                             T
                                          
                                          
                                             j
                                          
                                       
                                       -
                                       
                                          
                                             t
                                          
                                          
                                             j
                                          
                                       
                                       <
                                       k
                                       )
                                       ∧
                                       (
                                       ∃
                                       p
                                       ,
                                       
                                          
                                             T
                                          
                                          
                                             p
                                          
                                       
                                       -
                                       
                                          
                                             t
                                          
                                          
                                             p
                                          
                                       
                                       >
                                       k
                                       )
                                       
                                       then
                                    
                                 
                              


                                 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             new
                                          
                                       
                                       =
                                       
                                          
                                             c
                                          
                                          
                                             p
                                          
                                       
                                    
                                 , with 
                                    
                                       MAX
                                       
                                          
                                             
                                                
                                                   
                                                      t
                                                   
                                                   
                                                      p
                                                   
                                                
                                             
                                          
                                       
                                    
                                 .

After choosing the clique, the node sends a message to its neighbors so the nodes in 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                           
                         can delete the nodes of 
                           
                              
                                 
                                    C
                                 
                                 
                                    new
                                 
                              
                           
                         and the nodes in 
                           
                              
                                 
                                    C
                                 
                                 
                                    new
                                 
                              
                           
                         delete the nodes of 
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    C
                                 
                                 
                                    new
                                 
                              
                           
                        . After creating the new clique 
                           
                              
                                 
                                    C
                                 
                                 
                                    new
                                 
                              
                           
                         it remains to deal with the changes in cliques/clusters of levels L, with 
                           
                              L
                              >
                              0
                           
                        . If the size of the clique 
                           
                              
                                 
                                    C
                                 
                                 
                                    new
                                 
                              
                           
                         is less than 
                           
                              2
                              k
                           
                         in this case the cluster head of this clique is considered in the level and it join a clique or a cluster having size 
                           
                              <
                              2
                              k
                           
                        . If the size of the clique 
                           
                              
                                 
                                    C
                                 
                                 
                                    new
                                 
                              
                           
                         is upper than 
                           
                              2
                              k
                           
                         in this case the step 4 is invoked to divide this cliques and clusters into cliques having size between and 
                           
                              2
                              k
                           
                        .

When a node d leaves the network its former neighbors should delete d and update the cliques. In this section we show what are the strategies used to keep the characteristics of a hierarchical partitioning taking into account the size of cliques and clusters as described before.

If the node leaves a clique of level 0 having size less than 
                           
                              2
                              k
                           
                         and greater than 1 in this case no change will be considered for the other levels because there is still a cluster head the presents this clique/cluster in the next level.

If the node d leaves a clique C of level L then the nodes of this clique delete the node d form the list of cliques. If the new clique (after deleting d) has a size 
                           
                              s
                              1
                           
                        , with 
                           
                              s
                              1
                              ⩾
                              k
                           
                         no change will be considered for the other levels. However, if 
                           
                              s
                              1
                              <
                              k
                           
                         then the other nodes in 
                           
                              C
                              -
                              d
                           
                         check if there is another clique having a size 
                           
                              s
                              2
                           
                         with 
                           
                              s
                              2
                              +
                              s
                              1
                              <
                              =
                              2
                              k
                           
                         to join it. If there is no clique with this size then this clique of level L is deleted.

The worst case message complexity for the steps 1 and 2 and 3 is 
                        
                           3
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                           -
                           3
                           n
                        
                     . This is when the starting network is constructing one clique. In each step the node sends 
                        
                           n
                           -
                           1
                        
                      message to its neighbors to inform them about its new clique.

After steps 3 we will have cliques. The worst case for this step is when the group of level 0 are all single node cliques. Therefore, we will have 
                        
                           n
                           /
                           k
                        
                      level of partitioning. In each level a tree is constructed to make the clusters. In each level 
                        
                           O
                           (
                           n
                           )
                        
                      messages are sent to build the tree. Therefore 
                        
                           O
                           (
                           n
                           )
                           ∗
                           (
                           n
                           /
                           k
                           )
                        
                      messages are required in the worst case.

To demonstrate the effectiveness and the performance of the proposal scheme, the proposed protocol is implemented using the tool Optimum Performance Network OPNET 14.0 [29]. The OPNET tool is a powerful tool for network simulation. It allows clustering of sensor networks and studying network communications. We simulated with a laptop with processor Intel(R) Core(Tm) i5, 2.53Ghz with 4 Go of memory. The channel access model used is the slotted CSMA/CA Algorithm of IEEE 802.15.4 (Zigbee) at 868MHz. The following simulation results are the average of 100 tests for each number of nodes on the topology of connected and randomly generated networks of 10, 100, 200, 300, 400 and 500 nodes in 100×100 (mm2) simulation area respectively. The transmission range of all the sensor nodes is fixed to 20m. The confidence intervals are given at the 95% confidence level.

We have used the following metrics to evaluate the proposed protocol:
                        
                           •
                           The number of cliques with a single node in the first level (level 0), a cluster formation protocol should minimize the cliques/clusters with a single node. Results are in Fig. 8
                               with the following confidence intervals for 100, 200, 300, 400, 500 nodes respectively: 1.1±0.115, 0.79±0.351, 0.6±0.127, 0.4±0.309, 0.31±0.236.

The number of cliques and clusters in each level, and the average cluster size.

Number of hops between nodes: which is the number of hops for a sensor to reach its cluster head, we choose the farthest sensor node from the cluster head. The end to end delay depends on the number of hops. Results are in Fig. 12 with the following confidence intervals for 100, 200, 300, 400, 500 nodes respectively: 4.2±0.271, 5±0.482, 7.1±0.408, 8.8±0.571, 11±0.605.

Number of hops between cluster heads: which is the number of hops for the clusters heads to reach the super cluster-head, we choose the farthest normal cluster head node from the super cluster head. Results are in Fig. 13 with the following confidence intervals for 100, 200, 300, 400, 500 nodes respectively: 3±0.254, 3±0.301,4±0.393, 5±0.408, 7±0.657.


                     Fig. 8 represents the number of cliques with a single node obtained at the level 0 (at end of step 1, 2, and 3), it compares our result to the result of [8] (CHCM), [18] (DCF) and the Centralized Clique Formation (CCF) [30]. The authors in [18] propose a K-IDS clustering algorithm, where K is the number of hops. When 
                        
                           k
                           =
                           1
                        
                     , the problem becomes a partitioning into cliques.

We see that our solution is better to avoid cliques with a single node compared to previous works. This was expected because we introduced the parameter k such that if a clique has size greater than k then it gives nodes to another clique has a size lower than k, otherwise it continues the procedure of computing the maximal clique normally. With this proceeding we avoided to have a great number of cliques with one node. For the hierarchical partitioning, it is important to avoid and minimize clique/cluster with s single nodes because this avoid to have very high number of clusters and cliques therefore the number of hops from the cluster heads to the super cluster head will moderate, which improves the end-to-end delay for nodes and the end-to-end delay for cluster heads.


                     Fig. 9
                      represents the number of clusters and cliques for different values of k, through several tests, we found that the number of clusters and cliques depends on the network density. Fig. 10
                      represents the execution time of the clustering protocol based on k, we see in this figure that if k decreases the execution time decreases because the number of level decreases also. Fig. 11
                      represents the average clusters size; the average cluster size should not be too small. In sensor networks, it is not desirable to include too many nodes in a large cluster due to the increasing message collisions and transmission delay in a large cluster. With this new technique of the partitioning into clusters and cliques having moderate sizes (between k and 
                        
                           2
                           k
                        
                     ). We see in Fig. 11 a good results for the average of the clusters and cliques size of our protocol compared to previous works.


                     Fig. 12
                      shows the difference in end-to-end delay for nodes when our protocol and the protocol in [8] are used. In this experiment the parameter k was held at 6 and the number of nodes is 500. The end-to-end delay for nodes within our solution is better. We see for level 1 and level 2 that the nodes are at one hop from the cluster head. This can be attributed to the fact that all these nodes are in same clique in the level 0 while in the case of [8] there is no cluster head that is at one hop to its members. Therefore, for data aggregation and routing of critical information our solution is much better to use especially if the application is for example fire detecting or military applications. Fig. 13
                      shows the difference in end-to-end delay for cluster heads. This figure witnesses that the communication between the cluster heads and the super cluster heads is more efficient using our proposed scheme. This can be attributed to the fact that in this new partitioning scheme the cluster head are near to each other in each level compared to the other hierarchical solution. Fig. 14
                      compares the average energy consumption for our protocol and the protocol in [8] where a message is send from cluster-head in level 1 to the author cluster heads in the same level. In sensor networks, the energy consumption for each message received should be considered in addition to the overall energy consumption. We see that our protocol is more energy-efficient, as the protocol in [8] generates more messages (the bath is longer) because the clusters are far away from each other compared to our proposed solution.

@&#CONCLUSION@&#

In wireless sensor networks, clustering sensor nodes into small groups is an effective technique to achieve scalability, self-organization, power saving, efficient channel access and routing, etc. Several clustering protocols have been proposed recently. However, the hierarchical partitioning into cliques and clusters taking into account the energy and the memory capacities of the cluster head and how many of hops it is far away from its nodes was not treated. In this paper, I proposed a distributed and scalable hierarchical scheme for sensor network partitioning. It combines hierarchically a partitioning into cliques and clusters, and it takes into account the size of cliques and clusters to make it suitable for resource-constrained sensors. The proposed a scheme improves the literature works in interesting metrics such as: the end-to-end delay which is defined as the number of hops for a sensor to reach its cluster head from a node to the super cluster head, minimizing the number of cliques with a single node in the first level, and minimizing the average cluster size.

However, some questions remain as how we can use this scheme for routing, permutation routing and data aggregation. Another challenging problem that we will study is securing the proposed protocol.

@&#ACKNOWLEDGMENTS@&#

This work is supported by the Labex ACTION program (contract ANR-11-LABX-01-01), ANR/RGC (contracts ANR-12-IS02-0004-01 and 3-ZG1F) and ANR (contract ANR-2011-BS03-005). The author wish to express his appreciation to the anonymous reviewers for their constructive comments.

@&#REFERENCES@&#

