@&#MAIN-TITLE@&#Automatic optimal filament segmentation with sub-pixel accuracy using generalized linear models and B-spline level-sets

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Filament segmentation is a recurrent task in light-microscopy image analysis.


                        
                        
                           
                           We combine the advantages of level-set and curve-fitting methods in a new model.


                        
                        
                           
                           We present an optimal solver algorithm for the model, implemented in Fiji/ImageJ.


                        
                        
                           
                           We derive a lower bound of the error in general filament-segmentation problems.


                        
                        
                           
                           We show that our method asymptotically reaches the bound.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Filament segmentation

Level set

B-spline

Axoneme

Light microscopy

Microtubule

@&#ABSTRACT@&#


               
               
                  Biological filaments, such as actin filaments, microtubules, and cilia, are often imaged using different light-microscopy techniques. Reconstructing the filament curve from the acquired images constitutes the filament segmentation problem. Since filaments have lower dimensionality than the image itself, there is an inherent trade-off between tracing the filament with sub-pixel accuracy and avoiding noise artifacts. Here, we present a globally optimal filament segmentation method based on B-spline vector level-sets and a generalized linear model for the pixel intensity statistics. We show that the resulting optimization problem is convex and can hence be solved with global optimality. We introduce a simple and efficient algorithm to compute such optimal filament segmentations, and provide an open-source implementation as an ImageJ/Fiji plugin. We further derive an information-theoretic lower bound on the filament segmentation error, quantifying how well an algorithm could possibly do given the information in the image. We show that our algorithm asymptotically reaches this bound in the spline coefficients. We validate our method in comprehensive benchmarks, compare with other methods, and show applications from fluorescence, phase-contrast, and dark-field microscopy.
               
            

@&#INTRODUCTION@&#

Filamentous structures are ubiquitous in biology and are routinely imaged using different modalities. Examples range from cytoskeletal filaments, like microtubules (Ruhnow et al., 2011) and actin filaments (Gittes et al., 1993), to polymers (Graham et al., 2014), axonemes (Mukundan et al., 2014), sperm flagella (Rikmenspoel and Isles, 1985), nematodes (Geng et al., 2004; Ramot et al., 2008), and rodent whiskers (Clack et al., 2012). From the acquired images, one often aims to extract quantitative information about the filaments, such as their length (Ruhnow et al., 2011), curvature (Mukundan et al., 2014), bending (Gittes et al., 1993; Graham et al., 2014), or motion dynamics (Rikmenspoel and Isles, 1985). Doing so manually is prohibitive for large data volumes. Moreover, manual analysis introduces significant intra- and inter-rater variability and bias. Image segmentation techniques are available to automate the process. However, the problem of filament segmentation is not trivial because the thickness of the imaged filaments is often below the resolution limit of the microscope, and the signal-to-noise ratio (SNR) of the images is routinely low. While the former calls for filament localization with sub-pixel precision, the latter amplifies localization errors.

Addressing the problem of localization precision and error control in filament segmentation has been explored in various methods over the past decades. These methods can generally be classified into region-segmentation methods (e.g., Paul et al., 2013; Fuller et al., 2005), curve-fitting methods (e.g., Smith et al., 2010; Clack et al., 2012; Valdman et al., 2012; Xu et al., 2014), and combinations of the two (e.g., Ruhnow et al., 2011). Region-segmentation methods detect a connected region of pixels within which the filament lies, represented as either a pixel mask (Fuller et al., 2005; Goldstein et al., 2010; Paul et al., 2013), particles (Florin et al., 2005; Cardinale et al., 2012), or a closed active contour (Kass et al., 1988; Ronfard, 1994; Yezzi et al., 1997; Butenuth and Heipke, 2012; Zhang et al., 2012a; 2012b; Bernard et al., 2009). Usually, a closed active contour is implicitly represented as the zero-level set of a higher-dimensional function, which is called level-sets methods (Sethian, 1999).

While region-segmentation methods narrow down the localization of the filament, they do not segment a filament in the sense of a curve. Curve-fitting methods account for this by fitting a smooth open curve to the image in order to represent the filament (Wong et al., 1998; Sarry and Boire, 2001; Smith et al., 2010; Clack et al., 2012; Valdman et al., 2012; Xu et al., 2014), because characterizing a filament as a region of pixels is especially inappropriate if sub-pixel accuracy or smoothness are required. This is typically the case when quantifying filament polymerization kinetics by computing time derivatives of the filament length.

In both paradigms, the segmentation result can either be derived by solving an optimization problem (Paul et al., 2013; Fuller et al., 2005; Florin et al., 2005; Cardinale et al., 2009; Smith et al., 2010), or using filters (Saban et al., 2006; Danuser et al., 2000; Clack et al., 2012; Rigort et al., 2012). Formulating the task as an optimization problem, e.g. maximizing the Bayesian posterior of the segmentation to explain the image, provides principled ways of including prior knowledge about the imaged filaments and the imaging modality in the form of the object and forward models.

Solving the resulting optimization problem, however, may be difficult. For discrete problems over pixel masks or filament pieces, dynamic programming (Clack et al., 2012) or graph-cuts (Kolmogorov and Zabin, 2004; Boykov and Kolmogorov, 2004; Boykov and Funka-Lea, 2006) can find the globally optimal solution. When using continuous filament representations, such as splines, active contours, or level-sets, however, optimization is mostly done locally, e.g., using gradient-descent (Zhang et al., 2012a; 2012b) or shape-gradient flow (Tsai et al., 2003; Law and Chung, 2009; Paul et al., 2013). For level-sets methods, variational approaches are popular, relaxing the requirement of previously having to know the number of the filaments to be segmented (Goldstein et al., 2010; Paul et al., 2013; Bernard et al., 2009). The main limitation of such local approaches is that image noise can cause the result to converge in a sub-optimal local minimum (Smith et al., 2010; Xu et al., 2014). In addition, curve-fitting methods usually require prior knowledge of the number of filaments present in the image (Wong et al., 1998; Sarry and Boire, 2001; Valdman et al., 2012).

Methods from both paradigms usually assume Gaussian image noise and the use of a certain type of microscopy, e.g., fluorescence microscopy. These assumptions may be inappropriate in some cases, for example when using phase-contrast microscopy, or in low-light conditions where the noise is Poissonian.

Despite these shortcomings, both paradigms also have unique advantages. Specifically, region-segmentation methods can localize multiple filaments automatically and in a computationally efficient way. When using a level-set segmentation method, the number of filaments present in an image does not need to be previously known or imposed. While curve-fitting methods require prior knowledge of the number of filaments to be fitted, they can properly characterize the geometry of filaments as open curves.

These observations motivate us to combine the two paradigms in a novel way. We propose a method that represents filaments as open curves, hence providing sub-pixel resolution in a geometric representation of the correct dimensionality, just as existing curve-fitting methods do. At the same time, however, rather than directly using a 1D curve representation, we use a level-set representation of these curves. This means that, unlike in curve-fitting methods, our method does not require the number of filaments to be previously known. It automatically handles multi-filament cases, as long as the filaments do not cross.

We show how to formulate the resulting optimization problem in a globally convex way (Paul et al., 2013) by measuring distances between segmentations and the image using the Bregman divergence (Banerjee et al., 2005; Bregman, 1967). We further derive an analytical expression for the gradient of the energy functional, enabling us to efficiently solve the convex problem by an easy-to-implement gradient-descent optimizer. The segmentation produced is the best possible one for the given model and image data. We also exploit the model-based framework to account for key physical properties of the microscope (i.e., image-formation model), which are rarely considered in other methods. This renders our method fully automatic in the sense that it does not require prior manual segmentation or image pre-processing (e.g., inversion or smoothing).

Technically, this is made possible by representing the filaments as a vector level-set with level functions represented as B-spline surfaces (Bernard et al., 2009). The evolution of those surfaces is driven toward the optimal segmentation by a convex Bregman energy (Paul et al., 2013), which derives from a generalized linear model (GLM) (McCullagh, 1984; Nelder and Wedderburn, 1972) for the noise in the image (see (Paul et al., 2013) for details). This allows for any pixel-wise noise distribution from the exponential family, which includes the most common cases in microscopy, such as Gaussian, Poisson, and Bernoulli noise (Paul et al., 2013). This relaxes the assumption of Gaussian pixel noise, rendering the model more flexible.

In order to confirm the optimality of our solution, we derive an information-theoretic lower bound for the segmentation error in filament segmentation. This lower bound defines how well any unbiased algorithm can possibly perform given the information in the image. We find that the algorithm presented here asymptotically reaches the bound in the spline coefficients, showing that the bound is attainable.

In summary, our method can (1) automatically detect and optimally segment a previously unknown number of filaments as smooth open curves with sub-pixel resolution, and (2) be adapted to different types of image data from different microscopy modalities. The method is easy to implement, since it amounts to standard gradient descent over a convex function.

The paper is organized as follows: in Section 2, we present the optimization framework, mathematically formalizing the filament segmentation problem. The algorithm design and the theoretical lower bound for the segmentation accuracy are introduced in Sections 3 and 4, respectively. Results of comprehensive benchmarks and experiments are shown in Section 5, and we conclude this work in Section 6.

Before providing the details of our method, we mathematically formulate the filament segmentation problem. The first thing we need is a mathematical representation of the filaments.

We represent filaments as vector level-sets, because by using a single level function the level set is necessarily a closed curve. In order to represent open curves, we use a vector level-set with two components. The zero level set of the first component ϕ describes a closed curve that contains the filament (black circle in Fig. 1
                     a). The part of that closed curve where the second component ψ is positive then is the actual open filament (black arc in Fig. 1b). The vector level function is represented as a B-spline surface. This geometric model can represent an arbitrary number of non-crossing and non-overlapping filaments. Filaments are overlapping as soon as they are too close to each other for the microscope optics to resolve them as two.

Based on this filament representation, it is possible to predict the image that one expects to see when imaging those filaments with a particular microscope. This forward model hence simulates the generative process of image formation. The so-predicted model image is then compared with the actually observed image data. The difference between the two (measured in a suitable metric) then drives the evolution of the filament representation so as to minimize this difference. A regularizer is used to avoid over-fitting. The data-fitting term and the regularizer together form the energy functional that is to be minimized in order to find the best possible segmentation. The variables of the optimization problem are the coefficients of the B-spline vector level-set surfaces. They evolve such that the represented filaments lead to an expected image that is as close as possible to the actually observed image.

The forward model assumes that each filament has a uniform intensity along its length, and that the background is uniformly homogeneous. If these assumptions are not met, the algorithm will still work, but the result is no longer guaranteed to be globally optimal, as we show below. The (unknown) intensities of the filament and background are thus represented by a 2-vector 
                           
                              
                                 β
                              
                              =
                              
                                 
                                    [
                                    
                                       β
                                       1
                                    
                                    ,
                                    
                                       β
                                       2
                                    
                                    ]
                                 
                                 
                                    T
                                 
                              
                           
                        . Let Hf
                        (
                           x
                        ) be an indicator function such that 
                           
                              
                                 H
                                 f
                              
                              
                                 (
                                 x
                                 )
                              
                              =
                              1
                           
                         means that the point 
                           x
                         lies on a filament, 
                           
                              
                                 H
                                 f
                              
                              
                                 (
                                 x
                                 )
                              
                              =
                              0
                           
                         is background. Hence, the intensity distribution in the model sample before imaging is

                           
                              (1)
                              
                                 
                                    
                                       
                                          
                                             μ
                                             
                                                (
                                                x
                                                ,
                                                
                                                   β
                                                
                                                )
                                             
                                             =
                                             
                                                β
                                                1
                                             
                                             
                                                H
                                                f
                                             
                                             
                                                (
                                                x
                                                )
                                             
                                             +
                                             
                                                β
                                                2
                                             
                                             
                                                (
                                                1
                                                −
                                                
                                                   H
                                                   f
                                                
                                                
                                                   (
                                                   x
                                                   )
                                                
                                                )
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The indicator function Hf
                        (
                           x
                        ) is represented by the vector level set. In order to represent non-intersecting filaments, we use two level functions ϕ(
                           x
                        ) and ψ(
                           x
                        ). Open-curve filaments are then represented by

                           
                              (2)
                              
                                 
                                    
                                       
                                          
                                             Γ
                                             
                                                (
                                                x
                                                )
                                             
                                             =
                                             {
                                             x
                                             
                                             :
                                             
                                             ϕ
                                             
                                                (
                                                x
                                                )
                                             
                                             =
                                             0
                                             ∩
                                             ψ
                                             
                                                (
                                                x
                                                )
                                             
                                             >
                                             0
                                             ,
                                             
                                             x
                                             ∈
                                             
                                                Ω
                                                I
                                             
                                             }
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              Ω
                              I
                           
                         is the image domain. The level set 
                           
                              ϕ
                              (
                              ·
                              )
                              =
                              0
                           
                         describes a closed contour, while the condition ψ(·) > 0 cuts the closed contour to an open curve since only a subset of 
                           x
                         on 
                           
                              ϕ
                              (
                              x
                              )
                              =
                              0
                           
                         can yield ψ(
                           x
                        ) > 0. The above indicator function Hf
                        (
                           x
                        ) is then given by

                           
                              (3)
                              
                                 
                                    
                                       
                                          
                                             
                                                H
                                                f
                                             
                                             
                                                (
                                                x
                                                )
                                             
                                             =
                                             δ
                                             
                                                (
                                                ϕ
                                                
                                                   (
                                                   x
                                                   )
                                                
                                                )
                                             
                                             H
                                             
                                                (
                                                ψ
                                                
                                                   (
                                                   x
                                                   )
                                                
                                                )
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where δ(·) is a Dirac and H(·) a Heaviside distribution. This is equivalent to condition (2) because if 
                           
                              ϕ
                              (
                              ·
                              )
                              =
                              0
                           
                         and ψ(·) > 0, 
                           
                              
                                 H
                                 f
                              
                              
                                 (
                                 ·
                                 )
                              
                              =
                              1
                              ,
                           
                         meaning that 
                           x
                         belongs to a filament. Otherwise 
                           
                              
                                 H
                                 f
                              
                              
                                 (
                                 ·
                                 )
                              
                              =
                              0
                              ,
                           
                         meaning the point belongs to the background.

As an illustrating example explaining the vector level-set representation, in Fig. 1a, a closed contour (shown as a black circle) is represented by the first level set 
                           
                              ϕ
                              (
                              x
                              )
                              =
                              0
                           
                        . This closed contour 
                           
                              ϕ
                              (
                              x
                              )
                              =
                              0
                           
                         is cut so as to satisfy ψ(
                           x
                        ) > 0, which directly interprets condition (2). In Fig. 1b, the resulting indicator function Hf
                        (
                           x
                        ) in Eq. (3) is shown in the 2D image domain. The image of 
                           
                              
                                 H
                                 f
                              
                              
                                 (
                                 x
                                 )
                              
                              =
                              1
                           
                         (red curve) presents an open curve, while 
                           
                              
                                 H
                                 f
                              
                              
                                 (
                                 x
                                 )
                              
                              =
                              0
                           
                         is the dark background. This forms a solution space for filament segmentation, since different indicator functions Hf
                        (
                           ·
                        ), represented by the two level functions, correspond to different segmentation results.

The resulting expected model image is then formed by running the hypothetical scenery μ through the image-formation forward model. This predicts what the image would look like in expectation when seen through that particular microscope.

The two level functions ϕ(
                           x
                        ) and ψ(
                           x
                        ) can be represented in a number of ways. A common choice is to use signed-distance functions. This, however, requires re-initialization (or penalization) during contour evolution in order to ensure that the signed-distance property is not lost (Sethian, 1999). In our application, we do not require distance information in the filament domain. Following earlier works, we hence simplify the representation by using B-spline functions (Maeland, 1988; Farin, 1996; Bernard et al., 2009) for both level-set functions. Representing the level functions as B-spline surfaces moreover provides an analytical form (polynomial) of each segmented filament, which provides direct access to geometric features such as gradients, normals, and curvature (Bernard et al., 2009). Using ϕ(
                           x
                        ) as an example (ψ(
                           x
                        ) is analogous), the function is

                           
                              (4)
                              
                                 
                                    
                                       
                                          
                                             ϕ
                                             
                                                (
                                                x
                                                )
                                             
                                             =
                                             
                                                ∑
                                                
                                                   k
                                                   ∈
                                                   
                                                      Z
                                                      +
                                                      2
                                                   
                                                
                                             
                                             
                                                c
                                                ϕ
                                             
                                             
                                                [
                                                k
                                                ]
                                             
                                             
                                             
                                                b
                                                n
                                             
                                             
                                                (
                                                
                                                   x
                                                   
                                                      h
                                                      +
                                                      1
                                                   
                                                
                                                −
                                                k
                                                )
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              Z
                              +
                              2
                           
                         is a 2D mesh grid of positive integers that has the same size as the image domain 
                           
                              
                                 Ω
                                 I
                              
                              ,
                           
                         
                        k is an integer 2-index, cϕ
                        [k] is the spline coefficient set, and 
                           
                              
                                 b
                                 n
                              
                              
                                 (
                                 
                                    x
                                    
                                       h
                                       +
                                       1
                                    
                                 
                                 −
                                 k
                                 )
                              
                           
                         is an nth-order basis function with the size h controlling the spacing between two consecutive nodes.

The dimensionality of the resulting optimization problem is given by the number of spline coefficients used to represent the level functions. This number is controlled by h. We illustrate B-spline surfaces of different sizes h in Fig. 2
                        . For 
                           
                              h
                              =
                              0
                              ,
                           
                         the B-spline function has one coefficient (node) per image pixel. For 
                           
                              h
                              =
                              1
                              ,
                           
                         one pixel is left empty between any two consecutive nodes, thus quartering the number of coefficients in 2D. Thus, increasing h reduces the resolution of the spline, but also reduces the dimensionality of the resulting optimization problem.

On the one hand, smaller h allow the segmented filaments to trace smaller undulations. On the other hand, smaller h increases the computational cost and renders the segmentation more sensitive to noise. We investigate the trade-off of the scaling size h in simulation results in Section 5.3, and provide good parameter choices.

The energy functional is a criterion that evaluates the quality of a given segmentation with respect to the image data. If the model image shows the correct filaments, the energy should be minimal. Following the standard approach, we use an energy functional composed of two parts: a data-fitting term that measures the distance between the model image and the data image, and a regularization term that penalizes over-fitting.

The data-fitting term measures how closely the image one expects to see under the current segmentation hypothesis matches the observed data image. This includes a simulation of the image-formation process in the given microscope, and a pixel noise model. We model image formation as a convolution with a kernel K, which is known from optics or calibration measurements. The expected model image hence is K*μ(
                              x, β
                           ). This simulates how the imaging system maps the scene to an image. In fluorescence microscopy, K is the point-spread function (PSF). For phase-contrast microscopy, K is given by a non-linear imaging model that involves Bessel functions, as previously described (Yin et al., 2010).

The second component is the noise process, providing a likelihood to compare the model image to the image data. Assume that the intensity value u(
                              x
                           ) at location 
                              x
                            is a realization from a stochastic process with probability density function (p.d.f.) p(u(
                              x
                           ) | 
                              θ
                           ) and unknown parameters 
                              θ
                           . In our problem, the unknown parameters are the mean intensities β
                           1 and β
                           2 of the forep.f.f and background, respectively. The likelihood of a segmentation given in the image data is ℓ(μ(
                              x, β
                           ) | u(
                              x
                           )). This likelihood increases as the model (i.e., segmentation) μ( ·, ·) converges to the correct solution.

To estimate the unknown parameters β
                           1 and β
                           2, we use a linear predictor for the parameters of any p.d.f. from the exponential family (EF) of distributions. A non-linear link function correlates the linear predictor to the unknown parameters. This is the standard GLM framework in statistics.

We give a brief example to illustrate the GLM idea. We are given a set of pixels sampled from a probability distribution with unknown mean. We can estimate the mean as the average of the samples. In this case, the linear predictor of the GLM is an averaging operation, and the link function is the identity function because we let the mean directly equal the average of the samples. In the general case, we can specify an arbitrary link function. If we for example let the log  of the parameters equal the sample average, we enforce positivity of estimated intensity values. Hence, a GLM generalizes the classical estimation of the mean by the average, allowing additional flexibility.

In our problem, the linear predictor is the model μ(
                              x, β
                           ). We further use the link function 
                              
                                 g
                                 (
                                 E
                                 (
                                 u
                                 (
                                 x
                                 )
                                 )
                                 )
                                 =
                                 K
                                 *
                                 μ
                                 (
                                 x
                                 ,
                                 
                                    β
                                 
                                 )
                                 ,
                              
                            or 
                              
                                 E
                                 
                                    (
                                    u
                                    
                                       (
                                       x
                                       )
                                    
                                    )
                                 
                                 =
                                 
                                    g
                                    
                                       −
                                       1
                                    
                                 
                                 
                                    (
                                    K
                                    *
                                    μ
                                    
                                       (
                                       x
                                       ,
                                       
                                          β
                                       
                                       )
                                    
                                    )
                                 
                              
                            where 
                              
                                 
                                    g
                                    
                                       −
                                       1
                                    
                                 
                                 
                                    (
                                    ·
                                    )
                                 
                              
                            is the inverse link function.
                              1
                           
                           
                              1
                              If 
                                    
                                       
                                          g
                                          
                                             −
                                             1
                                          
                                       
                                       
                                          (
                                          ·
                                          )
                                       
                                    
                                  is the identity function, i.e., 
                                    1
                                 (·), this reduces to the classical method of estimating the mean as the average of the samples.
                            The likelihood of the model can then be written as

                              
                                 (5)
                                 
                                    
                                       
                                          
                                             
                                                ℓ
                                                
                                                   (
                                                   μ
                                                   
                                                      (
                                                      x
                                                      ,
                                                      
                                                         β
                                                      
                                                      )
                                                   
                                                   
                                                   |
                                                   
                                                   u
                                                   
                                                      (
                                                      x
                                                      )
                                                   
                                                   )
                                                
                                                =
                                                p
                                                
                                                   (
                                                   
                                                      u
                                                      
                                                         (
                                                         x
                                                         )
                                                      
                                                      
                                                      |
                                                      
                                                   
                                                   
                                                      g
                                                      
                                                         −
                                                         1
                                                      
                                                   
                                                   
                                                      (
                                                      K
                                                      *
                                                      μ
                                                      
                                                         (
                                                         x
                                                         ,
                                                         
                                                            β
                                                         
                                                         )
                                                      
                                                      )
                                                   
                                                   )
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Though it would be possible to directly maximize the likelihood in Eq. (5), likelihoods of some p.d.f.’s from the EF are complicated. For example, the p.d.f. of a Poisson distribution contains factorials and is a discrete function. More importantly, some p.d.f.s are not globally convex and, as a result, global optimality cannot be guaranteed. Hence, a better data-fitting term is needed.

We address these problems by replacing the likelihood with the Bregman divergence (Bregman, 1967) induced by that specific p.d.f. from the EF. The Bregman divergence generalizes the familiar squared Euclidean distance to a class of distances that all share similar properties. The most important property for our purpose is that a Bregman divergence is globally convex. This guarantees global optimality of the solution.

The form of the Bregman divergence varies according to the p.d.f. chosen as the noise model. For example, assuming p(·) to be Gaussian, the Bregman divergence is the squared Euclidean distance 
                              
                                 
                                    ∥
                                    u
                                    
                                       (
                                       x
                                       )
                                    
                                    −
                                    K
                                    *
                                    μ
                                    
                                       (
                                       x
                                       ,
                                       
                                          β
                                       
                                       )
                                    
                                    ∥
                                 
                                 2
                                 2
                              
                           . If p(·) is a Poisson distribution, the corresponding Bregman divergence is the relative entropy 
                              
                                 u
                                 
                                    (
                                    x
                                    )
                                 
                                 log
                                 
                                    
                                       u
                                       (
                                       x
                                       )
                                    
                                    
                                       K
                                       *
                                       μ
                                       (
                                       x
                                       ,
                                       
                                          β
                                       
                                       )
                                    
                                 
                                 +
                                 K
                                 *
                                 μ
                                 
                                    (
                                    x
                                    ,
                                    
                                       β
                                    
                                    )
                                 
                                 −
                                 u
                                 
                                    (
                                    x
                                    )
                                 
                              
                           . The Bregman divergences associated with any p.d.f. from the EF are given in Table 1 of Paul et al. (2013). We denote by 
                              
                                 
                                    B
                                    
                                       p
                                       *
                                    
                                 
                                 
                                    (
                                    ·
                                    ∥
                                    ·
                                    )
                                 
                              
                            the Bregman divergence induced by the noise model p.d.f. p
                           *. Integrating over the image domain 
                              
                                 
                                    Ω
                                    I
                                 
                                 ,
                              
                            the final data-fitting energy term then reads

                              
                                 (6)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   E
                                                   d
                                                
                                                
                                                   (
                                                   x
                                                   ,
                                                   
                                                      β
                                                   
                                                   )
                                                
                                                =
                                                
                                                   ∫
                                                   
                                                      Ω
                                                      I
                                                   
                                                
                                                
                                                
                                                
                                                
                                                   B
                                                   
                                                      p
                                                      *
                                                   
                                                
                                                
                                                   (
                                                   
                                                      u
                                                      
                                                         (
                                                         x
                                                         )
                                                      
                                                      
                                                      ∥
                                                      
                                                   
                                                   
                                                      g
                                                      
                                                         −
                                                         1
                                                      
                                                   
                                                   
                                                      (
                                                      K
                                                      *
                                                      μ
                                                      
                                                         (
                                                         x
                                                         ,
                                                         
                                                            β
                                                         
                                                         )
                                                      
                                                   
                                                   )
                                                
                                                
                                                
                                                   d
                                                
                                                x
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

The regularizer is required to prevent over-fitting the noise in the image. It is a necessary component of any segmentation energy function and plays the role of a Bayesian prior in the estimation problem. We here use the popular total variation (TV) regularizer:

                              
                                 (7)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   E
                                                   r
                                                
                                                
                                                   (
                                                   x
                                                   ,
                                                   
                                                      β
                                                   
                                                   )
                                                
                                                =
                                                
                                                   ∫
                                                   
                                                      Ω
                                                      I
                                                   
                                                
                                                
                                                
                                                
                                                   
                                                      ∥
                                                      ∇
                                                      μ
                                                      
                                                         (
                                                         x
                                                         ,
                                                         
                                                            β
                                                         
                                                         )
                                                      
                                                      ∥
                                                   
                                                   2
                                                
                                                
                                                
                                                   d
                                                
                                                x
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           where ∇μ is the gradient of the model image.

The total energy functional is then given by

                              
                                 (8)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   E
                                                   T
                                                
                                                
                                                   (
                                                   x
                                                   ,
                                                   
                                                      β
                                                   
                                                   )
                                                
                                                =
                                                
                                                   E
                                                   d
                                                
                                                
                                                   (
                                                   x
                                                   ,
                                                   
                                                      β
                                                   
                                                   )
                                                
                                                +
                                                λ
                                                
                                                   E
                                                   r
                                                
                                                
                                                   (
                                                   x
                                                   ,
                                                   
                                                      β
                                                   
                                                   )
                                                
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           where the scalar regularization coefficient λ > 0 weights the regularizer term. This function is convex, since both 
                              
                                 E
                                 d
                              
                            and 
                              
                                 E
                                 r
                              
                            are convex, multiplying a convex function by a positive constant leaves it convex, and the sum of two convex functions is convex. Increasing λ increases the penalization of small undulations of the segmented filaments. Both λ and the scaling size h of the B-spline functions affect the robustness against noise and the segmentation precision of the method.


                           Now we can state the filament segmentation problem more formally: The goal is to design an algorithm that finds the optimal coefficients 
                              
                                 
                                    c
                                    ϕ
                                    *
                                 
                                 
                                    [
                                    k
                                    ]
                                 
                              
                            and 
                              
                                 
                                    c
                                    ψ
                                    *
                                 
                                 
                                    [
                                    k
                                    ]
                                 
                              
                            such that the energy in Eq. (8) is minimized, hence

                              
                                 (9)
                                 
                                    
                                       
                                          (
                                          
                                             c
                                             ϕ
                                             *
                                          
                                          
                                             [
                                             k
                                             ]
                                          
                                          ,
                                          
                                          
                                             c
                                             ψ
                                             *
                                          
                                          
                                             [
                                             k
                                             ]
                                          
                                          )
                                       
                                       =
                                       arg
                                       
                                          min
                                          
                                             
                                                c
                                                ϕ
                                             
                                             
                                                [
                                                k
                                                ]
                                             
                                             ,
                                             
                                                c
                                                ψ
                                             
                                             
                                                [
                                                k
                                                ]
                                             
                                          
                                       
                                       
                                          E
                                          T
                                       
                                       
                                          (
                                          x
                                          ,
                                          
                                             β
                                          
                                          )
                                       
                                       .
                                    
                                 
                              
                           Since the spline coefficients are normalized to 
                              
                                 [
                                 −
                                 1
                                 ,
                                 1
                                 ]
                              
                            (see Section 3.2.2), the domain of the optimization variables is the hypercube 
                              
                                 
                                    
                                       [
                                       −
                                       1
                                       ,
                                       1
                                       ]
                                    
                                    
                                       |
                                       k
                                       |
                                    
                                 
                                 ,
                              
                            which is a convex set. Minimizing a convex function over a convex domain constitutes a globally convex optimization problem. The result will hence be a globally optimal filament segmentation 
                              
                                 
                                    H
                                    f
                                    *
                                 
                                 
                                    (
                                    x
                                    )
                                 
                              
                           .

We provide an algorithm that globally optimizes the coefficients cϕ
                     [k] and cψ
                     [k] of the two B-spline level-set functions and estimates the mean intensities 
                        β
                      of the fore- and background regions. We use alternating minimization (Gunawardana and Byrne, 2005) over the energy functional in Eq. (8). We first introduce the method to estimate the intensities 
                        β
                     , followed by the procedure used to optimize the level-set coefficients. Since both the level-set optimization problem and the intensity estimation problem are convex, the alternating minimization scheme is guaranteed to converge (Gunawardana and Byrne, 2005). Note that the two problems are likely not jointly convex, but separately convex, which is enough for convergence (Gunawardana and Byrne, 2005). If needed, a jointly convex formulation could possibly be derived by extending recent works (Brown et al., 2012). A post-processing step then extracts parametric polynomial curves for all filaments.

Photometric estimation aims to estimate the mean intensity vector 
                           β
                         for fixed Hf
                        (
                           x
                        ). For a perfect imaging process (i.e., if 
                           
                              K
                              =
                              
                                 1
                              
                           
                        ), estimating 
                           β
                         is trivial, as we can directly use the average intensity of a region as its mean. With an imaging-distortion kernel K acting on μ(·), however, the optimal value for 
                           β
                         is not a simple average (Paul et al., 2013).

In this case, we minimize the data-fitting term to find the most likely value of 
                           β
                        . This convex problem is efficiently solved using the Fisher scoring algorithm (McCullagh, 1984; Nelder and Wedderburn, 1972). We use the freely available solver from Paul et al. (2013), and refer to it as the region statistics solver. This solver is called multiple times in the alternating minimization framework. After each call, Hf
                        (
                           x
                        ) is re-optimized using the new photometries, iterating until convergence (which is guaranteed for a separately convex problem). For this geometric optimization step, the spline coefficients are optimized using gradient descent.

The gradient-descent procedure iteratively evolves the coefficients for the two B-spline level-set functions ϕ(·) and ψ(·), going from iteration i to 
                           
                              i
                              +
                              1
                           
                         as

                           
                              (10)
                              
                                 
                                    
                                       
                                          
                                             
                                                c
                                                ϕ
                                                
                                                   (
                                                   i
                                                   +
                                                   1
                                                   )
                                                
                                             
                                             
                                                (
                                                k
                                                )
                                             
                                          
                                       
                                       
                                          
                                             =
                                             
                                                c
                                                ϕ
                                                
                                                   (
                                                   i
                                                   )
                                                
                                             
                                             
                                                (
                                                k
                                                )
                                             
                                             −
                                             α
                                             
                                                G
                                                ϕ
                                                
                                                   (
                                                   i
                                                   )
                                                
                                             
                                             
                                                (
                                                k
                                                )
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                c
                                                ψ
                                                
                                                   (
                                                   i
                                                   +
                                                   1
                                                   )
                                                
                                             
                                             
                                                (
                                                k
                                                )
                                             
                                          
                                       
                                       
                                          
                                             =
                                             
                                                c
                                                ψ
                                                
                                                   (
                                                   i
                                                   )
                                                
                                             
                                             
                                                (
                                                k
                                                )
                                             
                                             −
                                             α
                                             
                                                G
                                                ψ
                                                
                                                   (
                                                   i
                                                   )
                                                
                                             
                                             
                                                (
                                                k
                                                )
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where α is the step-size (automatically adapted as described below), and 
                           
                              
                                 G
                                 ϕ
                                 
                                    (
                                    i
                                    )
                                 
                              
                              
                                 (
                                 k
                                 )
                              
                           
                         and 
                           
                              
                                 G
                                 ψ
                                 
                                    (
                                    i
                                    )
                                 
                              
                              
                                 (
                                 k
                                 )
                              
                           
                         are the energy gradients for the two level-set functions, respectively. Instead of numerically approximating the gradients, we directly compute and use the regularized analytical gradients.

The gradient of the energy cannot directly be computed because of the Dirac and Heaviside distributions in Hf
                           . In order to get a continuously differentiable energy, we hence regularize them as previously described (Bernard et al., 2009):

                              
                                 (11)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   H
                                                   ϵ
                                                
                                                
                                                   (
                                                   x
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   1
                                                   
                                                      1
                                                      +
                                                      
                                                         e
                                                         
                                                            −
                                                            
                                                               ϵ
                                                               H
                                                            
                                                            x
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   δ
                                                   ϵ
                                                
                                                
                                                   (
                                                   x
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   1
                                                   π
                                                
                                                
                                                   (
                                                   
                                                      ϵ
                                                      δ
                                                   
                                                   /
                                                   
                                                      (
                                                      
                                                         
                                                            x
                                                         
                                                         2
                                                      
                                                      +
                                                      
                                                         ϵ
                                                         δ
                                                         2
                                                      
                                                      )
                                                   
                                                   )
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           Since the level function is normalized to 
                              
                                 [
                                 −
                                 1
                                 ,
                                 1
                                 ]
                                 ,
                              
                            we fix the regularization parameters to 
                              
                                 
                                    ϵ
                                    H
                                 
                                 =
                                 20
                              
                            and 
                              
                                 
                                    ϵ
                                    δ
                                 
                                 =
                                 0.1
                              
                            (Bernard et al., 2009).

The parametric representation of the level-set functions as B-splines allows us to directly compute the analytical gradients of the energy with respect to the spline coefficients using the chain rule for differentiation. For the data-fitting term 
                              
                                 
                                    E
                                    d
                                 
                                 
                                    (
                                    ·
                                    )
                                 
                                 ,
                              
                            we have

                              
                                 (12)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   G
                                                   ϕ
                                                   d
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   
                                                      ∂
                                                      
                                                         E
                                                         d
                                                      
                                                      
                                                         (
                                                         x
                                                         ,
                                                         
                                                            β
                                                         
                                                         )
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         c
                                                         ϕ
                                                      
                                                      
                                                         [
                                                         k
                                                         ]
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             
                                                =
                                                
                                                   (
                                                   
                                                      β
                                                      1
                                                   
                                                   −
                                                   
                                                      β
                                                      2
                                                   
                                                   )
                                                
                                                
                                                   ∫
                                                   
                                                      Ω
                                                      I
                                                   
                                                
                                                
                                                
                                                
                                                
                                                   B
                                                   
                                                      
                                                         p
                                                         *
                                                      
                                                   
                                                   ′
                                                
                                                
                                                   (
                                                   ·
                                                   ∥
                                                   ·
                                                   )
                                                
                                                K
                                                *
                                                
                                                   δ
                                                   ϵ
                                                   ′
                                                
                                                
                                                   (
                                                   ϕ
                                                   )
                                                
                                                
                                                   H
                                                   ϵ
                                                
                                                
                                                   (
                                                   ψ
                                                   )
                                                
                                                
                                                   b
                                                   n
                                                
                                                
                                                   (
                                                   
                                                      x
                                                      
                                                         h
                                                         +
                                                         1
                                                      
                                                   
                                                   −
                                                   k
                                                   )
                                                
                                                
                                                   d
                                                
                                                x
                                                ,
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   G
                                                   ψ
                                                   d
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   
                                                      ∂
                                                      
                                                         E
                                                         d
                                                      
                                                      
                                                         (
                                                         x
                                                         ,
                                                         
                                                            β
                                                         
                                                         )
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         c
                                                         ψ
                                                      
                                                      
                                                         [
                                                         k
                                                         ]
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             
                                                =
                                                
                                                   (
                                                   
                                                      β
                                                      1
                                                   
                                                   −
                                                   
                                                      β
                                                      2
                                                   
                                                   )
                                                
                                                
                                                   ∫
                                                   
                                                      Ω
                                                      I
                                                   
                                                
                                                
                                                
                                                
                                                
                                                   B
                                                   
                                                      
                                                         p
                                                         *
                                                      
                                                   
                                                   ′
                                                
                                                
                                                   (
                                                   ·
                                                   ∥
                                                   ·
                                                   )
                                                
                                                K
                                                *
                                                
                                                   δ
                                                   ϵ
                                                
                                                
                                                   (
                                                   ϕ
                                                   )
                                                
                                                
                                                   δ
                                                   ϵ
                                                
                                                
                                                   (
                                                   ψ
                                                   )
                                                
                                                
                                                   b
                                                   n
                                                
                                                
                                                   (
                                                   
                                                      x
                                                      
                                                         h
                                                         +
                                                         1
                                                      
                                                   
                                                   −
                                                   k
                                                   )
                                                
                                                
                                                   d
                                                
                                                x
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           For compactness of notation, we omit the arguments of the Bregman divergence, hence read 
                              
                                 
                                    B
                                    
                                       p
                                       *
                                    
                                 
                                 
                                    (
                                    ·
                                    ∥
                                    ·
                                    )
                                 
                              
                            as 
                              
                                 
                                    B
                                    
                                       p
                                       *
                                    
                                 
                                 
                                    (
                                    u
                                    
                                       (
                                       x
                                       )
                                    
                                    
                                    ∥
                                 
                                 
                                 
                                    g
                                    
                                       −
                                       1
                                    
                                 
                                 
                                    (
                                    K
                                    *
                                    μ
                                    
                                       (
                                       x
                                       ,
                                       
                                          β
                                       
                                       )
                                    
                                    )
                                 
                              
                            and 
                              
                                 B
                                 
                                    
                                       p
                                       *
                                    
                                 
                                 ′
                              
                            is the derivative with respect to the B-spline coefficients in μ. For the regularizer term 
                              
                                 
                                    E
                                    r
                                 
                                 
                                    (
                                    ·
                                    )
                                 
                                 ,
                              
                            we have

                              
                                 (13)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   G
                                                   ϕ
                                                   r
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   
                                                      ∂
                                                      
                                                         E
                                                         r
                                                      
                                                      
                                                         (
                                                         x
                                                         ,
                                                         
                                                            β
                                                         
                                                         )
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         c
                                                         ϕ
                                                      
                                                      
                                                         [
                                                         k
                                                         ]
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             
                                                =
                                                
                                                   ∫
                                                   
                                                      Ω
                                                      I
                                                   
                                                
                                                
                                                
                                                
                                                K
                                                *
                                                
                                                   
                                                      ∥
                                                      ∇
                                                      
                                                         δ
                                                         ϵ
                                                         ′
                                                      
                                                      
                                                         (
                                                         ϕ
                                                         )
                                                      
                                                      
                                                         H
                                                         ϵ
                                                      
                                                      
                                                         (
                                                         ψ
                                                         )
                                                      
                                                      ∥
                                                   
                                                   2
                                                
                                                
                                                   b
                                                   n
                                                
                                                
                                                   (
                                                   
                                                      x
                                                      
                                                         h
                                                         +
                                                         1
                                                      
                                                   
                                                   −
                                                   k
                                                   )
                                                
                                                
                                                   d
                                                
                                                x
                                                ,
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   G
                                                   ψ
                                                   r
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   
                                                      ∂
                                                      
                                                         E
                                                         r
                                                      
                                                      
                                                         (
                                                         x
                                                         ,
                                                         
                                                            β
                                                         
                                                         )
                                                      
                                                   
                                                   
                                                      ∂
                                                      
                                                         c
                                                         ψ
                                                      
                                                      
                                                         [
                                                         k
                                                         ]
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             
                                                =
                                                
                                                   ∫
                                                   
                                                      Ω
                                                      I
                                                   
                                                
                                                
                                                
                                                
                                                K
                                                *
                                                
                                                   
                                                      ∥
                                                      ∇
                                                      
                                                         δ
                                                         ϵ
                                                      
                                                      
                                                         (
                                                         ϕ
                                                         )
                                                      
                                                      
                                                         δ
                                                         ϵ
                                                      
                                                      
                                                         (
                                                         ψ
                                                         )
                                                      
                                                      ∥
                                                   
                                                   2
                                                
                                                
                                                   b
                                                   n
                                                
                                                
                                                   (
                                                   
                                                      x
                                                      
                                                         h
                                                         +
                                                         1
                                                      
                                                   
                                                   −
                                                   k
                                                   )
                                                
                                                
                                                   d
                                                
                                                x
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           The prime (′) means derivative with respect to the only variable of that function. The total gradient is the weighted sum of these two parts:

                              
                                 (14)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   G
                                                   ϕ
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   G
                                                   ϕ
                                                   d
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                                +
                                                λ
                                                
                                                   G
                                                   ϕ
                                                   r
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                                ,
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   G
                                                   ψ
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   G
                                                   ψ
                                                   d
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                                +
                                                λ
                                                
                                                   G
                                                   ψ
                                                   r
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

These analytical gradients can be efficiently evaluated numerically. Specifically, Eq. (14) can be rearranged as follows (taking 
                              
                                 
                                    G
                                    ϕ
                                 
                                 
                                    (
                                    k
                                    )
                                 
                              
                            as an example):

                              
                                 (15)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                
                                                   G
                                                   ϕ
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                
                                                =
                                                
                                                   ∫
                                                   
                                                      Ω
                                                      I
                                                   
                                                
                                                
                                                
                                                
                                                
                                                   
                                                      
                                                         K
                                                         *
                                                         
                                                            (
                                                            
                                                               (
                                                               
                                                                  β
                                                                  1
                                                               
                                                               
                                                               −
                                                               
                                                               
                                                                  β
                                                                  2
                                                               
                                                               )
                                                            
                                                            
                                                               B
                                                               
                                                                  p
                                                               
                                                               ′
                                                            
                                                            
                                                               (
                                                               ·
                                                               ∥
                                                               ·
                                                               )
                                                            
                                                            
                                                               δ
                                                               ϵ
                                                               ′
                                                            
                                                            
                                                               (
                                                               ϕ
                                                               )
                                                            
                                                            
                                                               H
                                                               ϵ
                                                            
                                                            
                                                               (
                                                               ψ
                                                               )
                                                            
                                                            
                                                            +
                                                            
                                                            λ
                                                            
                                                               
                                                                  ∥
                                                                  ∇
                                                                  
                                                                     δ
                                                                     ϵ
                                                                     ′
                                                                  
                                                                  
                                                                     (
                                                                     ϕ
                                                                     )
                                                                  
                                                                  
                                                                     H
                                                                     ϵ
                                                                  
                                                                  
                                                                     (
                                                                     ψ
                                                                     )
                                                                  
                                                                  ∥
                                                               
                                                               2
                                                            
                                                            )
                                                         
                                                      
                                                      ︸
                                                   
                                                   
                                                      a
                                                      
                                                      function
                                                      
                                                      
                                                         ω
                                                         ϕ
                                                      
                                                      
                                                         (
                                                         x
                                                         )
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                
                                                ·
                                                
                                                   b
                                                   n
                                                
                                                
                                                   (
                                                   
                                                      x
                                                      
                                                         h
                                                         +
                                                         1
                                                      
                                                   
                                                   −
                                                   k
                                                   )
                                                
                                                
                                                   d
                                                
                                                x
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           It can hence be interpreted as a convolution of the function ωϕ
                           (
                              x
                           ) with the spline basis bn
                           (·). This simplifies the gradient calculation for each coefficient in cϕ
                           [k] to

                              
                                 (16)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   G
                                                   ϕ
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   ω
                                                   ϕ
                                                
                                                
                                                   (
                                                   x
                                                   )
                                                
                                                *
                                                
                                                   b
                                                   n
                                                
                                                
                                                   (
                                                   
                                                      x
                                                      
                                                         h
                                                         +
                                                         1
                                                      
                                                   
                                                   −
                                                   k
                                                   )
                                                
                                                ,
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   G
                                                   ψ
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                =
                                                
                                                   ω
                                                   ψ
                                                
                                                
                                                   (
                                                   x
                                                   )
                                                
                                                *
                                                
                                                   b
                                                   n
                                                
                                                
                                                   (
                                                   
                                                      x
                                                      
                                                         h
                                                         +
                                                         1
                                                      
                                                   
                                                   −
                                                   k
                                                   )
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

@&#IMPLEMENTATION DETAILS@&#

A first technical issue is that any gradient-descent strategy is sensitive to the value of the step size α. In our implementation, we dynamically adapt the step size so as to guarantee that the energy decreases in each step. For this, we do a simple line search to find the optimal step size in each iteration. The search uses recursive bisection (binary search) starting from an initial value 
                              
                                 
                                    α
                                    0
                                 
                                 =
                                 1
                              
                            (recall that the coefficients are normalized to 
                              
                                 [
                                 −
                                 1
                                 ,
                                 1
                                 ]
                              
                           ). By construction, the resulting α is guaranteed to decrease the energy.

A second technical issue is the presence of strong local distortions that may be introduced into the level functions by the energy minimization process. The level-set functions may in principle develop arbitrarily steep or flat gradients, challenging the numerical stability of the algorithm. Traditional implementations of level-set methods address this problem by periodically re-initializing the level function to a signed-distance function from the zero level-set. This, however, comes with two important drawbacks: extra computational costs and insufficient topological flexibility (Tsai and Osher, 2003). In our case, we do not require a signed-distance property, but simply wish to bound the gradient magnitudes for numerical stability. Thanks to the parametric B-spline representation of the level functions, this can be done by simple coefficient re-normalization. This idea was originally introduced in Gelas et al. (2007). We hence normalize the coefficients cϕ
                           (·) and cψ
                           (·) in each iteration by dividing with the ℓ∞-norm over all coefficients after each gradient-descent iteration:

                              
                                 (17)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   c
                                                   ϕ
                                                   
                                                      (
                                                      i
                                                      )
                                                   
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                ←
                                                
                                                   
                                                      
                                                         c
                                                         ϕ
                                                         
                                                            (
                                                            i
                                                            )
                                                         
                                                      
                                                      
                                                         (
                                                         k
                                                         )
                                                      
                                                   
                                                   
                                                      
                                                         ∥
                                                      
                                                      
                                                         c
                                                         ϕ
                                                         
                                                            (
                                                            i
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               (
                                                               k
                                                               )
                                                            
                                                            ∥
                                                         
                                                         ∞
                                                      
                                                   
                                                
                                                ,
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   c
                                                   ψ
                                                   
                                                      (
                                                      i
                                                      )
                                                   
                                                
                                                
                                                   (
                                                   k
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                ←
                                                
                                                   
                                                      
                                                         c
                                                         ψ
                                                         
                                                            (
                                                            i
                                                            )
                                                         
                                                      
                                                      
                                                         (
                                                         k
                                                         )
                                                      
                                                   
                                                   
                                                      
                                                         ∥
                                                      
                                                      
                                                         c
                                                         ψ
                                                         
                                                            (
                                                            i
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               (
                                                               k
                                                               )
                                                            
                                                            ∥
                                                         
                                                         ∞
                                                      
                                                   
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           After normalization, the norm of the gradient of the level-set function is bounded, as proven in Bernard et al. (2009). This normalization has two main advantages: the first is its modest computational cost, the second is that it does not counteract the creation of new zero-level components, thereby conserving topological flexibility.

The complete optimization algorithm is summarized in Algorithm 1
                           . The algorithm terminates as soon as the energy improvement achieved in the last iteration is less than a fixed tolerance of 
                              
                                 ξ
                                 =
                                 
                                    10
                                    
                                       −
                                       3
                                    
                                 
                                 ,
                              
                            indicating that the algorithm has converged at the global optimum. The output of Algorithm 1 are the two optimal B-spline level functions ϕ
                           *(·) and ψ
                           *(·). The following post-processing stage then extracts all zero-level curves from these level functions and stores them as polynomials.

The optimal level functions ϕ
                        *(·) and ψ
                        *(·) jointly encode all filaments in a single optimal indicator function 
                           
                              
                                 H
                                 f
                                 *
                              
                              
                                 (
                                 x
                                 )
                              
                           
                        . Due to the regularization in Eq. (11), this function is smooth and takes values in the interval [0, 1], rather than being binary. The post-processing stage serves a double purpose: it determines the total number of filaments detected and then represents each filament as a parametric polynomial.

The total number of filaments is determined by thresholding the smooth 
                           
                              
                                 H
                                 f
                                 *
                              
                              
                                 (
                                 x
                                 )
                              
                           
                         followed by extracting the foreground regions according to their topological connectivity. Representing each filament by a polynomial starts from extracting all local maxima from the original 
                           
                              
                                 H
                                 f
                                 *
                              
                              
                                 (
                                 x
                                 )
                              
                           
                        .

In order to split the global vector level function into individual filaments, we threshold the smooth 
                              
                                 
                                    H
                                    f
                                    *
                                 
                                 
                                    (
                                    x
                                    )
                                 
                              
                            according to the optimal energy value 
                              
                                 E
                                 T
                                 *
                              
                            achieved by Algorithm 1. For this, 
                              
                                 
                                    H
                                    f
                                    *
                                 
                                 
                                    (
                                    x
                                    )
                                 
                              
                            is thresholded with an arbitrary initial threshold ξ. After thresholding, we calculate the resulting energy 
                              
                                 E
                                 T
                                 ξ
                              
                           . Performing a line search, we determine the threshold ξ
                           * that leads to an energy closest to 
                              
                                 E
                                 T
                                 *
                              
                           . Since the set of binary functions is a subset of the set of functions over the interval [0, 1], this threshold is optimal. Thus, the optimally thresholded binary indicator function is 
                              
                                 
                                    
                                       H
                                       ¯
                                    
                                    f
                                 
                                 
                                    (
                                    x
                                    )
                                 
                              
                           .

All points si
                           (
                              x
                           ) with 
                              
                                 
                                    
                                       H
                                       ¯
                                    
                                    f
                                 
                                 
                                    (
                                    x
                                    )
                                 
                                 =
                                 1
                              
                            that are connected by reachable paths lie on the same filament. We hence identify regions of disjoint filaments (not the filament themselves!) as connected components in a 10-fold oversampled image of 
                              
                                 
                                    
                                       H
                                       ¯
                                    
                                    f
                                 
                                 
                                    (
                                    x
                                    )
                                 
                              
                            (i.e., 100 grid points per pixel) using the MATLAB routine 
                              bwconncomp
                           .

After identifying the region of each si
                           (
                              x
                           ), the body of the filament is identified by all local maxima of the original 
                              
                                 
                                    H
                                    f
                                    *
                                 
                                 
                                    (
                                    x
                                    )
                                 
                              
                            in that region. These are, to sub-pixel accuracy, the points of highest localization probability of the filament. Let 
                              
                                 
                                    
                                       s
                                       ˜
                                    
                                    i
                                 
                                 
                                    (
                                    x
                                    )
                                 
                              
                            denote the so-determined finite set of tip and body points of filament i.

In order to provide a parametric description of each filament, we fit 
                              
                                 
                                    
                                       s
                                       ˜
                                    
                                    i
                                 
                                 
                                    (
                                    x
                                    )
                                 
                              
                            with a B-spline, which is then converted to a single polynomial. While this step is not strictly necessary, it facilitates later access to geometric features of the filaments, such as normals and curvatures. Fitting 
                              
                                 
                                    
                                       s
                                       ˜
                                    
                                    i
                                 
                                 
                                    (
                                    x
                                    )
                                 
                              
                            does not degrade the accuracy of the solution because the fitted positions already minimize the energy 
                              
                                 E
                                 T
                              
                           . This problem has been studied before, and we solve it using cubic smoothing splines as, e.g., implemented in the MATLAB routine 
                              csaps
                            to solve the fitting problem:

                              
                                 (18)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   min
                                                   
                                                      
                                                         c
                                                         i
                                                      
                                                      
                                                         (
                                                         x
                                                         )
                                                      
                                                   
                                                
                                                
                                                   ∫
                                                   
                                                      x
                                                      ∈
                                                      
                                                         
                                                            s
                                                            ˜
                                                         
                                                         i
                                                      
                                                      
                                                         (
                                                         x
                                                         )
                                                      
                                                   
                                                
                                                
                                                   
                                                   
                                                   
                                                   p
                                                   ∥
                                                
                                                
                                                   c
                                                   i
                                                
                                                
                                                   (
                                                   x
                                                   )
                                                
                                                −
                                                
                                                   
                                                      s
                                                      ˜
                                                   
                                                   i
                                                
                                                
                                                   
                                                      
                                                         (
                                                         x
                                                         )
                                                      
                                                      ∥
                                                   
                                                   2
                                                
                                                
                                                
                                                   d
                                                
                                                x
                                                +
                                                
                                                   (
                                                   1
                                                   −
                                                   p
                                                   )
                                                
                                                
                                                   ∫
                                                   0
                                                   1
                                                
                                                
                                                
                                                
                                                
                                                   
                                                      ∥
                                                      ∂
                                                      
                                                         c
                                                         i
                                                      
                                                      
                                                         (
                                                         t
                                                         )
                                                      
                                                      ∥
                                                   
                                                   2
                                                
                                                
                                                
                                                   d
                                                
                                                t
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           which yields for each filament i a polynomial c
                           
                              i
                           (·) that minimizes the distance to the point set 
                              
                                 
                                    
                                       s
                                       ˜
                                    
                                    i
                                 
                                 
                                    (
                                    x
                                    )
                                 
                                 ,
                              
                            penalizing the total variation of the curve. The coefficient p balances data-fitting and curve length, and t ∈ [0, 1] is the curve parameter.

The pseudo code of the entire post-processing step is summarized in Algorithm 2
                           .

@&#SUMMARY@&#

We use two B-spline level sets to represent filament objects without restricting their topology. This is neither an open parametric curve nor a pixel mask. This representation enables our method to detect and segment previously unknown numbers of filaments, while preserving sub-pixel curve resolution for each filament. Additionally, the B-spline formulation enables analytically computing the energy gradients for global optimization, and extracting parametric polynomials for all detected filaments.

Our proposed algorithm optimizes the coefficients of the two level functions using gradient information. Each iteration consists of three steps: the gradient-descent procedure, the photometric estimation, and the coefficient normalization. A post-processing step at the end then extracts the parametric polynomial descriptions of all detected filaments. Since all problems are convex, the final result is globally optimal with respect to the imaging model postulated.

A natural question to ask is how closely this globally optimal reconstruction represents the true filaments that were imaged. The imaging process and the pixel noise irreversibly destroy image information. In addition, the geometric representation of the filaments as B-spline level sets, as well as the model of the transfer function of the microscope, may not be appropriate. Thus we ask the question: “What is the theoretical bound of the localization error of the filament, considering the information contained in an image, and what is the expected performance of an optimal and unbiased algorithm?”

This is the question about a theoretical lower bound on the segmentation error. For point sources, this bound is known: given M photons that are all emitted from the same point source and imaged with a Gaussian PSF of standard deviation σ, the location of the point source can only be estimated with an error of at least 
                        
                           σ
                           /
                           
                              M
                           
                        
                      (Ober et al., 2004). This is a direct consequence of the Central Limit Theorem. For non-Gaussian PSFs and more complex noise models, similar bounds have also been derived (Chao et al., 2013; Ober et al., 2015). No unbiased algorithm could possibly break them.

Such a theoretical lower bound is not known for filaments, where the situation is considerably more complex than for point sources. The photon sources along a filament are correlated through the filament geometry, which is unknown. A theoretical bound can hence only be derived by assuming something about the smoothness of the filaments, that is the function space in which they live.

Here, we study this problem and provide a theoretical lower bound on the filament segmentation error. First, we consider the general case, where we do not assume anything about how the filaments are represented in the computer. This bound is valid for any unbiased filament segmentation algorithm. Then, we derive the lower bound for the special case where the filaments are represented by vector B-spline level sets, as in our framework. This characterizes the capability of any vector level-set algorithm to segment filaments and leads to a bound that is actually computable.

Since we segment filaments, the lower bound is on the error of the filament geometry. A similar lower bound for the estimated filament intensity, or even a joint lower bound for geometry plus intensity, could possibly be derived in a similar fashion.

Without loss of generality, we only consider the case where a single filament is represented in the image. Since our algorithm assumes that filaments never cross, the multi-filament case can always be reduced to the single-filament case by cropping or decomposing the image accordingly.

Let a curve γ(s) denote the true imaged filament, where s ∈ [0, 1] is the curve parameter. We assume γ(s) ∈ C
                        2, i.e., continuous and at least twice differentiable. A segmentation algorithm reconstructs the filament as 
                           
                              
                                 γ
                                 ^
                              
                              
                                 (
                                 s
                                 )
                              
                           
                         from a single image u(
                           x
                        ) that represents the intensity values in a 2D image domain 
                           
                              Ω
                              I
                           
                        .

The posterior p.d.f. of γ(s) in a Bayesian sense is

                           
                              (19)
                              
                                 
                                    
                                       
                                          
                                             p
                                             
                                                (
                                                u
                                                (
                                                x
                                                )
                                                ,
                                                γ
                                                (
                                                s
                                                )
                                                )
                                             
                                             ∝
                                             p
                                             
                                                (
                                                u
                                                (
                                                x
                                                )
                                                
                                                |
                                                
                                                γ
                                                (
                                                s
                                                )
                                                )
                                             
                                             p
                                             
                                                (
                                                γ
                                                (
                                                s
                                                )
                                                )
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where the first term on the right-hand side is the likelihood of u(
                           x
                        ) given the filament γ(s), and the second term is the prior probability of γ(s).

The perfect (i.e., noise-free and perfect imaging identity function) image one would expect to see from γ(s) is

                           
                              (20)
                              
                                 
                                    
                                       
                                          
                                             u
                                             
                                                (
                                                x
                                                )
                                             
                                             =
                                             I
                                             
                                                (
                                                s
                                                )
                                             
                                             ·
                                             δ
                                             
                                                (
                                                d
                                                (
                                                x
                                                ,
                                                γ
                                                (
                                                s
                                                )
                                                )
                                                )
                                             
                                             ,
                                             
                                             ∀
                                             x
                                             ∈
                                             
                                                Ω
                                                I
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where I(s) is the intensity of the filament, d(·) is the closest-point transform (CPT) yielding the shortest distance from 
                           x
                         to the filament, and δ(·) is the Dirac delta distribution. If 
                           x
                         is on γ(s), then 
                           
                              d
                              (
                              ·
                              )
                              =
                              0
                           
                         and 
                           
                              δ
                              (
                              ·
                              )
                              =
                              1
                              ,
                           
                         otherwise 
                           
                              δ
                              (
                              ·
                              )
                              =
                              0
                           
                        .

As an error metric, we consider the mean squared error (MSE) between the estimated filament 
                           
                              
                                 γ
                                 ^
                              
                              
                                 (
                                 s
                                 )
                              
                           
                         and the true filament γ(s). Let the operator 
                           E
                         denote expectation with respect to its subscript. The MSE then is

                           
                              (21)
                              
                                 
                                    
                                       
                                          
                                             
                                                Σ
                                             
                                             =
                                             
                                                E
                                                
                                                   u
                                                   ,
                                                   γ
                                                
                                             
                                             
                                                {
                                                
                                                   
                                                      [
                                                      
                                                         γ
                                                         ^
                                                      
                                                      
                                                         (
                                                         s
                                                         )
                                                      
                                                      −
                                                      γ
                                                      
                                                         (
                                                         s
                                                         )
                                                      
                                                      ]
                                                   
                                                   2
                                                
                                                }
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The Bayesian Cramér Rao Bound (B-CRB) C (van Trees, 2004) provides a lower bound on the MSE 
                           Σ
                        . It is the inverse of the Bayesian information J of the posterior in Eq. (19). Thus, we have

                           
                              (22)
                              
                                 
                                    
                                       
                                          
                                             
                                                Σ
                                             
                                             ≥
                                             C
                                             ≡
                                             
                                                J
                                                
                                                   −
                                                   1
                                                
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        indicating that 
                           
                              
                                 Σ
                              
                              −
                              C
                           
                         (or equivalently 
                           
                              
                                 Σ
                              
                              −
                              
                                 J
                                 
                                    −
                                    1
                                 
                              
                           
                        ) is a positive semi-definite matrix.

We further elaborate the Bayesian information matrix J. Let Δ denote the 2nd-order differential operator (i.e., the Laplacian) with respect to its subscript. The Bayesian information matrix then is

                           
                              (23)
                              
                                 
                                    
                                       
                                          
                                             J
                                             =
                                             
                                                E
                                                
                                                   u
                                                   ,
                                                   γ
                                                
                                             
                                             
                                                {
                                                −
                                                
                                                   Δ
                                                   γ
                                                
                                                ln
                                                p
                                                
                                                   (
                                                   u
                                                   (
                                                   x
                                                   )
                                                   ,
                                                   γ
                                                   (
                                                   s
                                                   )
                                                   )
                                                
                                                }
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        This can be interpreted as a sum of two terms after the “ln ” operation:

                           
                              (24)
                              
                                 
                                    
                                       
                                          
                                             J
                                             =
                                             
                                                J
                                                ℓ
                                             
                                             +
                                             
                                                J
                                                p
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where J
                        
                           p
                         is the a-priori information matrix

                           
                              (25)
                              
                                 
                                    
                                       
                                          
                                             
                                                J
                                                p
                                             
                                             =
                                             
                                                E
                                                p
                                             
                                             
                                                {
                                                −
                                                
                                                   Δ
                                                   γ
                                                
                                                ln
                                                p
                                                
                                                   (
                                                   γ
                                                   (
                                                   s
                                                   )
                                                   )
                                                
                                                }
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        and J
                        ℓ is the contribution from the give image data to the information. It is the expected value of the standard Fisher information matrix 
                           
                              
                                 I
                                 ℓ
                              
                              
                                 (
                                 γ
                                 
                                    (
                                    s
                                    )
                                 
                                 )
                              
                           
                         with respect to the prior p.d.f. p(γ(s)):

                           
                              (26)
                              
                                 
                                    
                                       
                                          
                                             J
                                             ℓ
                                          
                                       
                                       
                                          
                                             =
                                             
                                                E
                                                
                                                   u
                                                   ,
                                                   γ
                                                
                                             
                                             
                                                {
                                                −
                                                
                                                   Δ
                                                   γ
                                                
                                                ln
                                                p
                                                
                                                   (
                                                   u
                                                   (
                                                   x
                                                   )
                                                   
                                                   |
                                                   
                                                   γ
                                                   (
                                                   s
                                                   )
                                                   
                                                   )
                                                   )
                                                
                                                }
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             =
                                             
                                                E
                                                γ
                                             
                                             
                                                {
                                                
                                                   I
                                                   ℓ
                                                
                                                
                                                   (
                                                   γ
                                                   
                                                      (
                                                      s
                                                      )
                                                   
                                                   )
                                                
                                                }
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where

                           
                              (27)
                              
                                 
                                    
                                       
                                          
                                             
                                                I
                                                ℓ
                                             
                                             
                                                (
                                                γ
                                                
                                                   (
                                                   s
                                                   )
                                                
                                                )
                                             
                                             =
                                             
                                                E
                                                
                                                   u
                                                   |
                                                   γ
                                                
                                             
                                             
                                                {
                                                −
                                                
                                                   Δ
                                                   γ
                                                
                                                ln
                                                p
                                                
                                                   (
                                                   u
                                                   (
                                                   x
                                                   )
                                                   
                                                   |
                                                   
                                                   γ
                                                   (
                                                   s
                                                   )
                                                   )
                                                
                                                }
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Given the image data, the lower bound in Eq. (22) generally characterizes the minimum estimation error any unbiased estimator must make. The decomposition into a-priori and data information also nicely illustrates that one can obtain more accurate estimated by either assuming stronger prior knowledge about the true filament, or by having a more informative (e.g., less noisy) data image. This general lower bound, however, is difficult to concretely evaluate due to the CPT term in u(
                           x
                        ). The only way of evaluating the lower bound in the general case is by applying numerical simulations.

If one assumes that γ(s) is represented by a B-Spline level set, then an analytical expression for the lower bound can be derived. By definition, this special bound is larger than or equal to the general bound above. The model μ(·) in Eq. (1) is then defined by two level functions, each of which is a B-spline as given by Eq. (4). Accordingly, the B-CRB in Eq. (23) can be used to bound the minimum error in the coefficients of the two B-spline functions, i.e., in cϕ
                        [k] and cψ
                        [k]:

                           
                              (28)
                              
                                 
                                    
                                       
                                          
                                             J
                                             
                                                
                                                   c
                                                   ϕ
                                                
                                                ,
                                                
                                                   c
                                                   ψ
                                                
                                             
                                          
                                       
                                       
                                          
                                             =
                                             
                                                E
                                                
                                                   u
                                                   ,
                                                   
                                                      c
                                                      ϕ
                                                   
                                                   ,
                                                   
                                                      c
                                                      ψ
                                                   
                                                
                                             
                                             
                                                {
                                                −
                                                
                                                   Δ
                                                   
                                                      
                                                         c
                                                         ϕ
                                                      
                                                      
                                                         c
                                                         ψ
                                                      
                                                   
                                                
                                                ln
                                                p
                                                
                                                   (
                                                   u
                                                   
                                                      (
                                                      x
                                                      )
                                                   
                                                   
                                                   |
                                                   
                                                   K
                                                   *
                                                   μ
                                                   
                                                      (
                                                      x
                                                      ,
                                                      
                                                         β
                                                      
                                                      )
                                                   
                                                   )
                                                
                                                }
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             =
                                             
                                                E
                                                
                                                   u
                                                   ,
                                                   
                                                      c
                                                      ϕ
                                                   
                                                   ,
                                                   
                                                      c
                                                      ψ
                                                   
                                                
                                             
                                             
                                                {
                                                −
                                                
                                                   Δ
                                                   
                                                      
                                                         c
                                                         ϕ
                                                      
                                                      
                                                         c
                                                         ψ
                                                      
                                                   
                                                
                                                
                                                   ∫
                                                   
                                                      Ω
                                                      I
                                                   
                                                
                                                
                                                
                                                
                                                
                                                   p
                                                   *
                                                
                                                
                                                   (
                                                   u
                                                   
                                                      (
                                                      x
                                                      )
                                                   
                                                   
                                                   |
                                                   
                                                   K
                                                   *
                                                   μ
                                                   
                                                      (
                                                      x
                                                      ,
                                                      
                                                         β
                                                      
                                                      )
                                                   
                                                   )
                                                
                                                
                                                
                                                   d
                                                
                                                x
                                                }
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where p
                        *(·) is the p.d.f. of the noise model. In our case, it has to be a member of the EF.

For any p.d.f. from the EF, this B-CRB is asymptotically attainable (Wijsman, 1973). It is hence tight. We demonstrate this below, where we experimentally evaluate the segmentation error and compare it with the theoretical bound.

@&#EXPERIMENTAL RESULTS@&#

We evaluate the applicability and accuracy of the present method on a number of different image types. The tests consider images from phase-contrast, fluorescence, and dark-field microscopy with varying numbers of filaments in them. For quantitatively evaluating the segmentation accuracy, we use synthetic images, in which the underling shape is known. In the following, we will be referring to this true shape as the ground truth. For all tests, we use the MATLAB implementation of the algorithm.

To
                      create synthetic benchmark data, we generate random polynomial curves of order 3 in a 150 × 150 continuous domain. Based on these ground truth filament objects, we simulate an expected image using the two imaging models, fluorescence and phase contrast. The simulated continuous image is then sampled onto a 150 × 150 discrete pixel grid. The fluorescence imaging model is continuous convolution with a Gaussian PSF of 
                        
                           σ
                           =
                           3.32
                        
                      pixel, corresponding to the experimentally measured PSF FWHM=500 nm (full width at half maximum) of the microscope used when imaging 25 nm fluorescent microtubules. The phase-contrast imaging model from Yin et al. (2010) is used with parameters measured from an image of the back focal plane of the microscope used here (phase ring inner diameter 2 mm, outer diameter 2.5 mm, back aperture 5.8 mm). After that, we add noise to the image using the corresponding noise model (Gaussian or Poisson). We choose filament and background intensities β
                     1 and β
                     2 such that a pre-defined signal-to-noise ratio (SNR) is achieved. In order to make the SNR values comparable across different noise models, we use the distribution-independent definition based on the Bhattacharyya distance 
                        B
                      between the noise-free image histogram and the noisy image histogram: 
                        
                           SNR
                           =
                           
                              
                                 8
                                 B
                              
                           
                        
                      (Goudail et al., 2004). For the fluorescence model, we keep the background fixed at 
                        
                           
                              β
                              2
                           
                           =
                           10
                        
                      and vary the filament intensity β
                     1 to change the SNR. For the phase-contrast model, we keep the filament fixed at 
                        
                           
                              β
                              1
                           
                           =
                           10
                        
                      and vary the background intensity β2
                     . In order to test how the algorithm behaves when the filament intensity is not uniform, we also generate complete sets of test images with linearly shaded intensity of 50% and 70% magnitude along the filament axis. For the 50% shading, the intensity linearly varies along the filament from 1.5β
                     1 to 0.5β
                     1, such that the average intensity (and hence the average SNR) remains the same. The 70% shading case uses a linear intensity gradient from 1.7β
                     1 to 0.3β
                     1. Even though it is impossible to exhaustively test all possible spatial intensity distributions, this linear test assesses how the algorithm behaves when the actual images strongly depart from the theoretical assumption of uniform intensity. Some examples of synthetic images for different SNR are shown in Fig. 3. All images are stored as 8bit TIFF files. The complete set of 4000 benchmark images (1000 per case) can be downloaded from the MOSAIC Group’s web site mosaic.mpi-cbg.de.

All segmentations start from the same initialization with the two level functions ϕ(
                        x
                     ) and ψ(
                        x
                     ) being Euclidean distance functions from two uniformly randomly placed points oϕ
                      and oψ
                      in the image domain, respectively. This describes a random filament with one bend, illustrating how the topology and geometry of the segmentation can change during algorithm evolution. However, since the problem is convex, the result is independent of the initialization.

We first provide an illustrative example for better understanding. After that, we demonstrate the differences between our present method and other state-of-the-art filament segmentation methods. We then quantitatively evaluate the segmentation errors of our proposed method on synthetic images with known ground truth. Finally, we show applicability of our proposed method to real images.

We start with a simple illustrative example to visualize the working of our proposed algorithm. We artificially generate an image of two straight filaments with an SNR = 10, Gaussian noise, and blur with a Gaussian PSF of 
                           
                              σ
                              =
                              3
                           
                         pixel. The resulting image is shown in Fig. 4a. The evolution of the soft indicator function Hf
                        (
                           x
                        ) over the iterations of the gradient-descent procedure is shown in Fig. 4b to Fig. 4h, starting from the random initialization described above that is far from ground truth.

After 60 iterations, the algorithm has converged to the optimal 
                           
                              
                                 H
                                 f
                                 *
                              
                              
                                 (
                                 x
                                 )
                              
                           
                         shown in Fig. 4h. The algorithm converges rapidly and correctly detects the not previously specified number of two filaments. The topology of the segmentation changes several times during the process. Thresholding 
                           
                              
                                 H
                                 f
                                 *
                              
                              
                                 (
                                 x
                                 )
                              
                           
                         using the post-processing algorithm correctly identifies the two filaments. Since we can evaluate the continuous B-spline level functions (and hence also 
                           
                              
                                 H
                                 f
                                 *
                              
                              
                                 (
                                 x
                                 )
                              
                           
                        ) to any precision we want, the segmentation results have sub-pixel resolution.

Additionally, this example illustrates that the final indicator function 
                           
                              
                                 H
                                 f
                                 *
                              
                              
                                 (
                                 x
                                 )
                              
                           
                         is not perfectly binary, but continuous in [0, 1]. The value corresponds to a localization “likelihood” of the filaments.

We illustrate the behavior of our method by comparing it to existing methods from each of the four classes introduced previously: an optimal pixel mask method (Alternating Split-Bregman, “ASB”) (Paul et al., 2013), an active contour method (“Act. Contour”) (Goldstein et al., 2010), an open-curve fitting method (“SOAC”) (we use the software by Smith et al. (2010) of which a later extension to 3D is also available (Xu et al., 2014)), and a semi-automatic hybrid method (“FIESTA”) (Ruhnow et al., 2011). FIESTA (Ruhnow et al., 2011) is a semi-automatic method that uses manual thresholding to circumvent the segmentation problem. After thresholding, FIESTA efficiently solves a localization/detection problem. We nevertheless show the result here as a benchmark. We use a synthetic image containing a single filament, as this is the least common denominator that can be solved by all compared methods without additional prior knowledge. The segmentation results are shown in Fig. 5
                        .

While both the pixel-mask method (Paul et al., 2013) and the active contour (Goldstein et al., 2010) correctly identify the filament, they represent it as a region of finite thickness, rather than as a curve. Additionally, the pixel mask as in Fig. 5a can only provide pixel-level resolution. While the open-curve fitting method as in Fig. 5c segments the filament as a curve, it is sensitive to noise and ends with a non-optimal solution where the curve fails to trace the entire filament. FIESTA Fig. 5d provides the best result from all previous methods, providing a geometric curve with sub-pixel accuracy. Our method as in Fig. 5e provides a result that is qualitatively as good as that from FIESTA, but solves the full segmentation problem without requiring any manual thresholding. It handles local minima well and is insensitive to noise because the underlying optimization problem is globally convex.

After highlighting these qualitative differences, we present a quantitative comparison of the accuracy of the present method. High accuracy is often desired when monitoring the temporal growth dynamics of individual filaments, where already changes of half a pixel or less can give rise to polymerization/depolymerization switches, which are biologically or biophysically relevant.

We use 4000 synthetic images (described above, 100 images per case and SNR) with known ground truth to quantitatively evaluate the detection and segmentation accuracy. We first evaluate the mean-square error (MSE) in the spline coefficients and compare it with the theoretical B-CRB, showing that our method asymptotically approaches the lower error bound. Second, we quantify how the error grows as the images depart from the theoretical assumption of uniform intensity along the filaments, using both the 50% and 70% shading cases. Third, we quantify the influence of the two algorithm parameters (i.e., the scaling size h and the regularization coefficient λ) on the accuracy of filament segmentation, and we make recommendations for parameter choices.

While measuring the error in the spline coefficients can directly be done using the MSE, comparing segmented filaments with ground truth requires more intuitive error metrics: first, we use the standard Dice coefficient to quantify the detection quality of the segmentation, i.e., how well the filaments were identified. Second, we use the Fréchet distance to quantify how accurately the correctly detected filaments were segmented to sub-pixel accuracy. In addition, we report the percentage of cases where the filament has been correctly identified and no spurious filaments were segmented (i.e., no under- or over-segmentation). These error metrics quantify the difference between a segmentation result and ground truth, which is not to be confused with the Bregman divergence used to quantify differences between the model image and the data.

The Dice coefficient measures the overlap between ground truth and the obtained segmentation as 
                           
                              2
                              T
                              P
                              /
                              (
                              (
                              F
                              P
                              +
                              T
                              P
                              )
                              +
                              (
                              T
                              P
                              +
                              F
                              N
                              )
                              )
                              ,
                           
                         where TP are the true positives, defined here as all pixels in the segmentation that are within ± 5 pixel from the ground truth filament. Similarly, FN are the false negatives (pixels missed from ground truth to within ± 5 pixel) and FP the false positives (pixels of spurious filaments detected farther than 5 pixel from ground truth). We use the 5 pixel detection tolerance because the Gaussian PSF has σ ≈ 4 pixel blur. A Dice coefficient of 0 means that no filament pieces were correctly detected, one of 1 means that all filament pieces were correctly detected with no spurious false positives.

For those filaments that were correctly detected within the 5 pixel tolerance, we quantify the worst-case segmentation error using the Fréchet distance:

                           
                              
                                 
                                    
                                       
                                          
                                             F
                                             
                                                (
                                                
                                                   c
                                                   a
                                                
                                                ,
                                                
                                                   c
                                                   b
                                                
                                                )
                                             
                                             =
                                             
                                                inf
                                                
                                                   ζ
                                                   ,
                                                   η
                                                
                                             
                                             
                                                max
                                                
                                                   t
                                                   ∈
                                                   [
                                                   0
                                                   ,
                                                   1
                                                   ]
                                                
                                             
                                             
                                                {
                                                
                                                   ∥
                                                
                                                
                                                   c
                                                   a
                                                
                                                
                                                   (
                                                   ζ
                                                   
                                                      (
                                                      t
                                                      )
                                                   
                                                   )
                                                
                                                −
                                                
                                                   c
                                                   b
                                                
                                                
                                                   
                                                      
                                                         (
                                                         η
                                                         
                                                            (
                                                            t
                                                            )
                                                         
                                                         )
                                                      
                                                      ∥
                                                   
                                                   2
                                                
                                                }
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where c
                        
                           a
                         and c
                        
                           b
                         are two parametric curves with parameter t ∈ [0, 1]. The functions ζ and η range over all monotone reparametrizations. This is a standard metric to measure the similarity between two curves. Identical curves have a Fréchet distance of zero. The Fréchet distance can be interpreted as the minimum cord length sufficient to join a point traveling forward along one curve and one traveling forward along the other, although the speed of travel for either point may not necessarily be uniform. The Fréchet distance is not computable for general continuous curves, but can be efficiently computed for curves given by polynomials, as is the case here. This discrete Fréchet distance is a metric and is also sometimes called coupling measure.

We compare the algorithm performance against the B-CRB using the synthetic benchmark images of the fluorescence case with both uniform and shaded filament intensities. We run our algorithm to derive segmentation results for each image. We then compare the coefficients of the final spline level functions (i.e., the coefficients of the two spline level functions minimizing the energy) with those of the synthetic ground-truth splines. We show the resulting MSE and the theoretical B-CRB for the Gaussian noise model in Fig. 6
                           . The result for the Poisson noise model is visually indistinguishable and hence not shown.

As shown in Fig. 6, for low SNR the algorithm performs sub-optimally and remains above the theoretical B-CRB lower bound. This is due to sub-optimal parameter choices. The optimization problem is solved optimally, so no error originates from its solution. Also, the imaging model used is the ground-truth model that also generated the synthetic data. The sub-optimality for low SNR must hence be due to parameter choices. While the optimal h could be 1.7 for example, we restricted ourselves to integer values in our tests, which may not be optimal. This shows only at low SNR, since both parameters h and λ affect the sensitivity of the method to noise, as shown below.

For increasing SNR, the algorithm is asymptotically optimal. Some of the error bars extend below the bound, because the B-CRB is for the expectation value of the error. Individual cases, however, can be below the bound. This is not a violation of the theory as long as the mean stays above the bound. In both noise cases, we can observe that the empirical MSEs are tight to the theoretical B-CRB. This shows that our method almost achieves the theoretical minimum of the estimation error. The asymptotic approach to the bound for higher SNR confirms the attainability of the B-CRB predicted by our above theoretical analysis.

If the filament intensity is not uniform along the filament axis, the SNR is different for different points on the filament and the SNR values are to be interpreted as average SNR over the entire image. The result accuracy then decreases, as shown by the 50% and 70% shading cases in Fig. 6. This is expected. For a 50% intensity shading, the MSE is about twice as far from the B-CRB as for uniform filaments. Even for a 70% departure from the theoretical assumption of uniformity, the MSE is still acceptable and asymptotically optimal. This suggests (albeit a theoretical proof seems out of reach) that while uniformity is a necessary mathematical assumption in deriving the optimal algorithm, the algorithm’s sensitivity to violation of this assumption is bounded in practice.

The present algorithm has two parameters: the scale size h and the regularization parameter λ. This generates a 2D parameter space h × λ. In order to analyze the influence of these parameters, we repeat the above benchmark for many combinations of h and λ, performing a grid search. For each parameter set, we measure the Dice coefficient. The result is shown in Fig. 7
                           . The imaging model used is that of a fluorescence microscopy (PSF 
                              
                                 σ
                                 =
                                 3.32
                              
                           ) with Gaussian noise of SNR = 4.0. For different SNR and different imaging models, this surface may look different. It can hence not directly be used to fix standard algorithm parameters. The fitted smooth colored surface is only added for better visualization.

The figure shows that mainly the parameter h affects the quality of the segmentation result. For this SNR, 
                              
                                 h
                                 =
                                 1
                              
                            is optimal for all tested λ. The performance is robust over a wide range of λ values spanning four orders of magnitude. While no standard parameter values can be given, the algorithm performance seems to be insensitive to variations of λ. We next investigate in more detail the influence of h as a function of image SNR.

The parameter h is easy to set and useful, as it allows tuning the pixel resolution required in the result. To give a better feeling for this, we quantitatively evaluate the influence of h as a function of SNR.

We do this using our 2000 synthetic benchmark images with SNR values ranging from 4 → 30. For each image, we try scaling sizes h ∈ [0, 3] for fixed 
                              
                                 λ
                                 =
                                 
                                    10
                                    
                                       −
                                       5
                                    
                                 
                                 ,
                              
                            which provides the best Dice coefficient at SNR = 4.

For fluorescence images (Fig. 8
                           
                           
                           a to d), 
                              
                                 h
                                 =
                                 1
                              
                            provides the best results for all tested SNR. Theoretically, one would expect that higher SNR allow lower h, hence providing higher-resolution segmentations. This, however, seems to be robust over the SNR range tested here. For phase-contrast images (Fig. 8e to h), segmentation is generally more accurate, but less reliable (smaller percentage of perfect detection). An 
                              
                                 h
                                 =
                                 0
                              
                            is always the best choice for the phase-contrast images.

Comparing to FIESTA (solid black line in Fig. 8a and b), our method generally performs equally well, sometimes even with a higher accuracy (i.e., lower Fréchet distance). At low SNR, our method shows significantly better detection performance than FIESTA with 100% of all filaments correctly detected by our method and 73% by FIESTA (see numbers in Fig. 8b). For FIESTA, we manually tuned the threshold to give the best results, which was then used to fit the data for different SNRs. For our method, we manually tune λ and h.

Looking at the segmentation accuracy, the Fréchet distances are around 1.5 pixels for the fluorescence images and around 1 pixel for the phase-contrast images. This may seem like a low accuracy for a sub-pixel segmentation method. Keeping in mind that the Fréchet distance is the maximum distance between the two filaments, it is natural to ask where this maximum error occurs. Visually inspecting the results suggests that the error is localized to the filament tips. While the lateral tracing of the filaments is sub-pixel accurate, the segmentation often misses the exact filament tip location by 1 to 1.5 pixels. Since in biology we are often interested in computing the length of a filament from such segmentations, this is indeed the relevant error.

We demonstrate the usefulness of our method, and further illustrate the influence of the parameters λ and h, using real biological microscopy data from fluorescence, phase-contrast, and dark-field microscopy. For each case, the same specimen has been imaged on the same microscope (Nikon Eclipse Ti) with the same objective (Nikon Plan Fluor 100x, NA 1.45 for fluorescence and phase-contrast, NA 0.5 for dark field) and the same camera (Andor Zyla 4.2; pixel size 6.4 μm, effective pixel size with the 100x lens 64 nm). This ensures comparability of the results. The specimen is a demembranated axoneme from a pf2:pf2GFP Chlamydomonas reinhardtii cell (Alper et al., 2013). This particular mutant is rescued with a GFP tagged dynein regulation complex (DRC), which localizes along the entire length of the axoneme. Thus, these axonemes can be imaged not only by phase contrast and dark-field, but also by fluorescence microscopy.

Segmentation results for the 16bit fluorescence image are shown in Fig. 9. In our method, we use the standard fluorescence imaging model with a Gaussian PSF of 500 nm full width at half maximum (hence, 
                              
                                 σ
                                 =
                                 3.32
                              
                            pixel) and a Poisson noise model. Increasing the scaling size h in the present method for fixed λ changes the segmentation. For 
                              
                                 h
                                 =
                                 0
                              
                            the present method segments some of the noise close to the filament. The best result is obtained for 
                              
                                 h
                                 =
                                 1
                              
                            (shown). For 
                              
                                 h
                                 =
                                 2
                                 ,
                              
                            precision starts to be lost.

When using FIESTA (Ruhnow et al., 2011), the threshold for the initial segmentation was manually adjusted to 377 (out of 65,535 for this 16bit image).

The three previous model-based methods perform as expected. Specifically, the method from Paul et al. (2013) successfully locates the region containing the filament to pixel-size resolution. The closed active contour from Goldstein et al. (2010) provides good outline of the filament. The curve-fitting method from Smith et al. (2010) converges in a local minimum. All methods are used with their standard parameter settings as provided by the original publications.

Segmentation results for 16bit phase-contrast images are shown in Fig. 10. Since FIESTA (Ruhnow et al., 2011) does not include a phase-contrast imaging model, we first inverted the images before processing them with FIESTA. In our method, we use the imaging model for phase-contrast images from Yin et al. (2010) with parameters measured from an image of the back focal plane of the microscope and the Phase-3 oil condenser used (phase ring inner diameter 2 mm, outer diameter 2.5 mm, back aperture 5.8 mm). In addition, we use a Poisson noise model.


                           Fig. 10 shows the result using the present method with 
                              
                                 λ
                                 =
                                 
                                    10
                                    
                                       −
                                       4
                                    
                                 
                              
                            and 
                              
                                 h
                                 =
                                 0
                              
                           . Some of the background speckles are spuriously detected as short filaments and would have to be filtered based on their length in a post-processing step. The FIESTA (Ruhnow et al., 2011) result is free from false positives and correctly traces the length of the filament. The results obtained with the other methods used the respective standard parameter settings as provided by the original publications. The method from Paul et al. (2013) correctly identifies the pixel mask containing the filament, but also detects a false positive in the background. Also the method from Goldstein et al. (2010) generates artifacts in the background while correctly tracing the outline of the filament. The SOAC curve fitting methods from Smith et al. (2010) fails to trace the filament, getting trapped in a local energy minimum on the inverted image.

We repeat the same evaluation and comparison using 16bit dark-field microscopy images of the same specimen. While an imaging model for dark-field microscopy exists (Mehta and Oldenbourg, 2014), it strongly depends on the geometry of the imaged object. It can hence not be formulated as a convolution kernel K, which is why we resort to using the imaging model for fluorescence microscopy here with 
                              
                                 σ
                                 =
                                 4
                              
                            and a Gaussian noise model.

Our present method successfully identifies the filament for all scaling sizes tested (
                              
                                 h
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 3
                              
                           ). The best result is obtained for 
                              
                                 h
                                 =
                                 2
                              
                            (shown) and 
                              
                                 λ
                                 =
                                 
                                    10
                                    
                                       −
                                       4
                                    
                                 
                                 ,
                              
                            as shown in Fig. 11. The result from FIESTA (Ruhnow et al., 2011) used a threshold of 4000 (out of 65,535 for the 16bit images). The method from Paul et al. (2013) successfully identifies the region containing the filament to pixel-size resolution. The closed active contour from Goldstein et al. (2010) also successfully traces the filament boundary with sub-pixel resolution. The curve-fitting method from Smith et al. (2010) converges in a local minimum. All methods are used with their standard parameter settings as provided by the original publications.

Often images contain an unknown number of filaments. We show the application of our method to 16bit fluorescence images containing a number of fluorescently labeled filaments. We use the same fluorescence imaging model as above and do not previously specify the number of filaments in the image. Our present method detects them automatically and without manual tuning of any threshold parameter. We start from the same initialization as before, i.e., a single curved filament. The segmentation results are shown in Fig. 12
                           .

We test two images that contain two and six filaments, respectively. We show the results for the default parameters 
                              
                                 h
                                 =
                                 1
                              
                            and 
                              
                                 λ
                                 =
                                 
                                    10
                                    
                                       −
                                       5
                                    
                                 
                              
                           . The first image (a) contains two purified pf2:pf2GFP axonemes (Alper et al., 2013). The second image (b) shows six fluorescently labeled microtubules (Gell et al., 2010). This image has much lower SNR, yet the microtubules are correctly segmented.

This demonstrates that our method combines the benefits of multiple existing methods. It provides sub-pixel geometric curve descriptions of the filaments, automatically detects the number of filaments in an image, does not rely on manual thresholding, works for different imaging models and microscopy modalities, and provides globally optimal results under the postulated model that asymptotically achieve the Bayesian Cramér-Rao lower bound in the spline coefficients.

@&#CONCLUSIONS@&#

We have presented a new algorithm to solve the filament segmentation problem for curved one-dimensional filaments in two-dimensional digital images. The presented method has only two parameters and does not require prior knowledge about the number of filaments in the image. It provides segmentation results with sub-pixel accuracy as open polynomial curves. This enables high-resolution studies of filament dynamics and provides access to spatial and temporal derivatives of the curve and its time evolution. Open curves are represented by a vector level-set, which enables topological changes during contour evolution. The method is flexible to accommodate different noise models and image-acquisition models. The segmentation result is guaranteed to be optimal for the given model. This is the result of a convex formulation of the underlying optimization problem, using Bregman divergences to measure the similarity between images, and a GLM model for the image pixel statistics. In other words, our method exploits prior knowledge about the physical properties of the imaging system in order to improve segmentation quality. Note that the geometric and photometric problems are likely not jointly convex, but separately convex, which is enough for convergence. If needed, a jointly convex formulation could possibly be derived extending recent works (Brown et al., 2012).

We provided an efficient algorithm to compute the optimal filament segmentation under the postulated models. The algorithm combines the analytical energy gradients with a fast convolution-based gradient evaluation. We have also for the first time shown an information-theoretic lower bound on the segmentation error in filament segmentation. No algorithm can possibly do better than this bound given the information in the image. We have shown that for the specific bound of B-spline level sets, the presented algorithm is asymptotically optimal for high SNR. For low SNR, the presented algorithm is not the best one could do, as it remains slightly above the theoretical bound. This, however, is due to parameter choices, as discussed. Quantifying the residual fitting uncertainty could, for example, be done using particle filters in an outer loop, as previously described (Cardinale et al., 2009).

Comprehensive simulations were conducted to illustrate the major differences with prior works, show main features of our method, quantitatively evaluate the performance on synthetic images, and demonstrate applications on real biological images. The benchmarks have also identified recommended choices for the algorithm parameters h and λ: for fluorescence images with SNR between 4 and 30, one should set h to 1, for phase-contrast image 
                        
                           h
                           =
                           0
                        
                     . The λ value is largely inconsequential. A default value of 
                        
                           10
                           
                              −
                              5
                           
                        
                      should yield good results.

The time required by the algorithm to segment an image depends on the image size and on how far the initialization is form the final segmentation. It does not depend on the number of filaments in the image. The current MATLAB implementation processes a 512 × 512 pixel 8bit image in about 30 seconds using MATLAB 2013b on a single core of an Intel Core i7 2.2 GHz processor.

In its current form, the method has a number of limitations. Probably the most restrictive one is that filament crossings and overlaps are not allowed. This is an inherent limitation of the two-component vector level-set description of filaments. Handling crossing filaments would require using more than two level functions (three to allow single crossings, four for tripple points, etc.). Currently, the method is also limited to 2D images. Segmenting filaments in 3D images would require the use of three level functions. A limitation of the current theoretical derivation is that the intensities of the filaments and the background are assumed to be uniform. As we have shown, however, the segmentation is still asymptotically optimal even when these assumptions are not fulfilled, with a bounded increase in the error. Intensity variations along a filament could then be read out during post processing and used as biological readouts, but the tips of the filaments may be inaccurately estimated, especially when the filaments get dimmer towards the tips.

There are a number of directions along which future work could improve on the present framework. An obvious thing to do would be to extend to more than two level functions in order to handle crossing filaments and higher-dimensional images. Extending the method to allow for shaded fore- and background intensities in a theoretically optimal way is less straightforward and requires more research in convex relaxation theory. A more short-term goal could be to include a line search over h in a scale-space pyramid (i.e., automatically repeating the segmentation for successively lower h) to find the optimal h that leads to the lowest global energy minimum in each case. Together with a default value for λ, this would effectively render the algorithm parameter-free.

We provide an open Matlab implementation of the presented algorithm as a reference. In addition, the algorithm has also been implemented in Java, as part of the open-source MOSAICsuite plugin for the user-friendly image-analysis environments ImageJ (Schneider et al., 2012) and Fiji (Schindelin et al., 2012). Both implementations are freely available from the MOSAIC Group’s web site mosaic.mpi-cbg.de. The main contributions of the present paper were to: (1) show an information-theoretic lower bound on the segmentation error for filaments, providing a baseline against which algorithms can be compared; (2) introduce the vector level-set idea for filament segmentation, uniting the advantages of both region-segmentation and curve-fitting methods; (3) showing that the resulting optimization problem can be solved efficiently and in a globally optimal way; (4) providing a practical framework for filament segmentation across different imaging modalities and noise models.

Conceived the project: IFS and JH; developed the theory and the algorithm: XX and IFS; wrote the manuscript: IFS and XX; made the figures: XX; generated benchmark data: XX and VFG (FIESTA); preparation of biological samples, microscopy, and image acquisition: VFG; Edited and approved the final manuscript: all authors.

@&#ACKNOWLEDGEMENTS@&#

We thank all members of the MOSAIC Group for the many fruitful discussions. Particular thanks go to Ulrik Günther for helping derive the theoretical error bound. This work was supported by the German Federal Ministry of Research and Education (BMBF) under funding code 031A099.

@&#REFERENCES@&#

