@&#MAIN-TITLE@&#Server selection schemes for service-oriented computing in mobile pervasive environment

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           An efficient server-centric server selection scheme is proposed for small scenario.


                        
                        
                           
                           A client-centric scheme is proposed that outperforms the existing ones.


                        
                        
                           
                           The client-centric scheme does not guaranty optimal Nash Equilibrium (NE).


                        
                        
                           
                           A Mixed-strategy (MS) based solution is proposed that can attain more efficient NE.


                        
                        
                           
                           The MS based scheme performs better than existing and previously proposed schemes.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Service-oriented computing

Pervasive system

Server selection

DCOP

Multi-agent system

@&#ABSTRACT@&#


               
               
                  In this paper, we present a set of server selection schemes that includes all crucial components of resources available at each relevant node of the network to reach at the server selection decision and at the same time attempts to maximise the system-wide resource utilisation. First in the series, a server-centric scheme is proposed that formulates the problem as distributed constraint optimisation problem (DCOP) and solves it using Fast-max-sum (FMS) algorithm. Though it does not scale well in large network scenario yet it provides an estimate of the optimal values of performance metrics achievable under a specific scenario. Next, a client-centric scheme is proposed that outperforms the existing ones but does not guaranty to attain optimal Nash Equilibrium (NE). This motivates us to design another client-centric scheme that can avoid the price of anarchy by attaining superior NE of mix strategies.
               
            

@&#INTRODUCTION@&#

We consider the problem of selecting the most appropriate server in a pervasive environment where a set of servers is capable of offering a specific service within the network. When a service-consumer generates a service-request for the particular service with desired quality of services (QoS) parameters, the most appropriate server (among the aforesaid set) should be selected for serving the request. This should be carried out in such a manner that the desired QoS of the user is satisfied and at the same time, the resource usage over the whole network is maintained at the minimal level so that higher utilisation level can be achieved.

The problem had been investigated in considerable depth in various contexts during different phases of evolution of networking technology. With the exponential growth of web content, several web servers had been deployed to offer the same content. The challenge was to choose the most appropriate server for specific client requests. Most of the proposed solutions considered the remaining processing capacity of the servers along with current delays from the client to each of the potential servers. At first, a threshold check on both the parameters is carried out based on the desired QoS of the service request. Then, the appropriate server is chosen with the goal of minimising one of the above two parameters. It should be noted that minimisation of maximum unutilised processing capacity over/among all the servers maximises the service availability and minimises the service execution (content delivery in case of content server) time. On the other hand, an attempt to minimise the end to end delay between the client and the server is equivalent to minimisation of service response time. The service discovery is proactively managed by separate directory services such as DNS. In some deployments, the selection process is delegated to some other nodes, known as service brokers.

This approach was found less efficient in P2P system due to dynamic inclusion and exclusion of servers, presence of partial servers and wide range of variation in device capabilities. The proposed solution approaches are similar in nature but the complexity of selection problem increased many folds because of presence of a large number of potential servers. Moreover, additional overhead for dynamic adaptation of distributed directory structure is quite significant. As a result, most of the solutions suggested inclusion of service discovery within the server selection process in a reactive manner for each individual request. This arrangement is more adaptive in nature and in this paper we term it as client-centric approach.

However, the parameters of interest and solution approaches in a mobile ad hoc scenario is substantially different. Here, additional parameters like remaining battery power, remaining memory capacity and probability of link unavailability (due to mobility) are also required to be taken into consideration. Approaches are available that perform threshold check over all the above parameters and then maximise or minimise some of the parameters based on the performance goal (like delay minimisation, capacity maximisation, energy minimisation etc.). However, none of the proposed solutions consider the end to end resource usage for all intermediate nodes and links and hence the goal of maximising system-wide resource utilisation cannot be achieved.

We consider a network scenario where there exist some rudimentary (with low capabilities) networking elements such as sensor, actuator and low capacity communication infrastructure that creates a pervasive computing environment. Some typical examples are shopping malls, food court, entertainment parks, high capacity public transport (like trains, buses, ships) etc. Generally, in this kind of setting, there can be a moderate to large number of people with low mobility holding smart-phones and other hand-held or wearable devices. In one way the presence of user’s devices will put enormous pressure on the available fixed infrastructure but looking in another way, the presence of devices with computing and communication capability offers tremendous opportunity for building up an ad hoc environment that can support elegant and enriched service-oriented computing platform.

The users and things can provide and consume the services to and from each other’s to elevate their level of performance and/or experience. Such network should be self-organised with capability of efficient server selection, service replication, service migration and system-wide resource utilisation. To be more precise the devices should cooperate to form a spontaneous (multi-agent based) middleware to carry out the aforesaid activities and in this paper we study the problem of server selection for specific services where more than one server (may be due to replication) for such services exist in the network. Another noteworthy feature of this system is that the typical things, like sensors, consume services from the clouds that reside at the core of the infrastructure based network. With the rapidly increasing number of such sensors, this is likely to create overwhelming traffic at the core network. By replicating the frequently requested services within the hand-held devices located in the local access network, this traffic load can be drastically reduced. This, in fact, is a fundamental advantage.

The existing server selection schemes are not sufficiently efficient in this scenario for the following reasons. Firstly, all the important resource types and availability of such resources in all the nodes (especially intermediate nodes) are not taken into consideration. Secondly, The implication of QoS for content-delivery services and compute-intensive services are not quantitatively analysed in depth. Thirdly, optimal server-centric solution, incorporating the above issues are not studied in the light of the recently developed distributed computing technique such as DCOP. Further, client-centric techniques, emphasising the service-layer (rather than network layer), incorporating the first two points, were not examined in depth. Moreover, the cross-layer approaches used in some of the client-centric schemes breaks up the flexibility of layered architecture creating device non-conformity for application usage. Finally, the inclusion of service-layer requirements mandate us to make server selection decision at larger time scale and hence the impact of Price of Anarchy (PoA) should be considered with due importance and here comes the need for formulation of a mixed-strategy based efficient NE using client-centric technique.

The above deficiencies of the existing solutions motivate us to propose a set of solutions to the problem that

                        
                           •
                           Considers all the relevant important resources available at each node of the network including the intermediate ones.

Separates routing and service discovery modules so that the schemes become independent of routing algorithms. The impact of this independence is noteworthy as the efficient hybrid (combination of reactive and proactive) routing algorithms can be used without interfering with the service selection process.

None of the above two considerations have been made in any of the existing proposals as far as our knowledge goes.

In this work, at first we consider the efficiency of server-centric distributed server selection algorithms in the above scenario. Though the approach is server-centric yet we consider the resource availability of all intermediate nodes in addition to those of the servers. We model the problem as DCOP and solve it with FMS [1] algorithm, a modified version of GDL based max-sum [2] algorithm. The performance of the scheme is found to be convincingly better in terms of service execution time, resource utilisation and service availability. However, in practice, the response time is unacceptably high that renders the scheme impractical for most of the scenarios. The reason for higher response time is the time taken for convergence of DCOP solution. Moreover, the increased message passing overhead of the DCOP algorithm consumes non-negligible amount of resources that hampers the overall performance of the scheme. Nonetheless, we implemented the scheme using Java Agent Development Framework (JADE)
                        1
                     
                     
                        1
                        
                           http://jade.tilab.com/.
                      and it helped us to accurately measure and exclude the algorithms convergence time, message passing overhead and their impact on the response time. The fundamental objective behind designing the scheme is to determine the best possible service execution time, achievable level of resource utilisation over the whole network and response time for a given profile of QoS based request generation.

Next, we propose a client-centric scheme, that includes the available resources at each node in the network in addition to those available at the servers. The clients retrieve the resources available at other nodes including the servers and then make individual decision regarding the selection. In the existing algorithms, only a threshold check for resources along the end to end paths is made and the final decision is reached based on remaining energy along the path or processing capabilities of the servers or a Pareto efficient combination of both, depending on requested QoS. But in our approach, we attempt to maximise the overall resource utilisation where the resource is expressed as a weighted sum of all the parameters of interest. This results in improved service execution time, resource utilisation, service drop rate (especially at higher load) and network life time. Unlike the server-centric one, it is practicably implementable and scalable to larger network scenarios.

The client-centric solution, as proposed above though performs better than other existing schemes, still it suffers from the inherent (to all selfish solutions) problem of settling at less efficient equilibrium. It was shown in [3] that selfish routing can lead miserably poor solution compared to that available with an omniscient central authority. But it was shown in [4] that the mixed-strategy based path selection algorithm can offer substantially efficient solution. We determine the required probability distribution for each strategy to achieve the efficient mixed-strategy based NE. In short, we determine the cost function for each available server but instead of always choosing the best server we choose them randomly following a probability distribution derived on the basis of their costs. This scheme offers the best set of performance in terms of resource utilisation, service execution time and service drop rate. The contribution made in this paper can be summed up as follows.

                        
                           1.
                           We propose a distributed server-centric server selection algorithm using a GDL based DCOP solution known FMS. This improves resource utilisation in the network and consequently the service availability and service execution time are also improved compared to that achievable using existing algorithms. However, its applicability is limited within small networks.

A client-centric scheme is proposed that performs better than the existing selection algorithms in terms of availability, execution time, and system-wide resource utilisation.

A mechanism within the client-centric approach have been proposed that achieves more efficient NE of mixed strategies even in presence of selfish routing. The probability distribution of each strategy have been computed to reach this more efficient mixed-strategy NE.

The rest of the paper is organised as follows. Section 2 presents the related works carried out in this area. The proposed system and network model, the QoS parameters and performance metrics are elaborated in Section 3. In Section 4 we formulate the server selection problem as a DCOP and proposed the server-centric solution followed by detailed client-centric and mixed-strategy based solution. Results with relevant discussion are presented in Section 5. Finally the conclusions are drawn in Section 6.

@&#RELATED WORK@&#

The problem had been thoroughly investigated in last few decades in several contexts. It started with the emergence of processor and memory scheduling [5,6] in parallel and distributed systems but later, during the early days of the web, the problem received immense attention from the research community. The basic objective was to allocate the service requests to the most appropriate replica of web (or content) server (where such replicas were in place) for the purpose of efficient load balancing and improving user’s experience. Naturally, in this phase of development, the solution approaches were inherently server-centric [7,8]. In this paradigm, the remaining processing power of the servers were sent periodically to a set of nodes designated as service-brokers [9]. Whenever a client generates a service request, it is intercepted by one of the service brokers and the brokers, in coordination with each other, make the decision regarding selection of the appropriate server. Initial proposals emphasised more on the remaining processing capability of the servers but gradually the delay (determined by the remaining bandwidth on the links constituting the end to end path) between the requesting client and each potential server was also included in making the decision. Most of the approaches perform a threshold check on one of the two parameters and attempt to minimise the other.

Subsequently, the growth of peer to peer (P2P) systems generated renewed interest [10–13] in the problem. This was mainly triggered by the availability of partial servers, dynamic variation of number of servers together with their heterogeneous nature. To cope up with the dynamic nature of the system, reactive service discovery became an integral part of the selection process [11,12]. Moreover, the overhead associated with traditional selection methods increased exponentially with larger number of potential servers. Hence, client-centric mechanisms gained popularity [14–17] where a client itself chooses the most appropriate server for each individual request it makes, based on some proactively collected information from other nodes. Though the client-centric mechanism are more adaptive and require less overhead (especially for larger number of potential servers) but the price is paid by settling at relatively inefficient NE arising out of selfish routing.

Following the emergence of pervasive and mobile ad hoc systems, the problem was further studied by several researchers [14–21]. The ad hoc scenario is inherently different from its infrastructure based counter part because of absolute absence of designated directories (DNS or UDDI), existence of device heterogeneity, stringent power constraint and frequently changing network topology. Under such scenario, consideration of only server capacity and network delay are not enough and hence resources like remaining battery power, remaining memory capacity and impact of node mobility of all intermediate nodes are also to be taken care of. Most of the proposed solutions [15,22] perform a threshold check on all the parameters and then attempt to minimise one of them for selecting the most suitable server. Some of the proposed solutions advocate in favour of cross-layer approach [21] where the server selection functionalities are embedded within reactive routing algorithm. For example, a route-request (RREQ) packet in AODV can be generated with the name of the service asked for and the providers of the service can respond to it by sending special RREP packets that contains the information regarding remaining resources along their respective paths. This information can in turn be used to select the most appropriate server.

Game theory has been applied extensively in network routing, MAC layer [23] and TCP. It was shown in [3,24,25] that selfish routing leads to the problem of suboptimal solutions compared to centralised routing. The set of NE and their performance bounds had been evaluated in [3]. A routing algorithm that utilises game theory based load balancing was considered in [4]. It was shown that if traffic is allocated through each route in reverse proportion with the costs of the path, then more efficient NE can be achieved. However, this was not applied in service level for efficient allocation of resources through load balancing at higher time scales.

However, after surveying the literature, we observed that resource availability at the intermediate nodes on the paths were not included for making the server selection decision except for mere threshold check. Moreover, no server-centric schemes were proposed utilising the recently developed multi-agent based distributed computing tools and unfortunately no theoretical studies with sufficient depth for determining the extent of achievable performance metrics such as response time, service completion time or system-wide resource utilisation had been carried out. Further, client-centric approaches were mixed up with service discovery schemes and most of them make use of reactive routing creating device non-conformity at the network layer. Finally, there is no visible effort to incorporate mixed-strategy based mechanism design for achieving better NE to generate higher device pay-offs. All the observations, mentioned above motivated us to take up the works that we present in next three consecutive sections.

The devices in the system can offer various services and at the same time they can consume the services offered by other (including itself) devices. The devices are considered to be autonomic and heterogeneous in terms of capability and usage, creating a typical pervasive IoT segment. The various services available in the network, as a whole, can be combined and assimilated to create a typical service-oriented computing platform. In this scenario each individual device in the system are capable of communicating with other devices and can make their individual decision, based on the activity of others. Hence, the system offers an excellent opportunity for application of multi-agent based distributed algorithms where each individual node has to carry out a small amount of processing to achieve a single or multiple global objectives. Moreover, an agent based solution, in general, can achieve faster convergence to optimal setting by updating repeatedly the states of individual agents proactively in comparison with other distributed computing paradigms including actor models.

The above system can be represented as a graph Gn
                        (Vn, En
                        ) as shown in the Fig. 1
                         where Vn
                         is 
                           
                              {
                              
                                 v
                                 1
                              
                              ,
                              
                                 v
                                 2
                              
                              ,
                              …
                              ,
                              
                                 v
                                 k
                              
                              }
                           
                         the set of k nodes within the network and En
                         is the set of edges connecting the nodes. In our framework an agent module is installed in each node in the network. An agent ai
                         associated with node vi
                         has three interfaces 
                           −
                         CI, SI and EAI as shown in Fig. 2
                        . Where CI is the client interface that intercepts any service request generated by the node vi
                         as a client. SI stands for service-interface that handles all tasks related to the node when it acts as a server. Both CI and SI are local interfaces and are not exposed beyond the node. But the third interface is the external agent interface (EAI) through which the agent handles all message passing with other agents in the system.

Services provided by a node vi
                         is denoted as sij
                        , where 
                           
                              j
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              
                                 m
                                 
                                    m
                                    a
                                    x
                                 
                              
                           
                         (mmax
                         being the maximum number of services at node vi
                        ). Here, a single node vi
                         can provide more than one service and at the same time a client can request more than one service. Now, it is likely that a single service can be provided by more than one server and therefore provider’s agents are encouraged to work together for proper assignment of server for requested service, as the resource requirements at the network can differ depending on the server assigned to the client.

The utility ui
                         of an agent ai
                         depends on several parameters such as remaining CPU cycle (
                           
                              R
                              
                                 c
                                 i
                              
                           
                        ), remaining energy (
                           
                              R
                              
                                 e
                                 i
                              
                           
                        ), remaining memory (
                           
                              R
                              
                                 m
                                 i
                              
                           
                        ) and remaining available bandwidth (
                           
                              R
                              
                                 b
                                 i
                              
                           
                        ) of node vi
                        . From these remaining resource components, the normalised resource vector R
                        
                           i
                         is derived where the component values are scaled according to range of variation and average values of each component to draw realistic balance. Thus,

                           
                              (1)
                              
                                 
                                    
                                       R
                                       i
                                    
                                    =
                                    
                                       (
                                       
                                          
                                             R
                                             ¯
                                          
                                          
                                             c
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             R
                                             ¯
                                          
                                          
                                             e
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             R
                                             ¯
                                          
                                          
                                             m
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             R
                                             ¯
                                          
                                          
                                             b
                                             i
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        
                     

and we define the weight vector for assigning different weightage to different resource component as

                           
                              (2)
                              
                                 
                                    W
                                    =
                                    (
                                    
                                       w
                                       c
                                    
                                    ,
                                    
                                       w
                                       e
                                    
                                    ,
                                    
                                       w
                                       m
                                    
                                    ,
                                    
                                       w
                                       b
                                    
                                    )
                                 
                              
                           
                        
                     

Where ,
                           
                              
                                 w
                                 c
                              
                              +
                              
                                 w
                                 e
                              
                              +
                              
                                 w
                                 m
                              
                              +
                              
                                 w
                                 b
                              
                              =
                              1
                           
                        . Here, the utility ui
                         can be found following [26] as the dot product of above two vectors. Hence,

                           
                              (3)
                              
                                 
                                    
                                       u
                                       i
                                    
                                    =
                                    
                                       w
                                       c
                                    
                                    
                                       
                                          R
                                          ¯
                                       
                                       
                                          c
                                          i
                                       
                                    
                                    +
                                    
                                       w
                                       e
                                    
                                    
                                       
                                          R
                                          ¯
                                       
                                       
                                          e
                                          i
                                       
                                    
                                    +
                                    
                                       w
                                       m
                                    
                                    
                                       
                                          R
                                          ¯
                                       
                                       
                                          m
                                          i
                                       
                                    
                                    +
                                    
                                       w
                                       b
                                    
                                    
                                       
                                          R
                                          ¯
                                       
                                       
                                          b
                                          i
                                       
                                    
                                 
                              
                           
                        The mobility information of nodes in the network can be used to find the route expiry time (RET) between client and server where link expiry time (LET) is used to find the duration of time a node is connected with another node. RET is an important parameter to server selection and here we calculated RET as shown in [22]. Let us consider two nodes i and j with location (x
                        1, y
                        1), (x
                        2, y
                        2), velocity v
                        1, v
                        2 and phase angle θ
                        1, θ
                        2, respectively. The link expiry time is calculated as

                           
                              (4)
                              
                                 
                                    
                                       
                                          
                                             L
                                             E
                                             
                                                T
                                                
                                                   i
                                                   j
                                                
                                             
                                          
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                −
                                                
                                                   (
                                                   p
                                                   q
                                                   +
                                                   r
                                                   s
                                                   )
                                                
                                                +
                                                
                                                   
                                                      
                                                         (
                                                         
                                                            p
                                                            2
                                                         
                                                         +
                                                         
                                                            r
                                                            2
                                                         
                                                         )
                                                      
                                                      
                                                         R
                                                         2
                                                      
                                                      −
                                                      
                                                         
                                                            (
                                                            p
                                                            r
                                                            −
                                                            q
                                                            s
                                                            )
                                                         
                                                         2
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   p
                                                   2
                                                
                                                +
                                                
                                                   r
                                                   2
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             where
                                             
                                             p
                                          
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                v
                                                1
                                             
                                             cos
                                             
                                             
                                                θ
                                                1
                                             
                                             −
                                             
                                                v
                                                2
                                             
                                             cos
                                             
                                             
                                                θ
                                                2
                                             
                                             
                                             and
                                             
                                             r
                                             =
                                             
                                                v
                                                1
                                             
                                             sin
                                             
                                                θ
                                                1
                                             
                                             −
                                             
                                                v
                                                2
                                             
                                             sin
                                             
                                                θ
                                                2
                                             
                                             ,
                                             q
                                             =
                                             
                                                x
                                                1
                                             
                                             −
                                             
                                                x
                                                2
                                             
                                             ,
                                             s
                                             =
                                             
                                                y
                                                1
                                             
                                             −
                                             
                                                y
                                                2
                                             
                                          
                                       
                                    
                                 
                              
                           
                        The route expiry time between client node i and server node k depends on the links Ll
                         present between them where 
                           
                              l
                              =
                              1
                              ,
                              2
                              ,
                              3
                              ,
                              …
                              ,
                              L
                           
                        . The link with the shortest LET defines the RET between nodes i and k as shown below.

                           
                              (5)
                              
                                 
                                    R
                                    E
                                    
                                       T
                                       
                                          i
                                          ,
                                          k
                                       
                                    
                                    =
                                    m
                                    i
                                    n
                                    
                                       [
                                       L
                                       E
                                       
                                          T
                                          
                                             L
                                             l
                                          
                                       
                                       ]
                                    
                                 
                              
                           
                        A threshold check is performed on RET values for each route to accept it as valid.

Traditionally, the QoS of an interactive service is expressed through service response time (tr
                        ) but with the rapid evolution of content delivery and compute-intensive services, the service completion time (tc
                        ) also gained significant importance. For clarity of analysis, we consider the following four kind of services based on their QoS requirements.

                           
                              (a)
                              Services where tr
                                  is more important than tc
                                 , classified as Type1 service (usually end user is a person requiring interactive service).

Services where tc
                                  is more important than tr
                                  classified as Type2 service (usually end user is a program that needs to update or reconfigure itself).

However in some cases the time constraints on both tr
                                  and tc
                                  must be satisfied and these classified as Type3 service. Eg. interactive video or voice calls.

Some services have no QoS requirement, classified as Type4 service. Eg. background file transfer like messages or mails.

It should also be noted that tc
                         can be expressed as sum of three components tr, te
                         and to
                         where te
                         denotes the service execution time and to
                         represents the additional time delay contributed by overhead traffic load arising out of message passing required by the algorithms. Hence,

                           
                              (6)
                              
                                 
                                    
                                       t
                                       c
                                    
                                    =
                                    
                                       t
                                       r
                                    
                                    +
                                    
                                       t
                                       e
                                    
                                    +
                                    
                                       t
                                       o
                                    
                                 
                              
                           
                        The value of tr
                         is determined by end-to-end delay(conversely, availability of bandwidth) introduced by the route whereas te
                         is determined by capability of the servers and intermediate nodes.

We choose the following performance metrics for evaluation

                           
                              1.
                              
                                 Average service response time: Defined as the time lag between sending of service request and instant of beginning of receiving the response. This is primarily determined by server selection time and end-to-end network delay (including queuing delay).


                                 Average service execution time: Defined as the time taken to complete execution of the service. This is predominantly determined by the remaining computing capability of the server node.


                                 Average service drop rate: Is the ratio of number of service requests dropped to the total number of service request in the system, mainly determined by remaining energy, mobility and buffer space at each intermediate node in the route.


                                 System-wide resource utilisation: Is the ratio of used resources to the total available resources in the system including all nodes.

Let a service si
                      is currently being provided by a set of nodes 
                        
                           N
                           
                              s
                              i
                           
                        
                      and at a particular instant of time, a client ci
                      requests that service. Under these circumstances, to make the service available to the client, the proposed middleware goes through two phases, first it triggers the service discovery module where the potential servers are discovered and then it goes to the selection or allocation phase where the most suitable server, among the discovered set, is selected based on QoS parameters of the client. In this paper we assume that the discovery module has already discovered the servers and constructed the set 
                        
                           N
                           
                              s
                              i
                           
                        
                     . Hence, the issue of discovery is beyond the scope of this paper. When a node vi
                      ∈ V generates a new service request Reqi
                     (si, QoS) the following two cases may arise

                        
                           1.
                           The QoS requirement of the service can be satisfied by only one of the existing servers. In that case the request is assigned to that particular server.

The QoS requirement can be satisfied by more than one server. Then a server assignment algorithm is triggered.

Our objective is to design the server selection algorithm in such a manner that the social welfare (sum of utility of all nodes) of the network is maximised. As the algorithm is invoked right from the birth of the network, the server assignment for service request evolves in such a way that emergence of the system, maintaining maximised social welfare, is guaranteed without compromising the QoS constraints. Next, we convert server allocation problem to a DCOP and solve it using a modified max-sum algorithm named as FMS.

A DCOP is defined as a tuple {A, X, D, F} , where 
                              
                                 A
                                 =
                                 {
                                 
                                    a
                                    1
                                 
                                 ,
                                 …
                                 ,
                                 
                                    a
                                    
                                       |
                                       A
                                       |
                                    
                                 
                                 }
                              
                            is a set of agents, 
                              
                                 X
                                 =
                                 {
                                 
                                    x
                                    1
                                 
                                 ,
                                 .
                                 .
                                 .
                                 ,
                                 
                                    x
                                    
                                       |
                                       X
                                       |
                                    
                                 
                                 }
                              
                            is a set of variables, 
                              
                                 D
                                 =
                                 {
                                 
                                    D
                                    1
                                 
                                 ,
                                 …
                                 ,
                                 
                                    D
                                    
                                       |
                                       D
                                       |
                                    
                                 
                                 }
                              
                            is a set of discrete and finite variable domains, and 
                              
                                 F
                                 =
                                 {
                                 
                                    f
                                    1
                                 
                                 ,
                                 …
                                 ,
                                 
                                    f
                                    
                                       |
                                       F
                                       |
                                    
                                 
                                 }
                              
                            is a set of functions describing constraints among the variables. In more detail, each variable x ∈ X is owned by precisely one agent a ∈ A. However, each agent can potentially own more than one variable. Now, each variable xi
                            can take a value in the domain Di
                            as shown in Eq. (11), and the functions in F are used to calculate the utilities of the agents. In our scenario utility values depend on the path cost from client to the agent as well as the states of variables of the relevant agents.

When a new service request is generated there may be several server nodes that can provide the service and the content must be forwarded by all the intermediate nodes that connect a particular server to the requesting client. When examining the total change in utility for selection of a specific server then the utilities of the nodes which are not in the chosen path will not undergo any change and those, participate, including server node, change their utility depending on their roles. Hence, the utility of a server node and intermediate nodes respectively change as follows

                              
                                 (7)
                                 
                                    
                                       
                                          u
                                          i
                                       
                                       ←
                                       
                                          u
                                          i
                                       
                                       −
                                       
                                          
                                             δ
                                          
                                          s
                                       
                                       
                                          u
                                          
                                             i
                                             s
                                          
                                       
                                       ,
                                       
                                       for
                                       
                                       server
                                       
                                       nodes.
                                    
                                 
                              
                           
                           
                              
                                 (8)
                                 
                                    
                                       
                                          u
                                          i
                                       
                                       ←
                                       
                                          u
                                          i
                                       
                                       −
                                       
                                          
                                             δ
                                          
                                          f
                                       
                                       
                                          u
                                          
                                             i
                                             i
                                          
                                       
                                       ,
                                       
                                       for
                                       
                                       forwarding
                                       
                                       nodes.
                                    
                                 
                              
                           
                        

where 
                              
                                 
                                    
                                       δ
                                    
                                    s
                                 
                                 
                                    u
                                    
                                       i
                                       s
                                    
                                 
                                 ,
                              
                           
                           
                              
                                 
                                    
                                       δ
                                    
                                    f
                                 
                                 
                                    u
                                    
                                       i
                                       i
                                    
                                 
                              
                            represent the additional resource that will be required from the node to satisfy the service request. This depends on the role of the node i.e., whether it is acting as a service provider or service forwarder. Particularly, when the nodes act as a service provider, the amount of required CPU slots, memory and energy will be higher than that of the corresponding values when the node works simply as a forwarding node. Hence,

                              
                                 (9)
                                 
                                    
                                       
                                          
                                             δ
                                          
                                          s
                                       
                                       
                                          u
                                          
                                             i
                                             s
                                          
                                       
                                       >
                                       
                                          
                                             δ
                                          
                                          f
                                       
                                       
                                          u
                                          
                                             i
                                             i
                                          
                                       
                                    
                                 
                              
                           However, when a service is completed, the corresponding resources(except energy) are released and the utility changes as

                              
                                 (10)
                                 
                                    
                                       
                                          u
                                          i
                                       
                                       ←
                                       
                                          u
                                          i
                                       
                                       +
                                       
                                          δ
                                          s
                                       
                                       
                                          u
                                          
                                             i
                                             s
                                          
                                       
                                       
                                          (
                                          or
                                          
                                          
                                             δ
                                             f
                                          
                                          
                                             u
                                             
                                                i
                                                i
                                             
                                          
                                          )
                                       
                                    
                                 
                              
                           
                        

The domain of xi
                           , when the corresponding agent (ai
                           ) is a server or an intermediate node, can be represented as

                              
                                 (11)
                                 
                                    
                                       D
                                       =
                                       
                                          {
                                          
                                             
                                                
                                                   
                                                      1
                                                   
                                                
                                                
                                                   
                                                      when
                                                      
                                                      node
                                                      
                                                      
                                                         v
                                                         i
                                                      
                                                      
                                                      provides
                                                      
                                                      the
                                                      
                                                      service.
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      0
                                                   
                                                
                                                
                                                   
                                                      when
                                                      
                                                      node
                                                      
                                                      
                                                         v
                                                         i
                                                      
                                                      
                                                      does
                                                      
                                                      not
                                                      
                                                      provide
                                                      
                                                      the
                                                      
                                                      service.
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           For the client node the domain value of xi
                            is 1 if the requested QoS is satisfied and 0 when the requested QoS is not satisfied. Given this and assuming that the service providers for a particular service are always present in the network, our objective is to find the most suitable server as

                              
                                 (12)
                                 
                                    
                                       
                                          X
                                          *
                                       
                                       =
                                       a
                                       r
                                       g
                                       
                                          max
                                          x
                                       
                                       
                                          ∑
                                          
                                             i
                                             =
                                             0
                                          
                                          k
                                       
                                       
                                          U
                                          i
                                       
                                    
                                 
                              
                           
                        

Where X denotes ordered set of values of variable for optimal server assignment to the client, subjected to the constraint that not more than one server are assigned to a single request (i.e., a service request is served by a single server at a time).

Here, we choose FMS [1] to solve our server selection problem because FMS is most suitable candidate for our DCOP problem. FMS is an extension of max-sum and it is proved that max-sum uses distributed message passing to find out an optimal solution of a DCOP over a graph. However, max-sum algorithm does not make any specific provision for dynamic environments hence, needs unnecessary message passing and computation overhead. Even a small change in the network forces to re-compute the entire solution each time.

To combat the dynamism issues, FMS was introduced. In FMS each agent stores its previous assignments and decide whether or not to recompute the entire solution. when a node joins or leaves the network. The communication overhead is reduced because the number of messages and the size of the messages are reduced. FMS outperforms max-sum in dynamic environment and it gives the optimal solution without compromising the quality using less computation and communication overhead. Hence, FMS is a most suitable for mobile pervasive environment.

In order to solve our server allocation problem by FMS we represent it as a factor graph. Factor graph is a undirected bipartite graph that contains 
                              
                                 
                                    G
                                    f
                                 
                                 =
                                 
                                    〈
                                    
                                       N
                                       f
                                    
                                    ,
                                    
                                       E
                                       f
                                    
                                    〉
                                 
                              
                           . Nf
                            contains two types of nodes 
                              −
                            factor nodes and variable nodes. The set of factor nodes and variable nodes are denoted by F and X respectively. The dependencies between function and variables in the factor graph are denoted as set of edges Ef
                           . Each server node 
                              
                                 N
                                 
                                    s
                                    i
                                 
                              
                            in our network graph Gn
                            contains a function fi
                            (factor) and a variable xi
                           . The ordered set of values of the variables represent a solution to the server allocation problem.

Let us consider a scenario where the node v
                           5 requested for a service and that service is provided the nodes v
                           32 and v
                           6 as shown in Fig. 3
                           . In order to select the proper server between the potential list (v
                           6, v
                           32), all intermediate nodes between the client (v
                           5) towards servers (v
                           6, v
                           32) send their remaining resources with link expiry time as mentioned above. Each intermediate node compare the remaining resources with predecessor intermediate node and send the minimum resources towards the server node. Likewise, all intermediate nodes compare and send the remaining resources to the potential servers. When a server agent (here v
                           6, v
                           32) receives the service request with remaining minimum resources of that path, first it calculates its own remaining resources and then calculate the utility as shown below.

                              
                                 (13)
                                 
                                    
                                       
                                          u
                                          
                                             s
                                             e
                                             r
                                             v
                                             e
                                             r
                                          
                                       
                                       =
                                       
                                          [
                                          
                                             W
                                             x
                                          
                                          ·
                                          
                                             (
                                             
                                                
                                                p
                                             
                                             
                                                u
                                                i
                                             
                                             )
                                          
                                          +
                                          
                                             W
                                             y
                                          
                                          ·
                                          
                                             (
                                             
                                                
                                                a
                                             
                                             
                                                u
                                                i
                                             
                                             )
                                          
                                          ]
                                       
                                    
                                 
                              
                           Where 
                              p
                           
                           ui
                            and 
                              a
                           
                           ui
                            is the utility of the path and utility of the server. Wx, Wy
                            respectively represents the weight assigned to the respective utility parameters. The factor graph of the above scenario is shown in Fig. 4
                            where node v
                           32 and v
                           6 contains the function f
                           32, f
                           6 and variable x
                           32, x
                           6, respectively. Now, the objective of the servers is to find the variable assignment in such a way that maximise the global utility and the objective function of the factor graph represented as

                              
                                 (14)
                                 
                                    
                                       
                                          X
                                          *
                                       
                                       =
                                       a
                                       r
                                       g
                                       
                                          max
                                          x
                                       
                                       
                                          ∑
                                          
                                             
                                                f
                                                i
                                             
                                             ∈
                                             F
                                          
                                       
                                       
                                          f
                                          i
                                       
                                       
                                          (
                                          
                                             x
                                             i
                                          
                                          )
                                       
                                    
                                 
                              
                           where X
                           * is the assignment of values to the variables which maximises the global utility.

In order to solve Eq. (14) using FMS [1] in a decentralised fashion two different types of messages are needed to be exchanged among the server nodes in the network. The message sent from function fi
                            to variable xj
                            is as follows: r
                           
                              i → j
                           (xj
                           ) for 
                              
                                 
                                    x
                                    j
                                 
                                 =
                                 1
                              
                            and 
                              
                                 
                                    x
                                    j
                                 
                                 =
                                 0
                              
                            (1 means provide and 0 means does not provide) where

                              
                                 (15)
                                 
                                    
                                       
                                          r
                                          
                                             i
                                             →
                                             j
                                          
                                       
                                       
                                          (
                                          
                                             x
                                             j
                                          
                                          )
                                       
                                       =
                                       
                                          max
                                          
                                             
                                                x
                                                i
                                             
                                             
                                                ∖
                                             
                                             
                                                x
                                                j
                                             
                                          
                                       
                                       
                                          [
                                          
                                             f
                                             i
                                          
                                          
                                             (
                                             
                                                x
                                                i
                                             
                                             )
                                          
                                          +
                                          
                                             ∑
                                             
                                                
                                                   x
                                                   k
                                                
                                                ∈
                                                
                                                   x
                                                   i
                                                
                                                
                                                   ∖
                                                
                                                
                                                   x
                                                   j
                                                
                                             
                                          
                                          
                                             q
                                             
                                                k
                                                →
                                                i
                                             
                                          
                                          
                                             (
                                             
                                                x
                                                k
                                             
                                             )
                                          
                                          ]
                                       
                                    
                                 
                              
                           This message consists of two utilities values when 
                              
                                 
                                    x
                                    j
                                 
                                 =
                                 1
                              
                            and 
                              
                                 
                                    x
                                    j
                                 
                                 =
                                 0
                              
                           . When a variable receives such a message from a function, it responds by sending an updated q
                           
                              j → i
                            message to each of its neighbours, as follows


                           
                              
                                 
                                    q
                                    
                                       j
                                       →
                                       i
                                    
                                 
                                 
                                    (
                                    
                                       x
                                       j
                                    
                                    =
                                    1
                                    )
                                 
                                 =
                                 q
                              
                            and 
                              
                                 
                                    q
                                    
                                       j
                                       →
                                       i
                                    
                                 
                                 
                                    (
                                    
                                       x
                                       j
                                    
                                    =
                                    0
                                    )
                                 
                                 =
                                 
                                    q
                                    ′
                                 
                              
                            where

                              
                                 
                                    
                                       q
                                       =
                                       
                                          ∑
                                          
                                             
                                                f
                                                k
                                                ′
                                             
                                             ∈
                                             
                                                F
                                                j
                                             
                                             
                                                ∖
                                                i
                                             
                                          
                                       
                                       
                                          r
                                          
                                             k
                                             →
                                             j
                                          
                                       
                                       
                                          (
                                          
                                             x
                                             j
                                          
                                          =
                                          0
                                          )
                                       
                                    
                                 
                              
                           
                           
                              
                                 (16)
                                 
                                    
                                       
                                          q
                                          ′
                                       
                                       =
                                       
                                          max
                                          
                                             b
                                             ≠
                                             j
                                          
                                       
                                       
                                          [
                                          
                                             r
                                             
                                                b
                                                →
                                                j
                                             
                                          
                                          
                                             (
                                             
                                                x
                                                j
                                             
                                             =
                                             1
                                             )
                                          
                                          +
                                          
                                             ∑
                                             
                                                
                                                   f
                                                   k
                                                
                                                ∈
                                                
                                                   F
                                                   j
                                                
                                                
                                                   ∖
                                                
                                                
                                                   f
                                                   b
                                                
                                                ,
                                                
                                                   f
                                                   i
                                                
                                             
                                          
                                          
                                             r
                                             
                                                k
                                                →
                                                j
                                             
                                          
                                          
                                             (
                                             
                                                x
                                                j
                                             
                                             =
                                             0
                                             )
                                          
                                          ]
                                       
                                    
                                 
                              
                           where Fj
                            denotes the set of indices functions connected to xj
                            . Again, the function only considers the utility gained for 
                              
                                 
                                    x
                                    j
                                 
                                 =
                                 0
                              
                            and 
                              
                                 
                                    x
                                    j
                                 
                                 =
                                 1
                              
                           . These messages continue to be passed, until their values no longer change (i.e., the algorithm has converged). Nevertheless, to choose its value, the variable computes its marginal function, 
                              
                                 
                                    z
                                    j
                                 
                                 
                                    (
                                    
                                       x
                                       j
                                    
                                    =
                                    1
                                    )
                                 
                              
                            as follows

                              
                                 (17)
                                 
                                    
                                       
                                          z
                                          j
                                       
                                       
                                          (
                                          
                                             x
                                             j
                                          
                                          =
                                          1
                                          )
                                       
                                       =
                                       
                                          (
                                          
                                             r
                                             
                                                i
                                                →
                                                j
                                             
                                          
                                          
                                             (
                                             
                                                x
                                                j
                                             
                                             =
                                             1
                                             )
                                          
                                          +
                                          
                                             ∑
                                             
                                                
                                                   f
                                                   k
                                                
                                                ∈
                                                
                                                   F
                                                   j
                                                
                                                
                                                   ∖
                                                
                                                
                                                   f
                                                   i
                                                
                                             
                                          
                                          
                                             r
                                             
                                                k
                                                →
                                                j
                                             
                                          
                                          
                                             (
                                             
                                                x
                                                j
                                             
                                             =
                                             0
                                             )
                                          
                                          )
                                       
                                    
                                 
                              
                           The value of zj
                            is computed for all individual servers where only one server will have 
                              
                                 z
                                 =
                                 1
                              
                           . Hence, X
                           * is obtained the corresponds to optimal solution. The whole procedure represented in algorithmic form in Algorithm 1
                           .

Like the server-centric scheme, we assume that the routes to the discovered set of servers are known to the client. The client then sends a selection request(SREQ) packet to all potential servers through the respective routes. Let Vs
                         be the set of server for the requested service. Each vi
                         ∈ Vs
                         has a path pi
                         from the node vi
                         to the client node vc
                        . Let the path be of n numbers of hops and hence it can be represented as an ordered sequence of nodes as

                           
                              
                                 
                                    
                                       p
                                       i
                                    
                                    =
                                    
                                       {
                                       
                                          v
                                          i
                                       
                                       ,
                                       
                                          v
                                          
                                             i
                                             +
                                             1
                                          
                                       
                                       ,
                                       
                                          v
                                          
                                             i
                                             +
                                             2
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          v
                                          
                                             i
                                             +
                                             k
                                             −
                                             1
                                          
                                       
                                       ,
                                       
                                          v
                                          k
                                       
                                       ,
                                       
                                          v
                                          c
                                       
                                       }
                                    
                                    ,
                                    where
                                    
                                    
                                       v
                                       c
                                    
                                    =
                                    
                                       v
                                       
                                          i
                                          +
                                          n
                                       
                                    
                                 
                              
                           
                        Delay between nodes vi
                         and 
                           
                              v
                              
                                 i
                                 +
                                 1
                              
                           
                         is given by

                           
                              
                                 
                                    
                                       d
                                       
                                          
                                             v
                                             i
                                          
                                          ,
                                          
                                             v
                                             
                                                i
                                                +
                                                1
                                             
                                          
                                       
                                    
                                    =
                                    
                                       
                                          (
                                          Queue
                                          
                                          length
                                          
                                          at
                                          
                                          
                                             v
                                             i
                                          
                                          )
                                       
                                       
                                          R
                                          
                                             b
                                             
                                                v
                                                k
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Where 
                           
                              R
                              
                                 b
                                 
                                    v
                                    k
                                 
                              
                           
                         is remaining available bandwidth at node vk
                        . Now, the resources values from vi
                         to vc
                         flows through pi
                         in the following way

                           
                              (i)
                              The server node vi
                                  sends the message vector 
                                    
                                       m
                                       
                                          v
                                          i
                                       
                                    
                                  to 
                                    
                                       v
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                  as

                                    
                                       
                                          
                                             
                                                m
                                                
                                                   v
                                                   i
                                                
                                             
                                             =
                                             
                                                [
                                                
                                                   (
                                                   
                                                      R
                                                      
                                                         c
                                                         
                                                            v
                                                            i
                                                         
                                                      
                                                   
                                                   ,
                                                   
                                                      R
                                                      
                                                         e
                                                         
                                                            v
                                                            i
                                                         
                                                      
                                                   
                                                   ,
                                                   
                                                      R
                                                      
                                                         m
                                                         
                                                            v
                                                            i
                                                         
                                                      
                                                   
                                                   ,
                                                   
                                                      R
                                                      
                                                         b
                                                         
                                                            v
                                                            i
                                                         
                                                      
                                                   
                                                   )
                                                
                                                ,
                                                
                                                   d
                                                   
                                                      
                                                         v
                                                         i
                                                      
                                                      ,
                                                      
                                                         v
                                                         
                                                            i
                                                            +
                                                            1
                                                         
                                                      
                                                   
                                                
                                                ]
                                             
                                          
                                       
                                    
                                 
                              

The node 
                                    
                                       v
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                  sends two vectors 
                                    
                                       [
                                       
                                          m
                                          
                                             i
                                             +
                                             1
                                             ,
                                             1
                                          
                                       
                                       ,
                                       
                                          m
                                          
                                             i
                                             +
                                             1
                                             ,
                                             2
                                          
                                       
                                       ,
                                       
                                          d
                                          
                                             v
                                             
                                                i
                                                +
                                                2
                                             
                                          
                                       
                                       ]
                                    
                                  where

                                    
                                       
                                          
                                             {
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               m
                                                               
                                                                  i
                                                                  +
                                                                  1
                                                                  ,
                                                                  1
                                                               
                                                            
                                                            =
                                                            
                                                               (
                                                               
                                                                  R
                                                                  
                                                                     c
                                                                     
                                                                        v
                                                                        
                                                                           i
                                                                           +
                                                                           1
                                                                        
                                                                     
                                                                  
                                                               
                                                               ,
                                                               
                                                                  R
                                                                  
                                                                     e
                                                                     
                                                                        v
                                                                        
                                                                           i
                                                                           +
                                                                           1
                                                                        
                                                                     
                                                                  
                                                               
                                                               ,
                                                               
                                                                  R
                                                                  
                                                                     m
                                                                     
                                                                        v
                                                                        
                                                                           i
                                                                           +
                                                                           1
                                                                        
                                                                     
                                                                  
                                                               
                                                               ,
                                                               
                                                                  R
                                                                  
                                                                     b
                                                                     
                                                                        v
                                                                        
                                                                           i
                                                                           +
                                                                           1
                                                                        
                                                                     
                                                                  
                                                               
                                                               
                                                               )
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            
                                                               m
                                                               
                                                                  i
                                                                  +
                                                                  1
                                                                  ,
                                                                  2
                                                               
                                                            
                                                            =
                                                            
                                                               (
                                                               
                                                                  R
                                                                  
                                                                     c
                                                                     
                                                                        v
                                                                        i
                                                                     
                                                                  
                                                               
                                                               ,
                                                               
                                                                  R
                                                                  
                                                                     e
                                                                     
                                                                        v
                                                                        i
                                                                     
                                                                  
                                                               
                                                               ,
                                                               
                                                                  R
                                                                  
                                                                     m
                                                                     
                                                                        v
                                                                        i
                                                                     
                                                                  
                                                               
                                                               ,
                                                               0
                                                               )
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            
                                                               d
                                                               
                                                                  v
                                                                  
                                                                     i
                                                                     +
                                                                     2
                                                                  
                                                               
                                                            
                                                            =
                                                            
                                                               d
                                                               
                                                                  
                                                                     v
                                                                     i
                                                                  
                                                                  ,
                                                                  
                                                                     v
                                                                     
                                                                        i
                                                                        +
                                                                        1
                                                                     
                                                                  
                                                               
                                                            
                                                            +
                                                            
                                                               d
                                                               
                                                                  
                                                                     v
                                                                     
                                                                        i
                                                                        +
                                                                        1
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     v
                                                                     
                                                                        i
                                                                        +
                                                                        2
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

For all nodes vk
                                  where 
                                    
                                       i
                                       +
                                       2
                                       ≤
                                       k
                                       <
                                       i
                                       +
                                       n
                                       ,
                                    
                                  the messages sent to 
                                    
                                       v
                                       
                                          k
                                          +
                                          1
                                       
                                    
                                  with following fields.
                                    
                                       
                                          
                                             {
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               m
                                                               
                                                                  k
                                                                  ,
                                                                  1
                                                               
                                                            
                                                            =
                                                            
                                                               (
                                                               m
                                                               i
                                                               n
                                                               
                                                                  {
                                                                  
                                                                     R
                                                                     
                                                                        c
                                                                        
                                                                           v
                                                                           
                                                                              k
                                                                              −
                                                                              1
                                                                           
                                                                        
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     R
                                                                     
                                                                        c
                                                                        
                                                                           v
                                                                           k
                                                                        
                                                                     
                                                                  
                                                                  }
                                                               
                                                               ,
                                                               m
                                                               i
                                                               n
                                                               
                                                                  {
                                                                  
                                                                     R
                                                                     
                                                                        e
                                                                        
                                                                           v
                                                                           
                                                                              k
                                                                              −
                                                                              1
                                                                           
                                                                        
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     R
                                                                     
                                                                        e
                                                                        
                                                                           v
                                                                           k
                                                                        
                                                                     
                                                                  
                                                                  }
                                                               
                                                               ,
                                                               m
                                                               i
                                                               n
                                                               
                                                                  {
                                                                  
                                                                     R
                                                                     
                                                                        m
                                                                        
                                                                           v
                                                                           
                                                                              k
                                                                              −
                                                                              1
                                                                           
                                                                        
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     R
                                                                     
                                                                        m
                                                                        
                                                                           v
                                                                           k
                                                                        
                                                                     
                                                                  
                                                                  }
                                                               
                                                               ,
                                                               m
                                                               i
                                                               n
                                                               
                                                                  {
                                                                  
                                                                     R
                                                                     
                                                                        b
                                                                        
                                                                           v
                                                                           
                                                                              k
                                                                              −
                                                                              1
                                                                           
                                                                        
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     R
                                                                     
                                                                        b
                                                                        
                                                                           v
                                                                           k
                                                                        
                                                                     
                                                                  
                                                                  }
                                                               
                                                               )
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            
                                                               m
                                                               
                                                                  k
                                                                  ,
                                                                  2
                                                               
                                                            
                                                            ≡
                                                            
                                                               m
                                                               
                                                                  i
                                                                  +
                                                                  1
                                                                  ,
                                                                  2
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            
                                                               d
                                                               
                                                                  v
                                                                  
                                                                     k
                                                                     +
                                                                     1
                                                                  
                                                               
                                                            
                                                            ←
                                                            
                                                               d
                                                               
                                                                  v
                                                                  k
                                                               
                                                            
                                                            +
                                                            
                                                               d
                                                               
                                                                  
                                                                     v
                                                                     k
                                                                  
                                                                  ,
                                                                  
                                                                     v
                                                                     
                                                                        k
                                                                        +
                                                                        1
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

Finally the client receives

                                    
                                       
                                          
                                             {
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               m
                                                               
                                                                  (
                                                                  i
                                                                  +
                                                                  n
                                                                  −
                                                                  1
                                                                  )
                                                                  ,
                                                                  1
                                                               
                                                            
                                                            =
                                                            
                                                               (
                                                               
                                                               
                                                                  min
                                                                  
                                                                     p
                                                                     i
                                                                  
                                                               
                                                               
                                                                  {
                                                                  
                                                                     R
                                                                     c
                                                                  
                                                                  }
                                                               
                                                               ,
                                                               
                                                                  min
                                                                  
                                                                     p
                                                                     i
                                                                  
                                                               
                                                               
                                                                  {
                                                                  
                                                                     R
                                                                     e
                                                                  
                                                                  }
                                                               
                                                               ,
                                                               
                                                                  min
                                                                  
                                                                     p
                                                                     i
                                                                  
                                                               
                                                               
                                                                  {
                                                                  
                                                                     R
                                                                     m
                                                                  
                                                                  }
                                                               
                                                               ,
                                                               
                                                                  min
                                                                  
                                                                     p
                                                                     i
                                                                  
                                                               
                                                               
                                                                  {
                                                                  
                                                                     R
                                                                     b
                                                                  
                                                                  }
                                                               
                                                               )
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            
                                                               m
                                                               
                                                                  (
                                                                  i
                                                                  +
                                                                  n
                                                                  −
                                                                  1
                                                                  )
                                                               
                                                            
                                                            =
                                                            
                                                               (
                                                               
                                                                  R
                                                                  
                                                                     c
                                                                     
                                                                        v
                                                                        i
                                                                     
                                                                  
                                                               
                                                               ,
                                                               
                                                                  R
                                                                  
                                                                     e
                                                                     
                                                                        v
                                                                        i
                                                                     
                                                                  
                                                               
                                                               ,
                                                               
                                                                  R
                                                                  
                                                                     m
                                                                     
                                                                        v
                                                                        i
                                                                     
                                                                  
                                                               
                                                               ,
                                                               0
                                                               )
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            
                                                               d
                                                               c
                                                            
                                                            =
                                                            
                                                               ∑
                                                               
                                                                  k
                                                                  =
                                                                  i
                                                               
                                                               
                                                                  k
                                                                  =
                                                                  i
                                                                  +
                                                                  n
                                                                  −
                                                                  i
                                                               
                                                            
                                                            
                                                               d
                                                               
                                                                  v
                                                                  
                                                                     k
                                                                     ,
                                                                     k
                                                                     +
                                                                     1
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

Thus at the client node, first it is checks whether dc
                         < tr
                         and if so sets the path vector as

                           
                              
                                 
                                    
                                       R
                                       
                                          p
                                          i
                                       
                                    
                                    =
                                    
                                       (
                                       
                                       
                                          min
                                          
                                             p
                                             i
                                          
                                       
                                       
                                          {
                                          
                                             R
                                             c
                                          
                                          }
                                       
                                       ,
                                       
                                          min
                                          
                                             p
                                             i
                                          
                                       
                                       
                                          {
                                          
                                             R
                                             e
                                          
                                          }
                                       
                                       ,
                                       
                                          min
                                          
                                             p
                                             i
                                          
                                       
                                       
                                          {
                                          
                                             R
                                             m
                                          
                                          }
                                       
                                       ,
                                       
                                          min
                                          
                                             p
                                             i
                                          
                                       
                                       
                                          {
                                          
                                             R
                                             b
                                          
                                          }
                                       
                                       )
                                    
                                 
                              
                           
                        and server’s resource vector as

                           
                              
                                 
                                    
                                       R
                                       
                                          v
                                          i
                                       
                                    
                                    =
                                    
                                       (
                                       
                                          R
                                          
                                             c
                                             
                                                v
                                                i
                                             
                                          
                                       
                                       ,
                                       
                                          R
                                          
                                             e
                                             
                                                v
                                                i
                                             
                                          
                                       
                                       ,
                                       
                                          R
                                          
                                             m
                                             
                                                v
                                                i
                                             
                                          
                                       
                                       ,
                                       0
                                       )
                                    
                                 
                              
                           
                        we define weight vector for the path as

                           
                              
                                 
                                    
                                       w
                                       p
                                    
                                    =
                                    
                                       (
                                       
                                          w
                                          
                                             c
                                             p
                                          
                                       
                                       ,
                                       
                                          w
                                          
                                             e
                                             p
                                          
                                       
                                       ,
                                       
                                          w
                                          
                                             m
                                             p
                                          
                                       
                                       ,
                                       
                                          w
                                          
                                             b
                                             p
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        and weight vector for server

                           
                              
                                 
                                    
                                       
                                          w
                                          s
                                       
                                       =
                                       
                                          (
                                          
                                             w
                                             
                                                c
                                                s
                                             
                                          
                                          ,
                                          
                                             w
                                             
                                                e
                                                s
                                             
                                          
                                          ,
                                          
                                             w
                                             
                                                m
                                                s
                                             
                                          
                                          ,
                                          
                                             w
                                             
                                                b
                                                s
                                             
                                          
                                          )
                                       
                                    
                                 
                              
                           
                        
                     

To find the goodness of the server (combined with the path ) we compute

                           
                              (18)
                              
                                 
                                    
                                       g
                                       
                                          v
                                          i
                                       
                                    
                                    =
                                    
                                       w
                                       p
                                    
                                    ·
                                    
                                       R
                                       
                                          p
                                          i
                                       
                                    
                                    +
                                    
                                       w
                                       s
                                    
                                    ·
                                    
                                       R
                                       
                                          v
                                          i
                                       
                                    
                                 
                              
                           
                        Where x · y represent the dot product between the vector x and 
                           
                              y
                              .
                           
                        
                     

Goodness values of all the server nodes vj
                         ∈ V
                        
                           s
                         is computed parallely in similar fashion by the client and the server with maximum goodness value is assigned the service request. Let this server be v* then

                           
                              (19)
                              
                                 
                                    
                                       v
                                       *
                                    
                                    =
                                    
                                       max
                                       
                                          ∀
                                          
                                             v
                                             i
                                          
                                          ∈
                                          
                                             V
                                             s
                                          
                                       
                                    
                                    
                                       {
                                       
                                          g
                                          
                                             v
                                             i
                                          
                                       
                                       }
                                    
                                 
                              
                           
                        This is the greedy selection algorithm used by all the nodes for each request they generate. It includes resources of all the nodes at the end to end path and attempts to improve all performance parameters including completion time, service availability and resource utilisation. The whole procedure presented in algorithmic form in Algorithm 2
                        .

The client centric scheme has got a clear advantage of reduced overhead when the server selection algorithm is integrated with route discovery algorithm. Especially, the message passing overhead and the algorithm convergence time are substantially reduced in comparison with the server-centric scheme. However, it is not free from the inherent inefficiency of selfish routing that has been termed as price of anarchy (PoA) in [3].

The server selection activity takes place at a higher time scale compared to packet routing and each server selection makes decision regarding resource allocation for multiple number of packets. Moreover, the information regarding network-wide resource availability takes longer duration of time (typically within reactive control framework) to be available to the decision making node compared to the request generation rate. Hence, under such circumstances the impact of PoA is much higher compared to that observed for routing algorithm in high bandwidth infrastructure based network.

It was shown in [3,24] that NE based best solution may incur 20% degradation of performance compared to a centrally controlled scenario. Moreover, the NE solution is likely to settle at much worse equilibrium resulting in high (more than 30%) resource usage inefficiency. The loss in performance occurs because of very simple reason. When many nodes individually chooses their shortest path they tend to choose the set of lightly loaded links with high probabilities and this phenomenon renders the lightly loaded links congested. If the link state upgradation information are received at a substantially lower frequency than the demand (packet or service request) generation rate then the situation may arise where all nodes always choose routes in such a way that all the good paths are turned into congested paths when some of the previously congested paths may now be free. This phenomenon is exactly what is meant by the PoA. Thus all clients may always choose congested path till the receipt of the next link state update.

It was shown in [4], that a game theory based load balancing routing (GBLBR) scheme can achieve more efficient NE by splitting the fractions of traffic through multiple paths according to the remaining bandwidths along the paths. The basic idea is to avoid congestion along the best path by not forwarding the whole traffic stream through that path but to split fraction of them along the paths which are a bit more loaded. This mechanism smoothens up the greedy approaches that tend to turn ‘best links’ into ‘worsts links’ because of greedy overcrowding. In otherwords the approach achieves a NE of mixed strategies rather than pure strategies.

Now we can suggest a selection scheme that achieves NE of mixed strategies on the resource allocation at the time scale of inter-arrival time of service request and perform resource allocation of significantly coarser level of granularity i.e. per service allocation.

To find out the probability of different strategies in mixed-strategy based NE, we use the goodness measure computed in the proposed client-centric approach. For example let 
                           
                              
                                 g
                                 1
                              
                              ,
                              
                                 g
                                 2
                              
                              ,
                              
                                 g
                                 3
                              
                              ,
                              …
                              ,
                              
                                 g
                                 k
                              
                           
                         be respectively the goodness level of the servers 
                           
                              
                                 s
                                 1
                              
                              ,
                              
                                 s
                                 2
                              
                              ,
                              
                                 s
                                 3
                              
                              ,
                              …
                              ,
                              
                                 s
                                 k
                              
                           
                        . Hence probability of playing the strategy j for achieving mixed-strategy NE can be computed as

                           
                              (20)
                              
                                 
                                    
                                       p
                                       j
                                    
                                    =
                                    
                                       
                                          g
                                          j
                                       
                                       
                                          
                                             ∑
                                             
                                                ∀
                                                
                                                   s
                                                   i
                                                
                                                ∈
                                                s
                                             
                                          
                                          
                                             g
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        Using the above probability distribution the client chooses the server. For example let 10 and 15 be the goodness values of the servers s
                        1 and s
                        2, respectively. Then the probabilities for mixed-strategy equilibrium for the server s
                        1 and s
                        2 are

                           
                              
                                 
                                    {
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      p
                                                      1
                                                   
                                                   =
                                                   
                                                      10
                                                      
                                                         10
                                                         +
                                                         15
                                                      
                                                   
                                                   =
                                                   0.4
                                                   ,
                                                
                                             
                                          
                                          
                                             
                                                for
                                                
                                                
                                                   s
                                                   1
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      p
                                                      2
                                                   
                                                   =
                                                   
                                                      15
                                                      
                                                         10
                                                         +
                                                         15
                                                      
                                                   
                                                   =
                                                   0.6
                                                   ,
                                                
                                             
                                          
                                          
                                             
                                                for
                                                
                                                
                                                   s
                                                   2
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

After evaluating the goodness values the client may generate random number X between 0 to 99. If X < 0.4, it chooses server s
                        1 else server s
                        2.

@&#RESULTS AND DISCUSSION@&#

For implementation of our multi-agent based middleware we choose Java Agent Development Framework (JADE) see Footnote that offers fundamental framework for developing agent actions, message passing and message queue management. We implemented the following server selection algorithms within this framework:
                           
                              1.
                              The selection scheme based on minimum hop count (MHC).

A recently proposed [22] algorithm for service selection in machine to machine (M2M) communication environment where the considered resource types are almost identical to our proposed scheme. But, the amount of resources available in the intermediate nodes have not been included.

Our proposed server-centric scheme abbreviated as PSC.

Our proposed simple client-centric scheme abbreviated as PCC.

The proposed mixed-strategy based scheme abbreviated here as PMSCC.

For creating a mobile pervasive scenario we use emulation rather than pure simulation. We identified 50 personal computers in the Departmental laboratory where the JADE based agents are run parallely in each machine. The desired initial pervasive topology is implemented through assigning routing table for each individual agent. Initially we generated a random ad hoc network of 50 nodes within an area of 
                           
                              100
                              
                              m
                              ×
                              100
                              
                              m
                           
                         and set the transmission range of each node to 
                           
                              25
                              
                              m
                           
                         The routing table for each node were determined by minimum hop count routing. It should be noted that minimum hop count routing and MHC scheme for server selection work in independent paradigm. MHC chooses the server which can be reached travelling minimum number of hops but minimum hop count routing routes packet between the source and the destination through the path that involves minimum number of hops. So when minimum hop count routing is in use, any type of server selection algorithm can be applied above it. Each agent in our implementation represents a node in the ad hoc network and uses the routing table corresponding to that obtained using minimum hop count. Thus each node in the ad hoc network is mapped into a corresponding agent that runs in a PC. This scenario is referred as scenario-1 in rest of the paper.

Next, we generate another random ad hoc network of 200 nodes within an area of 
                           
                              500
                              
                              m
                              ×
                              500
                              
                              m
                           
                         with range for each node as 
                           
                              100
                              
                              m
                           
                        . We derive the routing table for each of these nodes as discussed above but now we run four agents in a single PC with each agent mapped to a specific node in the corresponding ad hoc network. The four different agents in each PC uses four different routing tables as derived for their corresponding nodes by minimum hop count. This scenario is referred as scenario-2 in rest of the paper.

In both the scenarios, the remaining resources are allocated to the agents randomly with uniform distribution as follows 
                           −
                         the ranges of CPU slots, memory space, battery duration and bandwidth are 100 to 1000 megacycles per second (Mc/s), 1MB to 1 GB, 0.5 to 5 h and 1 Mbps to 10 Mbps, respectively. The impact of mobility is implemented assuming random waypoint (RWP) [27] mobility model in 30% of the nodes. We assume that at the peak period 30% of the nodes are mobile and rest are static adding a pervasive flavour. The MHC routing algorithm on the original ad hoc network is re-evaluated at the interval of 30 s to learn any change in the routing tables incurred due to mobility. If changes occur then the corresponding changes are made to the routing tables being used by the respective agents running on the PCs.

It should be noted that the experimental setup, developed here, is an emulated network where node functionalities are actually implemented within the agents. The ad hoc topology and impact of mobility is created virtually and the resources are assigned to the nodes following realistic statistical distributions. The request generation rate with desired QoS parameters follows Poisson’s process. The details of the service generation rates for each type of services within the whole network and QoS requirements used for each type of service is shown in Table 1
                        . For three different classes of Type-1 services, the response time requirements are chosen as 
                           
                              200
                              
                              ms
                              ,
                           
                        
                        
                           
                              400
                              
                              ms
                              ,
                           
                         and 
                           
                              600
                              
                              ms
                           
                         but there is no need for any upper bound for completion time. In Type-2 services completion times are stringent rather than response times and are chosen as 
                           
                              600
                              
                              ms
                              ,
                           
                        
                        
                           
                              900
                              
                              ms
                           
                         and 
                           
                              2000
                              
                              ms
                           
                         for three classes of services within the type. The response time and completion time for Type-3 services are chosen as 
                           
                              (
                              200
                              
                              ms
                              ,
                           
                        
                        
                           
                              400
                              
                              ms
                           
                        ), 
                           
                              (
                              400
                              
                              ms
                           
                         and 
                           
                              900
                              
                              ms
                              )
                           
                         and 
                           
                              (
                              600
                              
                              ms
                              ,
                           
                        
                        
                           
                              2000
                              
                              ms
                              )
                           
                         respectively. The choices are shown in Table 1.

@&#RESULTS AND DISCUSSIONS@&#


                        Fig. 5
                         a and b show the average service response time (tr
                        ) for scenario-1 and scenario-2, respectively for MHC, M2M, PSC, PCC and PMSCC algorithms/schemes. It is observed in Fig. 5a that the response time is the minimum for MHC scheme followed by the M2M scheme. The performance, in terms of response time, is poorer for all our proposed schemes mainly because of additional processing time or algorithm convergence time required for making the decision. Among the proposed schemes, the PCC gives best performance as it requires lowest processing complexity at each node. PMSCC requires a bit more per node processing and the impact is clearly visible in the figure. PSC, on the other hand takes long convergence time for making decision and hence the resulting response time is significantly higher. The same trend is amplified in Fig. 5b as the impact of per node processing time increases with the number of nodes. Here, the performance of PSC is notably worse because of higher message passing latency among the servers. It can be concluded from this figure that the response time for all our proposed schemes is poorer than the two existing schemes chosen for comparison.


                        Fig. 6
                         a and b show the service execution time in the server for all aforesaid schemes in scenario-1 and scenario-2, respectively. We observe that the service execution time is lowest in PSC followed by PMSCC, PCC, M2M and MHC. This is because of the reason that the service execution time is mainly dependent on the remaining CPU slots of the server and in PSC service is allocated to the most appropriate server based on well coordinated (enabled by DCOP based) decision making policy. The service execution time for M2M and MHC is higher than the proposed schemes because none of the two schemes considers the available processing capacity of the servers and minimum bandwidth availability along the routes. From Fig. 6b it can be observed that the value of service execution time in both the scenarios remains almost same as the ratio of availability of CPU slots to the request generation rate varies very negligibly between the scenarios.


                        Fig. 7
                        a and b show the service completion time 
                           
                              (
                              
                                 t
                                 c
                              
                              =
                              
                                 t
                                 r
                              
                              +
                              
                                 t
                                 e
                              
                              +
                              
                                 t
                                 o
                              
                              )
                           
                         for all the five algorithms considered here. It is clear form Fig. 7a that all our proposed schemes outperform the existing ones. Again M2M is better than MHC but both of them perform substantially poorer than that of our proposed set of schemes. Here, the tc
                         for PSC, PCC and PMSCC are almost the same. But, it was noted in Fig. 6 that the service execution time of PSC was far more better than others. Hence, the penalty of response time experienced by PSC is somewhat compensated in overall service completion time. Here PMSCC performs better than PCC because of the advantage of better assignment decision made avoiding PoA. We have also noticed (but not shown in graph) that when average service execution time is sufficiently higher than the average service response time then the average service completion time of PSC is better than MSCC and PCC. While comparing Fig. 7a and b, it is observed that the increase in tc
                         for PSC is relatively higher in Fig. 7b. This increase is contributed by the increase in tr
                         and to
                         because of higher algorithm convergence time and additional resource consumption required by PSC in larger networks.


                        Fig. 8
                        a and b show service drop rates for scenario-1 and scenario-2, respectively. We observe that service drop rate in PMSCC is the minimum followed by PCC and PSC. However, M2M in this case outperforms MHC significantly. The advantage of the proposed schemes is fundamentally derived from consideration of all resource components available even at the intermediate nodes and this in turn helps to balance the traffic load more uniformly among the links. The difference between M2M and MHC is contributed by the inclusion of threshold check in M2M for some important resource components. From Fig. 8b it is observed that the drop rate for all the schemes increases for larger network but, sensitivity of drop rate to the variation of load is much higher in MHC and it increases almost exponentially with load at higher values of load.


                        Fig. 9
                        a and b show the utilisation of total resources available in the system under identical sequence of request generation for scenario-1 and scenario-2, respectively. Here, again, the performance of PMSCC is the best followed by PCC and PSC. The balanced sharing of all the fundamental resource components, including that available at the intermediate nodes, plays the fundamental role behind achieving higher level of resource utilisation. A difference of nearly 20% between PCC and PMSCC proves the observation made in [24] regarding the PoA. Because of higher service drop rate, significant percentage of the resources remain unutilised in M2M and MHC. Hence, the resource utilisation in these two schemes is comparatively lower. A similar trend is observed in scenario-2 but, with amplified difference between the our proposed and existing schemes. Theoretically, the performance of PSC, in resource utilisation, should have been the best but in practice, a considerable fraction of resource is consumed for control-message passing and computational overhead.

The performance of PSC was observed in both the scenarios after excluding the algorithm convergence time and overhead resource requirements (in terms of bandwidth, delay, memory, CPU cycles and battery power) for message passing. It was observed that such an ideal but practically infeasible PSC can attain best set of performance metric. It is also observed that PMSCC achieves almost similar (more than 90%) performance level in practice. Hence, PMSCC closely achieves ideal performance in practice and can avoid the PoA observed in other client-centric approaches.

@&#CONCLUSIONS@&#


                        
                           
                              1.
                              A set of server selection schemes for service-oriented pervasive computing environment has been proposed that includes most important components of sources available at each node of the network including the intermediate ones. The schemes are also independent of underlying routing algorithms.

All the proposed algorithms achieve lower service execution time, lower service drop rate and system-wide resource utilisation by compromising the service response time at least to some extent.

A DCOP based server-centric selection scheme is proposed that can theoretically achieve best performance level but in practice its scope is very limited as it does not scale well even with scenarios having moderate number of nodes. However, it can be used in laboratories to estimate the achievable performance level.

A client-centric server selection scheme is proposed that performs better than the existing schemes except in terms of response tine but the performance metrics can be further improved by avoiding suboptimal NE arising out of greedy selection.

A Client-centric scheme that can achieve superior NE through mixed-strategy is presented and it is found to achieve best set of performance metrics under all scenarios with a little compromise in response time.

The solution can be made more scalable by incorporating context-aware functional segmentation of the network, which we are currently investigating.

@&#REFERENCES@&#

