@&#MAIN-TITLE@&#Inter-domain linker prediction using amino acid compositional index

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           We developed a domain linker predictor from amino acid sequence information.


                        
                        
                           
                           A modified formula for amino acid compositional index is proposed.


                        
                        
                           
                           Domain-linker regions are identified using the amino acid compositional index.


                        
                        
                           
                           A simulated annealing algorithm is employed and tuned to enhance the prediction.


                        
                        
                           
                           The method showed a significant improvement over current methods.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Domain linker prediction

Amino acid composition

Compositional index

Simulated annealing

@&#ABSTRACT@&#


               
               
                  Protein chains are generally long and consist of multiple domains. Domains are distinct structural units of a protein that can evolve and function independently. The accurate and reliable prediction of protein domain linkers and boundaries is often considered to be the initial step of protein tertiary structure and function predictions. In this paper, we introduce CISA as a method for predicting inter-domain linker regions solely from the amino acid sequence information. The method first computes the amino acid compositional index from the protein sequence dataset of domain-linker segments and the amino acid composition. A preference profile is then generated by calculating the average compositional index values along the amino acid sequence using a sliding window. Finally, the protein sequence is segmented into intervals and a simulated annealing algorithm is employed to enhance the prediction by finding the optimal threshold value for each segment that separates domains from inter-domain linkers. The method was tested on two standard protein datasets and showed considerable improvement over the state-of-the-art domain linker prediction methods.
               
            

@&#INTRODUCTION@&#

Proteins can be considered to be built up from domains, and each of which can be considered as a semi-independent structural unit of a protein capable of folding independently (Sun et al., 2013). On the other hand, several domains are often joined together in several combinations to form multi-domain protein sequences (Chothia, 1992; Yoo et al., 2008). Inter-domain linkers tie neighboring domains and support inter-domain communication in multi-domain proteins. They also provide sufficient flexibility to facilitate domain motions and regulate the inter-domain geometry (Bhaskara et al., 2012). Domain linkers play a key role in inter-domain interactions, function regulation, and protein stability (Gokhale and Khosla, 2000; Lehtinen et al., 2004; Dumontier et al., 2005). Several domain prediction methods first detect domain linkers, and, in turn, predict the location of domain regions. The knowledge of structural domains is used to classify proteins, understand their structures, functions and evolution, and predict protein–protein interactions (PPI) (Zaki, 2009). Therefore, accurate computational methods for splitting proteins into structural domains are essential in proteomics research (Hondoh et al., 2006).

Several impressive inter-domain linker prediction methods have been developed and can be generally classified into statistical-based and machine learning-based methods. One of the earlier statistical-based methods is DomCut
                        1
                     
                     
                        1
                        
                           http://www.bork.embl.de/∼suyama/domcut/.
                      (Suyama and Ohara, 2003) which predicts inter-domain linker regions based on the differences in amino acid (AA) composition between domain and linker regions in a protein sequence. To represent the preference for AA residues in linker regions, the authors defined the linker index as: 
                        
                           S
                           i
                        
                        =
                        −
                        ln
                        (
                        
                           
                              f
                              i
                              l
                           
                        
                        /
                        
                           
                              f
                              i
                              d
                           
                        
                        )
                     , where 
                        
                           f
                           i
                           l
                        
                      and 
                        
                           f
                           i
                           d
                        
                      are the frequencies of AA residue i in the linker (l) and domain (d) region, respectively. A linker is predicted if there is a trough in the linker index profile and the averaged linker index value at the bottom of the trough is lower than a defined threshold value. Domcut was tested on a non-redundant 273 protein sequences and achieved 53.5% recall and 50.1% precision. Despite the fact that DomCut showed glimpse of potential success, it was reported by Dong et al. (2006) that DomCut has low sensitivity and specificity in comparison to other later published methods. Therefore, integrating more biological evidences in the linker index could enhance the prediction of the inter-domain linkers and therefore, the idea of DomCut was later expanded by several researchers such as Pang et al. (2008) to identify foldable regions and Zaki et al. (2011a,b) to identify transmembrane helical segments in a protein sequence.


                     Linding et al. (2003) presented another statistical-based method named GlobPlot.
                        2
                     
                     
                        2
                        
                           http://globplot.embl.de.
                      GlobPlot allows users to plot the tendency within protein sequences for exploring both potential globular and disordered/flexible regions in proteins based on their AA sequence, and to identify inter-domain segments containing linear motifs. Other statistical-based methods were presented by Udwary et al. (2002) which predicts the locations of linker regions within large multifunctional proteins and Dumontier et al. (2005) which predicts domain linkers by using AA composition.

Machine learning (ML) based methods are the most commonly used approaches in protein domain linker prediction. Most of the recent approaches employ either Artificial Neural Networks (ANN) such as PRODO (Sim et al., 2005) or Support Vector Machines (SVM) such as DROP (Ebina et al., 2011) to improve the prediction. Other examples of ML-based methods include DomNet (Yoo et al., 2008), Chatterjee et al. (2009), DoBo (Eickholt et al., 2011) and ThreaDom (Xue et al., 2013). However, despite the success of the above mentioned methods they mainly suffer from the following limitations:
                        
                           •
                           Most ML-based methods such as PRODO, DROP, and DomNet are computationally expensive. They require high computational cost to generate the Position-Specific Scoring Matrix (PSSM) and/or predict secondary structure information in a single protein sequence. Finding the structural information by itself is another challenge. In contrast, predicting the domain linkers could lead to inferring the structural information.

Some methods such as PRODO are evaluated based on the overall prediction accuracy which is not a good evaluation strategy in imbalanced data problems. Protein data are imbalanced as domain regions are much longer than linkers and, therefore, classifiers will usually be biased towards the majority class. For example, if domain regions occupy a long portion of a protein sequence, then a classifier could simply assign a domain to the whole protein sequence with high classification accuracy, however, the linkers in this case will not be predicted (all instances classified as +ve and no −ve classes are predicted).

In this work, we develop CISA, a simple but yet effective method for domain-linker prediction solely from AA information. Domain-linker regions will be determined using AA compositional index (CI), and then, a simulated annealing (SA) algorithm will be employed to enhance the prediction by finding the optimal threshold value that separates domains from linkers.

@&#METHOD@&#

The proposed method consists of two main steps; calculating the AA compositional index (CI) for the protein sequence of interest and then refining the prediction by detecting the optimal set of threshold values that distinguish between inter-domain linkers and non-linkers. In the first step, linker and non-linker segments are extracted from the protein sequence dataset and the frequencies of AA appearances in linker segments and non-linker segments are computed. Then, the AA composition of the query protein sequence is computed, and finally the AA compositional index is calculated. In the second step, SA algorithm is applied to find the optimal set of threshold values that separate linker segments from non-linker segments through the compositional index profile. An overview of CISA is illustrated in Fig. 1
                     . Both steps are described in the proceeding sections.

Two protein sequence datasets were used to evaluate the performance of CISA. The first dataset is extracted from the Swiss-Prot database (Bairoch and Apweiler, 2000) and it was previously used by Suyama and Ohara (2003) to evaluate the performance of DomCut. This dataset contains 273 non-redundant protein sequences including 486 linker and 794 domain segments. The average numbers of AA residues in linker and domain segments are 35.8 and 122.1, respectively.

The second dataset is DS-All (Tanaka et al., 2006; Ebina et al., 2009) which was used to evaluate DROP (Ebina et al., 2011). This dataset was extracted from the non-redundant Protein Data Bank (nr-PDB) chain set
                           3
                        
                        
                           3
                           
                              http://www.ncbi.nlm.nih.gov/Structure/VAST/nrpdb.html.
                         by selecting protein sequences containing two or more continuous domains as defined in version SCOP 1.69. The dataset contains 182 protein sequences including 216 linker segments. We excluded few sequences which found to be inconsistent with the PDB database,
                           4
                        
                        
                           4
                           
                              http://http://www.ncbi.nlm.nih.gov/protein.
                         ending up with 151 sequences including 334 domains and 183 linker segments. The average numbers of AA residues in linker and domain segments are 12.7 and 147.1, respectively.

The evaluation measures that we used in this work are recall (R), precision (P), and F1-measure. Recall is defined as the proportion of correctly predicted linkers to all of the structure-derived linkers listed in the dataset. Precision is defined as the proportion of correctly predicted linkers to all of the predicted linkers. Recall and precision are class-independent measures that can handle unbalanced data situation where data points are not equally distributed among classes such as domain-linker data. The F1-measure is an evaluation metric that combines precision and recall in a single value. It is defined as the harmonic mean of precision and recall (Sasaki, 2007; Powers, 2011). F1-score is used as a unified measure to compare two approaches when one approach has higher recall and lower precision than the other.

From each protein sequence s
                        
                           i
                         in the protein sequences database S*, known linker segments and domain segments are extracted and saved in two datasets S
                        1 and S
                        2, respectively. The compositional index c
                        
                           i
                         of the AA is calculated to represent the existence of each AA residue in linker segments and it is defined as:


                        
                           
                              (1)
                              
                                 
                                    c
                                    i
                                 
                                 =
                                 −
                                 ln
                                 
                                    
                                       
                                          
                                             
                                                
                                                   f
                                                   i
                                                   l
                                                
                                             
                                             
                                                
                                                   f
                                                   i
                                                   d
                                                
                                             
                                          
                                       
                                    
                                 
                                 ·
                                 
                                    
                                       
                                          
                                             k
                                             
                                                
                                                   a
                                                   i
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

This is inspired by DomCut method (Suyama and Ohara, 2003) as discussed in Section 1. However, the information encoded in the linker index (LI) is insufficient to precisely predict linker segments. Therefore, we used the compositional index proposed by Zaki et al. (2011a) in which AA compositional knowledge was combined. The typical AA Composition (AAC) contains 20 components, each of which reflects the normalized occurrence frequency for one of the 20 natural AAs in the query sequence. The AAC in this case is denoted by a
                        
                           i
                        . Since domain regions are usually longer than linker regions, AAC for the AA residues are more likely to appear in domains is expected to be greater than those of linkers. So multiplying LI by AAC as in Zaki et al. (2011b) will scale linker regions less than domain regions. In contrast, LI is now multiplied by k/a
                        
                           i
                        , where k is a constant and therefore, LI of linker regions will be scaled up greater than LI of domain regions. In this case linker regions will have deeper troughs in the compositional index profile than other regions. Each residue in the query protein sequence is represented by its corresponding compositional index c
                        
                           i
                        . Subsequently, the index values are averaged over a window that slides along the length of the sequence. To calculate the average compositional index values 
                           
                              x
                              J
                              w
                           
                         along a protein sequence s of length L residues, using a sliding window of size 
                           w
                        , we followed (Zaki et al., 2011a) and applied the following formula:


                        
                           
                              (2)
                              
                                 
                                    x
                                    j
                                    w
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                            
                                                               i
                                                               =
                                                               1
                                                            
                                                            
                                                               j
                                                               +
                                                               (
                                                               (
                                                               w
                                                               −
                                                               1
                                                               )
                                                               /
                                                               2
                                                               )
                                                            
                                                         
                                                         
                                                            c
                                                            si
                                                         
                                                      
                                                      
                                                         j
                                                         +
                                                         (
                                                         (
                                                         w
                                                         −
                                                         1
                                                         )
                                                         /
                                                         2
                                                         )
                                                      
                                                   
                                                   ;
                                                   
                                                   
                                                      1
                                                      ≤
                                                      j
                                                      ≤
                                                      (
                                                      w
                                                      −
                                                      1
                                                      )
                                                      /
                                                      2
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                            
                                                               i
                                                               =
                                                               j
                                                               −
                                                               (
                                                               (
                                                               w
                                                               −
                                                               1
                                                               )
                                                               /
                                                               2
                                                               )
                                                            
                                                            
                                                               j
                                                               +
                                                               (
                                                               w
                                                               −
                                                               1
                                                               )
                                                               /
                                                               2
                                                            
                                                         
                                                         
                                                            c
                                                            si
                                                         
                                                      
                                                      
                                                         j
                                                         +
                                                         (
                                                         (
                                                         w
                                                         −
                                                         1
                                                         )
                                                         /
                                                         2
                                                         )
                                                      
                                                   
                                                   ;
                                                   
                                                   
                                                      (
                                                      w
                                                      −
                                                      1
                                                      )
                                                      /
                                                      2
                                                      <
                                                      j
                                                      ≤
                                                      L
                                                      −
                                                      (
                                                      w
                                                      −
                                                      1
                                                      )
                                                      /
                                                      2
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                            
                                                               i
                                                               =
                                                               j
                                                            
                                                            L
                                                         
                                                         
                                                            c
                                                            si
                                                         
                                                      
                                                      
                                                         L
                                                         −
                                                         j
                                                         +
                                                         1
                                                         +
                                                         (
                                                         w
                                                         −
                                                         1
                                                         )
                                                         /
                                                         2
                                                      
                                                   
                                                   ;
                                                   
                                                   
                                                   L
                                                   −
                                                   (
                                                   w
                                                   −
                                                   1
                                                   )
                                                   /
                                                   2
                                                   <
                                                   j
                                                   ≤
                                                   L
                                                
                                             
                                             
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where s
                        
                           i
                         is the AA at position i in protein sequence s.

Since using a fixed sliding window size may be bias towards a fixed linker region length, various odd window sizes are examined. The averaging is also carried out over this range according to the following equation:


                        
                           
                              (3)
                              
                                 
                                    
                                       x
                                       ¯
                                    
                                    j
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                          
                                             l
                                             =
                                             0
                                          
                                          
                                             (
                                             e
                                             −
                                             r
                                             )
                                             /
                                             2
                                          
                                       
                                       
                                          m
                                          j
                                          
                                             r
                                             +
                                             2
                                             l
                                          
                                       
                                    
                                    
                                       (
                                       (
                                       e
                                       −
                                       r
                                       )
                                       /
                                       2
                                       )
                                       +
                                       1
                                    
                                 
                                 
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 L
                              
                           
                        where r and e are odd averaging window sizes ≥3.

To illustrate the improvement of our modified compositional index over both the linker index of Suyama and Ohara (2003) and the compositional index of Zaki et al. (2011a,b), three profiles of a protein 1au7_A are plotted as shown in Fig. 2
                        . The 1au7_A protein sequence of Chain A, Pit-1 MutantDNA Complex retrieved from NCBI has 146 AA residues and contains an actual domain linker located in the positions from 74 to 109, and indicated by the horizontal arrow in the figure. The figure shows that the modified compositional index can separate linker regions from domain regions more accurately and sharply than those of Suyama and Ohara (2003) and Zaki et al. (2011b). Fig. 2(c) shows how the trough in the linker region is deeper than those of Fig. 2(a) and (b), respectively. We can also notice that the profile in Fig. 2(b) has a second trough indicating a false linker in the right side of the profile which is deeper than the actual linker's trough.

Another example is illustrated in Fig. 3
                         based on the 1f6f_C protein which has 210 AA residues and one linker indicated by the arrow. Fig. 3(a) (the linker index of Suyama and Ohara, 2003) and 3(b) (the compositional index of Zaki et al., 2011b) show more than one trough indicating false linkers and the index values of these false linkers are less than those of the actual linker. However, Fig. 3(c) clearly shows that, according to our proposed modified formula, the residues in the actual linker regions have lower index values than those of other residues which allows to easily find a separation threshold.

The horizontal arrow indicates the actual linker region located in the positions from 74 to 109 (according to NCBI). Each AA below a defined threshold is considered to be a linker. Although all three methods predicted the linker in this case, the linker predicted by CISA is more accurate when compared to the actual linker.

As shown in Figs. 2 and 3, having a static threshold cannot precisely separates linkers from domain regions, and therefore, a dynamic threshold is required. We applied the SA technique to detect the optimal set of threshold values that will separate linkers from domain regions along the protein sequence.

Simulated annealing is a simple easily applicable optimization technique introduced by Kirkpatrick and Vecchi (1983) as a computational analogous to the annealing process which is the heating and controlled cooling of a metal to increase the size of its crystals and reduce their defects. The function to be optimized in SA is called the energy, E(x), of the state x, and during that, a parameter T, the computational temperature, is lowered throughout the process. SA is an iterative trajectory descent algorithm that keeps a single candidate solution at any time (Vega-Rodríguez et al., 2007; Mendes et al., 2009).

The major advantage of SA is its ability to avoid being trapped in local optima. This is because the algorithm applies a random search which does not only accept changes that improve the objective function, but also some changes that temporarily worsen it (Busetti, 2003; Henderson et al., 2003). Geman and Geman (1984) presented evidence that SA guarantees to converge to the global optimum if the cooling schedule is adequately slow. On the other hand, Salamon et al. (2002) and Ingber (1993) reported through experience that SA shows a very effective optimization performance even with relatively rapid cooling schedules (Smith et al., 2008). SA is commonly found in industry and provides good optimization results (Vega-Rodríguez et al., 2007; Mendes et al., 2009).

SA have been examined and showed well performances in a variety of single-objective and multi-objective bioinformatics optimization applications such as dynamic pathway identification from gene expression profiles (Ho et al., 2007), eukaryotic cell cycle regulation (Noel et al., 2011), gene network model optimization (Tomshine and Kaznessis, 2006), biclustering of gene expression data (Bryan et al., 2005), and multiple biological sequence alignment (Ishikawa et al., 1993; Kim et al., 1994; Frith et al., 2004). However, examining SA in protein sequence analysis is not well addressed in the literature. Due to this reason, in addition to the previously mentioned SA features, we have decided to use SA in domain-linker prediction. As mentioned earlier, a dynamic threshold value is required to separate domains from linker segments. This is done by first dividing each protein sequence into chunks. Then, starting from a random threshold value for each chunk, SA is applied to predict the optimal threshold in each chunk that maximizes both the recall and precision of the domain-linker prediction.

In this case, the compositional index values, 
                           
                              m
                              j
                              w
                           
                        , are used in conjunction with SA algorithm. Starting from a random seed S
                        
                           o
                        , which is a set of threshold values of the compositional index chunks, SA will attempt to simultaneously maximize both recall R(S) and precision P(S), which can be considered as a multi-objective optimization problem with both R(S) and P(S) are the fitness functions and the set of threshold values, S, is the candidate solution space, or individual representation. That is:


                        
                           
                              (4)
                              
                                 max
                                 
                                 y
                                 =
                                 f
                                 (
                                 S
                                 )
                                 ≡
                                 (
                                 R
                                 (
                                 S
                                 )
                                 
                                 and
                                 
                                 P
                                 (
                                 S
                                 )
                                 )
                              
                           
                        
                     

Precision and recall should be maximized simultaneously. A perfect precision score can be achieved by simply assigning “domain” to all the protein sequence residues (FP=0), and a perfect recall score can be simply achieved by assigning “linker” to all residues (FN=0). A truly accurate predictor should assign the correct categories and only the correct categories, maximizing precision and recall at the same time, and maximizing the F1 score accordingly.

In our case, SA accepts a transition from state S
                        1 to another state S
                        2 if S
                        2 dominates S
                        1, that is, if S
                        2 is not worse for all objectives than S
                        1 and wholly better for at least one objective. In other words, SA accepts a transition that leads to one of the three following conditions: an increase in both recall and precision, an increase in recall if precision is not changed, or an increase in precision if recall is not changed. That is:


                        
                           
                              (5)
                              
                                 
                                    
                                       
                                          
                                             
                                                R
                                                (
                                                
                                                   S
                                                   2
                                                
                                                )
                                                >
                                                R
                                                (
                                                
                                                   S
                                                   1
                                                
                                                )
                                                
                                                and
                                                
                                                P
                                                (
                                                
                                                   S
                                                   2
                                                
                                                )
                                                ≥
                                                P
                                                (
                                                
                                                   S
                                                   1
                                                
                                                )
                                                ,
                                             
                                          
                                          
                                             
                                                or
                                             
                                          
                                          
                                             
                                                P
                                                (
                                                
                                                   S
                                                   2
                                                
                                                )
                                                >
                                                P
                                                (
                                                
                                                   S
                                                   1
                                                
                                                )
                                                
                                                and
                                                
                                                R
                                                (
                                                
                                                   S
                                                   2
                                                
                                                )
                                                ≥
                                                R
                                                (
                                                
                                                   S
                                                   1
                                                
                                                )
                                             
                                          
                                          
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

SA will also accept a transition from state S
                        1 to S
                        2 if S
                        2 does not dominate S
                        1 with a probability of e
                        (−Δf/T), where Δf
                        =
                        f(S
                        2)−
                        f(S
                        1), and T is the temperature parameter which expected to be reduced over time during the process and therefore, the possibility of accepting such transitions is decreased. The proposed method is summarized in Algorithm 1.


                        
                           Algorithm 1
                           Domain-Linker Prediction Optimization
                                 
                                    Set S
                                       0 as an initial candidate solution:

  Divide the protein sequence into chunks

  Assign a random initial threshold of each chunk

Calculate CI

Classify each AA as linker (1) or domain (0) according to its CI value with respect to the corresponding chunk threshold

Calculate the fitness functions R(S
                                       0) and P(S
                                       0)


                                       T
                                       0
                                       ←
                                       Initial
                                       
                                       temperature
                                    


                                       α
                                       ←
                                       Temerature
                                       
                                       decay
                                    

Maximize the fitness functions:


                                       for 
                                       n
                                       =1 to Number
                                       
                                       of
                                       
                                       Chunks
                                       do
                                    

  
                                       T
                                       ←
                                       Temperature
                                    

  
                                       repeat
                                    

    Make a transition Tr:

      randomly increase or decrease threshold of n

      
                                       S
                                       ←
                                       Tr(S
                                       0)

    Classify each AA as linker or domain

    Calculate R(s) and P(s)

    ΔR
                                       ←
                                       R(S)−
                                       R(S
                                       0) and ΔP
                                       ←
                                       P(S)−
                                       P(S
                                       0)

    
                                       if (ΔR
                                       >0 and ΔP
                                       ≥0) or (ΔP
                                       >0 and ΔR
                                       ≥0)then
                                    

      accept transition

    
                                       else if 
                                       
                                          random
                                          [
                                          0
                                          ,
                                          1
                                          ]
                                          <
                                          exp
                                          
                                             
                                                
                                                   −
                                                   
                                                      
                                                         Δ
                                                         R
                                                         +
                                                         Δ
                                                         P
                                                      
                                                      T
                                                   
                                                
                                             
                                          
                                       
                                       then
                                    

      accept transition

    
                                       end if
                                    

    
                                       T
                                       ←
                                       α
                                       ×
                                       T
                                    

  
                                       until stopping criteria is met


                                       end for
                                    


                                       return 
                                       S as the set of optimal threshold values for the protein sequence chunks


                                       return 
                                       R(S) and P(S) as the final recall and precision, respectively

The datasets and source codes used in this study are freely available for academic purposes at http://faculty.uaeu.ac.ae/nzaki/Research.htm.

We evaluated the performance of CISA using DomCut/Swiss-Prot protein dataset which was prepared by Suyama and Ohara (2003) using one-against-all cross validation and explored different chunk sizes {5, 10, 18, 36} where 36 is the average linker size within the dataset. CISA was able to achieve an average recall of 0.89, precision of 0.80 and F1-measure of 0.84 on a window size of 25 residues and a chunk of 5 residues Fig. 4
                      presents these evaluation metrics at different chunk sizes.

In the second experiment, we evaluated the performance of our method on 151 protein sequences of DS-All dataset including 182 linker and 332 domains. In this experiment DomCut dataset was used to generate the linker index of each AA before using them to predict the inter-domain linker regions in DS-All dataset. Several odd sliding window sizes 
                        w
                      in the range of 5–25 AAs are explored for computing the compositional index 
                        
                           x
                           j
                           w
                        
                      according to Eq. (2). It was noticed that the best results were achieved when 
                        w
                        ≥
                        19
                      as shown in Fig. 5
                     . Further, we tested the averaging 
                        
                           
                              x
                              ¯
                           
                           j
                        
                      over a range of 5–25 AAs according to Eq. (3). This process takes a longer computational time without a significant improvement in the prediction accuracy as shown in Fig. 5. As a result, we decided to set 
                        w
                      to 25 in all of our experimental works. To optimize the scaling constant k, we examined three values {1, 10, 100}. Based on Eq. (1), we found that F1-score is slightly higher when k
                     =100 than k
                     =10, and significantly higher than that at k
                     =1.

We have also explored several chunk sizes {5, 10, 13}, where 13 is the average linker size among the dataset. Fig. 6
                      presents these evaluation metrics at different chunk sizes. We were able to achieve an average prediction recall of 0.78, precision of 0.79 and F1-measure of 0.79 when the chunk size was set to 5 AA long.

Although our algorithm selects a random chunk in the initial iteration, it can be easily modified to scan the protein sequence from left to right in order to cover the whole chunks across the chain. One of the challenges that we faced during the evaluation step of the algorithm is the division by zero during the calculation of the precision. This is normally happens at the early stages where no AA regions are predicted as linkers and, therefore, the true positive (TP) and false positive (FP) are zeros. To overcome this challenge, we designed the algorithm in a way to reject such state and immediately performs a new transition.

Another challenge is the fact that the recall R(S) and precision P(S) are not continuous functions. In other words, a change in S (the set of threshold values) may cause a jump in the values of R(S) and P(S), or it may cause no change in both values. At the same time the transition, ΔS should be maintained, which is a change in a threshold of one chunk, within a reasonable range that we set to be 1/10 of the compositional index range. Therefore, the algorithm should perform several transitions till it passes from state S
                     1 to a more dominant state S
                     2. However, while performing, these transitions, ΔR and ΔP will be zeros while the algorithm has not yet converged to the global maximum. Therefore, we did not consider having ΔR
                     =0 and ΔP
                     =0 as a stopping criteria. Instead, we set the number of iterations to 20 per chunk.

One of the SA algorithm issues we had to deal with is the random seed, or initialization issue. Depending on the initial state, SA performs differently and returns different outputs. This issue can be addressed by setting a predefined initial threshold value for the whole input sequence residues. We set this initial threshold to be the average value of the CI as this average value is somehow in the middle of the CI profile which can help SA to converge more efficiently by either stepping-up the threshold in linker segments or stepping-down the threshold in domain segments.

To demonstrate the performance of CISA, Fig. 7
                        (a) shows the compositional index profile for 1au7_A protein sequence in DS-All dataset which contains 146AA residues and has two domains and a domain-linker in the region from 73 to 109. The figure also shows the optimal threshold values achieved by CISA. It is shown that the compositional index threshold values at linker segments are raised by the algorithm while threshold values of domains are reduced. In this case the compositional index values of a linker segment will be lower than its associated threshold values. The compositional index values of a domain segment will also be higher than its associated thresholds, and this, in turn, improve the prediction. The three dimensional structure of this protein is shown in Fig. 7(b) which shows the two domains in red and green retrieved from the National Center for Biotechnology Information (NCBI).
                           5
                        
                        
                           5
                           
                              http://www.ncbi.nlm.nih.gov/.
                        
                     

Identification of domain linkers locations is often the first step in protein folding and function annotations. Another example that illustrates how CISA can furthermore assists in detecting important domains by identifying linkers is the detection of three important conservative domains in the breast cancer type 1 susceptibility protein isoform 4 [Homo sapiens] which consists of 759 AAs. Fig. 8
                         presents the modified compositional index profile for this protein and the threshold values achieved by CISA. It is shown that the proposed algorithm can accurately detect the domain linkers which leads to the identification of three important domains. The first domain is RING-finger domain which is a specialized type of Zn-finger that binds two atoms of zinc, involved in mediating protein-protein interactions, and identified in proteins with a wide range of functions such as viral replication, signal transduction, and development. This domain is located at positions 23–68. The other two domains are Breast Cancer Suppressor Protein (BRCA1), carboxy-terminal domains. They are found within many DNA damage repair and cell cycle checkpoint proteins. These two domains are located in positions from 546 to 620 and from 659 to 738, respectively.

Based on the DS-All dataset, the performance of CISA was compared to the currently available domain linker prediction approaches as shown in Fig. 9
                        . CISA was able to outperform 6 of the state-of-the-art domain-linker prediction approaches in terms of recall, precision and F1-score. As shown in Table 1
                        , the performance of CISA was also compared to the recent predictor developed by Shatnawi and Zaki (2013) and DomCut based on the Swiss-Prot/DomCut dataset. CISA was also able to show considerable improvement in prediction accuracy.

In this work, we developed CISA, a method for detecting inter-domain linkers regions from AA sequence information. Experimental results showed that CISA outperformed the currently available approaches of inter-domain linker prediction in terms of recall, precision, and F1-score. It was also shown that CISA is capable of predicting novel linkers which could lead to the identification of crucial structural domains such as RING-finger and carboxy-terminal domains. The main reasons behind the considerable accuracy achieved by CISA is the improvement in the concept of AA compositional index (CI) and the adoption/tuning of the SA algorithm to refine the prediction by finding the optimal set of threshold values that separate domains from linker regions.

Although SA has significantly improved the prediction, additional tuning could accomplish more effective and flexible prediction. One of these tuning strategies is the use of dynamic chunk sizes which could, in turn, obtains better optimization and more accurate prediction. CISA has a potential to perform well if it is applied to human proteins where novel inter-domain linkers could be recognized. This work can be extended by exploring other CI models such as the weighted sum or the weighted product of LI and AAC, and employ SA to find the optimal weights along with the optimal threshold that separate linker regions from domain regions. Furthermore, combining compositional index with other biological features such as the PSSM, AA physiochemical properties, and hydrophobicity can also be examined. Other optimization techniques such as Genetic Algorithm can be examined and compared to SA in domain linker prediction, or both techniques could be combined in a hybrid approach.

The authors declare that they have no competing interests.

@&#ACKNOWLEDGMENT@&#

The authors would like to acknowledge the support provided by the Research and Graduate Studies office at the United Arab Emirates University (UAEU).

@&#REFERENCES@&#

