@&#MAIN-TITLE@&#Discriminating risky software project using neural networks

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           This study presents a predictive model to effectively predict riskiness of a project.


                        
                        
                           
                           Artificial neural networks can be used to learn the complex patterns of the OMRON dataset.


                        
                        
                           
                           Performance is evaluated and shown to be more advantageous than the logistic regression model.


                        
                        
                           
                           It provides better accuracy and sensitivity.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Risks

Software project risk management

Risky project

Neural network

@&#ABSTRACT@&#


               
               
                  Early and accurate discrimination of risky software projects is critical to project success. Researchers have proposed many predictive approaches based on traditional modeling techniques, but the high misclassification rate of risky projects is common. To overcome this problem, this study proposes a typical three-layered neural network (NN) architecture with a back propagation algorithm that can learn the complex patterns of the OMRON dataset. This study uses four accuracy evaluation criteria and two performance charts to objectively quantify and visually illustrate the performance of the proposed approach. Experimental results indicate that the NN approach is useful for predicting whether a project is risky. Specifically, this approach improves accuracy and sensitivity by more than 12.5% and 33.3%, respectively, compared to a logistic regression model developed from the same database. These results imply that the proposed approach can be used for early planning of limited project/organization resources and appropriate action for risky projects that are likely to cause schedule slippage and cost overload.
               
            

@&#INTRODUCTION@&#

A recent industry survey has revealed that software projects can fail due to a variety of problems including cost overload, schedule slippage, requirement misunderstandings, and client dissatisfaction [1]. There is a certain risk involved for any worthwhile software project. This fact highlights the need for early identification of risky projects to enable the planning of essential risk management activities and resources during their implementation. Suitable planning of resources and actions can effectively increase the success rates of such software projects [2].

Research work on risk prediction for software projects involves two approaches: (1) predicting the overall degree of risk of a project and (2) predicting whether a project is risky. The former provides a quantifiable risk value so that project managers can discriminate between high, medium, or low risk software projects with respect to a given project risk level scale or by using clustering techniques [3–5]. The latter provides a meaningful sign (risky/not risky) as a classifier that a risk-prone project can be effectively identified early and thus aid the planning of risk management strategies [6,7]. The latter approach was considered in this study.

Numerous binary prediction approaches have been constructed by statistical techniques for classifying risk-prone projects in the literature. Examples include logistic regression [6], Bayesian classification [8], and the association rule [9]. Although the overall classification accuracy of these approaches is at an acceptable level, correctly identifying a risky project at a true-positive rate is still a challenge.

Effort investment without the premise that a risky project is correctly identified at the initial stage is ineffective [10]. For project managers, misjudging a risky project diminishes their alertness during implementation. Consequently, the failure rates of the project would increase without prior warning and thus, a great cost would be expended in controlling the crisis. In other words, the incorrect classification of not risky projects at the initial stage does not increase failure rates, even if extra effort and resources are invested.

While neural networks (NNs) are regarded as a useful and accurate model building technique, little research has been conducted using this method to investigate issues related to software project risk management. The two known applications we found focused on risk analysis [11] and risk control [12]. There are currently no studies on the use of NN for classifying projects as either risky or not risky.

In this study, an NN model with a back propagation algorithm is developed to predict how risk-prone a software project is. The remainder of this paper is organized as follows. Section 2 reviews some approaches related to project risk prediction. In Section 3, we introduce the OMRON dataset and briefly explain the basic concepts of NN. The steps for constructing our prediction approach are presented in Section 4. In Section 5, the experimental results are presented and then compared to results without the prediction model. A comparison with previous work using logistic regression is shown in Section 6. The external valuations produced are shown in Section 7. Conclusions are presented in Section 8. Finally, limitations and directions for future research are presented in Section 9.

@&#RELATED WORK@&#

The International Organization for Standardization (ISO) has published ISO/IEC 16085 [13], addressing necessary processes to continuously manage risks throughout the life cycle of a product or service. This standard can be applied by any organization to manage risk as uncertainty so that meaningful actions can be taken that reduce or eliminate the probability and/or impact of these risks. ISO/IEC 16085 suggests that a complete risk management process must consist of seven essential activities: “plan and implement risk management;” “manage the project risk profile;” “perform risk analysis;” “perform risk monitoring;” “perform risk treatment;” “evaluate the risk management process;” and “technical and management processes.” Fig. 1
                      shows the structural process of this standard. Beginning with an analysis of Fig. 1, it can be seen that the “perform risk analysis” activity is critical because the risk-proneness of a project should be captured to make recommendations for treatment at the initial stage.

Understanding the risk-proneness of a project is critical when trying to determine whether to invest more effort and limited project/organization resources into a new project. Hence many predictive models have been proposed to assist project managers in managing risky projects in the early stages. For example, Karolak [14] used a Bayesian probability tree approach to develop a software engineering risk management (SERIM) method for predicting the risk of software projects. The method proposes a well-defined structure with 81 risk questions, but no empirical studies or data have been used to examine or improve its performance until now.

Tiwana et al. [4] investigated the importance of six risk factors for software projects. Subsequently, they built a multiple linear regression model to yield an overall risk score which was then converted into five given project risk levels (high, moderately high, medium, moderately low, and low). Although the foundation of the model was based on a large dataset including 720 projects, the predictive performance of the model was not provided and the external validity of extra new projects was not performed.

Mizuno et al. [8] used a Bayesian classification approach to predict the risk proneness of a software project based on 40 historical projects in the OMRON company. The 10-fold cross-validation results indicated that seven projects were not predicted correctly, corresponding to 17.5% inaccuracy. Moreover, two of the seven misclassified projects were risky projects.

Takagi et al. [6] used the same dataset as Mizuno et al. to classify risky projects by logistic regression. The predictive model was constructed based on 32 projects from 1996 to 1997 and was then validated by 8 projects in 1998. Only one validation project was classified incorrectly. Unfortunately, this misclassified project was a risky project.

Amasaki et al. [9] also applied the OMRON dataset to build a predictive model. Eleven rules were extracted by the association rule, and their minimum confidence was between 0.63 and 0.91. They achieved an overall accuracy of 75% based on 12 private projects from 2003 to 2004. However, three risky projects were still classified incorrectly as not risky projects.

Three known models were developed from the OMRON dataset to build predictive models for the risky nature of a project. Unfortunately, these approaches all have the same issue that some risky projects are regarded as not risky. Therefore, there is considerable interest in using NN for the same purpose.

@&#MATERIAL AND METHODS@&#

The OMRON database was used for this research. The dataset was collected by the Software Engineering Process Group (SEPG) of the Social Systems Solutions Business Company (SSBC) for the OMRON Corporation, to better predict risky projects (confusion-prone projects). This dataset comprises 40 valid projects completed in the past and 24 attributes (22 project risk factors and 2 project background features). These 22 project risk factors comprise five viewpoints: (1) requirements (Reqm), (2) estimations (Estm), (3) planning (Plan), (4) team organization (Team), and (5) project management activities (Prma).

A risky project is defined as exceeding the budget and lacking control during project implementation; it is represented by the attribute Status to label whether the project is risky (confused) or not risky (not confused). Unlike other known project risk datasets [4], this dataset is publicly available and published in [8]. The 24 attributes that describe each project are presented in Table 1
                        .

NNs constitute a widely used machine learning approach for modeling complex non-linear relationships. Unlike traditional modeling techniques, which lay an underlying data distribution such as normal distribution, NN is a distribution-free modeling technique. Presently, NNs are the most common model building technique and have been applied to a wide variety of business problems, especially credit scoring, defect classification, disease detection, and quality evaluation [15–18].

NNs are commonly categorized in terms of their corresponding learning approaches: unsupervised and supervised. The objective of unsupervised learning algorithms focuses on finding clusters of inputs when the number of target outputs is unknown. Commonly used unsupervised learning algorithms include the self-organized map [19] and adaptive resonance theory [20]. In contrast, supervised learning algorithms focus on gradually learning the implicit patterns between known inputs and outputs in a training set to minimize misclassification errors. The most common supervised training algorithm is the back propagation algorithm [21]. Of the different architectures used in NN, multilayer perceptrons (MLPs) are most common. As shown in Fig. 2
                        , the architecture consists of an input layer, one or more hidden layer, and an output layer.

As shown in Fig. 3
                        , our research methodology was divided into three separate steps. At Step 1, all 40 projects in the OMRON dataset were divided into training and validation sets containing 32 and 8 projects, respectively. The partition principle was adopted for consistency with the work of Takagi et al. to allow for a meaningful comparison.

At Step 2, a typical three-layered NN architecture with a back propagation algorithm was built using a training set; the set included 20 projects in the not confused group and 12 projects in the confused group. The network architecture included 23 attributes: 22 risk factors as input layer variables and the status as the output layer variable. Following the recommendation of Hornik et al. [22] and Wong [23] that a single hidden layer is sufficient for constructing any complex problems with the desired accuracy, our network model design has one hidden layer. The nonlinear transfer function used by the hidden and output layers is a sigmoid function. The learning rate and momentum for network training were set to 0.4 and 0.9, respectively, and the training procedures were terminated once 10,000 training epochs were achieved. The software used to construct the NN was SPSS 18.0.

For the final step, we examined the predictive accuracy of our model on the validation set, which included five projects in the not confused group and three projects in the confused group. In addition, we used a cumulative gain chart and a lift chart to visualize the actual performance effectiveness of using the predictive model versus without the predictive model. In addition to the cumulative gain chart and the lift chart, we also summarized the performance of the predictive model from the four accuracy evaluation measures and then compared our results with the work of Takagi et al.

The classification accuracy evaluation is typically examined by the confusion matrix shown in Fig. 4
                        , where TP (true positive) is the number of correct predictions that a project is positive; FN (false negative) is the number of incorrect predictions that a project is negative; FP (false positive) is the number of incorrect predictions that a project is positive; and TN (true negative) is the number of correct predictions that a project is negative.

In this study, the performance of a given predictive model was obtained using four widely used evaluation measures: accuracy, precision, sensitivity, and specificity. All are derived from the confusion matrix and are described below.

Accuracy (AC) is also called the correct classification rate (CCR). It is expressed as the percentage of the total number of predictions that were correct. It is calculated as follows:
                              
                                 
                                    Accuracy
                                    =
                                    
                                       
                                          T
                                          P
                                          +
                                          T
                                          N
                                       
                                       
                                          T
                                          P
                                          +
                                          F
                                          P
                                          +
                                          F
                                          N
                                          +
                                          T
                                          N
                                       
                                    
                                    .
                                 
                              
                           
                        

Precision (P) is also called correctness. It is expressed as the percentage of the predicted positive cases that were correct. It is calculated as follows:
                              
                                 
                                    Precision
                                    =
                                    
                                       
                                          T
                                          P
                                       
                                       
                                          T
                                          P
                                          +
                                          F
                                          P
                                       
                                    
                                    .
                                 
                              
                           
                        

Sensitivity (SEN) is also known as the true-positive rate (TPR). It is expressed as the percentage of positive cases that were correctly identified. Typically, project managers who use predictive models for risk management are mainly interested in the correct identification of risky projects. It is calculated as follows:
                              
                                 
                                    Sensitivity
                                    =
                                    
                                       
                                          T
                                          P
                                       
                                       
                                          T
                                          P
                                          +
                                          F
                                          N
                                       
                                    
                                    .
                                 
                              
                           
                        

Specificity (SPE) is also known as the true-negative rate (TNR). It is expressed as the percentage of negative cases that were classified correctly. It is calculated as follows:
                              
                                 
                                    Specificity
                                    =
                                    
                                       
                                          T
                                          N
                                       
                                       
                                          T
                                          N
                                          +
                                          F
                                          P
                                       
                                    
                                    .
                                 
                              
                           
                        

@&#RESULTS@&#


                        Table 2
                         presents the experimental results using the training and validation sets. The predictive value of each software project can be found in Appendix A. As shown in Table 2, the NN model in the training stage achieved a predictive accuracy of 100% in the confused project group and 90.90% in the not confused project group. Overall, 93.8% of the training projects were predicted correctly, so 6.2% of the projects were predicted incorrectly.

Two not confused projects were misclassified as risky projects: projects 16 and 22. This indicated that the predictive model has a lower performance in terms of predicting not confused projects in the training stage. However, from the management's point of view, if a project is identified as risk-prone in the initial stage, project managers can take more care and then adopt essential risk management practices. The results of incorrect classification will not increase the failure rate of a project although it will lead to the devotion of extra effort.

At the validation stage, all validation projects were predicted correctly. The results indicate that good classification accuracy can be achieved using our predictive model.

The cumulative gain chart and the lift chart are widely used to visualize the actual effectiveness for the performance of a predictive model versus the performance without the predictive model (baseline). Figs. 5 and 6
                        
                         present the results for the predictive model (NN model) and random model (baseline), respectively. The 45° line represents the expected performance of the random model by guessing. The further the cumulative gain chart and lift curve is from the 45° line, the better the model.

For example, as shown in Fig. 5, the first point on the curve for the confused project group is at (10%, 23%). This indicates that if we used the top 10% of the data using no model (guessing), we expect to get 10% of the risky projects, whereas using the predictive model (NN model) we would get 23%. Similarly, the lift chart is derived from the cumulative gain chart and provides another way to indicate the advantages of using a model as opposed to not using one. As shown in Fig. 6, the lift value for the top 10% of the confused project group is 2.3 (23%/10%) when using the predictive model (NN model).

A comparison of the classification performance results is given in Table 3
                        . The results at the training stage indicate two points. First, the accuracy, precision, sensitivity, and specificity of our predictive model were all higher than 83%. Second, our model had a higher accuracy and sensitivity than logistic regression but underperformed in terms of precision and specificity.

At the validation stage, our NN model outperformed logistic regression, especially in accuracy and sensitivity. The accuracy and sensitivity were improved by 12.5% and 33.3%, respectively. All eight validation projects were classified correctly, and thus our model is a preferable choice for predicting whether a project is risky compared with LR. These results are also consistent with previous studies [24,25].

A sensitivity analysis was also performed to expose the importance of each risk factor in the predictive model; the results are presented in order of importance in Appendix B. Clearly, the best predictor was Plan4 (0.182). This suggests project milestones should be clearly specified, or else project managers will not obtain an understanding of the actual progress in time. Consequently, the accumulation of a series of near-misses eventually leads to a project failure.


                        Table 4
                         is a comparison between the top four important risk factors in our work and in that of Takagi et al. Two interesting observations are clear. First, the only overlapping risk factor is Estm5. This implies that finding gaps among stakeholders needs to be clarified, and that building a consensus for estimation documentation is the common key to success for both studies. Second, in contrast to Takagi et al., who addressed the estimation and planning viewpoints, two extra viewpoints appear on our list: requirements and team organization. This may be the reason for the differences in predictive power for the two studies.

To assess whether the proposed model can be useful to predict risky projects from other sources as external validation, we have re-collected a real world dataset of 45 cross-company projects over the last 12months, from October 2013 to September 2014, and then applied the same experimental parameters described in Section 4 to validate the accuracy of the proposed model. As shown in Table 5
                     , the proposed model achieved a predictive accuracy of 81.81% in the confused project group and 82.61% in the not confused project group. Overall, 82.22% of the validation projects were predicted correctly, so 17.78% of the projects were predicted incorrectly.

Therefore, it is reasonable to use the proposed method to predict risky projects. The accuracy, precision, sensitivity, and specificity of our predictive model are higher than 80%. Statistically, the proposed model is appropriate and effective against the background that the size of external valuation dataset was over 30 projects and over five times larger than the original internal validation dataset. It is also obvious that the external validation results would not hold similar perfect results (100%) as those obtained using internal validation dataset, as shown in Table 2. A possible reason for the slightly worse performance may be related to the source of the project. Both training set (32 projects) and internal validation set (8 projects) come from the OMRON database, single-company internal projects (i.e., homogeneous), so the predictions for its within-company projects would be better when compared to external validations employed for cross-company projects (i.e., heterogeneous).

@&#CONCLUSION@&#

As software projects become more complex and diverse, project managers need more accurate predictive approaches to accurately detect risky projects. This study presents an empirical predictive approach to identify risky software projects using NNs, and compares its predictive accuracy with a previous study using logistic regression. The proposed NN model performed well in predicting risk-prone software projects. The NN model was more accurate than the logistic regression approach (100.0% versus 87.5%). The NN model also had higher sensitivity than the logistic regression approach (100.0% versus 66.7%). If a software project's degree of risk can be determined early and accurately before implementation, then limited project/organization resources can be effectively invested.

Results indicate that the four important predictor variables can predict risky projects, although three of those four variables were inconsistent with the work of Takagi et al. This not only revealed that the learned patterns between NNs and logistic regression are different, but also confirmed that “Lack of stakeholder commitment for the estimation” is a key predictive contributor.

Another important finding of this study is that “unspecified project review milestones” is the most significant factor in predicting risky projects. In practice, milestones provide project managers with the information required to determine progress and maintain expected performance and project timelines. Although specific and measurable milestones often create pressure, project managers should actively confirm all stakeholder requests to determine the dates and deliverables associated with milestones throughout the project lifecycle.

The current research can be extended in several directions. First, the construction of an NN architecture is an open problem, implying that various alternative parameters (e.g., the types of learning methods and number of hidden layers) may be tried to improve performance. Future studies should investigate these issues to calibrate the accuracy of the NN model. If the predictive accuracy of this predictive model can be greatly improved, then the efforts and resources of a new project can be suitably assigned. Second, many studies have compared the prediction accuracy of effort models built using cross- and single-company dataset to provide advice as to whether within-company models were superior to cross-company models. Therefore, considerations could be made in the future on comparing the prediction accuracy of models using cross- and single-company project risk datasets. This implies whether it is valuable to continuously build predictive models by different modeling techniques based on the OMRON database to predict risky projects. Third, the OMRON dataset does not expose projects' detailed attributes including the size of project and software development methodology; as such, we were unable to analyze the homogeneity of the OMRON dataset and our collected dataset using projects' detailed attributes. A wider application could generalize our results and reveal more insight into the proposed method.

@&#ACKNOWLEDGEMENTS@&#

The authors would like to thank two anonymous reviewers and the editor of Computer Standards & Interfaces for their valuable feedback and suggestions. This work was supported by the National Science Council of Taiwan, under operating grants of NSC 100-2410-H-147-013- and NSC 102-3114-C-147-001-ES.


                     
                        
                           
                              
                              
                              
                              
                              
                                 
                                    Project id
                                    Predicted value by logit regression
                                    Predicted value by neural network
                                    Actual status
                                 
                              
                              
                                 
                                    Project 1
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 2
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 3
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 4
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 5
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 6
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 7
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 8
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 9
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 10
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 11
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 12
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 13
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 14
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 15
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 16
                                    
                                       Risky
                                    
                                    
                                       Risky
                                    
                                    
                                       Not confused
                                    
                                 
                                 
                                    Project 17
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 18
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 19
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 20
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 21
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 22
                                    Not risky
                                    
                                       Risky
                                    
                                    
                                       Not confused
                                    
                                 
                                 
                                    Project 23
                                    Risky
                                    Risky
                                    Confused
                                 
                                 
                                    Project 24
                                    Risky
                                    Risky
                                    Confused
                                 
                                 
                                    Project 25
                                    
                                       Not risky
                                    
                                    Risky
                                    
                                       Confused
                                    
                                 
                                 
                                    Project 26
                                    
                                       Not risky
                                    
                                    Risky
                                    
                                       Confused
                                    
                                 
                                 
                                    Project 27
                                    
                                       Not risky
                                    
                                    Risky
                                    
                                       Confused
                                    
                                 
                                 
                                    Project 28
                                    Not risky
                                    Risky
                                    Confused
                                 
                                 
                                    Project 29
                                    Not risky
                                    Risky
                                    Confused
                                 
                                 
                                    Project 30
                                    Not risky
                                    Risky
                                    Confused
                                 
                                 
                                    Project 31
                                    Not risky
                                    Risky
                                    Confused
                                 
                                 
                                    Project 32
                                    Not risky
                                    Risky
                                    Confused
                                 
                                 
                                    Project 33
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 34
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 35
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 36
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 37
                                    Not risky
                                    Not risky
                                    Not confused
                                 
                                 
                                    Project 38
                                    
                                       Not risky
                                    
                                    Risky
                                    
                                       Confused
                                    
                                 
                                 
                                    Project 39
                                    Confused
                                    Risky
                                    Confused
                                 
                                 
                                    Project 40
                                    Confused
                                    Risky
                                    Confused
                                 
                              
                           
                        
                     
                  


                     
                        
                     
                  

@&#REFERENCES@&#

