@&#MAIN-TITLE@&#A spectrum sensing technique based on autocorrelation and Euclidean distance and its comparison with energy detection for cognitive radio networks

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Gaussian noise samples are delta correlated; ACF(t)=
                              δ(t).


                        
                        
                           
                           We can do spectrum sensing with the Euclidean distance between ACF(t) and a reference line.


                        
                        
                           
                           The Euclidean distance method performs better than the ED and ACF(1) methods.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Spectrum sensing

Autocorrelation

USRP™

Euclidean distance

Energy detection

Covariance matrix

@&#ABSTRACT@&#


               
               
                  Spectrum sensing is an important aspect of cognitive radios. This paper describes a method for spectrum sensing based on the autocorrelation of the received samples. The proposed method was evaluated by means of experiments wherein the probabilities of detection and false alarm at different signal-to-noise ratios (SNRs) were observed. The platform used for the experiments was a set of Universal Software Radio Peripheral™ (USRP™) devices acting as radio frequency front ends in combination with GNU Radio software. Since the signal processing was performed in the software domain, Gaussian noise of different levels was emulated by changing the standard deviation of a Python random number generator. In addition, the output power of a signal generator was varied to obtain different levels of SNR. A metric called the Euclidean distance was derived to analyze the autocorrelation of the samples received by the USRP™ device in order to decide between two possible situations: only noise present or signal plus noise present. The proposed method was compared with two methods: one based on the value of the autocorrelation at the first lag and another one based on the power of the signal, known as energy detection spectrum sensing technique.
               
            

@&#INTRODUCTION@&#

Studies have shown that the radio spectrum is not utilized constantly by the users this resource has been allocated to; spectrum usage is estimated to be between 5% and 85% on a block of licensed radiofrequency (RF) bands at different geographical locations and at different times [1–4]. Cognitive Radio (CR), introduced by Mitola in 2000, has been proposed as a potential solution to the problem of radio spectrum scarcity and inefficient allocation. As defined in [5], a cognitive radio, built on a software-defined radio (SDR), is an intelligent heuristic wireless communication system with two main purposes: to provide highly reliable communications whenever and wherever needed and to ensure the efficient use of the radio spectrum. Although most of the current research focuses on the spectrum sensing aspect of cognitive radio, this technology has also the potential to enhance the reliability of wireless networks [6]. Spectrum management based on cognitive radio technology can employ the spectrum more efficiently by exploiting it opportunistically when not used by its licensees [5,7,8]. As conceived by Mitola and Maguire [8], a cognitive radio executes the cognitive cycle, which includes observing, deciding, and taking action. Fig. 1
                      shows a simplified version of this cycle [9].

In this paper, we propose and evaluate a spectrum sensing method based on the autocorrelation of the samples received by a radio frequency front end. In this method we compare a metric, the Euclidean distance between the autocorrelation of the samples and a reference line, with a threshold in order to determine the presence or absence of signal. We compared our method with other two techniques: a technique based on the value of the autocorrelation of the samples at the first lag, and a technique based on the power of the received signal, known as energy detection. To perform such comparison we used the probability of detection and the probability of false alarm as criteria. We obtained those probabilities through simulations and real experiments with GNU radio software and Python along with a set of Universal Software Radio Peripheral (USRP™) devices acting as radio frequency front ends.

The remainder of this paper is organized as follows. Section 2 contains a brief overview of the related work on spectrum sensing. Section 3 presents the mathematical background of spectrum sensing based on autocorrelation, explains the proposed method, and the experimental setup used to assess it. Section 4 presents and analyzes the results of the experiments. This section compares the proposed technique with the energy detection and autocorrelation at the first lag techniques in terms of probability of detection and false alarm. Finally, we draw conclusions in Section 5.

@&#RELATED WORK@&#

Spectrum sensing is the cognitive radio component that detects the transmissions of primary users (PU). Primary users own the license to use specific portions of the radio spectrum. Spectrum sensing techniques aim to detect spectrum holes, time intervals wherein PU are not transmitting. Several spectrum sensing techniques have been proposed over the last decade [2–20]. Examples of such techniques include energy detection (ED) [10], matched filter (MF) detection [11,12], cyclostationary feature detection (CSD) [13–15], and covariance-based detection [16].

The Energy Detection technique is the simplest spectrum sensing approach used in cognitive radio [17,18]. Although it requires no prior knowledge about the primary signal, it does require knowledge of the noise power. In this method, the decision on the occupancy of the spectrum is made by comparing the average energy of the observed samples with a predetermined threshold that depends on the noise floor [10]. Cyclostationary Detection takes advantage of the fact that statistical parameters of practical communication signals vary periodically [19]. Cyclostationary data can be extracted from the spectral-correlation density (SCD) function [13–15]. In Matched Filtering, a matched filter correlates the known primary user signal with the received signal to detect the presence of PU. The matched filtering needs few samples; therefore, it requires short time to achieve low probabilities of missed detection and false alarm [12]. Thus, it is clear that both CSD and MF need information about the primary user signal prior to receiving it.

Covariance spectrum sensing can overcome these problems, since it capitalizes on the fact that the covariance matrix of only noise samples and the one of signal plus noise samples behave differently; therefore, it requires no information about either the noise or the signal power [16]. The covariance matrix of the samples collected by the receiver contains information exploitable for spectrum sensing. Zeng and Liang [16,20] have proposed two methods that extract information from the covariance matrix of the samples. In [16] these authors introduce two statistics: the sum of the matrix elements that are not in the main diagonal, and the sum of the elements that are in the main diagonal. The comparison of the ratio between these two statistics with a threshold can indicate the presence of either signal plus noise or only noise. In [20] the authors propose other two metrics: the maximum to minimum eigenvalue (MME) ratio and the average received power to minimum eigenvalue ratio, also referred to as the energy with minimum eigenvalue (EME) ratio. As in [16], the comparison of these ratios with a threshold value can differentiate between noise and signal. Several authors have run simulations to evaluate the performance of their methods. Mate et al. [21] performed experiments with GNU Radio software and Universal Software Radio Peripheral™ (USRP™) devices to evaluate the covariance and MME detection methods proposed in [16,20]. They found that these two methods performed poorly in the practice because the autocorrelation of the noise samples is not a delta function; in other words, they are not delta correlated as assumed in [16,20].

@&#METHODOLOGY@&#

Spectrum sensing is essentially deciding between two states: signal absent or signal present. In the technique described herein, the autocorrelation of the received signal samples is analyzed to decide between two hypotheses: 
                           
                              H
                              0
                           
                        , signal is absent, or 
                           
                              H
                              1
                           
                        , signal is present. In Eqs. (1) and (2), the received samples are denoted as x(n), the primary user signal as s(n), and the noise as η(n); the argument n denotes the nth sample. Although the transmitted and received signals are continuous, throughout this paper the signal is treated as discrete, since the receiver takes discrete samples of the signal.
                           
                              (1)
                              
                                 
                                    
                                       
                                          
                                             
                                                H
                                                0
                                             
                                             :
                                             
                                                
                                                   0.35
                                                   e
                                                   m
                                                
                                                
                                                   0
                                                   e
                                                   x
                                                
                                             
                                             x
                                             
                                                (
                                                n
                                                )
                                             
                                             =
                                             η
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    
                                       
                                          
                                             
                                                H
                                                1
                                             
                                             :
                                             
                                                
                                                   0.35
                                                   e
                                                   m
                                                
                                                
                                                   0
                                                   e
                                                   x
                                                
                                             
                                             x
                                             
                                                (
                                                n
                                                )
                                             
                                             =
                                             s
                                             
                                                (
                                                n
                                                )
                                             
                                             +
                                             η
                                             
                                                (
                                                n
                                                )
                                             
                                          
                                       
                                    
                                 
                              
                           
                        The vectors x and s are defined as [16]:
                           
                              (3)
                              
                                 
                                    
                                       
                                          
                                             x
                                             
                                                (
                                                n
                                                )
                                             
                                             =
                                             
                                                
                                                   [
                                                   x
                                                   (
                                                   n
                                                   )
                                                   x
                                                   (
                                                   n
                                                   −
                                                   1
                                                   )
                                                   ⋯
                                                   x
                                                   (
                                                   1
                                                   )
                                                   ]
                                                
                                                T
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       
                                          
                                             s
                                             
                                                (
                                                n
                                                )
                                             
                                             =
                                             
                                                
                                                   [
                                                   s
                                                   (
                                                   n
                                                   )
                                                   s
                                                   (
                                                   n
                                                   −
                                                   1
                                                   )
                                                   ⋯
                                                   s
                                                   (
                                                   1
                                                   )
                                                   ]
                                                
                                                T
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The statistical covariance matrices of the vectors x(n) and s(n) are denoted by Rx
                         and Rs
                        , respectively. Rx
                         and Rs
                         are defined as follows [16]:
                           
                              (5)
                              
                                 
                                    
                                       
                                          
                                             
                                                R
                                                x
                                             
                                             =
                                             E
                                             
                                                [
                                                x
                                                
                                                   (
                                                   n
                                                   )
                                                
                                                
                                                   
                                                      x
                                                   
                                                   T
                                                
                                                
                                                   (
                                                   n
                                                   )
                                                
                                                ]
                                             
                                             
                                                
                                                   0.25
                                                   e
                                                   m
                                                
                                                
                                                   0
                                                   e
                                                   x
                                                
                                             
                                             and
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       
                                          
                                             
                                                R
                                                s
                                             
                                             =
                                             E
                                             
                                                [
                                                s
                                                
                                                   (
                                                   n
                                                   )
                                                
                                                
                                                   
                                                      s
                                                   
                                                   T
                                                
                                                
                                                   (
                                                   n
                                                   )
                                                
                                                ]
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where E represents the expectation, and the superscript T represents the transpose.

The matrix Rx
                         can be expressed as
                           
                              (7)
                              
                                 
                                    
                                       
                                          
                                             
                                                R
                                                x
                                             
                                             =
                                             
                                                R
                                                s
                                             
                                             +
                                             
                                                σ
                                                
                                                   η
                                                
                                                2
                                             
                                             I
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              σ
                              
                                 η
                              
                              2
                           
                         is the variance of the noise η, and I is the identity matrix. Therefore, in absence of signal, Rs
                         is zero as well as the non-diagonal elements of Rx
                        . Based on this assumption, Zeng and Liang [16] have proposed the ratio between the sum of all the elements of Rx
                        : T
                        1
                        =∑
                           n
                        
                        ∑
                           m
                        |rnm
                        | and the sum of its diagonal elements, T
                        2
                        =∑
                           n
                        |rnn
                        | as a metric to detect the absence or presence of signal. In absence of signal, 
                           
                              
                                 
                                    T
                                    1
                                 
                                 
                                    T
                                    2
                                 
                              
                              =
                              1
                           
                        , whereas with signal present, 
                           
                              
                                 
                                    T
                                    1
                                 
                                 
                                    T
                                    2
                                 
                              
                              >
                              1
                           
                        . It is clear that in the first case, this ratio is 
                           
                              
                                 
                                    
                                       σ
                                    
                                    
                                       η
                                    
                                    2
                                 
                                 I
                              
                              
                                 
                                    
                                       σ
                                    
                                    
                                       η
                                    
                                    2
                                 
                                 I
                              
                           
                        , whereas in the second case, it is 
                           
                              
                                 
                                    R
                                    s
                                 
                                 +
                                 
                                    σ
                                    
                                       η
                                    
                                    2
                                 
                                 I
                              
                              
                                 
                                    σ
                                    
                                       η
                                    
                                    2
                                 
                                 I
                              
                           
                        . However, in the reality, even in absence of signal, Rx
                         is a non-diagonal matrix; therefore T
                        1/T
                        2
                        >
1 [18], which can lead into erroneously believing that there is a PU transmitting (i.e., a false alarm).

The authors in [16] assume that the noise η is such that E(η(n)η(n
                        +
                        τ))=0 for any τ
                        ≠0 and E(η(n)η(n
                        +
                        τ))≠0 for τ
                        =0, which implies that the autocorrelation of the noise η, E(η(n)η(n
                        +
                        τ)), is a delta-dirac function, or, in other words, the noise is delta-correlated. This condition holds when the noise is Gaussian. As we will see in the next section, in the practice the autocorrelation of noise is not a delta-dirac function, since non-Gaussian noise is also present. In the expression E(η(n)η(n
                        +
                        τ)), E represents the expected value or expectation, η(n) is the nth
                         sample of the noise, and τ is a discrete time shift.

We calculated the autocorrelation of the samples by means of the expression
                           
                              (8)
                              
                                 
                                    
                                       
                                          
                                             λ
                                             
                                                (
                                                l
                                                )
                                             
                                             =
                                             
                                                ∑
                                                
                                                   m
                                                   =
                                                   0
                                                
                                                
                                                   
                                                      N
                                                      s
                                                   
                                                   −
                                                   1
                                                
                                             
                                             x
                                             
                                                (
                                                m
                                                )
                                             
                                             x
                                             *
                                             
                                                (
                                                m
                                                −
                                                l
                                                )
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where λ(l) denotes autocorrelation at lag l, NS
                         the number of samples over which we calculate 
                           
                              λ
                              (
                              l
                              )
                              ,
                              
                                 
                                    0.35
                                    e
                                    m
                                 
                                 
                                    0
                                    e
                                    x
                                 
                              
                              x
                              (
                              m
                              )
                           
                         the mth
                         sample, and * the complex conjugate operation.


                        Fig. 2
                         shows the experimental setup. A Hewlett Packard 8684C signal generator emulated the signal transmitted by the primary user (PU). The Hewlett Packard 8684C generated a continuous sinusoidal signal tuned at 2410MHz, the power of which we adjusted to vary the signal-to-noise ratio (SNR) level. We emulated the absence of PU by turning off the signal generator. To emulate the Gaussian noise we generated random numbers by means of a Python function. We varied the noise level by changing the standard deviation of the random numbers. Fig. 2 represents the emulated noise as ηSim
                        . We used a radiofrequency cable between the signal generator and the USRP unit in order to reduce external co-channel interference and noise. We used a USRP® model N200 unit as receiver [23]. A USRP is a radiofrequency front end that interfaces the radiofrequency domain with the binary domain, where the signals pass through a software implemented digital signal processor.


                        Fig. 3
                         illustrates the USRP™ block diagram. The USRP™ is made of several blocks: one field programmable gate array (FPGA), one gigabit Ethernet controller, one analog to digital converter (ADC), one digital to analog converter (DAC), one receiver daughterboard, one transmitter daughterboard, and one or two antennas. The receiver and transmitter daughterboards are usually integrated in the same board; they contain the radiofrequency circuitry necessary for receiving and transmitting signals at specific frequency bands. The FPGA performs the digital signal processing for frequency conversion from RF to baseband and vice versa. The signals processed by the FPGA come from the ADC, which samples the RF signal at a rate defined by software, in this case GNU Radio. The gigabit Ethernet controller connects the USRP™ with a computer, where the digital processing takes place. We used GNU Radio [21], an open source software that contains several DSP blocks necessary to define radio systems, to perform the signal processing in the computer. GNU Radio uses C++ to define DSP blocks and Python to glue these blocks in order to build flow graphs that describe how to process the signal. In addition, GNU Radio users can create customized blocks in either C++ or Python. The GNU Radio flowgraph not only processes the signal but also defines the central frequency and the sampling rate that the USRP® unit will use to operate. Through the flowgraph we configured the USRP™ to operate at 2410MHz with a sampling rate of 1million samples per second (MSPS), equivalent to a bandwidth of 1MHz.

The GNU Radio software contains a USRP Hardware Driver (UHD™) that allows the computer to capture the samples coming from the USRP™ unit. These samples go to a Python Numpy array, represented by the L-element Numpy Array block in Fig. 2. The autocorrelation of the elements contained in the array is calculated in block ACB (Fig. 2). This calculation, defined by Eq. (8), yields another array. The distance between this array and a reference line R is the Euclidean distance metric, introduced in this paper. The line R, contained in a Numpy array, obeys the simple equation 
                           
                              R
                              =
                              
                                 
                                    −
                                    t
                                 
                                 L
                              
                              +
                              1
                           
                        , where t is an vector with L integers starting at 0 and ending at L
                        −1, and L is the number of samples captured by the USRP™ device.

In our experiments we expected λ(l) to be a delta-dirac function in absence of signal; however, that was not the case. Something similar occurred with the technique based on the value of the autocorrelation at the first lag, λ(1), proposed in [22]: ideally, 
                           
                              λ
                              (
                              1
                              )
                              =
                              0
                           
                         when only noise exists, and λ(1) ≠ 0 when signal and noise are present; nevertheless, we obtained λ(1) ≠ 0 with no signal. What happened to the values of λ(l) and λ(1) might be caused by non-Gaussian noise injected by the receiver (USRP), a fact worth considering when deciding between 
                           
                              H
                              0
                           
                         and 
                           
                              H
                              1
                           
                         based on the covariance or autocorrelation of the received samples.

We attempted to improve both techniques, our method based on λ(l) and the method based on λ(1), by subtracting an estimate of the non-Gaussian noise introduced by the USRP™ receiver. We accomplished that by storing in a matrix several vectors containing NS
                         samples taken by the USRP™ with the signal generator turned off. Then, we averaged all the rows of the matrix, stored the result in the variable ηUSRP
                         (Fig. 2), and subtracted it from the signal being received by the USRP™ during the experiments.

@&#RESULTS AND DISCUSSION@&#

Several experiments were performed to validate and test the efficiency of the proposed technique as well to compare it with the autocorrelation at lag 1, λ(1), and energy detection techniques. Fig. 4
                      shows how the autocorrelation λ(l) behaved in absence of signal (curve labeled “no signal”) and with signal at different levels of SNR. The curves in Fig. 4a show the results before subtracting ηUSRP
                     ; it is clear that the autocorrelation obtained with no signal and the one obtained with 0dB SNR signal are very close. However, the curves in Fig. 4b show that, after subtracting ηUSRP
                     , it becomes easier to differentiate the no signal and 0 SNR curves (i.e., between the conditions 
                        
                           H
                           0
                        
                      and 
                        
                           H
                           1
                        
                     ). Fig. 4 also shows that as SNR increases the Euclidean distance between λ(l) and the reference line R, identified in this paper as DEuclidean
                     , decreases reaching zero when SNR is high. On the other hand, as SNR decreases, DEuclidean
                      increases, reaching its maximum value in the absence of signal. Therefore, DEuclidean
                      surpassing a certain threshold indicates absence of signal. To make it easier to determine a threshold, we have normalized DEuclidean
                      so its maximum is 1 and its minimum 0.


                     Fig. 5(a and b) shows the normalized values of the Euclidean distance and ACF(1) with respect to SNR for different values of the standard deviation of the emulated noise ηSim
                     . Fig. 5a shows that the Euclidean distance exceeding a certain threshold indicates the absence of signal (
                        
                           H
                           0
                        
                     ), whereas when it falls below that threshold, it indicates presence of signal (
                        
                           H
                           1
                        
                     ). Fig. 5a shows that at very low levels of SNR (−30dB to −25dB), the Euclidean distance reaches 1, its maximum. As the SNR increases DEuclidean
                      decreases suffering a steep decay when SNR is between −10dB and 15dB. For a SNR greater than 20dB, DEuclidean
                      becomes zero. On the other hand, Fig. 5b shows that ACF(1) exceeding the threshold indicates the presence of signal (
                        
                           H
                           1
                        
                     ), whereas when it falls below that threshold, it indicates the absence of signal (
                        
                           H
                           0
                        
                     ). The behavior of ACF(1) with respect to the SNR is the opposite of the Euclidean distance behavior: ACF(1) increases along with SNR, exhibiting a steep rise when SNR is between −10dB and 15dB.

To evaluate the impact of the number of samples Ns
                      on the performance of the method, we ran experiments with different numbers of samples, and observed the changes in the probability of detection with varying levels of SNR. Fig. 6
                     (a and b) shows that when the number of samples increases, the probability of detection increases as well.

To evaluate the impact of the threshold selection on the performance of the method, we ran experiments with different thresholds for both methods and calculated the Pd
                      for varying levels of SNR. Fig. 7
                     (a and b) represents the change in probability of detection with respect to SNR for different thresholds for both the Euclidean distance and the ACF(1) methods. Fig. 7 shows that the best threshold for the Euclidean distance method is 0.95 and for the ACF(1) method is 0.1. By best threshold we mean the one that allows the sensing method to yield the highest Pd
                     .

Finally, Fig. 8
                      compares both methods as they operate with their best thresholds and 1024 samples. In this figure, the results clearly indicate that the Euclidean distance method outperforms the ACF(1) method, since it achieves a probability of detection Pd
                     
                     =100% at a lower SNR. The gain in SNR for the Euclidean distance method is approximately 4dB.

The results shown by Fig. 9
                     b imply that the probability of detection (Pd
                     ) for the auto-correlation method is low at a negative levels of SNR, but consistently attains 100% Pd
                      at around 0dB, whereas the energy detection method attains the same at −5dB. Comparing the simulation results with those of the real experiments (Fig. 9a), it is apparent that the energy detection achieves a Pd
                      of 100% at −8dB, whereas the ACF(1) method (i.e., the auto-correlation counterpart of the simulation) achieves the same at −6dB, showing a better detection performance at levels of SNR −5dB to −8dB lower than the one of the simulation. The Euclidean distance method (labeled as “Distance” in Figs. 9 and 10
                     ) shows better performance than the ACF(1) method regarding the probability of detection. The Euclidean distance method has proven to be more effective than the ACF(1) method by having a SNR gain of 4dB for a given SNR.


                     Fig. 10 shows that according to real experiments (Fig. 10a) and simulations (Fig. 10b), the methods based on autocorrelation perform better that the energy detection method regarding the probability of false alarm. Both graphs show that in the case of the energy detection method the probability of false alarm is around 50%, whereas in the case of the autocorrelation based methods is approximately 0.

@&#CONCLUSION@&#

Experiments and simulations showed that the Euclidean distance method proposed herein is more efficient than the ACF(1) method in terms of probability of detection and false alarm, and more efficient than the energy detection method in terms of probability of false alarm. Future work includes characterization of the type of noise introduced by the USRP device, application of the method to scanning several channels in order to estimate their utilization level, and measurement of the speed of the method.

@&#ACKNOWLEDGEMENTS@&#

The authors acknowledge the support of the US National Science Foundation (NSF), Grant # 1443861, and the Experimental Program to Stimulate Competitive Research/NSF (EPSCoR/NSF), Grant # EPS-0184442.

@&#REFERENCES@&#

