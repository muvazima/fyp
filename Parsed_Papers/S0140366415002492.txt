@&#MAIN-TITLE@&#Unified communications as a service and WebRTC: An identity-centric perspective

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Dissertation about identity-centric UCaaS


                        
                        
                           
                           Proposed models for Identity and Access Management (IAM) in corporate SaaS


                        
                        
                           
                           List of requirements regarding identity for UC


                        
                        
                           
                           Adaptation of WebRTC to meet the identity requirements of future identity-centric UCaaS


                        
                     
                  
               
            

@&#KEYPHRASES@&#

SaaS

WebRTC

UC

enterprise

identity

@&#ABSTRACT@&#


               
               
                  Software-as-a-service (SaaS) is gaining momentum for all business applications, including Unified Communications as a Service (UCaaS). In this context, user identity will play a key role in connecting the future fragmented communication suites in both corporations and cloud SaaS providers. However, SaaS solutions impose strong security challenges to the enterprise's Identity Management (IdM), since cloud services need to be provided with the employees’ identities. UCaaS solutions should therefore enforce security properties such as trust relationship, anonymity, or control on information disclosure. WebRTC is reinforcing the trend towards cloud-based UC by adding real-time voice and video capabilities into browsers. WebRTC does not tackle IdM, and hence it is not evident how WebRTC-based cloud services can meet the corporate requirements on IdM. In this paper, we discuss various IdM models for cloud-based corporate services, and we introduce the major requirements for managing user identities in UCaaS. We assess the impacts of these requirements on WebRTC-based UC services. We finally propose a slight modification of WebRTC to meet the corporate requirements on IdM.
               
            

@&#INTRODUCTION@&#

Unified Communications (UC) [1] are aimed to improve the user availability for communication in teams through the management, integration and coordination of various communications and media in a unified manner. UC was born to alleviate corporate users from the burden of confronting with a variety of devices, tools and media types in distributed collaboration environments. UC deployment has been mainly driven by the advances on IP technology, presence, and instant messaging. Typical UC products merge on-premises telecommunication tools with the enterprise's information system. Enterprises are nonetheless increasingly more interested in turning from on-premises products into the cloud. Software-as-a-service (SaaS) solutions are the most demanded by enterprises that lack in-house expertise, wish to speed up service deployment or need to reduce costs. In such cloud computing trend, UC as a Service (UCaaS) has become popular as a solid alternative to traditional UC for corporate communication and collaboration tools. UCaaS products are collaborative communication solutions hosted by cloud providers that fine-tune dedicated hardware to ensure real-time and carrier-grade performances. UCaaS provides the same enterprise-level functions as its on-premises counterpart (i.e., VoIP, VPNs, PBX, presence, IM, etc.) without the costly investment of purchasing, hosting and managing the infrastructure. A recent Gartner analysis [2] states that 2014 is the first year in which North American multinational corporations consider UCaaS as a mainstream, viable alternative for UC deployment.

The Web nature of cloud services imposes numerous challenges to the controlled corporate networks. Specially for Identity Management (IdM), which has always resided inside of the closed corporate walls. User identity is a key enabler for UC, since on one hand it enables user authentication and login, and on the other hand it allows users to trustworthy communicate with others by verifying their identities. In the shift from on-premises UC to SaaS, to delegate identity information to cloud providers is a major security issue to any enterprise. Futhermore, how corporate identity information is provisioned to cloud services can to a great extent impact the enterprise's resources and cost for cloud integration. Nevertheless, the clear benefits of off-premises UC platforms for enterprises such as paying-as-you-go billing, flexible on-demand provision, and reduced cost of infrastructure and deployment time motivate industry to face and overcome these challenges.

The progression towards UCaaS is being stimulated by a new under-standardized real-time technology, Web Real-Time Communication (WebRTC), that is disrupting the market of real-time communications. WebRTC [3] is an emerging HTML5 technology that enables web developers to integrate real-time audio, video and data communications in their web pages. This technology enables enterprises to integrate in-content communication into their Web services without the need of plug-ins. This capability brings advantages to enterprises that can now straightforwardly develop Web-based video collaboration and online meetings, or extensions of corporate voice services to mobile users among other Web-based real time services. In fact, a detailed research and market study about WebRTC [4] states that WebRTC is more widely commercialized in enterprises than customer use today. This includes new forthcoming cloud-based offers for collaboration and conferencing in addition to upgrades of the existing installed base of UC/PBX services. WebRTC will therefore separate aspects of business communications while remaining a part of on-premises UC solutions. WebRTC specifications do not tackle the signaling plane but only the secure exchange of media between browsers. Identity Management (IdM) is therefore completely left to each implementation. Nevertheless, a WebRTC specification [5] is standardizing a general architecture for identity provision among end-users. This architecture relies on a third-party Web service that authenticates users and is independent from the communication provider. Nevertheless, to the best of our knowledge, there is no as of now WebRTC provider that implements the proposed model for identity provision in WebRTC. WebRTC-based SaaS providers are mainly closed burbles that centralize user authentication and service on their servers, without the proposed identity provision mechanism.

Identity federation between enterprises and cloud providers, and more specifically UCaaS solutions, has not been sufficiently studied. Thus, to investigate further the integration of cloud services with the enteprise's IdM is necessary for the adoption of cloud-based UC. It is particularly necessary for WebRTC-based services, since WebRTC leaves totally unspecified how to handle user identities, thereby setting each provider totally free to implement IdM at its own. For users that require certain security requirements such as corporations, not all identity models implemented by cloud providers might be acceptable. This paper gives a general overview about identity federation and management in cloud services for corporate communications, and particularly for WebRTC-based services. This paper does not provide a new IdM solution or proposal for cloud services. Instead, we provide a global analysis about the identity requirements that SaaS solutions and WebRTC should meet to work in enterprise-grade communications. We first introduce the role of user identity in enterprise networks and the Web. We identify different IdM models between cloud-based services and corporations. We discuss about the role of identity as the glue for cross-provider UC, and we discuss about the identity features that UCaaS solutions should address. Finally, we analyze how WebRTC-based cloud providers can be integrated with the enteprise's IdM. We propose to slightly adapt the WebRTC identity model to meet the discussed identity features for corporate services.

@&#RELATED WORK@&#

Identity federation has been largely studied both in the enterprise [6] and on the Web [7]. Identity federation is a mature research field for loosly-coupled services that rely on third-party services for user authentication [8]. However, identity federation for enterprise UCaaS is today an emerging topic that combines the knowledge and technologies from different research areas: IdM, cloud computing, and UC.

Cloud computing is a hot research area that receives much attention from the research and industry community [9]. In particular, security is the aspect of cloud computing that receives more attention; it accounts for the largest portion of yearly publications since 2009 [10]. Issues related to IdM are being more and more investigated such as those related to access control and user privacy. Many survey papers give a general overview about cloud security and IdM such as [10–12].

IdM in corporate networks is a mature technology, which has been mainly studied and developed from the industry. Lately, the current cloud computing trend has also arrived to enterprise IdM. Based on a recent analysis about trends in enterprise IdM [13], cloud-based IdM is one of the major interests, alongside attribute-based access control, bring your own device and privileged user management. Nevertheless, only a small portion of cloud computing research addresses enterprise IdM and there is a need of research on this area [13]. Some works [11,14–16] have tackled different IdM models for SaaS providers. Nevertheless, these works are mainly focused on user identity federation between different cloud providers on the Internet, rather than enterprise networks. To the best of our knowledge, our work is the only one that focuses on identity models between cloud providers and enterprise IdM.

Since UCaaS [17] are nowadays receiving a fresh adoption by the industry, there are very few research works on this field. Some authors for example have addressed the open source implementation of UCaaS [18] and the usage of UCaaS for security management models in social networks [19]. Nevertheless, to the best of our knowledge, no authors have tackled the issue of IdM in UCaaS.

WebRTC is a disruptive new technology driven by major web companies that has attracted much attention in the last two years [20]. Some authos have addresses the application of WebRTC in the enterprise. The authors of [21] discuss network architectures to integrate WebRTC in corporations as well as challenges related to firewalls, media flows and access control. In [22], services architectures to introduce WebRTC in telecommunication operators’ networks are overviewed. Since WebRTC leaves IdM unspecified, there are very few research works about how to handle user identities in WebRTC-based solutions. The authors of [23] propose a Web identity resolution mechanism that binds cross-provider user identities based on presence subscriptions. Although the authors of [24] do not address user identity, they propose authorization and authentication models between service providers and WebRTC PaaS providers. The discussion presented in this paper has been partially motivated from two previous works [25,26]. In [25], we discussed the current WebRTC's identity model and proposed two variations of this model. In particular, we addressed the implications of SSO protocols on these identity models regarding user privacy. In [26], we addressed identity requirements for corporate WebRTC solutions. In the present paper, we extend this work to WebRTC services provided from the cloud. Additionally, we discuss how WebRTC services can be provisioned with the identity information of enterprise users and how WebRTC can be modified to support some identity features.

User identity is a key enabler for UC by providing two primordial functions: user login and user identity provision. The first step for a user to access any communication tool is a login process in which the user introduces (explicitly or implicitly) his or her identity and credentials. This very first step allows the communication system to identify the user, apply authorization rules, personalize the service to him or her, and do other tasks such as billing or auditing. Identity provision allows end users to identify each other, and hence to decide to establish or not their communication or not in a trustworthy manner. Identity provision is primordial to offer users with a unified experience. When calling Bob, Alice wants to present the same identity whatever the communication tool, and hence the communication identifier, that she is using.

In medium to large enterprises, identity information and user authentication is normally centralized to provide a Single Sign On (SSO) experience to employees. As its name stands for, SSO aims to let users login once and access multiple services. SSO is a mature technology that was born out of the complexity and costs associated with having many user IDs and passwords in corporate networks. Corporate services redirect users to centralized servers for authentication. When a user logs on successfully to an authentication server, he or she can transparently access to all resources or services that have a trust relationship with this server, without re-authenticating to every individual service. Although there are several flavors of enterprise SSO [27] (e.g., cache-based or password synchronization systems), Integrated Windows Authentication with Microsoft Active Directory, which is based on the Kerberos authentication protocol and LDAP for centralized directories, is the preferred option [28].

SSO centralized directories aggregate user identity information that generally contains the user's name and group lists as well as their communication identifiers. Although UC tools are enriched with this centralized identity information, they often provide address books that allow users to manually enrich telephony or email identifiers with more personal information such as postal addresses and nicknames. A user's identity can include multiple communication identifiers that make sense in particular communication means such as telephony, VoIP and email. Here, user identity is identified with publicly known addresses that enforce international standardized rules that are common for all communication providers, like the ITU-T E.164 recommendation for phone numbers, RFC 3261 for SIP URIs, or RFC 5322 for email addresses. In fact, this standardization of user identifiers enables interoperability between communication providers. Communication identifiers play a signaling role, since they are used to route messages between users.

User identity on the Web is basically a linkage between a profile (e.g. name, email address, phone number, etc.), authorization rules and credentials. Beyond collaborative and communication tools, Web services are of a very different nature. A user identity is mainly intended to grant the user access based on a successful login that is carried out by HTTP exchanges. From the user's perspective, a Web identity is a pair of username/credentials, being the username an alphanumeric identifier that only has sense in the frame of the owning Web service (i.e., there is no interoperability between providers). For most of Web services, user identities only have a login purpose. However, Web services that provide user communities such as social networks, chats or blogs, give user identities a user provision role. In this case, web services can enable users to see each other's identity information and communicate through instant messages for example. Furthermore, in Web services that offer communication services such as VoIP, email or telephony, user identity includes communication identifiers that will have a routing role.

Web services can rely on SSO technologies to reduce the number of logins that users need to do every day. In comparison to the enterprise, SSO on the Web is a relatively new technology that emerged over almost a decade ago. OpenID
                        1
                     
                     
                        1
                        
                           OpenID, http://openid.net/specs/openid-authentication-2_0.html
                        
                      was the first Web SSO protocol to emerge by 2005 in order to enable Web services to delegate user authentication to third-party authentication services that are commonly known as Identity Providers (IdPs) in Web terminology. Shortly afterwards, OAuth was developed as an authorization protocol to retrieve server resources on behalf of the resources’ owner. Although OAuth is not a SSO protocol, it rapidly gained ground against OpenID. The two specifications of OAuth (OAuth1.0 [29] and OAuth2.0 [30]) have been extensively used to build Web SSO systems. More recently, other proposals have emerged such as OpenID Connect (OIDC)
                        2
                     
                     
                        2
                        
                           OpenID Connect, http://openid.net/connect/
                        
                      and BrowserID
                        3
                     
                     
                        3
                        
                           BrowserID, https://github.com/mozilla/idspecs/blob/prod/browserid/index.md
                        
                     . All these SSO protocols are flexible identity federation solutions in comparison with the centralized enterprise SSO. IdPs and relying services are decoupled and communicate through simple HTTP exchanges. Regarding data format, Web identity information relies on extensible and protocol-independent data formats such as XML or JSON.

Enterprise IdM has always been a complex activity that encompasses inter-connected heterogeneous infrastructure, strong data governance, regulatory compliance, and business policies spread over different organizational structures. With enterprise applications and services moving to the public cloud, managing user access and authorization rules becomes more problematic. The IdM of corporate cloud services relies on the identity information of the enterprise's users that will access the service. Thus, the enterprise must provision cloud services with user identity information and keep them updated on any change in this information. Moreover, an entitlement process is necessary for each cloud service, through which the enterprise turns business and security requirements into a set of rules that will govern the service's IdM and give every user the security rights that they need.

The integration of the enterprise IdM with that of cloud services that reside on the Internet, outside of corporate walls, is not trivial. Enterprise IdM is conceived to work with on-premises, controlled services that live inside the corporate walls. Conversely, the Web nature of cloud services favors flexibility and simplicity in all aspects of services. IdM in corporate cloud services is challenging since it merges the different nature of corporate and Web user identities. As of now, it has not been sufficiently studied, and hence enterprises and service developers many times lack of the necessary expertise to estimate the impacts of cloud service integration on the enterprise IdM. Many cloud services simply do not integrate with the enterprise IdM but require the enterprise to manually provide the users’ identity information and configure the service's IAM. Frequently, cloud services’ limitations on management oversight and visibility make life harder to business managers that need to align SaaS with governance and regulatory compliance.

In this section, we discuss different identity models that define how an enterprise can provision a SaaS with identity information, which are depicted in Fig. 1
                     . Table 1
                      shows a summary of this IdM models for corporate cloud services. We are aimed to provide a high-level analysis that motivates researchers, enterprises and cloud providers to further investigate different models for integrating cloud services’ and the enterprise's IdM.

The most common practice of today's cloud providers is to handle IdM separately from the enterprise. We have called this model as “cloud identity” since user identity information is created inside each cloud service. Cloud service providers host and maintain their own IdM system for the SaaS that they offer. As shown in Fig. 1(a), user identities are managed by the cloud service provider, separately of any corporate identity source. All user management tasks (identity provisioning/de-provisioning, entitlement, password management, etc.) are done by the enterprise IT stuff by using the cloud service's interface.

This model has obvious scalability issues as the number of SaaS that the enterprise integrates grows. The enterprise will have to manually perform IdM tasks for each cloud provider. Each provider tends to rely on its own proprietary technologies and tools for IdM, monitoring, reporting, and auditing. Enterprises that integrate multiple SaaS providers will have to support different technologies, which involves operation overhead and induces human error. Moreover, since each SaaS requires the enterprise IT to create a new username and password for each user, users have to struggle with a multitude of credentials.

Despite of this model's scalability issues, small enterprises that prioritize cost saving and wish to fast spin up their services may prefer to completely transfer the burden of IdM to each cloud provider. Moreover, the fact that each cloud provider relies on its own IdM limits the scope of security compromises, which remain local to each provider.

This model relies on identity information that is locally stored at the cloud provider as in the “cloud identity” model. However, identity information is synchronized with the enterprise IdM system, as depicted in Fig. 1(b). Enterprise identities and cloud identities are separate but not independent; they are managed in a unified way. IAM takes place in the enterprise and is propagated via a custom connector (i.e., codes or scripts) to the cloud service. Through this model the enterprise can ensure that the cloud service's IdM is done in accordance with the enterprise's policies. This model presents a better scalability than the “cloud identity” model since IAM is not done in a per-service basis; the enterprise's user identities can be automatically propagated to each SaaS. This will save on resources and help to implant a consistent IdM for each provider.

Although user identity provisioning should be ideally done by standardized, protocols to this end such as Service Provisioning Markup Language (SPML) and System for Cross-domain Identity Management (SCIM) have nearly no support by application vendors. Since each cloud provider relies on its own custom connectors, this model still brings scalability issues. An enterprise will have to support the proprietary connector technology of each SaaS that the enterprise wishes to use.

In this model, IdM takes place in the enterprise separately from any cloud service, as in the “connector-based provisioning” model. However, the enterprise IdM system and the SaaS are not tightly integrated by custom code. This model relies on Web identities and standard Web SSO protocols that let cloud providers to request enterprises to authenticate users and generate identity assertions. The cloud service redirects users to the enterprise's IdP. And, once a user has authenticated to the corporate IdP, the cloud service will receive the user's identity asserted by the enterprise. While the Security Assertion Markup Language (SAML) has been the most adopted SSO protocol for identity federation between corporations and governmental organizations, other protocols such as OAuth2.0 and OIDC has a wider acceptance on the Web.

In this model, the cloud provider becomes just a consumer of identity assertions and can focus on its main goal, that is, the offered service. From the user's perspective, users can login only once to their enterprise IdP and from then on login multiple SaaS. This model also brings a better scalability to the enterprise since identity information is provided on demand to the cloud service by a Web SSO protocol. Thus, the enterprise can reuse a single SSO protocol implementation to federate user identities across multiple SaaS. Nevertheless, the use of a standard SSO protocol does not ensure full interoperability. SSO protocols tend to provide much flexibility on parameters and operation modes, which may lead to different implementations that are unable to interoperate. Furthermore, many SSO protocol implementations are customized with proprietary features due to either protocol functionality limitations or security reasons. Such lack of interoperability may lead the enterprise IT department to customize a different implementation version of a SSO protocol for each SaaS.

In all the three models described above, the enterprise must carry out an entitlement process for each SaaS in order to create the right IdM for each of them. As large organizations are increasingly turning to SaaS solutions, this scheme is unsustainable. The IDaaS model uses a third-party to externalize IdM integration with each service provider. IDaaS is a broad term that covers the management of any part of the identity, entitlement, and authorization/access management in a cloud service [16]. This encompasses service for software, platform and infrastructure for both public and private clouds. Here, we limit the scope of IDaaS to any SaaS that dictates the IdM of other SaaS on behalf of an enterprise, as depicted in Fig. 1(d).

In this model, an IDaaS will provide user identity information to each SaaS used by the enterprise and enforce the enterprise's entitlement policies for each SaaS. In order to exploit the potential of this model, identity information should be centralized into the IDaaS. Thus, identity provisioning from the enterprise to the IDaaS should be integrated by manual or connector-based provisioning (see Fig. 1(a) and (b) respectively). User provisioning to each SaaS from the IDaaS will be done by any of the above-mentioned identity models, that is, manual provisioning, a custom connector implementation or a Web SSO protocol (see Fig. 1(a), (b) and (c) respectively). In the first two cases, users will authenticate to the SaaS (i.e., arrow (ii) in Fig. 1(d)). In the last case, users will authenticate to the IDaaS (i.e., arrow (i) in Fig. 1(d)), which allows an SSO experience: one the user has authenticated to the IDaaS, he or she will grant access to all the SaaS integrated with this IDaaS.

This model is the most scalable for enterprises that wish to integrate with multiple SaaS. The enterprise does not need to support specific technologies or customized implementations for each SaaS. Since a single integration with the IDaaS can open the doors to multiple SaaS, the enterprise's resources invested in SaaS integration are drastically reduced. Nevertheless, this model strength is also its weakness: a single point of failure. If the IDaaS goes down (along with its slave nodes) or is compromised, the enterprise's users are down or compromised.

Cloud-based UC is becoming much broader than telephony, instant messaging and presence. Enterprises are consuming new innovative communication applications (often coming from the mass-market) in a SaaS mode, as for example social networks or applications for sharing and editing documents, presentations and calendars. According to a 2014 survey [31], which is based on 1,155 respondents involved in the purchase of corporate IT products and services, 90% of the employees from the responding organizations are using consumer services for work purposes. Thus, users in corporations can use UC services of very different nature through platforms from multiple vendors and cloud providers. In such fragmented landscape, a unified user experience is becoming more and more challenging due to the interoperability of competing providers. Users end up going from one provider to other, with a different user identity (and credentials) for each one. Each provider is a closed communication tool suite; if a user needs to communicate with a colleague of a different provider, he or she has to create an account for this provider.

To provide a real unified experience, user identity information can be the glue between different UC services: Alice will see Bob in her UC tools, no matter Bob is using the same tool as Alice or other UC platform. Third-party services can serve as the bridge between UC providers in both the enterprise's perimeters and on the cloud. These services, which are also known as UC federation solutions 1, provide an identity directory that allows seeking for users in different UC platforms. These solutions also need to translate different underlying technologies for presence, instant messaging and even voice in order to enable cross-provider user communications.

Identity-based cross-provider UC solutions are more complex than federation bridges between UC platforms. A full and enriched user unified experience will rely on a whole ecosystem involving corporations, cloud services, and other third-party services. To enlighten readers about this enriched unified experience, we illustrate a scenario and use case for identity-based cross-provider UC as follows. Fig. 2
                      shows the main high-level communication lines of this use case.


                     Step A: Bob is a customer from Company A that browses this company's website to get support. He first fills a ‘contact’ form with his name and an identifier (e.g. phone number or email address); he chooses to enter his identifier Y-ID, Y being his VoIP mass-market. As depicted in Fig. 2, Bob may want to use his identity on his preferred IdP on the Web to create his account on the Company A's website. Bob's identity is automatically created in the IdM solution of Company A, containing his name, Y-ID, and possibly other personal information provided by his IdP.

Bob begins to chat with Alice – an employee of the Company A's customer support department – through the company's webchat. Alice chooses her most convenient tool – Service X- to chat with Bob, which makes part of one of the company's on-premises UC tool suites. Alice does not need to enter her credentials into Service X; she is automatically logged in because she already authenticated to the intranet when she arrived to work. As the chat begins, Alice is provisioned with the identity of Bob, which is automatically added to her contact list. Likewise, Bob is able to see the company's certificate about Alice's identity on the webchat. Nevertheless, her identity does not contain any professional or personal information; Alice has chosen an anonymous identity that only asserts that she effectively works for Company A. To enable the communication between Bob and Alice, a UC bridge is carrying out the necessary conversions between the webchat and service X. This UC bridge solution may be integrated into the own Acm IdM platform or be a third-party service. At a given moment, Bob adds the voice feature to better discuss a specific issue, which is based on WebRTC. The federation bridge now translates the WebRTC session into a SIP session with Alice on the UC tool X.


                     Step B: To treat the demand from Bob, Alice has to get some information from operations. To this end, she stops the call with Bob and looks for Charlie (a guy from the operations) in the UC bridge's identity directory. She uses her UC tool X, and Charlie gets the call on his UC tool Z that is provided from the cloud. To communicate with Charlie, Alice chooses her complete identity (i.e., full name, job position, manager, etc.) from her company's IdM. Likewise, Charlie chooses his identity to show to Alice. Both Alice and Charlie are provisioned with each other's identity, and both of them trust their company's IdM. The federation bridge provides the necessary voice and chat technology translations.


                     Step C: Afterwards, as Alice has collected all the needed information, she wishes to contact Bob back. She first checks out Bob's presence on her UC tool X (as Bob is in her contacts with his Y-ID communication identifier). As Bob is available, Alice places a call to his communication tool from her UC tool X. Bob receives the call on his Y tool along with Alice's identity. This time, Alice has decided to present her name and professional contact information, since she has already had a talk with Bob. In this way, Bob will be able to directly contact Alice back without going through the Company A's website in the future.

This section outlines some identity features that enterprises and UCaaS providers should address to offer a more unified, personalized, and secure user experience in corporate communications. The illustrative use case described in Section 6 is taken by way of example for the following identity features:

In order to provide a unified user experience, IdM has necessarily to be independent from UC service providers. This separation between services and IdM enables a SSO experience to users. For example, in Fig. 2, Charlie may access to other services different from Service Z without having to re-authenticate, since he has already authenticated to his company's IdM. Moreover, cross-provider UC are much easier to deploy when service providers delegate user authentication, since users do not need to create an account in each UC platform. For example, Alice in Fig. 2 can place a call to Bob's service Y since this service accepts users identified by Alice's enterprise.

Enterprises should therefore take any of the IdM models discussed in Section 5 except for the “cloud identity” model in which cloud providers control user identities. Identity information does not necessarily have to reside inside the enterprise's network, and IDaaS can do IdM on behalf of the enterprise. Nevertheless, enterprises need to be able to govern IdM for UC regardless of the location of identity information (i.e., on-premises or off-premise).

Identity in communication services is not just about users but about any entity such as devices, agents and organizations that has relevance between the communicating parties, as pointed out by the Cloud Security Alliance (CSA) [16]. Rich user identities on the cloud enable services to offer a greater user personalization. For UC, such personalization will be a key force to attract enterprises towards the cloud.

Corporate communications should be able to handle multiple identities per user based on user preferences. Although behind a communication there is always an enterprise's employee (except automated calls for client support), the employee's role for each communication can vary based on the corporate context. Employees should therefore be capable to represent the role that is most suitable for each communication. For example, in Fig. 2, when Alice wishes to talk to a person in the operations department (i.e., intra-business communications), she may want to show her organizational identity, that is, her identity that contains information about her department, her manager and other employees that have a relationship with her, such as, team colleagues. Alice probably would choose a very different identity to talk to a customer (i.e., customer-to-business communications), either an anonymous identity or a minimal one containing her nickname and contact information. Fig. 3
                         shows typical identity roles in enterprises: individual, team, organizational structure, corporative services, and the enterprise itself. A team is a temporal organization or group of employees that is aimed to achieve a concrete goal. An organizational structure is a group of employees that has a permanent character and mission, as for example a department or division. Corporate services may be aimed at both customers and employees. Finally, the most general role, the enterprise, is the enterprise's brand identity.

As shown in Fig. 3, all the enterprise identities are interrelated; they do not make sense in an isolated way. A corporate service is for example provided by employees and/or teams that belong to organizational structures. An employee is part of organizational structures, services, and teams at the same time. All the enterprise identities are linked to the highest-level enterprise identity, that is, the enterprise itself. User identities should therefore be capable to express the interconnected relationships that characterize employee roles.

To sum up, we identify three key properties that user identities should enable: logical actors, nested identities, and multiple identities. A corporate identity is not only an employee but it may be a department, a team, a service or, in general, any logical entity that makes sense in a communication. Identities are not only flat structures but they can be nested. For example, a team's identity may include (by value or reference) the identities of the department that supports the team and the employees that take part in the team. Lastly, employees should be able to handle multiple identities. The employee will chose the identity role that is most suitable for each communication, or this decision will be left to corporate policies.

Due to the complex and inter-connected nature of corporate information systems, ease of integration is always a key factor for success. Thus, service providers should have it in mind to integrate with a corporate IdM. In Fig. 2, Services X and Z may integrate with the company IdM through the different models explained in Section 5, which will determine how Alice and Charlie, respectively, authenticate. If the IdM is kept on the enterprise premises, cloud providers must seamlessly connect with the corporate information IdM system such as LDAP directories and authentication technologies (e.g., Kerberos). Conversely, if IdM is delegated to the cloud, the enterprise should be able to apply the same policies as locally, thereby keeping its governance on identity information.

User identity information in enterprises commonly consists of attributes stored on centralized directories. Typical authentication protocols (e.g. Kerberos and public key certificates) that convey identity information to corporate services are inflexible on this information. This is due to the fact that protocol-specific data structures and formats define identity information, which is normally limited to user identifiers and group lists. Limited identity formats result in enterprise communications that are poorly enriched with identity information. For example, when an employee sends an email or makes a VoIP call, besides his communication identifier (e.g., phone number or email address), only his or her name, surname and group list are displayed.

Contrary to corporate services, cloud services typically rely on extensible data formats. SSO protocols such as OIDC and SAML define JSON and XML schemas that can be extended. The enterprise will have to provide each SaaS with the correct identity information, which involves translating this information to the format supported by each service. For example, in Fig. 2, the company IdM will have to generate Charlie's identity assertion from the information for Service Z. The format of identity assertion will be determined by the communication means and its requirements. For example, in Fig. 2(Step A), Alice's identity will probably be a simple sequence of bytes, since it will only be sent to the company website. However, when talking to Bob in Fig. 2(Step C), Alice's identity will be encoded in JSON or XML if Bob's service Z relies on a standard SSO protocol.

Enterprises may offer IdP functionality by means of some standard Web SSO protocol for letting third-parties to obtain identity assertions about their employees (e.g., Service Z used by Charlie in Fig. 2). Although the level of security established between enterprises and UCaaS will depend on each use case, a trust relationship between an enterprise's IdP and the UCaaS used by this enterprise will be always necessary. It will allow the enterprise apply policies on security, authorization, and auditing. Web SSO protocols for corporate Web services should inherit the authorization-oriented nature of typical centralized SSO in corporate networks. Enterprise applications that provide users with an SSO experience are tightly integrated with centralized authentication services. Corporate services are pre-configured to only communicate with the authentication services that they trust. Likewise, authentication services have a registry of the services authorized to communicate with them. A well-defined trust relationship between corporate services and their authentication services permits mutual authentication as well as the application of service authorization policies. Mutual authentication is commonly done by symmetric keys shared between services and authentication services (e.g., Kerberos secret keys). Authentication services can also cryptographically authenticate the user client (e.g., Kerberos long-term secret for clients). Apart from service authorization policies, authentication services normally participate in the user's authorization to the service by for example setting the data that allows the service to do authorization (e.g., roles, privileges, groups) or explicitly indicating the possible actions that the user can take in the service.

Enterprises that run IdM in their networks have legal obligations as regards the identity assertions that they provide. The enterprise must ensure that IdM is under appropriate control. Likewise, the enterprise will be legally responsible for any identity impersonation and indirectly for any fraud committed under such impersonation in SaaS.

The fact that the enterprise trusts a UCaaS to let its employees to communicate does not mean that the enterprise is willing to disclose any kind of identity information. In inter-enterprise communications, it is especially important that only the proper identity information concerning the communication is given in (since some enterprises collaborate but are competitors at the same time). An enterprise's employees may use a variety of SaaS solutions to communicate and they also may be in contact with different corporations. Thus, the enterprise will be likely to handle multiple data privacy filters based on the communication provider, the target user and, and his or her corporation. An enterprise may also generate anonymous user identities that do not contain at all personal identifiable information. User anonymity does not have to be however a synonymous of distrust. The recipient of an anonymous identity assertion can trust the fact that this assertion comes from the enterprise.

The decision about whether or not to provide some identity information might depend on high-level policy rules, on the employee, or on both of them. For example, in Fig. 2, the company A's IdM will generate different identity assertions for Charlie that communicates through Service Z. When Charlie talks to Alice, his assertion will contain information about the department and team of Charlie. If Charlie communicated with an external person, as for example a partner from other company, the IdM would remove any information about the company's organizational structure from Charlie's identity. Likewise, in Fig. 2, the IdM probably will trust more Service X that is on-premises than Service Z that resides on the cloud. Thus, the identity assertions for Service X may contain more detailed identity information than those for service Z.

Enterprise networks are controlled environments where administrators need to keep track of all user actions on the system (for auditing or even law compliance). Users need to be therefore uniquely identified for security and tracking purposes. Typical enterprise centralized SSO solutions such as those based on Kerberos or Microsoft Passport rely on unique, permanent user identifiers that enable user identity linking across corporate services. Nevertheless, in some communication scenarios (e.g., with customers or competing corporations), user identity unlinkability may be a requirement to prevent the cloud provider from tracking user activity.

Anonymous user identifiers (i.e., random and different for each communication) prevent any communication participant (or even the service provider) from tracking users across communications. Users may however be associated with user identifiers that are only different between service providers, or between enterprises. Such pseudonymous identifiers would only avoid that users are tracked across different providers or enterprises. However, each service provider or enterprise would still be able to link a user's identity assertions by his or her pseudonymous identifier to the same provider or enterprise.

As any cloud service, UCaaS that rely on WebRTC to offer Web-based real time communications need to be somehow provided with the enterprise IdM. This section outlines how the WebRTC identity model can fit into some of the identity models between corporations and cloud services described in Section 5. Although the WebRTC identity model may not satisfy the requirements of all use cases (for example, we showed in [25] that this model cannot satisfy some privacy requirements), this model offers a general architecture that provides interoperability and makes service deployment easier.

In line with the Web, WebRTC proposes an identity model for loosely-coupled Web services, by separating the service and identity functions into different providers [5], that is, the communication provider and the IdP, respectively. As depicted in Fig. 4
                     , when Alice wishes to call Bob, she authenticates to her IdP. Her browser obtains her identity assertion from the IdP and attaches this assertion to the call request. Bob will receive Alice's identity assertion on the signaling path and verify it against Alice's IdP. Contrary to legacy communications, user identities in WebRTC are independent from the signaling plane and there is no standard mechanism to identify users.

In WebRTC, any exchange between the browser and the IdP is transparent to the CP that becomes a mere forwarder of user identities on the signaling path. User browsers and IdPs communicate through Web SSO protocols such as OAuth2.0 and BrowserID in order to obtain and verify identity assertions (steps 1 and 4 in Fig. 4). For the CP, the SSO protocol used by the browser to interact with the IdP is transparent too. For the sake of protocol independence, a generic browser API is being defined for retrieving user assertions from IdPs and verifying these assertions [5]. This protocol defines JavaScript Object Notation (JSON)-based interactions between a PeerConnection object (that is, the browser object that manages the interactions with the remote peer) and an object called the IdP Proxy. An IdP Proxy is a piece of code that the user's browser downloads from a well-known URL in the IdP's domain. The IdP Proxy on the user's browser will interact with its IdP to obtain and verify user identities by means of some Web SSO protocol. Although the CP does not communicate with the IdP, its javascript can invoke the WebRTC setIdentityProvider() method to set the preferred IdP.
                        4
                     
                     
                        4
                        The value set by the setIdentityProvider() method will take precedence over any browser configuration for IdPs [3]
                        
                     
                  

As outlined above, WebRTC totally decouples communication providers (CPs) from IdM through IdPs, so as to trust between users is only built on an external entity, that is, the IdP. Thus, enterprises that access to WebRTC-based SaaS solutions must provide the IdP functionality in Fig. 4. This can imply two modes of IdM integration with the SaaS: “Web identity federation” and “IDaaS”. In the former, the enterprise provides user identity assertions to each SaaS, thereby taking a Web IdP role as depicted in Fig. 1(c). In the latter, other cloud service, that is, the IDaaS is in charge of providing the IdP functionality to each SaaS as shown in Fig. 1(d). Regardless of where the IdP is located (on-premises or off-premise), it will let WebRTC-based SaaS to authenticate the enterprise's employees as well as to obtain and verify their identity assertions.

WebRTC defines an identity model in which the CP is totally independent from the IdP, as discussed in Section 8. The WebRTC identity architecture has been designed for loosely-coupled Web services, not for the restricted and highly integrated corporate services. Integrating WebRTC into corporate scenarios introduce therefore new challenges in terms of IdM that have not yet been considered. Cloud providers that aim to offer enterprise-level WebRTC services will have to meet the corporate requirements described in Section 7, which are far from those of mass-market Web services. In particular, the chosen underlying SSO protocol used between the IdP and the UCaaS will impact the security and data expressiveness of the offered WebRTC service. In this section, we discuss the main impacts on the WebRTC identity model of the identity features introduced in Section 7.

The WebRTC identity model assumes that there is not any trust relationship between CPs and IdPs. This model does not therefore fit the requirements of corporate communication services regarding trust (see Section 7.5). An enterprise's IdP (either on-premises or provided as an IDaaS) should be able to authenticate UCaaS and so authorize its employees to communicate through them. Moreover, for auditing reasons, enterprises may need to have a record of the UCaaS used by its employees. For security reasons, it is also primordial that the enterprise trusts the cloud providers, since they can see all identity information exchanged on the signaling path. This is due to the fact that WebRTC identity assertions are included in SDP objects that are sent on clear (i.e., S/MIME encryption is not possible since end users may not have a prior public key exchange).

WebRTC providers should therefore have a pre-established relationship with the enterprise's IdP. It is therefore necessary to let UCaaS to send information to corporate IdPs so that the former can be properly identified and possibly authenticated. This approach is taken by authorization-oriented Web SSO protocols such as OAuth2.0 and OIDC. These protocols require services to be previously registered to IdPs to obtain a client identifier and optionally a secret. When a service redirects a user to an IdP for authentication, the service attaches its client identifier on the authentication request. This allows the IdP to verify its trust relationship with the service. Authorization-oriented SSO protocols do not fit smoothly into the current WebRTC identity model, because services and IdPs do not communicate (i.e., authentication requests are built on the browser by the own IdP's client code without any interaction with the CP).

To enable the application of authorization-oriented SSO protocols into the WebRTC identity model, it is necessary to enable passing CP information to the IdP. Thus, the corporate IdP will know the WebRTC-based UCaaS that its employees are using, thereby being capable to apply any authorization, auditing or billing policy for this service. We propose two simple modifications to the WebRTC API specifications and identity model that allow the CP to send information to the IdP. These modifications do not alter the identity architecture of WebRTC; the CP and IdP do not still interact to authenticate users. They simply permit the IdP Proxy object on the user browser to include CP parameters in authentication requests based on the target IdP. These modifications should be used along with the WebRTC setIdentityProvider() method that allows the CP to set the IdP for user authentication.
                           5
                        
                        
                           5
                           The value set by the setIdentityProvider() method will take precedence over any browser configuration for IdPs [3]
                           
                        
                     

First, we propose extending the PeerConnection object's interface that is being defined by the W3C in order to allow the CP, that is, the UCaaS, to configure the information to be passed to each IdP. This modification would consist in a new method like “setIdPParameter(idp_id,idp_p)” that would register the parameter idp_p to be sent to the IdP identified by idp_id. The syntax of this parameter would be opaque for the WebRTC PeerConnection, only the IdP and CP can understand it. For example, it may be a JSON object containing the CP client identifier and signature. When a user needs to be authenticated, the PeerConnection creates a SIGN message and sends it to the IdP Proxy. The PeerConnection includes all the parameters that have been set to the target IdP by means of the above-mentioned new method. To this end, we propose a second modification in order to extend SIGN messages to include CP information. Since SIGN messages are JSON objects, it is straightforward to define a new attribute for the CP information to the IdP. This new attribute will contain all the CP parameters set by the setIdPParameter method.

The fact that the current WebRTC identity model provides actually no way for IdPs to know the target of identity assertions hold back corporate security policies on identity information disclosure and user privacy (see Section 7.7 and 7.8). In this model, enterprises have no way to enforce recipient-based or UCaaS-based security or privacy policies. To address this requirement, authentication requests to IdPs should contain some information about the recipients of identity assertions (e.g., employee name and enterprise). Thus, the underling SSO protocol should be extended to support this information in authentication requests. Web SSO protocols such as OAuth2.0 and OIDC can be easily extended by defining new URL parameters to be included in the HTTP requests sent to the IdP.

Regarding identity unlinkability (see Section 7.8), the capability to set pseudonymous or anonymous user identifiers depends on the underlying SSO protocol's data format. WebRTC corporate services that require user privacy should therefore choose a SSO protocol that enable anonymous and pseudonymous user identifiers. BrowserID is not an option because it is limited to public email addresses and hence unable to provide identity unlinkability. Although OIDC defines how to generate pseudonymous identifiers, the specification should be modified to accept anonymous identifiers too. OAuth2.0 is independent from the identity data format and thus of user identifiers. Nevertheless, the fact that a SSO protocol supports anonymous identifiers is not a full guarantee for identity unlinkability. If personal identifiable information is included in identity assertions, any recipient could apply data analysis techniques to correlate user assertions.

Last but not least, to provide enriched corporate identities (see Section 7.2), enterprise IdPs will have to adopt identity formats that are flexible and extensible enough to represent the complex corporate relationships between identities. The data format of identity assertions depends on the IdP's SSO protocol. Fortunately, Web SSO protocols rely on extensible and protocol-independent formats such as XML and JSON.

@&#CONCLUSION@&#

User identity in UC is moving away from a simple telephony characteristic to become a core orchestrator of the various user communication means to provide a real unified user experience. UC are not only provided by on-premises equipment and tools, enterprises are integrating more and more UC solutions as SaaS. Corporate users can use every day different UC platforms coming from internal networks and the cloud. Identity management in UCaaS imposes critical security challenges to enterprises that are normally forced to completely delegate user identities to each service provider. The loss of control on identity data governance and IdM tasks may not be acceptable by the enterprise. Moreover, the integration with SaaS can bring unbearable burdens for IdM tasks in the enterprise as the number of SaaS that the enterprise integrates grows. Identity provisioning/de-provisioning, password management, user monitoring, and auditing can become too complex and time consuming for the enterprise IT.

We have discussed alternative models that define where identity information is stored and how it is propagated from the enterprise to the cloud. An enterprise's IdM may reside in the enterprise's network or on the cloud. Companies regulated through law enforcement will typically prefer on-premises solutions that provide controlled IdM under the enterprise walls. Small companies will be more willing to save cost by delegating IdM to a third-party. Nevertheless, the answer may not be either on-premises or off-premises IdM but both of them. Since enterprises have generally services that are more sensitive than others, business managers can chose to keep some of their UC on-premises and others on the cloud. Hybrid solutions combining cloud-based and on-premises IT infrastructure will adapt well to the over-time variable needs of large enterprises with multiple business units.

Furthermore, decoupling IdM from UCaaS providers is the first step to provide users with a unified experience, by connecting different UC platforms through user identities. Future UC either in enterprise premises or on the cloud will need to pivot on user identity to offer an enhanced user experience through different UC platforms. We have outlined several identity-related features that UCaaS should satisfy to meet the requirements of enterprises. We have also described how WebRTC-based UCaaS can meet these requirements in regard to the underlying SSO protocol. Since this technology is fundamental for Web-based business communications, it is necessary to further study its integration in corporations. As future work, we plan to implement the proposed adaptations of WebRTC and test them in the proposed identity models.

@&#REFERENCES@&#

